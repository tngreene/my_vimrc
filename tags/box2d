!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Add(b2Body* body)$/;"	f	class:b2Island	access:public	signature:(b2Body* body)
Add	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Add(b2Contact* contact)$/;"	f	class:b2Island	access:public	signature:(b2Contact* contact)
Add	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Add(b2Joint* joint)$/;"	f	class:b2Island	access:public	signature:(b2Joint* joint)
AddPair	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::AddPair(void* proxyUserDataA, void* proxyUserDataB)$/;"	f	class:b2ContactManager	signature:(void* proxyUserDataA, void* proxyUserDataB)
AddPair	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void AddPair(void* proxyUserDataA, void* proxyUserDataB);$/;"	p	class:b2ContactManager	access:public	signature:(void* proxyUserDataA, void* proxyUserDataB)
AddType	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn,$/;"	f	class:b2Contact	signature:(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn, b2Shape::Type type1, b2Shape::Type type2)
AddType	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destroyFcn,$/;"	p	class:b2Contact	access:protected	signature:(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destroyFcn, b2Shape::Type typeA, b2Shape::Type typeB)
Advance	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Advance(float32 alpha);$/;"	p	struct:b2Sweep	access:public	signature:(float32 alpha)
Advance	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline void b2Sweep::Advance(float32 alpha)$/;"	f	class:b2Sweep	signature:(float32 alpha)
Advance	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void Advance(float32 t);$/;"	p	class:b2Body	access:private	signature:(float32 t)
Advance	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::Advance(float32 alpha)$/;"	f	class:b2Body	signature:(float32 alpha)
Allocate	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^void* b2BlockAllocator::Allocate(int32 size)$/;"	f	class:b2BlockAllocator	signature:(int32 size)
Allocate	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	void* Allocate(int32 size);$/;"	p	class:b2BlockAllocator	access:public	signature:(int32 size)
Allocate	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^void* b2StackAllocator::Allocate(int32 size)$/;"	f	class:b2StackAllocator	signature:(int32 size)
Allocate	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	void* Allocate(int32 size);$/;"	p	class:b2StackAllocator	access:public	signature:(int32 size)
AllocateNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::AllocateNode()$/;"	f	class:b2DynamicTree	signature:()
AllocateNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 AllocateNode();$/;"	p	class:b2DynamicTree	access:private	signature:()
AppendFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^void b2Draw::AppendFlags(uint32 flags)$/;"	f	class:b2Draw	signature:(uint32 flags)
AppendFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void AppendFlags(uint32 flags);$/;"	p	class:b2Draw	access:public	signature:(uint32 flags)
ApplyAngularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyAngularImpulse(float32 impulse, bool wake);$/;"	p	class:b2Body	access:public	signature:(float32 impulse, bool wake)
ApplyAngularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyAngularImpulse(float32 impulse, bool wake)$/;"	f	class:b2Body	signature:(float32 impulse, bool wake)
ApplyForce	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyForce(const b2Vec2& force, const b2Vec2& point, bool wake);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& force, const b2Vec2& point, bool wake)
ApplyForce	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyForce(const b2Vec2& force, const b2Vec2& point, bool wake)$/;"	f	class:b2Body	signature:(const b2Vec2& force, const b2Vec2& point, bool wake)
ApplyForceToCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyForceToCenter(const b2Vec2& force, bool wake);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& force, bool wake)
ApplyForceToCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyForceToCenter(const b2Vec2& force, bool wake)$/;"	f	class:b2Body	signature:(const b2Vec2& force, bool wake)
ApplyLinearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point, bool wake);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& impulse, const b2Vec2& point, bool wake)
ApplyLinearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point, bool wake)$/;"	f	class:b2Body	signature:(const b2Vec2& impulse, const b2Vec2& point, bool wake)
ApplyTorque	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyTorque(float32 torque, bool wake);$/;"	p	class:b2Body	access:public	signature:(float32 torque, bool wake)
ApplyTorque	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyTorque(float32 torque, bool wake)$/;"	f	class:b2Body	signature:(float32 torque, bool wake)
B2_BLOCK_ALLOCATOR_H	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	20;"	d
B2_BODY_H	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	20;"	d
B2_BROAD_PHASE_H	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	20;"	d
B2_CHAIN_AND_CIRCLE_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	20;"	d
B2_CHAIN_AND_POLYGON_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	20;"	d
B2_CHAIN_SHAPE_H	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	20;"	d
B2_CIRCLE_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	20;"	d
B2_CIRCLE_SHAPE_H	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	20;"	d
B2_COLLISION_H	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	20;"	d
B2_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	20;"	d
B2_CONTACT_MANAGER_H	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	20;"	d
B2_CONTACT_SOLVER_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	20;"	d
B2_DEBUG_SOLVER	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	27;"	d	file:
B2_DISTANCE_H	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	21;"	d
B2_DISTANCE_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	20;"	d
B2_DRAW_H	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	20;"	d
B2_DYNAMIC_TREE_H	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	20;"	d
B2_EDGE_AND_CIRCLE_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	20;"	d
B2_EDGE_AND_POLYGON_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	20;"	d
B2_EDGE_SHAPE_H	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	20;"	d
B2_FIXTURE_H	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	20;"	d
B2_FRICTION_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	20;"	d
B2_GEAR_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	20;"	d
B2_GROWABLE_STACK_H	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	20;"	d
B2_ISLAND_H	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	20;"	d
B2_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	20;"	d
B2_MATH_H	C:\Box2D\Box2D\Box2D\Common\b2Math.h	20;"	d
B2_MOTOR_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	20;"	d
B2_MOUSE_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	20;"	d
B2_NOT_USED	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	26;"	d
B2_POLYGON_AND_CIRCLE_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	20;"	d
B2_POLYGON_CONTACT_H	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	20;"	d
B2_POLYGON_SHAPE_H	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	20;"	d
B2_PRISMATIC_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	20;"	d
B2_PULLEY_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	20;"	d
B2_REVOLUTE_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	20;"	d
B2_ROPE_H	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	20;"	d
B2_ROPE_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	20;"	d
B2_SETTINGS_H	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	20;"	d
B2_SHAPE_H	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	20;"	d
B2_STACK_ALLOCATOR_H	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	20;"	d
B2_TIMER_H	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	20;"	d
B2_TIME_OF_IMPACT_H	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	20;"	d
B2_TIME_STEP_H	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	20;"	d
B2_WELD_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	20;"	d
B2_WHEEL_JOINT_H	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	20;"	d
B2_WORLD_CALLBACKS_H	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	20;"	d
B2_WORLD_H	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	20;"	d
BOX2D_H	C:\Box2D\Box2D\Box2D\Box2D.h	20;"	d
Balance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::Balance(int32 iA)$/;"	f	class:b2DynamicTree	signature:(int32 iA)
Balance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 Balance(int32 index);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 index)
BeginContact	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void BeginContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact)
BufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::BufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
BufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void BufferMove(int32 proxyId);$/;"	p	class:b2BroadPhase	access:private	signature:(int32 proxyId)
Clear	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::Clear()$/;"	f	class:b2ChainShape	signature:()
Clear	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void Clear();$/;"	p	class:b2ChainShape	access:public	signature:()
Clear	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^void b2BlockAllocator::Clear()$/;"	f	class:b2BlockAllocator	signature:()
Clear	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	void Clear();$/;"	p	class:b2BlockAllocator	access:public	signature:()
Clear	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Clear()$/;"	f	class:b2Island	access:public	signature:()
ClearFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^void b2Draw::ClearFlags(uint32 flags)$/;"	f	class:b2Draw	signature:(uint32 flags)
ClearFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void ClearFlags(uint32 flags);$/;"	p	class:b2Draw	access:public	signature:(uint32 flags)
ClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::ClearForces()$/;"	f	class:b2World	signature:()
ClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void ClearForces();$/;"	p	class:b2World	access:public	signature:()
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^b2Shape* b2ChainShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2ChainShape	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^b2Shape* b2CircleShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2CircleShape	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2CircleShape	access:public	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^b2Shape* b2EdgeShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2EdgeShape	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2EdgeShape	access:public	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^b2Shape* b2PolygonShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2PolygonShape	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2PolygonShape	access:public	signature:(b2BlockAllocator* allocator) const
Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual b2Shape* Clone(b2BlockAllocator* allocator) const = 0;$/;"	p	class:b2Shape	access:public	signature:(b2BlockAllocator* allocator) const
Collide	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	void Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	p	struct:b2EPCollider	file:	access:public	signature:(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2PolygonShape* polygonB, const b2Transform& xfB)
Collide	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^void b2EPCollider::Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	f	class:b2EPCollider	signature:(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2PolygonShape* polygonB, const b2Transform& xfB)
Collide	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::Collide()$/;"	f	class:b2ContactManager	signature:()
Collide	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void Collide();$/;"	p	class:b2ContactManager	access:public	signature:()
Combine	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	void Combine(const b2AABB& aabb)$/;"	f	struct:b2AABB	access:public	signature:(const b2AABB& aabb)
Combine	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	void Combine(const b2AABB& aabb1, const b2AABB& aabb2)$/;"	f	struct:b2AABB	access:public	signature:(const b2AABB& aabb1, const b2AABB& aabb2)
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2ChainShape	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^void b2CircleShape::ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const$/;"	f	class:b2CircleShape	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2CircleShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^void b2EdgeShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2EdgeShape	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2EdgeShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2PolygonShape	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2PolygonShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual void ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const = 0;$/;"	p	class:b2Shape	access:public	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
ComputeCentroid	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^static b2Vec2 ComputeCentroid(const b2Vec2* vs, int32 count)$/;"	f	file:	signature:(const b2Vec2* vs, int32 count)
ComputeEdgeSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2EPAxis ComputeEdgeSeparation();$/;"	p	struct:b2EPCollider	file:	access:public	signature:()
ComputeEdgeSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputeEdgeSeparation()$/;"	f	class:b2EPCollider	signature:()
ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight() const$/;"	f	class:b2DynamicTree	signature:() const
ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight(int32 nodeId) const$/;"	f	class:b2DynamicTree	signature:(int32 nodeId) const
ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 ComputeHeight() const;$/;"	p	class:b2DynamicTree	access:private	signature:() const
ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 ComputeHeight(int32 nodeId) const;$/;"	p	class:b2DynamicTree	access:private	signature:(int32 nodeId) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2ChainShape	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^void b2CircleShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2CircleShape	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2CircleShape	access:public	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^void b2EdgeShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2EdgeShape	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2EdgeShape	access:public	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2PolygonShape	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2PolygonShape	access:public	signature:(b2MassData* massData, float32 density) const
ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual void ComputeMass(b2MassData* massData, float32 density) const = 0;$/;"	p	class:b2Shape	access:public	signature:(b2MassData* massData, float32 density) const
ComputePolygonSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2EPAxis ComputePolygonSeparation();$/;"	p	struct:b2EPCollider	file:	access:public	signature:()
ComputePolygonSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputePolygonSeparation()$/;"	f	class:b2EPCollider	signature:()
Contains	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	bool Contains(const b2AABB& aabb) const$/;"	f	struct:b2AABB	access:public	signature:(const b2AABB& aabb) const
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^b2Contact* b2ChainAndCircleContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2ChainAndCircleContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^b2Contact* b2ChainAndPolygonContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^b2Contact* b2CircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2CircleContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^b2Contact* b2Contact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2Contact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static b2Contact* Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	access:protected	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^b2Contact* b2EdgeAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^b2Contact* b2EdgeAndPolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^b2Contact* b2PolygonAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	static b2Contact* Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^b2Contact* b2PolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2PolygonContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^b2Joint* b2Joint::Create(const b2JointDef* def, b2BlockAllocator* allocator)$/;"	f	class:b2Joint	signature:(const b2JointDef* def, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	static b2Joint* Create(const b2JointDef* def, b2BlockAllocator* allocator);$/;"	p	class:b2Joint	access:protected	signature:(const b2JointDef* def, b2BlockAllocator* allocator)
Create	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)$/;"	f	class:b2Fixture	signature:(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)
Create	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def);$/;"	p	class:b2Fixture	access:protected	signature:(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)
CreateBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2Body* b2World::CreateBody(const b2BodyDef* def)$/;"	f	class:b2World	signature:(const b2BodyDef* def)
CreateBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Body* CreateBody(const b2BodyDef* def);$/;"	p	class:b2World	access:public	signature:(const b2BodyDef* def)
CreateChain	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape	signature:(const b2Vec2* vertices, int32 count)
CreateChain	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void CreateChain(const b2Vec2* vertices, int32 count);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2* vertices, int32 count)
CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)$/;"	f	class:b2Body	signature:(const b2FixtureDef* def)
CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)$/;"	f	class:b2Body	signature:(const b2Shape* shape, float32 density)
CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* CreateFixture(const b2FixtureDef* def);$/;"	p	class:b2Body	access:public	signature:(const b2FixtureDef* def)
CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* CreateFixture(const b2Shape* shape, float32 density);$/;"	p	class:b2Body	access:public	signature:(const b2Shape* shape, float32 density)
CreateJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2Joint* b2World::CreateJoint(const b2JointDef* def)$/;"	f	class:b2World	signature:(const b2JointDef* def)
CreateJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Joint* CreateJoint(const b2JointDef* def);$/;"	p	class:b2World	access:public	signature:(const b2JointDef* def)
CreateLoop	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape	signature:(const b2Vec2* vertices, int32 count)
CreateLoop	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void CreateLoop(const b2Vec2* vertices, int32 count);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2* vertices, int32 count)
CreateProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf)$/;"	f	class:b2Fixture	signature:(b2BroadPhase* broadPhase, const b2Transform& xf)
CreateProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf);$/;"	p	class:b2Fixture	access:protected	signature:(b2BroadPhase* broadPhase, const b2Transform& xf)
CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^int32 b2BroadPhase::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2BroadPhase	signature:(const b2AABB& aabb, void* userData)
CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 CreateProxy(const b2AABB& aabb, void* userData);$/;"	p	class:b2BroadPhase	access:public	signature:(const b2AABB& aabb, void* userData)
CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2DynamicTree	signature:(const b2AABB& aabb, void* userData)
CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 CreateProxy(const b2AABB& aabb, void* userData);$/;"	p	class:b2DynamicTree	access:public	signature:(const b2AABB& aabb, void* userData)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2ChainAndCircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^void b2CircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2CircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2Contact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	access:protected	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void Destroy(b2Contact* contact, b2Shape::Type typeA, b2Shape::Type typeB, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	access:protected	signature:(b2Contact* contact, b2Shape::Type typeA, b2Shape::Type typeB, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^void b2PolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^void b2Joint::Destroy(b2Joint* joint, b2BlockAllocator* allocator)$/;"	f	class:b2Joint	signature:(b2Joint* joint, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	static void Destroy(b2Joint* joint, b2BlockAllocator* allocator);$/;"	p	class:b2Joint	access:protected	signature:(b2Joint* joint, b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::Destroy(b2Contact* c)$/;"	f	class:b2ContactManager	signature:(b2Contact* c)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void Destroy(b2Contact* c);$/;"	p	class:b2ContactManager	access:public	signature:(b2Contact* c)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Destroy(b2BlockAllocator* allocator)$/;"	f	class:b2Fixture	signature:(b2BlockAllocator* allocator)
Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Destroy(b2BlockAllocator* allocator);$/;"	p	class:b2Fixture	access:protected	signature:(b2BlockAllocator* allocator)
DestroyBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DestroyBody(b2Body* b)$/;"	f	class:b2World	signature:(b2Body* b)
DestroyBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DestroyBody(b2Body* body);$/;"	p	class:b2World	access:public	signature:(b2Body* body)
DestroyFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::DestroyFixture(b2Fixture* fixture)$/;"	f	class:b2Body	signature:(b2Fixture* fixture)
DestroyFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void DestroyFixture(b2Fixture* fixture);$/;"	p	class:b2Body	access:public	signature:(b2Fixture* fixture)
DestroyJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DestroyJoint(b2Joint* j)$/;"	f	class:b2World	signature:(b2Joint* j)
DestroyJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DestroyJoint(b2Joint* joint);$/;"	p	class:b2World	access:public	signature:(b2Joint* joint)
DestroyProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::DestroyProxies(b2BroadPhase* broadPhase)$/;"	f	class:b2Fixture	signature:(b2BroadPhase* broadPhase)
DestroyProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void DestroyProxies(b2BroadPhase* broadPhase);$/;"	p	class:b2Fixture	access:protected	signature:(b2BroadPhase* broadPhase)
DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::DestroyProxy(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void DestroyProxy(int32 proxyId);$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId)
DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::DestroyProxy(int32 proxyId)$/;"	f	class:b2DynamicTree	signature:(int32 proxyId)
DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void DestroyProxy(int32 proxyId);$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId)
Draw	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::Draw(b2Draw* draw) const$/;"	f	class:b2Rope	signature:(b2Draw* draw) const
Draw	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void Draw(b2Draw* draw) const;$/;"	p	class:b2Rope	access:public	signature:(b2Draw* draw) const
DrawCircle	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawCircle(const b2Vec2& center, float32 radius, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2& center, float32 radius, const b2Color& color)
DrawDebugData	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DrawDebugData()$/;"	f	class:b2World	signature:()
DrawDebugData	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DrawDebugData();$/;"	p	class:b2World	access:public	signature:()
DrawJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DrawJoint(b2Joint* joint)$/;"	f	class:b2World	signature:(b2Joint* joint)
DrawJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DrawJoint(b2Joint* joint);$/;"	p	class:b2World	access:private	signature:(b2Joint* joint)
DrawPolygon	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2* vertices, int32 vertexCount, const b2Color& color)
DrawSegment	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawSegment(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color)
DrawShape	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DrawShape(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)$/;"	f	class:b2World	signature:(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)
DrawShape	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DrawShape(b2Fixture* shape, const b2Transform& xf, const b2Color& color);$/;"	p	class:b2World	access:private	signature:(b2Fixture* shape, const b2Transform& xf, const b2Color& color)
DrawSolidCircle	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawSolidCircle(const b2Vec2& center, float32 radius, const b2Vec2& axis, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2& center, float32 radius, const b2Vec2& axis, const b2Color& color)
DrawSolidPolygon	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawSolidPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2* vertices, int32 vertexCount, const b2Color& color)
DrawTransform	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawTransform(const b2Transform& xf) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Transform& xf)
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJoint::Dump()$/;"	f	class:b2DistanceJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void Dump();$/;"	p	class:b2DistanceJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::Dump()$/;"	f	class:b2FrictionJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void Dump();$/;"	p	class:b2FrictionJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::Dump()$/;"	f	class:b2GearJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void Dump();$/;"	p	class:b2GearJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void Dump() { b2Log("\/\/ Dump is not supported for this joint type.\\n"); }$/;"	f	class:b2Joint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::Dump()$/;"	f	class:b2MotorJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void Dump();$/;"	p	class:b2MotorJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void Dump() { b2Log("Mouse joint dumping is not supported.\\n"); }$/;"	f	class:b2MouseJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::Dump()$/;"	f	class:b2PrismaticJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void Dump();$/;"	p	class:b2PrismaticJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::Dump()$/;"	f	class:b2PulleyJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void Dump();$/;"	p	class:b2PulleyJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::Dump()$/;"	f	class:b2RevoluteJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void Dump();$/;"	p	class:b2RevoluteJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^void b2RopeJoint::Dump()$/;"	f	class:b2RopeJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void Dump();$/;"	p	class:b2RopeJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJoint::Dump()$/;"	f	class:b2WeldJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void Dump();$/;"	p	class:b2WeldJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::Dump()$/;"	f	class:b2WheelJoint	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void Dump();$/;"	p	class:b2WheelJoint	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::Dump()$/;"	f	class:b2Body	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void Dump();$/;"	p	class:b2Body	access:public	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Dump(int32 bodyIndex)$/;"	f	class:b2Fixture	signature:(int32 bodyIndex)
Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Dump(int32 bodyIndex);$/;"	p	class:b2Fixture	access:public	signature:(int32 bodyIndex)
Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::Dump()$/;"	f	class:b2World	signature:()
Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void Dump();$/;"	p	class:b2World	access:public	signature:()
EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableLimit(bool flag)$/;"	f	class:b2PrismaticJoint	signature:(bool flag)
EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void EnableLimit(bool flag);$/;"	p	class:b2PrismaticJoint	access:public	signature:(bool flag)
EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableLimit(bool flag)$/;"	f	class:b2RevoluteJoint	signature:(bool flag)
EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void EnableLimit(bool flag);$/;"	p	class:b2RevoluteJoint	access:public	signature:(bool flag)
EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableMotor(bool flag)$/;"	f	class:b2PrismaticJoint	signature:(bool flag)
EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void EnableMotor(bool flag);$/;"	p	class:b2PrismaticJoint	access:public	signature:(bool flag)
EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableMotor(bool flag)$/;"	f	class:b2RevoluteJoint	signature:(bool flag)
EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void EnableMotor(bool flag);$/;"	p	class:b2RevoluteJoint	access:public	signature:(bool flag)
EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::EnableMotor(bool flag)$/;"	f	class:b2WheelJoint	signature:(bool flag)
EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void EnableMotor(bool flag);$/;"	p	class:b2WheelJoint	access:public	signature:(bool flag)
EndContact	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void EndContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact)
Evaluate	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	float32 Evaluate(int32 indexA, int32 indexB, float32 t) const$/;"	f	struct:b2SeparationFunction	access:public	signature:(int32 indexA, int32 indexB, float32 t) const
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2ChainAndCircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^void b2CircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2CircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2CircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	virtual void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB) = 0;$/;"	p	class:b2Contact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^void b2PolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2PolygonContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
FindMinSeparation	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	float32 FindMinSeparation(int32* indexA, int32* indexB, float32 t) const$/;"	f	struct:b2SeparationFunction	access:public	signature:(int32* indexA, int32* indexB, float32 t) const
FindNewContacts	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::FindNewContacts()$/;"	f	class:b2ContactManager	signature:()
FindNewContacts	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void FindNewContacts();$/;"	p	class:b2ContactManager	access:public	signature:()
FlagForFiltering	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void FlagForFiltering();$/;"	p	class:b2Contact	access:protected	signature:()
FlagForFiltering	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact	signature:()
Free	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^void b2BlockAllocator::Free(void* p, int32 size)$/;"	f	class:b2BlockAllocator	signature:(void* p, int32 size)
Free	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	void Free(void* p, int32 size);$/;"	p	class:b2BlockAllocator	access:public	signature:(void* p, int32 size)
Free	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^void b2StackAllocator::Free(void* p)$/;"	f	class:b2StackAllocator	signature:(void* p)
Free	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	void Free(void* p);$/;"	p	class:b2StackAllocator	access:public	signature:(void* p)
FreeNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::FreeNode(int32 nodeId)$/;"	f	class:b2DynamicTree	signature:(int32 nodeId)
FreeNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void FreeNode(int32 node);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 node)
GetAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2AABB& GetAABB(int32 childIndex) const;$/;"	p	class:b2Fixture	access:public	signature:(int32 childIndex) const
GetAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2AABB& b2Fixture::GetAABB(int32 childIndex) const$/;"	f	class:b2Fixture	signature:(int32 childIndex) const
GetAllowSleeping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetAllowSleeping() const { return m_allowSleep; }$/;"	f	class:b2World	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorA() const$/;"	f	class:b2DistanceJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorA() const$/;"	f	class:b2FrictionJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorA() const$/;"	f	class:b2GearJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2GearJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual b2Vec2 GetAnchorA() const = 0;$/;"	p	class:b2Joint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetAnchorA() const$/;"	f	class:b2MotorJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorA() const$/;"	f	class:b2MouseJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorA() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorA() const$/;"	f	class:b2PulleyJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorA() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorA() const$/;"	f	class:b2RopeJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorA() const$/;"	f	class:b2WeldJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2WeldJoint	access:public	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorA() const$/;"	f	class:b2WheelJoint	signature:() const
GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorB() const$/;"	f	class:b2DistanceJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorB() const$/;"	f	class:b2FrictionJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorB() const$/;"	f	class:b2GearJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2GearJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual b2Vec2 GetAnchorB() const = 0;$/;"	p	class:b2Joint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetAnchorB() const$/;"	f	class:b2MotorJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorB() const$/;"	f	class:b2MouseJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorB() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorB() const$/;"	f	class:b2PulleyJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorB() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorB() const$/;"	f	class:b2RopeJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorB() const$/;"	f	class:b2WeldJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2WeldJoint	access:public	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorB() const$/;"	f	class:b2WheelJoint	signature:() const
GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetAngle	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 GetAngle() const$/;"	f	struct:b2Rot	access:public	signature:() const
GetAngle	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetAngle() const;$/;"	p	class:b2Body	access:public	signature:() const
GetAngle	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetAngle() const$/;"	f	class:b2Body	signature:() const
GetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetAngularDamping() const;$/;"	p	class:b2Body	access:public	signature:() const
GetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetAngularDamping() const$/;"	f	class:b2Body	signature:() const
GetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetAngularOffset() const$/;"	f	class:b2MotorJoint	signature:() const
GetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetAngularOffset() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetAngularVelocity() const;$/;"	p	class:b2Body	access:public	signature:() const
GetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetAngularVelocity() const$/;"	f	class:b2Body	signature:() const
GetAreaRatio	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^float32 b2DynamicTree::GetAreaRatio() const$/;"	f	class:b2DynamicTree	signature:() const
GetAreaRatio	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	float32 GetAreaRatio() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
GetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetAutoClearForces() const;$/;"	p	class:b2World	access:public	signature:() const
GetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline bool b2World::GetAutoClearForces() const$/;"	f	class:b2World	signature:() const
GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Body* GetBody();$/;"	p	class:b2Fixture	access:public	signature:()
GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Body* GetBody() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Body* b2Fixture::GetBody()$/;"	f	class:b2Fixture	signature:()
GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Body* b2Fixture::GetBody() const$/;"	f	class:b2Fixture	signature:() const
GetBodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* GetBodyA();$/;"	p	class:b2Joint	access:public	signature:()
GetBodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2Body* b2Joint::GetBodyA()$/;"	f	class:b2Joint	signature:()
GetBodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* GetBodyB();$/;"	p	class:b2Joint	access:public	signature:()
GetBodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2Body* b2Joint::GetBodyB()$/;"	f	class:b2Joint	signature:()
GetBodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetBodyCount() const;$/;"	p	class:b2World	access:public	signature:() const
GetBodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline int32 b2World::GetBodyCount() const$/;"	f	class:b2World	signature:() const
GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Body* GetBodyList();$/;"	p	class:b2World	access:public	signature:()
GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Body* GetBodyList() const;$/;"	p	class:b2World	access:public	signature:() const
GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Body* b2World::GetBodyList()$/;"	f	class:b2World	signature:()
GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Body* b2World::GetBodyList() const$/;"	f	class:b2World	signature:() const
GetCenter	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 GetCenter() const$/;"	f	struct:b2AABB	access:public	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^int32 b2ChainShape::GetChildCount() const$/;"	f	class:b2ChainShape	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2ChainShape	access:public	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^int32 b2CircleShape::GetChildCount() const$/;"	f	class:b2CircleShape	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2CircleShape	access:public	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^int32 b2EdgeShape::GetChildCount() const$/;"	f	class:b2EdgeShape	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2EdgeShape	access:public	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^int32 b2PolygonShape::GetChildCount() const$/;"	f	class:b2PolygonShape	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2PolygonShape	access:public	signature:() const
GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual int32 GetChildCount() const = 0;$/;"	p	class:b2Shape	access:public	signature:() const
GetChildEdge	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::GetChildEdge(b2EdgeShape* edge, int32 index) const$/;"	f	class:b2ChainShape	signature:(b2EdgeShape* edge, int32 index) const
GetChildEdge	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void GetChildEdge(b2EdgeShape* edge, int32 index) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2EdgeShape* edge, int32 index) const
GetChildIndexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 GetChildIndexA() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetChildIndexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact	signature:() const
GetChildIndexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 GetChildIndexB() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetChildIndexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact	signature:() const
GetClosestPoint	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 GetClosestPoint() const$/;"	f	struct:b2Simplex	access:public	signature:() const
GetCollideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool GetCollideConnected() const;$/;"	p	class:b2Joint	access:public	signature:() const
GetCollideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline bool b2Joint::GetCollideConnected() const$/;"	f	class:b2Joint	signature:() const
GetContactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetContactCount() const;$/;"	p	class:b2World	access:public	signature:() const
GetContactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline int32 b2World::GetContactCount() const$/;"	f	class:b2World	signature:() const
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2ContactEdge* GetContactList();$/;"	p	class:b2Body	access:public	signature:()
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2ContactEdge* GetContactList() const;$/;"	p	class:b2Body	access:public	signature:() const
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2ContactEdge* b2Body::GetContactList()$/;"	f	class:b2Body	signature:()
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2ContactEdge* b2Body::GetContactList() const$/;"	f	class:b2Body	signature:() const
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Contact* GetContactList();$/;"	p	class:b2World	access:public	signature:()
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Contact* GetContactList() const;$/;"	p	class:b2World	access:public	signature:() const
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Contact* b2World::GetContactList()$/;"	f	class:b2World	signature:()
GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Contact* b2World::GetContactList() const$/;"	f	class:b2World	signature:() const
GetContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2ContactManager& GetContactManager() const;$/;"	p	class:b2World	access:public	signature:() const
GetContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2ContactManager& b2World::GetContactManager() const$/;"	f	class:b2World	signature:() const
GetContinuousPhysics	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetContinuousPhysics() const { return m_continuousPhysics; }$/;"	f	class:b2World	access:public	signature:() const
GetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetCorrectionFactor() const$/;"	f	class:b2MotorJoint	signature:() const
GetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetCorrectionFactor() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetCount	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	int32 GetCount()$/;"	f	class:b2GrowableStack	access:public	signature:()
GetCurrentLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetCurrentLengthA() const$/;"	f	class:b2PulleyJoint	signature:() const
GetCurrentLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetCurrentLengthA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetCurrentLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetCurrentLengthB() const$/;"	f	class:b2PulleyJoint	signature:() const
GetCurrentLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetCurrentLengthB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetDampingRatio() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetDampingRatio() const$/;"	f	class:b2DistanceJoint	signature:() const
GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetDampingRatio() const$/;"	f	class:b2MouseJoint	signature:() const
GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetDampingRatio() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetDampingRatio() const { return m_dampingRatio; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
GetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 GetDensity() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline float32 b2Fixture::GetDensity() const$/;"	f	class:b2Fixture	signature:() const
GetExtents	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 GetExtents() const$/;"	f	struct:b2AABB	access:public	signature:() const
GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	const b2AABB& GetFatAABB(int32 proxyId) const;$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId) const
GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline const b2AABB& b2BroadPhase::GetFatAABB(int32 proxyId) const$/;"	f	class:b2BroadPhase	signature:(int32 proxyId) const
GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	const b2AABB& GetFatAABB(int32 proxyId) const;$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId) const
GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const$/;"	f	class:b2DynamicTree	signature:(int32 proxyId) const
GetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Filter& GetFilterData() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Filter& b2Fixture::GetFilterData() const$/;"	f	class:b2Fixture	signature:() const
GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* GetFixtureA();$/;"	p	class:b2Contact	access:public	signature:()
GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Fixture* GetFixtureA() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact	signature:()
GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact	signature:() const
GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* GetFixtureB();$/;"	p	class:b2Contact	access:public	signature:()
GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Fixture* GetFixtureB() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact	signature:()
GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact	signature:() const
GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* GetFixtureList();$/;"	p	class:b2Body	access:public	signature:()
GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Fixture* GetFixtureList() const;$/;"	p	class:b2Body	access:public	signature:() const
GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Fixture* b2Body::GetFixtureList()$/;"	f	class:b2Body	signature:()
GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Fixture* b2Body::GetFixtureList() const$/;"	f	class:b2Body	signature:() const
GetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^uint32 b2Draw::GetFlags() const$/;"	f	class:b2Draw	signature:() const
GetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	uint32 GetFlags() const;$/;"	p	class:b2Draw	access:public	signature:() const
GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetFrequency() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetFrequency() const$/;"	f	class:b2DistanceJoint	signature:() const
GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetFrequency() const$/;"	f	class:b2MouseJoint	signature:() const
GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetFrequency() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetFrequency() const { return m_frequencyHz; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 GetFriction() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact	signature:() const
GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 GetFriction() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline float32 b2Fixture::GetFriction() const$/;"	f	class:b2Fixture	signature:() const
GetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Vec2 GetGravity() const;$/;"	p	class:b2World	access:public	signature:() const
GetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Vec2 b2World::GetGravity() const$/;"	f	class:b2World	signature:() const
GetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetGravityScale() const;$/;"	p	class:b2Body	access:public	signature:() const
GetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetGravityScale() const$/;"	f	class:b2Body	signature:() const
GetGroundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorA() const$/;"	f	class:b2PulleyJoint	signature:() const
GetGroundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetGroundAnchorA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetGroundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorB() const$/;"	f	class:b2PulleyJoint	signature:() const
GetGroundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetGroundAnchorB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::GetHeight() const$/;"	f	class:b2DynamicTree	signature:() const
GetHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 GetHeight() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
GetInertia	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetInertia() const;$/;"	p	class:b2Body	access:public	signature:() const
GetInertia	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetInertia() const$/;"	f	class:b2Body	signature:() const
GetInverse	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22 GetInverse() const$/;"	f	struct:b2Mat22	access:public	signature:() const
GetInverse22	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^void b2Mat33::GetInverse22(b2Mat33* M) const$/;"	f	class:b2Mat33	signature:(b2Mat33* M) const
GetInverse22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void GetInverse22(b2Mat33* M) const;$/;"	p	struct:b2Mat33	access:public	signature:(b2Mat33* M) const
GetJoint1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* GetJoint1() { return m_joint1; }$/;"	f	class:b2GearJoint	access:public	signature:()
GetJoint2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* GetJoint2() { return m_joint2; }$/;"	f	class:b2GearJoint	access:public	signature:()
GetJointAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointAngle() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetJointAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetJointAngle() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetJointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetJointCount() const;$/;"	p	class:b2World	access:public	signature:() const
GetJointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline int32 b2World::GetJointCount() const$/;"	f	class:b2World	signature:() const
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2JointEdge* GetJointList();$/;"	p	class:b2Body	access:public	signature:()
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2JointEdge* GetJointList() const;$/;"	p	class:b2Body	access:public	signature:() const
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2JointEdge* b2Body::GetJointList()$/;"	f	class:b2Body	signature:()
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2JointEdge* b2Body::GetJointList() const$/;"	f	class:b2Body	signature:() const
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Joint* GetJointList();$/;"	p	class:b2World	access:public	signature:()
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Joint* GetJointList() const;$/;"	p	class:b2World	access:public	signature:() const
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Joint* b2World::GetJointList()$/;"	f	class:b2World	signature:()
GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Joint* b2World::GetJointList() const$/;"	f	class:b2World	signature:() const
GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointSpeed() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetJointSpeed() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointSpeed() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetJointSpeed() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointSpeed() const$/;"	f	class:b2WheelJoint	signature:() const
GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetJointSpeed() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointTranslation() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetJointTranslation() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointTranslation() const$/;"	f	class:b2WheelJoint	signature:() const
GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetJointTranslation() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetLength() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
GetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetLength() const$/;"	f	class:b2DistanceJoint	signature:() const
GetLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthA() const$/;"	f	class:b2PulleyJoint	signature:() const
GetLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetLengthA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthB() const$/;"	f	class:b2PulleyJoint	signature:() const
GetLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetLengthB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetLimitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2LimitState b2RopeJoint::GetLimitState() const$/;"	f	class:b2RopeJoint	signature:() const
GetLimitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2LimitState GetLimitState() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
GetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetLinearDamping() const;$/;"	p	class:b2Body	access:public	signature:() const
GetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetLinearDamping() const$/;"	f	class:b2Body	signature:() const
GetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^const b2Vec2& b2MotorJoint::GetLinearOffset() const$/;"	f	class:b2MotorJoint	signature:() const
GetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	const b2Vec2& GetLinearOffset() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetLinearVelocity() const;$/;"	p	class:b2Body	access:public	signature:() const
GetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetLinearVelocity() const$/;"	f	class:b2Body	signature:() const
GetLinearVelocityFromLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& localPoint) const
GetLinearVelocityFromLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& localPoint) const
GetLinearVelocityFromWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& worldPoint) const
GetLinearVelocityFromWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& worldPoint) const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2DistanceJoint	access:public	signature:() const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2FrictionJoint	access:public	signature:() const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RopeJoint	access:public	signature:() const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WheelJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2DistanceJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2FrictionJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RopeJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WheelJoint	access:public	signature:() const
GetLocalAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
GetLocalAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2WheelJoint	access:public	signature:() const
GetLocalCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetLocalCenter() const;$/;"	p	class:b2Body	access:public	signature:() const
GetLocalCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetLocalCenter() const$/;"	f	class:b2Body	signature:() const
GetLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLocalPoint(const b2Vec2& worldPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& worldPoint) const
GetLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLocalPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& worldPoint) const
GetLocalVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLocalVector(const b2Vec2& worldVector) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& worldVector) const
GetLocalVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLocalVector(const b2Vec2& worldVector) const$/;"	f	class:b2Body	signature:(const b2Vec2& worldVector) const
GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetLowerLimit() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetLowerLimit() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetLowerLimit() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetLowerLimit() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Manifold* GetManifold();$/;"	p	class:b2Contact	access:public	signature:()
GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Manifold* GetManifold() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact	signature:()
GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact	signature:() const
GetMass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetMass() const;$/;"	p	class:b2Body	access:public	signature:() const
GetMass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetMass() const$/;"	f	class:b2Body	signature:() const
GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void GetMassData(b2MassData* data) const;$/;"	p	class:b2Body	access:public	signature:(b2MassData* data) const
GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::GetMassData(b2MassData* data) const$/;"	f	class:b2Body	signature:(b2MassData* data) const
GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void GetMassData(b2MassData* massData) const;$/;"	p	class:b2Fixture	access:public	signature:(b2MassData* massData) const
GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::GetMassData(b2MassData* massData) const$/;"	f	class:b2Fixture	signature:(b2MassData* massData) const
GetMaxAllocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^int32 b2StackAllocator::GetMaxAllocation() const$/;"	f	class:b2StackAllocator	signature:() const
GetMaxAllocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 GetMaxAllocation() const;$/;"	p	class:b2StackAllocator	access:public	signature:() const
GetMaxBalance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::GetMaxBalance() const$/;"	f	class:b2DynamicTree	signature:() const
GetMaxBalance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 GetMaxBalance() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxForce() const$/;"	f	class:b2FrictionJoint	signature:() const
GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 GetMaxForce() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetMaxForce() const$/;"	f	class:b2MotorJoint	signature:() const
GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetMaxForce() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetMaxForce() const$/;"	f	class:b2MouseJoint	signature:() const
GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetMaxForce() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
GetMaxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^float32 b2RopeJoint::GetMaxLength() const$/;"	f	class:b2RopeJoint	signature:() const
GetMaxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 GetMaxLength() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
GetMaxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetMaxMotorForce() const { return m_maxMotorForce; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
GetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetMaxMotorTorque() const { return m_maxMotorTorque; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
GetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetMaxMotorTorque() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMaxMotorTorque() const$/;"	f	class:b2WheelJoint	signature:() const
GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxTorque() const$/;"	f	class:b2FrictionJoint	signature:() const
GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 GetMaxTorque() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetMaxTorque() const$/;"	f	class:b2MotorJoint	signature:() const
GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetMaxTorque() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
GetMetric	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	float32 GetMetric() const$/;"	f	struct:b2Simplex	access:public	signature:() const
GetMilliseconds	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^float32 b2Timer::GetMilliseconds() const$/;"	f	class:b2Timer	signature:() const
GetMilliseconds	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	float32 GetMilliseconds() const;$/;"	p	class:b2Timer	access:public	signature:() const
GetMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint	signature:(float32 inv_dt) const
GetMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetMotorForce(float32 inv_dt) const;$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 inv_dt) const
GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetMotorSpeed() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^inline float32 b2PrismaticJoint::GetMotorSpeed() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetMotorSpeed() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^inline float32 b2RevoluteJoint::GetMotorSpeed() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetMotorSpeed() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMotorSpeed() const$/;"	f	class:b2WheelJoint	signature:() const
GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint	signature:(float32 inv_dt) const
GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetMotorTorque(float32 inv_dt) const;$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 inv_dt) const
GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint	signature:(float32 inv_dt) const
GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetMotorTorque(float32 inv_dt) const;$/;"	p	class:b2WheelJoint	access:public	signature:(float32 inv_dt) const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* GetNext();$/;"	p	class:b2Contact	access:public	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Contact* GetNext() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* GetNext();$/;"	p	class:b2Joint	access:public	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	const b2Joint* GetNext() const;$/;"	p	class:b2Joint	access:public	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2Joint* b2Joint::GetNext()$/;"	f	class:b2Joint	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline const b2Joint* b2Joint::GetNext() const$/;"	f	class:b2Joint	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body* GetNext();$/;"	p	class:b2Body	access:public	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Body* GetNext() const;$/;"	p	class:b2Body	access:public	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Body* b2Body::GetNext()$/;"	f	class:b2Body	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Body* b2Body::GetNext() const$/;"	f	class:b2Body	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture* GetNext();$/;"	p	class:b2Fixture	access:public	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Fixture* GetNext() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Fixture* b2Fixture::GetNext()$/;"	f	class:b2Fixture	signature:()
GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Fixture* b2Fixture::GetNext() const$/;"	f	class:b2Fixture	signature:() const
GetPerimeter	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 GetPerimeter() const$/;"	f	struct:b2AABB	access:public	signature:() const
GetPosition	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetPosition() const;$/;"	p	class:b2Body	access:public	signature:() const
GetPosition	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetPosition() const$/;"	f	class:b2Body	signature:() const
GetProfile	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Profile& GetProfile() const;$/;"	p	class:b2World	access:public	signature:() const
GetProfile	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Profile& b2World::GetProfile() const$/;"	f	class:b2World	signature:() const
GetProxyCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 GetProxyCount() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
GetProxyCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline int32 b2BroadPhase::GetProxyCount() const$/;"	f	class:b2BroadPhase	signature:() const
GetProxyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^int32 b2World::GetProxyCount() const$/;"	f	class:b2World	signature:() const
GetProxyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetProxyCount() const;$/;"	p	class:b2World	access:public	signature:() const
GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^float32 b2GearJoint::GetRatio() const$/;"	f	class:b2GearJoint	signature:() const
GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 GetRatio() const;$/;"	p	class:b2GearJoint	access:public	signature:() const
GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetRatio() const$/;"	f	class:b2PulleyJoint	signature:() const
GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetRatio() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2DistanceJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2FrictionJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2GearJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2GearJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual b2Vec2 GetReactionForce(float32 inv_dt) const = 0;$/;"	p	class:b2Joint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MotorJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2MotorJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MouseJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2MouseJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PulleyJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2PulleyJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RopeJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2RopeJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WeldJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2WeldJoint	access:public	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WheelJoint	signature:(float32 inv_dt) const
GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2WheelJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^float32 b2DistanceJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2DistanceJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2FrictionJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2GearJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2GearJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual float32 GetReactionTorque(float32 inv_dt) const = 0;$/;"	p	class:b2Joint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MotorJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2MotorJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MouseJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2MouseJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PulleyJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2PulleyJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RopeJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2RopeJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^float32 b2WeldJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WeldJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2WeldJoint	access:public	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint	signature:(float32 inv_dt) const
GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2WheelJoint	access:public	signature:(float32 inv_dt) const
GetReferenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
GetReferenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
GetReferenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 GetRestitution() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact	signature:() const
GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 GetRestitution() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline float32 b2Fixture::GetRestitution() const$/;"	f	class:b2Fixture	signature:() const
GetSearchDirection	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 GetSearchDirection() const$/;"	f	struct:b2Simplex	access:public	signature:() const
GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Shape* GetShape();$/;"	p	class:b2Fixture	access:public	signature:()
GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Shape* GetShape() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Shape* b2Fixture::GetShape()$/;"	f	class:b2Fixture	signature:()
GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Shape* b2Fixture::GetShape() const$/;"	f	class:b2Fixture	signature:() const
GetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetSpringDampingRatio() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringDampingRatio() const$/;"	f	class:b2WheelJoint	signature:() const
GetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetSpringFrequencyHz() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
GetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringFrequencyHz() const$/;"	f	class:b2WheelJoint	signature:() const
GetSubStepping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetSubStepping() const { return m_subStepping; }$/;"	f	class:b2World	access:public	signature:() const
GetSupport	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	int32 GetSupport(const b2Vec2& d) const;$/;"	p	class:b2CircleShape	access:public	signature:(const b2Vec2& d) const
GetSupport	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline int32 b2CircleShape::GetSupport(const b2Vec2 &d) const$/;"	f	class:b2CircleShape	signature:(const b2Vec2 &d) const
GetSupport	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 GetSupport(const b2Vec2& d) const;$/;"	p	struct:b2DistanceProxy	access:public	signature:(const b2Vec2& d) const
GetSupport	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline int32 b2DistanceProxy::GetSupport(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy	signature:(const b2Vec2& d) const
GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	const b2Vec2& GetSupportVertex(const b2Vec2& d) const;$/;"	p	class:b2CircleShape	access:public	signature:(const b2Vec2& d) const
GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetSupportVertex(const b2Vec2 &d) const$/;"	f	class:b2CircleShape	signature:(const b2Vec2 &d) const
GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	const b2Vec2& GetSupportVertex(const b2Vec2& d) const;$/;"	p	struct:b2DistanceProxy	access:public	signature:(const b2Vec2& d) const
GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetSupportVertex(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy	signature:(const b2Vec2& d) const
GetSymInverse33	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^void b2Mat33::GetSymInverse33(b2Mat33* M) const$/;"	f	class:b2Mat33	signature:(b2Mat33* M) const
GetSymInverse33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void GetSymInverse33(b2Mat33* M) const;$/;"	p	struct:b2Mat33	access:public	signature:(b2Mat33* M) const
GetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 GetTangentSpeed() const;$/;"	p	class:b2Contact	access:public	signature:() const
GetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2Contact::GetTangentSpeed() const$/;"	f	class:b2Contact	signature:() const
GetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^const b2Vec2& b2MouseJoint::GetTarget() const$/;"	f	class:b2MouseJoint	signature:() const
GetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	const b2Vec2& GetTarget() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
GetTransform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void GetTransform(b2Transform* xfb, float32 beta) const;$/;"	p	struct:b2Sweep	access:public	signature:(b2Transform* xfb, float32 beta) const
GetTransform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const$/;"	f	class:b2Sweep	signature:(b2Transform* xf, float32 beta) const
GetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Transform& GetTransform() const;$/;"	p	class:b2Body	access:public	signature:() const
GetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Transform& b2Body::GetTransform() const$/;"	f	class:b2Body	signature:() const
GetTreeBalance	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 GetTreeBalance() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
GetTreeBalance	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeBalance() const$/;"	f	class:b2BroadPhase	signature:() const
GetTreeBalance	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^int32 b2World::GetTreeBalance() const$/;"	f	class:b2World	signature:() const
GetTreeBalance	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetTreeBalance() const;$/;"	p	class:b2World	access:public	signature:() const
GetTreeHeight	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 GetTreeHeight() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
GetTreeHeight	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeHeight() const$/;"	f	class:b2BroadPhase	signature:() const
GetTreeHeight	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^int32 b2World::GetTreeHeight() const$/;"	f	class:b2World	signature:() const
GetTreeHeight	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetTreeHeight() const;$/;"	p	class:b2World	access:public	signature:() const
GetTreeQuality	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	float32 GetTreeQuality() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
GetTreeQuality	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline float32 b2BroadPhase::GetTreeQuality() const$/;"	f	class:b2BroadPhase	signature:() const
GetTreeQuality	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^float32 b2World::GetTreeQuality() const$/;"	f	class:b2World	signature:() const
GetTreeQuality	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	float32 GetTreeQuality() const;$/;"	p	class:b2World	access:public	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	Type GetType() const;$/;"	p	class:b2Shape	access:public	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^inline b2Shape::Type b2Shape::GetType() const$/;"	f	class:b2Shape	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointType GetType() const;$/;"	p	class:b2Joint	access:public	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2JointType b2Joint::GetType() const$/;"	f	class:b2Joint	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyType GetType() const;$/;"	p	class:b2Body	access:public	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2BodyType b2Body::GetType() const$/;"	f	class:b2Body	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Shape::Type GetType() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Shape::Type b2Fixture::GetType() const$/;"	f	class:b2Fixture	signature:() const
GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetUpperLimit() const$/;"	f	class:b2PrismaticJoint	signature:() const
GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetUpperLimit() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetUpperLimit() const$/;"	f	class:b2RevoluteJoint	signature:() const
GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetUpperLimit() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void* GetUserData(int32 proxyId) const;$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId) const
GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void* b2BroadPhase::GetUserData(int32 proxyId) const$/;"	f	class:b2BroadPhase	signature:(int32 proxyId) const
GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void* GetUserData(int32 proxyId) const;$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId) const
GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline void* b2DynamicTree::GetUserData(int32 proxyId) const$/;"	f	class:b2DynamicTree	signature:(int32 proxyId) const
GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void* GetUserData() const;$/;"	p	class:b2Joint	access:public	signature:() const
GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline void* b2Joint::GetUserData() const$/;"	f	class:b2Joint	signature:() const
GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void* GetUserData() const;$/;"	p	class:b2Body	access:public	signature:() const
GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void* b2Body::GetUserData() const$/;"	f	class:b2Body	signature:() const
GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void* GetUserData() const;$/;"	p	class:b2Fixture	access:public	signature:() const
GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void* b2Fixture::GetUserData() const$/;"	f	class:b2Fixture	signature:() const
GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	const b2Vec2& GetVertex(int32 index) const;$/;"	p	class:b2CircleShape	access:public	signature:(int32 index) const
GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetVertex(int32 index) const$/;"	f	class:b2CircleShape	signature:(int32 index) const
GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	const b2Vec2& GetVertex(int32 index) const;$/;"	p	class:b2PolygonShape	access:public	signature:(int32 index) const
GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^inline const b2Vec2& b2PolygonShape::GetVertex(int32 index) const$/;"	f	class:b2PolygonShape	signature:(int32 index) const
GetVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	const b2Vec2& GetVertex(int32 index) const;$/;"	p	struct:b2DistanceProxy	access:public	signature:(int32 index) const
GetVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetVertex(int32 index) const$/;"	f	class:b2DistanceProxy	signature:(int32 index) const
GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	int32 GetVertexCount() const { return 1; }$/;"	f	class:b2CircleShape	access:public	signature:() const
GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	int32 GetVertexCount() const { return m_count; }$/;"	f	class:b2PolygonShape	access:public	signature:() const
GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 GetVertexCount() const;$/;"	p	struct:b2DistanceProxy	access:public	signature:() const
GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline int32 b2DistanceProxy::GetVertexCount() const$/;"	f	class:b2DistanceProxy	signature:() const
GetVertexCount	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	int32 GetVertexCount() const$/;"	f	class:b2Rope	access:public	signature:() const
GetVertices	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	const b2Vec2* GetVertices() const$/;"	f	class:b2Rope	access:public	signature:() const
GetWarmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetWarmStarting() const { return m_warmStarting; }$/;"	f	class:b2World	access:public	signature:() const
GetWitnessPoints	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void GetWitnessPoints(b2Vec2* pA, b2Vec2* pB) const$/;"	f	struct:b2Simplex	access:public	signature:(b2Vec2* pA, b2Vec2* pB) const
GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2World* GetWorld();$/;"	p	class:b2Body	access:public	signature:()
GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2World* GetWorld() const;$/;"	p	class:b2Body	access:public	signature:() const
GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2World* b2Body::GetWorld()$/;"	f	class:b2Body	signature:()
GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2World* b2Body::GetWorld() const$/;"	f	class:b2Body	signature:() const
GetWorldCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetWorldCenter() const;$/;"	p	class:b2Body	access:public	signature:() const
GetWorldCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetWorldCenter() const$/;"	f	class:b2Body	signature:() const
GetWorldManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void GetWorldManifold(b2WorldManifold* worldManifold) const;$/;"	p	class:b2Contact	access:public	signature:(b2WorldManifold* worldManifold) const
GetWorldManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact	signature:(b2WorldManifold* worldManifold) const
GetWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetWorldPoint(const b2Vec2& localPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& localPoint) const
GetWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetWorldPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& localPoint) const
GetWorldVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetWorldVector(const b2Vec2& localVector) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& localVector) const
GetWorldVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetWorldVector(const b2Vec2& localVector) const$/;"	f	class:b2Body	signature:(const b2Vec2& localVector) const
GetXAxis	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 GetXAxis() const$/;"	f	struct:b2Rot	access:public	signature:() const
GetYAxis	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 GetYAxis() const$/;"	f	struct:b2Rot	access:public	signature:() const
I	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	float32 I;$/;"	m	struct:b2MassData	access:public
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void InitVelocityConstraints(const b2SolverData& data) = 0;$/;"	p	class:b2Joint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^void b2RopeJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint	signature:(const b2SolverData& data)
InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2SolverData& data)
Initialize	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^void b2WorldManifold::Initialize(const b2Manifold* manifold,$/;"	f	class:b2WorldManifold	signature:(const b2Manifold* manifold, const b2Transform& xfA, float32 radiusA, const b2Transform& xfB, float32 radiusB)
Initialize	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	void Initialize(const b2Manifold* manifold,$/;"	p	struct:b2WorldManifold	access:public	signature:(const b2Manifold* manifold, const b2Transform& xfA, float32 radiusA, const b2Transform& xfB, float32 radiusB)
Initialize	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	float32 Initialize(const b2SimplexCache* cache,$/;"	f	struct:b2SeparationFunction	access:public	signature:(const b2SimplexCache* cache, const b2DistanceProxy* proxyA, const b2Sweep& sweepA, const b2DistanceProxy* proxyB, const b2Sweep& sweepB, float32 t1)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	void Initialize(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)$/;"	f	struct:b2PositionSolverManifold	access:public	signature:(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJointDef::Initialize(b2Body* b1, b2Body* b2,$/;"	f	class:b2DistanceJointDef	signature:(b2Body* b1, b2Body* b2, const b2Vec2& anchor1, const b2Vec2& anchor2)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB,$/;"	p	struct:b2DistanceJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchorA, const b2Vec2& anchorB)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2FrictionJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);$/;"	p	struct:b2FrictionJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJointDef::Initialize(b2Body* bA, b2Body* bB)$/;"	f	class:b2MotorJointDef	signature:(b2Body* bA, b2Body* bB)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB);$/;"	p	struct:b2MotorJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2PrismaticJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis);$/;"	p	struct:b2PrismaticJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJointDef::Initialize(b2Body* bA, b2Body* bB,$/;"	f	class:b2PulleyJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& groundA, const b2Vec2& groundB, const b2Vec2& anchorA, const b2Vec2& anchorB, float32 r)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB,$/;"	p	struct:b2PulleyJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& groundAnchorA, const b2Vec2& groundAnchorB, const b2Vec2& anchorA, const b2Vec2& anchorB, float32 ratio)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2RevoluteJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);$/;"	p	struct:b2RevoluteJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2WeldJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);$/;"	p	struct:b2WeldJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2WheelJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)
Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis);$/;"	p	struct:b2WheelJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis)
Initialize	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::Initialize(const b2RopeDef* def)$/;"	f	class:b2Rope	signature:(const b2RopeDef* def)
Initialize	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void Initialize(const b2RopeDef* def);$/;"	p	class:b2Rope	access:public	signature:(const b2RopeDef* def)
InitializeRegisters	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::InitializeRegisters()$/;"	f	class:b2Contact	signature:()
InitializeRegisters	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void InitializeRegisters();$/;"	p	class:b2Contact	access:protected	signature:()
InitializeVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::InitializeVelocityConstraints()$/;"	f	class:b2ContactSolver	signature:()
InitializeVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void InitializeVelocityConstraints();$/;"	p	class:b2ContactSolver	access:public	signature:()
InsertLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::InsertLeaf(int32 leaf)$/;"	f	class:b2DynamicTree	signature:(int32 leaf)
InsertLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void InsertLeaf(int32 node);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 node)
IsActive	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^bool b2Joint::IsActive() const$/;"	f	class:b2Joint	signature:() const
IsActive	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool IsActive() const;$/;"	p	class:b2Joint	access:public	signature:() const
IsActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsActive() const;$/;"	p	class:b2Body	access:public	signature:() const
IsActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsActive() const$/;"	f	class:b2Body	signature:() const
IsAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsAwake() const;$/;"	p	class:b2Body	access:public	signature:() const
IsAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsAwake() const$/;"	f	class:b2Body	signature:() const
IsBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsBullet() const;$/;"	p	class:b2Body	access:public	signature:() const
IsBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsBullet() const$/;"	f	class:b2Body	signature:() const
IsEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	bool IsEnabled() const;$/;"	p	class:b2Contact	access:public	signature:() const
IsEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact	signature:() const
IsFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsFixedRotation() const;$/;"	p	class:b2Body	access:public	signature:() const
IsFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsFixedRotation() const$/;"	f	class:b2Body	signature:() const
IsLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	bool IsLeaf() const$/;"	f	struct:b2TreeNode	access:public	signature:() const
IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsLimitEnabled() const$/;"	f	class:b2PrismaticJoint	signature:() const
IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool IsLimitEnabled() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsLimitEnabled() const$/;"	f	class:b2RevoluteJoint	signature:() const
IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool IsLimitEnabled() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
IsLocked	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool IsLocked() const;$/;"	p	class:b2World	access:public	signature:() const
IsLocked	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline bool b2World::IsLocked() const$/;"	f	class:b2World	signature:() const
IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsMotorEnabled() const$/;"	f	class:b2PrismaticJoint	signature:() const
IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool IsMotorEnabled() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsMotorEnabled() const$/;"	f	class:b2RevoluteJoint	signature:() const
IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool IsMotorEnabled() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^bool b2WheelJoint::IsMotorEnabled() const$/;"	f	class:b2WheelJoint	signature:() const
IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool IsMotorEnabled() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
IsSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool IsSensor() const;$/;"	p	class:b2Fixture	access:public	signature:() const
IsSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline bool b2Fixture::IsSensor() const$/;"	f	class:b2Fixture	signature:() const
IsSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsSleepingAllowed() const;$/;"	p	class:b2Body	access:public	signature:() const
IsSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsSleepingAllowed() const$/;"	f	class:b2Body	signature:() const
IsTouching	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	bool IsTouching() const;$/;"	p	class:b2Contact	access:public	signature:() const
IsTouching	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact	signature:() const
IsValid	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	bool IsValid() const;$/;"	p	struct:b2AABB	access:public	signature:() const
IsValid	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^inline bool b2AABB::IsValid() const$/;"	f	class:b2AABB	signature:() const
IsValid	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	bool IsValid() const$/;"	f	struct:b2Vec2	access:public	signature:() const
K	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint	access:public
Length	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 Length() const$/;"	f	struct:b2Vec2	access:public	signature:() const
LengthSquared	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 LengthSquared() const$/;"	f	struct:b2Vec2	access:public	signature:() const
MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement);$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2DynamicTree	signature:(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	bool MoveProxy(int32 proxyId, const b2AABB& aabb1, const b2Vec2& displacement);$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId, const b2AABB& aabb1, const b2Vec2& displacement)
Normalize	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 Normalize()$/;"	f	struct:b2Vec2	access:public	signature:()
Normalize	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Normalize();$/;"	p	struct:b2Sweep	access:public	signature:()
Normalize	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline void b2Sweep::Normalize()$/;"	f	class:b2Sweep	signature:()
Pop	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	T Pop()$/;"	f	class:b2GrowableStack	access:public	signature:()
PostSolve	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact, const b2ContactImpulse* impulse)
PreSolve	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact, const b2Manifold* oldManifold)
Push	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	void Push(const T& element)$/;"	f	class:b2GrowableStack	access:public	signature:(const T& element)
Query	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void Query(T* callback, const b2AABB& aabb) const;$/;"	p	class:b2BroadPhase	access:public	signature:(T* callback, const b2AABB& aabb) const
Query	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void b2BroadPhase::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2BroadPhase	signature:(T* callback, const b2AABB& aabb) const
Query	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void Query(T* callback, const b2AABB& aabb) const;$/;"	p	class:b2DynamicTree	access:public	signature:(T* callback, const b2AABB& aabb) const
Query	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2DynamicTree	signature:(T* callback, const b2AABB& aabb) const
QueryAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const$/;"	f	class:b2World	signature:(b2QueryCallback* callback, const b2AABB& aabb) const
QueryAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const;$/;"	p	class:b2World	access:public	signature:(b2QueryCallback* callback, const b2AABB& aabb) const
QueryCallback	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^bool b2BroadPhase::QueryCallback(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
QueryCallback	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	bool QueryCallback(int32 proxyId);$/;"	p	class:b2BroadPhase	access:private	signature:(int32 proxyId)
QueryCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	bool QueryCallback(int32 proxyId)$/;"	f	struct:b2WorldQueryWrapper	access:public	signature:(int32 proxyId)
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^bool b2ChainShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2ChainShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& xf, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2ChainShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^bool b2CircleShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2CircleShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2CircleShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^bool b2EdgeShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2EdgeShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& xf, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2EdgeShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^bool b2PolygonShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2PolygonShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& xf, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2PolygonShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2Shape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void RayCast(T* callback, const b2RayCastInput& input) const;$/;"	p	class:b2BroadPhase	access:public	signature:(T* callback, const b2RayCastInput& input) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void b2BroadPhase::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2BroadPhase	signature:(T* callback, const b2RayCastInput& input) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^bool b2AABB::RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const$/;"	f	class:b2AABB	signature:(b2RayCastOutput* output, const b2RayCastInput& input) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const;$/;"	p	struct:b2AABB	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void RayCast(T* callback, const b2RayCastInput& input) const;$/;"	p	class:b2DynamicTree	access:public	signature:(T* callback, const b2RayCastInput& input) const
RayCast	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2DynamicTree	signature:(T* callback, const b2RayCastInput& input) const
RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const;$/;"	p	class:b2Fixture	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline bool b2Fixture::RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const$/;"	f	class:b2Fixture	signature:(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const
RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const$/;"	f	class:b2World	signature:(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const
RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const;$/;"	p	class:b2World	access:public	signature:(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const
RayCastCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	float32 RayCastCallback(const b2RayCastInput& input, int32 proxyId)$/;"	f	struct:b2WorldRayCastWrapper	access:public	signature:(const b2RayCastInput& input, int32 proxyId)
ReadCache	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void ReadCache(	const b2SimplexCache* cache,$/;"	f	struct:b2Simplex	access:public	signature:( const b2SimplexCache* cache, const b2DistanceProxy* proxyA, const b2Transform& transformA, const b2DistanceProxy* proxyB, const b2Transform& transformB)
RebuildBottomUp	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::RebuildBottomUp()$/;"	f	class:b2DynamicTree	signature:()
RebuildBottomUp	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void RebuildBottomUp();$/;"	p	class:b2DynamicTree	access:public	signature:()
Refilter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Refilter()$/;"	f	class:b2Fixture	signature:()
Refilter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Refilter();$/;"	p	class:b2Fixture	access:public	signature:()
RemoveLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::RemoveLeaf(int32 leaf)$/;"	f	class:b2DynamicTree	signature:(int32 leaf)
RemoveLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void RemoveLeaf(int32 node);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 node)
Report	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^void b2Island::Report(const b2ContactVelocityConstraint* constraints)$/;"	f	class:b2Island	signature:(const b2ContactVelocityConstraint* constraints)
Report	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Report(const b2ContactVelocityConstraint* constraints);$/;"	p	class:b2Island	access:public	signature:(const b2ContactVelocityConstraint* constraints)
ReportFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual bool ReportFixture(b2Fixture* fixture) = 0;$/;"	p	class:b2QueryCallback	access:public	signature:(b2Fixture* fixture)
ReportFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual float32 ReportFixture(	b2Fixture* fixture, const b2Vec2& point,$/;"	p	class:b2RayCastCallback	access:public	signature:( b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float32 fraction)
Reset	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^void b2Timer::Reset()$/;"	f	class:b2Timer	signature:()
Reset	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	void Reset();$/;"	p	class:b2Timer	access:public	signature:()
ResetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void ResetFriction();$/;"	p	class:b2Contact	access:public	signature:()
ResetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact	signature:()
ResetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::ResetMassData()$/;"	f	class:b2Body	signature:()
ResetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ResetMassData();$/;"	p	class:b2Body	access:public	signature:()
ResetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void ResetRestitution();$/;"	p	class:b2Contact	access:public	signature:()
ResetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact	signature:()
SayGoodbye	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void SayGoodbye(b2Fixture* fixture) = 0;$/;"	p	class:b2DestructionListener	access:public	signature:(b2Fixture* fixture)
SayGoodbye	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void SayGoodbye(b2Joint* joint) = 0;$/;"	p	class:b2DestructionListener	access:public	signature:(b2Joint* joint)
Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^void b2EdgeShape::Set(const b2Vec2& v1, const b2Vec2& v2)$/;"	f	class:b2EdgeShape	signature:(const b2Vec2& v1, const b2Vec2& v2)
Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	void Set(const b2Vec2& v1, const b2Vec2& v2);$/;"	p	class:b2EdgeShape	access:public	signature:(const b2Vec2& v1, const b2Vec2& v2)
Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::Set(const b2Vec2* vertices, int32 count)$/;"	f	class:b2PolygonShape	signature:(const b2Vec2* vertices, int32 count)
Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void Set(const b2Vec2* points, int32 count);$/;"	p	class:b2PolygonShape	access:public	signature:(const b2Vec2* points, int32 count)
Set	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2DistanceProxy::Set(const b2Shape* shape, int32 index)$/;"	f	class:b2DistanceProxy	signature:(const b2Shape* shape, int32 index)
Set	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	void Set(const b2Shape* shape, int32 index);$/;"	p	struct:b2DistanceProxy	access:public	signature:(const b2Shape* shape, int32 index)
Set	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void Set(float32 ri, float32 gi, float32 bi, float32 ai = 1.0f) { r = ri; g = gi; b = bi; a = ai; }$/;"	f	struct:b2Color	access:public	signature:(float32 ri, float32 gi, float32 bi, float32 ai = 1.0f)
Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22	access:public	signature:(const b2Vec2& c1, const b2Vec2& c2)
Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(const b2Vec2& position, float32 angle)$/;"	f	struct:b2Transform	access:public	signature:(const b2Vec2& position, float32 angle)
Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(float32 angle)$/;"	f	struct:b2Rot	access:public	signature:(float32 angle)
Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(float32 x_, float32 y_) { x = x_; y = y_; }$/;"	f	struct:b2Vec2	access:public	signature:(float32 x_, float32 y_)
Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }$/;"	f	struct:b2Vec3	access:public	signature:(float32 x_, float32 y_, float32 z_)
SetActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetActive(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
SetActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetActive(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
SetAllowSleeping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetAllowSleeping(bool flag)$/;"	f	class:b2World	signature:(bool flag)
SetAllowSleeping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetAllowSleeping(bool flag);$/;"	p	class:b2World	access:public	signature:(bool flag)
SetAngle	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::SetAngle(float32 angle)$/;"	f	class:b2Rope	signature:(float32 angle)
SetAngle	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void SetAngle(float32 angle);$/;"	p	class:b2Rope	access:public	signature:(float32 angle)
SetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetAngularDamping(float32 angularDamping);$/;"	p	class:b2Body	access:public	signature:(float32 angularDamping)
SetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetAngularDamping(float32 angularDamping)$/;"	f	class:b2Body	signature:(float32 angularDamping)
SetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetAngularOffset(float32 angularOffset)$/;"	f	class:b2MotorJoint	signature:(float32 angularOffset)
SetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetAngularOffset(float32 angularOffset);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 angularOffset)
SetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetAngularVelocity(float32 omega);$/;"	p	class:b2Body	access:public	signature:(float32 omega)
SetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetAngularVelocity(float32 w)$/;"	f	class:b2Body	signature:(float32 w)
SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy)$/;"	f	class:b2PolygonShape	signature:(float32 hx, float32 hy)
SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle)$/;"	f	class:b2PolygonShape	signature:(float32 hx, float32 hy, const b2Vec2& center, float32 angle)
SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void SetAsBox(float32 hx, float32 hy);$/;"	p	class:b2PolygonShape	access:public	signature:(float32 hx, float32 hy)
SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle);$/;"	p	class:b2PolygonShape	access:public	signature:(float32 hx, float32 hy, const b2Vec2& center, float32 angle)
SetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetAutoClearForces(bool flag);$/;"	p	class:b2World	access:public	signature:(bool flag)
SetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline void b2World::SetAutoClearForces(bool flag)$/;"	f	class:b2World	signature:(bool flag)
SetAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetAwake(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
SetAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetAwake(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
SetBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetBullet(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
SetBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetBullet(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
SetContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetContactFilter(b2ContactFilter* filter)$/;"	f	class:b2World	signature:(b2ContactFilter* filter)
SetContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetContactFilter(b2ContactFilter* filter);$/;"	p	class:b2World	access:public	signature:(b2ContactFilter* filter)
SetContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetContactListener(b2ContactListener* listener)$/;"	f	class:b2World	signature:(b2ContactListener* listener)
SetContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetContactListener(b2ContactListener* listener);$/;"	p	class:b2World	access:public	signature:(b2ContactListener* listener)
SetContinuousPhysics	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetContinuousPhysics(bool flag) { m_continuousPhysics = flag; }$/;"	f	class:b2World	access:public	signature:(bool flag)
SetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetCorrectionFactor(float32 factor)$/;"	f	class:b2MotorJoint	signature:(float32 factor)
SetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetCorrectionFactor(float32 factor);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 factor)
SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SetDampingRatio(float32 ratio);$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 ratio)
SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline void b2DistanceJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2DistanceJoint	signature:(float32 ratio)
SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2MouseJoint	signature:(float32 ratio)
SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetDampingRatio(float32 ratio);$/;"	p	class:b2MouseJoint	access:public	signature:(float32 ratio)
SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void SetDampingRatio(float32 ratio) { m_dampingRatio = ratio; }$/;"	f	class:b2WeldJoint	access:public	signature:(float32 ratio)
SetDebugDraw	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetDebugDraw(b2Draw* debugDraw)$/;"	f	class:b2World	signature:(b2Draw* debugDraw)
SetDebugDraw	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetDebugDraw(b2Draw* debugDraw);$/;"	p	class:b2World	access:public	signature:(b2Draw* debugDraw)
SetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetDensity(float32 density);$/;"	p	class:b2Fixture	access:public	signature:(float32 density)
SetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetDensity(float32 density)$/;"	f	class:b2Fixture	signature:(float32 density)
SetDestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetDestructionListener(b2DestructionListener* listener)$/;"	f	class:b2World	signature:(b2DestructionListener* listener)
SetDestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetDestructionListener(b2DestructionListener* listener);$/;"	p	class:b2World	access:public	signature:(b2DestructionListener* listener)
SetEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetEnabled(bool flag);$/;"	p	class:b2Contact	access:public	signature:(bool flag)
SetEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact	signature:(bool flag)
SetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::SetFilterData(const b2Filter& filter)$/;"	f	class:b2Fixture	signature:(const b2Filter& filter)
SetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetFilterData(const b2Filter& filter);$/;"	p	class:b2Fixture	access:public	signature:(const b2Filter& filter)
SetFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetFixedRotation(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
SetFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetFixedRotation(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
SetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^void b2Draw::SetFlags(uint32 flags)$/;"	f	class:b2Draw	signature:(uint32 flags)
SetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void SetFlags(uint32 flags);$/;"	p	class:b2Draw	access:public	signature:(uint32 flags)
SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SetFrequency(float32 hz);$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 hz)
SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline void b2DistanceJoint::SetFrequency(float32 hz)$/;"	f	class:b2DistanceJoint	signature:(float32 hz)
SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetFrequency(float32 hz)$/;"	f	class:b2MouseJoint	signature:(float32 hz)
SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetFrequency(float32 hz);$/;"	p	class:b2MouseJoint	access:public	signature:(float32 hz)
SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void SetFrequency(float32 hz) { m_frequencyHz = hz; }$/;"	f	class:b2WeldJoint	access:public	signature:(float32 hz)
SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetFriction(float32 friction);$/;"	p	class:b2Contact	access:public	signature:(float32 friction)
SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact	signature:(float32 friction)
SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetFriction(float32 friction);$/;"	p	class:b2Fixture	access:public	signature:(float32 friction)
SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetFriction(float32 friction)$/;"	f	class:b2Fixture	signature:(float32 friction)
SetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetGravity(const b2Vec2& gravity);$/;"	p	class:b2World	access:public	signature:(const b2Vec2& gravity)
SetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline void b2World::SetGravity(const b2Vec2& gravity)$/;"	f	class:b2World	signature:(const b2Vec2& gravity)
SetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetGravityScale(float32 scale);$/;"	p	class:b2Body	access:public	signature:(float32 scale)
SetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetGravityScale(float32 scale)$/;"	f	class:b2Body	signature:(float32 scale)
SetIdentity	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Mat22	access:public	signature:()
SetIdentity	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Rot	access:public	signature:()
SetIdentity	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Transform	access:public	signature:()
SetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SetLength(float32 length);$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 length)
SetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline void b2DistanceJoint::SetLength(float32 length)$/;"	f	class:b2DistanceJoint	signature:(float32 length)
SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2PrismaticJoint	signature:(float32 lower, float32 upper)
SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SetLimits(float32 lower, float32 upper);$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 lower, float32 upper)
SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2RevoluteJoint	signature:(float32 lower, float32 upper)
SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SetLimits(float32 lower, float32 upper);$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 lower, float32 upper)
SetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetLinearDamping(float32 linearDamping);$/;"	p	class:b2Body	access:public	signature:(float32 linearDamping)
SetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetLinearDamping(float32 linearDamping)$/;"	f	class:b2Body	signature:(float32 linearDamping)
SetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetLinearOffset(const b2Vec2& linearOffset)$/;"	f	class:b2MotorJoint	signature:(const b2Vec2& linearOffset)
SetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetLinearOffset(const b2Vec2& linearOffset);$/;"	p	class:b2MotorJoint	access:public	signature:(const b2Vec2& linearOffset)
SetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetLinearVelocity(const b2Vec2& v);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& v)
SetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetLinearVelocity(const b2Vec2& v)$/;"	f	class:b2Body	signature:(const b2Vec2& v)
SetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetMassData(const b2MassData* massData)$/;"	f	class:b2Body	signature:(const b2MassData* massData)
SetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetMassData(const b2MassData* data);$/;"	p	class:b2Body	access:public	signature:(const b2MassData* data)
SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxForce(float32 force)$/;"	f	class:b2FrictionJoint	signature:(float32 force)
SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void SetMaxForce(float32 force);$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 force)
SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetMaxForce(float32 force)$/;"	f	class:b2MotorJoint	signature:(float32 force)
SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetMaxForce(float32 force);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 force)
SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetMaxForce(float32 force)$/;"	f	class:b2MouseJoint	signature:(float32 force)
SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetMaxForce(float32 force);$/;"	p	class:b2MouseJoint	access:public	signature:(float32 force)
SetMaxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void SetMaxLength(float32 length) { m_maxLength = length; }$/;"	f	class:b2RopeJoint	access:public	signature:(float32 length)
SetMaxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMaxMotorForce(float32 force)$/;"	f	class:b2PrismaticJoint	signature:(float32 force)
SetMaxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SetMaxMotorForce(float32 force);$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 force)
SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2RevoluteJoint	signature:(float32 torque)
SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SetMaxMotorTorque(float32 torque);$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 torque)
SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2WheelJoint	signature:(float32 torque)
SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetMaxMotorTorque(float32 torque);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 torque)
SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2FrictionJoint	signature:(float32 torque)
SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void SetMaxTorque(float32 torque);$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 torque)
SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2MotorJoint	signature:(float32 torque)
SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetMaxTorque(float32 torque);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 torque)
SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2PrismaticJoint	signature:(float32 speed)
SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SetMotorSpeed(float32 speed);$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 speed)
SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2RevoluteJoint	signature:(float32 speed)
SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SetMotorSpeed(float32 speed);$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 speed)
SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2WheelJoint	signature:(float32 speed)
SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetMotorSpeed(float32 speed);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 speed)
SetNextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::SetNextVertex(const b2Vec2& nextVertex)$/;"	f	class:b2ChainShape	signature:(const b2Vec2& nextVertex)
SetNextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void SetNextVertex(const b2Vec2& nextVertex);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2& nextVertex)
SetPrevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::SetPrevVertex(const b2Vec2& prevVertex)$/;"	f	class:b2ChainShape	signature:(const b2Vec2& prevVertex)
SetPrevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void SetPrevVertex(const b2Vec2& prevVertex);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2& prevVertex)
SetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::SetRatio(float32 ratio)$/;"	f	class:b2GearJoint	signature:(float32 ratio)
SetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void SetRatio(float32 ratio);$/;"	p	class:b2GearJoint	access:public	signature:(float32 ratio)
SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetRestitution(float32 restitution);$/;"	p	class:b2Contact	access:public	signature:(float32 restitution)
SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact	signature:(float32 restitution)
SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetRestitution(float32 restitution);$/;"	p	class:b2Fixture	access:public	signature:(float32 restitution)
SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetRestitution(float32 restitution)$/;"	f	class:b2Fixture	signature:(float32 restitution)
SetSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::SetSensor(bool sensor)$/;"	f	class:b2Fixture	signature:(bool sensor)
SetSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetSensor(bool sensor);$/;"	p	class:b2Fixture	access:public	signature:(bool sensor)
SetSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetSleepingAllowed(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
SetSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetSleepingAllowed(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
SetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetSpringDampingRatio(float32 ratio);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 ratio)
SetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringDampingRatio(float32 ratio)$/;"	f	class:b2WheelJoint	signature:(float32 ratio)
SetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetSpringFrequencyHz(float32 hz);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 hz)
SetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringFrequencyHz(float32 hz)$/;"	f	class:b2WheelJoint	signature:(float32 hz)
SetSubStepping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetSubStepping(bool flag) { m_subStepping = flag; }$/;"	f	class:b2World	access:public	signature:(bool flag)
SetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetTangentSpeed(float32 speed);$/;"	p	class:b2Contact	access:public	signature:(float32 speed)
SetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetTangentSpeed(float32 speed)$/;"	f	class:b2Contact	signature:(float32 speed)
SetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetTarget(const b2Vec2& target)$/;"	f	class:b2MouseJoint	signature:(const b2Vec2& target)
SetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetTarget(const b2Vec2& target);$/;"	p	class:b2MouseJoint	access:public	signature:(const b2Vec2& target)
SetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetTransform(const b2Vec2& position, float32 angle)$/;"	f	class:b2Body	signature:(const b2Vec2& position, float32 angle)
SetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetTransform(const b2Vec2& position, float32 angle);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& position, float32 angle)
SetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetType(b2BodyType type)$/;"	f	class:b2Body	signature:(b2BodyType type)
SetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetType(b2BodyType type);$/;"	p	class:b2Body	access:public	signature:(b2BodyType type)
SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void SetUserData(void* data);$/;"	p	class:b2Joint	access:public	signature:(void* data)
SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline void b2Joint::SetUserData(void* data)$/;"	f	class:b2Joint	signature:(void* data)
SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetUserData(void* data);$/;"	p	class:b2Body	access:public	signature:(void* data)
SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetUserData(void* data)$/;"	f	class:b2Body	signature:(void* data)
SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetUserData(void* data);$/;"	p	class:b2Fixture	access:public	signature:(void* data)
SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetUserData(void* data)$/;"	f	class:b2Fixture	signature:(void* data)
SetWarmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetWarmStarting(bool flag) { m_warmStarting = flag; }$/;"	f	class:b2World	access:public	signature:(bool flag)
SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	struct:b2Vec3	access:public	signature:()
SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; }$/;"	f	struct:b2Vec2	access:public	signature:()
SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat22	access:public	signature:()
SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat33	access:public	signature:()
ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2BroadPhase	access:public	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void b2BroadPhase::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2BroadPhase	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2DynamicTree	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2DynamicTree	access:public	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void ShiftOrigin(const b2Vec2& newOrigin) { B2_NOT_USED(newOrigin);  }$/;"	f	class:b2Joint	access:public	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2MouseJoint	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2MouseJoint	access:public	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2PulleyJoint	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2PulleyJoint	access:public	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2World	signature:(const b2Vec2& newOrigin)
ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2World	access:public	signature:(const b2Vec2& newOrigin)
ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^bool b2Body::ShouldCollide(const b2Body* other) const$/;"	f	class:b2Body	signature:(const b2Body* other) const
ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool ShouldCollide(const b2Body* other) const;$/;"	p	class:b2Body	access:private	signature:(const b2Body* other) const
ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.cpp	/^bool b2ContactFilter::ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2ContactFilter	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual bool ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2ContactFilter	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
Skew	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 Skew() const$/;"	f	struct:b2Vec2	access:public	signature:() const
Solve	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 Solve(const b2Vec2& b) const$/;"	f	struct:b2Mat22	access:public	signature:(const b2Vec2& b) const
Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^void b2Island::Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)$/;"	f	class:b2Island	signature:(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)
Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep);$/;"	p	class:b2Island	access:public	signature:(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)
Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::Solve(const b2TimeStep& step)$/;"	f	class:b2World	signature:(const b2TimeStep& step)
Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void Solve(const b2TimeStep& step);$/;"	p	class:b2World	access:private	signature:(const b2TimeStep& step)
Solve2	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void Solve2();$/;"	p	struct:b2Simplex	file:	access:public	signature:()
Solve2	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2Simplex::Solve2()$/;"	f	class:b2Simplex	signature:()
Solve22	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^b2Vec2 b2Mat33::Solve22(const b2Vec2& b) const$/;"	f	class:b2Mat33	signature:(const b2Vec2& b) const
Solve22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 Solve22(const b2Vec2& b) const;$/;"	p	struct:b2Mat33	access:public	signature:(const b2Vec2& b) const
Solve3	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void Solve3();$/;"	p	struct:b2Simplex	file:	access:public	signature:()
Solve3	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2Simplex::Solve3()$/;"	f	class:b2Simplex	signature:()
Solve33	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^b2Vec3 b2Mat33::Solve33(const b2Vec3& b) const$/;"	f	class:b2Mat33	signature:(const b2Vec3& b) const
Solve33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 Solve33(const b2Vec3& b) const;$/;"	p	struct:b2Mat33	access:public	signature:(const b2Vec3& b) const
SolveC2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::SolveC2()$/;"	f	class:b2Rope	signature:()
SolveC2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void SolveC2();$/;"	p	class:b2Rope	access:private	signature:()
SolveC3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::SolveC3()$/;"	f	class:b2Rope	signature:()
SolveC3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void SolveC3();$/;"	p	class:b2Rope	access:private	signature:()
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^bool b2ContactSolver::SolvePositionConstraints()$/;"	f	class:b2ContactSolver	signature:()
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	bool SolvePositionConstraints();$/;"	p	class:b2ContactSolver	access:public	signature:()
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^bool b2DistanceJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^bool b2FrictionJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^bool b2GearJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual bool SolvePositionConstraints(const b2SolverData& data) = 0;$/;"	p	class:b2Joint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^bool b2MotorJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^bool b2MouseJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^bool b2RopeJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^bool b2WeldJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^bool b2WheelJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint	signature:(const b2SolverData& data)
SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2SolverData& data)
SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^void b2Island::SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2Island	signature:(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)
SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB);$/;"	p	class:b2Island	access:public	signature:(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)
SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SolveTOI(const b2TimeStep& step)$/;"	f	class:b2World	signature:(const b2TimeStep& step)
SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SolveTOI(const b2TimeStep& step);$/;"	p	class:b2World	access:private	signature:(const b2TimeStep& step)
SolveTOIPositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^bool b2ContactSolver::SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2ContactSolver	signature:(int32 toiIndexA, int32 toiIndexB)
SolveTOIPositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	bool SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB);$/;"	p	class:b2ContactSolver	access:public	signature:(int32 toiIndexA, int32 toiIndexB)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::SolveVelocityConstraints()$/;"	f	class:b2ContactSolver	signature:()
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void SolveVelocityConstraints();$/;"	p	class:b2ContactSolver	access:public	signature:()
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void SolveVelocityConstraints(const b2SolverData& data) = 0;$/;"	p	class:b2Joint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^void b2RopeJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint	signature:(const b2SolverData& data)
SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2SolverData& data)
State	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	enum State$/;"	g	struct:b2TOIOutput	access:public
Step	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::Step(float32 dt, int32 velocityIterations, int32 positionIterations)$/;"	f	class:b2World	signature:(float32 dt, int32 velocityIterations, int32 positionIterations)
Step	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void Step(	float32 timeStep,$/;"	p	class:b2World	access:public	signature:( float32 timeStep, int32 velocityIterations, int32 positionIterations)
Step	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::Step(float32 h, int32 iterations)$/;"	f	class:b2Rope	signature:(float32 h, int32 iterations)
Step	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void Step(float32 timeStep, int32 iterations);$/;"	p	class:b2Rope	access:public	signature:(float32 timeStep, int32 iterations)
StoreImpulses	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::StoreImpulses()$/;"	f	class:b2ContactSolver	signature:()
StoreImpulses	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void StoreImpulses();$/;"	p	class:b2ContactSolver	access:public	signature:()
Synchronize	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Synchronize(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)$/;"	f	class:b2Fixture	signature:(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)
Synchronize	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Synchronize(b2BroadPhase* broadPhase, const b2Transform& xf1, const b2Transform& xf2);$/;"	p	class:b2Fixture	access:protected	signature:(b2BroadPhase* broadPhase, const b2Transform& xf1, const b2Transform& xf2)
SynchronizeFixtures	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SynchronizeFixtures()$/;"	f	class:b2Body	signature:()
SynchronizeFixtures	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SynchronizeFixtures();$/;"	p	class:b2Body	access:private	signature:()
SynchronizeTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SynchronizeTransform();$/;"	p	class:b2Body	access:private	signature:()
SynchronizeTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SynchronizeTransform()$/;"	f	class:b2Body	signature:()
TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	bool TestOverlap(int32 proxyIdA, int32 proxyIdB) const;$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyIdA, int32 proxyIdB) const
TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline bool b2BroadPhase::TestOverlap(int32 proxyIdA, int32 proxyIdB) const$/;"	f	class:b2BroadPhase	signature:(int32 proxyIdA, int32 proxyIdB) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^bool b2ChainShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2ChainShape	signature:(const b2Transform& xf, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2ChainShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^bool b2CircleShape::TestPoint(const b2Transform& transform, const b2Vec2& p) const$/;"	f	class:b2CircleShape	signature:(const b2Transform& transform, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2CircleShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^bool b2EdgeShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2EdgeShape	signature:(const b2Transform& xf, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2EdgeShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^bool b2PolygonShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2PolygonShape	signature:(const b2Transform& xf, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2PolygonShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual bool TestPoint(const b2Transform& xf, const b2Vec2& p) const = 0;$/;"	p	class:b2Shape	access:public	signature:(const b2Transform& xf, const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool TestPoint(const b2Vec2& p) const;$/;"	p	class:b2Fixture	access:public	signature:(const b2Vec2& p) const
TestPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline bool b2Fixture::TestPoint(const b2Vec2& p) const$/;"	f	class:b2Fixture	signature:(const b2Vec2& p) const
TouchProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::TouchProxy(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
TouchProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void TouchProxy(int32 proxyId);$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId)
Type	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	enum Type$/;"	g	class:b2Shape	access:public
Type	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	enum Type$/;"	g	struct:b2EPAxis	file:	access:public
Type	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	enum Type$/;"	g	struct:b2ContactFeature	access:public
Type	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	enum Type$/;"	g	struct:b2Manifold	access:public
Type	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	enum Type$/;"	g	struct:b2SeparationFunction	file:	access:public
UnBufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::UnBufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
UnBufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void UnBufferMove(int32 proxyId);$/;"	p	class:b2BroadPhase	access:private	signature:(int32 proxyId)
Update	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::Update(b2ContactListener* listener)$/;"	f	class:b2Contact	signature:(b2ContactListener* listener)
Update	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void Update(b2ContactListener* listener);$/;"	p	class:b2Contact	access:protected	signature:(b2ContactListener* listener)
UpdatePairs	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void UpdatePairs(T* callback);$/;"	p	class:b2BroadPhase	access:public	signature:(T* callback)
UpdatePairs	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^void b2BroadPhase::UpdatePairs(T* callback)$/;"	f	class:b2BroadPhase	signature:(T* callback)
Validate	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^bool b2PolygonShape::Validate() const$/;"	f	class:b2PolygonShape	signature:() const
Validate	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	bool Validate() const;$/;"	p	class:b2PolygonShape	access:public	signature:() const
Validate	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::Validate() const$/;"	f	class:b2DynamicTree	signature:() const
Validate	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void Validate() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
ValidateMetrics	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::ValidateMetrics(int32 index) const$/;"	f	class:b2DynamicTree	signature:(int32 index) const
ValidateMetrics	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void ValidateMetrics(int32 index) const;$/;"	p	class:b2DynamicTree	access:private	signature:(int32 index) const
ValidateStructure	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::ValidateStructure(int32 index) const$/;"	f	class:b2DynamicTree	signature:(int32 index) const
ValidateStructure	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void ValidateStructure(int32 index) const;$/;"	p	class:b2DynamicTree	access:private	signature:(int32 index) const
VertexType	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	enum VertexType$/;"	g	struct:b2EPCollider	file:	access:public
WIN32_LEAN_AND_MEAN	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	25;"	d	file:
WarmStart	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::WarmStart()$/;"	f	class:b2ContactSolver	signature:()
WarmStart	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void WarmStart();$/;"	p	class:b2ContactSolver	access:public	signature:()
WriteCache	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void WriteCache(b2SimplexCache* cache) const$/;"	f	struct:b2Simplex	access:public	signature:(b2SimplexCache* cache) const
a	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	float32 a;		\/\/ barycentric coordinate for closest point$/;"	m	struct:b2SimplexVertex	file:	access:public
a	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
a	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep	access:public
a	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 a;$/;"	m	struct:b2Position	access:public
a0	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep	access:public
aabb	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	b2AABB aabb;$/;"	m	struct:b2TreeNode	access:public
aabb	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2AABB aabb;$/;"	m	struct:b2FixtureProxy	access:public
active	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool active;$/;"	m	struct:b2BodyDef	access:public
allocator	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef	access:public
allowSleep	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool allowSleep;$/;"	m	struct:b2BodyDef	access:public
alpha0	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 alpha0;$/;"	m	struct:b2Sweep	access:public
angle	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 angle;$/;"	m	struct:b2BodyDef	access:public
angularA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	float32 angularA;$/;"	m	struct:b2Jacobian	access:public
angularB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	float32 angularB;$/;"	m	struct:b2Jacobian	access:public
angularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 angularDamping;$/;"	m	struct:b2BodyDef	access:public
angularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 angularOffset;$/;"	m	struct:b2MotorJointDef	access:public
angularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 angularVelocity;$/;"	m	struct:b2BodyDef	access:public
awake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool awake;$/;"	m	struct:b2BodyDef	access:public
b	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
b2AABB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2AABB$/;"	s
b2AABB::Combine	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	void Combine(const b2AABB& aabb)$/;"	f	struct:b2AABB	access:public	signature:(const b2AABB& aabb)
b2AABB::Combine	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	void Combine(const b2AABB& aabb1, const b2AABB& aabb2)$/;"	f	struct:b2AABB	access:public	signature:(const b2AABB& aabb1, const b2AABB& aabb2)
b2AABB::Contains	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	bool Contains(const b2AABB& aabb) const$/;"	f	struct:b2AABB	access:public	signature:(const b2AABB& aabb) const
b2AABB::GetCenter	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 GetCenter() const$/;"	f	struct:b2AABB	access:public	signature:() const
b2AABB::GetExtents	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 GetExtents() const$/;"	f	struct:b2AABB	access:public	signature:() const
b2AABB::GetPerimeter	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 GetPerimeter() const$/;"	f	struct:b2AABB	access:public	signature:() const
b2AABB::IsValid	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	bool IsValid() const;$/;"	p	struct:b2AABB	access:public	signature:() const
b2AABB::IsValid	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^inline bool b2AABB::IsValid() const$/;"	f	class:b2AABB	signature:() const
b2AABB::RayCast	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^bool b2AABB::RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const$/;"	f	class:b2AABB	signature:(b2RayCastOutput* output, const b2RayCastInput& input) const
b2AABB::RayCast	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const;$/;"	p	struct:b2AABB	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input) const
b2AABB::lowerBound	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 lowerBound;	\/\/\/< the lower vertex$/;"	m	struct:b2AABB	access:public
b2AABB::upperBound	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 upperBound;	\/\/\/< the upper vertex$/;"	m	struct:b2AABB	access:public
b2Abs	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline T b2Abs(T a)$/;"	f	signature:(T a)
b2Abs	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Mat22 b2Abs(const b2Mat22& A)$/;"	f	signature:(const b2Mat22& A)
b2Abs	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Abs(const b2Vec2& a)$/;"	f	signature:(const b2Vec2& a)
b2Alloc	C:\Box2D\Box2D\Box2D\Common\b2Settings.cpp	/^void* b2Alloc(int32 size)$/;"	f	signature:(int32 size)
b2Alloc	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^void* b2Alloc(int32 size);$/;"	p	signature:(int32 size)
b2Assert	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	27;"	d
b2Atan2	C:\Box2D\Box2D\Box2D\Common\b2Math.h	50;"	d
b2Block	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^struct b2Block$/;"	s	file:
b2Block::next	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^	b2Block* next;$/;"	m	struct:b2Block	file:	access:public
b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^b2BlockAllocator::b2BlockAllocator()$/;"	f	class:b2BlockAllocator	signature:()
b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	b2BlockAllocator();$/;"	p	class:b2BlockAllocator	access:public	signature:()
b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^class b2BlockAllocator$/;"	c
b2BlockAllocator::Allocate	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^void* b2BlockAllocator::Allocate(int32 size)$/;"	f	class:b2BlockAllocator	signature:(int32 size)
b2BlockAllocator::Allocate	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	void* Allocate(int32 size);$/;"	p	class:b2BlockAllocator	access:public	signature:(int32 size)
b2BlockAllocator::Clear	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^void b2BlockAllocator::Clear()$/;"	f	class:b2BlockAllocator	signature:()
b2BlockAllocator::Clear	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	void Clear();$/;"	p	class:b2BlockAllocator	access:public	signature:()
b2BlockAllocator::Free	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^void b2BlockAllocator::Free(void* p, int32 size)$/;"	f	class:b2BlockAllocator	signature:(void* p, int32 size)
b2BlockAllocator::Free	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	void Free(void* p, int32 size);$/;"	p	class:b2BlockAllocator	access:public	signature:(void* p, int32 size)
b2BlockAllocator::b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^b2BlockAllocator::b2BlockAllocator()$/;"	f	class:b2BlockAllocator	signature:()
b2BlockAllocator::b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	b2BlockAllocator();$/;"	p	class:b2BlockAllocator	access:public	signature:()
b2BlockAllocator::m_chunkCount	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	int32 m_chunkCount;$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::m_chunkSpace	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	int32 m_chunkSpace;$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::m_chunks	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	b2Chunk* m_chunks;$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::m_freeLists	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	b2Block* m_freeLists[b2_blockSizes];$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::s_blockSizeLookup	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	file:
b2BlockAllocator::s_blockSizeLookup	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::s_blockSizeLookupInitialized	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^bool b2BlockAllocator::s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	file:
b2BlockAllocator::s_blockSizeLookupInitialized	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	static bool s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::s_blockSizes	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^int32 b2BlockAllocator::s_blockSizes[b2_blockSizes] = $/;"	m	class:b2BlockAllocator	file:
b2BlockAllocator::s_blockSizes	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	static int32 s_blockSizes[b2_blockSizes];$/;"	m	class:b2BlockAllocator	access:private
b2BlockAllocator::~b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^b2BlockAllocator::~b2BlockAllocator()$/;"	f	class:b2BlockAllocator	signature:()
b2BlockAllocator::~b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	~b2BlockAllocator();$/;"	p	class:b2BlockAllocator	access:public	signature:()
b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Body::b2Body(const b2BodyDef* bd, b2World* world)$/;"	f	class:b2Body	signature:(const b2BodyDef* bd, b2World* world)
b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body(const b2BodyDef* bd, b2World* world);$/;"	p	class:b2Body	access:private	signature:(const b2BodyDef* bd, b2World* world)
b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^class b2Body$/;"	c
b2Body::Advance	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void Advance(float32 t);$/;"	p	class:b2Body	access:private	signature:(float32 t)
b2Body::Advance	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::Advance(float32 alpha)$/;"	f	class:b2Body	signature:(float32 alpha)
b2Body::ApplyAngularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyAngularImpulse(float32 impulse, bool wake);$/;"	p	class:b2Body	access:public	signature:(float32 impulse, bool wake)
b2Body::ApplyAngularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyAngularImpulse(float32 impulse, bool wake)$/;"	f	class:b2Body	signature:(float32 impulse, bool wake)
b2Body::ApplyForce	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyForce(const b2Vec2& force, const b2Vec2& point, bool wake);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& force, const b2Vec2& point, bool wake)
b2Body::ApplyForce	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyForce(const b2Vec2& force, const b2Vec2& point, bool wake)$/;"	f	class:b2Body	signature:(const b2Vec2& force, const b2Vec2& point, bool wake)
b2Body::ApplyForceToCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyForceToCenter(const b2Vec2& force, bool wake);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& force, bool wake)
b2Body::ApplyForceToCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyForceToCenter(const b2Vec2& force, bool wake)$/;"	f	class:b2Body	signature:(const b2Vec2& force, bool wake)
b2Body::ApplyLinearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point, bool wake);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& impulse, const b2Vec2& point, bool wake)
b2Body::ApplyLinearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point, bool wake)$/;"	f	class:b2Body	signature:(const b2Vec2& impulse, const b2Vec2& point, bool wake)
b2Body::ApplyTorque	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ApplyTorque(float32 torque, bool wake);$/;"	p	class:b2Body	access:public	signature:(float32 torque, bool wake)
b2Body::ApplyTorque	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::ApplyTorque(float32 torque, bool wake)$/;"	f	class:b2Body	signature:(float32 torque, bool wake)
b2Body::CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)$/;"	f	class:b2Body	signature:(const b2FixtureDef* def)
b2Body::CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)$/;"	f	class:b2Body	signature:(const b2Shape* shape, float32 density)
b2Body::CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* CreateFixture(const b2FixtureDef* def);$/;"	p	class:b2Body	access:public	signature:(const b2FixtureDef* def)
b2Body::CreateFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* CreateFixture(const b2Shape* shape, float32 density);$/;"	p	class:b2Body	access:public	signature:(const b2Shape* shape, float32 density)
b2Body::DestroyFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::DestroyFixture(b2Fixture* fixture)$/;"	f	class:b2Body	signature:(b2Fixture* fixture)
b2Body::DestroyFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void DestroyFixture(b2Fixture* fixture);$/;"	p	class:b2Body	access:public	signature:(b2Fixture* fixture)
b2Body::Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::Dump()$/;"	f	class:b2Body	signature:()
b2Body::Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void Dump();$/;"	p	class:b2Body	access:public	signature:()
b2Body::GetAngle	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetAngle() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetAngle	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetAngle() const$/;"	f	class:b2Body	signature:() const
b2Body::GetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetAngularDamping() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetAngularDamping() const$/;"	f	class:b2Body	signature:() const
b2Body::GetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetAngularVelocity() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetAngularVelocity() const$/;"	f	class:b2Body	signature:() const
b2Body::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2ContactEdge* GetContactList();$/;"	p	class:b2Body	access:public	signature:()
b2Body::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2ContactEdge* GetContactList() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2ContactEdge* b2Body::GetContactList()$/;"	f	class:b2Body	signature:()
b2Body::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2ContactEdge* b2Body::GetContactList() const$/;"	f	class:b2Body	signature:() const
b2Body::GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* GetFixtureList();$/;"	p	class:b2Body	access:public	signature:()
b2Body::GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Fixture* GetFixtureList() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Fixture* b2Body::GetFixtureList()$/;"	f	class:b2Body	signature:()
b2Body::GetFixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Fixture* b2Body::GetFixtureList() const$/;"	f	class:b2Body	signature:() const
b2Body::GetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetGravityScale() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetGravityScale() const$/;"	f	class:b2Body	signature:() const
b2Body::GetInertia	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetInertia() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetInertia	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetInertia() const$/;"	f	class:b2Body	signature:() const
b2Body::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2JointEdge* GetJointList();$/;"	p	class:b2Body	access:public	signature:()
b2Body::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2JointEdge* GetJointList() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2JointEdge* b2Body::GetJointList()$/;"	f	class:b2Body	signature:()
b2Body::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2JointEdge* b2Body::GetJointList() const$/;"	f	class:b2Body	signature:() const
b2Body::GetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetLinearDamping() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetLinearDamping() const$/;"	f	class:b2Body	signature:() const
b2Body::GetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetLinearVelocity() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetLinearVelocity() const$/;"	f	class:b2Body	signature:() const
b2Body::GetLinearVelocityFromLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& localPoint) const
b2Body::GetLinearVelocityFromLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& localPoint) const
b2Body::GetLinearVelocityFromWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& worldPoint) const
b2Body::GetLinearVelocityFromWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& worldPoint) const
b2Body::GetLocalCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetLocalCenter() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetLocalCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetLocalCenter() const$/;"	f	class:b2Body	signature:() const
b2Body::GetLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLocalPoint(const b2Vec2& worldPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& worldPoint) const
b2Body::GetLocalPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLocalPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& worldPoint) const
b2Body::GetLocalVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetLocalVector(const b2Vec2& worldVector) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& worldVector) const
b2Body::GetLocalVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetLocalVector(const b2Vec2& worldVector) const$/;"	f	class:b2Body	signature:(const b2Vec2& worldVector) const
b2Body::GetMass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 GetMass() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetMass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline float32 b2Body::GetMass() const$/;"	f	class:b2Body	signature:() const
b2Body::GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void GetMassData(b2MassData* data) const;$/;"	p	class:b2Body	access:public	signature:(b2MassData* data) const
b2Body::GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::GetMassData(b2MassData* data) const$/;"	f	class:b2Body	signature:(b2MassData* data) const
b2Body::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body* GetNext();$/;"	p	class:b2Body	access:public	signature:()
b2Body::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Body* GetNext() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Body* b2Body::GetNext()$/;"	f	class:b2Body	signature:()
b2Body::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Body* b2Body::GetNext() const$/;"	f	class:b2Body	signature:() const
b2Body::GetPosition	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetPosition() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetPosition	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetPosition() const$/;"	f	class:b2Body	signature:() const
b2Body::GetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Transform& GetTransform() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Transform& b2Body::GetTransform() const$/;"	f	class:b2Body	signature:() const
b2Body::GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyType GetType() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2BodyType b2Body::GetType() const$/;"	f	class:b2Body	signature:() const
b2Body::GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void* GetUserData() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void* b2Body::GetUserData() const$/;"	f	class:b2Body	signature:() const
b2Body::GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2World* GetWorld();$/;"	p	class:b2Body	access:public	signature:()
b2Body::GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2World* GetWorld() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2World* b2Body::GetWorld()$/;"	f	class:b2Body	signature:()
b2Body::GetWorld	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2World* b2Body::GetWorld() const$/;"	f	class:b2Body	signature:() const
b2Body::GetWorldCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	const b2Vec2& GetWorldCenter() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::GetWorldCenter	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline const b2Vec2& b2Body::GetWorldCenter() const$/;"	f	class:b2Body	signature:() const
b2Body::GetWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetWorldPoint(const b2Vec2& localPoint) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& localPoint) const
b2Body::GetWorldPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetWorldPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body	signature:(const b2Vec2& localPoint) const
b2Body::GetWorldVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 GetWorldVector(const b2Vec2& localVector) const;$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& localVector) const
b2Body::GetWorldVector	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline b2Vec2 b2Body::GetWorldVector(const b2Vec2& localVector) const$/;"	f	class:b2Body	signature:(const b2Vec2& localVector) const
b2Body::IsActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsActive() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::IsActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsActive() const$/;"	f	class:b2Body	signature:() const
b2Body::IsAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsAwake() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::IsAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsAwake() const$/;"	f	class:b2Body	signature:() const
b2Body::IsBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsBullet() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::IsBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsBullet() const$/;"	f	class:b2Body	signature:() const
b2Body::IsFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsFixedRotation() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::IsFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsFixedRotation() const$/;"	f	class:b2Body	signature:() const
b2Body::IsSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool IsSleepingAllowed() const;$/;"	p	class:b2Body	access:public	signature:() const
b2Body::IsSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline bool b2Body::IsSleepingAllowed() const$/;"	f	class:b2Body	signature:() const
b2Body::ResetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::ResetMassData()$/;"	f	class:b2Body	signature:()
b2Body::ResetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void ResetMassData();$/;"	p	class:b2Body	access:public	signature:()
b2Body::SetActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetActive(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
b2Body::SetActive	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetActive(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
b2Body::SetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetAngularDamping(float32 angularDamping);$/;"	p	class:b2Body	access:public	signature:(float32 angularDamping)
b2Body::SetAngularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetAngularDamping(float32 angularDamping)$/;"	f	class:b2Body	signature:(float32 angularDamping)
b2Body::SetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetAngularVelocity(float32 omega);$/;"	p	class:b2Body	access:public	signature:(float32 omega)
b2Body::SetAngularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetAngularVelocity(float32 w)$/;"	f	class:b2Body	signature:(float32 w)
b2Body::SetAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetAwake(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
b2Body::SetAwake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetAwake(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
b2Body::SetBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetBullet(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
b2Body::SetBullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetBullet(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
b2Body::SetFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetFixedRotation(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
b2Body::SetFixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetFixedRotation(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
b2Body::SetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetGravityScale(float32 scale);$/;"	p	class:b2Body	access:public	signature:(float32 scale)
b2Body::SetGravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetGravityScale(float32 scale)$/;"	f	class:b2Body	signature:(float32 scale)
b2Body::SetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetLinearDamping(float32 linearDamping);$/;"	p	class:b2Body	access:public	signature:(float32 linearDamping)
b2Body::SetLinearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetLinearDamping(float32 linearDamping)$/;"	f	class:b2Body	signature:(float32 linearDamping)
b2Body::SetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetLinearVelocity(const b2Vec2& v);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& v)
b2Body::SetLinearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetLinearVelocity(const b2Vec2& v)$/;"	f	class:b2Body	signature:(const b2Vec2& v)
b2Body::SetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetMassData(const b2MassData* massData)$/;"	f	class:b2Body	signature:(const b2MassData* massData)
b2Body::SetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetMassData(const b2MassData* data);$/;"	p	class:b2Body	access:public	signature:(const b2MassData* data)
b2Body::SetSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetSleepingAllowed(bool flag);$/;"	p	class:b2Body	access:public	signature:(bool flag)
b2Body::SetSleepingAllowed	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetSleepingAllowed(bool flag)$/;"	f	class:b2Body	signature:(bool flag)
b2Body::SetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetTransform(const b2Vec2& position, float32 angle)$/;"	f	class:b2Body	signature:(const b2Vec2& position, float32 angle)
b2Body::SetTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetTransform(const b2Vec2& position, float32 angle);$/;"	p	class:b2Body	access:public	signature:(const b2Vec2& position, float32 angle)
b2Body::SetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SetType(b2BodyType type)$/;"	f	class:b2Body	signature:(b2BodyType type)
b2Body::SetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetType(b2BodyType type);$/;"	p	class:b2Body	access:public	signature:(b2BodyType type)
b2Body::SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SetUserData(void* data);$/;"	p	class:b2Body	access:public	signature:(void* data)
b2Body::SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SetUserData(void* data)$/;"	f	class:b2Body	signature:(void* data)
b2Body::ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^bool b2Body::ShouldCollide(const b2Body* other) const$/;"	f	class:b2Body	signature:(const b2Body* other) const
b2Body::ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool ShouldCollide(const b2Body* other) const;$/;"	p	class:b2Body	access:private	signature:(const b2Body* other) const
b2Body::SynchronizeFixtures	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^void b2Body::SynchronizeFixtures()$/;"	f	class:b2Body	signature:()
b2Body::SynchronizeFixtures	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SynchronizeFixtures();$/;"	p	class:b2Body	access:private	signature:()
b2Body::SynchronizeTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void SynchronizeTransform();$/;"	p	class:b2Body	access:private	signature:()
b2Body::SynchronizeTransform	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^inline void b2Body::SynchronizeTransform()$/;"	f	class:b2Body	signature:()
b2Body::b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Body::b2Body(const b2BodyDef* bd, b2World* world)$/;"	f	class:b2Body	signature:(const b2BodyDef* bd, b2World* world)
b2Body::b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body(const b2BodyDef* bd, b2World* world);$/;"	p	class:b2Body	access:private	signature:(const b2BodyDef* bd, b2World* world)
b2Body::e_activeFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_activeFlag		= 0x0020,$/;"	e	enum:b2Body::__anon4
b2Body::e_autoSleepFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_autoSleepFlag		= 0x0004,$/;"	e	enum:b2Body::__anon4
b2Body::e_awakeFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_awakeFlag			= 0x0002,$/;"	e	enum:b2Body::__anon4
b2Body::e_bulletFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_bulletFlag		= 0x0008,$/;"	e	enum:b2Body::__anon4
b2Body::e_fixedRotationFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_fixedRotationFlag	= 0x0010,$/;"	e	enum:b2Body::__anon4
b2Body::e_islandFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Body::__anon4
b2Body::e_toiFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_toiFlag			= 0x0040$/;"	e	enum:b2Body::__anon4
b2Body::m_I	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body	access:private
b2Body::m_angularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_angularDamping;$/;"	m	class:b2Body	access:private
b2Body::m_angularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_angularVelocity;$/;"	m	class:b2Body	access:private
b2Body::m_contactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2ContactEdge* m_contactList;$/;"	m	class:b2Body	access:private
b2Body::m_fixtureCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	int32 m_fixtureCount;$/;"	m	class:b2Body	access:private
b2Body::m_fixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* m_fixtureList;$/;"	m	class:b2Body	access:private
b2Body::m_flags	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	uint16 m_flags;$/;"	m	class:b2Body	access:private
b2Body::m_force	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 m_force;$/;"	m	class:b2Body	access:private
b2Body::m_gravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_gravityScale;$/;"	m	class:b2Body	access:private
b2Body::m_invI	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body	access:private
b2Body::m_invMass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body	access:private
b2Body::m_islandIndex	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	int32 m_islandIndex;$/;"	m	class:b2Body	access:private
b2Body::m_jointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2JointEdge* m_jointList;$/;"	m	class:b2Body	access:private
b2Body::m_linearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_linearDamping;$/;"	m	class:b2Body	access:private
b2Body::m_linearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 m_linearVelocity;$/;"	m	class:b2Body	access:private
b2Body::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body	access:private
b2Body::m_next	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body* m_next;$/;"	m	class:b2Body	access:private
b2Body::m_prev	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body* m_prev;$/;"	m	class:b2Body	access:private
b2Body::m_sleepTime	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_sleepTime;$/;"	m	class:b2Body	access:private
b2Body::m_sweep	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Sweep m_sweep;		\/\/ the swept motion for CCD$/;"	m	class:b2Body	access:private
b2Body::m_torque	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_torque;$/;"	m	class:b2Body	access:private
b2Body::m_type	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyType m_type;$/;"	m	class:b2Body	access:private
b2Body::m_userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void* m_userData;$/;"	m	class:b2Body	access:private
b2Body::m_world	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2World* m_world;$/;"	m	class:b2Body	access:private
b2Body::m_xf	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Transform m_xf;		\/\/ the body origin transform$/;"	m	class:b2Body	access:private
b2Body::~b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Body::~b2Body()$/;"	f	class:b2Body	signature:()
b2Body::~b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	~b2Body();$/;"	p	class:b2Body	access:private	signature:()
b2BodyDef	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyDef()$/;"	f	struct:b2BodyDef	access:public	signature:()
b2BodyDef	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^struct b2BodyDef$/;"	s
b2BodyDef::active	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool active;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::allowSleep	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool allowSleep;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::angle	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 angle;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::angularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 angularDamping;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::angularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 angularVelocity;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::awake	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool awake;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::b2BodyDef	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyDef()$/;"	f	struct:b2BodyDef	access:public	signature:()
b2BodyDef::bullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool bullet;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::fixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool fixedRotation;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::gravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 gravityScale;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::linearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 linearDamping;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::linearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 linearVelocity;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::position	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 position;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::type	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyType type;$/;"	m	struct:b2BodyDef	access:public
b2BodyDef::userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void* userData;$/;"	m	struct:b2BodyDef	access:public
b2BodyType	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^enum b2BodyType$/;"	g
b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^b2BroadPhase::b2BroadPhase()$/;"	f	class:b2BroadPhase	signature:()
b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	b2BroadPhase();$/;"	p	class:b2BroadPhase	access:public	signature:()
b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^class b2BroadPhase$/;"	c
b2BroadPhase::BufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::BufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
b2BroadPhase::BufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void BufferMove(int32 proxyId);$/;"	p	class:b2BroadPhase	access:private	signature:(int32 proxyId)
b2BroadPhase::CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^int32 b2BroadPhase::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2BroadPhase	signature:(const b2AABB& aabb, void* userData)
b2BroadPhase::CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 CreateProxy(const b2AABB& aabb, void* userData);$/;"	p	class:b2BroadPhase	access:public	signature:(const b2AABB& aabb, void* userData)
b2BroadPhase::DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::DestroyProxy(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
b2BroadPhase::DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void DestroyProxy(int32 proxyId);$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId)
b2BroadPhase::GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	const b2AABB& GetFatAABB(int32 proxyId) const;$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId) const
b2BroadPhase::GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline const b2AABB& b2BroadPhase::GetFatAABB(int32 proxyId) const$/;"	f	class:b2BroadPhase	signature:(int32 proxyId) const
b2BroadPhase::GetProxyCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 GetProxyCount() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
b2BroadPhase::GetProxyCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline int32 b2BroadPhase::GetProxyCount() const$/;"	f	class:b2BroadPhase	signature:() const
b2BroadPhase::GetTreeBalance	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 GetTreeBalance() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
b2BroadPhase::GetTreeBalance	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeBalance() const$/;"	f	class:b2BroadPhase	signature:() const
b2BroadPhase::GetTreeHeight	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 GetTreeHeight() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
b2BroadPhase::GetTreeHeight	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeHeight() const$/;"	f	class:b2BroadPhase	signature:() const
b2BroadPhase::GetTreeQuality	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	float32 GetTreeQuality() const;$/;"	p	class:b2BroadPhase	access:public	signature:() const
b2BroadPhase::GetTreeQuality	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline float32 b2BroadPhase::GetTreeQuality() const$/;"	f	class:b2BroadPhase	signature:() const
b2BroadPhase::GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void* GetUserData(int32 proxyId) const;$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId) const
b2BroadPhase::GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void* b2BroadPhase::GetUserData(int32 proxyId) const$/;"	f	class:b2BroadPhase	signature:(int32 proxyId) const
b2BroadPhase::MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
b2BroadPhase::MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement);$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
b2BroadPhase::Query	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void Query(T* callback, const b2AABB& aabb) const;$/;"	p	class:b2BroadPhase	access:public	signature:(T* callback, const b2AABB& aabb) const
b2BroadPhase::Query	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void b2BroadPhase::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2BroadPhase	signature:(T* callback, const b2AABB& aabb) const
b2BroadPhase::QueryCallback	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^bool b2BroadPhase::QueryCallback(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
b2BroadPhase::QueryCallback	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	bool QueryCallback(int32 proxyId);$/;"	p	class:b2BroadPhase	access:private	signature:(int32 proxyId)
b2BroadPhase::RayCast	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void RayCast(T* callback, const b2RayCastInput& input) const;$/;"	p	class:b2BroadPhase	access:public	signature:(T* callback, const b2RayCastInput& input) const
b2BroadPhase::RayCast	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void b2BroadPhase::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2BroadPhase	signature:(T* callback, const b2RayCastInput& input) const
b2BroadPhase::ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2BroadPhase	access:public	signature:(const b2Vec2& newOrigin)
b2BroadPhase::ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline void b2BroadPhase::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2BroadPhase	signature:(const b2Vec2& newOrigin)
b2BroadPhase::TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	bool TestOverlap(int32 proxyIdA, int32 proxyIdB) const;$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyIdA, int32 proxyIdB) const
b2BroadPhase::TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline bool b2BroadPhase::TestOverlap(int32 proxyIdA, int32 proxyIdB) const$/;"	f	class:b2BroadPhase	signature:(int32 proxyIdA, int32 proxyIdB) const
b2BroadPhase::TouchProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::TouchProxy(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
b2BroadPhase::TouchProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void TouchProxy(int32 proxyId);$/;"	p	class:b2BroadPhase	access:public	signature:(int32 proxyId)
b2BroadPhase::UnBufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^void b2BroadPhase::UnBufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase	signature:(int32 proxyId)
b2BroadPhase::UnBufferMove	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void UnBufferMove(int32 proxyId);$/;"	p	class:b2BroadPhase	access:private	signature:(int32 proxyId)
b2BroadPhase::UpdatePairs	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	void UpdatePairs(T* callback);$/;"	p	class:b2BroadPhase	access:public	signature:(T* callback)
b2BroadPhase::UpdatePairs	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^void b2BroadPhase::UpdatePairs(T* callback)$/;"	f	class:b2BroadPhase	signature:(T* callback)
b2BroadPhase::b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^b2BroadPhase::b2BroadPhase()$/;"	f	class:b2BroadPhase	signature:()
b2BroadPhase::b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	b2BroadPhase();$/;"	p	class:b2BroadPhase	access:public	signature:()
b2BroadPhase::e_nullProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^		e_nullProxy = -1$/;"	e	enum:b2BroadPhase::__anon1
b2BroadPhase::m_moveBuffer	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32* m_moveBuffer;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_moveCapacity	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_moveCapacity;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_moveCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_moveCount;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_pairBuffer	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	b2Pair* m_pairBuffer;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_pairCapacity	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_pairCapacity;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_pairCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_pairCount;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_proxyCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_proxyCount;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_queryProxyId	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_queryProxyId;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::m_tree	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	b2DynamicTree m_tree;$/;"	m	class:b2BroadPhase	access:private
b2BroadPhase::~b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^b2BroadPhase::~b2BroadPhase()$/;"	f	class:b2BroadPhase	signature:()
b2BroadPhase::~b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	~b2BroadPhase();$/;"	p	class:b2BroadPhase	access:public	signature:()
b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^b2ChainAndCircleContact::b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2ChainAndCircleContact	access:public	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^class b2ChainAndCircleContact : public b2Contact$/;"	c	inherits:b2Contact
b2ChainAndCircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^b2Contact* b2ChainAndCircleContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2ChainAndCircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2ChainAndCircleContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2ChainAndCircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2ChainAndCircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2ChainAndCircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2ChainAndCircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2ChainAndCircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2ChainAndCircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2ChainAndCircleContact::b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.cpp	/^b2ChainAndCircleContact::b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndCircleContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndCircleContact::b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2ChainAndCircleContact	access:public	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndCircleContact::~b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact	access:public	signature:()
b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^b2ChainAndPolygonContact::b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^class b2ChainAndPolygonContact : public b2Contact$/;"	c	inherits:b2Contact
b2ChainAndPolygonContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^b2Contact* b2ChainAndPolygonContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2ChainAndPolygonContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2ChainAndPolygonContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2ChainAndPolygonContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2ChainAndPolygonContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2ChainAndPolygonContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2ChainAndPolygonContact::b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.cpp	/^b2ChainAndPolygonContact::b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndPolygonContact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndPolygonContact::b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2ChainAndPolygonContact	access:public	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2ChainAndPolygonContact::~b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact	access:public	signature:()
b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2ChainShape();$/;"	p	class:b2ChainShape	access:public	signature:()
b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^class b2ChainShape : public b2Shape$/;"	c	inherits:b2Shape
b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^inline b2ChainShape::b2ChainShape()$/;"	f	class:b2ChainShape	signature:()
b2ChainShape::Clear	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::Clear()$/;"	f	class:b2ChainShape	signature:()
b2ChainShape::Clear	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void Clear();$/;"	p	class:b2ChainShape	access:public	signature:()
b2ChainShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^b2Shape* b2ChainShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2ChainShape	signature:(b2BlockAllocator* allocator) const
b2ChainShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2BlockAllocator* allocator) const
b2ChainShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2ChainShape	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
b2ChainShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
b2ChainShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2ChainShape	signature:(b2MassData* massData, float32 density) const
b2ChainShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2MassData* massData, float32 density) const
b2ChainShape::CreateChain	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape	signature:(const b2Vec2* vertices, int32 count)
b2ChainShape::CreateChain	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void CreateChain(const b2Vec2* vertices, int32 count);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2* vertices, int32 count)
b2ChainShape::CreateLoop	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape	signature:(const b2Vec2* vertices, int32 count)
b2ChainShape::CreateLoop	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void CreateLoop(const b2Vec2* vertices, int32 count);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2* vertices, int32 count)
b2ChainShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^int32 b2ChainShape::GetChildCount() const$/;"	f	class:b2ChainShape	signature:() const
b2ChainShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2ChainShape	access:public	signature:() const
b2ChainShape::GetChildEdge	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::GetChildEdge(b2EdgeShape* edge, int32 index) const$/;"	f	class:b2ChainShape	signature:(b2EdgeShape* edge, int32 index) const
b2ChainShape::GetChildEdge	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void GetChildEdge(b2EdgeShape* edge, int32 index) const;$/;"	p	class:b2ChainShape	access:public	signature:(b2EdgeShape* edge, int32 index) const
b2ChainShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^bool b2ChainShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2ChainShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& xf, int32 childIndex) const
b2ChainShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2ChainShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
b2ChainShape::SetNextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::SetNextVertex(const b2Vec2& nextVertex)$/;"	f	class:b2ChainShape	signature:(const b2Vec2& nextVertex)
b2ChainShape::SetNextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void SetNextVertex(const b2Vec2& nextVertex);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2& nextVertex)
b2ChainShape::SetPrevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^void b2ChainShape::SetPrevVertex(const b2Vec2& prevVertex)$/;"	f	class:b2ChainShape	signature:(const b2Vec2& prevVertex)
b2ChainShape::SetPrevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	void SetPrevVertex(const b2Vec2& prevVertex);$/;"	p	class:b2ChainShape	access:public	signature:(const b2Vec2& prevVertex)
b2ChainShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^bool b2ChainShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2ChainShape	signature:(const b2Transform& xf, const b2Vec2& p) const
b2ChainShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2ChainShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
b2ChainShape::b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2ChainShape();$/;"	p	class:b2ChainShape	access:public	signature:()
b2ChainShape::b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^inline b2ChainShape::b2ChainShape()$/;"	f	class:b2ChainShape	signature:()
b2ChainShape::m_count	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	int32 m_count;$/;"	m	class:b2ChainShape	access:public
b2ChainShape::m_hasNextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape	access:public
b2ChainShape::m_hasPrevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape	access:public
b2ChainShape::m_nextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape	access:public
b2ChainShape::m_prevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape	access:public
b2ChainShape::m_vertices	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Vec2* m_vertices;$/;"	m	class:b2ChainShape	access:public
b2ChainShape::~b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^b2ChainShape::~b2ChainShape()$/;"	f	class:b2ChainShape	signature:()
b2ChainShape::~b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	~b2ChainShape();$/;"	p	class:b2ChainShape	access:public	signature:()
b2Chunk	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^struct b2Chunk$/;"	s	file:
b2Chunk::blockSize	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^	int32 blockSize;$/;"	m	struct:b2Chunk	file:	access:public
b2Chunk::blocks	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^	b2Block* blocks;$/;"	m	struct:b2Chunk	file:	access:public
b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^b2CircleContact::b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2CircleContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2CircleContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^class b2CircleContact : public b2Contact$/;"	c	inherits:b2Contact
b2CircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^b2Contact* b2CircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
b2CircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2CircleContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2CircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^void b2CircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2CircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2CircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2CircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^void b2CircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2CircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2CircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2CircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2CircleContact::b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.cpp	/^b2CircleContact::b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2CircleContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2CircleContact::b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2CircleContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2CircleContact::~b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	~b2CircleContact() {}$/;"	f	class:b2CircleContact	access:public	signature:()
b2CircleShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	b2CircleShape();$/;"	p	class:b2CircleShape	access:public	signature:()
b2CircleShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^class b2CircleShape : public b2Shape$/;"	c	inherits:b2Shape
b2CircleShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline b2CircleShape::b2CircleShape()$/;"	f	class:b2CircleShape	signature:()
b2CircleShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^b2Shape* b2CircleShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2CircleShape	signature:(b2BlockAllocator* allocator) const
b2CircleShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2CircleShape	access:public	signature:(b2BlockAllocator* allocator) const
b2CircleShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^void b2CircleShape::ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const$/;"	f	class:b2CircleShape	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
b2CircleShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2CircleShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
b2CircleShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^void b2CircleShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2CircleShape	signature:(b2MassData* massData, float32 density) const
b2CircleShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2CircleShape	access:public	signature:(b2MassData* massData, float32 density) const
b2CircleShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^int32 b2CircleShape::GetChildCount() const$/;"	f	class:b2CircleShape	signature:() const
b2CircleShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2CircleShape	access:public	signature:() const
b2CircleShape::GetSupport	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	int32 GetSupport(const b2Vec2& d) const;$/;"	p	class:b2CircleShape	access:public	signature:(const b2Vec2& d) const
b2CircleShape::GetSupport	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline int32 b2CircleShape::GetSupport(const b2Vec2 &d) const$/;"	f	class:b2CircleShape	signature:(const b2Vec2 &d) const
b2CircleShape::GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	const b2Vec2& GetSupportVertex(const b2Vec2& d) const;$/;"	p	class:b2CircleShape	access:public	signature:(const b2Vec2& d) const
b2CircleShape::GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetSupportVertex(const b2Vec2 &d) const$/;"	f	class:b2CircleShape	signature:(const b2Vec2 &d) const
b2CircleShape::GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	const b2Vec2& GetVertex(int32 index) const;$/;"	p	class:b2CircleShape	access:public	signature:(int32 index) const
b2CircleShape::GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetVertex(int32 index) const$/;"	f	class:b2CircleShape	signature:(int32 index) const
b2CircleShape::GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	int32 GetVertexCount() const { return 1; }$/;"	f	class:b2CircleShape	access:public	signature:() const
b2CircleShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^bool b2CircleShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2CircleShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
b2CircleShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2CircleShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
b2CircleShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.cpp	/^bool b2CircleShape::TestPoint(const b2Transform& transform, const b2Vec2& p) const$/;"	f	class:b2CircleShape	signature:(const b2Transform& transform, const b2Vec2& p) const
b2CircleShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2CircleShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
b2CircleShape::b2CircleShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	b2CircleShape();$/;"	p	class:b2CircleShape	access:public	signature:()
b2CircleShape::b2CircleShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^inline b2CircleShape::b2CircleShape()$/;"	f	class:b2CircleShape	signature:()
b2CircleShape::m_p	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	b2Vec2 m_p;$/;"	m	class:b2CircleShape	access:public
b2Clamp	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline T b2Clamp(T a, T low, T high)$/;"	f	signature:(T a, T low, T high)
b2Clamp	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)
b2ClipSegmentToLine	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],$/;"	f	signature:(b2ClipVertex vOut[2], const b2ClipVertex vIn[2], const b2Vec2& normal, float32 offset, int32 vertexIndexA)
b2ClipSegmentToLine	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],$/;"	p	signature:(b2ClipVertex vOut[2], const b2ClipVertex vIn[2], const b2Vec2& normal, float32 offset, int32 vertexIndexA)
b2ClipVertex	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2ClipVertex$/;"	s
b2ClipVertex::id	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ContactID id;$/;"	m	struct:b2ClipVertex	access:public
b2ClipVertex::v	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 v;$/;"	m	struct:b2ClipVertex	access:public
b2CollideCircles	C:\Box2D\Box2D\Box2D\Collision\b2CollideCircle.cpp	/^void b2CollideCircles($/;"	f	signature:( b2Manifold* manifold, const b2CircleShape* circleA, const b2Transform& xfA, const b2CircleShape* circleB, const b2Transform& xfB)
b2CollideCircles	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^void b2CollideCircles(b2Manifold* manifold,$/;"	p	signature:(b2Manifold* manifold, const b2CircleShape* circleA, const b2Transform& xfA, const b2CircleShape* circleB, const b2Transform& xfB)
b2CollideEdgeAndCircle	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^void b2CollideEdgeAndCircle(b2Manifold* manifold,$/;"	f	signature:(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2CircleShape* circleB, const b2Transform& xfB)
b2CollideEdgeAndCircle	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^void b2CollideEdgeAndCircle(b2Manifold* manifold,$/;"	p	signature:(b2Manifold* manifold, const b2EdgeShape* polygonA, const b2Transform& xfA, const b2CircleShape* circleB, const b2Transform& xfB)
b2CollideEdgeAndPolygon	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^void b2CollideEdgeAndPolygon(	b2Manifold* manifold,$/;"	f	signature:( b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2PolygonShape* polygonB, const b2Transform& xfB)
b2CollideEdgeAndPolygon	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^void b2CollideEdgeAndPolygon(b2Manifold* manifold,$/;"	p	signature:(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2PolygonShape* circleB, const b2Transform& xfB)
b2CollidePolygonAndCircle	C:\Box2D\Box2D\Box2D\Collision\b2CollideCircle.cpp	/^void b2CollidePolygonAndCircle($/;"	f	signature:( b2Manifold* manifold, const b2PolygonShape* polygonA, const b2Transform& xfA, const b2CircleShape* circleB, const b2Transform& xfB)
b2CollidePolygonAndCircle	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^void b2CollidePolygonAndCircle(b2Manifold* manifold,$/;"	p	signature:(b2Manifold* manifold, const b2PolygonShape* polygonA, const b2Transform& xfA, const b2CircleShape* circleB, const b2Transform& xfB)
b2CollidePolygons	C:\Box2D\Box2D\Box2D\Collision\b2CollidePolygon.cpp	/^void b2CollidePolygons(b2Manifold* manifold,$/;"	f	signature:(b2Manifold* manifold, const b2PolygonShape* polyA, const b2Transform& xfA, const b2PolygonShape* polyB, const b2Transform& xfB)
b2CollidePolygons	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^void b2CollidePolygons(b2Manifold* manifold,$/;"	p	signature:(b2Manifold* manifold, const b2PolygonShape* polygonA, const b2Transform& xfA, const b2PolygonShape* polygonB, const b2Transform& xfB)
b2Color	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	b2Color() {}$/;"	f	struct:b2Color	access:public	signature:()
b2Color	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	b2Color(float32 r, float32 g, float32 b, float32 a = 1.0f) : r(r), g(g), b(b), a(a) {}$/;"	f	struct:b2Color	access:public	signature:(float32 r, float32 g, float32 b, float32 a = 1.0f)
b2Color	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^struct b2Color$/;"	s
b2Color::Set	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void Set(float32 ri, float32 gi, float32 bi, float32 ai = 1.0f) { r = ri; g = gi; b = bi; a = ai; }$/;"	f	struct:b2Color	access:public	signature:(float32 ri, float32 gi, float32 bi, float32 ai = 1.0f)
b2Color::a	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
b2Color::b	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
b2Color::b2Color	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	b2Color() {}$/;"	f	struct:b2Color	access:public	signature:()
b2Color::b2Color	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	b2Color(float32 r, float32 g, float32 b, float32 a = 1.0f) : r(r), g(g), b(b), a(a) {}$/;"	f	struct:b2Color	access:public	signature:(float32 r, float32 g, float32 b, float32 a = 1.0f)
b2Color::g	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
b2Color::r	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^b2Contact::b2Contact(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)$/;"	f	class:b2Contact	signature:(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)
b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact	access:protected	signature:()
b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2Contact	access:protected	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^class b2Contact$/;"	c
b2Contact::AddType	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn,$/;"	f	class:b2Contact	signature:(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn, b2Shape::Type type1, b2Shape::Type type2)
b2Contact::AddType	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destroyFcn,$/;"	p	class:b2Contact	access:protected	signature:(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destroyFcn, b2Shape::Type typeA, b2Shape::Type typeB)
b2Contact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^b2Contact* b2Contact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2Contact	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2Contact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static b2Contact* Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	access:protected	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2Contact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2Contact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2Contact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	access:protected	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2Contact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void Destroy(b2Contact* contact, b2Shape::Type typeA, b2Shape::Type typeB, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	access:protected	signature:(b2Contact* contact, b2Shape::Type typeA, b2Shape::Type typeB, b2BlockAllocator* allocator)
b2Contact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	virtual void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB) = 0;$/;"	p	class:b2Contact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2Contact::FlagForFiltering	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void FlagForFiltering();$/;"	p	class:b2Contact	access:protected	signature:()
b2Contact::FlagForFiltering	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact	signature:()
b2Contact::GetChildIndexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 GetChildIndexA() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetChildIndexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetChildIndexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 GetChildIndexB() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetChildIndexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* GetFixtureA();$/;"	p	class:b2Contact	access:public	signature:()
b2Contact::GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Fixture* GetFixtureA() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact	signature:()
b2Contact::GetFixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* GetFixtureB();$/;"	p	class:b2Contact	access:public	signature:()
b2Contact::GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Fixture* GetFixtureB() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact	signature:()
b2Contact::GetFixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 GetFriction() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Manifold* GetManifold();$/;"	p	class:b2Contact	access:public	signature:()
b2Contact::GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Manifold* GetManifold() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact	signature:()
b2Contact::GetManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* GetNext();$/;"	p	class:b2Contact	access:public	signature:()
b2Contact::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	const b2Contact* GetNext() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact	signature:()
b2Contact::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 GetRestitution() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 GetTangentSpeed() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::GetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2Contact::GetTangentSpeed() const$/;"	f	class:b2Contact	signature:() const
b2Contact::GetWorldManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void GetWorldManifold(b2WorldManifold* worldManifold) const;$/;"	p	class:b2Contact	access:public	signature:(b2WorldManifold* worldManifold) const
b2Contact::GetWorldManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact	signature:(b2WorldManifold* worldManifold) const
b2Contact::InitializeRegisters	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::InitializeRegisters()$/;"	f	class:b2Contact	signature:()
b2Contact::InitializeRegisters	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static void InitializeRegisters();$/;"	p	class:b2Contact	access:protected	signature:()
b2Contact::IsEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	bool IsEnabled() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::IsEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact	signature:() const
b2Contact::IsTouching	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	bool IsTouching() const;$/;"	p	class:b2Contact	access:public	signature:() const
b2Contact::IsTouching	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact	signature:() const
b2Contact::ResetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void ResetFriction();$/;"	p	class:b2Contact	access:public	signature:()
b2Contact::ResetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact	signature:()
b2Contact::ResetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void ResetRestitution();$/;"	p	class:b2Contact	access:public	signature:()
b2Contact::ResetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact	signature:()
b2Contact::SetEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetEnabled(bool flag);$/;"	p	class:b2Contact	access:public	signature:(bool flag)
b2Contact::SetEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact	signature:(bool flag)
b2Contact::SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetFriction(float32 friction);$/;"	p	class:b2Contact	access:public	signature:(float32 friction)
b2Contact::SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact	signature:(float32 friction)
b2Contact::SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetRestitution(float32 restitution);$/;"	p	class:b2Contact	access:public	signature:(float32 restitution)
b2Contact::SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact	signature:(float32 restitution)
b2Contact::SetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void SetTangentSpeed(float32 speed);$/;"	p	class:b2Contact	access:public	signature:(float32 speed)
b2Contact::SetTangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline void b2Contact::SetTangentSpeed(float32 speed)$/;"	f	class:b2Contact	signature:(float32 speed)
b2Contact::Update	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^void b2Contact::Update(b2ContactListener* listener)$/;"	f	class:b2Contact	signature:(b2ContactListener* listener)
b2Contact::Update	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	void Update(b2ContactListener* listener);$/;"	p	class:b2Contact	access:protected	signature:(b2ContactListener* listener)
b2Contact::b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^b2Contact::b2Contact(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)$/;"	f	class:b2Contact	signature:(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)
b2Contact::b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact	access:protected	signature:()
b2Contact::b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2Contact	access:protected	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)
b2Contact::e_bulletHitFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_bulletHitFlag		= 0x0010,$/;"	e	enum:b2Contact::__anon6
b2Contact::e_enabledFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_enabledFlag		= 0x0004,$/;"	e	enum:b2Contact::__anon6
b2Contact::e_filterFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_filterFlag		= 0x0008,$/;"	e	enum:b2Contact::__anon6
b2Contact::e_islandFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Contact::__anon6
b2Contact::e_toiFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_toiFlag			= 0x0020$/;"	e	enum:b2Contact::__anon6
b2Contact::e_touchingFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_touchingFlag		= 0x0002,$/;"	e	enum:b2Contact::__anon6
b2Contact::m_fixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* m_fixtureA;$/;"	m	class:b2Contact	access:protected
b2Contact::m_fixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* m_fixtureB;$/;"	m	class:b2Contact	access:protected
b2Contact::m_flags	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	uint32 m_flags;$/;"	m	class:b2Contact	access:protected
b2Contact::m_friction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_friction;$/;"	m	class:b2Contact	access:protected
b2Contact::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 m_indexA;$/;"	m	class:b2Contact	access:protected
b2Contact::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 m_indexB;$/;"	m	class:b2Contact	access:protected
b2Contact::m_manifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Manifold m_manifold;$/;"	m	class:b2Contact	access:protected
b2Contact::m_next	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* m_next;$/;"	m	class:b2Contact	access:protected
b2Contact::m_nodeA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge m_nodeA;$/;"	m	class:b2Contact	access:protected
b2Contact::m_nodeB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge m_nodeB;$/;"	m	class:b2Contact	access:protected
b2Contact::m_prev	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* m_prev;$/;"	m	class:b2Contact	access:protected
b2Contact::m_restitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_restitution;$/;"	m	class:b2Contact	access:protected
b2Contact::m_tangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_tangentSpeed;$/;"	m	class:b2Contact	access:protected
b2Contact::m_toi	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_toi;$/;"	m	class:b2Contact	access:protected
b2Contact::m_toiCount	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 m_toiCount;$/;"	m	class:b2Contact	access:protected
b2Contact::s_initialized	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^bool b2Contact::s_initialized = false;$/;"	m	class:b2Contact	file:
b2Contact::s_initialized	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static bool s_initialized;$/;"	m	class:b2Contact	access:protected
b2Contact::s_registers	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^b2ContactRegister b2Contact::s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	file:
b2Contact::s_registers	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	access:protected
b2Contact::~b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	virtual ~b2Contact() {}$/;"	f	class:b2Contact	access:protected	signature:()
b2ContactCreateFcn	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^typedef b2Contact* b2ContactCreateFcn(	b2Fixture* fixtureA, int32 indexA,$/;"	t
b2ContactDestroyFcn	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^typedef void b2ContactDestroyFcn(b2Contact* contact, b2BlockAllocator* allocator);$/;"	t
b2ContactEdge	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^struct b2ContactEdge$/;"	s
b2ContactEdge::contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* contact;		\/\/\/< the contact$/;"	m	struct:b2ContactEdge	access:public
b2ContactEdge::next	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge* next;	\/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge	access:public
b2ContactEdge::other	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge	access:public
b2ContactEdge::prev	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge* prev;	\/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge	access:public
b2ContactFeature	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2ContactFeature$/;"	s
b2ContactFeature::Type	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	enum Type$/;"	g	struct:b2ContactFeature	access:public
b2ContactFeature::e_face	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_face = 1$/;"	e	enum:b2ContactFeature::Type
b2ContactFeature::e_vertex	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_vertex = 0,$/;"	e	enum:b2ContactFeature::Type
b2ContactFeature::indexA	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 indexA;		\/\/\/< Feature index on shapeA$/;"	m	struct:b2ContactFeature	access:public
b2ContactFeature::indexB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 indexB;		\/\/\/< Feature index on shapeB$/;"	m	struct:b2ContactFeature	access:public
b2ContactFeature::typeA	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 typeA;		\/\/\/< The feature type on shapeA$/;"	m	struct:b2ContactFeature	access:public
b2ContactFeature::typeB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 typeB;		\/\/\/< The feature type on shapeB$/;"	m	struct:b2ContactFeature	access:public
b2ContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^class b2ContactFilter$/;"	c
b2ContactFilter::ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.cpp	/^bool b2ContactFilter::ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2ContactFilter	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2ContactFilter::ShouldCollide	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual bool ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2ContactFilter	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2ContactFilter::~b2ContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2ContactFilter() {}$/;"	f	class:b2ContactFilter	access:public	signature:()
b2ContactID	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^union b2ContactID$/;"	u
b2ContactID::cf	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ContactFeature cf;$/;"	m	union:b2ContactID	access:public
b2ContactID::key	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint32 key;					\/\/\/< Used to quickly compare contact ids.$/;"	m	union:b2ContactID	access:public
b2ContactImpulse	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^struct b2ContactImpulse$/;"	s
b2ContactImpulse::count	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	int32 count;$/;"	m	struct:b2ContactImpulse	access:public
b2ContactImpulse::normalImpulses	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	float32 normalImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse	access:public
b2ContactImpulse::tangentImpulses	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	float32 tangentImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse	access:public
b2ContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^class b2ContactListener$/;"	c
b2ContactListener::BeginContact	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void BeginContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact)
b2ContactListener::EndContact	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void EndContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact)
b2ContactListener::PostSolve	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact, const b2ContactImpulse* impulse)
b2ContactListener::PreSolve	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)$/;"	f	class:b2ContactListener	access:public	signature:(b2Contact* contact, const b2Manifold* oldManifold)
b2ContactListener::~b2ContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2ContactListener() {}$/;"	f	class:b2ContactListener	access:public	signature:()
b2ContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^b2ContactManager::b2ContactManager()$/;"	f	class:b2ContactManager	signature:()
b2ContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2ContactManager();$/;"	p	class:b2ContactManager	access:public	signature:()
b2ContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^class b2ContactManager$/;"	c
b2ContactManager::AddPair	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::AddPair(void* proxyUserDataA, void* proxyUserDataB)$/;"	f	class:b2ContactManager	signature:(void* proxyUserDataA, void* proxyUserDataB)
b2ContactManager::AddPair	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void AddPair(void* proxyUserDataA, void* proxyUserDataB);$/;"	p	class:b2ContactManager	access:public	signature:(void* proxyUserDataA, void* proxyUserDataB)
b2ContactManager::Collide	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::Collide()$/;"	f	class:b2ContactManager	signature:()
b2ContactManager::Collide	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void Collide();$/;"	p	class:b2ContactManager	access:public	signature:()
b2ContactManager::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::Destroy(b2Contact* c)$/;"	f	class:b2ContactManager	signature:(b2Contact* c)
b2ContactManager::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void Destroy(b2Contact* c);$/;"	p	class:b2ContactManager	access:public	signature:(b2Contact* c)
b2ContactManager::FindNewContacts	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^void b2ContactManager::FindNewContacts()$/;"	f	class:b2ContactManager	signature:()
b2ContactManager::FindNewContacts	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	void FindNewContacts();$/;"	p	class:b2ContactManager	access:public	signature:()
b2ContactManager::b2ContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^b2ContactManager::b2ContactManager()$/;"	f	class:b2ContactManager	signature:()
b2ContactManager::b2ContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2ContactManager();$/;"	p	class:b2ContactManager	access:public	signature:()
b2ContactManager::m_allocator	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2BlockAllocator* m_allocator;$/;"	m	class:b2ContactManager	access:public
b2ContactManager::m_broadPhase	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2BroadPhase m_broadPhase;$/;"	m	class:b2ContactManager	access:public
b2ContactManager::m_contactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	int32 m_contactCount;$/;"	m	class:b2ContactManager	access:public
b2ContactManager::m_contactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2ContactFilter* m_contactFilter;$/;"	m	class:b2ContactManager	access:public
b2ContactManager::m_contactList	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2Contact* m_contactList;$/;"	m	class:b2ContactManager	access:public
b2ContactManager::m_contactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2ContactListener* m_contactListener;$/;"	m	class:b2ContactManager	access:public
b2ContactPositionConstraint	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^struct b2ContactPositionConstraint$/;"	s	file:
b2ContactPositionConstraint::indexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	int32 indexA;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::indexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	int32 indexB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::invIA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::invIB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::localNormal	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localNormal;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::localPoint	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localPoint;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::localPoints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localPoints[b2_maxManifoldPoints];$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::pointCount	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	int32 pointCount;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::radiusA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::radiusB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactPositionConstraint::type	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Manifold::Type type;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
b2ContactRegister	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^struct b2ContactRegister$/;"	s
b2ContactRegister::createFcn	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister	access:public
b2ContactRegister::destroyFcn	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister	access:public
b2ContactRegister::primary	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	bool primary;$/;"	m	struct:b2ContactRegister	access:public
b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^b2ContactSolver::b2ContactSolver(b2ContactSolverDef* def)$/;"	f	class:b2ContactSolver	signature:(b2ContactSolverDef* def)
b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2ContactSolver(b2ContactSolverDef* def);$/;"	p	class:b2ContactSolver	access:public	signature:(b2ContactSolverDef* def)
b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^class b2ContactSolver$/;"	c
b2ContactSolver::InitializeVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::InitializeVelocityConstraints()$/;"	f	class:b2ContactSolver	signature:()
b2ContactSolver::InitializeVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void InitializeVelocityConstraints();$/;"	p	class:b2ContactSolver	access:public	signature:()
b2ContactSolver::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^bool b2ContactSolver::SolvePositionConstraints()$/;"	f	class:b2ContactSolver	signature:()
b2ContactSolver::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	bool SolvePositionConstraints();$/;"	p	class:b2ContactSolver	access:public	signature:()
b2ContactSolver::SolveTOIPositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^bool b2ContactSolver::SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2ContactSolver	signature:(int32 toiIndexA, int32 toiIndexB)
b2ContactSolver::SolveTOIPositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	bool SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB);$/;"	p	class:b2ContactSolver	access:public	signature:(int32 toiIndexA, int32 toiIndexB)
b2ContactSolver::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::SolveVelocityConstraints()$/;"	f	class:b2ContactSolver	signature:()
b2ContactSolver::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void SolveVelocityConstraints();$/;"	p	class:b2ContactSolver	access:public	signature:()
b2ContactSolver::StoreImpulses	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::StoreImpulses()$/;"	f	class:b2ContactSolver	signature:()
b2ContactSolver::StoreImpulses	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void StoreImpulses();$/;"	p	class:b2ContactSolver	access:public	signature:()
b2ContactSolver::WarmStart	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^void b2ContactSolver::WarmStart()$/;"	f	class:b2ContactSolver	signature:()
b2ContactSolver::WarmStart	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	void WarmStart();$/;"	p	class:b2ContactSolver	access:public	signature:()
b2ContactSolver::b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^b2ContactSolver::b2ContactSolver(b2ContactSolverDef* def)$/;"	f	class:b2ContactSolver	signature:(b2ContactSolverDef* def)
b2ContactSolver::b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2ContactSolver(b2ContactSolverDef* def);$/;"	p	class:b2ContactSolver	access:public	signature:(b2ContactSolverDef* def)
b2ContactSolver::m_allocator	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_contacts	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Contact** m_contacts;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_count	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int m_count;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_positionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_positions	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Position* m_positions;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_step	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2TimeStep m_step;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_velocities	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::m_velocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver	access:public
b2ContactSolver::~b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^b2ContactSolver::~b2ContactSolver()$/;"	f	class:b2ContactSolver	signature:()
b2ContactSolver::~b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	~b2ContactSolver();$/;"	p	class:b2ContactSolver	access:public	signature:()
b2ContactSolverDef	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^struct b2ContactSolverDef$/;"	s
b2ContactSolverDef::allocator	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef	access:public
b2ContactSolverDef::contacts	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef	access:public
b2ContactSolverDef::count	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 count;$/;"	m	struct:b2ContactSolverDef	access:public
b2ContactSolverDef::positions	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Position* positions;$/;"	m	struct:b2ContactSolverDef	access:public
b2ContactSolverDef::step	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2TimeStep step;$/;"	m	struct:b2ContactSolverDef	access:public
b2ContactSolverDef::velocities	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef	access:public
b2ContactVelocityConstraint	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^struct b2ContactVelocityConstraint$/;"	s
b2ContactVelocityConstraint::K	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::contactIndex	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::friction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 friction;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::indexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::indexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::invIA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::invIB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::normal	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::normalMass	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::pointCount	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::points	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::restitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2ContactVelocityConstraint::tangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 tangentSpeed;$/;"	m	struct:b2ContactVelocityConstraint	access:public
b2Cross	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)$/;"	f	signature:(const b2Vec2& a, float32 s)
b2Cross	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)$/;"	f	signature:(float32 s, const b2Vec2& a)
b2Cross	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)$/;"	f	signature:(const b2Vec3& a, const b2Vec3& b)
b2Cross	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
b2DestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^class b2DestructionListener$/;"	c
b2DestructionListener::SayGoodbye	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void SayGoodbye(b2Fixture* fixture) = 0;$/;"	p	class:b2DestructionListener	access:public	signature:(b2Fixture* fixture)
b2DestructionListener::SayGoodbye	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual void SayGoodbye(b2Joint* joint) = 0;$/;"	p	class:b2DestructionListener	access:public	signature:(b2Joint* joint)
b2DestructionListener::~b2DestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2DestructionListener() {}$/;"	f	class:b2DestructionListener	access:public	signature:()
b2Distance	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2Distance(b2DistanceOutput* output,$/;"	f	signature:(b2DistanceOutput* output, b2SimplexCache* cache, const b2DistanceInput* input)
b2Distance	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^void b2Distance(b2DistanceOutput* output,$/;"	p	signature:(b2DistanceOutput* output, b2SimplexCache* cache, const b2DistanceInput* input)
b2Distance	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
b2DistanceInput	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^struct b2DistanceInput$/;"	s
b2DistanceInput::proxyA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2DistanceInput	access:public
b2DistanceInput::proxyB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2DistanceInput	access:public
b2DistanceInput::transformA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Transform transformA;$/;"	m	struct:b2DistanceInput	access:public
b2DistanceInput::transformB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Transform transformB;$/;"	m	struct:b2DistanceInput	access:public
b2DistanceInput::useRadii	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	bool useRadii;$/;"	m	struct:b2DistanceInput	access:public
b2DistanceJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2DistanceJoint::b2DistanceJoint(const b2DistanceJointDef* def)$/;"	f	class:b2DistanceJoint	signature:(const b2DistanceJointDef* def)
b2DistanceJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2DistanceJoint(const b2DistanceJointDef* data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2DistanceJointDef* data)
b2DistanceJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^class b2DistanceJoint : public b2Joint$/;"	c	inherits:b2Joint
b2DistanceJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJoint::Dump()$/;"	f	class:b2DistanceJoint	signature:()
b2DistanceJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void Dump();$/;"	p	class:b2DistanceJoint	access:public	signature:()
b2DistanceJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorA() const$/;"	f	class:b2DistanceJoint	signature:() const
b2DistanceJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorB() const$/;"	f	class:b2DistanceJoint	signature:() const
b2DistanceJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetDampingRatio() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetDampingRatio() const$/;"	f	class:b2DistanceJoint	signature:() const
b2DistanceJoint::GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetFrequency() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetFrequency() const$/;"	f	class:b2DistanceJoint	signature:() const
b2DistanceJoint::GetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetLength() const;$/;"	p	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetLength() const$/;"	f	class:b2DistanceJoint	signature:() const
b2DistanceJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2DistanceJoint	access:public	signature:() const
b2DistanceJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2DistanceJoint	signature:(float32 inv_dt) const
b2DistanceJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 inv_dt) const
b2DistanceJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^float32 b2DistanceJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2DistanceJoint	signature:(float32 inv_dt) const
b2DistanceJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 inv_dt) const
b2DistanceJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint	signature:(const b2SolverData& data)
b2DistanceJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2SolverData& data)
b2DistanceJoint::SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SetDampingRatio(float32 ratio);$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 ratio)
b2DistanceJoint::SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline void b2DistanceJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2DistanceJoint	signature:(float32 ratio)
b2DistanceJoint::SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SetFrequency(float32 hz);$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 hz)
b2DistanceJoint::SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline void b2DistanceJoint::SetFrequency(float32 hz)$/;"	f	class:b2DistanceJoint	signature:(float32 hz)
b2DistanceJoint::SetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SetLength(float32 length);$/;"	p	class:b2DistanceJoint	access:public	signature:(float32 length)
b2DistanceJoint::SetLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^inline void b2DistanceJoint::SetLength(float32 length)$/;"	f	class:b2DistanceJoint	signature:(float32 length)
b2DistanceJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^bool b2DistanceJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint	signature:(const b2SolverData& data)
b2DistanceJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2SolverData& data)
b2DistanceJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint	signature:(const b2SolverData& data)
b2DistanceJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2SolverData& data)
b2DistanceJoint::b2DistanceJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^b2DistanceJoint::b2DistanceJoint(const b2DistanceJointDef* def)$/;"	f	class:b2DistanceJoint	signature:(const b2DistanceJointDef* def)
b2DistanceJoint::b2DistanceJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2DistanceJoint(const b2DistanceJointDef* data);$/;"	p	class:b2DistanceJoint	access:protected	signature:(const b2DistanceJointDef* data)
b2DistanceJoint::m_bias	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_bias;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_gamma;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_impulse;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	int32 m_indexA;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	int32 m_indexB;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invIA;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invIB;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_length	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_length;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_mass;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJoint::m_u	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2DistanceJoint	access:protected
b2DistanceJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2DistanceJointDef()$/;"	f	struct:b2DistanceJointDef	access:public	signature:()
b2DistanceJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^struct b2DistanceJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2DistanceJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.cpp	/^void b2DistanceJointDef::Initialize(b2Body* b1, b2Body* b2,$/;"	f	class:b2DistanceJointDef	signature:(b2Body* b1, b2Body* b2, const b2Vec2& anchor1, const b2Vec2& anchor2)
b2DistanceJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB,$/;"	p	struct:b2DistanceJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchorA, const b2Vec2& anchorB)
b2DistanceJointDef::b2DistanceJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2DistanceJointDef()$/;"	f	struct:b2DistanceJointDef	access:public	signature:()
b2DistanceJointDef::dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2DistanceJointDef	access:public
b2DistanceJointDef::frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2DistanceJointDef	access:public
b2DistanceJointDef::length	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 length;$/;"	m	struct:b2DistanceJointDef	access:public
b2DistanceJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2DistanceJointDef	access:public
b2DistanceJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2DistanceJointDef	access:public
b2DistanceOutput	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^struct b2DistanceOutput$/;"	s
b2DistanceOutput::distance	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	float32 distance;$/;"	m	struct:b2DistanceOutput	access:public
b2DistanceOutput::iterations	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 iterations;	\/\/\/< number of GJK iterations used$/;"	m	struct:b2DistanceOutput	access:public
b2DistanceOutput::pointA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Vec2 pointA;		\/\/\/< closest point on shapeA$/;"	m	struct:b2DistanceOutput	access:public
b2DistanceOutput::pointB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Vec2 pointB;		\/\/\/< closest point on shapeB$/;"	m	struct:b2DistanceOutput	access:public
b2DistanceProxy	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2DistanceProxy() : m_vertices(NULL), m_count(0), m_radius(0.0f) {}$/;"	f	struct:b2DistanceProxy	access:public	signature:()
b2DistanceProxy	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^struct b2DistanceProxy$/;"	s
b2DistanceProxy::GetSupport	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 GetSupport(const b2Vec2& d) const;$/;"	p	struct:b2DistanceProxy	access:public	signature:(const b2Vec2& d) const
b2DistanceProxy::GetSupport	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline int32 b2DistanceProxy::GetSupport(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy	signature:(const b2Vec2& d) const
b2DistanceProxy::GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	const b2Vec2& GetSupportVertex(const b2Vec2& d) const;$/;"	p	struct:b2DistanceProxy	access:public	signature:(const b2Vec2& d) const
b2DistanceProxy::GetSupportVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetSupportVertex(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy	signature:(const b2Vec2& d) const
b2DistanceProxy::GetVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	const b2Vec2& GetVertex(int32 index) const;$/;"	p	struct:b2DistanceProxy	access:public	signature:(int32 index) const
b2DistanceProxy::GetVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetVertex(int32 index) const$/;"	f	class:b2DistanceProxy	signature:(int32 index) const
b2DistanceProxy::GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 GetVertexCount() const;$/;"	p	struct:b2DistanceProxy	access:public	signature:() const
b2DistanceProxy::GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^inline int32 b2DistanceProxy::GetVertexCount() const$/;"	f	class:b2DistanceProxy	signature:() const
b2DistanceProxy::Set	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2DistanceProxy::Set(const b2Shape* shape, int32 index)$/;"	f	class:b2DistanceProxy	signature:(const b2Shape* shape, int32 index)
b2DistanceProxy::Set	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	void Set(const b2Shape* shape, int32 index);$/;"	p	struct:b2DistanceProxy	access:public	signature:(const b2Shape* shape, int32 index)
b2DistanceProxy::b2DistanceProxy	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2DistanceProxy() : m_vertices(NULL), m_count(0), m_radius(0.0f) {}$/;"	f	struct:b2DistanceProxy	access:public	signature:()
b2DistanceProxy::m_buffer	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Vec2 m_buffer[2];$/;"	m	struct:b2DistanceProxy	access:public
b2DistanceProxy::m_count	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 m_count;$/;"	m	struct:b2DistanceProxy	access:public
b2DistanceProxy::m_radius	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	float32 m_radius;$/;"	m	struct:b2DistanceProxy	access:public
b2DistanceProxy::m_vertices	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	const b2Vec2* m_vertices;$/;"	m	struct:b2DistanceProxy	access:public
b2DistanceSquared	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
b2Dot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
b2Dot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)$/;"	f	signature:(const b2Vec3& a, const b2Vec3& b)
b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^b2Draw::b2Draw()$/;"	f	class:b2Draw	signature:()
b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	b2Draw();$/;"	p	class:b2Draw	access:public	signature:()
b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^class b2Draw$/;"	c
b2Draw::AppendFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^void b2Draw::AppendFlags(uint32 flags)$/;"	f	class:b2Draw	signature:(uint32 flags)
b2Draw::AppendFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void AppendFlags(uint32 flags);$/;"	p	class:b2Draw	access:public	signature:(uint32 flags)
b2Draw::ClearFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^void b2Draw::ClearFlags(uint32 flags)$/;"	f	class:b2Draw	signature:(uint32 flags)
b2Draw::ClearFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void ClearFlags(uint32 flags);$/;"	p	class:b2Draw	access:public	signature:(uint32 flags)
b2Draw::DrawCircle	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawCircle(const b2Vec2& center, float32 radius, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2& center, float32 radius, const b2Color& color)
b2Draw::DrawPolygon	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2* vertices, int32 vertexCount, const b2Color& color)
b2Draw::DrawSegment	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawSegment(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2& p1, const b2Vec2& p2, const b2Color& color)
b2Draw::DrawSolidCircle	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawSolidCircle(const b2Vec2& center, float32 radius, const b2Vec2& axis, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2& center, float32 radius, const b2Vec2& axis, const b2Color& color)
b2Draw::DrawSolidPolygon	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawSolidPolygon(const b2Vec2* vertices, int32 vertexCount, const b2Color& color) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Vec2* vertices, int32 vertexCount, const b2Color& color)
b2Draw::DrawTransform	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual void DrawTransform(const b2Transform& xf) = 0;$/;"	p	class:b2Draw	access:public	signature:(const b2Transform& xf)
b2Draw::GetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^uint32 b2Draw::GetFlags() const$/;"	f	class:b2Draw	signature:() const
b2Draw::GetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	uint32 GetFlags() const;$/;"	p	class:b2Draw	access:public	signature:() const
b2Draw::SetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^void b2Draw::SetFlags(uint32 flags)$/;"	f	class:b2Draw	signature:(uint32 flags)
b2Draw::SetFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	void SetFlags(uint32 flags);$/;"	p	class:b2Draw	access:public	signature:(uint32 flags)
b2Draw::b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.cpp	/^b2Draw::b2Draw()$/;"	f	class:b2Draw	signature:()
b2Draw::b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	b2Draw();$/;"	p	class:b2Draw	access:public	signature:()
b2Draw::e_aabbBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_aabbBit				= 0x0004,	\/\/\/< draw axis aligned bounding boxes$/;"	e	enum:b2Draw::__anon3
b2Draw::e_centerOfMassBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_centerOfMassBit		= 0x0010	\/\/\/< draw center of mass frame$/;"	e	enum:b2Draw::__anon3
b2Draw::e_jointBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_jointBit				= 0x0002,	\/\/\/< draw joint connections$/;"	e	enum:b2Draw::__anon3
b2Draw::e_pairBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_pairBit				= 0x0008,	\/\/\/< draw broad-phase pairs$/;"	e	enum:b2Draw::__anon3
b2Draw::e_shapeBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_shapeBit				= 0x0001,	\/\/\/< draw shapes$/;"	e	enum:b2Draw::__anon3
b2Draw::m_drawFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	uint32 m_drawFlags;$/;"	m	class:b2Draw	access:protected
b2Draw::~b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual ~b2Draw() {}$/;"	f	class:b2Draw	access:public	signature:()
b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^b2DynamicTree::b2DynamicTree()$/;"	f	class:b2DynamicTree	signature:()
b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	b2DynamicTree();$/;"	p	class:b2DynamicTree	access:public	signature:()
b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^class b2DynamicTree$/;"	c
b2DynamicTree::AllocateNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::AllocateNode()$/;"	f	class:b2DynamicTree	signature:()
b2DynamicTree::AllocateNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 AllocateNode();$/;"	p	class:b2DynamicTree	access:private	signature:()
b2DynamicTree::Balance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::Balance(int32 iA)$/;"	f	class:b2DynamicTree	signature:(int32 iA)
b2DynamicTree::Balance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 Balance(int32 index);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 index)
b2DynamicTree::ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight() const$/;"	f	class:b2DynamicTree	signature:() const
b2DynamicTree::ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight(int32 nodeId) const$/;"	f	class:b2DynamicTree	signature:(int32 nodeId) const
b2DynamicTree::ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 ComputeHeight() const;$/;"	p	class:b2DynamicTree	access:private	signature:() const
b2DynamicTree::ComputeHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 ComputeHeight(int32 nodeId) const;$/;"	p	class:b2DynamicTree	access:private	signature:(int32 nodeId) const
b2DynamicTree::CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2DynamicTree	signature:(const b2AABB& aabb, void* userData)
b2DynamicTree::CreateProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 CreateProxy(const b2AABB& aabb, void* userData);$/;"	p	class:b2DynamicTree	access:public	signature:(const b2AABB& aabb, void* userData)
b2DynamicTree::DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::DestroyProxy(int32 proxyId)$/;"	f	class:b2DynamicTree	signature:(int32 proxyId)
b2DynamicTree::DestroyProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void DestroyProxy(int32 proxyId);$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId)
b2DynamicTree::FreeNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::FreeNode(int32 nodeId)$/;"	f	class:b2DynamicTree	signature:(int32 nodeId)
b2DynamicTree::FreeNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void FreeNode(int32 node);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 node)
b2DynamicTree::GetAreaRatio	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^float32 b2DynamicTree::GetAreaRatio() const$/;"	f	class:b2DynamicTree	signature:() const
b2DynamicTree::GetAreaRatio	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	float32 GetAreaRatio() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
b2DynamicTree::GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	const b2AABB& GetFatAABB(int32 proxyId) const;$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId) const
b2DynamicTree::GetFatAABB	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const$/;"	f	class:b2DynamicTree	signature:(int32 proxyId) const
b2DynamicTree::GetHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::GetHeight() const$/;"	f	class:b2DynamicTree	signature:() const
b2DynamicTree::GetHeight	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 GetHeight() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
b2DynamicTree::GetMaxBalance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^int32 b2DynamicTree::GetMaxBalance() const$/;"	f	class:b2DynamicTree	signature:() const
b2DynamicTree::GetMaxBalance	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 GetMaxBalance() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
b2DynamicTree::GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void* GetUserData(int32 proxyId) const;$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId) const
b2DynamicTree::GetUserData	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline void* b2DynamicTree::GetUserData(int32 proxyId) const$/;"	f	class:b2DynamicTree	signature:(int32 proxyId) const
b2DynamicTree::InsertLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::InsertLeaf(int32 leaf)$/;"	f	class:b2DynamicTree	signature:(int32 leaf)
b2DynamicTree::InsertLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void InsertLeaf(int32 node);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 node)
b2DynamicTree::MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2DynamicTree	signature:(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)
b2DynamicTree::MoveProxy	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	bool MoveProxy(int32 proxyId, const b2AABB& aabb1, const b2Vec2& displacement);$/;"	p	class:b2DynamicTree	access:public	signature:(int32 proxyId, const b2AABB& aabb1, const b2Vec2& displacement)
b2DynamicTree::Query	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void Query(T* callback, const b2AABB& aabb) const;$/;"	p	class:b2DynamicTree	access:public	signature:(T* callback, const b2AABB& aabb) const
b2DynamicTree::Query	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2DynamicTree	signature:(T* callback, const b2AABB& aabb) const
b2DynamicTree::RayCast	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void RayCast(T* callback, const b2RayCastInput& input) const;$/;"	p	class:b2DynamicTree	access:public	signature:(T* callback, const b2RayCastInput& input) const
b2DynamicTree::RayCast	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2DynamicTree	signature:(T* callback, const b2RayCastInput& input) const
b2DynamicTree::RebuildBottomUp	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::RebuildBottomUp()$/;"	f	class:b2DynamicTree	signature:()
b2DynamicTree::RebuildBottomUp	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void RebuildBottomUp();$/;"	p	class:b2DynamicTree	access:public	signature:()
b2DynamicTree::RemoveLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::RemoveLeaf(int32 leaf)$/;"	f	class:b2DynamicTree	signature:(int32 leaf)
b2DynamicTree::RemoveLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void RemoveLeaf(int32 node);$/;"	p	class:b2DynamicTree	access:private	signature:(int32 node)
b2DynamicTree::ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2DynamicTree	signature:(const b2Vec2& newOrigin)
b2DynamicTree::ShiftOrigin	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2DynamicTree	access:public	signature:(const b2Vec2& newOrigin)
b2DynamicTree::Validate	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::Validate() const$/;"	f	class:b2DynamicTree	signature:() const
b2DynamicTree::Validate	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void Validate() const;$/;"	p	class:b2DynamicTree	access:public	signature:() const
b2DynamicTree::ValidateMetrics	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::ValidateMetrics(int32 index) const$/;"	f	class:b2DynamicTree	signature:(int32 index) const
b2DynamicTree::ValidateMetrics	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void ValidateMetrics(int32 index) const;$/;"	p	class:b2DynamicTree	access:private	signature:(int32 index) const
b2DynamicTree::ValidateStructure	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^void b2DynamicTree::ValidateStructure(int32 index) const$/;"	f	class:b2DynamicTree	signature:(int32 index) const
b2DynamicTree::ValidateStructure	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void ValidateStructure(int32 index) const;$/;"	p	class:b2DynamicTree	access:private	signature:(int32 index) const
b2DynamicTree::b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^b2DynamicTree::b2DynamicTree()$/;"	f	class:b2DynamicTree	signature:()
b2DynamicTree::b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	b2DynamicTree();$/;"	p	class:b2DynamicTree	access:public	signature:()
b2DynamicTree::m_freeList	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_freeList;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::m_insertionCount	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_insertionCount;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::m_nodeCapacity	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_nodeCapacity;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::m_nodeCount	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_nodeCount;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::m_nodes	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	b2TreeNode* m_nodes;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::m_path	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	uint32 m_path;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::m_root	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_root;$/;"	m	class:b2DynamicTree	access:private
b2DynamicTree::~b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^b2DynamicTree::~b2DynamicTree()$/;"	f	class:b2DynamicTree	signature:()
b2DynamicTree::~b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	~b2DynamicTree();$/;"	p	class:b2DynamicTree	access:public	signature:()
b2EPAxis	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^struct b2EPAxis$/;"	s	file:
b2EPAxis::Type	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	enum Type$/;"	g	struct:b2EPAxis	file:	access:public
b2EPAxis::e_edgeA	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_edgeA,$/;"	e	enum:b2EPAxis::Type	file:
b2EPAxis::e_edgeB	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_edgeB$/;"	e	enum:b2EPAxis::Type	file:
b2EPAxis::e_unknown	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_unknown,$/;"	e	enum:b2EPAxis::Type	file:
b2EPAxis::index	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 index;$/;"	m	struct:b2EPAxis	file:	access:public
b2EPAxis::separation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 separation;$/;"	m	struct:b2EPAxis	file:	access:public
b2EPAxis::type	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	Type type;$/;"	m	struct:b2EPAxis	file:	access:public
b2EPCollider	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^struct b2EPCollider$/;"	s	file:
b2EPCollider::Collide	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	void Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	p	struct:b2EPCollider	file:	access:public	signature:(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2PolygonShape* polygonB, const b2Transform& xfB)
b2EPCollider::Collide	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^void b2EPCollider::Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	f	class:b2EPCollider	signature:(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA, const b2PolygonShape* polygonB, const b2Transform& xfB)
b2EPCollider::ComputeEdgeSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2EPAxis ComputeEdgeSeparation();$/;"	p	struct:b2EPCollider	file:	access:public	signature:()
b2EPCollider::ComputeEdgeSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputeEdgeSeparation()$/;"	f	class:b2EPCollider	signature:()
b2EPCollider::ComputePolygonSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2EPAxis ComputePolygonSeparation();$/;"	p	struct:b2EPCollider	file:	access:public	signature:()
b2EPCollider::ComputePolygonSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputePolygonSeparation()$/;"	f	class:b2EPCollider	signature:()
b2EPCollider::VertexType	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	enum VertexType$/;"	g	struct:b2EPCollider	file:	access:public
b2EPCollider::e_concave	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_concave,$/;"	e	enum:b2EPCollider::VertexType	file:
b2EPCollider::e_convex	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_convex$/;"	e	enum:b2EPCollider::VertexType	file:
b2EPCollider::e_isolated	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_isolated,$/;"	e	enum:b2EPCollider::VertexType	file:
b2EPCollider::m_centroidB	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_centroidB;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_front	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	bool m_front;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_lowerLimit	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_normal	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_normal0	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_normal1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_normal2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_polygonB	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2TempPolygon m_polygonB;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_radius	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 m_radius;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_type1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_type2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_upperLimit	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_v0	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_v1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_v2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_v3	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
b2EPCollider::m_xf	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Transform m_xf;$/;"	m	struct:b2EPCollider	file:	access:public
b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^b2EdgeAndCircleContact::b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^class b2EdgeAndCircleContact : public b2Contact$/;"	c	inherits:b2Contact
b2EdgeAndCircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^b2Contact* b2EdgeAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
b2EdgeAndCircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2EdgeAndCircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2EdgeAndCircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2EdgeAndCircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2EdgeAndCircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2EdgeAndCircleContact::b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.cpp	/^b2EdgeAndCircleContact::b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndCircleContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndCircleContact::b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2EdgeAndCircleContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndCircleContact::~b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact	access:public	signature:()
b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^b2EdgeAndPolygonContact::b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^class b2EdgeAndPolygonContact : public b2Contact$/;"	c	inherits:b2Contact
b2EdgeAndPolygonContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^b2Contact* b2EdgeAndPolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
b2EdgeAndPolygonContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2EdgeAndPolygonContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2EdgeAndPolygonContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2EdgeAndPolygonContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2EdgeAndPolygonContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2EdgeAndPolygonContact::b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.cpp	/^b2EdgeAndPolygonContact::b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndPolygonContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndPolygonContact::b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2EdgeAndPolygonContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2EdgeAndPolygonContact::~b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact	access:public	signature:()
b2EdgeShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2EdgeShape();$/;"	p	class:b2EdgeShape	access:public	signature:()
b2EdgeShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^class b2EdgeShape : public b2Shape$/;"	c	inherits:b2Shape
b2EdgeShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^inline b2EdgeShape::b2EdgeShape()$/;"	f	class:b2EdgeShape	signature:()
b2EdgeShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^b2Shape* b2EdgeShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2EdgeShape	signature:(b2BlockAllocator* allocator) const
b2EdgeShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2EdgeShape	access:public	signature:(b2BlockAllocator* allocator) const
b2EdgeShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^void b2EdgeShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2EdgeShape	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
b2EdgeShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2EdgeShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
b2EdgeShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^void b2EdgeShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2EdgeShape	signature:(b2MassData* massData, float32 density) const
b2EdgeShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2EdgeShape	access:public	signature:(b2MassData* massData, float32 density) const
b2EdgeShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^int32 b2EdgeShape::GetChildCount() const$/;"	f	class:b2EdgeShape	signature:() const
b2EdgeShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2EdgeShape	access:public	signature:() const
b2EdgeShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^bool b2EdgeShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2EdgeShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& xf, int32 childIndex) const
b2EdgeShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2EdgeShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
b2EdgeShape::Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^void b2EdgeShape::Set(const b2Vec2& v1, const b2Vec2& v2)$/;"	f	class:b2EdgeShape	signature:(const b2Vec2& v1, const b2Vec2& v2)
b2EdgeShape::Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	void Set(const b2Vec2& v1, const b2Vec2& v2);$/;"	p	class:b2EdgeShape	access:public	signature:(const b2Vec2& v1, const b2Vec2& v2)
b2EdgeShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.cpp	/^bool b2EdgeShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2EdgeShape	signature:(const b2Transform& xf, const b2Vec2& p) const
b2EdgeShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2EdgeShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
b2EdgeShape::b2EdgeShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2EdgeShape();$/;"	p	class:b2EdgeShape	access:public	signature:()
b2EdgeShape::b2EdgeShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^inline b2EdgeShape::b2EdgeShape()$/;"	f	class:b2EdgeShape	signature:()
b2EdgeShape::m_hasVertex0	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape	access:public
b2EdgeShape::m_hasVertex3	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape	access:public
b2EdgeShape::m_vertex0	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape	access:public
b2EdgeShape::m_vertex1	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape	access:public
b2EdgeShape::m_vertex2	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape	access:public
b2EdgeShape::m_vertex3	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape	access:public
b2Filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Filter()$/;"	f	struct:b2Filter	access:public	signature:()
b2Filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^struct b2Filter$/;"	s
b2Filter::b2Filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Filter()$/;"	f	struct:b2Filter	access:public	signature:()
b2Filter::categoryBits	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	uint16 categoryBits;$/;"	m	struct:b2Filter	access:public
b2Filter::groupIndex	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int16 groupIndex;$/;"	m	struct:b2Filter	access:public
b2Filter::maskBits	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	uint16 maskBits;$/;"	m	struct:b2Filter	access:public
b2FindIncidentEdge	C:\Box2D\Box2D\Box2D\Collision\b2CollidePolygon.cpp	/^static void b2FindIncidentEdge(b2ClipVertex c[2],$/;"	f	file:	signature:(b2ClipVertex c[2], const b2PolygonShape* poly1, const b2Transform& xf1, int32 edge1, const b2PolygonShape* poly2, const b2Transform& xf2)
b2FindMaxSeparation	C:\Box2D\Box2D\Box2D\Collision\b2CollidePolygon.cpp	/^static float32 b2FindMaxSeparation(int32* edgeIndex,$/;"	f	file:	signature:(int32* edgeIndex, const b2PolygonShape* poly1, const b2Transform& xf1, const b2PolygonShape* poly2, const b2Transform& xf2)
b2Fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^b2Fixture::b2Fixture()$/;"	f	class:b2Fixture	signature:()
b2Fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture();$/;"	p	class:b2Fixture	access:protected	signature:()
b2Fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^class b2Fixture$/;"	c
b2Fixture::Create	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)$/;"	f	class:b2Fixture	signature:(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)
b2Fixture::Create	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def);$/;"	p	class:b2Fixture	access:protected	signature:(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)
b2Fixture::CreateProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf)$/;"	f	class:b2Fixture	signature:(b2BroadPhase* broadPhase, const b2Transform& xf)
b2Fixture::CreateProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf);$/;"	p	class:b2Fixture	access:protected	signature:(b2BroadPhase* broadPhase, const b2Transform& xf)
b2Fixture::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Destroy(b2BlockAllocator* allocator)$/;"	f	class:b2Fixture	signature:(b2BlockAllocator* allocator)
b2Fixture::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Destroy(b2BlockAllocator* allocator);$/;"	p	class:b2Fixture	access:protected	signature:(b2BlockAllocator* allocator)
b2Fixture::DestroyProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::DestroyProxies(b2BroadPhase* broadPhase)$/;"	f	class:b2Fixture	signature:(b2BroadPhase* broadPhase)
b2Fixture::DestroyProxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void DestroyProxies(b2BroadPhase* broadPhase);$/;"	p	class:b2Fixture	access:protected	signature:(b2BroadPhase* broadPhase)
b2Fixture::Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Dump(int32 bodyIndex)$/;"	f	class:b2Fixture	signature:(int32 bodyIndex)
b2Fixture::Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Dump(int32 bodyIndex);$/;"	p	class:b2Fixture	access:public	signature:(int32 bodyIndex)
b2Fixture::GetAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2AABB& GetAABB(int32 childIndex) const;$/;"	p	class:b2Fixture	access:public	signature:(int32 childIndex) const
b2Fixture::GetAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2AABB& b2Fixture::GetAABB(int32 childIndex) const$/;"	f	class:b2Fixture	signature:(int32 childIndex) const
b2Fixture::GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Body* GetBody();$/;"	p	class:b2Fixture	access:public	signature:()
b2Fixture::GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Body* GetBody() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Body* b2Fixture::GetBody()$/;"	f	class:b2Fixture	signature:()
b2Fixture::GetBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Body* b2Fixture::GetBody() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 GetDensity() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline float32 b2Fixture::GetDensity() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Filter& GetFilterData() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Filter& b2Fixture::GetFilterData() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 GetFriction() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline float32 b2Fixture::GetFriction() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void GetMassData(b2MassData* massData) const;$/;"	p	class:b2Fixture	access:public	signature:(b2MassData* massData) const
b2Fixture::GetMassData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::GetMassData(b2MassData* massData) const$/;"	f	class:b2Fixture	signature:(b2MassData* massData) const
b2Fixture::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture* GetNext();$/;"	p	class:b2Fixture	access:public	signature:()
b2Fixture::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Fixture* GetNext() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Fixture* b2Fixture::GetNext()$/;"	f	class:b2Fixture	signature:()
b2Fixture::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Fixture* b2Fixture::GetNext() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 GetRestitution() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline float32 b2Fixture::GetRestitution() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Shape* GetShape();$/;"	p	class:b2Fixture	access:public	signature:()
b2Fixture::GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Shape* GetShape() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Shape* b2Fixture::GetShape()$/;"	f	class:b2Fixture	signature:()
b2Fixture::GetShape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline const b2Shape* b2Fixture::GetShape() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Shape::Type GetType() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetType	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline b2Shape::Type b2Fixture::GetType() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void* GetUserData() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void* b2Fixture::GetUserData() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::IsSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool IsSensor() const;$/;"	p	class:b2Fixture	access:public	signature:() const
b2Fixture::IsSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline bool b2Fixture::IsSensor() const$/;"	f	class:b2Fixture	signature:() const
b2Fixture::RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const;$/;"	p	class:b2Fixture	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const
b2Fixture::RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline bool b2Fixture::RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const$/;"	f	class:b2Fixture	signature:(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const
b2Fixture::Refilter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Refilter()$/;"	f	class:b2Fixture	signature:()
b2Fixture::Refilter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Refilter();$/;"	p	class:b2Fixture	access:public	signature:()
b2Fixture::SetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetDensity(float32 density);$/;"	p	class:b2Fixture	access:public	signature:(float32 density)
b2Fixture::SetDensity	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetDensity(float32 density)$/;"	f	class:b2Fixture	signature:(float32 density)
b2Fixture::SetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::SetFilterData(const b2Filter& filter)$/;"	f	class:b2Fixture	signature:(const b2Filter& filter)
b2Fixture::SetFilterData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetFilterData(const b2Filter& filter);$/;"	p	class:b2Fixture	access:public	signature:(const b2Filter& filter)
b2Fixture::SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetFriction(float32 friction);$/;"	p	class:b2Fixture	access:public	signature:(float32 friction)
b2Fixture::SetFriction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetFriction(float32 friction)$/;"	f	class:b2Fixture	signature:(float32 friction)
b2Fixture::SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetRestitution(float32 restitution);$/;"	p	class:b2Fixture	access:public	signature:(float32 restitution)
b2Fixture::SetRestitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetRestitution(float32 restitution)$/;"	f	class:b2Fixture	signature:(float32 restitution)
b2Fixture::SetSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::SetSensor(bool sensor)$/;"	f	class:b2Fixture	signature:(bool sensor)
b2Fixture::SetSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetSensor(bool sensor);$/;"	p	class:b2Fixture	access:public	signature:(bool sensor)
b2Fixture::SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void SetUserData(void* data);$/;"	p	class:b2Fixture	access:public	signature:(void* data)
b2Fixture::SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline void b2Fixture::SetUserData(void* data)$/;"	f	class:b2Fixture	signature:(void* data)
b2Fixture::Synchronize	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^void b2Fixture::Synchronize(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)$/;"	f	class:b2Fixture	signature:(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)
b2Fixture::Synchronize	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void Synchronize(b2BroadPhase* broadPhase, const b2Transform& xf1, const b2Transform& xf2);$/;"	p	class:b2Fixture	access:protected	signature:(b2BroadPhase* broadPhase, const b2Transform& xf1, const b2Transform& xf2)
b2Fixture::TestPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool TestPoint(const b2Vec2& p) const;$/;"	p	class:b2Fixture	access:public	signature:(const b2Vec2& p) const
b2Fixture::TestPoint	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^inline bool b2Fixture::TestPoint(const b2Vec2& p) const$/;"	f	class:b2Fixture	signature:(const b2Vec2& p) const
b2Fixture::b2Fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.cpp	/^b2Fixture::b2Fixture()$/;"	f	class:b2Fixture	signature:()
b2Fixture::b2Fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture();$/;"	p	class:b2Fixture	access:protected	signature:()
b2Fixture::m_body	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Body* m_body;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_density	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 m_density;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Filter m_filter;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_friction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 m_friction;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_isSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool m_isSensor;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_next	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture* m_next;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_proxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2FixtureProxy* m_proxies;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_proxyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int32 m_proxyCount;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_restitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 m_restitution;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_shape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Shape* m_shape;$/;"	m	class:b2Fixture	access:protected
b2Fixture::m_userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void* m_userData;$/;"	m	class:b2Fixture	access:protected
b2FixtureDef	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2FixtureDef()$/;"	f	struct:b2FixtureDef	access:public	signature:()
b2FixtureDef	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^struct b2FixtureDef$/;"	s
b2FixtureDef::b2FixtureDef	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2FixtureDef()$/;"	f	struct:b2FixtureDef	access:public	signature:()
b2FixtureDef::density	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 density;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureDef::filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Filter filter;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureDef::friction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 friction;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureDef::isSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool isSensor;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureDef::restitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 restitution;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureDef::shape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Shape* shape;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureDef::userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void* userData;$/;"	m	struct:b2FixtureDef	access:public
b2FixtureProxy	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^struct b2FixtureProxy$/;"	s
b2FixtureProxy::aabb	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2AABB aabb;$/;"	m	struct:b2FixtureProxy	access:public
b2FixtureProxy::childIndex	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int32 childIndex;$/;"	m	struct:b2FixtureProxy	access:public
b2FixtureProxy::fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture* fixture;$/;"	m	struct:b2FixtureProxy	access:public
b2FixtureProxy::proxyId	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int32 proxyId;$/;"	m	struct:b2FixtureProxy	access:public
b2Free	C:\Box2D\Box2D\Box2D\Common\b2Settings.cpp	/^void b2Free(void* mem)$/;"	f	signature:(void* mem)
b2Free	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^void b2Free(void* mem);$/;"	p	signature:(void* mem)
b2FrictionJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2FrictionJoint::b2FrictionJoint(const b2FrictionJointDef* def)$/;"	f	class:b2FrictionJoint	signature:(const b2FrictionJointDef* def)
b2FrictionJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2FrictionJoint(const b2FrictionJointDef* def);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2FrictionJointDef* def)
b2FrictionJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^class b2FrictionJoint : public b2Joint$/;"	c	inherits:b2Joint
b2FrictionJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::Dump()$/;"	f	class:b2FrictionJoint	signature:()
b2FrictionJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void Dump();$/;"	p	class:b2FrictionJoint	access:public	signature:()
b2FrictionJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorA() const$/;"	f	class:b2FrictionJoint	signature:() const
b2FrictionJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
b2FrictionJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorB() const$/;"	f	class:b2FrictionJoint	signature:() const
b2FrictionJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
b2FrictionJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2FrictionJoint	access:public	signature:() const
b2FrictionJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2FrictionJoint	access:public	signature:() const
b2FrictionJoint::GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxForce() const$/;"	f	class:b2FrictionJoint	signature:() const
b2FrictionJoint::GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 GetMaxForce() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
b2FrictionJoint::GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxTorque() const$/;"	f	class:b2FrictionJoint	signature:() const
b2FrictionJoint::GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 GetMaxTorque() const;$/;"	p	class:b2FrictionJoint	access:public	signature:() const
b2FrictionJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2FrictionJoint	signature:(float32 inv_dt) const
b2FrictionJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 inv_dt) const
b2FrictionJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2FrictionJoint	signature:(float32 inv_dt) const
b2FrictionJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 inv_dt) const
b2FrictionJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint	signature:(const b2SolverData& data)
b2FrictionJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2SolverData& data)
b2FrictionJoint::SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxForce(float32 force)$/;"	f	class:b2FrictionJoint	signature:(float32 force)
b2FrictionJoint::SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void SetMaxForce(float32 force);$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 force)
b2FrictionJoint::SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2FrictionJoint	signature:(float32 torque)
b2FrictionJoint::SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void SetMaxTorque(float32 torque);$/;"	p	class:b2FrictionJoint	access:public	signature:(float32 torque)
b2FrictionJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^bool b2FrictionJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint	signature:(const b2SolverData& data)
b2FrictionJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2SolverData& data)
b2FrictionJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint	signature:(const b2SolverData& data)
b2FrictionJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2SolverData& data)
b2FrictionJoint::b2FrictionJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^b2FrictionJoint::b2FrictionJoint(const b2FrictionJointDef* def)$/;"	f	class:b2FrictionJoint	signature:(const b2FrictionJointDef* def)
b2FrictionJoint::b2FrictionJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2FrictionJoint(const b2FrictionJointDef* def);$/;"	p	class:b2FrictionJoint	access:protected	signature:(const b2FrictionJointDef* def)
b2FrictionJoint::m_angularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_angularMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	int32 m_indexA;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	int32 m_indexB;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invIA;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invIB;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_linearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_linearMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2FrictionJoint	access:protected
b2FrictionJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2FrictionJointDef()$/;"	f	struct:b2FrictionJointDef	access:public	signature:()
b2FrictionJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^struct b2FrictionJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2FrictionJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.cpp	/^void b2FrictionJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2FrictionJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor)
b2FrictionJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);$/;"	p	struct:b2FrictionJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor)
b2FrictionJointDef::b2FrictionJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2FrictionJointDef()$/;"	f	struct:b2FrictionJointDef	access:public	signature:()
b2FrictionJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2FrictionJointDef	access:public
b2FrictionJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2FrictionJointDef	access:public
b2FrictionJointDef::maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 maxForce;$/;"	m	struct:b2FrictionJointDef	access:public
b2FrictionJointDef::maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2FrictionJointDef	access:public
b2GearJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2GearJoint::b2GearJoint(const b2GearJointDef* def)$/;"	f	class:b2GearJoint	signature:(const b2GearJointDef* def)
b2GearJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2GearJoint(const b2GearJointDef* data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2GearJointDef* data)
b2GearJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^class b2GearJoint : public b2Joint$/;"	c	inherits:b2Joint
b2GearJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::Dump()$/;"	f	class:b2GearJoint	signature:()
b2GearJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void Dump();$/;"	p	class:b2GearJoint	access:public	signature:()
b2GearJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorA() const$/;"	f	class:b2GearJoint	signature:() const
b2GearJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2GearJoint	access:public	signature:() const
b2GearJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorB() const$/;"	f	class:b2GearJoint	signature:() const
b2GearJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2GearJoint	access:public	signature:() const
b2GearJoint::GetJoint1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* GetJoint1() { return m_joint1; }$/;"	f	class:b2GearJoint	access:public	signature:()
b2GearJoint::GetJoint2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* GetJoint2() { return m_joint2; }$/;"	f	class:b2GearJoint	access:public	signature:()
b2GearJoint::GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^float32 b2GearJoint::GetRatio() const$/;"	f	class:b2GearJoint	signature:() const
b2GearJoint::GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 GetRatio() const;$/;"	p	class:b2GearJoint	access:public	signature:() const
b2GearJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2GearJoint	signature:(float32 inv_dt) const
b2GearJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2GearJoint	access:public	signature:(float32 inv_dt) const
b2GearJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2GearJoint	signature:(float32 inv_dt) const
b2GearJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2GearJoint	access:public	signature:(float32 inv_dt) const
b2GearJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint	signature:(const b2SolverData& data)
b2GearJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2SolverData& data)
b2GearJoint::SetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::SetRatio(float32 ratio)$/;"	f	class:b2GearJoint	signature:(float32 ratio)
b2GearJoint::SetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void SetRatio(float32 ratio);$/;"	p	class:b2GearJoint	access:public	signature:(float32 ratio)
b2GearJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^bool b2GearJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint	signature:(const b2SolverData& data)
b2GearJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2SolverData& data)
b2GearJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^void b2GearJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint	signature:(const b2SolverData& data)
b2GearJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2SolverData& data)
b2GearJoint::b2GearJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.cpp	/^b2GearJoint::b2GearJoint(const b2GearJointDef* def)$/;"	f	class:b2GearJoint	signature:(const b2GearJointDef* def)
b2GearJoint::b2GearJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2GearJoint(const b2GearJointDef* data);$/;"	p	class:b2GearJoint	access:protected	signature:(const b2GearJointDef* data)
b2GearJoint::m_JvAC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_JvBD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_JwA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_JwB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_JwC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_JwD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_bodyC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Body* m_bodyC;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_bodyD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Body* m_bodyD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_constant	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_constant;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_iA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_iB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_iC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_iD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_impulse;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_indexC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_indexD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_joint1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* m_joint1;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_joint2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* m_joint2;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_lcA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_lcB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_lcC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_lcD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_localAnchorC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorC;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_localAnchorD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_localAxisC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAxisC;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_localAxisD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAxisD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_mA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_mB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_mC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_mD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mass;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_ratio;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_referenceAngleA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_referenceAngleA;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_referenceAngleB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_referenceAngleB;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_typeA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2JointType m_typeA;$/;"	m	class:b2GearJoint	access:protected
b2GearJoint::m_typeB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2JointType m_typeB;$/;"	m	class:b2GearJoint	access:protected
b2GearJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2GearJointDef()$/;"	f	struct:b2GearJointDef	access:public	signature:()
b2GearJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^struct b2GearJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2GearJointDef::b2GearJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2GearJointDef()$/;"	f	struct:b2GearJointDef	access:public	signature:()
b2GearJointDef::joint1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* joint1;$/;"	m	struct:b2GearJointDef	access:public
b2GearJointDef::joint2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* joint2;$/;"	m	struct:b2GearJointDef	access:public
b2GearJointDef::ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 ratio;$/;"	m	struct:b2GearJointDef	access:public
b2GetPointStates	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^void b2GetPointStates(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints],$/;"	f	signature:(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints], const b2Manifold* manifold1, const b2Manifold* manifold2)
b2GetPointStates	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^void b2GetPointStates(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints],$/;"	p	signature:(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints], const b2Manifold* manifold1, const b2Manifold* manifold2)
b2GrowableStack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	b2GrowableStack()$/;"	f	class:b2GrowableStack	access:public	signature:()
b2GrowableStack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^class b2GrowableStack$/;"	c
b2GrowableStack::GetCount	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	int32 GetCount()$/;"	f	class:b2GrowableStack	access:public	signature:()
b2GrowableStack::Pop	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	T Pop()$/;"	f	class:b2GrowableStack	access:public	signature:()
b2GrowableStack::Push	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	void Push(const T& element)$/;"	f	class:b2GrowableStack	access:public	signature:(const T& element)
b2GrowableStack::b2GrowableStack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	b2GrowableStack()$/;"	f	class:b2GrowableStack	access:public	signature:()
b2GrowableStack::m_array	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	T m_array[N];$/;"	m	class:b2GrowableStack	access:private
b2GrowableStack::m_capacity	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	int32 m_capacity;$/;"	m	class:b2GrowableStack	access:private
b2GrowableStack::m_count	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	int32 m_count;$/;"	m	class:b2GrowableStack	access:private
b2GrowableStack::m_stack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	T* m_stack;$/;"	m	class:b2GrowableStack	access:private
b2GrowableStack::~b2GrowableStack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	~b2GrowableStack()$/;"	f	class:b2GrowableStack	access:public	signature:()
b2InvSqrt	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline float32 b2InvSqrt(float32 x)$/;"	f	signature:(float32 x)
b2IsPowerOfTwo	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline bool b2IsPowerOfTwo(uint32 x)$/;"	f	signature:(uint32 x)
b2IsValid	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline bool b2IsValid(float32 x)$/;"	f	signature:(float32 x)
b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^b2Island::b2Island($/;"	f	class:b2Island	signature:( int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity, b2StackAllocator* allocator, b2ContactListener* listener)
b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Island(int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity,$/;"	p	class:b2Island	access:public	signature:(int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity, b2StackAllocator* allocator, b2ContactListener* listener)
b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^class b2Island$/;"	c
b2Island::Add	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Add(b2Body* body)$/;"	f	class:b2Island	access:public	signature:(b2Body* body)
b2Island::Add	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Add(b2Contact* contact)$/;"	f	class:b2Island	access:public	signature:(b2Contact* contact)
b2Island::Add	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Add(b2Joint* joint)$/;"	f	class:b2Island	access:public	signature:(b2Joint* joint)
b2Island::Clear	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Clear()$/;"	f	class:b2Island	access:public	signature:()
b2Island::Report	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^void b2Island::Report(const b2ContactVelocityConstraint* constraints)$/;"	f	class:b2Island	signature:(const b2ContactVelocityConstraint* constraints)
b2Island::Report	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Report(const b2ContactVelocityConstraint* constraints);$/;"	p	class:b2Island	access:public	signature:(const b2ContactVelocityConstraint* constraints)
b2Island::Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^void b2Island::Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)$/;"	f	class:b2Island	signature:(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)
b2Island::Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep);$/;"	p	class:b2Island	access:public	signature:(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)
b2Island::SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^void b2Island::SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2Island	signature:(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)
b2Island::SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	void SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB);$/;"	p	class:b2Island	access:public	signature:(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)
b2Island::b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^b2Island::b2Island($/;"	f	class:b2Island	signature:( int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity, b2StackAllocator* allocator, b2ContactListener* listener)
b2Island::b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Island(int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity,$/;"	p	class:b2Island	access:public	signature:(int32 bodyCapacity, int32 contactCapacity, int32 jointCapacity, b2StackAllocator* allocator, b2ContactListener* listener)
b2Island::m_allocator	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2Island	access:public
b2Island::m_bodies	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Body** m_bodies;$/;"	m	class:b2Island	access:public
b2Island::m_bodyCapacity	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_bodyCapacity;$/;"	m	class:b2Island	access:public
b2Island::m_bodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_bodyCount;$/;"	m	class:b2Island	access:public
b2Island::m_contactCapacity	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_contactCapacity;$/;"	m	class:b2Island	access:public
b2Island::m_contactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_contactCount;$/;"	m	class:b2Island	access:public
b2Island::m_contacts	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Contact** m_contacts;$/;"	m	class:b2Island	access:public
b2Island::m_jointCapacity	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_jointCapacity;$/;"	m	class:b2Island	access:public
b2Island::m_jointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_jointCount;$/;"	m	class:b2Island	access:public
b2Island::m_joints	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Joint** m_joints;$/;"	m	class:b2Island	access:public
b2Island::m_listener	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2ContactListener* m_listener;$/;"	m	class:b2Island	access:public
b2Island::m_positions	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Position* m_positions;$/;"	m	class:b2Island	access:public
b2Island::m_velocities	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2Island	access:public
b2Island::~b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^b2Island::~b2Island()$/;"	f	class:b2Island	signature:()
b2Island::~b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	~b2Island();$/;"	p	class:b2Island	access:public	signature:()
b2Jacobian	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^struct b2Jacobian$/;"	s
b2Jacobian::angularA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	float32 angularA;$/;"	m	struct:b2Jacobian	access:public
b2Jacobian::angularB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	float32 angularB;$/;"	m	struct:b2Jacobian	access:public
b2Jacobian::linear	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Vec2 linear;$/;"	m	struct:b2Jacobian	access:public
b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^b2Joint::b2Joint(const b2JointDef* def)$/;"	f	class:b2Joint	signature:(const b2JointDef* def)
b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint(const b2JointDef* def);$/;"	p	class:b2Joint	access:protected	signature:(const b2JointDef* def)
b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^class b2Joint$/;"	c
b2Joint::Create	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^b2Joint* b2Joint::Create(const b2JointDef* def, b2BlockAllocator* allocator)$/;"	f	class:b2Joint	signature:(const b2JointDef* def, b2BlockAllocator* allocator)
b2Joint::Create	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	static b2Joint* Create(const b2JointDef* def, b2BlockAllocator* allocator);$/;"	p	class:b2Joint	access:protected	signature:(const b2JointDef* def, b2BlockAllocator* allocator)
b2Joint::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^void b2Joint::Destroy(b2Joint* joint, b2BlockAllocator* allocator)$/;"	f	class:b2Joint	signature:(b2Joint* joint, b2BlockAllocator* allocator)
b2Joint::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	static void Destroy(b2Joint* joint, b2BlockAllocator* allocator);$/;"	p	class:b2Joint	access:protected	signature:(b2Joint* joint, b2BlockAllocator* allocator)
b2Joint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void Dump() { b2Log("\/\/ Dump is not supported for this joint type.\\n"); }$/;"	f	class:b2Joint	access:public	signature:()
b2Joint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual b2Vec2 GetAnchorA() const = 0;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual b2Vec2 GetAnchorB() const = 0;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::GetBodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* GetBodyA();$/;"	p	class:b2Joint	access:public	signature:()
b2Joint::GetBodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2Body* b2Joint::GetBodyA()$/;"	f	class:b2Joint	signature:()
b2Joint::GetBodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* GetBodyB();$/;"	p	class:b2Joint	access:public	signature:()
b2Joint::GetBodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2Body* b2Joint::GetBodyB()$/;"	f	class:b2Joint	signature:()
b2Joint::GetCollideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool GetCollideConnected() const;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::GetCollideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline bool b2Joint::GetCollideConnected() const$/;"	f	class:b2Joint	signature:() const
b2Joint::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* GetNext();$/;"	p	class:b2Joint	access:public	signature:()
b2Joint::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	const b2Joint* GetNext() const;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2Joint* b2Joint::GetNext()$/;"	f	class:b2Joint	signature:()
b2Joint::GetNext	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline const b2Joint* b2Joint::GetNext() const$/;"	f	class:b2Joint	signature:() const
b2Joint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual b2Vec2 GetReactionForce(float32 inv_dt) const = 0;$/;"	p	class:b2Joint	access:public	signature:(float32 inv_dt) const
b2Joint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual float32 GetReactionTorque(float32 inv_dt) const = 0;$/;"	p	class:b2Joint	access:public	signature:(float32 inv_dt) const
b2Joint::GetType	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointType GetType() const;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::GetType	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline b2JointType b2Joint::GetType() const$/;"	f	class:b2Joint	signature:() const
b2Joint::GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void* GetUserData() const;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::GetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline void* b2Joint::GetUserData() const$/;"	f	class:b2Joint	signature:() const
b2Joint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void InitVelocityConstraints(const b2SolverData& data) = 0;$/;"	p	class:b2Joint	access:protected	signature:(const b2SolverData& data)
b2Joint::IsActive	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^bool b2Joint::IsActive() const$/;"	f	class:b2Joint	signature:() const
b2Joint::IsActive	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool IsActive() const;$/;"	p	class:b2Joint	access:public	signature:() const
b2Joint::SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void SetUserData(void* data);$/;"	p	class:b2Joint	access:public	signature:(void* data)
b2Joint::SetUserData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^inline void b2Joint::SetUserData(void* data)$/;"	f	class:b2Joint	signature:(void* data)
b2Joint::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void ShiftOrigin(const b2Vec2& newOrigin) { B2_NOT_USED(newOrigin);  }$/;"	f	class:b2Joint	access:public	signature:(const b2Vec2& newOrigin)
b2Joint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual bool SolvePositionConstraints(const b2SolverData& data) = 0;$/;"	p	class:b2Joint	access:protected	signature:(const b2SolverData& data)
b2Joint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual void SolveVelocityConstraints(const b2SolverData& data) = 0;$/;"	p	class:b2Joint	access:protected	signature:(const b2SolverData& data)
b2Joint::b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.cpp	/^b2Joint::b2Joint(const b2JointDef* def)$/;"	f	class:b2Joint	signature:(const b2JointDef* def)
b2Joint::b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint(const b2JointDef* def);$/;"	p	class:b2Joint	access:protected	signature:(const b2JointDef* def)
b2Joint::m_bodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* m_bodyA;$/;"	m	class:b2Joint	access:protected
b2Joint::m_bodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* m_bodyB;$/;"	m	class:b2Joint	access:protected
b2Joint::m_collideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool m_collideConnected;$/;"	m	class:b2Joint	access:protected
b2Joint::m_edgeA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge m_edgeA;$/;"	m	class:b2Joint	access:protected
b2Joint::m_edgeB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge m_edgeB;$/;"	m	class:b2Joint	access:protected
b2Joint::m_index	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	int32 m_index;$/;"	m	class:b2Joint	access:protected
b2Joint::m_islandFlag	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool m_islandFlag;$/;"	m	class:b2Joint	access:protected
b2Joint::m_next	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* m_next;$/;"	m	class:b2Joint	access:protected
b2Joint::m_prev	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* m_prev;$/;"	m	class:b2Joint	access:protected
b2Joint::m_type	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointType m_type;$/;"	m	class:b2Joint	access:protected
b2Joint::m_userData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void* m_userData;$/;"	m	class:b2Joint	access:protected
b2Joint::~b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual ~b2Joint() {}$/;"	f	class:b2Joint	access:protected	signature:()
b2JointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointDef()$/;"	f	struct:b2JointDef	access:public	signature:()
b2JointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^struct b2JointDef$/;"	s
b2JointDef::b2JointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointDef()$/;"	f	struct:b2JointDef	access:public	signature:()
b2JointDef::bodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* bodyA;$/;"	m	struct:b2JointDef	access:public
b2JointDef::bodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* bodyB;$/;"	m	struct:b2JointDef	access:public
b2JointDef::collideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool collideConnected;$/;"	m	struct:b2JointDef	access:public
b2JointDef::type	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointType type;$/;"	m	struct:b2JointDef	access:public
b2JointDef::userData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void* userData;$/;"	m	struct:b2JointDef	access:public
b2JointEdge	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^struct b2JointEdge$/;"	s
b2JointEdge::joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* joint;			\/\/\/< the joint$/;"	m	struct:b2JointEdge	access:public
b2JointEdge::next	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge* next;		\/\/\/< the next joint edge in the body's joint list$/;"	m	struct:b2JointEdge	access:public
b2JointEdge::other	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2JointEdge	access:public
b2JointEdge::prev	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge* prev;		\/\/\/< the previous joint edge in the body's joint list$/;"	m	struct:b2JointEdge	access:public
b2JointType	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^enum b2JointType$/;"	g
b2LimitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^enum b2LimitState$/;"	g
b2Log	C:\Box2D\Box2D\Box2D\Common\b2Settings.cpp	/^void b2Log(const char* string, ...)$/;"	f	signature:(const char* string, ...)
b2Log	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^void b2Log(const char* string, ...);$/;"	p	signature:(const char* string, ...)
b2Manifold	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2Manifold$/;"	s
b2Manifold::Type	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	enum Type$/;"	g	struct:b2Manifold	access:public
b2Manifold::e_circles	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_circles,$/;"	e	enum:b2Manifold::Type
b2Manifold::e_faceA	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_faceA,$/;"	e	enum:b2Manifold::Type
b2Manifold::e_faceB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_faceB$/;"	e	enum:b2Manifold::Type
b2Manifold::localNormal	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 localNormal;								\/\/\/< not use for Type::e_points$/;"	m	struct:b2Manifold	access:public
b2Manifold::localPoint	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 localPoint;								\/\/\/< usage depends on manifold type$/;"	m	struct:b2Manifold	access:public
b2Manifold::pointCount	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	int32 pointCount;								\/\/\/< the number of manifold points$/;"	m	struct:b2Manifold	access:public
b2Manifold::points	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ManifoldPoint points[b2_maxManifoldPoints];	\/\/\/< the points of contact$/;"	m	struct:b2Manifold	access:public
b2Manifold::type	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	Type type;$/;"	m	struct:b2Manifold	access:public
b2ManifoldPoint	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2ManifoldPoint$/;"	s
b2ManifoldPoint::id	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ContactID id;			\/\/\/< uniquely identifies a contact point between two shapes$/;"	m	struct:b2ManifoldPoint	access:public
b2ManifoldPoint::localPoint	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 localPoint;		\/\/\/< usage depends on manifold type$/;"	m	struct:b2ManifoldPoint	access:public
b2ManifoldPoint::normalImpulse	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 normalImpulse;	\/\/\/< the non-penetration impulse$/;"	m	struct:b2ManifoldPoint	access:public
b2ManifoldPoint::tangentImpulse	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 tangentImpulse;	\/\/\/< the friction impulse$/;"	m	struct:b2ManifoldPoint	access:public
b2MassData	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^struct b2MassData$/;"	s
b2MassData::I	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	float32 I;$/;"	m	struct:b2MassData	access:public
b2MassData::center	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	b2Vec2 center;$/;"	m	struct:b2MassData	access:public
b2MassData::mass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	float32 mass;$/;"	m	struct:b2MassData	access:public
b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22() {}$/;"	f	struct:b2Mat22	access:public	signature:()
b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22	access:public	signature:(const b2Vec2& c1, const b2Vec2& c2)
b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)$/;"	f	struct:b2Mat22	access:public	signature:(float32 a11, float32 a12, float32 a21, float32 a22)
b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Mat22$/;"	s
b2Mat22::GetInverse	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22 GetInverse() const$/;"	f	struct:b2Mat22	access:public	signature:() const
b2Mat22::Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22	access:public	signature:(const b2Vec2& c1, const b2Vec2& c2)
b2Mat22::SetIdentity	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Mat22	access:public	signature:()
b2Mat22::SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat22	access:public	signature:()
b2Mat22::Solve	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 Solve(const b2Vec2& b) const$/;"	f	struct:b2Mat22	access:public	signature:(const b2Vec2& b) const
b2Mat22::b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22() {}$/;"	f	struct:b2Mat22	access:public	signature:()
b2Mat22::b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22	access:public	signature:(const b2Vec2& c1, const b2Vec2& c2)
b2Mat22::b2Mat22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)$/;"	f	struct:b2Mat22	access:public	signature:(float32 a11, float32 a12, float32 a21, float32 a22)
b2Mat22::ex	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22	access:public
b2Mat22::ey	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22	access:public
b2Mat33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat33() {}$/;"	f	struct:b2Mat33	access:public	signature:()
b2Mat33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)$/;"	f	struct:b2Mat33	access:public	signature:(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)
b2Mat33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Mat33$/;"	s
b2Mat33::GetInverse22	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^void b2Mat33::GetInverse22(b2Mat33* M) const$/;"	f	class:b2Mat33	signature:(b2Mat33* M) const
b2Mat33::GetInverse22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void GetInverse22(b2Mat33* M) const;$/;"	p	struct:b2Mat33	access:public	signature:(b2Mat33* M) const
b2Mat33::GetSymInverse33	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^void b2Mat33::GetSymInverse33(b2Mat33* M) const$/;"	f	class:b2Mat33	signature:(b2Mat33* M) const
b2Mat33::GetSymInverse33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void GetSymInverse33(b2Mat33* M) const;$/;"	p	struct:b2Mat33	access:public	signature:(b2Mat33* M) const
b2Mat33::SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero()$/;"	f	struct:b2Mat33	access:public	signature:()
b2Mat33::Solve22	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^b2Vec2 b2Mat33::Solve22(const b2Vec2& b) const$/;"	f	class:b2Mat33	signature:(const b2Vec2& b) const
b2Mat33::Solve22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 Solve22(const b2Vec2& b) const;$/;"	p	struct:b2Mat33	access:public	signature:(const b2Vec2& b) const
b2Mat33::Solve33	C:\Box2D\Box2D\Box2D\Common\b2Math.cpp	/^b2Vec3 b2Mat33::Solve33(const b2Vec3& b) const$/;"	f	class:b2Mat33	signature:(const b2Vec3& b) const
b2Mat33::Solve33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 Solve33(const b2Vec3& b) const;$/;"	p	struct:b2Mat33	access:public	signature:(const b2Vec3& b) const
b2Mat33::b2Mat33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat33() {}$/;"	f	struct:b2Mat33	access:public	signature:()
b2Mat33::b2Mat33	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)$/;"	f	struct:b2Mat33	access:public	signature:(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)
b2Mat33::ex	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33	access:public
b2Mat33::ey	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33	access:public
b2Mat33::ez	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33	access:public
b2Max	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline T b2Max(T a, T b)$/;"	f	signature:(T a, T b)
b2Max	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
b2Min	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline T b2Min(T a, T b)$/;"	f	signature:(T a, T b)
b2Min	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
b2MixFriction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2MixFriction(float32 friction1, float32 friction2)$/;"	f	signature:(float32 friction1, float32 friction2)
b2MixRestitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^inline float32 b2MixRestitution(float32 restitution1, float32 restitution2)$/;"	f	signature:(float32 restitution1, float32 restitution2)
b2MotorJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2MotorJoint::b2MotorJoint(const b2MotorJointDef* def)$/;"	f	class:b2MotorJoint	signature:(const b2MotorJointDef* def)
b2MotorJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2MotorJoint(const b2MotorJointDef* def);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2MotorJointDef* def)
b2MotorJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^class b2MotorJoint : public b2Joint$/;"	c	inherits:b2Joint
b2MotorJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::Dump()$/;"	f	class:b2MotorJoint	signature:()
b2MotorJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void Dump();$/;"	p	class:b2MotorJoint	access:public	signature:()
b2MotorJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetAnchorA() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetAnchorB() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetAngularOffset() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetAngularOffset() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetCorrectionFactor() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetCorrectionFactor() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^const b2Vec2& b2MotorJoint::GetLinearOffset() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	const b2Vec2& GetLinearOffset() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetMaxForce() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetMaxForce() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetMaxTorque() const$/;"	f	class:b2MotorJoint	signature:() const
b2MotorJoint::GetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetMaxTorque() const;$/;"	p	class:b2MotorJoint	access:public	signature:() const
b2MotorJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2Vec2 b2MotorJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MotorJoint	signature:(float32 inv_dt) const
b2MotorJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2MotorJoint	access:public	signature:(float32 inv_dt) const
b2MotorJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^float32 b2MotorJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MotorJoint	signature:(float32 inv_dt) const
b2MotorJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2MotorJoint	access:public	signature:(float32 inv_dt) const
b2MotorJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint	signature:(const b2SolverData& data)
b2MotorJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2SolverData& data)
b2MotorJoint::SetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetAngularOffset(float32 angularOffset)$/;"	f	class:b2MotorJoint	signature:(float32 angularOffset)
b2MotorJoint::SetAngularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetAngularOffset(float32 angularOffset);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 angularOffset)
b2MotorJoint::SetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetCorrectionFactor(float32 factor)$/;"	f	class:b2MotorJoint	signature:(float32 factor)
b2MotorJoint::SetCorrectionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetCorrectionFactor(float32 factor);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 factor)
b2MotorJoint::SetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetLinearOffset(const b2Vec2& linearOffset)$/;"	f	class:b2MotorJoint	signature:(const b2Vec2& linearOffset)
b2MotorJoint::SetLinearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetLinearOffset(const b2Vec2& linearOffset);$/;"	p	class:b2MotorJoint	access:public	signature:(const b2Vec2& linearOffset)
b2MotorJoint::SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetMaxForce(float32 force)$/;"	f	class:b2MotorJoint	signature:(float32 force)
b2MotorJoint::SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetMaxForce(float32 force);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 force)
b2MotorJoint::SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2MotorJoint	signature:(float32 torque)
b2MotorJoint::SetMaxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SetMaxTorque(float32 torque);$/;"	p	class:b2MotorJoint	access:public	signature:(float32 torque)
b2MotorJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^bool b2MotorJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint	signature:(const b2SolverData& data)
b2MotorJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2SolverData& data)
b2MotorJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MotorJoint	signature:(const b2SolverData& data)
b2MotorJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2SolverData& data)
b2MotorJoint::b2MotorJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^b2MotorJoint::b2MotorJoint(const b2MotorJointDef* def)$/;"	f	class:b2MotorJoint	signature:(const b2MotorJointDef* def)
b2MotorJoint::b2MotorJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2MotorJoint(const b2MotorJointDef* def);$/;"	p	class:b2MotorJoint	access:protected	signature:(const b2MotorJointDef* def)
b2MotorJoint::m_angularError	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularError;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_angularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_angularMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_angularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularOffset;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_correctionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_correctionFactor;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invIA;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_linearError	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_linearError;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_linearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_linearMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_linearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_linearOffset;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MotorJoint	access:protected
b2MotorJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2MotorJointDef()$/;"	f	struct:b2MotorJointDef	access:public	signature:()
b2MotorJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^struct b2MotorJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2MotorJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.cpp	/^void b2MotorJointDef::Initialize(b2Body* bA, b2Body* bB)$/;"	f	class:b2MotorJointDef	signature:(b2Body* bA, b2Body* bB)
b2MotorJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB);$/;"	p	struct:b2MotorJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB)
b2MotorJointDef::angularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 angularOffset;$/;"	m	struct:b2MotorJointDef	access:public
b2MotorJointDef::b2MotorJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2MotorJointDef()$/;"	f	struct:b2MotorJointDef	access:public	signature:()
b2MotorJointDef::correctionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 correctionFactor;$/;"	m	struct:b2MotorJointDef	access:public
b2MotorJointDef::linearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 linearOffset;$/;"	m	struct:b2MotorJointDef	access:public
b2MotorJointDef::maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MotorJointDef	access:public
b2MotorJointDef::maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2MotorJointDef	access:public
b2MouseJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2MouseJoint::b2MouseJoint(const b2MouseJointDef* def)$/;"	f	class:b2MouseJoint	signature:(const b2MouseJointDef* def)
b2MouseJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2MouseJoint(const b2MouseJointDef* def);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2MouseJointDef* def)
b2MouseJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^class b2MouseJoint : public b2Joint$/;"	c	inherits:b2Joint
b2MouseJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void Dump() { b2Log("Mouse joint dumping is not supported.\\n"); }$/;"	f	class:b2MouseJoint	access:public	signature:()
b2MouseJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorA() const$/;"	f	class:b2MouseJoint	signature:() const
b2MouseJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
b2MouseJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorB() const$/;"	f	class:b2MouseJoint	signature:() const
b2MouseJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
b2MouseJoint::GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetDampingRatio() const$/;"	f	class:b2MouseJoint	signature:() const
b2MouseJoint::GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetDampingRatio() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
b2MouseJoint::GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetFrequency() const$/;"	f	class:b2MouseJoint	signature:() const
b2MouseJoint::GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetFrequency() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
b2MouseJoint::GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetMaxForce() const$/;"	f	class:b2MouseJoint	signature:() const
b2MouseJoint::GetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetMaxForce() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
b2MouseJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MouseJoint	signature:(float32 inv_dt) const
b2MouseJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2MouseJoint	access:public	signature:(float32 inv_dt) const
b2MouseJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^float32 b2MouseJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MouseJoint	signature:(float32 inv_dt) const
b2MouseJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2MouseJoint	access:public	signature:(float32 inv_dt) const
b2MouseJoint::GetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^const b2Vec2& b2MouseJoint::GetTarget() const$/;"	f	class:b2MouseJoint	signature:() const
b2MouseJoint::GetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	const b2Vec2& GetTarget() const;$/;"	p	class:b2MouseJoint	access:public	signature:() const
b2MouseJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint	signature:(const b2SolverData& data)
b2MouseJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2SolverData& data)
b2MouseJoint::SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2MouseJoint	signature:(float32 ratio)
b2MouseJoint::SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetDampingRatio(float32 ratio);$/;"	p	class:b2MouseJoint	access:public	signature:(float32 ratio)
b2MouseJoint::SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetFrequency(float32 hz)$/;"	f	class:b2MouseJoint	signature:(float32 hz)
b2MouseJoint::SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetFrequency(float32 hz);$/;"	p	class:b2MouseJoint	access:public	signature:(float32 hz)
b2MouseJoint::SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetMaxForce(float32 force)$/;"	f	class:b2MouseJoint	signature:(float32 force)
b2MouseJoint::SetMaxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetMaxForce(float32 force);$/;"	p	class:b2MouseJoint	access:public	signature:(float32 force)
b2MouseJoint::SetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SetTarget(const b2Vec2& target)$/;"	f	class:b2MouseJoint	signature:(const b2Vec2& target)
b2MouseJoint::SetTarget	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SetTarget(const b2Vec2& target);$/;"	p	class:b2MouseJoint	access:public	signature:(const b2Vec2& target)
b2MouseJoint::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2MouseJoint	signature:(const b2Vec2& newOrigin)
b2MouseJoint::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2MouseJoint	access:public	signature:(const b2Vec2& newOrigin)
b2MouseJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^bool b2MouseJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint	signature:(const b2SolverData& data)
b2MouseJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2SolverData& data)
b2MouseJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^void b2MouseJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint	signature:(const b2SolverData& data)
b2MouseJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2SolverData& data)
b2MouseJoint::b2MouseJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.cpp	/^b2MouseJoint::b2MouseJoint(const b2MouseJointDef* def)$/;"	f	class:b2MouseJoint	signature:(const b2MouseJointDef* def)
b2MouseJoint::b2MouseJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2MouseJoint(const b2MouseJointDef* def);$/;"	p	class:b2MouseJoint	access:protected	signature:(const b2MouseJointDef* def)
b2MouseJoint::m_C	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_C;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_beta	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_beta;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_gamma;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_impulse;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Mat22 m_mass;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJoint::m_targetA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_targetA;$/;"	m	class:b2MouseJoint	access:protected
b2MouseJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2MouseJointDef()$/;"	f	struct:b2MouseJointDef	access:public	signature:()
b2MouseJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^struct b2MouseJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2MouseJointDef::b2MouseJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2MouseJointDef()$/;"	f	struct:b2MouseJointDef	access:public	signature:()
b2MouseJointDef::dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2MouseJointDef	access:public
b2MouseJointDef::frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2MouseJointDef	access:public
b2MouseJointDef::maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MouseJointDef	access:public
b2MouseJointDef::target	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 target;$/;"	m	struct:b2MouseJointDef	access:public
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)$/;"	f	signature:(const b2Mat22& A, const b2Mat22& B)
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)$/;"	f	signature:(const b2Rot& q, const b2Rot& r)
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)$/;"	f	signature:(const b2Transform& A, const b2Transform& B)
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)$/;"	f	signature:(const b2Mat22& A, const b2Vec2& v)
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)$/;"	f	signature:(const b2Rot& q, const b2Vec2& v)
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)$/;"	f	signature:(const b2Transform& T, const b2Vec2& v)
b2Mul	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)$/;"	f	signature:(const b2Mat33& A, const b2Vec3& v)
b2Mul22	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)$/;"	f	signature:(const b2Mat33& A, const b2Vec2& v)
b2MulT	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)$/;"	f	signature:(const b2Mat22& A, const b2Mat22& B)
b2MulT	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)$/;"	f	signature:(const b2Rot& q, const b2Rot& r)
b2MulT	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)$/;"	f	signature:(const b2Transform& A, const b2Transform& B)
b2MulT	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)$/;"	f	signature:(const b2Mat22& A, const b2Vec2& v)
b2MulT	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)$/;"	f	signature:(const b2Rot& q, const b2Vec2& v)
b2MulT	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)$/;"	f	signature:(const b2Transform& T, const b2Vec2& v)
b2NextPowerOfTwo	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline uint32 b2NextPowerOfTwo(uint32 x)$/;"	f	signature:(uint32 x)
b2Pair	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^struct b2Pair$/;"	s
b2Pair::proxyIdA	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 proxyIdA;$/;"	m	struct:b2Pair	access:public
b2Pair::proxyIdB	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 proxyIdB;$/;"	m	struct:b2Pair	access:public
b2PairLessThan	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^inline bool b2PairLessThan(const b2Pair& pair1, const b2Pair& pair2)$/;"	f	signature:(const b2Pair& pair1, const b2Pair& pair2)
b2PointState	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^enum b2PointState$/;"	g
b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^class b2PolygonAndCircleContact : public b2Contact$/;"	c	inherits:b2Contact
b2PolygonAndCircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^b2Contact* b2PolygonAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
b2PolygonAndCircleContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	static b2Contact* Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2PolygonAndCircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2PolygonAndCircleContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2PolygonAndCircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2PolygonAndCircleContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2PolygonAndCircleContact::b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.cpp	/^b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonAndCircleContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonAndCircleContact::b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2PolygonAndCircleContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonAndCircleContact::~b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact	access:public	signature:()
b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^b2PolygonContact::b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2PolygonContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^class b2PolygonContact : public b2Contact$/;"	c	inherits:b2Contact
b2PolygonContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^b2Contact* b2PolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact	signature:(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)
b2PolygonContact::Create	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2PolygonContact	access:public	signature:( b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)
b2PolygonContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^void b2PolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2PolygonContact::Destroy	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonContact	access:public	signature:(b2Contact* contact, b2BlockAllocator* allocator)
b2PolygonContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^void b2PolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonContact	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2PolygonContact::Evaluate	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2PolygonContact	access:public	signature:(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)
b2PolygonContact::b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.cpp	/^b2PolygonContact::b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonContact	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonContact::b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2PolygonContact	access:public	signature:(b2Fixture* fixtureA, b2Fixture* fixtureB)
b2PolygonContact::~b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	~b2PolygonContact() {}$/;"	f	class:b2PolygonContact	access:public	signature:()
b2PolygonShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2PolygonShape();$/;"	p	class:b2PolygonShape	access:public	signature:()
b2PolygonShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^class b2PolygonShape : public b2Shape$/;"	c	inherits:b2Shape
b2PolygonShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^inline b2PolygonShape::b2PolygonShape()$/;"	f	class:b2PolygonShape	signature:()
b2PolygonShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^b2Shape* b2PolygonShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2PolygonShape	signature:(b2BlockAllocator* allocator) const
b2PolygonShape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Shape* Clone(b2BlockAllocator* allocator) const;$/;"	p	class:b2PolygonShape	access:public	signature:(b2BlockAllocator* allocator) const
b2PolygonShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2PolygonShape	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
b2PolygonShape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const;$/;"	p	class:b2PolygonShape	access:public	signature:(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const
b2PolygonShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2PolygonShape	signature:(b2MassData* massData, float32 density) const
b2PolygonShape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void ComputeMass(b2MassData* massData, float32 density) const;$/;"	p	class:b2PolygonShape	access:public	signature:(b2MassData* massData, float32 density) const
b2PolygonShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^int32 b2PolygonShape::GetChildCount() const$/;"	f	class:b2PolygonShape	signature:() const
b2PolygonShape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	int32 GetChildCount() const;$/;"	p	class:b2PolygonShape	access:public	signature:() const
b2PolygonShape::GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	const b2Vec2& GetVertex(int32 index) const;$/;"	p	class:b2PolygonShape	access:public	signature:(int32 index) const
b2PolygonShape::GetVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^inline const b2Vec2& b2PolygonShape::GetVertex(int32 index) const$/;"	f	class:b2PolygonShape	signature:(int32 index) const
b2PolygonShape::GetVertexCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	int32 GetVertexCount() const { return m_count; }$/;"	f	class:b2PolygonShape	access:public	signature:() const
b2PolygonShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^bool b2PolygonShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2PolygonShape	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& xf, int32 childIndex) const
b2PolygonShape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2PolygonShape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
b2PolygonShape::Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::Set(const b2Vec2* vertices, int32 count)$/;"	f	class:b2PolygonShape	signature:(const b2Vec2* vertices, int32 count)
b2PolygonShape::Set	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void Set(const b2Vec2* points, int32 count);$/;"	p	class:b2PolygonShape	access:public	signature:(const b2Vec2* points, int32 count)
b2PolygonShape::SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy)$/;"	f	class:b2PolygonShape	signature:(float32 hx, float32 hy)
b2PolygonShape::SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle)$/;"	f	class:b2PolygonShape	signature:(float32 hx, float32 hy, const b2Vec2& center, float32 angle)
b2PolygonShape::SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void SetAsBox(float32 hx, float32 hy);$/;"	p	class:b2PolygonShape	access:public	signature:(float32 hx, float32 hy)
b2PolygonShape::SetAsBox	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	void SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle);$/;"	p	class:b2PolygonShape	access:public	signature:(float32 hx, float32 hy, const b2Vec2& center, float32 angle)
b2PolygonShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^bool b2PolygonShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2PolygonShape	signature:(const b2Transform& xf, const b2Vec2& p) const
b2PolygonShape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	bool TestPoint(const b2Transform& transform, const b2Vec2& p) const;$/;"	p	class:b2PolygonShape	access:public	signature:(const b2Transform& transform, const b2Vec2& p) const
b2PolygonShape::Validate	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.cpp	/^bool b2PolygonShape::Validate() const$/;"	f	class:b2PolygonShape	signature:() const
b2PolygonShape::Validate	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	bool Validate() const;$/;"	p	class:b2PolygonShape	access:public	signature:() const
b2PolygonShape::b2PolygonShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2PolygonShape();$/;"	p	class:b2PolygonShape	access:public	signature:()
b2PolygonShape::b2PolygonShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^inline b2PolygonShape::b2PolygonShape()$/;"	f	class:b2PolygonShape	signature:()
b2PolygonShape::m_centroid	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Vec2 m_centroid;$/;"	m	class:b2PolygonShape	access:public
b2PolygonShape::m_count	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	int32 m_count;$/;"	m	class:b2PolygonShape	access:public
b2PolygonShape::m_normals	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Vec2 m_normals[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape	access:public
b2PolygonShape::m_vertices	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Vec2 m_vertices[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape	access:public
b2Position	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^struct b2Position$/;"	s
b2Position::a	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 a;$/;"	m	struct:b2Position	access:public
b2Position::c	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Vec2 c;$/;"	m	struct:b2Position	access:public
b2PositionSolverManifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^struct b2PositionSolverManifold$/;"	s	file:
b2PositionSolverManifold::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	void Initialize(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)$/;"	f	struct:b2PositionSolverManifold	access:public	signature:(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)
b2PositionSolverManifold::normal	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2PositionSolverManifold	file:	access:public
b2PositionSolverManifold::point	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 point;$/;"	m	struct:b2PositionSolverManifold	file:	access:public
b2PositionSolverManifold::separation	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 separation;$/;"	m	struct:b2PositionSolverManifold	file:	access:public
b2PrismaticJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2PrismaticJoint::b2PrismaticJoint(const b2PrismaticJointDef* def)$/;"	f	class:b2PrismaticJoint	signature:(const b2PrismaticJointDef* def)
b2PrismaticJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2PrismaticJoint(const b2PrismaticJointDef* def);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2PrismaticJointDef* def)
b2PrismaticJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^class b2PrismaticJoint : public b2Joint$/;"	c	inherits:b2Joint
b2PrismaticJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::Dump()$/;"	f	class:b2PrismaticJoint	signature:()
b2PrismaticJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void Dump();$/;"	p	class:b2PrismaticJoint	access:public	signature:()
b2PrismaticJoint::EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableLimit(bool flag)$/;"	f	class:b2PrismaticJoint	signature:(bool flag)
b2PrismaticJoint::EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void EnableLimit(bool flag);$/;"	p	class:b2PrismaticJoint	access:public	signature:(bool flag)
b2PrismaticJoint::EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableMotor(bool flag)$/;"	f	class:b2PrismaticJoint	signature:(bool flag)
b2PrismaticJoint::EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void EnableMotor(bool flag);$/;"	p	class:b2PrismaticJoint	access:public	signature:(bool flag)
b2PrismaticJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorA() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorB() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointSpeed() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetJointSpeed() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointTranslation() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetJointTranslation() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetLocalAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetLowerLimit() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetLowerLimit() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetMaxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetMaxMotorForce() const { return m_maxMotorForce; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint	signature:(float32 inv_dt) const
b2PrismaticJoint::GetMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetMotorForce(float32 inv_dt) const;$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 inv_dt) const
b2PrismaticJoint::GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetMotorSpeed() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^inline float32 b2PrismaticJoint::GetMotorSpeed() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint	signature:(float32 inv_dt) const
b2PrismaticJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 inv_dt) const
b2PrismaticJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint	signature:(float32 inv_dt) const
b2PrismaticJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 inv_dt) const
b2PrismaticJoint::GetReferenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetUpperLimit() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 GetUpperLimit() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint	signature:(const b2SolverData& data)
b2PrismaticJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2SolverData& data)
b2PrismaticJoint::IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsLimitEnabled() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool IsLimitEnabled() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsMotorEnabled() const$/;"	f	class:b2PrismaticJoint	signature:() const
b2PrismaticJoint::IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool IsMotorEnabled() const;$/;"	p	class:b2PrismaticJoint	access:public	signature:() const
b2PrismaticJoint::SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2PrismaticJoint	signature:(float32 lower, float32 upper)
b2PrismaticJoint::SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SetLimits(float32 lower, float32 upper);$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 lower, float32 upper)
b2PrismaticJoint::SetMaxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMaxMotorForce(float32 force)$/;"	f	class:b2PrismaticJoint	signature:(float32 force)
b2PrismaticJoint::SetMaxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SetMaxMotorForce(float32 force);$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 force)
b2PrismaticJoint::SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2PrismaticJoint	signature:(float32 speed)
b2PrismaticJoint::SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SetMotorSpeed(float32 speed);$/;"	p	class:b2PrismaticJoint	access:public	signature:(float32 speed)
b2PrismaticJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint	signature:(const b2SolverData& data)
b2PrismaticJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2SolverData& data)
b2PrismaticJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint	signature:(const b2SolverData& data)
b2PrismaticJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2SolverData& data)
b2PrismaticJoint::b2PrismaticJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^b2PrismaticJoint::b2PrismaticJoint(const b2PrismaticJointDef* def)$/;"	f	class:b2PrismaticJoint	signature:(const b2PrismaticJointDef* def)
b2PrismaticJoint::b2PrismaticJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2PrismaticJoint(const b2PrismaticJointDef* def);$/;"	p	class:b2PrismaticJoint	access:protected	signature:(const b2PrismaticJointDef* def)
b2PrismaticJoint::m_K	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Mat33 m_K;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_a1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_a2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_axis	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_limitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_localXAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_localYAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_lowerTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_lowerTranslation;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_maxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_maxMotorForce;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_motorImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_motorMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_perp	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_s1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_s2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJoint::m_upperTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_upperTranslation;$/;"	m	class:b2PrismaticJoint	access:protected
b2PrismaticJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2PrismaticJointDef()$/;"	f	struct:b2PrismaticJointDef	access:public	signature:()
b2PrismaticJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^struct b2PrismaticJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2PrismaticJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.cpp	/^void b2PrismaticJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2PrismaticJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)
b2PrismaticJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis);$/;"	p	struct:b2PrismaticJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis)
b2PrismaticJointDef::b2PrismaticJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2PrismaticJointDef()$/;"	f	struct:b2PrismaticJointDef	access:public	signature:()
b2PrismaticJointDef::enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool enableLimit;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool enableMotor;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::localAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::lowerTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 lowerTranslation;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::maxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 maxMotorForce;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2PrismaticJointDef	access:public
b2PrismaticJointDef::upperTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 upperTranslation;$/;"	m	struct:b2PrismaticJointDef	access:public
b2Profile	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^struct b2Profile$/;"	s
b2Profile::broadphase	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 broadphase;$/;"	m	struct:b2Profile	access:public
b2Profile::collide	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 collide;$/;"	m	struct:b2Profile	access:public
b2Profile::solve	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solve;$/;"	m	struct:b2Profile	access:public
b2Profile::solveInit	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solveInit;$/;"	m	struct:b2Profile	access:public
b2Profile::solvePosition	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solvePosition;$/;"	m	struct:b2Profile	access:public
b2Profile::solveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solveTOI;$/;"	m	struct:b2Profile	access:public
b2Profile::solveVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solveVelocity;$/;"	m	struct:b2Profile	access:public
b2Profile::step	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 step;$/;"	m	struct:b2Profile	access:public
b2PulleyJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef* def)$/;"	f	class:b2PulleyJoint	signature:(const b2PulleyJointDef* def)
b2PulleyJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2PulleyJoint(const b2PulleyJointDef* data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2PulleyJointDef* data)
b2PulleyJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^class b2PulleyJoint : public b2Joint$/;"	c	inherits:b2Joint
b2PulleyJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::Dump()$/;"	f	class:b2PulleyJoint	signature:()
b2PulleyJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void Dump();$/;"	p	class:b2PulleyJoint	access:public	signature:()
b2PulleyJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorA() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorB() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetCurrentLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetCurrentLengthA() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetCurrentLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetCurrentLengthA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetCurrentLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetCurrentLengthB() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetCurrentLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetCurrentLengthB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetGroundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorA() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetGroundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetGroundAnchorA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetGroundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorB() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetGroundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetGroundAnchorB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthA() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetLengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetLengthA() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthB() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetLengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetLengthB() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetRatio() const$/;"	f	class:b2PulleyJoint	signature:() const
b2PulleyJoint::GetRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetRatio() const;$/;"	p	class:b2PulleyJoint	access:public	signature:() const
b2PulleyJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PulleyJoint	signature:(float32 inv_dt) const
b2PulleyJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2PulleyJoint	access:public	signature:(float32 inv_dt) const
b2PulleyJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PulleyJoint	signature:(float32 inv_dt) const
b2PulleyJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2PulleyJoint	access:public	signature:(float32 inv_dt) const
b2PulleyJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint	signature:(const b2SolverData& data)
b2PulleyJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2SolverData& data)
b2PulleyJoint::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2PulleyJoint	signature:(const b2Vec2& newOrigin)
b2PulleyJoint::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2PulleyJoint	access:public	signature:(const b2Vec2& newOrigin)
b2PulleyJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint	signature:(const b2SolverData& data)
b2PulleyJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2SolverData& data)
b2PulleyJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint	signature:(const b2SolverData& data)
b2PulleyJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2SolverData& data)
b2PulleyJoint::b2PulleyJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef* def)$/;"	f	class:b2PulleyJoint	signature:(const b2PulleyJointDef* def)
b2PulleyJoint::b2PulleyJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2PulleyJoint(const b2PulleyJointDef* data);$/;"	p	class:b2PulleyJoint	access:protected	signature:(const b2PulleyJointDef* data)
b2PulleyJoint::m_constant	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_constant;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_groundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_groundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_impulse;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_lengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_lengthA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_lengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_lengthB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_mass;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_ratio;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_uA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_uA;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJoint::m_uB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_uB;$/;"	m	class:b2PulleyJoint	access:protected
b2PulleyJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2PulleyJointDef()$/;"	f	struct:b2PulleyJointDef	access:public	signature:()
b2PulleyJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^struct b2PulleyJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2PulleyJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.cpp	/^void b2PulleyJointDef::Initialize(b2Body* bA, b2Body* bB,$/;"	f	class:b2PulleyJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& groundA, const b2Vec2& groundB, const b2Vec2& anchorA, const b2Vec2& anchorB, float32 r)
b2PulleyJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB,$/;"	p	struct:b2PulleyJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& groundAnchorA, const b2Vec2& groundAnchorB, const b2Vec2& anchorA, const b2Vec2& anchorB, float32 ratio)
b2PulleyJointDef::b2PulleyJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2PulleyJointDef()$/;"	f	struct:b2PulleyJointDef	access:public	signature:()
b2PulleyJointDef::groundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 groundAnchorA;$/;"	m	struct:b2PulleyJointDef	access:public
b2PulleyJointDef::groundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 groundAnchorB;$/;"	m	struct:b2PulleyJointDef	access:public
b2PulleyJointDef::lengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 lengthA;$/;"	m	struct:b2PulleyJointDef	access:public
b2PulleyJointDef::lengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 lengthB;$/;"	m	struct:b2PulleyJointDef	access:public
b2PulleyJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PulleyJointDef	access:public
b2PulleyJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PulleyJointDef	access:public
b2PulleyJointDef::ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 ratio;$/;"	m	struct:b2PulleyJointDef	access:public
b2QueryCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^class b2QueryCallback$/;"	c
b2QueryCallback::ReportFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual bool ReportFixture(b2Fixture* fixture) = 0;$/;"	p	class:b2QueryCallback	access:public	signature:(b2Fixture* fixture)
b2QueryCallback::~b2QueryCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2QueryCallback() {}$/;"	f	class:b2QueryCallback	access:public	signature:()
b2RayCastCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^class b2RayCastCallback$/;"	c
b2RayCastCallback::ReportFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual float32 ReportFixture(	b2Fixture* fixture, const b2Vec2& point,$/;"	p	class:b2RayCastCallback	access:public	signature:( b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float32 fraction)
b2RayCastCallback::~b2RayCastCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2RayCastCallback() {}$/;"	f	class:b2RayCastCallback	access:public	signature:()
b2RayCastInput	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2RayCastInput$/;"	s
b2RayCastInput::maxFraction	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 maxFraction;$/;"	m	struct:b2RayCastInput	access:public
b2RayCastInput::p1	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput	access:public
b2RayCastInput::p2	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput	access:public
b2RayCastOutput	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2RayCastOutput$/;"	s
b2RayCastOutput::fraction	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 fraction;$/;"	m	struct:b2RayCastOutput	access:public
b2RayCastOutput::normal	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 normal;$/;"	m	struct:b2RayCastOutput	access:public
b2ReferenceFace	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^struct b2ReferenceFace$/;"	s	file:
b2ReferenceFace::i1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::i2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::normal	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::sideNormal1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 sideNormal1;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::sideNormal2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 sideNormal2;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::sideOffset1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 sideOffset1;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::sideOffset2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 sideOffset2;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::v1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2ReferenceFace::v2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:	access:public
b2RevoluteJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2RevoluteJoint::b2RevoluteJoint(const b2RevoluteJointDef* def)$/;"	f	class:b2RevoluteJoint	signature:(const b2RevoluteJointDef* def)
b2RevoluteJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2RevoluteJoint(const b2RevoluteJointDef* def);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2RevoluteJointDef* def)
b2RevoluteJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^class b2RevoluteJoint : public b2Joint$/;"	c	inherits:b2Joint
b2RevoluteJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::Dump()$/;"	f	class:b2RevoluteJoint	signature:()
b2RevoluteJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void Dump();$/;"	p	class:b2RevoluteJoint	access:public	signature:()
b2RevoluteJoint::EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableLimit(bool flag)$/;"	f	class:b2RevoluteJoint	signature:(bool flag)
b2RevoluteJoint::EnableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void EnableLimit(bool flag);$/;"	p	class:b2RevoluteJoint	access:public	signature:(bool flag)
b2RevoluteJoint::EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableMotor(bool flag)$/;"	f	class:b2RevoluteJoint	signature:(bool flag)
b2RevoluteJoint::EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void EnableMotor(bool flag);$/;"	p	class:b2RevoluteJoint	access:public	signature:(bool flag)
b2RevoluteJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorA() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorB() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetJointAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointAngle() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetJointAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetJointAngle() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointSpeed() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetJointSpeed() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetLowerLimit() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetLowerLimit() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetMaxMotorTorque() const { return m_maxMotorTorque; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetMotorSpeed() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^inline float32 b2RevoluteJoint::GetMotorSpeed() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint	signature:(float32 inv_dt) const
b2RevoluteJoint::GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetMotorTorque(float32 inv_dt) const;$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 inv_dt) const
b2RevoluteJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint	signature:(float32 inv_dt) const
b2RevoluteJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 inv_dt) const
b2RevoluteJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint	signature:(float32 inv_dt) const
b2RevoluteJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 inv_dt) const
b2RevoluteJoint::GetReferenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetUpperLimit() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::GetUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 GetUpperLimit() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint	signature:(const b2SolverData& data)
b2RevoluteJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2SolverData& data)
b2RevoluteJoint::IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsLimitEnabled() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::IsLimitEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool IsLimitEnabled() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsMotorEnabled() const$/;"	f	class:b2RevoluteJoint	signature:() const
b2RevoluteJoint::IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool IsMotorEnabled() const;$/;"	p	class:b2RevoluteJoint	access:public	signature:() const
b2RevoluteJoint::SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2RevoluteJoint	signature:(float32 lower, float32 upper)
b2RevoluteJoint::SetLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SetLimits(float32 lower, float32 upper);$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 lower, float32 upper)
b2RevoluteJoint::SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2RevoluteJoint	signature:(float32 torque)
b2RevoluteJoint::SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SetMaxMotorTorque(float32 torque);$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 torque)
b2RevoluteJoint::SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2RevoluteJoint	signature:(float32 speed)
b2RevoluteJoint::SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SetMotorSpeed(float32 speed);$/;"	p	class:b2RevoluteJoint	access:public	signature:(float32 speed)
b2RevoluteJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint	signature:(const b2SolverData& data)
b2RevoluteJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2SolverData& data)
b2RevoluteJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint	signature:(const b2SolverData& data)
b2RevoluteJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2SolverData& data)
b2RevoluteJoint::b2RevoluteJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^b2RevoluteJoint::b2RevoluteJoint(const b2RevoluteJointDef* def)$/;"	f	class:b2RevoluteJoint	signature:(const b2RevoluteJointDef* def)
b2RevoluteJoint::b2RevoluteJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2RevoluteJoint(const b2RevoluteJointDef* def);$/;"	p	class:b2RevoluteJoint	access:protected	signature:(const b2RevoluteJointDef* def)
b2RevoluteJoint::m_enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_limitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_lowerAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_lowerAngle;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Mat33 m_mass;			\/\/ effective mass for point-to-point constraint.$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_motorImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_motorMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_motorMass;	\/\/ effective mass for motor\/limit angular constraint.$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJoint::m_upperAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_upperAngle;$/;"	m	class:b2RevoluteJoint	access:protected
b2RevoluteJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2RevoluteJointDef()$/;"	f	struct:b2RevoluteJointDef	access:public	signature:()
b2RevoluteJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^struct b2RevoluteJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2RevoluteJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.cpp	/^void b2RevoluteJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2RevoluteJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor)
b2RevoluteJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);$/;"	p	struct:b2RevoluteJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor)
b2RevoluteJointDef::b2RevoluteJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2RevoluteJointDef()$/;"	f	struct:b2RevoluteJointDef	access:public	signature:()
b2RevoluteJointDef::enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool enableLimit;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool enableMotor;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::lowerAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 lowerAngle;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2RevoluteJointDef	access:public
b2RevoluteJointDef::upperAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 upperAngle;$/;"	m	struct:b2RevoluteJointDef	access:public
b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^b2Rope::b2Rope()$/;"	f	class:b2Rope	signature:()
b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Rope();$/;"	p	class:b2Rope	access:public	signature:()
b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^class b2Rope$/;"	c
b2Rope::Draw	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::Draw(b2Draw* draw) const$/;"	f	class:b2Rope	signature:(b2Draw* draw) const
b2Rope::Draw	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void Draw(b2Draw* draw) const;$/;"	p	class:b2Rope	access:public	signature:(b2Draw* draw) const
b2Rope::GetVertexCount	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	int32 GetVertexCount() const$/;"	f	class:b2Rope	access:public	signature:() const
b2Rope::GetVertices	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	const b2Vec2* GetVertices() const$/;"	f	class:b2Rope	access:public	signature:() const
b2Rope::Initialize	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::Initialize(const b2RopeDef* def)$/;"	f	class:b2Rope	signature:(const b2RopeDef* def)
b2Rope::Initialize	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void Initialize(const b2RopeDef* def);$/;"	p	class:b2Rope	access:public	signature:(const b2RopeDef* def)
b2Rope::SetAngle	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::SetAngle(float32 angle)$/;"	f	class:b2Rope	signature:(float32 angle)
b2Rope::SetAngle	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void SetAngle(float32 angle);$/;"	p	class:b2Rope	access:public	signature:(float32 angle)
b2Rope::SolveC2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::SolveC2()$/;"	f	class:b2Rope	signature:()
b2Rope::SolveC2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void SolveC2();$/;"	p	class:b2Rope	access:private	signature:()
b2Rope::SolveC3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::SolveC3()$/;"	f	class:b2Rope	signature:()
b2Rope::SolveC3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void SolveC3();$/;"	p	class:b2Rope	access:private	signature:()
b2Rope::Step	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^void b2Rope::Step(float32 h, int32 iterations)$/;"	f	class:b2Rope	signature:(float32 h, int32 iterations)
b2Rope::Step	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	void Step(float32 timeStep, int32 iterations);$/;"	p	class:b2Rope	access:public	signature:(float32 timeStep, int32 iterations)
b2Rope::b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^b2Rope::b2Rope()$/;"	f	class:b2Rope	signature:()
b2Rope::b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Rope();$/;"	p	class:b2Rope	access:public	signature:()
b2Rope::m_Ls	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* m_Ls;$/;"	m	class:b2Rope	access:private
b2Rope::m_as	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* m_as;$/;"	m	class:b2Rope	access:private
b2Rope::m_count	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	int32 m_count;$/;"	m	class:b2Rope	access:private
b2Rope::m_damping	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 m_damping;$/;"	m	class:b2Rope	access:private
b2Rope::m_gravity	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2Rope	access:private
b2Rope::m_ims	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* m_ims;$/;"	m	class:b2Rope	access:private
b2Rope::m_k2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 m_k2;$/;"	m	class:b2Rope	access:private
b2Rope::m_k3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 m_k3;$/;"	m	class:b2Rope	access:private
b2Rope::m_p0s	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* m_p0s;$/;"	m	class:b2Rope	access:private
b2Rope::m_ps	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* m_ps;$/;"	m	class:b2Rope	access:private
b2Rope::m_vs	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* m_vs;$/;"	m	class:b2Rope	access:private
b2Rope::~b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^b2Rope::~b2Rope()$/;"	f	class:b2Rope	signature:()
b2Rope::~b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	~b2Rope();$/;"	p	class:b2Rope	access:public	signature:()
b2RopeDef	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2RopeDef()$/;"	f	struct:b2RopeDef	access:public	signature:()
b2RopeDef	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^struct b2RopeDef$/;"	s
b2RopeDef::b2RopeDef	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2RopeDef()$/;"	f	struct:b2RopeDef	access:public	signature:()
b2RopeDef::count	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	int32 count;$/;"	m	struct:b2RopeDef	access:public
b2RopeDef::damping	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 damping;$/;"	m	struct:b2RopeDef	access:public
b2RopeDef::gravity	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2 gravity;$/;"	m	struct:b2RopeDef	access:public
b2RopeDef::k2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 k2;$/;"	m	struct:b2RopeDef	access:public
b2RopeDef::k3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 k3;$/;"	m	struct:b2RopeDef	access:public
b2RopeDef::masses	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* masses;$/;"	m	struct:b2RopeDef	access:public
b2RopeDef::vertices	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* vertices;$/;"	m	struct:b2RopeDef	access:public
b2RopeJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2RopeJoint::b2RopeJoint(const b2RopeJointDef* def)$/;"	f	class:b2RopeJoint	signature:(const b2RopeJointDef* def)
b2RopeJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2RopeJoint(const b2RopeJointDef* data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2RopeJointDef* data)
b2RopeJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^class b2RopeJoint : public b2Joint$/;"	c	inherits:b2Joint
b2RopeJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^void b2RopeJoint::Dump()$/;"	f	class:b2RopeJoint	signature:()
b2RopeJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void Dump();$/;"	p	class:b2RopeJoint	access:public	signature:()
b2RopeJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorA() const$/;"	f	class:b2RopeJoint	signature:() const
b2RopeJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
b2RopeJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorB() const$/;"	f	class:b2RopeJoint	signature:() const
b2RopeJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
b2RopeJoint::GetLimitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2LimitState b2RopeJoint::GetLimitState() const$/;"	f	class:b2RopeJoint	signature:() const
b2RopeJoint::GetLimitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2LimitState GetLimitState() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
b2RopeJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RopeJoint	access:public	signature:() const
b2RopeJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RopeJoint	access:public	signature:() const
b2RopeJoint::GetMaxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^float32 b2RopeJoint::GetMaxLength() const$/;"	f	class:b2RopeJoint	signature:() const
b2RopeJoint::GetMaxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 GetMaxLength() const;$/;"	p	class:b2RopeJoint	access:public	signature:() const
b2RopeJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RopeJoint	signature:(float32 inv_dt) const
b2RopeJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2RopeJoint	access:public	signature:(float32 inv_dt) const
b2RopeJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RopeJoint	signature:(float32 inv_dt) const
b2RopeJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2RopeJoint	access:public	signature:(float32 inv_dt) const
b2RopeJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^void b2RopeJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint	signature:(const b2SolverData& data)
b2RopeJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2SolverData& data)
b2RopeJoint::SetMaxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void SetMaxLength(float32 length) { m_maxLength = length; }$/;"	f	class:b2RopeJoint	access:public	signature:(float32 length)
b2RopeJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^bool b2RopeJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint	signature:(const b2SolverData& data)
b2RopeJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2SolverData& data)
b2RopeJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^void b2RopeJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint	signature:(const b2SolverData& data)
b2RopeJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2SolverData& data)
b2RopeJoint::b2RopeJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.cpp	/^b2RopeJoint::b2RopeJoint(const b2RopeJointDef* def)$/;"	f	class:b2RopeJoint	signature:(const b2RopeJointDef* def)
b2RopeJoint::b2RopeJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2RopeJoint(const b2RopeJointDef* data);$/;"	p	class:b2RopeJoint	access:protected	signature:(const b2RopeJointDef* data)
b2RopeJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_impulse;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_length	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_length;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_mass;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_maxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_maxLength;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_state	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2LimitState m_state;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJoint::m_u	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2RopeJoint	access:protected
b2RopeJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2RopeJointDef()$/;"	f	struct:b2RopeJointDef	access:public	signature:()
b2RopeJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^struct b2RopeJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2RopeJointDef::b2RopeJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2RopeJointDef()$/;"	f	struct:b2RopeJointDef	access:public	signature:()
b2RopeJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RopeJointDef	access:public
b2RopeJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RopeJointDef	access:public
b2RopeJointDef::maxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 maxLength;$/;"	m	struct:b2RopeJointDef	access:public
b2Rot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Rot() {}$/;"	f	struct:b2Rot	access:public	signature:()
b2Rot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	explicit b2Rot(float32 angle)$/;"	f	struct:b2Rot	access:public	signature:(float32 angle)
b2Rot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Rot$/;"	s
b2Rot::GetAngle	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 GetAngle() const$/;"	f	struct:b2Rot	access:public	signature:() const
b2Rot::GetXAxis	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 GetXAxis() const$/;"	f	struct:b2Rot	access:public	signature:() const
b2Rot::GetYAxis	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 GetYAxis() const$/;"	f	struct:b2Rot	access:public	signature:() const
b2Rot::Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(float32 angle)$/;"	f	struct:b2Rot	access:public	signature:(float32 angle)
b2Rot::SetIdentity	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Rot	access:public	signature:()
b2Rot::b2Rot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Rot() {}$/;"	f	struct:b2Rot	access:public	signature:()
b2Rot::b2Rot	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	explicit b2Rot(float32 angle)$/;"	f	struct:b2Rot	access:public	signature:(float32 angle)
b2Rot::c	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot	access:public
b2Rot::s	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot	access:public
b2SeparationFunction	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^struct b2SeparationFunction$/;"	s	file:
b2SeparationFunction::Evaluate	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	float32 Evaluate(int32 indexA, int32 indexB, float32 t) const$/;"	f	struct:b2SeparationFunction	access:public	signature:(int32 indexA, int32 indexB, float32 t) const
b2SeparationFunction::FindMinSeparation	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	float32 FindMinSeparation(int32* indexA, int32* indexB, float32 t) const$/;"	f	struct:b2SeparationFunction	access:public	signature:(int32* indexA, int32* indexB, float32 t) const
b2SeparationFunction::Initialize	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	float32 Initialize(const b2SimplexCache* cache,$/;"	f	struct:b2SeparationFunction	access:public	signature:(const b2SimplexCache* cache, const b2DistanceProxy* proxyA, const b2Sweep& sweepA, const b2DistanceProxy* proxyB, const b2Sweep& sweepB, float32 t1)
b2SeparationFunction::Type	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	enum Type$/;"	g	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::e_faceA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^		e_faceA,$/;"	e	enum:b2SeparationFunction::Type	file:
b2SeparationFunction::e_faceB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^		e_faceB$/;"	e	enum:b2SeparationFunction::Type	file:
b2SeparationFunction::e_points	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^		e_points,$/;"	e	enum:b2SeparationFunction::Type	file:
b2SeparationFunction::m_axis	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Vec2 m_axis;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::m_localPoint	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Vec2 m_localPoint;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::m_proxyA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyA;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::m_proxyB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyB;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::m_sweepA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::m_sweepB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2SeparationFunction::m_type	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	Type m_type;$/;"	m	struct:b2SeparationFunction	file:	access:public
b2Shape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^class b2Shape$/;"	c
b2Shape::Clone	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual b2Shape* Clone(b2BlockAllocator* allocator) const = 0;$/;"	p	class:b2Shape	access:public	signature:(b2BlockAllocator* allocator) const
b2Shape::ComputeAABB	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual void ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const = 0;$/;"	p	class:b2Shape	access:public	signature:(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const
b2Shape::ComputeMass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual void ComputeMass(b2MassData* massData, float32 density) const = 0;$/;"	p	class:b2Shape	access:public	signature:(b2MassData* massData, float32 density) const
b2Shape::GetChildCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual int32 GetChildCount() const = 0;$/;"	p	class:b2Shape	access:public	signature:() const
b2Shape::GetType	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	Type GetType() const;$/;"	p	class:b2Shape	access:public	signature:() const
b2Shape::GetType	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^inline b2Shape::Type b2Shape::GetType() const$/;"	f	class:b2Shape	signature:() const
b2Shape::RayCast	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual bool RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	p	class:b2Shape	access:public	signature:(b2RayCastOutput* output, const b2RayCastInput& input, const b2Transform& transform, int32 childIndex) const
b2Shape::TestPoint	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual bool TestPoint(const b2Transform& xf, const b2Vec2& p) const = 0;$/;"	p	class:b2Shape	access:public	signature:(const b2Transform& xf, const b2Vec2& p) const
b2Shape::Type	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	enum Type$/;"	g	class:b2Shape	access:public
b2Shape::e_chain	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_chain = 3,$/;"	e	enum:b2Shape::Type
b2Shape::e_circle	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_circle = 0,$/;"	e	enum:b2Shape::Type
b2Shape::e_edge	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_edge = 1,$/;"	e	enum:b2Shape::Type
b2Shape::e_polygon	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_polygon = 2,$/;"	e	enum:b2Shape::Type
b2Shape::e_typeCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_typeCount = 4$/;"	e	enum:b2Shape::Type
b2Shape::m_radius	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	float32 m_radius;$/;"	m	class:b2Shape	access:public
b2Shape::m_type	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	Type m_type;$/;"	m	class:b2Shape	access:public
b2Shape::~b2Shape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual ~b2Shape() {}$/;"	f	class:b2Shape	access:public	signature:()
b2Simplex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^struct b2Simplex$/;"	s	file:
b2Simplex::GetClosestPoint	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 GetClosestPoint() const$/;"	f	struct:b2Simplex	access:public	signature:() const
b2Simplex::GetMetric	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	float32 GetMetric() const$/;"	f	struct:b2Simplex	access:public	signature:() const
b2Simplex::GetSearchDirection	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 GetSearchDirection() const$/;"	f	struct:b2Simplex	access:public	signature:() const
b2Simplex::GetWitnessPoints	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void GetWitnessPoints(b2Vec2* pA, b2Vec2* pB) const$/;"	f	struct:b2Simplex	access:public	signature:(b2Vec2* pA, b2Vec2* pB) const
b2Simplex::ReadCache	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void ReadCache(	const b2SimplexCache* cache,$/;"	f	struct:b2Simplex	access:public	signature:( const b2SimplexCache* cache, const b2DistanceProxy* proxyA, const b2Transform& transformA, const b2DistanceProxy* proxyB, const b2Transform& transformB)
b2Simplex::Solve2	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void Solve2();$/;"	p	struct:b2Simplex	file:	access:public	signature:()
b2Simplex::Solve2	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2Simplex::Solve2()$/;"	f	class:b2Simplex	signature:()
b2Simplex::Solve3	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void Solve3();$/;"	p	struct:b2Simplex	file:	access:public	signature:()
b2Simplex::Solve3	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^void b2Simplex::Solve3()$/;"	f	class:b2Simplex	signature:()
b2Simplex::WriteCache	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	void WriteCache(b2SimplexCache* cache) const$/;"	f	struct:b2Simplex	access:public	signature:(b2SimplexCache* cache) const
b2Simplex::m_count	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	int32 m_count;$/;"	m	struct:b2Simplex	file:	access:public
b2Simplex::m_v1	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:	access:public
b2Simplex::m_v2	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:	access:public
b2Simplex::m_v3	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:	access:public
b2SimplexCache	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^struct b2SimplexCache$/;"	s
b2SimplexCache::count	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	uint16 count;$/;"	m	struct:b2SimplexCache	access:public
b2SimplexCache::indexA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	uint8 indexA[3];	\/\/\/< vertices on shape A$/;"	m	struct:b2SimplexCache	access:public
b2SimplexCache::indexB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	uint8 indexB[3];	\/\/\/< vertices on shape B$/;"	m	struct:b2SimplexCache	access:public
b2SimplexCache::metric	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	float32 metric;		\/\/\/< length or area$/;"	m	struct:b2SimplexCache	access:public
b2SimplexVertex	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^struct b2SimplexVertex$/;"	s	file:
b2SimplexVertex::a	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	float32 a;		\/\/ barycentric coordinate for closest point$/;"	m	struct:b2SimplexVertex	file:	access:public
b2SimplexVertex::indexA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	int32 indexA;	\/\/ wA index$/;"	m	struct:b2SimplexVertex	file:	access:public
b2SimplexVertex::indexB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	int32 indexB;	\/\/ wB index$/;"	m	struct:b2SimplexVertex	file:	access:public
b2SimplexVertex::w	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 w;		\/\/ wB - wA$/;"	m	struct:b2SimplexVertex	file:	access:public
b2SimplexVertex::wA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 wA;		\/\/ support point in proxyA$/;"	m	struct:b2SimplexVertex	file:	access:public
b2SimplexVertex::wB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 wB;		\/\/ support point in proxyB$/;"	m	struct:b2SimplexVertex	file:	access:public
b2SolverData	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^struct b2SolverData$/;"	s
b2SolverData::positions	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Position* positions;$/;"	m	struct:b2SolverData	access:public
b2SolverData::step	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2TimeStep step;$/;"	m	struct:b2SolverData	access:public
b2SolverData::velocities	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Velocity* velocities;$/;"	m	struct:b2SolverData	access:public
b2Sqrt	C:\Box2D\Box2D\Box2D\Common\b2Math.h	49;"	d
b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^b2StackAllocator::b2StackAllocator()$/;"	f	class:b2StackAllocator	signature:()
b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	b2StackAllocator();$/;"	p	class:b2StackAllocator	access:public	signature:()
b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^class b2StackAllocator$/;"	c
b2StackAllocator::Allocate	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^void* b2StackAllocator::Allocate(int32 size)$/;"	f	class:b2StackAllocator	signature:(int32 size)
b2StackAllocator::Allocate	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	void* Allocate(int32 size);$/;"	p	class:b2StackAllocator	access:public	signature:(int32 size)
b2StackAllocator::Free	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^void b2StackAllocator::Free(void* p)$/;"	f	class:b2StackAllocator	signature:(void* p)
b2StackAllocator::Free	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	void Free(void* p);$/;"	p	class:b2StackAllocator	access:public	signature:(void* p)
b2StackAllocator::GetMaxAllocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^int32 b2StackAllocator::GetMaxAllocation() const$/;"	f	class:b2StackAllocator	signature:() const
b2StackAllocator::GetMaxAllocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 GetMaxAllocation() const;$/;"	p	class:b2StackAllocator	access:public	signature:() const
b2StackAllocator::b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^b2StackAllocator::b2StackAllocator()$/;"	f	class:b2StackAllocator	signature:()
b2StackAllocator::b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	b2StackAllocator();$/;"	p	class:b2StackAllocator	access:public	signature:()
b2StackAllocator::m_allocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_allocation;$/;"	m	class:b2StackAllocator	access:private
b2StackAllocator::m_data	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	char m_data[b2_stackSize];$/;"	m	class:b2StackAllocator	access:private
b2StackAllocator::m_entries	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	b2StackEntry m_entries[b2_maxStackEntries];$/;"	m	class:b2StackAllocator	access:private
b2StackAllocator::m_entryCount	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_entryCount;$/;"	m	class:b2StackAllocator	access:private
b2StackAllocator::m_index	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_index;$/;"	m	class:b2StackAllocator	access:private
b2StackAllocator::m_maxAllocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_maxAllocation;$/;"	m	class:b2StackAllocator	access:private
b2StackAllocator::~b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^b2StackAllocator::~b2StackAllocator()$/;"	f	class:b2StackAllocator	signature:()
b2StackAllocator::~b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	~b2StackAllocator();$/;"	p	class:b2StackAllocator	access:public	signature:()
b2StackEntry	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^struct b2StackEntry$/;"	s
b2StackEntry::data	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	char* data;$/;"	m	struct:b2StackEntry	access:public
b2StackEntry::size	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 size;$/;"	m	struct:b2StackEntry	access:public
b2StackEntry::usedMalloc	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	bool usedMalloc;$/;"	m	struct:b2StackEntry	access:public
b2Swap	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^template<typename T> inline void b2Swap(T& a, T& b)$/;"	f	signature:(T& a, T& b)
b2Sweep	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Sweep$/;"	s
b2Sweep::Advance	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Advance(float32 alpha);$/;"	p	struct:b2Sweep	access:public	signature:(float32 alpha)
b2Sweep::Advance	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline void b2Sweep::Advance(float32 alpha)$/;"	f	class:b2Sweep	signature:(float32 alpha)
b2Sweep::GetTransform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void GetTransform(b2Transform* xfb, float32 beta) const;$/;"	p	struct:b2Sweep	access:public	signature:(b2Transform* xfb, float32 beta) const
b2Sweep::GetTransform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const$/;"	f	class:b2Sweep	signature:(b2Transform* xf, float32 beta) const
b2Sweep::Normalize	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Normalize();$/;"	p	struct:b2Sweep	access:public	signature:()
b2Sweep::Normalize	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline void b2Sweep::Normalize()$/;"	f	class:b2Sweep	signature:()
b2Sweep::a	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep	access:public
b2Sweep::a0	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 a0, a;		\/\/\/< world angles$/;"	m	struct:b2Sweep	access:public
b2Sweep::alpha0	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 alpha0;$/;"	m	struct:b2Sweep	access:public
b2Sweep::c	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep	access:public
b2Sweep::c0	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep	access:public
b2Sweep::localCenter	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 localCenter;	\/\/\/< local center of mass position$/;"	m	struct:b2Sweep	access:public
b2TOIInput	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^struct b2TOIInput$/;"	s
b2TOIInput::proxyA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2TOIInput	access:public
b2TOIInput::proxyB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2TOIInput	access:public
b2TOIInput::sweepA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2Sweep sweepA;$/;"	m	struct:b2TOIInput	access:public
b2TOIInput::sweepB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2Sweep sweepB;$/;"	m	struct:b2TOIInput	access:public
b2TOIInput::tMax	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	float32 tMax;		\/\/ defines sweep interval [0, tMax]$/;"	m	struct:b2TOIInput	access:public
b2TOIOutput	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^struct b2TOIOutput$/;"	s
b2TOIOutput::State	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	enum State$/;"	g	struct:b2TOIOutput	access:public
b2TOIOutput::e_failed	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_failed,$/;"	e	enum:b2TOIOutput::State
b2TOIOutput::e_overlapped	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_overlapped,$/;"	e	enum:b2TOIOutput::State
b2TOIOutput::e_separated	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_separated$/;"	e	enum:b2TOIOutput::State
b2TOIOutput::e_touching	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_touching,$/;"	e	enum:b2TOIOutput::State
b2TOIOutput::e_unknown	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_unknown,$/;"	e	enum:b2TOIOutput::State
b2TOIOutput::state	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	State state;$/;"	m	struct:b2TOIOutput	access:public
b2TOIOutput::t	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	float32 t;$/;"	m	struct:b2TOIOutput	access:public
b2TempPolygon	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^struct b2TempPolygon$/;"	s	file:
b2TempPolygon::count	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 count;$/;"	m	struct:b2TempPolygon	file:	access:public
b2TempPolygon::normals	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 normals[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:	access:public
b2TempPolygon::vertices	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 vertices[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:	access:public
b2TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^bool b2TestOverlap(	const b2Shape* shapeA, int32 indexA,$/;"	f	signature:( const b2Shape* shapeA, int32 indexA, const b2Shape* shapeB, int32 indexB, const b2Transform& xfA, const b2Transform& xfB)
b2TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^bool b2TestOverlap(	const b2Shape* shapeA, int32 indexA,$/;"	p	signature:( const b2Shape* shapeA, int32 indexA, const b2Shape* shapeB, int32 indexB, const b2Transform& xfA, const b2Transform& xfB)
b2TestOverlap	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^inline bool b2TestOverlap(const b2AABB& a, const b2AABB& b)$/;"	f	signature:(const b2AABB& a, const b2AABB& b)
b2TimeOfImpact	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^void b2TimeOfImpact(b2TOIOutput* output, const b2TOIInput* input)$/;"	f	signature:(b2TOIOutput* output, const b2TOIInput* input)
b2TimeOfImpact	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^void b2TimeOfImpact(b2TOIOutput* output, const b2TOIInput* input);$/;"	p	signature:(b2TOIOutput* output, const b2TOIInput* input)
b2TimeStep	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^struct b2TimeStep$/;"	s
b2TimeStep::dt	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 dt;			\/\/ time step$/;"	m	struct:b2TimeStep	access:public
b2TimeStep::dtRatio	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 dtRatio;	\/\/ dt * inv_dt0$/;"	m	struct:b2TimeStep	access:public
b2TimeStep::inv_dt	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 inv_dt;		\/\/ inverse time step (0 if dt == 0).$/;"	m	struct:b2TimeStep	access:public
b2TimeStep::positionIterations	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	int32 positionIterations;$/;"	m	struct:b2TimeStep	access:public
b2TimeStep::velocityIterations	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	int32 velocityIterations;$/;"	m	struct:b2TimeStep	access:public
b2TimeStep::warmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	bool warmStarting;$/;"	m	struct:b2TimeStep	access:public
b2Timer	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^b2Timer::b2Timer()$/;"	f	class:b2Timer	signature:()
b2Timer	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	b2Timer();$/;"	p	class:b2Timer	access:public	signature:()
b2Timer	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^class b2Timer$/;"	c
b2Timer::GetMilliseconds	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^float32 b2Timer::GetMilliseconds() const$/;"	f	class:b2Timer	signature:() const
b2Timer::GetMilliseconds	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	float32 GetMilliseconds() const;$/;"	p	class:b2Timer	access:public	signature:() const
b2Timer::Reset	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^void b2Timer::Reset()$/;"	f	class:b2Timer	signature:()
b2Timer::Reset	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	void Reset();$/;"	p	class:b2Timer	access:public	signature:()
b2Timer::b2Timer	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^b2Timer::b2Timer()$/;"	f	class:b2Timer	signature:()
b2Timer::b2Timer	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	b2Timer();$/;"	p	class:b2Timer	access:public	signature:()
b2Timer::m_start	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	float64 m_start;$/;"	m	class:b2Timer	access:private
b2Timer::m_start_sec	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	unsigned long m_start_sec;$/;"	m	class:b2Timer	access:private
b2Timer::m_start_usec	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	unsigned long m_start_usec;$/;"	m	class:b2Timer	access:private
b2Timer::s_invFrequency	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^float64 b2Timer::s_invFrequency = 0.0f;$/;"	m	class:b2Timer	file:
b2Timer::s_invFrequency	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	static float64 s_invFrequency;$/;"	m	class:b2Timer	access:private
b2Transform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Transform() {}$/;"	f	struct:b2Transform	access:public	signature:()
b2Transform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}$/;"	f	struct:b2Transform	access:public	signature:(const b2Vec2& position, const b2Rot& rotation)
b2Transform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Transform$/;"	s
b2Transform::Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(const b2Vec2& position, float32 angle)$/;"	f	struct:b2Transform	access:public	signature:(const b2Vec2& position, float32 angle)
b2Transform::SetIdentity	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetIdentity()$/;"	f	struct:b2Transform	access:public	signature:()
b2Transform::b2Transform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Transform() {}$/;"	f	struct:b2Transform	access:public	signature:()
b2Transform::b2Transform	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}$/;"	f	struct:b2Transform	access:public	signature:(const b2Vec2& position, const b2Rot& rotation)
b2Transform::p	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 p;$/;"	m	struct:b2Transform	access:public
b2Transform::q	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Rot q;$/;"	m	struct:b2Transform	access:public
b2TreeNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^struct b2TreeNode$/;"	s
b2TreeNode::IsLeaf	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	bool IsLeaf() const$/;"	f	struct:b2TreeNode	access:public	signature:() const
b2TreeNode::__anon2::next	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^		int32 next;$/;"	m	union:b2TreeNode::__anon2	access:public
b2TreeNode::__anon2::parent	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^		int32 parent;$/;"	m	union:b2TreeNode::__anon2	access:public
b2TreeNode::aabb	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	b2AABB aabb;$/;"	m	struct:b2TreeNode	access:public
b2TreeNode::child1	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 child1;$/;"	m	struct:b2TreeNode	access:public
b2TreeNode::child2	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 child2;$/;"	m	struct:b2TreeNode	access:public
b2TreeNode::height	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 height;$/;"	m	struct:b2TreeNode	access:public
b2TreeNode::userData	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void* userData;$/;"	m	struct:b2TreeNode	access:public
b2Vec2	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2() {}$/;"	f	struct:b2Vec2	access:public	signature:()
b2Vec2	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2(float32 x, float32 y) : x(x), y(y) {}$/;"	f	struct:b2Vec2	access:public	signature:(float32 x, float32 y)
b2Vec2	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Vec2$/;"	s
b2Vec2::IsValid	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	bool IsValid() const$/;"	f	struct:b2Vec2	access:public	signature:() const
b2Vec2::Length	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 Length() const$/;"	f	struct:b2Vec2	access:public	signature:() const
b2Vec2::LengthSquared	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 LengthSquared() const$/;"	f	struct:b2Vec2	access:public	signature:() const
b2Vec2::Normalize	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 Normalize()$/;"	f	struct:b2Vec2	access:public	signature:()
b2Vec2::Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(float32 x_, float32 y_) { x = x_; y = y_; }$/;"	f	struct:b2Vec2	access:public	signature:(float32 x_, float32 y_)
b2Vec2::SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; }$/;"	f	struct:b2Vec2	access:public	signature:()
b2Vec2::Skew	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 Skew() const$/;"	f	struct:b2Vec2	access:public	signature:() const
b2Vec2::b2Vec2	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2() {}$/;"	f	struct:b2Vec2	access:public	signature:()
b2Vec2::b2Vec2	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2(float32 x, float32 y) : x(x), y(y) {}$/;"	f	struct:b2Vec2	access:public	signature:(float32 x, float32 y)
b2Vec2::operator ()	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 operator () (int32 i) const$/;"	f	struct:b2Vec2	access:public	signature:(int32 i) const
b2Vec2::operator ()	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32& operator () (int32 i)$/;"	f	struct:b2Vec2	access:public	signature:(int32 i)
b2Vec2::operator *=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator *= (float32 a)$/;"	f	struct:b2Vec2	access:public	signature:(float32 a)
b2Vec2::operator +=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator += (const b2Vec2& v)$/;"	f	struct:b2Vec2	access:public	signature:(const b2Vec2& v)
b2Vec2::operator -	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }$/;"	f	struct:b2Vec2	access:public	signature:() const
b2Vec2::operator -=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator -= (const b2Vec2& v)$/;"	f	struct:b2Vec2	access:public	signature:(const b2Vec2& v)
b2Vec2::x	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2	access:public
b2Vec2::y	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2	access:public
b2Vec3	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3() {}$/;"	f	struct:b2Vec3	access:public	signature:()
b2Vec3	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}$/;"	f	struct:b2Vec3	access:public	signature:(float32 x, float32 y, float32 z)
b2Vec3	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^struct b2Vec3$/;"	s
b2Vec3::Set	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }$/;"	f	struct:b2Vec3	access:public	signature:(float32 x_, float32 y_, float32 z_)
b2Vec3::SetZero	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	struct:b2Vec3	access:public	signature:()
b2Vec3::b2Vec3	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3() {}$/;"	f	struct:b2Vec3	access:public	signature:()
b2Vec3::b2Vec3	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}$/;"	f	struct:b2Vec3	access:public	signature:(float32 x, float32 y, float32 z)
b2Vec3::operator *=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator *= (float32 s)$/;"	f	struct:b2Vec3	access:public	signature:(float32 s)
b2Vec3::operator +=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator += (const b2Vec3& v)$/;"	f	struct:b2Vec3	access:public	signature:(const b2Vec3& v)
b2Vec3::operator -	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }$/;"	f	struct:b2Vec3	access:public	signature:() const
b2Vec3::operator -=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator -= (const b2Vec3& v)$/;"	f	struct:b2Vec3	access:public	signature:(const b2Vec3& v)
b2Vec3::x	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3	access:public
b2Vec3::y	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3	access:public
b2Vec3::z	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3	access:public
b2Velocity	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^struct b2Velocity$/;"	s
b2Velocity::v	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Vec2 v;$/;"	m	struct:b2Velocity	access:public
b2Velocity::w	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 w;$/;"	m	struct:b2Velocity	access:public
b2VelocityConstraintPoint	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^struct b2VelocityConstraintPoint$/;"	s
b2VelocityConstraintPoint::normalImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2VelocityConstraintPoint::normalMass	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2VelocityConstraintPoint::rA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2VelocityConstraintPoint::rB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2VelocityConstraintPoint::tangentImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2VelocityConstraintPoint::tangentMass	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2VelocityConstraintPoint::velocityBias	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint	access:public
b2Version	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^struct b2Version$/;"	s
b2Version::major	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^	int32 major;		\/\/\/< significant changes$/;"	m	struct:b2Version	access:public
b2Version::minor	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^	int32 minor;		\/\/\/< incremental changes$/;"	m	struct:b2Version	access:public
b2Version::revision	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^	int32 revision;		\/\/\/< bug fixes$/;"	m	struct:b2Version	access:public
b2WeldJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2WeldJoint::b2WeldJoint(const b2WeldJointDef* def)$/;"	f	class:b2WeldJoint	signature:(const b2WeldJointDef* def)
b2WeldJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2WeldJoint(const b2WeldJointDef* def);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2WeldJointDef* def)
b2WeldJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^class b2WeldJoint : public b2Joint$/;"	c	inherits:b2Joint
b2WeldJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJoint::Dump()$/;"	f	class:b2WeldJoint	signature:()
b2WeldJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void Dump();$/;"	p	class:b2WeldJoint	access:public	signature:()
b2WeldJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorA() const$/;"	f	class:b2WeldJoint	signature:() const
b2WeldJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorB() const$/;"	f	class:b2WeldJoint	signature:() const
b2WeldJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::GetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetDampingRatio() const { return m_dampingRatio; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::GetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetFrequency() const { return m_frequencyHz; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WeldJoint	signature:(float32 inv_dt) const
b2WeldJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2WeldJoint	access:public	signature:(float32 inv_dt) const
b2WeldJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^float32 b2WeldJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WeldJoint	signature:(float32 inv_dt) const
b2WeldJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2WeldJoint	access:public	signature:(float32 inv_dt) const
b2WeldJoint::GetReferenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2WeldJoint	access:public	signature:() const
b2WeldJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint	signature:(const b2SolverData& data)
b2WeldJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2SolverData& data)
b2WeldJoint::SetDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void SetDampingRatio(float32 ratio) { m_dampingRatio = ratio; }$/;"	f	class:b2WeldJoint	access:public	signature:(float32 ratio)
b2WeldJoint::SetFrequency	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void SetFrequency(float32 hz) { m_frequencyHz = hz; }$/;"	f	class:b2WeldJoint	access:public	signature:(float32 hz)
b2WeldJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^bool b2WeldJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint	signature:(const b2SolverData& data)
b2WeldJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2SolverData& data)
b2WeldJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint	signature:(const b2SolverData& data)
b2WeldJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2SolverData& data)
b2WeldJoint::b2WeldJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^b2WeldJoint::b2WeldJoint(const b2WeldJointDef* def)$/;"	f	class:b2WeldJoint	signature:(const b2WeldJointDef* def)
b2WeldJoint::b2WeldJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2WeldJoint(const b2WeldJointDef* def);$/;"	p	class:b2WeldJoint	access:protected	signature:(const b2WeldJointDef* def)
b2WeldJoint::m_bias	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_bias;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Mat33 m_mass;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJoint::m_referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2WeldJoint	access:protected
b2WeldJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2WeldJointDef()$/;"	f	struct:b2WeldJointDef	access:public	signature:()
b2WeldJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^struct b2WeldJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2WeldJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.cpp	/^void b2WeldJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2WeldJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor)
b2WeldJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);$/;"	p	struct:b2WeldJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor)
b2WeldJointDef::b2WeldJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2WeldJointDef()$/;"	f	struct:b2WeldJointDef	access:public	signature:()
b2WeldJointDef::dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WeldJointDef	access:public
b2WeldJointDef::frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WeldJointDef	access:public
b2WeldJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WeldJointDef	access:public
b2WeldJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WeldJointDef	access:public
b2WeldJointDef::referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2WeldJointDef	access:public
b2WheelJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2WheelJoint::b2WheelJoint(const b2WheelJointDef* def)$/;"	f	class:b2WheelJoint	signature:(const b2WheelJointDef* def)
b2WheelJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2WheelJoint(const b2WheelJointDef* def);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2WheelJointDef* def)
b2WheelJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^class b2WheelJoint : public b2Joint$/;"	c	inherits:b2Joint
b2WheelJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::Dump()$/;"	f	class:b2WheelJoint	signature:()
b2WheelJoint::Dump	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void Dump();$/;"	p	class:b2WheelJoint	access:public	signature:()
b2WheelJoint::EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::EnableMotor(bool flag)$/;"	f	class:b2WheelJoint	signature:(bool flag)
b2WheelJoint::EnableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void EnableMotor(bool flag);$/;"	p	class:b2WheelJoint	access:public	signature:(bool flag)
b2WheelJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorA() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 GetAnchorA() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorB() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 GetAnchorB() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointSpeed() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetJointSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetJointSpeed() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointTranslation() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetJointTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetJointTranslation() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetLocalAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetLocalAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetLocalAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetMaxMotorTorque() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMaxMotorTorque() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetMotorSpeed() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMotorSpeed() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint	signature:(float32 inv_dt) const
b2WheelJoint::GetMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetMotorTorque(float32 inv_dt) const;$/;"	p	class:b2WheelJoint	access:public	signature:(float32 inv_dt) const
b2WheelJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WheelJoint	signature:(float32 inv_dt) const
b2WheelJoint::GetReactionForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 GetReactionForce(float32 inv_dt) const;$/;"	p	class:b2WheelJoint	access:public	signature:(float32 inv_dt) const
b2WheelJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint	signature:(float32 inv_dt) const
b2WheelJoint::GetReactionTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetReactionTorque(float32 inv_dt) const;$/;"	p	class:b2WheelJoint	access:public	signature:(float32 inv_dt) const
b2WheelJoint::GetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetSpringDampingRatio() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringDampingRatio() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::GetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 GetSpringFrequencyHz() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::GetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringFrequencyHz() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint	signature:(const b2SolverData& data)
b2WheelJoint::InitVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void InitVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2SolverData& data)
b2WheelJoint::IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^bool b2WheelJoint::IsMotorEnabled() const$/;"	f	class:b2WheelJoint	signature:() const
b2WheelJoint::IsMotorEnabled	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool IsMotorEnabled() const;$/;"	p	class:b2WheelJoint	access:public	signature:() const
b2WheelJoint::SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2WheelJoint	signature:(float32 torque)
b2WheelJoint::SetMaxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetMaxMotorTorque(float32 torque);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 torque)
b2WheelJoint::SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2WheelJoint	signature:(float32 speed)
b2WheelJoint::SetMotorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetMotorSpeed(float32 speed);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 speed)
b2WheelJoint::SetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetSpringDampingRatio(float32 ratio);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 ratio)
b2WheelJoint::SetSpringDampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringDampingRatio(float32 ratio)$/;"	f	class:b2WheelJoint	signature:(float32 ratio)
b2WheelJoint::SetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SetSpringFrequencyHz(float32 hz);$/;"	p	class:b2WheelJoint	access:public	signature:(float32 hz)
b2WheelJoint::SetSpringFrequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringFrequencyHz(float32 hz)$/;"	f	class:b2WheelJoint	signature:(float32 hz)
b2WheelJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^bool b2WheelJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint	signature:(const b2SolverData& data)
b2WheelJoint::SolvePositionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool SolvePositionConstraints(const b2SolverData& data);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2SolverData& data)
b2WheelJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint	signature:(const b2SolverData& data)
b2WheelJoint::SolveVelocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void SolveVelocityConstraints(const b2SolverData& data);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2SolverData& data)
b2WheelJoint::b2WheelJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^b2WheelJoint::b2WheelJoint(const b2WheelJointDef* def)$/;"	f	class:b2WheelJoint	signature:(const b2WheelJointDef* def)
b2WheelJoint::b2WheelJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2WheelJoint(const b2WheelJointDef* def);$/;"	p	class:b2WheelJoint	access:protected	signature:(const b2WheelJointDef* def)
b2WheelJoint::m_ax	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_ay	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_bias	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_bias;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_impulse;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_localXAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_localYAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_mass;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_motorImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_motorMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_sAx	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_sAy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_sBx	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_sBy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_springImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_springImpulse;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJoint::m_springMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_springMass;$/;"	m	class:b2WheelJoint	access:protected
b2WheelJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2WheelJointDef()$/;"	f	struct:b2WheelJointDef	access:public	signature:()
b2WheelJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^struct b2WheelJointDef : public b2JointDef$/;"	s	inherits:b2JointDef
b2WheelJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.cpp	/^void b2WheelJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2WheelJointDef	signature:(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)
b2WheelJointDef::Initialize	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis);$/;"	p	struct:b2WheelJointDef	access:public	signature:(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor, const b2Vec2& axis)
b2WheelJointDef::b2WheelJointDef	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2WheelJointDef()$/;"	f	struct:b2WheelJointDef	access:public	signature:()
b2WheelJointDef::dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool enableMotor;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::localAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2WheelJointDef	access:public
b2WheelJointDef::motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2WheelJointDef	access:public
b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2World::b2World(const b2Vec2& gravity)$/;"	f	class:b2World	signature:(const b2Vec2& gravity)
b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2World(const b2Vec2& gravity);$/;"	p	class:b2World	access:public	signature:(const b2Vec2& gravity)
b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^class b2World$/;"	c
b2World::ClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::ClearForces()$/;"	f	class:b2World	signature:()
b2World::ClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void ClearForces();$/;"	p	class:b2World	access:public	signature:()
b2World::CreateBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2Body* b2World::CreateBody(const b2BodyDef* def)$/;"	f	class:b2World	signature:(const b2BodyDef* def)
b2World::CreateBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Body* CreateBody(const b2BodyDef* def);$/;"	p	class:b2World	access:public	signature:(const b2BodyDef* def)
b2World::CreateJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2Joint* b2World::CreateJoint(const b2JointDef* def)$/;"	f	class:b2World	signature:(const b2JointDef* def)
b2World::CreateJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Joint* CreateJoint(const b2JointDef* def);$/;"	p	class:b2World	access:public	signature:(const b2JointDef* def)
b2World::DestroyBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DestroyBody(b2Body* b)$/;"	f	class:b2World	signature:(b2Body* b)
b2World::DestroyBody	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DestroyBody(b2Body* body);$/;"	p	class:b2World	access:public	signature:(b2Body* body)
b2World::DestroyJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DestroyJoint(b2Joint* j)$/;"	f	class:b2World	signature:(b2Joint* j)
b2World::DestroyJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DestroyJoint(b2Joint* joint);$/;"	p	class:b2World	access:public	signature:(b2Joint* joint)
b2World::DrawDebugData	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DrawDebugData()$/;"	f	class:b2World	signature:()
b2World::DrawDebugData	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DrawDebugData();$/;"	p	class:b2World	access:public	signature:()
b2World::DrawJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DrawJoint(b2Joint* joint)$/;"	f	class:b2World	signature:(b2Joint* joint)
b2World::DrawJoint	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DrawJoint(b2Joint* joint);$/;"	p	class:b2World	access:private	signature:(b2Joint* joint)
b2World::DrawShape	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::DrawShape(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)$/;"	f	class:b2World	signature:(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)
b2World::DrawShape	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void DrawShape(b2Fixture* shape, const b2Transform& xf, const b2Color& color);$/;"	p	class:b2World	access:private	signature:(b2Fixture* shape, const b2Transform& xf, const b2Color& color)
b2World::Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::Dump()$/;"	f	class:b2World	signature:()
b2World::Dump	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void Dump();$/;"	p	class:b2World	access:public	signature:()
b2World::GetAllowSleeping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetAllowSleeping() const { return m_allowSleep; }$/;"	f	class:b2World	access:public	signature:() const
b2World::GetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetAutoClearForces() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline bool b2World::GetAutoClearForces() const$/;"	f	class:b2World	signature:() const
b2World::GetBodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetBodyCount() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetBodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline int32 b2World::GetBodyCount() const$/;"	f	class:b2World	signature:() const
b2World::GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Body* GetBodyList();$/;"	p	class:b2World	access:public	signature:()
b2World::GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Body* GetBodyList() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Body* b2World::GetBodyList()$/;"	f	class:b2World	signature:()
b2World::GetBodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Body* b2World::GetBodyList() const$/;"	f	class:b2World	signature:() const
b2World::GetContactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetContactCount() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetContactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline int32 b2World::GetContactCount() const$/;"	f	class:b2World	signature:() const
b2World::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Contact* GetContactList();$/;"	p	class:b2World	access:public	signature:()
b2World::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Contact* GetContactList() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Contact* b2World::GetContactList()$/;"	f	class:b2World	signature:()
b2World::GetContactList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Contact* b2World::GetContactList() const$/;"	f	class:b2World	signature:() const
b2World::GetContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2ContactManager& GetContactManager() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetContactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2ContactManager& b2World::GetContactManager() const$/;"	f	class:b2World	signature:() const
b2World::GetContinuousPhysics	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetContinuousPhysics() const { return m_continuousPhysics; }$/;"	f	class:b2World	access:public	signature:() const
b2World::GetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Vec2 GetGravity() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Vec2 b2World::GetGravity() const$/;"	f	class:b2World	signature:() const
b2World::GetJointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetJointCount() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetJointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline int32 b2World::GetJointCount() const$/;"	f	class:b2World	signature:() const
b2World::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Joint* GetJointList();$/;"	p	class:b2World	access:public	signature:()
b2World::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Joint* GetJointList() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline b2Joint* b2World::GetJointList()$/;"	f	class:b2World	signature:()
b2World::GetJointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Joint* b2World::GetJointList() const$/;"	f	class:b2World	signature:() const
b2World::GetProfile	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	const b2Profile& GetProfile() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetProfile	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline const b2Profile& b2World::GetProfile() const$/;"	f	class:b2World	signature:() const
b2World::GetProxyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^int32 b2World::GetProxyCount() const$/;"	f	class:b2World	signature:() const
b2World::GetProxyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetProxyCount() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetSubStepping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetSubStepping() const { return m_subStepping; }$/;"	f	class:b2World	access:public	signature:() const
b2World::GetTreeBalance	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^int32 b2World::GetTreeBalance() const$/;"	f	class:b2World	signature:() const
b2World::GetTreeBalance	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetTreeBalance() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetTreeHeight	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^int32 b2World::GetTreeHeight() const$/;"	f	class:b2World	signature:() const
b2World::GetTreeHeight	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 GetTreeHeight() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetTreeQuality	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^float32 b2World::GetTreeQuality() const$/;"	f	class:b2World	signature:() const
b2World::GetTreeQuality	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	float32 GetTreeQuality() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::GetWarmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool GetWarmStarting() const { return m_warmStarting; }$/;"	f	class:b2World	access:public	signature:() const
b2World::IsLocked	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool IsLocked() const;$/;"	p	class:b2World	access:public	signature:() const
b2World::IsLocked	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline bool b2World::IsLocked() const$/;"	f	class:b2World	signature:() const
b2World::QueryAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const$/;"	f	class:b2World	signature:(b2QueryCallback* callback, const b2AABB& aabb) const
b2World::QueryAABB	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const;$/;"	p	class:b2World	access:public	signature:(b2QueryCallback* callback, const b2AABB& aabb) const
b2World::RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const$/;"	f	class:b2World	signature:(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const
b2World::RayCast	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const;$/;"	p	class:b2World	access:public	signature:(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const
b2World::SetAllowSleeping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetAllowSleeping(bool flag)$/;"	f	class:b2World	signature:(bool flag)
b2World::SetAllowSleeping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetAllowSleeping(bool flag);$/;"	p	class:b2World	access:public	signature:(bool flag)
b2World::SetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetAutoClearForces(bool flag);$/;"	p	class:b2World	access:public	signature:(bool flag)
b2World::SetAutoClearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline void b2World::SetAutoClearForces(bool flag)$/;"	f	class:b2World	signature:(bool flag)
b2World::SetContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetContactFilter(b2ContactFilter* filter)$/;"	f	class:b2World	signature:(b2ContactFilter* filter)
b2World::SetContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetContactFilter(b2ContactFilter* filter);$/;"	p	class:b2World	access:public	signature:(b2ContactFilter* filter)
b2World::SetContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetContactListener(b2ContactListener* listener)$/;"	f	class:b2World	signature:(b2ContactListener* listener)
b2World::SetContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetContactListener(b2ContactListener* listener);$/;"	p	class:b2World	access:public	signature:(b2ContactListener* listener)
b2World::SetContinuousPhysics	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetContinuousPhysics(bool flag) { m_continuousPhysics = flag; }$/;"	f	class:b2World	access:public	signature:(bool flag)
b2World::SetDebugDraw	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetDebugDraw(b2Draw* debugDraw)$/;"	f	class:b2World	signature:(b2Draw* debugDraw)
b2World::SetDebugDraw	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetDebugDraw(b2Draw* debugDraw);$/;"	p	class:b2World	access:public	signature:(b2Draw* debugDraw)
b2World::SetDestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SetDestructionListener(b2DestructionListener* listener)$/;"	f	class:b2World	signature:(b2DestructionListener* listener)
b2World::SetDestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetDestructionListener(b2DestructionListener* listener);$/;"	p	class:b2World	access:public	signature:(b2DestructionListener* listener)
b2World::SetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetGravity(const b2Vec2& gravity);$/;"	p	class:b2World	access:public	signature:(const b2Vec2& gravity)
b2World::SetGravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^inline void b2World::SetGravity(const b2Vec2& gravity)$/;"	f	class:b2World	signature:(const b2Vec2& gravity)
b2World::SetSubStepping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetSubStepping(bool flag) { m_subStepping = flag; }$/;"	f	class:b2World	access:public	signature:(bool flag)
b2World::SetWarmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SetWarmStarting(bool flag) { m_warmStarting = flag; }$/;"	f	class:b2World	access:public	signature:(bool flag)
b2World::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::ShiftOrigin(const b2Vec2& newOrigin)$/;"	f	class:b2World	signature:(const b2Vec2& newOrigin)
b2World::ShiftOrigin	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void ShiftOrigin(const b2Vec2& newOrigin);$/;"	p	class:b2World	access:public	signature:(const b2Vec2& newOrigin)
b2World::Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::Solve(const b2TimeStep& step)$/;"	f	class:b2World	signature:(const b2TimeStep& step)
b2World::Solve	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void Solve(const b2TimeStep& step);$/;"	p	class:b2World	access:private	signature:(const b2TimeStep& step)
b2World::SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::SolveTOI(const b2TimeStep& step)$/;"	f	class:b2World	signature:(const b2TimeStep& step)
b2World::SolveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void SolveTOI(const b2TimeStep& step);$/;"	p	class:b2World	access:private	signature:(const b2TimeStep& step)
b2World::Step	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^void b2World::Step(float32 dt, int32 velocityIterations, int32 positionIterations)$/;"	f	class:b2World	signature:(float32 dt, int32 velocityIterations, int32 positionIterations)
b2World::Step	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	void Step(	float32 timeStep,$/;"	p	class:b2World	access:public	signature:( float32 timeStep, int32 velocityIterations, int32 positionIterations)
b2World::b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2World::b2World(const b2Vec2& gravity)$/;"	f	class:b2World	signature:(const b2Vec2& gravity)
b2World::b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2World(const b2Vec2& gravity);$/;"	p	class:b2World	access:public	signature:(const b2Vec2& gravity)
b2World::e_clearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^		e_clearForces	= 0x0004$/;"	e	enum:b2World::__anon5
b2World::e_locked	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^		e_locked		= 0x0002,$/;"	e	enum:b2World::__anon5
b2World::e_newFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^		e_newFixture	= 0x0001,$/;"	e	enum:b2World::__anon5
b2World::g_debugDraw	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Draw* g_debugDraw;$/;"	m	class:b2World	access:private
b2World::m_allowSleep	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_allowSleep;$/;"	m	class:b2World	access:private
b2World::m_blockAllocator	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2BlockAllocator m_blockAllocator;$/;"	m	class:b2World	access:private
b2World::m_bodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 m_bodyCount;$/;"	m	class:b2World	access:private
b2World::m_bodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Body* m_bodyList;$/;"	m	class:b2World	access:private
b2World::m_contactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2ContactManager m_contactManager;$/;"	m	class:b2World	access:private
b2World::m_continuousPhysics	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_continuousPhysics;$/;"	m	class:b2World	access:private
b2World::m_destructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2DestructionListener* m_destructionListener;$/;"	m	class:b2World	access:private
b2World::m_flags	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 m_flags;$/;"	m	class:b2World	access:private
b2World::m_gravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2World	access:private
b2World::m_inv_dt0	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	float32 m_inv_dt0;$/;"	m	class:b2World	access:private
b2World::m_jointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 m_jointCount;$/;"	m	class:b2World	access:private
b2World::m_jointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Joint* m_jointList;$/;"	m	class:b2World	access:private
b2World::m_profile	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Profile m_profile;$/;"	m	class:b2World	access:private
b2World::m_stackAllocator	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2StackAllocator m_stackAllocator;$/;"	m	class:b2World	access:private
b2World::m_stepComplete	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_stepComplete;$/;"	m	class:b2World	access:private
b2World::m_subStepping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_subStepping;$/;"	m	class:b2World	access:private
b2World::m_warmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_warmStarting;$/;"	m	class:b2World	access:private
b2World::~b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2World::~b2World()$/;"	f	class:b2World	signature:()
b2World::~b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	~b2World();$/;"	p	class:b2World	access:public	signature:()
b2WorldManifold	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^struct b2WorldManifold$/;"	s
b2WorldManifold::Initialize	C:\Box2D\Box2D\Box2D\Collision\b2Collision.cpp	/^void b2WorldManifold::Initialize(const b2Manifold* manifold,$/;"	f	class:b2WorldManifold	signature:(const b2Manifold* manifold, const b2Transform& xfA, float32 radiusA, const b2Transform& xfB, float32 radiusB)
b2WorldManifold::Initialize	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	void Initialize(const b2Manifold* manifold,$/;"	p	struct:b2WorldManifold	access:public	signature:(const b2Manifold* manifold, const b2Transform& xfA, float32 radiusA, const b2Transform& xfB, float32 radiusB)
b2WorldManifold::normal	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 normal;								\/\/\/< world vector pointing from A to B$/;"	m	struct:b2WorldManifold	access:public
b2WorldManifold::points	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 points[b2_maxManifoldPoints];		\/\/\/< world contact point (point of intersection)$/;"	m	struct:b2WorldManifold	access:public
b2WorldManifold::separations	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 separations[b2_maxManifoldPoints];	\/\/\/< a negative value indicates overlap, in meters$/;"	m	struct:b2WorldManifold	access:public
b2WorldQueryWrapper	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^struct b2WorldQueryWrapper$/;"	s	file:
b2WorldQueryWrapper::QueryCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	bool QueryCallback(int32 proxyId)$/;"	f	struct:b2WorldQueryWrapper	access:public	signature:(int32 proxyId)
b2WorldQueryWrapper::broadPhase	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldQueryWrapper	file:	access:public
b2WorldQueryWrapper::callback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	b2QueryCallback* callback;$/;"	m	struct:b2WorldQueryWrapper	file:	access:public
b2WorldRayCastWrapper	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^struct b2WorldRayCastWrapper$/;"	s	file:
b2WorldRayCastWrapper::RayCastCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	float32 RayCastCallback(const b2RayCastInput& input, int32 proxyId)$/;"	f	struct:b2WorldRayCastWrapper	access:public	signature:(const b2RayCastInput& input, int32 proxyId)
b2WorldRayCastWrapper::broadPhase	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldRayCastWrapper	file:	access:public
b2WorldRayCastWrapper::callback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	b2RayCastCallback* callback;$/;"	m	struct:b2WorldRayCastWrapper	file:	access:public
b2_aabbExtension	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	59;"	d
b2_aabbMultiplier	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	64;"	d
b2_addState	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2_addState,		\/\/\/< point was added in the update$/;"	e	enum:b2PointState
b2_angularSleepTolerance	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	126;"	d
b2_angularSlop	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	72;"	d
b2_baumgarte	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	113;"	d
b2_blockSizes	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^const int32 b2_blockSizes = 14;$/;"	v
b2_chunkArrayIncrement	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^const int32 b2_chunkArrayIncrement = 128;$/;"	v
b2_chunkSize	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^const int32 b2_chunkSize = 16 * 1024;$/;"	v
b2_defaultFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^b2ContactFilter b2_defaultFilter;$/;"	v
b2_defaultListener	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.cpp	/^b2ContactListener b2_defaultListener;$/;"	v
b2_dynamicBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2_dynamicBody$/;"	e	enum:b2BodyType
b2_epsilon	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	39;"	d
b2_gjkCalls	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkIters	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkMaxIters	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_kinematicBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2_kinematicBody,$/;"	e	enum:b2BodyType
b2_linearSleepTolerance	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	123;"	d
b2_linearSlop	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	68;"	d
b2_maxAngularCorrection	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	98;"	d
b2_maxBlockSize	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^const int32 b2_maxBlockSize = 640;$/;"	v
b2_maxFloat	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	38;"	d
b2_maxLinearCorrection	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	94;"	d
b2_maxManifoldPoints	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	50;"	d
b2_maxPolygonVertices	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	54;"	d
b2_maxRotation	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	107;"	d
b2_maxRotationSquared	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	108;"	d
b2_maxStackEntries	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^const int32 b2_maxStackEntries = 32;$/;"	v
b2_maxSubSteps	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	80;"	d
b2_maxTOIContacts	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	86;"	d
b2_maxTranslation	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	102;"	d
b2_maxTranslationSquared	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	103;"	d
b2_minPulleyLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^const float32 b2_minPulleyLength = 2.0f;$/;"	v
b2_nullFeature	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^const uint8 b2_nullFeature = UCHAR_MAX;$/;"	v
b2_nullNode	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	25;"	d
b2_nullState	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2_nullState,		\/\/\/< point does not exist$/;"	e	enum:b2PointState
b2_persistState	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2_persistState,	\/\/\/< point persisted across the update$/;"	e	enum:b2PointState
b2_pi	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	40;"	d
b2_polygonRadius	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	77;"	d
b2_removeState	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2_removeState		\/\/\/< point was removed in the update$/;"	e	enum:b2PointState
b2_stackSize	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^const int32 b2_stackSize = 100 * 1024;	\/\/ 100k$/;"	v
b2_staticBody	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2_staticBody = 0,$/;"	e	enum:b2BodyType
b2_timeToSleep	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	120;"	d
b2_toiBaugarte	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	114;"	d
b2_toiCalls	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^int32 b2_toiCalls, b2_toiIters, b2_toiMaxIters;$/;"	v
b2_toiIters	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^int32 b2_toiCalls, b2_toiIters, b2_toiMaxIters;$/;"	v
b2_toiMaxIters	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^int32 b2_toiCalls, b2_toiIters, b2_toiMaxIters;$/;"	v
b2_toiMaxRootIters	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiMaxTime	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^float32 b2_toiTime, b2_toiMaxTime;$/;"	v
b2_toiRootIters	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiTime	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^float32 b2_toiTime, b2_toiMaxTime;$/;"	v
b2_velocityThreshold	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	90;"	d
b2_version	C:\Box2D\Box2D\Box2D\Common\b2Settings.cpp	/^b2Version b2_version = {2, 3, 2};$/;"	v
blockSize	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^	int32 blockSize;$/;"	m	struct:b2Chunk	file:	access:public
blocks	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^	b2Block* blocks;$/;"	m	struct:b2Chunk	file:	access:public
bodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* bodyA;$/;"	m	struct:b2JointDef	access:public
bodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* bodyB;$/;"	m	struct:b2JointDef	access:public
broadPhase	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldQueryWrapper	file:	access:public
broadPhase	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldRayCastWrapper	file:	access:public
broadphase	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 broadphase;$/;"	m	struct:b2Profile	access:public
bullet	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool bullet;$/;"	m	struct:b2BodyDef	access:public
c	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep	access:public
c	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot	access:public
c	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Vec2 c;$/;"	m	struct:b2Position	access:public
c0	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 c0, c;		\/\/\/< center world positions$/;"	m	struct:b2Sweep	access:public
callback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	b2QueryCallback* callback;$/;"	m	struct:b2WorldQueryWrapper	file:	access:public
callback	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^	b2RayCastCallback* callback;$/;"	m	struct:b2WorldRayCastWrapper	file:	access:public
categoryBits	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	uint16 categoryBits;$/;"	m	struct:b2Filter	access:public
center	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	b2Vec2 center;$/;"	m	struct:b2MassData	access:public
cf	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ContactFeature cf;$/;"	m	union:b2ContactID	access:public
child1	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 child1;$/;"	m	struct:b2TreeNode	access:public
child2	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 child2;$/;"	m	struct:b2TreeNode	access:public
childIndex	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int32 childIndex;$/;"	m	struct:b2FixtureProxy	access:public
collide	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 collide;$/;"	m	struct:b2Profile	access:public
collideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool collideConnected;$/;"	m	struct:b2JointDef	access:public
contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* contact;		\/\/\/< the contact$/;"	m	struct:b2ContactEdge	access:public
contactIndex	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint	access:public
contacts	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef	access:public
correctionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 correctionFactor;$/;"	m	struct:b2MotorJointDef	access:public
count	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 count;$/;"	m	struct:b2TempPolygon	file:	access:public
count	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	uint16 count;$/;"	m	struct:b2SimplexCache	access:public
count	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 count;$/;"	m	struct:b2ContactSolverDef	access:public
count	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	int32 count;$/;"	m	struct:b2ContactImpulse	access:public
count	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	int32 count;$/;"	m	struct:b2RopeDef	access:public
createFcn	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister	access:public
damping	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 damping;$/;"	m	struct:b2RopeDef	access:public
dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2DistanceJointDef	access:public
dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2MouseJointDef	access:public
dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WeldJointDef	access:public
dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 dampingRatio;$/;"	m	struct:b2WheelJointDef	access:public
data	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	char* data;$/;"	m	struct:b2StackEntry	access:public
density	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 density;$/;"	m	struct:b2FixtureDef	access:public
destroyFcn	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister	access:public
distance	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	float32 distance;$/;"	m	struct:b2DistanceOutput	access:public
dt	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 dt;			\/\/ time step$/;"	m	struct:b2TimeStep	access:public
dtRatio	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 dtRatio;	\/\/ dt * inv_dt0$/;"	m	struct:b2TimeStep	access:public
e_aabbBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_aabbBit				= 0x0004,	\/\/\/< draw axis aligned bounding boxes$/;"	e	enum:b2Draw::__anon3
e_activeFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_activeFlag		= 0x0020,$/;"	e	enum:b2Body::__anon4
e_atLowerLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_atLowerLimit,$/;"	e	enum:b2LimitState
e_atUpperLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_atUpperLimit,$/;"	e	enum:b2LimitState
e_autoSleepFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_autoSleepFlag		= 0x0004,$/;"	e	enum:b2Body::__anon4
e_awakeFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_awakeFlag			= 0x0002,$/;"	e	enum:b2Body::__anon4
e_bulletFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_bulletFlag		= 0x0008,$/;"	e	enum:b2Body::__anon4
e_bulletHitFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_bulletHitFlag		= 0x0010,$/;"	e	enum:b2Contact::__anon6
e_centerOfMassBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_centerOfMassBit		= 0x0010	\/\/\/< draw center of mass frame$/;"	e	enum:b2Draw::__anon3
e_chain	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_chain = 3,$/;"	e	enum:b2Shape::Type
e_circle	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_circle = 0,$/;"	e	enum:b2Shape::Type
e_circles	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_circles,$/;"	e	enum:b2Manifold::Type
e_clearForces	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^		e_clearForces	= 0x0004$/;"	e	enum:b2World::__anon5
e_concave	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_concave,$/;"	e	enum:b2EPCollider::VertexType	file:
e_convex	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_convex$/;"	e	enum:b2EPCollider::VertexType	file:
e_distanceJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_distanceJoint,$/;"	e	enum:b2JointType
e_edge	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_edge = 1,$/;"	e	enum:b2Shape::Type
e_edgeA	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_edgeA,$/;"	e	enum:b2EPAxis::Type	file:
e_edgeB	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_edgeB$/;"	e	enum:b2EPAxis::Type	file:
e_enabledFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_enabledFlag		= 0x0004,$/;"	e	enum:b2Contact::__anon6
e_equalLimits	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_equalLimits$/;"	e	enum:b2LimitState
e_face	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_face = 1$/;"	e	enum:b2ContactFeature::Type
e_faceA	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_faceA,$/;"	e	enum:b2Manifold::Type
e_faceA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^		e_faceA,$/;"	e	enum:b2SeparationFunction::Type	file:
e_faceB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_faceB$/;"	e	enum:b2Manifold::Type
e_faceB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^		e_faceB$/;"	e	enum:b2SeparationFunction::Type	file:
e_failed	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_failed,$/;"	e	enum:b2TOIOutput::State
e_filterFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_filterFlag		= 0x0008,$/;"	e	enum:b2Contact::__anon6
e_fixedRotationFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_fixedRotationFlag	= 0x0010,$/;"	e	enum:b2Body::__anon4
e_frictionJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_frictionJoint,$/;"	e	enum:b2JointType
e_gearJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_gearJoint,$/;"	e	enum:b2JointType
e_inactiveLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_inactiveLimit,$/;"	e	enum:b2LimitState
e_islandFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Contact::__anon6
e_islandFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Body::__anon4
e_isolated	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_isolated,$/;"	e	enum:b2EPCollider::VertexType	file:
e_jointBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_jointBit				= 0x0002,	\/\/\/< draw joint connections$/;"	e	enum:b2Draw::__anon3
e_locked	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^		e_locked		= 0x0002,$/;"	e	enum:b2World::__anon5
e_motorJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_motorJoint$/;"	e	enum:b2JointType
e_mouseJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_mouseJoint,$/;"	e	enum:b2JointType
e_newFixture	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^		e_newFixture	= 0x0001,$/;"	e	enum:b2World::__anon5
e_nullProxy	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^		e_nullProxy = -1$/;"	e	enum:b2BroadPhase::__anon1
e_overlapped	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_overlapped,$/;"	e	enum:b2TOIOutput::State
e_pairBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_pairBit				= 0x0008,	\/\/\/< draw broad-phase pairs$/;"	e	enum:b2Draw::__anon3
e_points	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^		e_points,$/;"	e	enum:b2SeparationFunction::Type	file:
e_polygon	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_polygon = 2,$/;"	e	enum:b2Shape::Type
e_prismaticJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_prismaticJoint,$/;"	e	enum:b2JointType
e_pulleyJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_pulleyJoint,$/;"	e	enum:b2JointType
e_revoluteJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_revoluteJoint,$/;"	e	enum:b2JointType
e_ropeJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_ropeJoint,$/;"	e	enum:b2JointType
e_separated	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_separated$/;"	e	enum:b2TOIOutput::State
e_shapeBit	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^		e_shapeBit				= 0x0001,	\/\/\/< draw shapes$/;"	e	enum:b2Draw::__anon3
e_toiFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_toiFlag			= 0x0020$/;"	e	enum:b2Contact::__anon6
e_toiFlag	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^		e_toiFlag			= 0x0040$/;"	e	enum:b2Body::__anon4
e_touching	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_touching,$/;"	e	enum:b2TOIOutput::State
e_touchingFlag	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^		e_touchingFlag		= 0x0002,$/;"	e	enum:b2Contact::__anon6
e_typeCount	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^		e_typeCount = 4$/;"	e	enum:b2Shape::Type
e_unknown	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^		e_unknown,$/;"	e	enum:b2EPAxis::Type	file:
e_unknown	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^		e_unknown,$/;"	e	enum:b2TOIOutput::State
e_unknownJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_unknownJoint,$/;"	e	enum:b2JointType
e_vertex	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^		e_vertex = 0,$/;"	e	enum:b2ContactFeature::Type
e_weldJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^    e_weldJoint,$/;"	e	enum:b2JointType
e_wheelJoint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	e_wheelJoint,$/;"	e	enum:b2JointType
enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool enableLimit;$/;"	m	struct:b2PrismaticJointDef	access:public
enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool enableLimit;$/;"	m	struct:b2RevoluteJointDef	access:public
enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool enableMotor;$/;"	m	struct:b2PrismaticJointDef	access:public
enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool enableMotor;$/;"	m	struct:b2RevoluteJointDef	access:public
enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool enableMotor;$/;"	m	struct:b2WheelJointDef	access:public
ex	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22	access:public
ex	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33	access:public
ey	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 ex, ey;$/;"	m	struct:b2Mat22	access:public
ey	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33	access:public
ez	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33	access:public
filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Filter filter;$/;"	m	struct:b2FixtureDef	access:public
fixedRotation	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	bool fixedRotation;$/;"	m	struct:b2BodyDef	access:public
fixture	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture* fixture;$/;"	m	struct:b2FixtureProxy	access:public
float32	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef float float32;$/;"	t
float64	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef double float64;$/;"	t
fraction	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 fraction;$/;"	m	struct:b2RayCastOutput	access:public
frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2DistanceJointDef	access:public
frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2MouseJointDef	access:public
frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WeldJointDef	access:public
frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 frequencyHz;$/;"	m	struct:b2WheelJointDef	access:public
friction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 friction;$/;"	m	struct:b2ContactVelocityConstraint	access:public
friction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 friction;$/;"	m	struct:b2FixtureDef	access:public
g	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
g_blockSolve	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^bool g_blockSolve = true;$/;"	v
g_debugDraw	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Draw* g_debugDraw;$/;"	m	class:b2World	access:private
gravity	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2 gravity;$/;"	m	struct:b2RopeDef	access:public
gravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 gravityScale;$/;"	m	struct:b2BodyDef	access:public
groundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 groundAnchorA;$/;"	m	struct:b2PulleyJointDef	access:public
groundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 groundAnchorB;$/;"	m	struct:b2PulleyJointDef	access:public
groupIndex	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int16 groupIndex;$/;"	m	struct:b2Filter	access:public
height	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 height;$/;"	m	struct:b2TreeNode	access:public
i1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:	access:public
i2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:	access:public
id	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ContactID id;			\/\/\/< uniquely identifies a contact point between two shapes$/;"	m	struct:b2ManifoldPoint	access:public
id	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ContactID id;$/;"	m	struct:b2ClipVertex	access:public
index	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	int32 index;$/;"	m	struct:b2EPAxis	file:	access:public
indexA	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 indexA;		\/\/\/< Feature index on shapeA$/;"	m	struct:b2ContactFeature	access:public
indexA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	int32 indexA;	\/\/ wA index$/;"	m	struct:b2SimplexVertex	file:	access:public
indexA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	uint8 indexA[3];	\/\/\/< vertices on shape A$/;"	m	struct:b2SimplexCache	access:public
indexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	int32 indexA;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
indexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint	access:public
indexB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 indexB;		\/\/\/< Feature index on shapeB$/;"	m	struct:b2ContactFeature	access:public
indexB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	int32 indexB;	\/\/ wB index$/;"	m	struct:b2SimplexVertex	file:	access:public
indexB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	uint8 indexB[3];	\/\/\/< vertices on shape B$/;"	m	struct:b2SimplexCache	access:public
indexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	int32 indexB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
indexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
int16	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef signed short int16;$/;"	t
int32	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef signed int int32;$/;"	t
int8	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef signed char	int8;$/;"	t
invIA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
invIA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
invIB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
invIB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint	access:public
inv_dt	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 inv_dt;		\/\/ inverse time step (0 if dt == 0).$/;"	m	struct:b2TimeStep	access:public
isSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool isSensor;$/;"	m	struct:b2FixtureDef	access:public
iterations	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 iterations;	\/\/\/< number of GJK iterations used$/;"	m	struct:b2DistanceOutput	access:public
joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* joint;			\/\/\/< the joint$/;"	m	struct:b2JointEdge	access:public
joint1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* joint1;$/;"	m	struct:b2GearJointDef	access:public
joint2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* joint2;$/;"	m	struct:b2GearJointDef	access:public
k2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 k2;$/;"	m	struct:b2RopeDef	access:public
k3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 k3;$/;"	m	struct:b2RopeDef	access:public
key	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint32 key;					\/\/\/< Used to quickly compare contact ids.$/;"	m	union:b2ContactID	access:public
length	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 length;$/;"	m	struct:b2DistanceJointDef	access:public
lengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 lengthA;$/;"	m	struct:b2PulleyJointDef	access:public
lengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 lengthB;$/;"	m	struct:b2PulleyJointDef	access:public
linear	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Vec2 linear;$/;"	m	struct:b2Jacobian	access:public
linearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 linearDamping;$/;"	m	struct:b2BodyDef	access:public
linearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 linearOffset;$/;"	m	struct:b2MotorJointDef	access:public
linearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 linearVelocity;$/;"	m	struct:b2BodyDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2DistanceJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2FrictionJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PrismaticJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2PulleyJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RevoluteJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2RopeJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WeldJointDef	access:public
localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 localAnchorA;$/;"	m	struct:b2WheelJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2DistanceJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2FrictionJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PrismaticJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2PulleyJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RevoluteJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2RopeJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WeldJointDef	access:public
localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 localAnchorB;$/;"	m	struct:b2WheelJointDef	access:public
localAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2PrismaticJointDef	access:public
localAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 localAxisA;$/;"	m	struct:b2WheelJointDef	access:public
localCenter	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 localCenter;	\/\/\/< local center of mass position$/;"	m	struct:b2Sweep	access:public
localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
localNormal	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 localNormal;								\/\/\/< not use for Type::e_points$/;"	m	struct:b2Manifold	access:public
localNormal	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localNormal;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
localPoint	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 localPoint;								\/\/\/< usage depends on manifold type$/;"	m	struct:b2Manifold	access:public
localPoint	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 localPoint;		\/\/\/< usage depends on manifold type$/;"	m	struct:b2ManifoldPoint	access:public
localPoint	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localPoint;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
localPoints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 localPoints[b2_maxManifoldPoints];$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
lowerAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 lowerAngle;$/;"	m	struct:b2RevoluteJointDef	access:public
lowerBound	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 lowerBound;	\/\/\/< the lower vertex$/;"	m	struct:b2AABB	access:public
lowerTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 lowerTranslation;$/;"	m	struct:b2PrismaticJointDef	access:public
m_C	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_C;$/;"	m	class:b2MouseJoint	access:protected
m_I	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body	access:private
m_JvAC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint	access:protected
m_JvBD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint	access:protected
m_JwA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
m_JwB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
m_JwC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
m_JwD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint	access:protected
m_K	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Mat33 m_K;$/;"	m	class:b2PrismaticJoint	access:protected
m_Ls	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* m_Ls;$/;"	m	class:b2Rope	access:private
m_a1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint	access:protected
m_a2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint	access:protected
m_allocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_allocation;$/;"	m	class:b2StackAllocator	access:private
m_allocator	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver	access:public
m_allocator	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2BlockAllocator* m_allocator;$/;"	m	class:b2ContactManager	access:public
m_allocator	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2Island	access:public
m_allowSleep	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_allowSleep;$/;"	m	class:b2World	access:private
m_angularDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_angularDamping;$/;"	m	class:b2Body	access:private
m_angularError	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularError;$/;"	m	class:b2MotorJoint	access:protected
m_angularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2FrictionJoint	access:protected
m_angularImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularImpulse;$/;"	m	class:b2MotorJoint	access:protected
m_angularMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2FrictionJoint	access:protected
m_angularMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularMass;$/;"	m	class:b2MotorJoint	access:protected
m_angularOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_angularOffset;$/;"	m	class:b2MotorJoint	access:protected
m_angularVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_angularVelocity;$/;"	m	class:b2Body	access:private
m_array	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	T m_array[N];$/;"	m	class:b2GrowableStack	access:private
m_as	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* m_as;$/;"	m	class:b2Rope	access:private
m_ax	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint	access:protected
m_axis	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Vec2 m_axis;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_axis	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint	access:protected
m_ay	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint	access:protected
m_beta	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_beta;$/;"	m	class:b2MouseJoint	access:protected
m_bias	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_bias;$/;"	m	class:b2DistanceJoint	access:protected
m_bias	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_bias;$/;"	m	class:b2WeldJoint	access:protected
m_bias	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_bias;$/;"	m	class:b2WheelJoint	access:protected
m_blockAllocator	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2BlockAllocator m_blockAllocator;$/;"	m	class:b2World	access:private
m_bodies	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Body** m_bodies;$/;"	m	class:b2Island	access:public
m_body	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Body* m_body;$/;"	m	class:b2Fixture	access:protected
m_bodyA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* m_bodyA;$/;"	m	class:b2Joint	access:protected
m_bodyB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* m_bodyB;$/;"	m	class:b2Joint	access:protected
m_bodyC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Body* m_bodyC;$/;"	m	class:b2GearJoint	access:protected
m_bodyCapacity	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_bodyCapacity;$/;"	m	class:b2Island	access:public
m_bodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_bodyCount;$/;"	m	class:b2Island	access:public
m_bodyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 m_bodyCount;$/;"	m	class:b2World	access:private
m_bodyD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Body* m_bodyD;$/;"	m	class:b2GearJoint	access:protected
m_bodyList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Body* m_bodyList;$/;"	m	class:b2World	access:private
m_broadPhase	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2BroadPhase m_broadPhase;$/;"	m	class:b2ContactManager	access:public
m_buffer	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Vec2 m_buffer[2];$/;"	m	struct:b2DistanceProxy	access:public
m_capacity	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	int32 m_capacity;$/;"	m	class:b2GrowableStack	access:private
m_centroid	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Vec2 m_centroid;$/;"	m	class:b2PolygonShape	access:public
m_centroidB	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_centroidB;$/;"	m	struct:b2EPCollider	file:	access:public
m_chunkCount	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	int32 m_chunkCount;$/;"	m	class:b2BlockAllocator	access:private
m_chunkSpace	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	int32 m_chunkSpace;$/;"	m	class:b2BlockAllocator	access:private
m_chunks	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	b2Chunk* m_chunks;$/;"	m	class:b2BlockAllocator	access:private
m_collideConnected	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool m_collideConnected;$/;"	m	class:b2Joint	access:protected
m_constant	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_constant;$/;"	m	class:b2GearJoint	access:protected
m_constant	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_constant;$/;"	m	class:b2PulleyJoint	access:protected
m_contactCapacity	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_contactCapacity;$/;"	m	class:b2Island	access:public
m_contactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	int32 m_contactCount;$/;"	m	class:b2ContactManager	access:public
m_contactCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_contactCount;$/;"	m	class:b2Island	access:public
m_contactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2ContactFilter* m_contactFilter;$/;"	m	class:b2ContactManager	access:public
m_contactList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2ContactEdge* m_contactList;$/;"	m	class:b2Body	access:private
m_contactList	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2Contact* m_contactList;$/;"	m	class:b2ContactManager	access:public
m_contactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2ContactManager.h	/^	b2ContactListener* m_contactListener;$/;"	m	class:b2ContactManager	access:public
m_contactManager	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2ContactManager m_contactManager;$/;"	m	class:b2World	access:private
m_contacts	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Contact** m_contacts;$/;"	m	class:b2ContactSolver	access:public
m_contacts	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Contact** m_contacts;$/;"	m	class:b2Island	access:public
m_continuousPhysics	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_continuousPhysics;$/;"	m	class:b2World	access:private
m_correctionFactor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_correctionFactor;$/;"	m	class:b2MotorJoint	access:protected
m_count	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	int32 m_count;$/;"	m	class:b2ChainShape	access:public
m_count	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	int32 m_count;$/;"	m	class:b2PolygonShape	access:public
m_count	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	int32 m_count;$/;"	m	struct:b2Simplex	file:	access:public
m_count	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	int32 m_count;$/;"	m	struct:b2DistanceProxy	access:public
m_count	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	int32 m_count;$/;"	m	class:b2GrowableStack	access:private
m_count	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int m_count;$/;"	m	class:b2ContactSolver	access:public
m_count	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	int32 m_count;$/;"	m	class:b2Rope	access:private
m_damping	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 m_damping;$/;"	m	class:b2Rope	access:private
m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2DistanceJoint	access:protected
m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2MouseJoint	access:protected
m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WeldJoint	access:protected
m_dampingRatio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_dampingRatio;$/;"	m	class:b2WheelJoint	access:protected
m_data	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	char m_data[b2_stackSize];$/;"	m	class:b2StackAllocator	access:private
m_density	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 m_density;$/;"	m	class:b2Fixture	access:protected
m_destructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2DestructionListener* m_destructionListener;$/;"	m	class:b2World	access:private
m_drawFlags	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	uint32 m_drawFlags;$/;"	m	class:b2Draw	access:protected
m_edgeA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge m_edgeA;$/;"	m	class:b2Joint	access:protected
m_edgeB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge m_edgeB;$/;"	m	class:b2Joint	access:protected
m_enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2PrismaticJoint	access:protected
m_enableLimit	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool m_enableLimit;$/;"	m	class:b2RevoluteJoint	access:protected
m_enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2PrismaticJoint	access:protected
m_enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2RevoluteJoint	access:protected
m_enableMotor	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	bool m_enableMotor;$/;"	m	class:b2WheelJoint	access:protected
m_entries	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	b2StackEntry m_entries[b2_maxStackEntries];$/;"	m	class:b2StackAllocator	access:private
m_entryCount	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_entryCount;$/;"	m	class:b2StackAllocator	access:private
m_filter	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Filter m_filter;$/;"	m	class:b2Fixture	access:protected
m_fixtureA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* m_fixtureA;$/;"	m	class:b2Contact	access:protected
m_fixtureB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Fixture* m_fixtureB;$/;"	m	class:b2Contact	access:protected
m_fixtureCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	int32 m_fixtureCount;$/;"	m	class:b2Body	access:private
m_fixtureList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Fixture* m_fixtureList;$/;"	m	class:b2Body	access:private
m_flags	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	uint32 m_flags;$/;"	m	class:b2Contact	access:protected
m_flags	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	uint16 m_flags;$/;"	m	class:b2Body	access:private
m_flags	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 m_flags;$/;"	m	class:b2World	access:private
m_force	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 m_force;$/;"	m	class:b2Body	access:private
m_freeList	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_freeList;$/;"	m	class:b2DynamicTree	access:private
m_freeLists	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	b2Block* m_freeLists[b2_blockSizes];$/;"	m	class:b2BlockAllocator	access:private
m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2DistanceJoint	access:protected
m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2MouseJoint	access:protected
m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WeldJoint	access:protected
m_frequencyHz	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_frequencyHz;$/;"	m	class:b2WheelJoint	access:protected
m_friction	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_friction;$/;"	m	class:b2Contact	access:protected
m_friction	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 m_friction;$/;"	m	class:b2Fixture	access:protected
m_front	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	bool m_front;$/;"	m	struct:b2EPCollider	file:	access:public
m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_gamma;$/;"	m	class:b2DistanceJoint	access:protected
m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_gamma;$/;"	m	class:b2MouseJoint	access:protected
m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WeldJoint	access:protected
m_gamma	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_gamma;$/;"	m	class:b2WheelJoint	access:protected
m_gravity	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2World	access:private
m_gravity	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2 m_gravity;$/;"	m	class:b2Rope	access:private
m_gravityScale	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_gravityScale;$/;"	m	class:b2Body	access:private
m_groundAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorA;$/;"	m	class:b2PulleyJoint	access:protected
m_groundAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_groundAnchorB;$/;"	m	class:b2PulleyJoint	access:protected
m_hasNextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape	access:public
m_hasPrevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape	access:public
m_hasVertex0	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape	access:public
m_hasVertex3	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape	access:public
m_iA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
m_iB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
m_iC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
m_iD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_impulse;$/;"	m	class:b2DistanceJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_impulse;$/;"	m	class:b2GearJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_impulse;$/;"	m	class:b2MouseJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2PrismaticJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_impulse;$/;"	m	class:b2PulleyJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2RevoluteJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_impulse;$/;"	m	class:b2RopeJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec3 m_impulse;$/;"	m	class:b2WeldJoint	access:protected
m_impulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_impulse;$/;"	m	class:b2WheelJoint	access:protected
m_ims	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* m_ims;$/;"	m	class:b2Rope	access:private
m_index	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_index;$/;"	m	class:b2StackAllocator	access:private
m_index	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	int32 m_index;$/;"	m	class:b2Joint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 m_indexA;$/;"	m	class:b2Contact	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	int32 m_indexA;$/;"	m	class:b2DistanceJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	int32 m_indexA;$/;"	m	class:b2FrictionJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MotorJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	int32 m_indexA;$/;"	m	class:b2MouseJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PrismaticJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	int32 m_indexA;$/;"	m	class:b2PulleyJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RevoluteJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	int32 m_indexA;$/;"	m	class:b2RopeJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WeldJoint	access:protected
m_indexA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	int32 m_indexA;$/;"	m	class:b2WheelJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 m_indexB;$/;"	m	class:b2Contact	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	int32 m_indexB;$/;"	m	class:b2DistanceJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	int32 m_indexB;$/;"	m	class:b2FrictionJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MotorJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	int32 m_indexB;$/;"	m	class:b2MouseJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PrismaticJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	int32 m_indexB;$/;"	m	class:b2PulleyJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RevoluteJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	int32 m_indexB;$/;"	m	class:b2RopeJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WeldJoint	access:protected
m_indexB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	int32 m_indexB;$/;"	m	class:b2WheelJoint	access:protected
m_indexC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
m_indexD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint	access:protected
m_insertionCount	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_insertionCount;$/;"	m	class:b2DynamicTree	access:private
m_invI	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_I, m_invI;$/;"	m	class:b2Body	access:private
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invIA;$/;"	m	class:b2DistanceJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invIA;$/;"	m	class:b2FrictionJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invIA;$/;"	m	class:b2MotorJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PrismaticJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invIA;$/;"	m	class:b2PulleyJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RevoluteJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invIA;$/;"	m	class:b2RopeJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WeldJoint	access:protected
m_invIA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invIA;$/;"	m	class:b2WheelJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invIB;$/;"	m	class:b2DistanceJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invIB;$/;"	m	class:b2FrictionJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MotorJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_invIB;$/;"	m	class:b2MouseJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PrismaticJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invIB;$/;"	m	class:b2PulleyJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RevoluteJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invIB;$/;"	m	class:b2RopeJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WeldJoint	access:protected
m_invIB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invIB;$/;"	m	class:b2WheelJoint	access:protected
m_invMass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body	access:private
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2DistanceJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2FrictionJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2MotorJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PrismaticJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2PulleyJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RevoluteJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2RopeJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WeldJoint	access:protected
m_invMassA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invMassA;$/;"	m	class:b2WheelJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2DistanceJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2FrictionJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MotorJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2MouseJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PrismaticJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2PulleyJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RevoluteJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2RopeJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WeldJoint	access:protected
m_invMassB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_invMassB;$/;"	m	class:b2WheelJoint	access:protected
m_inv_dt0	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	float32 m_inv_dt0;$/;"	m	class:b2World	access:private
m_isSensor	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	bool m_isSensor;$/;"	m	class:b2Fixture	access:protected
m_islandFlag	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	bool m_islandFlag;$/;"	m	class:b2Joint	access:protected
m_islandIndex	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	int32 m_islandIndex;$/;"	m	class:b2Body	access:private
m_joint1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* m_joint1;$/;"	m	class:b2GearJoint	access:protected
m_joint2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Joint* m_joint2;$/;"	m	class:b2GearJoint	access:protected
m_jointCapacity	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_jointCapacity;$/;"	m	class:b2Island	access:public
m_jointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	int32 m_jointCount;$/;"	m	class:b2Island	access:public
m_jointCount	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	int32 m_jointCount;$/;"	m	class:b2World	access:private
m_jointList	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2JointEdge* m_jointList;$/;"	m	class:b2Body	access:private
m_jointList	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Joint* m_jointList;$/;"	m	class:b2World	access:private
m_joints	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Joint** m_joints;$/;"	m	class:b2Island	access:public
m_k2	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 m_k2;$/;"	m	class:b2Rope	access:private
m_k3	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32 m_k3;$/;"	m	class:b2Rope	access:private
m_lcA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
m_lcB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
m_lcC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
m_lcD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint	access:protected
m_length	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_length;$/;"	m	class:b2DistanceJoint	access:protected
m_length	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_length;$/;"	m	class:b2RopeJoint	access:protected
m_lengthA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_lengthA;$/;"	m	class:b2PulleyJoint	access:protected
m_lengthB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_lengthB;$/;"	m	class:b2PulleyJoint	access:protected
m_limitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2PrismaticJoint	access:protected
m_limitState	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2LimitState m_limitState;$/;"	m	class:b2RevoluteJoint	access:protected
m_linearDamping	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_linearDamping;$/;"	m	class:b2Body	access:private
m_linearError	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_linearError;$/;"	m	class:b2MotorJoint	access:protected
m_linearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2FrictionJoint	access:protected
m_linearImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_linearImpulse;$/;"	m	class:b2MotorJoint	access:protected
m_linearMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2FrictionJoint	access:protected
m_linearMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Mat22 m_linearMass;$/;"	m	class:b2MotorJoint	access:protected
m_linearOffset	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_linearOffset;$/;"	m	class:b2MotorJoint	access:protected
m_linearVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 m_linearVelocity;$/;"	m	class:b2Body	access:private
m_listener	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2ContactListener* m_listener;$/;"	m	class:b2Island	access:public
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2DistanceJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2FrictionJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2GearJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PrismaticJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2PulleyJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RevoluteJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2RopeJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WeldJoint	access:protected
m_localAnchorA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localAnchorA;$/;"	m	class:b2WheelJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2DistanceJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2FrictionJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2GearJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2MouseJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PrismaticJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2PulleyJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RevoluteJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2RopeJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WeldJoint	access:protected
m_localAnchorB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localAnchorB;$/;"	m	class:b2WheelJoint	access:protected
m_localAnchorC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorC;$/;"	m	class:b2GearJoint	access:protected
m_localAnchorD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAnchorD;$/;"	m	class:b2GearJoint	access:protected
m_localAxisC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAxisC;$/;"	m	class:b2GearJoint	access:protected
m_localAxisD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2Vec2 m_localAxisD;$/;"	m	class:b2GearJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2DistanceJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2FrictionJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2MotorJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PrismaticJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2PulleyJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RevoluteJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2RopeJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WeldJoint	access:protected
m_localCenterA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localCenterA;$/;"	m	class:b2WheelJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2DistanceJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2FrictionJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MotorJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2MouseJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PrismaticJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2PulleyJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RevoluteJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2RopeJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WeldJoint	access:protected
m_localCenterB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localCenterB;$/;"	m	class:b2WheelJoint	access:protected
m_localPoint	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Vec2 m_localPoint;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_localXAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2PrismaticJoint	access:protected
m_localXAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localXAxisA;$/;"	m	class:b2WheelJoint	access:protected
m_localYAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2PrismaticJoint	access:protected
m_localYAxisA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	b2Vec2 m_localYAxisA;$/;"	m	class:b2WheelJoint	access:protected
m_lowerAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_lowerAngle;$/;"	m	class:b2RevoluteJoint	access:protected
m_lowerLimit	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:	access:public
m_lowerTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_lowerTranslation;$/;"	m	class:b2PrismaticJoint	access:protected
m_mA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
m_mB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
m_mC	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
m_mD	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint	access:protected
m_manifold	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Manifold m_manifold;$/;"	m	class:b2Contact	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	float32 m_mass;$/;"	m	class:b2DistanceJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_mass;$/;"	m	class:b2GearJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Mat22 m_mass;$/;"	m	class:b2MouseJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_mass;$/;"	m	class:b2PulleyJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Mat33 m_mass;			\/\/ effective mass for point-to-point constraint.$/;"	m	class:b2RevoluteJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_mass;$/;"	m	class:b2RopeJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Mat33 m_mass;$/;"	m	class:b2WeldJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_mass;$/;"	m	class:b2WheelJoint	access:protected
m_mass	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_mass, m_invMass;$/;"	m	class:b2Body	access:private
m_maxAllocation	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 m_maxAllocation;$/;"	m	class:b2StackAllocator	access:private
m_maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2FrictionJoint	access:protected
m_maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MotorJoint	access:protected
m_maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 m_maxForce;$/;"	m	class:b2MouseJoint	access:protected
m_maxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 m_maxLength;$/;"	m	class:b2RopeJoint	access:protected
m_maxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_maxMotorForce;$/;"	m	class:b2PrismaticJoint	access:protected
m_maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2RevoluteJoint	access:protected
m_maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_maxMotorTorque;$/;"	m	class:b2WheelJoint	access:protected
m_maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2FrictionJoint	access:protected
m_maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 m_maxTorque;$/;"	m	class:b2MotorJoint	access:protected
m_motorImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2PrismaticJoint	access:protected
m_motorImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2RevoluteJoint	access:protected
m_motorImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_motorImpulse;$/;"	m	class:b2WheelJoint	access:protected
m_motorMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2PrismaticJoint	access:protected
m_motorMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_motorMass;	\/\/ effective mass for motor\/limit angular constraint.$/;"	m	class:b2RevoluteJoint	access:protected
m_motorMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_motorMass;$/;"	m	class:b2WheelJoint	access:protected
m_motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2PrismaticJoint	access:protected
m_motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2RevoluteJoint	access:protected
m_motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_motorSpeed;$/;"	m	class:b2WheelJoint	access:protected
m_moveBuffer	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32* m_moveBuffer;$/;"	m	class:b2BroadPhase	access:private
m_moveCapacity	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_moveCapacity;$/;"	m	class:b2BroadPhase	access:private
m_moveCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_moveCount;$/;"	m	class:b2BroadPhase	access:private
m_next	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* m_next;$/;"	m	class:b2Contact	access:protected
m_next	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* m_next;$/;"	m	class:b2Joint	access:protected
m_next	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body* m_next;$/;"	m	class:b2Body	access:private
m_next	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Fixture* m_next;$/;"	m	class:b2Fixture	access:protected
m_nextVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape	access:public
m_nodeA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge m_nodeA;$/;"	m	class:b2Contact	access:protected
m_nodeB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge m_nodeB;$/;"	m	class:b2Contact	access:protected
m_nodeCapacity	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_nodeCapacity;$/;"	m	class:b2DynamicTree	access:private
m_nodeCount	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_nodeCount;$/;"	m	class:b2DynamicTree	access:private
m_nodes	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	b2TreeNode* m_nodes;$/;"	m	class:b2DynamicTree	access:private
m_normal	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal;$/;"	m	struct:b2EPCollider	file:	access:public
m_normal0	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:	access:public
m_normal1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:	access:public
m_normal2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:	access:public
m_normals	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Vec2 m_normals[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape	access:public
m_p	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2CircleShape.h	/^	b2Vec2 m_p;$/;"	m	class:b2CircleShape	access:public
m_p0s	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* m_p0s;$/;"	m	class:b2Rope	access:private
m_pairBuffer	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	b2Pair* m_pairBuffer;$/;"	m	class:b2BroadPhase	access:private
m_pairCapacity	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_pairCapacity;$/;"	m	class:b2BroadPhase	access:private
m_pairCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_pairCount;$/;"	m	class:b2BroadPhase	access:private
m_path	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	uint32 m_path;$/;"	m	class:b2DynamicTree	access:private
m_perp	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint	access:protected
m_polygonB	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2TempPolygon m_polygonB;$/;"	m	struct:b2EPCollider	file:	access:public
m_positionConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver	access:public
m_positions	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Position* m_positions;$/;"	m	class:b2ContactSolver	access:public
m_positions	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Position* m_positions;$/;"	m	class:b2Island	access:public
m_prev	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Contact* m_prev;$/;"	m	class:b2Contact	access:protected
m_prev	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Joint* m_prev;$/;"	m	class:b2Joint	access:protected
m_prev	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Body* m_prev;$/;"	m	class:b2Body	access:private
m_prevVertex	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape	access:public
m_profile	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2Profile m_profile;$/;"	m	class:b2World	access:private
m_proxies	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2FixtureProxy* m_proxies;$/;"	m	class:b2Fixture	access:protected
m_proxyA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyA;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_proxyB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	const b2DistanceProxy* m_proxyB;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_proxyCount	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_proxyCount;$/;"	m	class:b2BroadPhase	access:private
m_proxyCount	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int32 m_proxyCount;$/;"	m	class:b2Fixture	access:protected
m_ps	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* m_ps;$/;"	m	class:b2Rope	access:private
m_queryProxyId	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 m_queryProxyId;$/;"	m	class:b2BroadPhase	access:private
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2DistanceJoint	access:protected
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2FrictionJoint	access:protected
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2MotorJoint	access:protected
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2PulleyJoint	access:protected
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RevoluteJoint	access:protected
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2RopeJoint	access:protected
m_rA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_rA;$/;"	m	class:b2WeldJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2DistanceJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2FrictionJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MotorJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2MouseJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2PulleyJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RevoluteJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2RopeJoint	access:protected
m_rB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	b2Vec2 m_rB;$/;"	m	class:b2WeldJoint	access:protected
m_radius	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	float32 m_radius;$/;"	m	class:b2Shape	access:public
m_radius	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 m_radius;$/;"	m	struct:b2EPCollider	file:	access:public
m_radius	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	float32 m_radius;$/;"	m	struct:b2DistanceProxy	access:public
m_ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_ratio;$/;"	m	class:b2GearJoint	access:protected
m_ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 m_ratio;$/;"	m	class:b2PulleyJoint	access:protected
m_referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2PrismaticJoint	access:protected
m_referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2RevoluteJoint	access:protected
m_referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 m_referenceAngle;$/;"	m	class:b2WeldJoint	access:protected
m_referenceAngleA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_referenceAngleA;$/;"	m	class:b2GearJoint	access:protected
m_referenceAngleB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 m_referenceAngleB;$/;"	m	class:b2GearJoint	access:protected
m_restitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_restitution;$/;"	m	class:b2Contact	access:protected
m_restitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 m_restitution;$/;"	m	class:b2Fixture	access:protected
m_root	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	int32 m_root;$/;"	m	class:b2DynamicTree	access:private
m_s1	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint	access:protected
m_s2	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint	access:protected
m_sAx	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint	access:protected
m_sAy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint	access:protected
m_sBx	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint	access:protected
m_sBy	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint	access:protected
m_shape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	b2Shape* m_shape;$/;"	m	class:b2Fixture	access:protected
m_sleepTime	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_sleepTime;$/;"	m	class:b2Body	access:private
m_springImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_springImpulse;$/;"	m	class:b2WheelJoint	access:protected
m_springMass	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 m_springMass;$/;"	m	class:b2WheelJoint	access:protected
m_stack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	T* m_stack;$/;"	m	class:b2GrowableStack	access:private
m_stackAllocator	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	b2StackAllocator m_stackAllocator;$/;"	m	class:b2World	access:private
m_start	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	float64 m_start;$/;"	m	class:b2Timer	access:private
m_start_sec	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	unsigned long m_start_sec;$/;"	m	class:b2Timer	access:private
m_start_usec	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	unsigned long m_start_usec;$/;"	m	class:b2Timer	access:private
m_state	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2LimitState m_state;$/;"	m	class:b2RopeJoint	access:protected
m_step	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2TimeStep m_step;$/;"	m	class:b2ContactSolver	access:public
m_stepComplete	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_stepComplete;$/;"	m	class:b2World	access:private
m_subStepping	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_subStepping;$/;"	m	class:b2World	access:private
m_sweep	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Sweep m_sweep;		\/\/ the swept motion for CCD$/;"	m	class:b2Body	access:private
m_sweepA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_sweepB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_tangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_tangentSpeed;$/;"	m	class:b2Contact	access:protected
m_targetA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 m_targetA;$/;"	m	class:b2MouseJoint	access:protected
m_toi	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	float32 m_toi;$/;"	m	class:b2Contact	access:protected
m_toiCount	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	int32 m_toiCount;$/;"	m	class:b2Contact	access:protected
m_torque	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	float32 m_torque;$/;"	m	class:b2Body	access:private
m_tree	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	b2DynamicTree m_tree;$/;"	m	class:b2BroadPhase	access:private
m_type	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	Type m_type;$/;"	m	class:b2Shape	access:public
m_type	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.cpp	/^	Type m_type;$/;"	m	struct:b2SeparationFunction	file:	access:public
m_type	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointType m_type;$/;"	m	class:b2Joint	access:protected
m_type	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyType m_type;$/;"	m	class:b2Body	access:private
m_type1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:	access:public
m_type2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:	access:public
m_typeA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2JointType m_typeA;$/;"	m	class:b2GearJoint	access:protected
m_typeB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	b2JointType m_typeB;$/;"	m	class:b2GearJoint	access:protected
m_u	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2DistanceJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2DistanceJoint	access:protected
m_u	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	b2Vec2 m_u;$/;"	m	class:b2RopeJoint	access:protected
m_uA	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_uA;$/;"	m	class:b2PulleyJoint	access:protected
m_uB	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	b2Vec2 m_uB;$/;"	m	class:b2PulleyJoint	access:protected
m_upperAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 m_upperAngle;$/;"	m	class:b2RevoluteJoint	access:protected
m_upperLimit	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:	access:public
m_upperTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 m_upperTranslation;$/;"	m	class:b2PrismaticJoint	access:protected
m_userData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void* m_userData;$/;"	m	class:b2Joint	access:protected
m_userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void* m_userData;$/;"	m	class:b2Body	access:private
m_userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void* m_userData;$/;"	m	class:b2Fixture	access:protected
m_v0	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
m_v1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
m_v1	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:	access:public
m_v2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
m_v2	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:	access:public
m_v3	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:	access:public
m_v3	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:	access:public
m_velocities	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver	access:public
m_velocities	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2Island	access:public
m_velocityConstraints	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver	access:public
m_vertex0	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape	access:public
m_vertex1	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape	access:public
m_vertex2	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape	access:public
m_vertex3	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2EdgeShape.h	/^	b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape	access:public
m_vertices	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	b2Vec2* m_vertices;$/;"	m	class:b2ChainShape	access:public
m_vertices	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2PolygonShape.h	/^	b2Vec2 m_vertices[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape	access:public
m_vertices	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	const b2Vec2* m_vertices;$/;"	m	struct:b2DistanceProxy	access:public
m_vs	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* m_vs;$/;"	m	class:b2Rope	access:private
m_warmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	bool m_warmStarting;$/;"	m	class:b2World	access:private
m_world	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2World* m_world;$/;"	m	class:b2Body	access:private
m_xf	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Transform m_xf;$/;"	m	struct:b2EPCollider	file:	access:public
m_xf	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Transform m_xf;		\/\/ the body origin transform$/;"	m	class:b2Body	access:private
major	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^	int32 major;		\/\/\/< significant changes$/;"	m	struct:b2Version	access:public
maskBits	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	uint16 maskBits;$/;"	m	struct:b2Filter	access:public
mass	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	float32 mass;$/;"	m	struct:b2MassData	access:public
masses	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	float32* masses;$/;"	m	struct:b2RopeDef	access:public
maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 maxForce;$/;"	m	struct:b2FrictionJointDef	access:public
maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MotorJointDef	access:public
maxForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	float32 maxForce;$/;"	m	struct:b2MouseJointDef	access:public
maxFraction	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 maxFraction;$/;"	m	struct:b2RayCastInput	access:public
maxLength	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RopeJoint.h	/^	float32 maxLength;$/;"	m	struct:b2RopeJointDef	access:public
maxMotorForce	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 maxMotorForce;$/;"	m	struct:b2PrismaticJointDef	access:public
maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2RevoluteJointDef	access:public
maxMotorTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 maxMotorTorque;$/;"	m	struct:b2WheelJointDef	access:public
maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2FrictionJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2FrictionJointDef	access:public
maxTorque	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MotorJoint.h	/^	float32 maxTorque;$/;"	m	struct:b2MotorJointDef	access:public
metric	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	float32 metric;		\/\/\/< length or area$/;"	m	struct:b2SimplexCache	access:public
minor	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^	int32 minor;		\/\/\/< incremental changes$/;"	m	struct:b2Version	access:public
motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2PrismaticJointDef	access:public
motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2RevoluteJointDef	access:public
motorSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WheelJoint.h	/^	float32 motorSpeed;$/;"	m	struct:b2WheelJointDef	access:public
next	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^		int32 next;$/;"	m	union:b2TreeNode::__anon2	access:public
next	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^	b2Block* next;$/;"	m	struct:b2Block	file:	access:public
next	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge* next;	\/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge	access:public
next	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge* next;		\/\/\/< the next joint edge in the body's joint list$/;"	m	struct:b2JointEdge	access:public
normal	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2ReferenceFace	file:	access:public
normal	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 normal;								\/\/\/< world vector pointing from A to B$/;"	m	struct:b2WorldManifold	access:public
normal	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 normal;$/;"	m	struct:b2RayCastOutput	access:public
normal	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 normal;$/;"	m	struct:b2PositionSolverManifold	file:	access:public
normal	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint	access:public
normalImpulse	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 normalImpulse;	\/\/\/< the non-penetration impulse$/;"	m	struct:b2ManifoldPoint	access:public
normalImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint	access:public
normalImpulses	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	float32 normalImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse	access:public
normalMass	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint	access:public
normalMass	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint	access:public
normals	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 normals[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:	access:public
operator ()	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 operator () (int32 i) const$/;"	f	struct:b2Vec2	access:public	signature:(int32 i) const
operator ()	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32& operator () (int32 i)$/;"	f	struct:b2Vec2	access:public	signature:(int32 i)
operator *	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 operator * (float32 s, const b2Vec2& a)$/;"	f	signature:(float32 s, const b2Vec2& a)
operator *	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec3 operator * (float32 s, const b2Vec3& a)$/;"	f	signature:(float32 s, const b2Vec3& a)
operator *=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator *= (float32 a)$/;"	f	struct:b2Vec2	access:public	signature:(float32 a)
operator *=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator *= (float32 s)$/;"	f	struct:b2Vec3	access:public	signature:(float32 s)
operator +	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)$/;"	f	signature:(const b2Mat22& A, const b2Mat22& B)
operator +	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
operator +	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)$/;"	f	signature:(const b2Vec3& a, const b2Vec3& b)
operator +=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator += (const b2Vec2& v)$/;"	f	struct:b2Vec2	access:public	signature:(const b2Vec2& v)
operator +=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator += (const b2Vec3& v)$/;"	f	struct:b2Vec3	access:public	signature:(const b2Vec3& v)
operator -	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }$/;"	f	struct:b2Vec2	access:public	signature:() const
operator -	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }$/;"	f	struct:b2Vec3	access:public	signature:() const
operator -	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
operator -	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)$/;"	f	signature:(const b2Vec3& a, const b2Vec3& b)
operator -=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator -= (const b2Vec2& v)$/;"	f	struct:b2Vec2	access:public	signature:(const b2Vec2& v)
operator -=	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	void operator -= (const b2Vec3& v)$/;"	f	struct:b2Vec3	access:public	signature:(const b2Vec3& v)
operator ==	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^inline bool operator == (const b2Vec2& a, const b2Vec2& b)$/;"	f	signature:(const b2Vec2& a, const b2Vec2& b)
other	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge	access:public
other	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2JointEdge	access:public
p	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Vec2 p;$/;"	m	struct:b2Transform	access:public
p1	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput	access:public
p2	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput	access:public
parent	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^		int32 parent;$/;"	m	union:b2TreeNode::__anon2	access:public
point	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Vec2 point;$/;"	m	struct:b2PositionSolverManifold	file:	access:public
pointA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Vec2 pointA;		\/\/\/< closest point on shapeA$/;"	m	struct:b2DistanceOutput	access:public
pointB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Vec2 pointB;		\/\/\/< closest point on shapeB$/;"	m	struct:b2DistanceOutput	access:public
pointCount	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	int32 pointCount;								\/\/\/< the number of manifold points$/;"	m	struct:b2Manifold	access:public
pointCount	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	int32 pointCount;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
pointCount	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint	access:public
points	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2ManifoldPoint points[b2_maxManifoldPoints];	\/\/\/< the points of contact$/;"	m	struct:b2Manifold	access:public
points	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 points[b2_maxManifoldPoints];		\/\/\/< world contact point (point of intersection)$/;"	m	struct:b2WorldManifold	access:public
points	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint	access:public
position	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2Vec2 position;$/;"	m	struct:b2BodyDef	access:public
positionIterations	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	int32 positionIterations;$/;"	m	struct:b2TimeStep	access:public
positions	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Position* positions;$/;"	m	struct:b2ContactSolverDef	access:public
positions	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Position* positions;$/;"	m	struct:b2SolverData	access:public
prev	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	b2ContactEdge* prev;	\/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge	access:public
prev	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointEdge* prev;		\/\/\/< the previous joint edge in the body's joint list$/;"	m	struct:b2JointEdge	access:public
primary	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	bool primary;$/;"	m	struct:b2ContactRegister	access:public
proxyA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2DistanceInput	access:public
proxyA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2DistanceProxy proxyA;$/;"	m	struct:b2TOIInput	access:public
proxyB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2DistanceInput	access:public
proxyB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2DistanceProxy proxyB;$/;"	m	struct:b2TOIInput	access:public
proxyId	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	int32 proxyId;$/;"	m	struct:b2FixtureProxy	access:public
proxyIdA	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 proxyIdA;$/;"	m	struct:b2Pair	access:public
proxyIdB	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	int32 proxyIdB;$/;"	m	struct:b2Pair	access:public
q	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	b2Rot q;$/;"	m	struct:b2Transform	access:public
r	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	float32 r, g, b, a;$/;"	m	struct:b2Color	access:public
rA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint	access:public
rB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint	access:public
radiusA	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
radiusB	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2GearJoint.h	/^	float32 ratio;$/;"	m	struct:b2GearJointDef	access:public
ratio	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PulleyJoint.h	/^	float32 ratio;$/;"	m	struct:b2PulleyJointDef	access:public
referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2PrismaticJointDef	access:public
referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2RevoluteJointDef	access:public
referenceAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2WeldJoint.h	/^	float32 referenceAngle;$/;"	m	struct:b2WeldJointDef	access:public
restitution	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint	access:public
restitution	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	float32 restitution;$/;"	m	struct:b2FixtureDef	access:public
revision	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^	int32 revision;		\/\/\/< bug fixes$/;"	m	struct:b2Version	access:public
s	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 s, c;$/;"	m	struct:b2Rot	access:public
s_blockSizeLookup	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookup	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	access:private
s_blockSizeLookupInitialized	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^bool b2BlockAllocator::s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookupInitialized	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	static bool s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	access:private
s_blockSizes	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^int32 b2BlockAllocator::s_blockSizes[b2_blockSizes] = $/;"	m	class:b2BlockAllocator	file:
s_blockSizes	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	static int32 s_blockSizes[b2_blockSizes];$/;"	m	class:b2BlockAllocator	access:private
s_initialized	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^bool b2Contact::s_initialized = false;$/;"	m	class:b2Contact	file:
s_initialized	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static bool s_initialized;$/;"	m	class:b2Contact	access:protected
s_invFrequency	C:\Box2D\Box2D\Box2D\Common\b2Timer.cpp	/^float64 b2Timer::s_invFrequency = 0.0f;$/;"	m	class:b2Timer	file:
s_invFrequency	C:\Box2D\Box2D\Box2D\Common\b2Timer.h	/^	static float64 s_invFrequency;$/;"	m	class:b2Timer	access:private
s_registers	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.cpp	/^b2ContactRegister b2Contact::s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	file:
s_registers	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	access:protected
separation	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 separation;$/;"	m	struct:b2EPAxis	file:	access:public
separation	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	float32 separation;$/;"	m	struct:b2PositionSolverManifold	file:	access:public
separations	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 separations[b2_maxManifoldPoints];	\/\/\/< a negative value indicates overlap, in meters$/;"	m	struct:b2WorldManifold	access:public
shape	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	const b2Shape* shape;$/;"	m	struct:b2FixtureDef	access:public
sideNormal1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 sideNormal1;$/;"	m	struct:b2ReferenceFace	file:	access:public
sideNormal2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 sideNormal2;$/;"	m	struct:b2ReferenceFace	file:	access:public
sideOffset1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 sideOffset1;$/;"	m	struct:b2ReferenceFace	file:	access:public
sideOffset2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	float32 sideOffset2;$/;"	m	struct:b2ReferenceFace	file:	access:public
size	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	int32 size;$/;"	m	struct:b2StackEntry	access:public
solve	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solve;$/;"	m	struct:b2Profile	access:public
solveInit	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solveInit;$/;"	m	struct:b2Profile	access:public
solvePosition	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solvePosition;$/;"	m	struct:b2Profile	access:public
solveTOI	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solveTOI;$/;"	m	struct:b2Profile	access:public
solveVelocity	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 solveVelocity;$/;"	m	struct:b2Profile	access:public
state	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	State state;$/;"	m	struct:b2TOIOutput	access:public
step	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2TimeStep step;$/;"	m	struct:b2ContactSolverDef	access:public
step	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2TimeStep step;$/;"	m	struct:b2SolverData	access:public
step	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 step;$/;"	m	struct:b2Profile	access:public
sweepA	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2Sweep sweepA;$/;"	m	struct:b2TOIInput	access:public
sweepB	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	b2Sweep sweepB;$/;"	m	struct:b2TOIInput	access:public
t	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	float32 t;$/;"	m	struct:b2TOIOutput	access:public
tMax	C:\Box2D\Box2D\Box2D\Collision\b2TimeOfImpact.h	/^	float32 tMax;		\/\/ defines sweep interval [0, tMax]$/;"	m	struct:b2TOIInput	access:public
tangentImpulse	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	float32 tangentImpulse;	\/\/\/< the friction impulse$/;"	m	struct:b2ManifoldPoint	access:public
tangentImpulse	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint	access:public
tangentImpulses	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	float32 tangentImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse	access:public
tangentMass	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint	access:public
tangentSpeed	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 tangentSpeed;$/;"	m	struct:b2ContactVelocityConstraint	access:public
target	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2MouseJoint.h	/^	b2Vec2 target;$/;"	m	struct:b2MouseJointDef	access:public
transformA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Transform transformA;$/;"	m	struct:b2DistanceInput	access:public
transformB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	b2Transform transformB;$/;"	m	struct:b2DistanceInput	access:public
type	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	Type type;$/;"	m	struct:b2EPAxis	file:	access:public
type	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	Type type;$/;"	m	struct:b2Manifold	access:public
type	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^	b2Manifold::Type type;$/;"	m	struct:b2ContactPositionConstraint	file:	access:public
type	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	b2JointType type;$/;"	m	struct:b2JointDef	access:public
type	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	b2BodyType type;$/;"	m	struct:b2BodyDef	access:public
typeA	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 typeA;		\/\/\/< The feature type on shapeA$/;"	m	struct:b2ContactFeature	access:public
typeB	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	uint8 typeB;		\/\/\/< The feature type on shapeB$/;"	m	struct:b2ContactFeature	access:public
uint16	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef unsigned short uint16;$/;"	t
uint32	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef unsigned int uint32;$/;"	t
uint8	C:\Box2D\Box2D\Box2D\Common\b2Settings.h	/^typedef unsigned char uint8;$/;"	t
upperAngle	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2RevoluteJoint.h	/^	float32 upperAngle;$/;"	m	struct:b2RevoluteJointDef	access:public
upperBound	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 upperBound;	\/\/\/< the upper vertex$/;"	m	struct:b2AABB	access:public
upperTranslation	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2PrismaticJoint.h	/^	float32 upperTranslation;$/;"	m	struct:b2PrismaticJointDef	access:public
useRadii	C:\Box2D\Box2D\Box2D\Collision\b2Distance.h	/^	bool useRadii;$/;"	m	struct:b2DistanceInput	access:public
usedMalloc	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	bool usedMalloc;$/;"	m	struct:b2StackEntry	access:public
userData	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	void* userData;$/;"	m	struct:b2TreeNode	access:public
userData	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	void* userData;$/;"	m	struct:b2JointDef	access:public
userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	void* userData;$/;"	m	struct:b2BodyDef	access:public
userData	C:\Box2D\Box2D\Box2D\Dynamics\b2Fixture.h	/^	void* userData;$/;"	m	struct:b2FixtureDef	access:public
v	C:\Box2D\Box2D\Box2D\Collision\b2Collision.h	/^	b2Vec2 v;$/;"	m	struct:b2ClipVertex	access:public
v	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Vec2 v;$/;"	m	struct:b2Velocity	access:public
v1	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:	access:public
v2	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:	access:public
velocities	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef	access:public
velocities	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	b2Velocity* velocities;$/;"	m	struct:b2SolverData	access:public
velocityBias	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint	access:public
velocityIterations	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	int32 velocityIterations;$/;"	m	struct:b2TimeStep	access:public
vertices	C:\Box2D\Box2D\Box2D\Collision\b2CollideEdge.cpp	/^	b2Vec2 vertices[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:	access:public
vertices	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	b2Vec2* vertices;$/;"	m	struct:b2RopeDef	access:public
w	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 w;		\/\/ wB - wA$/;"	m	struct:b2SimplexVertex	file:	access:public
w	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	float32 w;$/;"	m	struct:b2Velocity	access:public
wA	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 wA;		\/\/ support point in proxyA$/;"	m	struct:b2SimplexVertex	file:	access:public
wB	C:\Box2D\Box2D\Box2D\Collision\b2Distance.cpp	/^	b2Vec2 wB;		\/\/ support point in proxyB$/;"	m	struct:b2SimplexVertex	file:	access:public
warmStarting	C:\Box2D\Box2D\Box2D\Dynamics\b2TimeStep.h	/^	bool warmStarting;$/;"	m	struct:b2TimeStep	access:public
x	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3	access:public
x	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2	access:public
y	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3	access:public
y	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y;$/;"	m	struct:b2Vec2	access:public
z	C:\Box2D\Box2D\Box2D\Common\b2Math.h	/^	float32 x, y, z;$/;"	m	struct:b2Vec3	access:public
~b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.cpp	/^b2BlockAllocator::~b2BlockAllocator()$/;"	f	class:b2BlockAllocator	signature:()
~b2BlockAllocator	C:\Box2D\Box2D\Box2D\Common\b2BlockAllocator.h	/^	~b2BlockAllocator();$/;"	p	class:b2BlockAllocator	access:public	signature:()
~b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.cpp	/^b2Body::~b2Body()$/;"	f	class:b2Body	signature:()
~b2Body	C:\Box2D\Box2D\Box2D\Dynamics\b2Body.h	/^	~b2Body();$/;"	p	class:b2Body	access:private	signature:()
~b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.cpp	/^b2BroadPhase::~b2BroadPhase()$/;"	f	class:b2BroadPhase	signature:()
~b2BroadPhase	C:\Box2D\Box2D\Box2D\Collision\b2BroadPhase.h	/^	~b2BroadPhase();$/;"	p	class:b2BroadPhase	access:public	signature:()
~b2ChainAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndCircleContact.h	/^	~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact	access:public	signature:()
~b2ChainAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ChainAndPolygonContact.h	/^	~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact	access:public	signature:()
~b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.cpp	/^b2ChainShape::~b2ChainShape()$/;"	f	class:b2ChainShape	signature:()
~b2ChainShape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2ChainShape.h	/^	~b2ChainShape();$/;"	p	class:b2ChainShape	access:public	signature:()
~b2CircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2CircleContact.h	/^	~b2CircleContact() {}$/;"	f	class:b2CircleContact	access:public	signature:()
~b2Contact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2Contact.h	/^	virtual ~b2Contact() {}$/;"	f	class:b2Contact	access:protected	signature:()
~b2ContactFilter	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2ContactFilter() {}$/;"	f	class:b2ContactFilter	access:public	signature:()
~b2ContactListener	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2ContactListener() {}$/;"	f	class:b2ContactListener	access:public	signature:()
~b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.cpp	/^b2ContactSolver::~b2ContactSolver()$/;"	f	class:b2ContactSolver	signature:()
~b2ContactSolver	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2ContactSolver.h	/^	~b2ContactSolver();$/;"	p	class:b2ContactSolver	access:public	signature:()
~b2DestructionListener	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2DestructionListener() {}$/;"	f	class:b2DestructionListener	access:public	signature:()
~b2Draw	C:\Box2D\Box2D\Box2D\Common\b2Draw.h	/^	virtual ~b2Draw() {}$/;"	f	class:b2Draw	access:public	signature:()
~b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.cpp	/^b2DynamicTree::~b2DynamicTree()$/;"	f	class:b2DynamicTree	signature:()
~b2DynamicTree	C:\Box2D\Box2D\Box2D\Collision\b2DynamicTree.h	/^	~b2DynamicTree();$/;"	p	class:b2DynamicTree	access:public	signature:()
~b2EdgeAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndCircleContact.h	/^	~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact	access:public	signature:()
~b2EdgeAndPolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2EdgeAndPolygonContact.h	/^	~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact	access:public	signature:()
~b2GrowableStack	C:\Box2D\Box2D\Box2D\Common\b2GrowableStack.h	/^	~b2GrowableStack()$/;"	f	class:b2GrowableStack	access:public	signature:()
~b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.cpp	/^b2Island::~b2Island()$/;"	f	class:b2Island	signature:()
~b2Island	C:\Box2D\Box2D\Box2D\Dynamics\b2Island.h	/^	~b2Island();$/;"	p	class:b2Island	access:public	signature:()
~b2Joint	C:\Box2D\Box2D\Box2D\Dynamics\Joints\b2Joint.h	/^	virtual ~b2Joint() {}$/;"	f	class:b2Joint	access:protected	signature:()
~b2PolygonAndCircleContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonAndCircleContact.h	/^	~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact	access:public	signature:()
~b2PolygonContact	C:\Box2D\Box2D\Box2D\Dynamics\Contacts\b2PolygonContact.h	/^	~b2PolygonContact() {}$/;"	f	class:b2PolygonContact	access:public	signature:()
~b2QueryCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2QueryCallback() {}$/;"	f	class:b2QueryCallback	access:public	signature:()
~b2RayCastCallback	C:\Box2D\Box2D\Box2D\Dynamics\b2WorldCallbacks.h	/^	virtual ~b2RayCastCallback() {}$/;"	f	class:b2RayCastCallback	access:public	signature:()
~b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.cpp	/^b2Rope::~b2Rope()$/;"	f	class:b2Rope	signature:()
~b2Rope	C:\Box2D\Box2D\Box2D\Rope\b2Rope.h	/^	~b2Rope();$/;"	p	class:b2Rope	access:public	signature:()
~b2Shape	C:\Box2D\Box2D\Box2D\Collision\Shapes\b2Shape.h	/^	virtual ~b2Shape() {}$/;"	f	class:b2Shape	access:public	signature:()
~b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.cpp	/^b2StackAllocator::~b2StackAllocator()$/;"	f	class:b2StackAllocator	signature:()
~b2StackAllocator	C:\Box2D\Box2D\Box2D\Common\b2StackAllocator.h	/^	~b2StackAllocator();$/;"	p	class:b2StackAllocator	access:public	signature:()
~b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.cpp	/^b2World::~b2World()$/;"	f	class:b2World	signature:()
~b2World	C:\Box2D\Box2D\Box2D\Dynamics\b2World.h	/^	~b2World();$/;"	p	class:b2World	access:public	signature:()
