!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::index tri_stripper::triangle::A() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle
A	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::index tri_stripper::triangle_edge::A() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_edge
ABC	.\DSF\tri_stripper_101\tri_stripper.h	/^		enum start_order { ABC = 0, BCA = 1, CAB = 2 };$/;"	e	enum:triangle_stripper::tri_stripper::triangle_strip::start_order
ABORT_ON_ASSERT_FAILURE	.\Utils\MemUtils.cpp	89;"	d	file:
AC3DPLUGIN_EXTRAVER	.\XPTools\version.h	23;"	d
AC3DPLUGIN_VER	.\XPTools\version.h	22;"	d
AC3DPluginAbout	.\AC3DPlugins\xp_plugin.cpp	/^AC3D_PLUGIN_FUNC char *AC3DPluginAbout()$/;"	f
AC3DPluginExit	.\AC3DPlugins\xp_plugin.cpp	/^AC3D_PLUGIN_FUNC int AC3DPluginExit()$/;"	f
AC3DPluginInit	.\AC3DPlugins\xp_plugin.cpp	/^AC3D_PLUGIN_FUNC int AC3DPluginInit(AC3DPluginInitData *d)$/;"	f
AC3D_AcceptNetworkDef	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f
AC3D_AcceptObjectDef	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f
AC3D_AcceptPolygonDef	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f
AC3D_AcceptProperty	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f
AC3D_AcceptTerrainDef	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f
AC3D_AddObject	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AddObject($/;"	f
AC3D_AddPatchVertex	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AddPatchVertex($/;"	f
AC3D_AddPolygonPoint	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AddPolygonPoint($/;"	f
AC3D_AddSegmentShapePoint	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_AddSegmentShapePoint($/;"	f
AC3D_BeginPatch	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_BeginPatch($/;"	f
AC3D_BeginPolygon	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_BeginPolygon($/;"	f
AC3D_BeginPolygonWinding	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_BeginPolygonWinding($/;"	f
AC3D_BeginPrimitive	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_BeginPrimitive($/;"	f
AC3D_BeginSegment	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_BeginSegment($/;"	f
AC3D_EndPatch	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_EndPatch($/;"	f
AC3D_EndPolygon	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_EndPolygon($/;"	f
AC3D_EndPolygonWinding	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_EndPolygonWinding($/;"	f
AC3D_EndPrimitive	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_EndPrimitive($/;"	f
AC3D_EndSegment	.\AC3DPlugins\dsf_export.cpp	/^void AC3D_EndSegment($/;"	f
AC3D_NextPass	.\AC3DPlugins\dsf_export.cpp	/^bool AC3D_NextPass(int finished_pass_index, void * inRef)$/;"	f
ACCUM_LABEL	.\RenderFarmUI\RF_DrawMap.cpp	647;"	d	file:
AC_UTILS_H	.\AC3DPlugins\ac_utils.h	25;"	d
ADD_NODATA	.\XESCore\DEMDefs.h	/^inline float ADD_NODATA(float a, float b)$/;"	f
ADD_PT_PAIR	.\RawImport\ShapeIO.cpp	50;"	d	file:
ADVANCE_RATIO	.\XESCore\TensorRoads.cpp	41;"	d	file:
AIRPORTS_GET_SIZE_GUESS	.\WEDImportExport\WED_GatewayImport.cpp	80;"	d	file:
AIRPORTS_H	.\XESCore\Airports.h	25;"	d
AIRPORT_BEZIER_TESS	.\XESCore\Airports.cpp	62;"	d	file:
AIRPORT_INNER_FILLGAPS	.\XESCore\Airports.cpp	69;"	d	file:
AIRPORT_INNER_FILL_AREA	.\XESCore\Airports.cpp	71;"	d	file:
AIRPORT_INNER_SIMPLIFY	.\XESCore\Airports.cpp	67;"	d	file:
AIRPORT_OUTER_FILLGAPS	.\XESCore\Airports.cpp	68;"	d	file:
AIRPORT_OUTER_FILL_AREA	.\XESCore\Airports.cpp	70;"	d	file:
AIRPORT_OUTER_SIMPLIFY	.\XESCore\Airports.cpp	66;"	d	file:
AIRPORT_ROUTING	.\Obj\XDefs.h	64;"	d
ALIGN_CENTER	.\UI\FontMgr.h	/^	ALIGN_CENTER,$/;"	e	enum:__anon84
ALIGN_LEFT	.\UI\FontMgr.h	/^	ALIGN_LEFT = 0,$/;"	e	enum:__anon84
ALIGN_RIGHT	.\UI\FontMgr.h	/^	ALIGN_RIGHT$/;"	e	enum:__anon84
ALLOC	.\Utils\unzip.c	48;"	d	file:
ALLOC	.\Utils\zip.c	45;"	d	file:
ANY	.\XESCore\MeshConformer.h	/^    ANY		  \/**< \\c this has been \\e conform-initialized. *\/$/;"	e	enum:CGAL::Triangulation_conformer_any_2::Initialization
APL	.\AC3DPlugins\XPExporterMac_xcode.h	24;"	d
APPLY_SET_ONE_OR_MANY	.\AC3DPlugins\obj_editor.cpp	162;"	d	file:
APTDEFS_H	.\XESCore\AptDefs.h	25;"	d
APTELEV_H	.\RawImport\AptElev.h	24;"	d
APTIO_H	.\XESCore\AptIO.h	25;"	d
APT_INTERVAL	.\XESCore\MeshAlgs.cpp	56;"	d	file:
APT_INTERVAL	.\XESCore\MeshAlgs.cpp	61;"	d	file:
AREGTYPE	.\Utils\MemFileUtils.cpp	132;"	d	file:
ARRAY_COUNT	.\RenderFarmUI\RF_DEMGraphics.cpp	34;"	d	file:
ASSERTUTILS_H	.\Utils\AssertUtils.h	25;"	d
ATC_FLOW_TAG	.\WEDImportExport\WED_GatewayExport.cpp	82;"	d	file:
ATC_Header_Texture_TAG	.\XPTools\DDSTool.cpp	/^typedef struct ATC_Header_Texture_TAG$/;"	s	file:
ATC_INTERP_RGBA	.\XPTools\DDSTool.cpp	/^		ATC_INTERP_RGBA		= 0x12,$/;"	e	enum:__anon141	file:
ATC_RAW_I_8	.\XPTools\DDSTool.cpp	/^		ATC_RAW_I_8$/;"	e	enum:__anon141	file:
ATC_RAW_RGBA_4444	.\XPTools\DDSTool.cpp	/^		ATC_RAW_RGBA_4444	= 0x20,		\/\/ From here down, these are formats that WE made up$/;"	e	enum:__anon141	file:
ATC_RAW_RGBA_8888	.\XPTools\DDSTool.cpp	/^		ATC_RAW_RGBA_8888,				\/\/ They are NOT part of the ATITC spec.$/;"	e	enum:__anon141	file:
ATC_RAW_RGB_565	.\XPTools\DDSTool.cpp	/^		ATC_RAW_RGB_565,$/;"	e	enum:__anon141	file:
ATC_RAW_RGB_888	.\XPTools\DDSTool.cpp	/^		ATC_RAW_RGB_888,$/;"	e	enum:__anon141	file:
ATC_RGB	.\XPTools\DDSTool.cpp	/^		ATC_RGB   			= 0x01,$/;"	e	enum:__anon141	file:
ATC_RGBA	.\XPTools\DDSTool.cpp	/^		ATC_RGBA  			= 0x02,$/;"	e	enum:__anon141	file:
ATC_TAXI_ROUTE_TAG	.\WEDImportExport\WED_GatewayExport.cpp	83;"	d	file:
ATC_TILED	.\XPTools\DDSTool.cpp	/^		ATC_TILED 			= 0x04,$/;"	e	enum:__anon141	file:
ATC_Texture_Header	.\XPTools\DDSTool.cpp	/^} ATC_Texture_Header;$/;"	t	typeref:struct:ATC_Header_Texture_TAG	file:
ATC_VERS	.\XESCore\AptIO.cpp	37;"	d	file:
AUTOSCROLL_DIST	.\GUI\GUI_Table.cpp	35;"	d	file:
AVOID_WIN32_FILEIO	.\XESCore\DEMIO.cpp	36;"	d	file:
AbortCommand	.\WEDCore\WED_Archive.cpp	/^void			WED_Archive::AbortCommand(void)$/;"	f	class:WED_Archive
AbortCommand	.\WEDCore\WED_Persistent.cpp	/^void		WED_Persistent::AbortCommand(void)$/;"	f	class:WED_Persistent
AbortCommand	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::AbortCommand(void)$/;"	f	class:WED_UndoMgr
AbortOperation	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::AbortOperation(void)$/;"	f	class:WED_Thing
AboutBox	.\RenderFarmUI\RF_Application.cpp	/^void	RF_Application::AboutBox(void)$/;"	f	class:RF_Application
AboutBox	.\WEDCore\WED_Application.cpp	/^void	WED_Application::AboutBox(void)$/;"	f	class:WED_Application
Accept	.\Network\PCSBSocket.lin.cpp	/^PCSBSocket * PCSBSocket::Accept()$/;"	f	class:PCSBSocket
Accept	.\Network\PCSBSocket.win.cpp	/^PCSBSocket * PCSBSocket::Accept()$/;"	f	class:PCSBSocket
AcceptContiguous	.\DSF\DSFPointPool.cpp	/^DSFPointPoolLoc	DSF32BitPointPool::AcceptContiguous(const DSFTupleVector& inPoints)$/;"	f	class:DSF32BitPointPool
AcceptContiguous	.\DSF\DSFPointPool.cpp	/^pair<int, int>	DSFSharedPointPool::AcceptContiguous(const DSFTupleVector& inPoints)$/;"	f	class:DSFSharedPointPool
AcceptContiguous	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFPointPoolLoc	DSF32BitPointPool::AcceptContiguous(const DSFTupleVector& inPoints)$/;"	f	class:DSF32BitPointPool
AcceptContiguous	.\DSF\dsflib_013005\DSFPointPool.cpp	/^pair<int, int>	DSFSharedPointPool::AcceptContiguous(const DSFTupleVector& inPoints)$/;"	f	class:DSFSharedPointPool
AcceptContiguousPool	.\DSF\DSFPointPool.cpp	/^pair<int, int>	DSFSharedPointPool::AcceptContiguousPool(int p, SharedSubPool * pool, const DSFTupleVector& inPoints)$/;"	f	class:DSFSharedPointPool
AcceptContiguousPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^pair<int, int>	DSFSharedPointPool::AcceptContiguousPool(int p, const DSFTupleVector& inPoints)$/;"	f	class:DSFSharedPointPool
AcceptCustomTexture	.\Env\Persistence.cpp	/^void	AcceptCustomTexture($/;"	f
AcceptDimensions	.\Env\Persistence.cpp	/^void	AcceptDimensions(int inH, int inV)$/;"	f
AcceptEdit	.\WEDImportExport\WED_AptTable.h	/^	virtual	void	AcceptEdit($/;"	f	class:WED_AptTable
AcceptEdit	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	void	AcceptEdit($/;"	f	class:WED_ICAOTable
AcceptEdit	.\WEDImportExport\WED_VerTable.h	/^	virtual	void	AcceptEdit($/;"	f	class:WED_VerTable
AcceptEdit	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::AcceptEdit($/;"	f	class:WED_LibraryListAdapter
AcceptEdit	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::AcceptEdit($/;"	f	class:WED_ToolInfoAdapter
AcceptEdit	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::AcceptEdit($/;"	f	class:WED_PropertyTable
AcceptEdit	.\WEDWindows\WED_FilterBar.cpp	/^void	WED_FilterBar::AcceptEdit($/;"	f	class:WED_FilterBar
AcceptEdit	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::AcceptEdit($/;"	f	class:WED_PackageListAdapter
AcceptElectricSegment	.\Env\Persistence.cpp	/^void	AcceptElectricSegment($/;"	f
AcceptFocusChain	.\GUI\GUI_Commander.h	/^	virtual	int				AcceptFocusChain(void)										{ return 1; }$/;"	f	class:GUI_Commander
AcceptFocusChain	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::AcceptFocusChain(void)$/;"	f	class:GUI_TextField
AcceptLoseFocus	.\GUI\GUI_Commander.h	/^	virtual int				AcceptLoseFocus(int inForce) 								{ return 1; }$/;"	f	class:GUI_Commander
AcceptLoseFocus	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::AcceptLoseFocus(int inForce)$/;"	f	class:GUI_TextField
AcceptNetworkDef	.\DSF\DSFLibWrite.cpp	/^int	DSFFileWriterImp::AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptNetworkDef	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptNetworkDef	.\WEDImportExport\WED_DSFImport.cpp	/^	static int	AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSF_Importer
AcceptNetworkDef_f	.\DSF\DSFLib.h	/^	int (*	AcceptNetworkDef_f)(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptNetworkDef_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (*	AcceptNetworkDef_f)(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptNode	.\XPTools\AddObjects.cpp	/^bool	GroupNode::AcceptNode(SceneryNode * inNode)$/;"	f	class:GroupNode
AcceptNode	.\XPTools\AddObjects.cpp	/^bool	ObjectNode::AcceptNode(SceneryNode * inNode)$/;"	f	class:ObjectNode
AcceptNode	.\XPTools\AddObjects.cpp	/^bool	SwitchNode::AcceptNode(SceneryNode * inNode)$/;"	f	class:SwitchNode
AcceptObject	.\Env\Persistence.cpp	/^void	AcceptObject($/;"	f
AcceptObjectDef	.\DSF\DSFLibWrite.cpp	/^int	DSFFileWriterImp::AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptObjectDef	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptObjectDef	.\WEDImportExport\WED_DSFImport.cpp	/^	static int	AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSF_Importer
AcceptObjectDef_f	.\DSF\DSFLib.h	/^	int (*	AcceptObjectDef_f )(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptObjectDef_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (*	AcceptObjectDef_f )(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptPath	.\WEDMap\WED_CreateBoxTool.cpp	/^void	WED_CreateBoxTool::AcceptPath($/;"	f	class:WED_CreateBoxTool
AcceptPath	.\WEDMap\WED_CreateEdgeTool.cpp	/^void		WED_CreateEdgeTool::AcceptPath($/;"	f	class:WED_CreateEdgeTool
AcceptPath	.\WEDMap\WED_CreateLineTool.cpp	/^void	WED_CreateLineTool::AcceptPath($/;"	f	class:WED_CreateLineTool
AcceptPath	.\WEDMap\WED_CreatePointTool.cpp	/^void	WED_CreatePointTool::AcceptPath($/;"	f	class:WED_CreatePointTool
AcceptPath	.\WEDMap\WED_CreatePolygonTool.cpp	/^void	WED_CreatePolygonTool::AcceptPath($/;"	f	class:WED_CreatePolygonTool
AcceptPolygonDef	.\DSF\DSFLibWrite.cpp	/^int	DSFFileWriterImp::AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptPolygonDef	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptPolygonDef	.\WEDImportExport\WED_DSFImport.cpp	/^	static int	AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSF_Importer
AcceptPolygonDef_f	.\DSF\DSFLib.h	/^	int (*	AcceptPolygonDef_f)(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptPolygonDef_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (*	AcceptPolygonDef_f)(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptProperty	.\DSF\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptProperty	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptProperty	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f	class:DSF_Importer
AcceptProperty_f	.\DSF\DSFLib.h	/^	void (* AcceptProperty_f)(const char * inProp, const char * inValue, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptProperty_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* AcceptProperty_f)(const char * inProp, const char * inValue, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptRasterDef	.\DSF\DSFLibWrite.cpp	/^int	DSFFileWriterImp::AcceptRasterDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptRasterDef	.\WEDImportExport\WED_DSFImport.cpp	/^	static int AcceptRasterDef(const char * inPartalPath, void * inRef)$/;"	f	class:DSF_Importer
AcceptRasterDef_f	.\DSF\DSFLib.h	/^	int (*	AcceptRasterDef_f )(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptRiverSegment	.\Env\Persistence.cpp	/^void	AcceptRiverSegment($/;"	f
AcceptRoadSegment	.\Env\Persistence.cpp	/^void	AcceptRoadSegment($/;"	f
AcceptShared	.\DSF\DSFPointPool.cpp	/^DSFPointPoolLoc	DSF32BitPointPool::AcceptShared(const DSFTuple& inPoint)$/;"	f	class:DSF32BitPointPool
AcceptShared	.\DSF\DSFPointPool.cpp	/^pair<int, int>	DSFSharedPointPool::AcceptShared(const DSFTuple& inPoint)$/;"	f	class:DSFSharedPointPool
AcceptShared	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFPointPoolLoc	DSF32BitPointPool::AcceptShared(const DSFTuple& inPoint)$/;"	f	class:DSF32BitPointPool
AcceptShared	.\DSF\dsflib_013005\DSFPointPool.cpp	/^pair<int, int>	DSFSharedPointPool::AcceptShared(const DSFTuple& inPoint)$/;"	f	class:DSFSharedPointPool
AcceptTakeFocus	.\GUI\GUI_Application.h	/^	virtual	int				AcceptTakeFocus(void) 	{ return 1; }$/;"	f	class:GUI_Application
AcceptTakeFocus	.\GUI\GUI_Commander.h	/^	virtual	int				AcceptTakeFocus(void) 										{ return 0; }$/;"	f	class:GUI_Commander
AcceptTakeFocus	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::AcceptTakeFocus(void)$/;"	f	class:GUI_TextField
AcceptTakeFocus	.\GUI\GUI_TextTable.h	/^	virtual	int			AcceptTakeFocus(void) 	{ return 1; }$/;"	f	class:GUI_TextTable
AcceptTakeFocus	.\GUI\GUI_Window.h	/^	virtual	int				AcceptTakeFocus(void) 	{ return 1; }			\/\/ Because we START dispatching from here, do not refuse focus up to the app - we MUST be focused if active!$/;"	f	class:GUI_Window
AcceptTakeFocus	.\RenderFarmUI\RF_MapView.h	/^	virtual	int		AcceptTakeFocus(void) { return 1; }$/;"	f	class:RF_MapView
AcceptTaxiwaySegment	.\Env\Persistence.cpp	/^void	AcceptTaxiwaySegment($/;"	f
AcceptTerrainDef	.\DSF\DSFLibWrite.cpp	/^int	DSFFileWriterImp::AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptTerrainDef	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSFFileWriterImp
AcceptTerrainDef	.\WEDImportExport\WED_DSFImport.cpp	/^	static int	AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f	class:DSF_Importer
AcceptTerrainDef_f	.\DSF\DSFLib.h	/^	int (*	AcceptTerrainDef_f)(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptTerrainDef_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (*	AcceptTerrainDef_f)(const char * inPartialPath, void * inRef);$/;"	m	struct:DSFCallbacks_t
AcceptTrailSegment	.\Env\Persistence.cpp	/^void	AcceptTrailSegment($/;"	f
AcceptTrainSegment	.\Env\Persistence.cpp	/^void	AcceptTrainSegment($/;"	f
AcceptVertex	.\Env\Persistence.cpp	/^void	AcceptVertex($/;"	f
Accum	.\Utils\XChunkyFileUtils.cpp	/^	void Accum(T value)$/;"	f	class:FlatEncoder
Accum	.\Utils\XChunkyFileUtils.cpp	/^	void Accum(T value)$/;"	f	class:RLEEncoder
Accum	.\XESCore\DEMDefs.cpp	/^	void	Accum(float v, float ignore)$/;"	f	struct:HistoHelper
AccumAnimBegin	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumAnimBegin(void)$/;"	f	class:XObjBuilder
AccumAnimEnd	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumAnimEnd(void)$/;"	f	class:XObjBuilder
AccumContents	.\Network\XMLObject.cpp	/^void		XMLObject::AccumContents(const char * inChars, long inLen)$/;"	f	class:XMLObject
AccumDead	.\WEDWindows\WED_GroupCommands.cpp	/^static void AccumDead(WED_Thing * who, set<WED_Thing *>& nuke_em, const set<WED_Thing *>& must_keep, ISelection * sel)$/;"	f	file:
AccumHide	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumHide(float v1, float v2, const char * ref)$/;"	f	class:XObjBuilder
AccumLight	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumLight(float inPoint[6])$/;"	f	class:XObjBuilder
AccumLightCustom	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumLightCustom(float xyz[3], float params[9], const char * dataref)$/;"	f	class:XObjBuilder
AccumLightNamed	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumLightNamed(float xyz[3], const char * name)$/;"	f	class:XObjBuilder
AccumLine	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumLine(float inLine[12])$/;"	f	class:XObjBuilder
AccumLocalFile	.\WEDCore\WED_LibraryMgr.cpp	/^bool WED_LibraryMgr::AccumLocalFile(const char * filename, bool is_dir, void * ref)$/;"	f	class:WED_LibraryMgr
AccumManip	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumManip(int a, const XObjManip8& d)$/;"	f	class:XObjBuilder
AccumObject	.\XPTools\AddObjects.cpp	/^void	AccumObject(double lat, double lon, double heading, const string& name, void * ref)$/;"	f
AccumPoint2	.\XPTools\Env2DSF.cpp	/^int	AccumPoint2(float lon, float lat, vector<int>& ioPts, map<INDEX_t, int>& ioIndex)$/;"	f
AccumPoint3	.\XPTools\Env2DSF.cpp	/^int	AccumPoint3(float lon, float lat, float alt, vector<int>& ioPts, map<INDEX_t, int>& ioIndex)$/;"	f
AccumPointST	.\XPTools\Env2DSF.cpp	/^int	AccumPointST(float s, float t, vector<short>& ioPts, map<INDEX_t, int>& ioIndex)$/;"	f
AccumResource	.\WEDCore\WED_LibraryMgr.cpp	/^void WED_LibraryMgr::AccumResource(const string& path, int package, const string& rpath, bool is_backup, bool is_default, int status)$/;"	f	class:WED_LibraryMgr
AccumRotate	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumRotate(float axis[3], float r1, float r2, float v1, float v2, const char * ref)$/;"	f	class:XObjBuilder
AccumRotateBegin	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumRotateBegin(float axis[3], const char * ref)$/;"	f	class:XObjBuilder
AccumRotateEnd	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumRotateEnd(void)$/;"	f	class:XObjBuilder
AccumRotateKey	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumRotateKey(float v, float a)$/;"	f	class:XObjBuilder
AccumSegment	.\XPTools\Env2DSF.cpp	/^void	AccumSegment(	float lon1, float lat1,$/;"	f
AccumSelectionAndParents	.\WEDWindows\WED_GroupCommands.cpp	/^static int	AccumSelectionAndParents(ISelectable * what, void * ref)$/;"	f	file:
AccumShow	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumShow(float v1, float v2, const char * ref)$/;"	f	class:XObjBuilder
AccumSmoke	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumSmoke(int cmd, float xyz[3], float size)$/;"	f	class:XObjBuilder
AccumTexture	.\ObjEdit\OE_TexMgr.cpp	/^void		AccumTexture(const string& inFileName)$/;"	f
AccumTexture	.\XPTools\ViewObj.cpp	/^void		AccumTexture(const string& inFileName)$/;"	f
AccumTranslate	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumTranslate(float xyz1[3], float xyz2[3], float v1, float v2, const char * ref)$/;"	f	class:XObjBuilder
AccumTranslateBegin	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumTranslateBegin(const char * ref)$/;"	f	class:XObjBuilder
AccumTranslateEnd	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumTranslateEnd(void)$/;"	f	class:XObjBuilder
AccumTranslateKey	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumTranslateKey(float v, float xyz[3])$/;"	f	class:XObjBuilder
AccumTri	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AccumTri(float inTri[24])$/;"	f	class:XObjBuilder
AccumulatePoint	.\DSF\DSFPointPool.cpp	/^pair<int, int>	DSFContiguousPointPool::AccumulatePoint(const DSFTuple& inPoint)$/;"	f	class:DSFContiguousPointPool
AccumulatePoint	.\DSF\dsflib_013005\DSFPointPool.cpp	/^pair<int, int>	DSFContiguousPointPool::AccumulatePoint(const DSFTuple& inPoint)$/;"	f	class:DSFContiguousPointPool
AccumulatePoints	.\DSF\DSFPointPool.cpp	/^pair<int, int>	DSFContiguousPointPool::AccumulatePoints(const DSFTupleVector& inPoints)$/;"	f	class:DSFContiguousPointPool
AccumulatePoints	.\DSF\dsflib_013005\DSFPointPool.cpp	/^pair<int, int>	DSFContiguousPointPool::AccumulatePoints(const DSFTupleVector& inPoints)$/;"	f	class:DSFContiguousPointPool
Activate	.\GUI\GUI_Window.cpp	/^void		GUI_Window::Activate(int active)$/;"	f	class:GUI_Window
Activate	.\UI\XGrinderApp.cpp	/^	virtual void			Activate(int inActive) { }$/;"	f	class:XGrinderWin
Activate	.\UI\XWinGL.h	/^	virtual void			Activate(int active) { }$/;"	f	class:XWinGL
Activate	.\WEDWindows\WED_StartWindow.cpp	/^void			WED_StartWindow::Activate(int inActive)$/;"	f	class:WED_StartWindow
ActiveSeg	.\Utils\PolyRasterUtils.h	/^	typedef pair<PolyRasterSeg *, Number>	ActiveSeg;$/;"	t	struct:PolyRasterizer
Add	.\WEDXPlugin\WED_XPluginMgr.cpp	/^void WED_XPluginMgr::Add(int inId,int inType,const vector<string>& inArgs)$/;"	f	class:WED_XPluginMgr
AddAngularDifferencePoints	.\XESCore\MeshAlgs_old.cpp	/^int	AddAngularDifferencePoints($/;"	f
AddAxisEnum	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::AddAxisEnum(int inAxis, int inEnum, const string& inName)$/;"	f	class:CoverageFinder
AddAxisRange	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::AddAxisRange(int inAxis, float inMin, float inMax)$/;"	f	class:CoverageFinder
AddChild	.\WEDEntities\WED_Entity.cpp	/^void	WED_Entity::AddChild(int id, int n)$/;"	f	class:WED_Entity
AddChild	.\WEDEntities\WED_Thing.cpp	/^void				WED_Thing::AddChild(int id, int n)$/;"	f	class:WED_Thing
AddConstraintPoints	.\XESCore\MeshAlgs.cpp	/^void	AddConstraintPoints($/;"	f
AddConverters	.\SDTS\SDTSRead.cpp	/^void	AddConverters(SDTSDirectory& inDirectory, sio_8211_converter_dictionary& inDictionary)$/;"	f
AddEdge	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::AddEdge(Number x1, Number y1, Number x2, Number y2)$/;"	f	class:PolyRasterizer
AddEdgePoints	.\XESCore\MeshAlgs.cpp	/^void AddEdgePoints($/;"	f
AddEntityRecursive	.\WEDMap\WED_VertexTool.cpp	/^void		WED_VertexTool::AddEntityRecursive(IGISEntity * e, const Bbox2& vis_area ) const$/;"	f	class:WED_VertexTool
AddError	.\WEDCore\WED_Sign_Parser.h	/^	void AddError(string message, parser_error_t error_code, int position, int length)$/;"	f	struct:parser_out_info
AddExtraXML	.\WEDEntities\WED_AirportChain.cpp	/^void	WED_AirportChain::AddExtraXML(WED_XMLElement * obj)$/;"	f	class:WED_AirportChain
AddExtraXML	.\WEDEntities\WED_KeyObjects.cpp	/^void			WED_KeyObjects::AddExtraXML(WED_XMLElement * obj)$/;"	f	class:WED_KeyObjects
AddExtraXML	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::AddExtraXML(WED_XMLElement * obj)$/;"	f	class:WED_Select
AddExtraXML	.\WEDEntities\WED_Thing.h	/^	virtual	void			AddExtraXML(WED_XMLElement * obj) { }$/;"	f	class:WED_Thing
AddExtremeVerticalPoints	.\XESCore\MeshAlgs_old.cpp	/^int	AddExtremeVerticalPoints(const DEMGeo& orig, DEMGeo& deriv, float gap)$/;"	f
AddField	.\GUI\GUI_FormWindow.cpp	/^void		GUI_FormWindow::AddField($/;"	f	class:GUI_FormWindow
AddFieldNoEdit	.\GUI\GUI_FormWindow.cpp	/^void		GUI_FormWindow::AddFieldNoEdit($/;"	f	class:GUI_FormWindow
AddHole	.\WEDEntities\WED_GISPolygon.cpp	/^void				WED_GISPolygon::AddHole		(IGISPointSequence * r)$/;"	f	class:WED_GISPolygon
AddIndex	.\DSF\tri_stripper_101\tri_stripper.cpp	/^inline void tri_stripper::AddIndex(const index i)$/;"	f	class:triangle_stripper::tri_stripper
AddIndexToCache	.\DSF\tri_stripper_101\tri_stripper.cpp	/^inline void tri_stripper::AddIndexToCache(const index i, bool CacheHitCount)$/;"	f	class:triangle_stripper::tri_stripper
AddLabel	.\GUI\GUI_FormWindow.cpp	/^void		GUI_FormWindow::AddLabel(const string&			msg)$/;"	f	class:GUI_FormWindow
AddLayer	.\WEDMap\WED_Map.cpp	/^void		WED_Map::AddLayer(WED_MapLayer * layer)$/;"	f	class:WED_Map
AddLayer	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::AddLayer(WED_TCELayer * layer)$/;"	f	class:WED_TCE
AddLeftTriangles	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::AddLeftTriangles()$/;"	f	class:triangle_stripper::tri_stripper
AddListener	.\GUI\GUI_Broadcaster.cpp	/^void	GUI_Broadcaster::AddListener(GUI_Listener * inListener)$/;"	f	class:GUI_Broadcaster
AddObject	.\DSF\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AddObject($/;"	f	class:DSFFileWriterImp
AddObject	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AddObject($/;"	f	class:DSFFileWriterImp
AddObject	.\Network\XMLObject.cpp	/^void		XMLObject::AddObject(const std::string& inKey, XMLObject * inObject)$/;"	f	class:XMLObject
AddObject	.\WEDCore\WED_Archive.cpp	/^void		WED_Archive::AddObject(WED_Persistent * inObject)$/;"	f	class:WED_Archive
AddObject	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	AddObject($/;"	f	class:DSF_Importer
AddObject_f	.\DSF\DSFLib.h	/^	void (*	AddObject_f)($/;"	m	struct:DSFCallbacks_t
AddObject_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (*	AddObject_f)($/;"	m	struct:DSFCallbacks_t
AddObjects	.\XPTools\AddObjects.cpp	/^void	GroupNode::AddObjects(InsertObj_f addFunc, void * ref)$/;"	f	class:GroupNode
AddObjects	.\XPTools\AddObjects.cpp	/^void	ObjectNode::AddObjects(InsertObj_f addFunc, void * ref)$/;"	f	class:ObjectNode
AddObjects	.\XPTools\AddObjects.cpp	/^void	SwitchNode::AddObjects(InsertObj_f addFunc, void * ref)$/;"	f	class:SwitchNode
AddPane	.\GUI\GUI_TabPane.cpp	/^void			GUI_TabPane::AddPane(GUI_Pane * who, const char * title)$/;"	f	class:GUI_TabPane
AddParam	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AddParam(float p)$/;"	f	class:XObjBuilder
AddPatchVertex	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::AddPatchVertex($/;"	f	class:DSFFileWriterImp
AddPatchVertex	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::AddPatchVertex($/;"	f	class:DSFFileWriterImp
AddPatchVertex	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	AddPatchVertex($/;"	f	class:DSF_Importer
AddPatchVertex_f	.\DSF\DSFLib.h	/^	void (* AddPatchVertex_f)($/;"	m	struct:DSFCallbacks_t
AddPatchVertex_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* AddPatchVertex_f)($/;"	m	struct:DSFCallbacks_t
AddPolygonPoint	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::AddPolygonPoint($/;"	f	class:DSFFileWriterImp
AddPolygonPoint	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::AddPolygonPoint($/;"	f	class:DSFFileWriterImp
AddPolygonPoint	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	AddPolygonPoint($/;"	f	class:DSF_Importer
AddPolygonPoint_f	.\DSF\DSFLib.h	/^	void (* AddPolygonPoint_f)($/;"	m	struct:DSFCallbacks_t
AddPolygonPoint_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* AddPolygonPoint_f)($/;"	m	struct:DSFCallbacks_t
AddPool	.\DSF\DSFPointPool.cpp	/^void			DSFContiguousPointPool::AddPool(DSFTuple& minFrac, DSFTuple& maxFrac)$/;"	f	class:DSFContiguousPointPool
AddPool	.\DSF\DSFPointPool.cpp	/^void			DSFSharedPointPool::AddPool(DSFTuple& minFrac, DSFTuple& maxFrac)$/;"	f	class:DSFSharedPointPool
AddPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void			DSFContiguousPointPool::AddPool(DSFTuple& minFrac, DSFTuple& maxFrac)$/;"	f	class:DSFContiguousPointPool
AddPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void			DSFSharedPointPool::AddPool(DSFTuple& minFrac, DSFTuple& maxFrac)$/;"	f	class:DSFSharedPointPool
AddPoolDirect	.\DSF\DSFPointPool.cpp	/^void			DSFContiguousPointPool::AddPoolDirect(DSFTuple& minFrac, DSFTuple& maxFrac)$/;"	f	class:DSFContiguousPointPool
AddPoolDirect	.\DSF\DSFPointPool.cpp	/^void			DSFSharedPointPool::AddPoolDirect(DSFTuple& minFrac, DSFTuple& maxFrac)$/;"	f	class:DSFSharedPointPool
AddPtToSet	.\XESCore\Hydro.cpp	/^inline void AddPtToSet(DemPtSet& area, DemPtSet& border, DemPtMap& borderMap, const DemPtMap::iterator it, int width, int height, const DEMGeo& elev)$/;"	f
AddRadioFriend	.\GUI\GUI_Button.cpp	/^void		GUI_Button::AddRadioFriend(GUI_Button * who)$/;"	f	class:GUI_Button
AddRasterData	.\DSF\DSFLibWrite.cpp	/^void DSFFileWriterImp::AddRasterData($/;"	f	class:DSFFileWriterImp
AddRasterData	.\WEDImportExport\WED_DSFImport.cpp	/^	static void AddRasterData($/;"	f	class:DSF_Importer
AddRasterData_f	.\DSF\DSFLib.h	/^	void (* AddRasterData_f)($/;"	m	struct:DSFCallbacks_t
AddRef	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP_(ULONG) GUI_SimpleDataObject::AddRef()$/;"	f	class:GUI_SimpleDataObject
AddRef	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP_(ULONG) GUI_SimpleEnumFORMATETC::AddRef()$/;"	f	class:GUI_SimpleEnumFORMATETC
AddRef	.\GUI\GUI_Window.cpp	/^STDMETHODIMP_(ULONG) GUI_Window_DND::AddRef(void)$/;"	f	class:GUI_Window_DND
AddRef	.\GUI\GUI_Window.cpp	/^ULONG GUI_DropSource::AddRef()$/;"	f	class:GUI_DropSource
AddRef	.\UI\XWin32DND.cpp	/^STDMETHODIMP_(ULONG) CDropTarget::AddRef(void)$/;"	f	class:CDropTarget
AddRiverPoints	.\XESCore\MeshAlgs_old.cpp	/^int	AddRiverPoints($/;"	f
AddRuleAny	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::AddRuleAny(int inAxis)$/;"	f	class:CoverageFinder
AddRuleEnum	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::AddRuleEnum(int inAxis, int inEnum)$/;"	f	class:CoverageFinder
AddRuleInfoPair	.\XESCore\DEMTables.cpp	/^static void 	AddRuleInfoPair(NaturalTerrainRule_t& rule, NaturalTerrainInfo_t& info)$/;"	f	file:
AddRuleRange	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::AddRuleRange(int inAxis, float inMin, float inMax)$/;"	f	class:CoverageFinder
AddSegmentShapePoint	.\DSF\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AddSegmentShapePoint($/;"	f	class:DSFFileWriterImp
AddSegmentShapePoint	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::AddSegmentShapePoint($/;"	f	class:DSFFileWriterImp
AddSegmentShapePoint	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	AddSegmentShapePoint($/;"	f	class:DSF_Importer
AddSegmentShapePoint_f	.\DSF\DSFLib.h	/^	void (*	AddSegmentShapePoint_f)($/;"	m	struct:DSFCallbacks_t
AddSegmentShapePoint_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (*	AddSegmentShapePoint_f)($/;"	m	struct:DSFCallbacks_t
AddSnapPointRecursive	.\WEDMap\WED_VertexTool.cpp	/^void		WED_VertexTool::AddSnapPointRecursive(IGISEntity * e, const Bbox2& vis_area, ISelection * sel ) const$/;"	f	class:WED_VertexTool
AddSource	.\WEDEntities\WED_Thing.cpp	/^void				WED_Thing::AddSource(WED_Thing * src, int nth)$/;"	f	class:WED_Thing
AddTriToCache	.\DSF\tri_stripper_101\tri_stripper.cpp	/^inline void tri_stripper::AddTriToCache(const triangle & Tri, const triangle_strip::start_order Order)$/;"	f	class:triangle_stripper::tri_stripper
AddTriToFanPool	.\XESCore\TriFan.cpp	/^void		TriFanBuilder::AddTriToFanPool(CDT::Face_handle inFace)$/;"	f	class:TriFanBuilder
AddTriToIndices	.\DSF\tri_stripper_101\tri_stripper.cpp	/^inline void tri_stripper::AddTriToIndices(const triangle & Tri, const triangle_strip::start_order Order)$/;"	f	class:triangle_stripper::tri_stripper
AddViewer	.\WEDEntities\WED_Entity.cpp	/^void	WED_Entity::AddViewer(int id)$/;"	f	class:WED_Entity
AddViewer	.\WEDEntities\WED_Thing.cpp	/^void		WED_Thing::AddViewer(int id)$/;"	f	class:WED_Thing
AddZeroMixIfNeeded	.\XESCore\MeshAlgs.cpp	/^inline void AddZeroMixIfNeeded(CDT::Face_handle f, int layer)$/;"	f
Adjust	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::Adjust(size_t i) {$/;"	f	class:common_structures::heap_array
Advance	.\Utils\XChunkyFileUtils.h	/^	void				Advance(int bytes)	{ position += bytes; }$/;"	f	struct:XAtomPackedData
AdvanceMipmapStack	.\Utils\BitmapUtils.cpp	/^int AdvanceMipmapStack(struct ImageInfo * ioImage)$/;"	f
AdvanceScanline	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::AdvanceScanline(Number y)$/;"	f	class:PolyRasterizer
AdvanceScanline	.\Utils\PolyRasterUtils.h	/^void	BoxRasterizer<Number>::AdvanceScanline(Number iy1, Number iy2)$/;"	f	class:BoxRasterizer
AdvancedDragEntered	.\GUI\GUI_Window.cpp	/^int		GUI_Window::AdvancedDragEntered(void * ns_dragging_info)$/;"	f	class:GUI_Window
AdvancedDragEntered	.\UI\XWin.h	/^	virtual	int					AdvancedDragEntered(void * ns_dragging_info) { return 0; }$/;"	f	class:XWin
AdvancedDragExited	.\GUI\GUI_Window.cpp	/^void	GUI_Window::AdvancedDragExited(void * ns_dragging_info)$/;"	f	class:GUI_Window
AdvancedDragExited	.\UI\XWin.h	/^	virtual	void				AdvancedDragExited (void * ns_dragging_info) {			 }$/;"	f	class:XWin
AdvancedDragUpdated	.\GUI\GUI_Window.cpp	/^int		GUI_Window::AdvancedDragUpdated(void * ns_dragging_info)$/;"	f	class:GUI_Window
AdvancedDragUpdated	.\UI\XWin.h	/^	virtual	int					AdvancedDragUpdated(void * ns_dragging_info) { return 0; }$/;"	f	class:XWin
AdvancedPerformDrop	.\GUI\GUI_Window.cpp	/^int		GUI_Window::AdvancedPerformDrop(void * ns_dragging_info)$/;"	f	class:GUI_Window
AdvancedPerformDrop	.\UI\XWin.h	/^	virtual	int					AdvancedPerformDrop(void * ns_dragging_info) { return 0; }$/;"	f	class:XWin
AliasChance	.\XPTools\AddObjects.cpp	/^typedef	pair<string, double>		AliasChance;$/;"	t	file:
AliasList	.\XPTools\AddObjects.cpp	/^typedef vector<AliasChance>			AliasList;$/;"	t	file:
AliasMap	.\XPTools\AddObjects.cpp	/^typedef	map<string, AliasList>	AliasMap;$/;"	t	file:
AlignContents	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::AlignContents()$/;"	f	class:GUI_SimpleScroller
AlignContents	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::AlignContents()$/;"	f	class:GUI_Splitter
AlignContents	.\GUI\GUI_Table.cpp	/^void		GUI_Table::AlignContents(void)$/;"	f	class:GUI_Table
AlignContentsAt	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::AlignContentsAt(int split)$/;"	f	class:GUI_Splitter
AllSameType	.\XESCore\Hydro.cpp	/^bool AllSameType(const LongStrand& s)$/;"	f
AllocContiguous	.\WEDCore\WED_Buffer.cpp	/^void *	WED_Buffer::AllocContiguous(int len)$/;"	f	class:WED_Buffer
AnyHWND	.\GUI\GUI_Window.cpp	/^HWND GUI_Window::AnyHWND(void)$/;"	f	class:GUI_Window
AnyHidden	.\WEDProperties\WED_PropertyTable.cpp	/^inline bool AnyHidden(WED_Thing * t)$/;"	f
AnyLocked	.\WEDProperties\WED_PropertyTable.cpp	/^inline bool AnyLocked(WED_Thing * t)$/;"	f
AnyPtInEdgeSpaceCCB	.\XESCore\Hydro.cpp	/^static bool	AnyPtInEdgeSpaceCCB(Halfedge_handle e1, Halfedge_handle e2, vector<pair<Bbox2, vector<Point2> > >& cache)$/;"	f	file:
AppendMenuItem	.\UI\XWin.lin.cpp	/^int XWin::AppendMenuItem(xmenu menu, const char * inTitle)$/;"	f	class:XWin
AppendMenuItem	.\UI\XWin.win.cpp	/^int				XWin::AppendMenuItem(xmenu menu, const char * inTitle)$/;"	f	class:XWin
AppendSeparator	.\UI\XWin.lin.cpp	/^int XWin::AppendSeparator(xmenu menu)$/;"	f	class:XWin
AppendSeparator	.\UI\XWin.win.cpp	/^int				XWin::AppendSeparator(xmenu menu)$/;"	f	class:XWin
ApplyCmdsRecursive	.\GUI\GUI_Window.cpp	/^static void ApplyCmdsRecursive(HMENU menu, const CmdMap_t& io_map)$/;"	f	file:
ApplyObjects	.\RawImport\FAA_Obs.cpp	/^void ApplyObjects(Pmwx& ioMap)$/;"	f
ApplyObjects	.\XPTools\AddObjects.cpp	/^void	ApplyObjects(void)$/;"	f
ApplyRange	.\RenderFarmUI\RF_SelectionTool.cpp	/^void ApplyRange(__InputIterator begin, __InputIterator end, void (* func)(typename __InputIterator::value_type, __Ref), __Ref ref)$/;"	f
ApplyRescale	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::ApplyRescale(const Bbox2& old_bounds, const Bbox2& new_bounds)$/;"	f	class:WED_MarqueeTool
ApplyRescale	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::ApplyRescale(const Bbox2& old_bounds, const Bbox2& new_bounds)$/;"	f	class:WED_TCEMarqueeTool
ApplyRotate	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::ApplyRotate(const Point2& ctr, double angle)$/;"	f	class:WED_MarqueeTool
ApplyRotate	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::ApplyRotate(const Point2& ctr, double angle)$/;"	f	class:WED_TCEMarqueeTool
ApplyTexture	.\ObjEdit\OE_ProjectionMgr.cpp	/^void		OE_ProjectionMgr::ApplyTexture(void)$/;"	f	class:OE_ProjectionMgr
ApplyToObj	.\ObjEdit\OE_ProjectionMgr.cpp	/^void		OE_ProjectionMgr::ApplyToObj(void)$/;"	f	class:OE_ProjectionMgr
ApplyTransform	.\ObjEdit\OE_CubeDeformer.cpp	/^void	OE_CubeDeformer::ApplyTransform(void)$/;"	f	class:OE_CubeDeformer
AptATCFreqVector	.\XESCore\AptDefs.h	/^typedef vector<AptATCFreq_t>	AptATCFreqVector;$/;"	t
AptATCFreq_t	.\XESCore\AptDefs.h	/^struct	AptATCFreq_t {$/;"	s
AptAlgs_H	.\XESCore\AptAlgs.h	25;"	d
AptBeacon_t	.\XESCore\AptDefs.h	/^struct	AptBeacon_t {$/;"	s
AptBoundaryVector	.\XESCore\AptDefs.h	/^typedef vector<AptBoundary_t>	AptBoundaryVector;$/;"	t
AptBoundary_t	.\XESCore\AptDefs.h	/^struct	AptBoundary_t {$/;"	s
AptExportRecursive	.\WEDImportExport\WED_AptIE.cpp	/^void	AptExportRecursive(WED_Thing * what, AptVector& apts)$/;"	f
AptFlowVector	.\XESCore\AptDefs.h	/^typedef vector<AptFlow_t>		AptFlowVector;$/;"	t
AptFlow_t	.\XESCore\AptDefs.h	/^struct AptFlow_t {$/;"	s
AptGateVector	.\XESCore\AptDefs.h	/^typedef vector<AptGate_t>		AptGateVector;$/;"	t
AptGate_t	.\XESCore\AptDefs.h	/^struct	AptGate_t {$/;"	s
AptHelipadVector	.\XESCore\AptDefs.h	/^typedef	vector<AptHelipad_t>	AptHelipadVector;$/;"	t
AptHelipad_t	.\XESCore\AptDefs.h	/^struct	AptHelipad_t {$/;"	s
AptIndex	.\XESCore\AptDefs.h	/^typedef hash_multimap<int,int>	AptIndex;$/;"	t
AptInfo_t	.\XESCore\AptDefs.h	/^struct AptInfo_t {$/;"	s
AptLightVector	.\XESCore\AptDefs.h	/^typedef vector<AptLight_t>		AptLightVector;$/;"	t
AptLight_t	.\XESCore\AptDefs.h	/^struct	AptLight_t {$/;"	s
AptLineLoop_t	.\XESCore\AptDefs.h	/^	struct AptLineLoop_t {$/;"	s	struct:AptInfo_t
AptLinearSegment_t	.\XESCore\AptDefs.h	/^struct	AptLinearSegment_t {$/;"	s
AptMarkingVector	.\XESCore\AptDefs.h	/^typedef vector<AptMarking_t>	AptMarkingVector;$/;"	t
AptMarking_t	.\XESCore\AptDefs.h	/^struct AptMarking_t {$/;"	s
AptNetwork_t	.\XESCore\AptDefs.h	/^struct AptNetwork_t {$/;"	s
AptPavementVector	.\XESCore\AptDefs.h	/^typedef vector<AptPavement_t>	AptPavementVector;$/;"	t
AptPavement_t	.\XESCore\AptDefs.h	/^struct	AptPavement_t {$/;"	s
AptPolygonIterator	.\XESCore\AptAlgs.cpp	/^AptPolygonIterator::AptPolygonIterator() : p(-2)$/;"	f	class:AptPolygonIterator
AptPolygonIterator	.\XESCore\AptAlgs.cpp	/^AptPolygonIterator::AptPolygonIterator(const AptPolygonIterator& rhs) : i(rhs.i), p(rhs.p)$/;"	f	class:AptPolygonIterator
AptPolygonIterator	.\XESCore\AptAlgs.cpp	/^AptPolygonIterator::AptPolygonIterator(const AptPolygon_t::const_iterator rhs) : i(rhs), p(0)$/;"	f	class:AptPolygonIterator
AptPolygonIterator	.\XESCore\AptAlgs.h	/^struct AptPolygonIterator {$/;"	s
AptPolygonToBezier	.\XESCore\Airports.cpp	/^void	AptPolygonToBezier($/;"	f
AptPolygon_t	.\XESCore\AptDefs.h	/^typedef	vector<AptLinearSegment_t>		AptPolygon_t;$/;"	t
AptRouteEdge_t	.\XESCore\AptDefs.h	/^struct AptRouteEdge_t {$/;"	s
AptRouteNode_t	.\XESCore\AptDefs.h	/^struct AptRouteNode_t {$/;"	s
AptRunwayRuleVector	.\XESCore\AptDefs.h	/^typedef vector<AptRunwayRule_t>	AptRunwayRuleVector;$/;"	t
AptRunwayRule_t	.\XESCore\AptDefs.h	/^struct AptRunwayRule_t {$/;"	s
AptRunwayVector	.\XESCore\AptDefs.h	/^typedef vector<AptRunway_t>		AptRunwayVector;$/;"	t
AptRunway_t	.\XESCore\AptDefs.h	/^struct	AptRunway_t {$/;"	s
AptSealaneVector	.\XESCore\AptDefs.h	/^typedef vector<AptSealane_t>	AptSealaneVector;$/;"	t
AptSealane_t	.\XESCore\AptDefs.h	/^struct	AptSealane_t {$/;"	s
AptSignVector	.\XESCore\AptDefs.h	/^typedef vector<AptSign_t>		AptSignVector;$/;"	t
AptSign_t	.\XESCore\AptDefs.h	/^struct	AptSign_t {$/;"	s
AptTaxiwayVector	.\XESCore\AptDefs.h	/^typedef vector<AptTaxiway_t>	AptTaxiwayVector;$/;"	t
AptTaxiway_t	.\XESCore\AptDefs.h	/^struct	AptTaxiway_t {$/;"	s
AptTimeRuleVector	.\XESCore\AptDefs.h	/^typedef vector<AptTimeRule_t>	AptTimeRuleVector;$/;"	t
AptTimeRule_t	.\XESCore\AptDefs.h	/^struct AptTimeRule_t {$/;"	s
AptTowerPt_t	.\XESCore\AptDefs.h	/^struct	AptTowerPt_t {$/;"	s
AptVector	.\XESCore\AptDefs.h	/^typedef vector<AptInfo_t>	AptVector;$/;"	t
AptVectorChanged	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::AptVectorChanged(void)$/;"	f	class:WED_AptTable
AptVectorChanged	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::AptVectorChanged(void)$/;"	f	class:WED_ICAOTable
AptWindRuleVector	.\XESCore\AptDefs.h	/^typedef vector<AptWindRule_t>	AptWindRuleVector;$/;"	t
AptWindRule_t	.\XESCore\AptDefs.h	/^struct AptWindRule_t {$/;"	s
AptWindsockVector	.\XESCore\AptDefs.h	/^typedef vector<AptWindsock_t>	AptWindsockVector;$/;"	t
AptWindsock_t	.\XESCore\AptDefs.h	/^struct AptWindsock_t {$/;"	s
AreaInfo_t	.\Tiger\(TigerImport Backup.cpp).cpp	/^struct	AreaInfo_t {$/;"	s	file:
AreaMatch	.\XESCore\MapDefs.h	/^	bool		AreaMatch(const GIS_face_data& rhs) const { return (mTerrainType == rhs.mTerrainType && mAreaFeature.mFeatType == rhs.mAreaFeature.mFeatType); }$/;"	f	class:GIS_face_data
Args	.\lib_json\include\json\value.h	/^      typedef std::vector<PathArgument> Args;$/;"	t	class:Json::Path
ArrTraits	.\XESCore\MapHelpers.h	/^	typedef typename Arr::Geometry_traits_2	ArrTraits;$/;"	t	class:arrangement_simplifier
Arr_accessor	.\XESCore\MapDefs.h	/^typedef CGAL::Arr_accessor<Arrangement_2>               Arr_accessor;$/;"	t
Arr_full_overlay_traits	.\XESCore\MapOverlay.cpp	/^class Arr_full_overlay_traits :$/;"	c	file:
Arr_replace_overlay_traits	.\XESCore\MapOverlay.cpp	/^class Arr_replace_overlay_traits :$/;"	c	file:
Arr_seg_traits_	.\XESCore\MapDefs.h	/^typedef CGAL::Arr_consolidated_curve_data_traits_2<TraitsBase, int>					Arr_seg_traits_;$/;"	t
Arrangement_2	.\XESCore\MapDefs.h	/^	  typedef base::Arrangement_2									Arrangement_2;$/;"	t	class:Polygon_set_2
Arrangement_2	.\XESCore\MapDefs.h	/^typedef CGAL::Arrangement_2<Traits_2,Dcel>					Arrangement_2;$/;"	t
Arrangement_2	.\XESCore\MapIO.cpp	/^	typedef Pmwx										   Arrangement_2;$/;"	t	class:PmwxFmt	file:
ArrayIndex	.\lib_json\include\json\forwards.h	/^   typedef unsigned int ArrayIndex;$/;"	t	namespace:Json
ArrayIndex	.\lib_json\include\json\value.h	/^      typedef Json::ArrayIndex ArrayIndex;$/;"	t	class:Json::Value
ArrayIndex	.\lib_json\include\json\value.h	/^      typedef Value::ArrayIndex ArrayIndex;$/;"	t	class:Json::ValueInternalArray
Array_Count	.\WEDEntities\WED_Thing.cpp	/^int				WED_Thing::Array_Count (void )$/;"	f	class:WED_Thing
Array_GetNth	.\WEDEntities\WED_Thing.cpp	/^IBase *		WED_Thing::Array_GetNth(int n)$/;"	f	class:WED_Thing
Assert	.\Utils\AssertUtils.h	51;"	d
AssertHandler_f	.\Utils\AssertUtils.cpp	/^typedef void (* AssertHandler_f)(const char * condition, const char * file, int line);$/;"	t	file:
AssertHandler_f	.\Utils\AssertUtils.h	/^typedef void (* AssertHandler_f)(const char * condition, const char * file, int line);$/;"	t
AssertPrintf	.\Utils\AssertUtils.cpp	/^void	AssertPrintf(const char * fmt, ...)$/;"	f
AssertPrintfv	.\Utils\AssertUtils.cpp	/^void	AssertPrintfv(const char * fmt, va_list arg)$/;"	f
AssertShellBail	.\DSFTools\DSFToolCmdLine.cpp	/^void AssertShellBail(const char * condition, const char * file, int line)$/;"	f
AssertThrowQuiet	.\Utils\Skeleton.cpp	/^static void AssertThrowQuiet(const char * msg, const char * file, int line) { throw msg; }$/;"	f	file:
AssertThrower	.\XESTools\GISTool_ObsCmds.cpp	/^static void AssertThrower(const char * msg, const char * file, int line)$/;"	f	file:
Assign	.\Installer\InstallerProcs.cpp	/^	void InstallerChunk::Assign(char * imem, int ilen)$/;"	f	class:InstallerChunk
AssignExportTypes	.\XESCore\NetPlacement.cpp	/^void	AssignExportTypes(Net_JunctionInfoSet& ioJunctions, Net_ChainInfoSet& ioChains)$/;"	f
AssignLandusesToMesh	.\XESCore\MeshAlgs.cpp	/^void	AssignLandusesToMesh(	DEMGeoMap& inDEMs,$/;"	f
AssureLOD	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::AssureLOD(void)$/;"	f	class:XObjBuilder
AssympApply	.\RawImport\AptElev.cpp	/^void	AssympApply(DEMGeo& ioDem, int x, int y, float v, float w, bool zap)$/;"	f
AsyncConnectionPool	.\Network\TerraServer.h	/^class	AsyncConnectionPool {$/;"	c
AsyncConnectionPool	.\Network\Terraserver.cpp	/^AsyncConnectionPool::AsyncConnectionPool(int max_cons, int max_depth) :$/;"	f	class:AsyncConnectionPool
AsyncDestroy	.\GUI\GUI_Destroyable.cpp	/^void GUI_Destroyable::AsyncDestroy(void)$/;"	f	class:GUI_Destroyable
AsyncImage	.\Network\TerraServer.h	/^class	AsyncImage {$/;"	c
AsyncImage	.\Network\Terraserver.cpp	/^AsyncImage::AsyncImage(AsyncConnectionPool * pool, const char * scale, const char * theme, int domain, int x, int y)$/;"	f	class:AsyncImage
AsyncImageLocator	.\Network\TerraServer.h	/^class	AsyncImageLocator {$/;"	c
AsyncImageLocator	.\Network\Terraserver.cpp	/^AsyncImageLocator::AsyncImageLocator(AsyncConnectionPool * pool)$/;"	f	class:AsyncImageLocator
AtomHeader_t	.\DSF\DSFDefs.h	/^struct	AtomHeader_t {$/;"	s
AtomHeader_t	.\DSF\dsflib_013005\DSFDefs.h	/^struct	AtomHeader_t {$/;"	s
AttachSlaveH	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::AttachSlaveH(GUI_ScrollerPane *inSlaveH)$/;"	f	class:GUI_ScrollerPane
AttachSlaveV	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::AttachSlaveV(GUI_ScrollerPane *inSlaveV)$/;"	f	class:GUI_ScrollerPane
AxisSize	.\Utils\CoverageFinder.cpp	/^int		CoverageFinder::AxisSize(int a)$/;"	f	class:CoverageFinder
AxisSizeCume	.\Utils\CoverageFinder.cpp	/^int		CoverageFinder::AxisSizeCume(int a)$/;"	f	class:CoverageFinder
B	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::index tri_stripper::triangle::B() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle
B	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::index tri_stripper::triangle_edge::B() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_edge
BAD_FORMAT_ERR	.\Env\EnvParser.h	26;"	d
BCA	.\DSF\tri_stripper_101\tri_stripper.h	/^		enum start_order { ABC = 0, BCA = 1, CAB = 2 };$/;"	e	enum:triangle_stripper::tri_stripper::triangle_strip::start_order
BEACHES_H	.\XESCore\Beaches.h	25;"	d
BEZIERAPPROX_H	.\XESCore\BezierApprox.h	25;"	d
BEZ_MAX_SEGS	.\WEDWindows\WED_UIDefs.h	39;"	d
BEZ_MIN_SEGS	.\WEDWindows\WED_UIDefs.h	38;"	d
BEZ_PIX_PER_SEG	.\WEDWindows\WED_UIDefs.h	40;"	d
BEZ_STEPS	.\WEDMap\WED_CreateToolBase.cpp	/^const int BEZ_STEPS = 50;$/;"	v
BIG	.\AC3DPlugins\ac3d_prefix.h	27;"	d
BIG	.\AC3DPlugins\ac3d_prefix.h	30;"	d
BIG	.\AC3DPlugins\ac3d_prefix.h	34;"	d
BIG	.\Obj\XDefs.h	38;"	d
BIG	.\Obj\XDefs.h	41;"	d
BIG	.\Obj\XDefs.h	45;"	d
BITMAP_MATCH_H	.\AC3DPlugins\bitmap_match.h	25;"	d
BLACK_BORDERED_LETTER	.\XPTools\TaxiMaker.cpp	84;"	d	file:
BLKTYPE	.\Utils\MemFileUtils.cpp	136;"	d	file:
BLOCKING	.\Network\PCSBSocket.lin.cpp	44;"	d	file:
BLOCKING	.\Network\PCSBSocket.win.cpp	29;"	d	file:
BLOCKING	.\Network\PCSBSocketUDP.lin.cpp	26;"	d	file:
BLOCKING	.\Network\PCSBSocketUDP.win.cpp	26;"	d	file:
BLOCKSIZE	.\Utils\MemFileUtils.cpp	141;"	d	file:
BLOCK_ERR_MTR	.\XESCore\BlockFill.cpp	97;"	d	file:
BLOCK_face_data	.\XESCore\BlockDefs.h	/^	BLOCK_face_data() : usage(usage_Empty), feature(0), simplify_id(0) { }$/;"	f	struct:BLOCK_face_data
BLOCK_face_data	.\XESCore\BlockDefs.h	/^	BLOCK_face_data(int u,int f) : usage(u), feature(f), simplify_id(0) { }$/;"	f	struct:BLOCK_face_data
BLOCK_face_data	.\XESCore\BlockDefs.h	/^struct BLOCK_face_data {$/;"	s
BLOCK_halfedge_data	.\XESCore\BlockDefs.h	/^struct BLOCK_halfedge_data { bool operator==(const BLOCK_halfedge_data& rhs) const { return true; } };$/;"	s
BLOCK_vertex_data	.\XESCore\BlockDefs.h	/^struct BLOCK_vertex_data { };$/;"	s
BMPHeader	.\Utils\BitmapUtils.cpp	/^struct	BMPHeader {$/;"	s	file:
BMPImageDesc	.\Utils\BitmapUtils.cpp	/^struct	BMPImageDesc {$/;"	s	file:
BORDERED_LETTER1	.\XPTools\TaxiMaker.cpp	81;"	d	file:
BORDERED_LETTER2	.\XPTools\TaxiMaker.cpp	91;"	d	file:
BORDER_FADE_FACTOR	.\RenderFarmUI\RF_MapView.cpp	88;"	d	file:
BPoint_2	.\XESCore\BlockDefs.h	/^typedef GK::Point_2																	BPoint_2;$/;"	t
BRIDGE_TURN_SIMPLIFY	.\XESCore\NetPlacement.cpp	40;"	d	file:
BSegment_2	.\XESCore\BlockDefs.h	/^typedef GK::Segment_2																BSegment_2;$/;"	t
BUFREADCOMMENT	.\Utils\unzip.c	260;"	d	file:
BUILDINSTALLER_H	.\Installer\BuildInstaller.h	24;"	d
BULK_SPLAT_IO	.\WEDImportExport\WED_GatewayExport.cpp	77;"	d	file:
BURN_EVERYTHING	.\XESCore\MeshAlgs.h	32;"	d
BURN_ROADS	.\XESCore\MeshAlgs.h	34;"	d
BURN_ZONING	.\XESCore\MeshAlgs.h	36;"	d
BUTTON_DIM	.\UI\XWin.h	77;"	d
BWIMAGE_H	.\Utils\BWImage.h	24;"	d
BWINLINE	.\Utils\BWImage.h	61;"	d
BWINLINE	.\Utils\BWImage.h	63;"	d
BWImage	.\Utils\BWImage.cpp	/^BWImage::BWImage() : mData(NULL), mBackup(NULL), mWidth(0), mHeight(0)$/;"	f	class:BWImage
BWImage	.\Utils\BWImage.cpp	/^BWImage::BWImage(const BWImage& rhs) :$/;"	f	class:BWImage
BWImage	.\Utils\BWImage.cpp	/^BWImage::BWImage(int width, int height) :$/;"	f	class:BWImage
BWImage	.\Utils\BWImage.h	/^struct	BWImage {$/;"	s
Back	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::Back()$/;"	f	class:WED_GatewayImportDialog
BackMap	.\AC3DPlugins\uv_mapper.cpp	/^typedef map<SVertex *, vector<SVertex *> >	BackMap;$/;"	t	file:
BatchAllocator	.\lib_json\src\lib_json\json_batchallocator.h	/^   BatchAllocator( unsigned int objectsPerPage = 255 )$/;"	f	class:Json::BatchAllocator
BatchAllocator	.\lib_json\src\lib_json\json_batchallocator.h	/^class BatchAllocator$/;"	c	namespace:Json
BatchInfo	.\lib_json\src\lib_json\json_batchallocator.h	/^   struct BatchInfo$/;"	s	class:Json::BatchAllocator
Bbox2	.\Utils\CompGeomDefs2.h	/^				Bbox2() : p1(0,0), p2(-1, -1) { }$/;"	f	struct:Bbox2
Bbox2	.\Utils\CompGeomDefs2.h	/^				Bbox2(const Bbox2& rhs) : p1(rhs.p1), p2(rhs.p2) { }$/;"	f	struct:Bbox2
Bbox2	.\Utils\CompGeomDefs2.h	/^				Bbox2(const Point2& in_p1, const Point2& in_p2) : p1(in_p1), p2(in_p2) { if (p1.x_ > p2.x_) swap(p1.x_, p2.x_); if (p1.y_ > p2.y_) swap(p1.y_, p2.y_); }$/;"	f	struct:Bbox2
Bbox2	.\Utils\CompGeomDefs2.h	/^				Bbox2(const Point2& inp) : p1(inp), p2(inp) { }$/;"	f	struct:Bbox2
Bbox2	.\Utils\CompGeomDefs2.h	/^				Bbox2(const Segment2& s) : p1(s.p1), p2(s.p2) { if (p1.x_ > p2.x_) swap(p1.x_, p2.x_); if (p1.y_ > p2.y_) swap(p1.y_, p2.y_); }$/;"	f	struct:Bbox2
Bbox2	.\Utils\CompGeomDefs2.h	/^				Bbox2(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) { if (p1.x_ > p2.x_) swap(p1.x_, p2.x_); if (p1.y_ > p2.y_) swap(p1.y_, p2.y_); }$/;"	f	struct:Bbox2
Bbox2	.\Utils\CompGeomDefs2.h	/^struct	Bbox2 {$/;"	s
Bbox_2	.\XESCore\CGALDefs.h	/^typedef CGAL::Bbox_2									Bbox_2;$/;"	t
BeachIndex	.\XESCore\DEMTables.h	/^typedef map<int, int>			BeachIndex;$/;"	t
BeachInfoTable	.\XESCore\DEMTables.h	/^typedef vector<BeachInfo_t>		BeachInfoTable;$/;"	t
BeachInfo_t	.\XESCore\DEMTables.h	/^struct BeachInfo_t {$/;"	s
BeachPtGrab	.\XESCore\DSFBuilder.cpp	/^static void BeachPtGrab(const CDT::Edge& edge, bool last, const CDT& inMesh, double coords[3], int kind)$/;"	f	file:
BeginDefer	.\GUI\GUI_Commander.cpp	/^void			GUI_Commander::BeginDefer(void)$/;"	f	class:GUI_Commander
BeginEdit	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::BeginEdit(void)$/;"	f	class:WED_CreateToolBase
BeginEdit	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::BeginEdit(void)$/;"	f	class:WED_MarqueeTool
BeginEdit	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::BeginEdit(void)$/;"	f	class:WED_VertexTool
BeginEdit	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::BeginEdit(void)$/;"	f	class:WED_TCEMarqueeTool
BeginEdit	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::BeginEdit(void)$/;"	f	class:WED_TCEVertexTool
BeginLOD	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::BeginLOD(float inNear, float inFar)$/;"	f	class:XObjBuilder
BeginPatch	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPatch($/;"	f	class:DSFFileWriterImp
BeginPatch	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPatch($/;"	f	class:DSFFileWriterImp
BeginPatch	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	BeginPatch($/;"	f	class:DSF_Importer
BeginPatch_f	.\DSF\DSFLib.h	/^	void (* BeginPatch_f)($/;"	m	struct:DSFCallbacks_t
BeginPatch_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* BeginPatch_f)($/;"	m	struct:DSFCallbacks_t
BeginPolygon	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPolygon($/;"	f	class:DSFFileWriterImp
BeginPolygon	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPolygon($/;"	f	class:DSFFileWriterImp
BeginPolygon	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	BeginPolygon($/;"	f	class:DSF_Importer
BeginPolygonWinding	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPolygonWinding($/;"	f	class:DSFFileWriterImp
BeginPolygonWinding	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPolygonWinding($/;"	f	class:DSFFileWriterImp
BeginPolygonWinding	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	BeginPolygonWinding($/;"	f	class:DSF_Importer
BeginPolygonWinding_f	.\DSF\DSFLib.h	/^	void (* BeginPolygonWinding_f)($/;"	m	struct:DSFCallbacks_t
BeginPolygonWinding_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* BeginPolygonWinding_f)($/;"	m	struct:DSFCallbacks_t
BeginPolygon_f	.\DSF\DSFLib.h	/^	void (* BeginPolygon_f)($/;"	m	struct:DSFCallbacks_t
BeginPolygon_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* BeginPolygon_f)($/;"	m	struct:DSFCallbacks_t
BeginPrimitive	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPrimitive($/;"	f	class:DSFFileWriterImp
BeginPrimitive	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginPrimitive($/;"	f	class:DSFFileWriterImp
BeginPrimitive	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	BeginPrimitive($/;"	f	class:DSF_Importer
BeginPrimitive_f	.\DSF\DSFLib.h	/^	void (* BeginPrimitive_f)($/;"	m	struct:DSFCallbacks_t
BeginPrimitive_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* BeginPrimitive_f)($/;"	m	struct:DSFCallbacks_t
BeginSegment	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginSegment($/;"	f	class:DSFFileWriterImp
BeginSegment	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::BeginSegment($/;"	f	class:DSFFileWriterImp
BeginSegment	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	BeginSegment($/;"	f	class:DSF_Importer
BeginSegment_f	.\DSF\DSFLib.h	/^	void (* BeginSegment_f)($/;"	m	struct:DSFCallbacks_t
BeginSegment_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* BeginSegment_f)($/;"	m	struct:DSFCallbacks_t
Bezier2	.\Utils\CompGeomDefs2.h	/^	Bezier2() { }$/;"	f	struct:Bezier2
Bezier2	.\Utils\CompGeomDefs2.h	/^	Bezier2(const Bezier2& x) : p1(x.p1), p2(x.p2), c1(x.c1), c2(x.c2) { }$/;"	f	struct:Bezier2
Bezier2	.\Utils\CompGeomDefs2.h	/^	Bezier2(const Point2& ip1, const Point2& ic1, const Point2& ic2, const Point2& ip2) : p1(ip1), p2(ip2), c1(ic1), c2(ic2) { }$/;"	f	struct:Bezier2
Bezier2	.\Utils\CompGeomDefs2.h	/^	Bezier2(const Segment2& x) : p1(x.p1), p2(x.p2), c1(x.p1), c2(x.p2) { }$/;"	f	struct:Bezier2
Bezier2	.\Utils\CompGeomDefs2.h	/^inline	Bezier2::Bezier2(const Point2& ip1, const Point2& ic, const Point2& ip2) :$/;"	f	class:Bezier2
Bezier2	.\Utils\CompGeomDefs2.h	/^struct	Bezier2 {$/;"	s
Bezier2p	.\WEDCore\WED_GISUtils.h	/^	Bezier2p() : param(0) { }$/;"	f	struct:Bezier2p
Bezier2p	.\WEDCore\WED_GISUtils.h	/^	Bezier2p(const Bezier2& x, int p) : Bezier2(x), param(p) { }$/;"	f	struct:Bezier2p
Bezier2p	.\WEDCore\WED_GISUtils.h	/^	Bezier2p(const Bezier2p& x) : Bezier2(x), param(x.param) { }$/;"	f	struct:Bezier2p
Bezier2p	.\WEDCore\WED_GISUtils.h	/^	Bezier2p(const Point2& ip1, const Point2& ic1, const Point2& ic2, const Point2& ip2, int p) : Bezier2(ip1,ic1,ic2,ip2), param(p) { }$/;"	f	struct:Bezier2p
Bezier2p	.\WEDCore\WED_GISUtils.h	/^	Bezier2p(const Segment2& x, int p) : Bezier2(x), param(p) { }$/;"	f	struct:Bezier2p
Bezier2p	.\WEDCore\WED_GISUtils.h	/^	Bezier2p(const Segment2p& x) : Bezier2(x), param(x.param) { }$/;"	f	struct:Bezier2p
Bezier2p	.\WEDCore\WED_GISUtils.h	/^struct Bezier2p : public Bezier2 {$/;"	s
Bezier3	.\Utils\CompGeomDefs3.h	/^	Bezier3() { }$/;"	f	class:Bezier3
Bezier3	.\Utils\CompGeomDefs3.h	/^	Bezier3(const Bezier3& x) : p1(x.p1), p2(x.p2), c1(x.c1), c2(x.c2) { }$/;"	f	class:Bezier3
Bezier3	.\Utils\CompGeomDefs3.h	/^	Bezier3(const Point3& ip1, const Point3& ic1, const Point3& ic2, const Point3& ip2) : p1(ip1), p2(ip2), c1(ic1), c2(ic2) { }$/;"	f	class:Bezier3
Bezier3	.\Utils\CompGeomDefs3.h	/^class	Bezier3 {$/;"	c
BezierCurve	.\Utils\CompGeomUtils.cpp	/^void	BezierCurve($/;"	f
BezierPoint2	.\Utils\CompGeomDefs2.h	/^struct	BezierPoint2 {$/;"	s
BezierPoint2p	.\WEDCore\WED_GISUtils.h	/^struct BezierPoint2p : public BezierPoint2 {$/;"	s
BezierPointSeqFromTriple	.\WEDCore\WED_GISUtils.h	/^void BezierPointSeqFromTriple(InputIterator s, InputIterator e, OutputIterator o)$/;"	f
BezierPointSeqIsRing	.\WEDCore\WED_GISUtils.h	/^bool BezierPointSeqIsRing(InputIterator s, InputIterator e)$/;"	f
BezierPointSeqToTriple	.\WEDCore\WED_GISUtils.h	/^void BezierPointSeqToTriple(InputIterator s, InputIterator e, OutputIterator o)$/;"	f
BezierPointToBezier	.\WEDCore\WED_GISUtils.cpp	/^void	BezierPointToBezier(const BezierPoint2& p1,const BezierPoint2& p2, Bezier2& b)$/;"	f
BezierPointToBezier	.\WEDCore\WED_GISUtils.cpp	/^void	BezierPointToBezier(const BezierPoint2p& p1,const BezierPoint2p& p2, Bezier2p& b)$/;"	f
BezierPointToBezierSeq	.\WEDCore\WED_GISUtils.h	/^void BezierPointToBezierSeq(InputIterator s, InputIterator e, OutputIterator oi)$/;"	f
BezierPolygon2	.\Utils\CompGeomDefs2.h	/^				BezierPolygon2() 						: vector<Bezier2>() 		{ }$/;"	f	struct:BezierPolygon2
BezierPolygon2	.\Utils\CompGeomDefs2.h	/^				BezierPolygon2(__Iterator s, __Iterator e) : vector<Bezier2>(s,e) { }$/;"	f	struct:BezierPolygon2
BezierPolygon2	.\Utils\CompGeomDefs2.h	/^				BezierPolygon2(const BezierPolygon2& rhs)   : vector<Bezier2>(rhs) 	{ }$/;"	f	struct:BezierPolygon2
BezierPolygon2	.\Utils\CompGeomDefs2.h	/^				BezierPolygon2(int x) 				: vector<Bezier2>(x) 	{ }$/;"	f	struct:BezierPolygon2
BezierPolygon2	.\Utils\CompGeomDefs2.h	/^struct BezierPolygon2 : public vector<Bezier2> {$/;"	s
BezierPolygon2p	.\WEDCore\WED_GISUtils.h	/^struct BezierPolygon2p : public vector<Bezier2p> {$/;"	s
BezierSeqIsRing	.\WEDCore\WED_GISUtils.h	/^bool BezierSeqIsRing(InputIterator s, InputIterator e)$/;"	f
BezierToBezierPointEnd	.\WEDCore\WED_GISUtils.cpp	/^void	BezierToBezierPointEnd	 (const Bezier2& prev,					BezierPoint2& out_pt)$/;"	f
BezierToBezierPointEnd	.\WEDCore\WED_GISUtils.cpp	/^void	BezierToBezierPointEnd	 (const Bezier2p& prev,					BezierPoint2p& out_pt)$/;"	f
BezierToBezierPointMiddle	.\WEDCore\WED_GISUtils.cpp	/^void	BezierToBezierPointMiddle(const Bezier2& prev,const Bezier2& next,BezierPoint2& out_pt)$/;"	f
BezierToBezierPointMiddle	.\WEDCore\WED_GISUtils.cpp	/^void	BezierToBezierPointMiddle(const Bezier2p& prev,const Bezier2p& next,BezierPoint2p& out_pt)$/;"	f
BezierToBezierPointSeq	.\WEDCore\WED_GISUtils.h	/^void	BezierToBezierPointSeq(InputIterator s, InputIterator e, OutputIterator oi)$/;"	f
BezierToBezierPointStart	.\WEDCore\WED_GISUtils.cpp	/^void	BezierToBezierPointStart (const Bezier2& next,BezierPoint2& out_pt)$/;"	f
BezierToBezierPointStart	.\WEDCore\WED_GISUtils.cpp	/^void	BezierToBezierPointStart (const Bezier2p& next,BezierPoint2p& out_pt)$/;"	f
BezierToSegments	.\XESCore\Airports.cpp	/^void	BezierToSegments($/;"	f
Bezier_Seq_Iterator	.\WEDEntities\WED_GISPolygon.cpp	/^Bezier_Seq_Iterator::Bezier_Seq_Iterator(IGISPointSequence * seq, GISLayer_t l, int n) :$/;"	f	class:Bezier_Seq_Iterator
Bezier_Seq_Iterator	.\WEDEntities\WED_GISPolygon.cpp	/^Bezier_Seq_Iterator::Bezier_Seq_Iterator(const Bezier_Seq_Iterator& rhs) :$/;"	f	class:Bezier_Seq_Iterator
Bezier_Seq_Iterator	.\WEDEntities\WED_GISPolygon.cpp	/^class Bezier_Seq_Iterator {$/;"	c	file:
BinaryDEMFromEnum	.\XESCore\DEMAlgs.cpp	/^int	BinaryDEMFromEnum(DEMGeo& dem, float value, float inAccept, float inFail)$/;"	f
BindTex	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::BindTex(int id, int unit)$/;"	f	class:GUI_GraphState
BindTexture	.\UI\FontMgr.cpp	/^static void BindTexture			(int in1,	int in2)	{glBindTexture(in1, in2);}$/;"	f	file:
BindTexture	.\UI\FontMgr.h	/^	void (*BindTexture)		(int target,	int texture);$/;"	m	struct:FontFuncs
BlobifyEnvironment	.\XESCore\DEMAlgs.cpp	/^void BlobifyEnvironment(const DEMGeo& variant_source, const DEMGeo& base, DEMGeo& derived, int xmult, int ymult)$/;"	f
BlobifyEnvironmentEnum	.\XESCore\DEMAlgs.cpp	/^void BlobifyEnvironmentEnum(const DEMGeo& variant_source, const DEMGeo& base, DEMGeo& derived, int xmult, int ymult)$/;"	f
BlockAlgs_H	.\XESCore\BlockAlgs.h	25;"	d
BlockDefs_H	.\XESCore\BlockDefs.h	25;"	d
BlockFill_H	.\XESCore\BlockFill.h	25;"	d
BlockToFile	.\Installer\XFileTwiddle.unix.cpp	/^int		BlockToFile(const char * inPath, char * inPtr)$/;"	f
BlockToFile	.\Installer\XFileTwiddle.win.cpp	/^int		BlockToFile(const char * inPath, char * inPtr)$/;"	f
BlockToFile	.\Utils\XFileTwiddle.mac.cpp	/^int		BlockToFile(const char * inPath, char * inPtr)$/;"	f
BlockToFile	.\Utils\XFileTwiddle.unix.cpp	/^int		BlockToFile(const char * inPath, char * inPtr)$/;"	f
BlockToFile	.\Utils\XFileTwiddle.win.cpp	/^int		BlockToFile(const char * inPath, char * inPtr)$/;"	f
Block_2	.\XESCore\BlockDefs.h	/^typedef CGAL::Arrangement_2<Block_traits_2,Block_dcel>					Block_2;$/;"	t
Block_dcel	.\XESCore\BlockDefs.h	/^								CGAL::Gps_face_base>								Block_dcel;$/;"	t
Block_locator	.\XESCore\BlockDefs.h	/^typedef CGAL::Arr_landmarks_point_location<Block_2>  Block_locator;$/;"	t
Block_traits_2	.\XESCore\BlockDefs.h	/^typedef CGAL::Arr_consolidated_curve_data_traits_2<GK_TraitsBase, int>				Block_traits_2;$/;"	t
Boolean	.\AC3DPlugins\dsf_export.cpp	29;"	d	file:
Boolean	.\AC3DPlugins\obj8_export.cpp	57;"	d	file:
Boolean	.\AC3DPlugins\obj8_import.cpp	57;"	d	file:
BoxRasterizer	.\Utils\PolyRasterUtils.h	/^BoxRasterizer<Number>::BoxRasterizer(PolyRasterizer<Number> * raster) : rasterizer(raster)$/;"	f	class:BoxRasterizer
BoxRasterizer	.\Utils\PolyRasterUtils.h	/^struct	BoxRasterizer {$/;"	s
BreakString	.\Utils\XUtils.cpp	/^void	BreakString(const string& line, vector<string>& words)$/;"	f
BreakupAptWindings	.\XESCore\AptAlgs.h	/^__input_iterator BreakupAptWindings( __input_iterator start, __input_iterator end, __output_iterator o)$/;"	f
BridgeInfo	.\XESCore\NetTables.h	/^struct	BridgeInfo {$/;"	s
BridgeInfoTable	.\XESCore\NetTables.h	/^typedef	vector<BridgeInfo>				BridgeInfoTable;$/;"	t
BridgeRebuild	.\XESCore\Hydro.cpp	/^void	BridgeRebuild(Pmwx& ioMap, ProgressFunc inFunc)$/;"	f
BroadcastMessage	.\GUI\GUI_Broadcaster.cpp	/^void	GUI_Broadcaster::BroadcastMessage(intptr_t inMsg, intptr_t inParam)$/;"	f	class:GUI_Broadcaster
BucketIndex	.\lib_json\include\json\value.h	/^      typedef unsigned int BucketIndex;$/;"	t	class:Json::ValueInternalMap
BufferPolygon	.\XESCore\MapBuffer.cpp	/^void	BufferPolygon($/;"	f
BufferPolygonSet	.\XESCore\MapBuffer.cpp	/^void	BufferPolygonSet($/;"	f
BufferPolygonWithHoles	.\XESCore\MapBuffer.cpp	/^void	BufferPolygonWithHoles($/;"	f
BuildAccels	.\GUI\GUI_Application.cpp	/^static	void		BuildAccels(void)$/;"	f	file:
BuildAccels	.\UI\XWidgetApp.cpp	/^static	void		BuildAccels(void)$/;"	f	file:
BuildBypass	.\XESCore\Hydro.cpp	/^bool	BuildBypass(Halfedge_handle b, Halfedge_handle e, LongStrand& s)$/;"	f
BuildChunk	.\Installer\InstallerProcs.cpp	/^int	BuildChunk(const char * inPathOld, const char * inPathNew, InstallerChunk& outChunk, const char * basePath)$/;"	f
BuildCorrectedWaterBody	.\XESCore\Hydro.cpp	/^void	BuildCorrectedWaterBody(const DEMGeo& origElev, DEMGeo& wetElev, const set<Face_handle>& wetFaces)$/;"	f
BuildCutLinesInDEM	.\XESCore\MeshAlgs_old.cpp	/^void	BuildCutLinesInDEM($/;"	f
BuildDSF	.\XESCore\DSFBuilder.cpp	/^void	BuildDSF($/;"	f
BuildDifferentialDegree	.\RawImport\AptElev.cpp	/^void	BuildDifferentialDegree(const char * file, int west, int south, int hres, int vres, DEMGeo& ioDem, bool zap)$/;"	f
BuildEdgeString	.\XESCore\MapAlgs.cpp	/^static bool BuildEdgeString(Halfedge_handle e, vector<Point_2>& out_pts)$/;"	f	file:
BuildElements	.\XPTools\TaxiMaker.cpp	/^double	BuildElements(XObj& obj, const vector<int>& elements, bool isBack, bool isUnmarked, double add_extra, double width)$/;"	f
BuildEndCaps	.\XPTools\TaxiMaker.cpp	/^void	BuildEndCaps(XObj& obj, double width)$/;"	f
BuildFaceBuckets	.\XESTools\MapBuckets.cpp	/^void	BuildFaceBuckets(Pmwx& inMap, MapFaceBuckets& outBuckets)$/;"	f
BuildFakeLib	.\XESTools\MiscFuncs.cpp	/^void	BuildFakeLib(const char * dir)$/;"	f
BuildHalfedgeBuckets	.\XESTools\MapBuckets.cpp	/^void	BuildHalfedgeBuckets(Pmwx& inMap, MapHalfedgeBuckets& outBuckets)$/;"	f
BuildInstaller	.\Installer\BuildInstaller.cpp	/^int	BuildInstaller(const char * inOldBase,$/;"	f
BuildLongStrand	.\XESCore\Hydro.cpp	/^void	BuildLongStrand(Halfedge_handle seed, LongStrand& out_s)$/;"	f
BuildNetworkTopology	.\XESCore\NetPlacement.cpp	/^void	BuildNetworkTopology(Pmwx& inMap, CDT& \/*inMesh*\/, Net_JunctionInfoSet& outJunctions, Net_ChainInfoSet& outChains)$/;"	f
BuildOneFakeFacade	.\XESTools\MiscFuncs.cpp	/^void	BuildOneFakeFacade(const char * dir, const char * fname)$/;"	f
BuildOneFakeObject	.\XESTools\MiscFuncs.cpp	/^void	BuildOneFakeObject(const char * dir, const char * fname, double width, double depth, double height, int faketype)$/;"	f
BuildOnePatch	.\DSF\DSFLib_TestGen.cpp	/^void	BuildOnePatch(DSFCallbacks_t * cbs, void * f, int x, int y)$/;"	f
BuildOnePatch	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^void	BuildOnePatch(DSFCallbacks_t * cbs, void * f, int x, int y)$/;"	f
BuildOneRoadSegment	.\Utils\RoadNetUtils.cpp	/^static	void	BuildOneRoadSegment($/;"	f	file:
BuildPointSequence	.\XESCore\MapBuffer.cpp	/^static void	BuildPointSequence($/;"	f	file:
BuildPoles	.\XPTools\TaxiMaker.cpp	/^void	BuildPoles(XObj& obj, double width)$/;"	f
BuildPtCache	.\XESCore\Hydro.cpp	/^static void BuildPtCache(Pmwx& inMap, const Bbox2& lim, int divs, vector<pair<Bbox2, vector<Point2> > >& outCache)$/;"	f	file:
BuildRiverPolygon	.\XESCore\Hydro.cpp	/^void	BuildRiverPolygon(int x, int y, const DEMGeo& hydro_dir, const DEMGeo& hydro_flw, const DEMGeo& hydro_elev, const DEMGeo& is_river, Polygon2& poly, vector<double>& height)$/;"	f
BuildRivers	.\XESCore\Hydro.cpp	/^void	BuildRivers(const Pmwx& inMap, DEMGeoMap& ioDEMs, int borders[4], ProgressFunc inProg)$/;"	f
BuildRoadDensityDEM	.\XESCore\DEMAlgs.cpp	/^static void	BuildRoadDensityDEM(const Pmwx& inMap, DEMGeo& ioTransport)$/;"	f	file:
BuildRoadsForFace	.\XESCore\TensorRoads.cpp	/^void	BuildRoadsForFace($/;"	f
BuildSmoothedPts	.\XESCore\DEMToVector.cpp	/^void BuildSmoothedPts(const Polygon2& pts, Polygon2& op, bool smooth)$/;"	f
BuildStrip	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::BuildStrip(const triangle_strip TriStrip)$/;"	f	class:triangle_stripper::tri_stripper
BuildTokenConversionMap	.\XESCore\EnumSystem.cpp	/^void	BuildTokenConversionMap($/;"	f
BuildTokenReverseMap	.\XESCore\EnumSystem.cpp	/^void	BuildTokenReverseMap($/;"	f
BuildVertexBuckets	.\XESTools\MapBuckets.cpp	/^void	BuildVertexBuckets(Pmwx& inMap, MapVertexBuckets& outBuckets)$/;"	f
BulkInsertRoads	.\XESCore\TensorRoads.cpp	/^void BulkInsertRoads(vector<Segment2>	roads, Pmwx& io_map)$/;"	f
BulkZapRoads	.\XESCore\TensorRoads.cpp	/^void BulkZapRoads(const DEMGeo& inUrbanDensity, Pmwx& io_map)$/;"	f
BurnInAirport	.\XESCore\Airports.cpp	/^void BurnInAirport($/;"	f
BurnLowestNearDrainPt	.\XESCore\Hydro.cpp	/^static void BurnLowestNearDrainPt(const DEMGeo& elev, DEMGeo& hydro_dir, double lon, double lat)$/;"	f	file:
BurnRiver	.\XESCore\Hydro.cpp	/^static void BurnRiver(DEMGeo& dem, const Point2& p1, const Point2& p2, float v)$/;"	f	file:
C	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::index tri_stripper::triangle::C() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle
C	.\XESCore\BlockAlgs.cpp	/^inline HackKernel::Point_2 C(const FastKernel::Point_2& p)$/;"	f
CAB	.\DSF\tri_stripper_101\tri_stripper.h	/^		enum start_order { ABC = 0, BCA = 1, CAB = 2 };$/;"	e	enum:triangle_stripper::tri_stripper::triangle_strip::start_order
CALLBACK	.\WEDCore\WED_GISUtils.cpp	339;"	d	file:
CALLBACK	.\WEDMap\WED_DrawUtils.cpp	93;"	d	file:
CANNOT_OPEN_ERR	.\Env\EnvParser.h	27;"	d
CAN_OPTIMIZE_BEZIERS	.\XESCore\DSFBuilder.cpp	86;"	d	file:
CARBONMEMMAP_H	.\Utils\CarbonMemMap.h	24;"	d
CASESENSITIVITYDEFAULTVALUE	.\Utils\unzip.c	231;"	d	file:
CASESENSITIVITYDEFAULTVALUE	.\Utils\unzip.c	233;"	d	file:
CASESENSITIVITYDEFAULT_NO	.\Utils\unzip.c	35;"	d	file:
CAST_CMD	.\AC3DPlugins\ac_utils.h	35;"	d
CAST_CMD	.\AC3DPlugins\xp_plugin.cpp	56;"	d	file:
CAST_WITH_CHECK	.\WEDCore\WED_Validate.cpp	89;"	d	file:
CDT	.\XESCore\MeshDefs.h	/^class CDT : public CDTBase {$/;"	c
CDTBase	.\XESCore\MeshDefs.h	/^typedef	CGAL::Constrained_Delaunay_triangulation_2<FastKernel, TDS, CGAL::Exact_predicates_tag>	CDTBase;$/;"	t
CDT_Recover_Handle	.\XESCore\GreedyMesh.cpp	/^inline CDT::Face_handle CDT_Recover_Handle(CDT::Face *the_face)$/;"	f
CDT_Recover_Handle	.\XESCore\MeshSimplify.cpp	/^inline CDT::Vertex_handle CDT_Recover_Handle(CDT::Vertex *the_vert)$/;"	f
CDT_he_source	.\XESCore\MeshDefs.h	/^inline CDT::Vertex_handle	CDT_he_source(const CDT::Edge& e) { return e.first->vertex(CDT::ccw(e.second)); }$/;"	f
CDT_he_target	.\XESCore\MeshDefs.h	/^inline CDT::Vertex_handle	CDT_he_target(const CDT::Edge& e) { return e.first->vertex(CDT::cw (e.second)); }$/;"	f
CDT_he_twin	.\XESCore\MeshDefs.h	/^inline CDT::Edge			CDT_he_twin(CDT::Edge& e) { 	$/;"	f
CDT_make_he	.\XESCore\MeshDefs.h	/^inline CDT::Edge			CDT_make_he(const CDT& cdt, CDT::Vertex_handle a, CDT::Vertex_handle b)$/;"	f
CDT_next_constraint	.\XESCore\MeshDefs.h	/^inline CDT::Edge			CDT_next_constraint(CDT::Edge& e)$/;"	f
CDropTarget	.\UI\XWin32DND.cpp	/^CDropTarget::CDropTarget(void)$/;"	f	class:CDropTarget
CDropTarget	.\UI\XWin32DND.h	/^class CDropTarget : public IDropTarget {$/;"	c
CELL_MARGIN	.\GUI\GUI_TextTable.cpp	52;"	d	file:
CENID_POLYID	.\Tiger\TIGERTypes.h	/^typedef	string			CENID_POLYID;$/;"	t
CENTRALHEADERMAGIC	.\Utils\zip.c	77;"	d	file:
CFCC	.\Tiger\TIGERTypes.h	/^typedef	string			CFCC;$/;"	t
CFStringToSTL	.\GUI\GUI_Unicode.cpp	/^static void	CFStringToSTL(CFStringRef cfstr, string& stl_str, CFStringEncoding encoding)$/;"	f	file:
CGAL	.\XESCore\MeshConformer.h	/^namespace CGAL {$/;"	n
CGAL2DOUBLE	.\Obj\XDefs.h	273;"	d
CGALAlgs_H	.\XESCore\CGALAlgs.h	25;"	d
CGALDefs_H	.\XESCore\CGALDefs.h	25;"	d
CGALFailure	.\MeshTool\MeshTool.cpp	/^void	CGALFailure($/;"	f
CGALFailure	.\XESTools\GISTool copy.cpp	/^void	CGALFailure($/;"	f
CGALFailure	.\XESTools\GISTool.cpp	/^void	CGALFailure($/;"	f
CGALTYPES_H	.\XESCore\CGALTypes.h	24;"	d
CGAL_BETA_SIMPLIFIER	.\Obj\XDefs.h	61;"	d
CGAL_midpoint	.\Obj\XDefs.h	277;"	d
CHECK_ERR	.\XPTools\ViewObj.cpp	/^void	CHECK_ERR(void)$/;"	f
CHECK_GL_ERR	.\Obj\ObjDraw.cpp	33;"	d	file:
CHECK_IT	.\DSF\DSFLib_Print.cpp	35;"	d	file:
CHECK_IT	.\DSF\dsflib_013005\DSFLib_Print.cpp	35;"	d	file:
CHECK_NODE_ID	.\OneOffs\osm_tile.c	128;"	d	file:
CHECK_REL_ID	.\OneOffs\osm_tile.c	131;"	d	file:
CHECK_TRI	.\XESCore\DSFBuilder.cpp	/^void 	CHECK_TRI(CDT::Vertex_handle a, CDT::Vertex_handle b, CDT::Vertex_handle c)$/;"	f
CHECK_WAY_ID	.\OneOffs\osm_tile.c	129;"	d	file:
CHECK_ZERO_LENGTH	.\WEDCore\WED_Validate.cpp	70;"	d	file:
CHRTYPE	.\Utils\MemFileUtils.cpp	135;"	d	file:
CIT2GUI	.\GUI\GUI_Clipboard.cpp	/^static int	CIT2GUI(GUI_CIT in_t, GUI_ClipType& out_t)$/;"	f	file:
CLIENT_NAME	.\WEDNetwork\WED_NWDefs.h	34;"	d
CLIENT_VERS	.\WEDXPlugin\WED_XPluginClient.cpp	34;"	d	file:
CLOCKWISE	.\Utils\CompGeomDefs2.h	/^	CLOCKWISE = -1,$/;"	e	enum:__anon89
CLUSTERS	.\XESCore\MeshConformer.h	/^    CLUSTERS, \/**< \\c this clusters are initialized. *\/$/;"	e	enum:CGAL::Triangulation_conformer_any_2::Initialization
COLLINEAR	.\Utils\CompGeomDefs2.h	/^	COLLINEAR = 0,$/;"	e	enum:__anon89
COL_WIDTH	.\WEDMap\WED_ToolInfoAdapter.cpp	/^const int COL_WIDTH = 100;$/;"	v
COMPGEOMDEFS2_H	.\Utils\CompGeomDefs2.h	24;"	d
COMPGEOMDEFS3_H	.\Utils\CompGeomDefs3.h	24;"	d
COMPGEOMUTILS_H	.\Utils\CompGeomUtils.h	24;"	d
CONFIGSYSTEM_H	.\XESCore\ConfigSystem.h	24;"	d
CONST	.\AC3DPlugins\TclStubs.h	37;"	d
CONST84	.\AC3DPlugins\TclStubs.h	36;"	d
CONTTYPE	.\Utils\MemFileUtils.cpp	139;"	d	file:
CONVERTEROBJ3DS_H	.\XPTools\ConvertObj3DS.h	24;"	d
CONVERTEROBJDXF_H	.\XPTools\ConvertObjDXF.h	24;"	d
COPLANAR_CHECK	.\Utils\Skeleton.cpp	273;"	d	file:
COUNTERCLOCKWISE	.\Utils\CompGeomDefs2.h	/^	COUNTERCLOCKWISE = 1,$/;"	e	enum:__anon89
COVERAGEFINDER_H	.\Utils\CoverageFinder.h	25;"	d
CPPTL_AUTOLINK_DLL	.\lib_json\include\json\autolink.h	17;"	d
CPPTL_AUTOLINK_DLL	.\lib_json\include\json\autolink.h	19;"	d
CPPTL_AUTOLINK_NAME	.\lib_json\include\json\autolink.h	16;"	d
CPPTL_JSON_FEATURES_H_INCLUDED	.\lib_json\include\json\features.h	7;"	d
CPPTL_JSON_H_INCLUDED	.\lib_json\include\json\value.h	7;"	d
CPPTL_JSON_READER_H_INCLUDED	.\lib_json\include\json\reader.h	7;"	d
CRC_LOCALHEADER_OFFSET	.\Utils\zip.c	81;"	d	file:
CRLF	.\AC3DPlugins\XPExporterMac_xcode.h	26;"	d
CRLF	.\Obj\XDefs.h	31;"	d
CRLF	.\Obj\XDefs.h	33;"	d
CRLF	.\Obj\XObjReadWrite.cpp	34;"	d	file:
CRLF	.\Obj\XObjReadWrite.cpp	36;"	d	file:
CRLF	.\Obj\XObjReadWrite.cpp	38;"	d	file:
CTOR_f	.\WEDCore\WED_Persistent.h	/^	typedef WED_Persistent * (* CTOR_f)(WED_Archive *, int);$/;"	t	class:WED_Persistent
CUSTOM_PACKAGE_PATH	.\WEDCore\WED_PackageMgr.cpp	33;"	d	file:
CUTOFF	.\XESCore\MapBuffer.cpp	401;"	d	file:
CZString	.\lib_json\include\json\value.h	/^      class CZString $/;"	c	class:Json::Value
CZString	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::CZString( ArrayIndex index )$/;"	f	class:Json::Value::CZString
CZString	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::CZString( const CZString &other )$/;"	f	class:Json::Value::CZString
CZString	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::CZString( const char *cstr, DuplicationPolicy allocate )$/;"	f	class:Json::Value::CZString
CacheBuild	.\WEDEntities\WED_Entity.cpp	/^int	WED_Entity::CacheBuild(int flags) const$/;"	f	class:WED_Entity
CacheInval	.\WEDEntities\WED_Entity.cpp	/^void	WED_Entity::CacheInval(int flags)$/;"	f	class:WED_Entity
CacheKey	.\WEDCore\WED_Archive.cpp	/^long long WED_Archive::CacheKey(void)$/;"	f	class:WED_Archive
CacheKey	.\WEDMap\WED_MapZoomerNew.h	/^			long long	CacheKey(void) { return mCacheKey; }$/;"	f	class:WED_MapZoomerNew
Calc2ndDerivative	.\XESCore\MeshAlgs.cpp	/^void	Calc2ndDerivative(DEMGeo& deriv)$/;"	f
CalcBgknd	.\WEDTCE\WED_TCE.cpp	/^void WED_TCE::CalcBgknd(void)$/;"	f	class:WED_TCE
CalcBoundingBox	.\XESCore\MapAlgs.cpp	/^void	CalcBoundingBox($/;"	f
CalcCellBounds	.\GUI\GUI_Table.cpp	/^int		GUI_Header::CalcCellBounds(int x, int bounds[4])$/;"	f	class:GUI_Header
CalcCellBounds	.\GUI\GUI_Table.cpp	/^int		GUI_Side::CalcCellBounds(int y, int bounds[4])$/;"	f	class:GUI_Side
CalcCellBounds	.\GUI\GUI_Table.cpp	/^int		GUI_Table::CalcCellBounds(int x, int y, int bounds[4])$/;"	f	class:GUI_Table
CalcCurX	.\Utils\PolyRasterUtils.h	/^Number	PolyRasterSeg_t<Number>::CalcCurX(Number now) const$/;"	f	class:PolyRasterSeg_t
CalcFans	.\XESCore\TriFan.cpp	/^void		TriFanBuilder::CalcFans(void)$/;"	f	class:TriFanBuilder
CalcHandlePositions	.\ObjEdit\OE_TexEdWindow.cpp	/^static	void	CalcHandlePositions($/;"	f	file:
CalcHelpTip	.\GUI\GUI_Window.cpp	/^int			GUI_Window::CalcHelpTip(int x, int y, int bounds[4], string& msg)$/;"	f	class:GUI_Window
CalcHelpTip	.\UI\XWin.h	/^	virtual int					CalcHelpTip(int x, int y, int bounds[4], string& msg) { return 0; }$/;"	f	class:XWin
CalcJointAngleDeg	.\Utils\RoadNetUtils.cpp	/^static	double	CalcJointAngleDeg(const Point3& p1, const Point3& p2, const Point3& p3)$/;"	f	file:
CalcLocation	.\Utils\HLCamera.cpp	/^void	xcam_class::CalcLocation(GLdouble	location[3])$/;"	f	class:xcam_class
CalcMeshError	.\XESCore\MeshAlgs.cpp	/^int	CalcMeshError(CDT& mesh, DEMGeo& elev, float& out_min, float& out_max, float& out_ave, float& std_dev, ProgressFunc inFunc)$/;"	f
CalcMeshTextures	.\XESCore\MeshAlgs.cpp	/^int	CalcMeshTextures(CDT& inMesh, map<int, int>& out_lus)$/;"	f
CalcOneTriError	.\XESCore\GreedyMesh.cpp	/^void	CalcOneTriError(CDT::Face_handle face, double size_lim)$/;"	f
CalcPavementBezier	.\XESCore\AptIO.cpp	/^static void CalcPavementBezier(AptInfo_t * io_airport, AptPolygon_t * poly, float r, float  g, float b, float simp)$/;"	f	file:
CalcPavementHelipad	.\XESCore\AptIO.cpp	/^static void CalcPavementHelipad(AptInfo_t * io_airport, const POINT2& c, float h, float w, float rwy_len)$/;"	f	file:
CalcPavementOGL	.\XESCore\AptIO.cpp	/^static void CalcPavementOGL($/;"	f	file:
CalcRoadTypes	.\XESCore\NetAlgs.cpp	/^void	CalcRoadTypes(Pmwx& ioMap, const DEMGeo& inElevation, const DEMGeo& inUrbanDensity, const DEMGeo& inTemp, const DEMGeo& inRain, ProgressFunc inProg)$/;"	f
CalcSafetyLength	.\Utils\RoadNetUtils.cpp	/^static	double	CalcSafetyLength(double angle, double width_us, double width_them)$/;"	f	file:
CalcShapedJointAngle	.\Utils\RoadNetUtils.cpp	/^static	double	CalcShapedJointAngle(const Shape_Point_t& p1, const Shape_Point_t& p2, const Shape_Point_t& p3)$/;"	f	file:
CalcShapedJointAngleWithVector	.\Utils\RoadNetUtils.cpp	/^static	double	CalcShapedJointAngleWithVector(const Shape_Point_t& p1, const Shape_Point_t& p2, const Vector3& v)$/;"	f	file:
CalcSlopeParams	.\XESCore\DEMAlgs.cpp	/^void	CalcSlopeParams(DEMGeoMap& ioDEMs, bool force, ProgressFunc inProg)$/;"	f
CalcTexSize	.\UI\FontMgr.cpp	/^void FontMgr::CalcTexSize($/;"	f	class:FontMgr
CalcVisibleCells	.\GUI\GUI_Table.cpp	/^int		GUI_Header::CalcVisibleCells(int bounds[2])$/;"	f	class:GUI_Header
CalcVisibleCells	.\GUI\GUI_Table.cpp	/^int		GUI_Side::CalcVisibleCells(int bounds[2])$/;"	f	class:GUI_Side
CalcVisibleCells	.\GUI\GUI_Table.cpp	/^int		GUI_Table::CalcVisibleCells(int bounds[4])$/;"	f	class:GUI_Table
CalculateFilter	.\XESCore\DEMAlgs.cpp	/^void	CalculateFilter(int dim, float * k, int kind, bool normalize)$/;"	f
CalculateMeshNormal	.\XESCore\MeshAlgs.cpp	/^inline Vector3 CalculateMeshNormal(CDT::Face_handle f)$/;"	f
CalculateMeshNormals	.\XESCore\MeshAlgs.cpp	/^void CalculateMeshNormals(CDT& ioMesh)$/;"	f
CalculateRescaling	.\RenderFarmUI\RF_Export.cpp	/^void	CalculateRescaling(XPWidgetID)$/;"	f
CalibrateSBs	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::CalibrateSBs(void)$/;"	f	class:GUI_ScrollerPane
CamUpdFunc	.\WEDXPlugin\WED_XPluginCamera.cpp	/^int WED_XPluginCamera::CamUpdFunc(XPLMCameraPosition_t * outCameraPosition,$/;"	f	class:WED_XPluginCamera
Camera	.\Utils\XCull.h	/^	typedef typename Traits::Camera		Camera;$/;"	t	class:XCull
CanBeContiguous	.\DSF\DSFPointPool.cpp	/^bool			DSFSharedPointPool::CanBeContiguous(const DSFTupleVector& inPoints)$/;"	f	class:DSFSharedPointPool
CanBeContiguous	.\DSF\dsflib_013005\DSFPointPool.cpp	/^bool			DSFSharedPointPool::CanBeContiguous(const DSFTupleVector& inPoints)$/;"	f	class:DSFSharedPointPool
CanCreateNow	.\WEDMap\WED_CreateBoxTool.cpp	/^bool		WED_CreateBoxTool::CanCreateNow(void)$/;"	f	class:WED_CreateBoxTool
CanCreateNow	.\WEDMap\WED_CreateEdgeTool.cpp	/^bool		WED_CreateEdgeTool::CanCreateNow(void)$/;"	f	class:WED_CreateEdgeTool
CanCreateNow	.\WEDMap\WED_CreateLineTool.cpp	/^bool		WED_CreateLineTool::CanCreateNow(void)$/;"	f	class:WED_CreateLineTool
CanCreateNow	.\WEDMap\WED_CreatePointTool.cpp	/^bool		WED_CreatePointTool::CanCreateNow(void)$/;"	f	class:WED_CreatePointTool
CanCreateNow	.\WEDMap\WED_CreatePolygonTool.cpp	/^bool		WED_CreatePolygonTool::CanCreateNow(void)$/;"	f	class:WED_CreatePolygonTool
CanDropBetweenColumns	.\WEDImportExport\WED_AptTable.h	/^	virtual	GUI_DragOperation		CanDropBetweenColumns($/;"	f	class:WED_AptTable
CanDropBetweenColumns	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	GUI_DragOperation		CanDropBetweenColumns($/;"	f	class:WED_ICAOTable
CanDropBetweenColumns	.\WEDImportExport\WED_VerTable.h	/^	virtual	GUI_DragOperation		CanDropBetweenColumns($/;"	f	class:WED_VerTable
CanDropBetweenColumns	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	GUI_DragOperation		CanDropBetweenColumns($/;"	f	class:WED_LibraryListAdapter
CanDropBetweenColumns	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	GUI_DragOperation		CanDropBetweenColumns($/;"	f	class:WED_ToolInfoAdapter
CanDropBetweenColumns	.\WEDProperties\WED_PropertyTable.cpp	/^GUI_DragOperation		WED_PropertyTable::CanDropBetweenColumns($/;"	f	class:WED_PropertyTable
CanDropBetweenColumns	.\WEDWindows\WED_FilterBar.h	/^	virtual	GUI_DragOperation		CanDropBetweenColumns($/;"	f	class:WED_FilterBar
CanDropBetweenColumns	.\WEDWindows\WED_PackageListAdapter.cpp	/^GUI_DragOperation		WED_PackageListAdapter::CanDropBetweenColumns($/;"	f	class:WED_PackageListAdapter
CanDropBetweenRows	.\WEDImportExport\WED_AptTable.h	/^	virtual	GUI_DragOperation		CanDropBetweenRows($/;"	f	class:WED_AptTable
CanDropBetweenRows	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	GUI_DragOperation		CanDropBetweenRows($/;"	f	class:WED_ICAOTable
CanDropBetweenRows	.\WEDImportExport\WED_VerTable.h	/^	virtual	GUI_DragOperation		CanDropBetweenRows($/;"	f	class:WED_VerTable
CanDropBetweenRows	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	GUI_DragOperation		CanDropBetweenRows($/;"	f	class:WED_LibraryListAdapter
CanDropBetweenRows	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	GUI_DragOperation		CanDropBetweenRows($/;"	f	class:WED_ToolInfoAdapter
CanDropBetweenRows	.\WEDProperties\WED_PropertyTable.cpp	/^GUI_DragOperation		WED_PropertyTable::CanDropBetweenRows($/;"	f	class:WED_PropertyTable
CanDropBetweenRows	.\WEDWindows\WED_FilterBar.h	/^	virtual	GUI_DragOperation		CanDropBetweenRows($/;"	f	class:WED_FilterBar
CanDropBetweenRows	.\WEDWindows\WED_PackageListAdapter.cpp	/^GUI_DragOperation		WED_PackageListAdapter::CanDropBetweenRows($/;"	f	class:WED_PackageListAdapter
CanDropIntoCell	.\WEDImportExport\WED_AptTable.h	/^	virtual	GUI_DragOperation		CanDropIntoCell($/;"	f	class:WED_AptTable
CanDropIntoCell	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	GUI_DragOperation		CanDropIntoCell($/;"	f	class:WED_ICAOTable
CanDropIntoCell	.\WEDImportExport\WED_VerTable.h	/^	virtual	GUI_DragOperation		CanDropIntoCell($/;"	f	class:WED_VerTable
CanDropIntoCell	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	GUI_DragOperation		CanDropIntoCell($/;"	f	class:WED_LibraryListAdapter
CanDropIntoCell	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	GUI_DragOperation		CanDropIntoCell($/;"	f	class:WED_ToolInfoAdapter
CanDropIntoCell	.\WEDProperties\WED_PropertyTable.cpp	/^GUI_DragOperation		WED_PropertyTable::CanDropIntoCell($/;"	f	class:WED_PropertyTable
CanDropIntoCell	.\WEDWindows\WED_FilterBar.h	/^	virtual	GUI_DragOperation		CanDropIntoCell($/;"	f	class:WED_FilterBar
CanDropIntoCell	.\WEDWindows\WED_PackageListAdapter.cpp	/^GUI_DragOperation		WED_PackageListAdapter::CanDropIntoCell($/;"	f	class:WED_PackageListAdapter
CanFlatten	.\XESCore\MeshAlgs.h	/^inline bool CanFlatten(CDT::Face_handle f)$/;"	f
CanHandleCommand	.\GUI\GUI_Application.cpp	/^int			GUI_Application::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:GUI_Application
CanHandleCommand	.\GUI\GUI_Commander.h	/^	virtual	int				CanHandleCommand(int command, string& ioName, int& ioCheck) { return 0; }$/;"	f	class:GUI_Commander
CanHandleCommand	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:GUI_TextField
CanHandleCommand	.\RenderFarmUI\RF_Application.cpp	/^int		RF_Application::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:RF_Application
CanHandleCommand	.\RenderFarmUI\RF_MapView.cpp	/^int		RF_MapView::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:RF_MapView
CanHandleCommand	.\WEDCore\WED_Application.cpp	/^int		WED_Application::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:WED_Application
CanHandleCommand	.\WEDWindows\WED_DocumentWindow.cpp	/^int	WED_DocumentWindow::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:WED_DocumentWindow
CanHandleCommand	.\WEDWindows\WED_PackageWindow.cpp	/^int	WED_PackageWindow::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:WED_PackageWindow
CanHandleCommand	.\WEDWindows\WED_StartWindow.cpp	/^int			WED_StartWindow::CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:WED_StartWindow
CanMerge	.\XPTools\Env2DSF.cpp	/^bool	CanMerge(		int nodeNum,$/;"	f
CanQuit	.\RenderFarmUI\RF_Application.cpp	/^bool	RF_Application::CanQuit(void)$/;"	f	class:RF_Application
CanQuit	.\WEDCore\WED_Application.cpp	/^bool	WED_Application::CanQuit(void)$/;"	f	class:WED_Application
CanQuitCB	.\GUI\GUI_Application.cpp	/^int GUI_Application::CanQuitCB(void * ref)$/;"	f	class:GUI_Application
CanSetCellHeight	.\GUI\GUI_SimpleTableGeometry.cpp	/^bool		GUI_SimpleTableGeometry::CanSetCellHeight(void) const { return false; }$/;"	f	class:GUI_SimpleTableGeometry
CanSetCellHeight	.\WEDMap\WED_ToolInfoAdapter.cpp	/^bool		WED_ToolInfoAdapter::CanSetCellHeight(void) const$/;"	f	class:WED_ToolInfoAdapter
CanSetCellHeight	.\WEDWindows\WED_PackageListAdapter.cpp	/^bool		WED_PackageListAdapter::CanSetCellHeight(void) const$/;"	f	class:WED_PackageListAdapter
CanSetCellWidth	.\GUI\GUI_SimpleTableGeometry.cpp	/^bool		GUI_SimpleTableGeometry::CanSetCellWidth (void) const { return true; }$/;"	f	class:GUI_SimpleTableGeometry
CanSetCellWidth	.\WEDMap\WED_ToolInfoAdapter.cpp	/^bool		WED_ToolInfoAdapter::CanSetCellWidth(void) const$/;"	f	class:WED_ToolInfoAdapter
CanSetCellWidth	.\WEDWindows\WED_PackageListAdapter.cpp	/^bool		WED_PackageListAdapter::CanSetCellWidth (void) const$/;"	f	class:WED_PackageListAdapter
Cancel	.\WEDImportExport\WED_GatewayExport.cpp	/^void WED_GatewayExportDialog::Cancel()$/;"	f	class:WED_GatewayExportDialog
CapRecordMap_t	.\Utils\RoadNetUtils.cpp	/^typedef	multimap<int, CapRecord_t>	CapRecordMap_t;$/;"	t	file:
CapRecord_t	.\Utils\RoadNetUtils.cpp	/^struct	CapRecord_t {$/;"	s	file:
CategorizeHalfedge	.\XESCore\Hydro.cpp	/^int CategorizeHalfedge(Halfedge_handle e)$/;"	f
CategorizeVertex	.\XESCore\Hydro.cpp	/^int CategorizeVertex(Vertex_handle v)$/;"	f
CategorizeVertex	.\XESCore\MeshAlgs.h	/^inline	int	CategorizeVertex(const CDT& inMesh, CDT::Vertex_handle v, int water_type)$/;"	f
CellDragEnter	.\GUI\GUI_TextTable.cpp	/^GUI_DragOperation	GUI_TextTable::CellDragEnter	(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_TextTable
CellDragLeave	.\GUI\GUI_TextTable.cpp	/^void	GUI_TextTable::CellDragLeave	(int cell_bounds[4], int cell_x, int cell_y)$/;"	f	class:GUI_TextTable
CellDragWithin	.\GUI\GUI_TextTable.cpp	/^GUI_DragOperation	GUI_TextTable::CellDragWithin	(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_TextTable
CellDraw	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::CellDraw	 (int cell_bounds[4], int cell_x, int cell_y, GUI_GraphState * inState			  )$/;"	f	class:GUI_TextTable
CellDrop	.\GUI\GUI_TextTable.cpp	/^GUI_DragOperation	GUI_TextTable::CellDrop		(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_TextTable
CellGetCursor	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTable::CellGetCursor(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y)$/;"	f	class:GUI_TextTable
CellGetHelpTip	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTable::CellGetHelpTip(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, string& tip								  )$/;"	f	class:GUI_TextTable
CellMouseDown	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTable::CellMouseDown(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, int button, GUI_KeyFlags flags, int& want_lock)$/;"	f	class:GUI_TextTable
CellMouseDrag	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::CellMouseDrag(int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, int button)$/;"	f	class:GUI_TextTable
CellMouseUp	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::CellMouseUp  (int cell_bounds[4], int cell_x, int cell_y, int mouse_x, int mouse_y, int button)$/;"	f	class:GUI_TextTable
CenterToCorners	.\XESCore\AptAlgs.cpp	/^static void CenterToCorners(Point2 location, double heading, double len, double width, Point2 corners[4])$/;"	f	file:
CenterToCorners	.\XESCore\AptIO.cpp	/^static void CenterToCorners(Point2 location, double heading, double len, double width, Point2 corners[4])$/;"	f	file:
CenterToEnds	.\XESCore\AptAlgs.cpp	/^static void CenterToEnds(POINT2 location, double heading, double len, SEGMENT2& ends)$/;"	f	file:
CenterToEnds	.\XESCore\AptIO.cpp	/^static void CenterToEnds(POINT2 location, double heading, double len, SEGMENT2& ends)$/;"	f	file:
ChainInfoMap	.\Tiger\TIGERTypes.h	/^typedef	hash_map<TLID, ChainInfo_t>	ChainInfoMap;$/;"	t
ChainInfo_t	.\Tiger\TIGERTypes.h	/^struct	ChainInfo_t : public WTPM_Line {$/;"	s
ChainIsDegenerate	.\Tiger\TIGERRead.cpp	/^bool	ChainIsDegenerate(const ChainInfo_t& inChain)$/;"	f
ChainOutOfBounds	.\Tiger\TIGERRead.cpp	/^bool	ChainOutOfBounds(const ChainInfo_t& inChain,$/;"	f
ChainSpec	.\DSF\DSFLibWrite.cpp	/^	struct	ChainSpec {								\/\/ The chain spec contains a single complete$/;"	s	class:DSFFileWriterImp	file:
ChainSpec	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	struct	ChainSpec {								\/\/ The chain spec contains a single complete$/;"	s	class:DSFFileWriterImp	file:
ChainSpecIndex	.\DSF\DSFLibWrite.cpp	/^	typedef	multimap<int, int>	ChainSpecIndex;$/;"	t	class:DSFFileWriterImp	file:
ChainSpecIndex	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef	multimap<int, int>	ChainSpecIndex;$/;"	t	class:DSFFileWriterImp	file:
ChainSpecVector	.\DSF\DSFLibWrite.cpp	/^	typedef vector<ChainSpec> 	ChainSpecVector;$/;"	t	class:DSFFileWriterImp	file:
ChainSpecVector	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef vector<ChainSpec> 	ChainSpecVector;$/;"	t	class:DSFFileWriterImp	file:
ChainToQuadStrip	.\Utils\CompGeomUtils.cpp	/^void	ChainToQuadStrip($/;"	f
ChangePolyCmdCW	.\Utils\ObjUtils.cpp	/^void	ChangePolyCmdCW(XObjCmd& ioCmd)$/;"	f
ChangeRule	.\XESCore\NetTables.h	/^struct ChangeRule {$/;"	s
ChangeRuleTable	.\XESCore\NetTables.h	/^typedef vector<ChangeRule>						ChangeRuleTable;$/;"	t
ChangedObject	.\WEDCore\WED_Archive.cpp	/^void		WED_Archive::ChangedObject(WED_Persistent * inObject, int change_kind)$/;"	f	class:WED_Archive
Char	.\lib_json\include\json\reader.h	/^      typedef char Char;$/;"	t	class:Json::Reader
CheckATCRouting	.\XESCore\AptIO.cpp	/^bool	CheckATCRouting(const AptInfo_t& io_apt)$/;"	f
CheckAndRegister	.\XESCore\TensorRoads.cpp	/^bool CheckAndRegister($/;"	f
CheckFifo	.\RenderFarmUI\RF_Main.cpp	/^static float CheckFifo(void)$/;"	f	file:
CheckLib	.\XESTools\MiscFuncs.cpp	/^void	CheckLib(const char * inDir)$/;"	f
CheckMenuItem	.\UI\XWin.lin.cpp	/^void XWin::CheckMenuItem(xmenu menu, int item, bool inCheck)$/;"	f	class:XWin
CheckMenuItem	.\UI\XWin.win.cpp	/^void			XWin::CheckMenuItem(xmenu menu, int item, bool inCheck)$/;"	f	class:XWin
CheckObjTable	.\XESCore\ObjTables.cpp	/^void CheckObjTable(void)$/;"	f
CheckSeed	.\XESCore\TensorRoads.cpp	/^bool	CheckSeed($/;"	f
CheckStats	.\XESCore\TensorRoads.cpp	/^bool CheckStats(const Point2& p, const Point2& p_old, const DEMGeo& elev, const DEMGeo& slope, const DEMGeo& density, float amp)$/;"	f
Chg	.\WEDXPlugin\WED_XPluginMgr.cpp	/^void WED_XPluginMgr::Chg(int inId,int inType,const vector<string>& inArgs)$/;"	f	class:WED_XPluginMgr
ChildValues	.\lib_json\include\json\writer.h	/^      typedef std::vector<std::string> ChildValues;$/;"	t	class:Json::StyledStreamWriter
ChildValues	.\lib_json\include\json\writer.h	/^      typedef std::vector<std::string> ChildValues;$/;"	t	class:Json::StyledWriter
ChooseDate	.\WEDImportExport\WED_VerTable.cpp	/^string ChooseDate(const VerInfo_t & info)$/;"	f
ChooseStatus	.\WEDImportExport\WED_VerTable.cpp	/^string ChooseStatus(const VerInfo_t & info)$/;"	f
Circle_2	.\XESCore\CGALTypes.h	/^typedef Kernel::Circle_2									Circle_2;$/;"	t
CirculatorToPoly	.\RenderFarmUI\RF_DrawMap.cpp	/^void	CirculatorToPoly(Pmwx::Ccb_halfedge_const_circulator circ, Polygon2& poly)$/;"	f
ClampCoord	.\XESTools\GISTool_VectorCmds.cpp	/^inline void ClampCoord(double& v, double low, double hi, int grid, double& err, double epsi)$/;"	f
CleanFace	.\XESCore\MapTopology.cpp	/^void	CleanFace($/;"	f
CleanupFinishedMasters	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::CleanupFinishedMasters(void)$/;"	f	class:PolyRasterizer
CleanupNetworkTopology	.\XESCore\NetPlacement.cpp	/^void	CleanupNetworkTopology(Net_JunctionInfoSet& outJunctions, Net_ChainInfoSet& outChains)$/;"	f
Clear	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::Clear(void)$/;"	f	class:WED_Select
ClearAll	.\WEDCore\WED_Archive.cpp	/^void	WED_Archive::ClearAll(void)$/;"	f	class:WED_Archive
ClearAnchor1	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::ClearAnchor1(void)	{ has_anchor1  = false; }$/;"	f	class:WED_MapToolNew
ClearAnchor2	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::ClearAnchor2(void)	{ has_anchor2  = false; }$/;"	f	class:WED_MapToolNew
ClearBand	.\Utils\BWImage.cpp	/^BWINLINE void	BWImage::ClearBand(int y1, int y2)$/;"	f	class:BWImage
ClearDEMPt	.\XESCore\DEMToVector.cpp	/^void ClearDEMPt(DEMGeo& ioDEM, vector<int>& ioIndex, int x, int y)$/;"	f
ClearDistance	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::ClearDistance(void)	{ has_distance = false; }$/;"	f	class:WED_MapToolNew
ClearEnvData	.\Env\Persistence.cpp	/^void	ClearEnvData(void)$/;"	f
ClearFilter	.\WEDWindows\WED_FilterBar.cpp	/^void	WED_FilterBar::ClearFilter()$/;"	f	class:WED_FilterBar
ClearHeading	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::ClearHeading(void)	{ has_heading  = false; }$/;"	f	class:WED_MapToolNew
ClearResource	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^void WED_LibraryPreviewPane::ClearResource(void)$/;"	f	class:WED_LibraryPreviewPane
Click	.\OGLE\ogle.cpp	/^void			OGLE::Click($/;"	f	class:OGLE
ClickCell	.\ObjEdit\OE_PatchList.cpp	/^void	OE_PatchTable::ClickCell(int row, int col, int l, int t, int r, int b)$/;"	f	class:OE_PatchTable
ClickDown	.\GUI\GUI_Window.cpp	/^void			GUI_Window::ClickDown(int inX, int inY, int inButton)$/;"	f	class:GUI_Window
ClickDown	.\UI\XGrinderApp.cpp	/^	virtual	void			ClickDown(int inX, int inY, int inButton) { }$/;"	f	class:XGrinderWin
ClickDown	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::ClickDown(int inX, int inY, int inButton)$/;"	f	class:XPWidgetWin
ClickDown	.\XPTools\ViewObj.cpp	/^void			XObjWin::ClickDown(int inX, int inY, int inButton)$/;"	f	class:XObjWin
ClickDrag	.\GUI\GUI_Window.cpp	/^void			GUI_Window::ClickDrag(int inX, int inY, int inButton)$/;"	f	class:GUI_Window
ClickDrag	.\UI\XGrinderApp.cpp	/^	virtual	void			ClickDrag(int inX, int inY, int inButton) { }$/;"	f	class:XGrinderWin
ClickDrag	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::ClickDrag(int inX, int inY, int inButton)$/;"	f	class:XPWidgetWin
ClickDrag	.\XPTools\ViewObj.cpp	/^void			XObjWin::ClickDrag(int inX, int inY, int inButton)$/;"	f	class:XObjWin
ClickMove	.\GUI\GUI_Window.cpp	/^void		GUI_Window::ClickMove(int inX, int inY)$/;"	f	class:GUI_Window
ClickMove	.\UI\XGrinderApp.cpp	/^	virtual	void			ClickMove(int inX, int inY) { }$/;"	f	class:XGrinderWin
ClickMove	.\UI\XPWidgetWin.h	/^	virtual	void			ClickMove(int x, int y) { }$/;"	f	class:XPWidgetWin
ClickMove	.\XPTools\ViewObj.cpp	/^	virtual void			ClickMove(int inX, int inY) { }$/;"	f	class:XObjWin
ClickUp	.\GUI\GUI_Window.cpp	/^void			GUI_Window::ClickUp(int inX, int inY, int inButton)$/;"	f	class:GUI_Window
ClickUp	.\UI\XGrinderApp.cpp	/^	virtual	void			ClickUp(int inX, int inY, int inButton) { }$/;"	f	class:XGrinderWin
ClickUp	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::ClickUp(int inX, int inY, int inButton)$/;"	f	class:XPWidgetWin
ClickUp	.\XPTools\ViewObj.cpp	/^void			XObjWin::ClickUp(int inX, int inY, int inButton)$/;"	f	class:XObjWin
Client2OGL_X	.\GUI\GUI_Window.cpp	/^inline int Client2OGL_X(int x, HWND w) { return x; }$/;"	f
Client2OGL_X	.\GUI\GUI_Window.cpp	/^inline int Client2OGL_X(int x, void* w) { return x; }$/;"	f
Client2OGL_X	.\GUI\GUI_Window.cpp	/^inline int GUI_Window::Client2OGL_X(int x, void* w) { return x; }$/;"	f	class:GUI_Window
Client2OGL_Y	.\GUI\GUI_Window.cpp	/^inline int Client2OGL_Y(int y, HWND w) { RECT r; GetClientRect(w,&r); return r.bottom-y; }$/;"	f
Client2OGL_Y	.\GUI\GUI_Window.cpp	/^inline int Client2OGL_Y(int y, void* w) { int h = get_ns_window_height(w); return h-y; }$/;"	f
Client2OGL_Y	.\GUI\GUI_Window.cpp	/^inline int GUI_Window::Client2OGL_Y(int y, void* w) { return (this->size().height() - y ); }$/;"	f	class:GUI_Window
ClientData	.\AC3DPlugins\TclStubs.h	/^typedef void * ClientData;$/;"	t
CliffInfo_t	.\XESCore\DEMTables.h	/^struct CliffInfo_t {$/;"	s
ClipDEMToFaceSet	.\XESCore\MapAlgs.cpp	/^bool	ClipDEMToFaceSet(const set<Face_handle>& inFaces, const DEMGeo& inSrcDEM, DEMGeo& inDstDEM, int& outX1, int& outY1, int& outX2, int& outY2)$/;"	f
ClipTo	.\GUI\GUI_Table.cpp	/^static bool ClipTo(int pane[4], int cell[4])$/;"	f	file:
ClipToHalfPlane3	.\Utils\CompGeomUtils.cpp	/^void	ClipToHalfPlane3($/;"	f
Clone	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleEnumFORMATETC::Clone			(IEnumFORMATETC ** pp_obj)$/;"	f	class:GUI_SimpleEnumFORMATETC
Closed	.\GUI\GUI_FormWindow.h	/^	virtual	bool		Closed(void) { return true; }$/;"	f	class:GUI_FormWindow
Closed	.\GUI\GUI_Window.h	/^	virtual	bool			Closed(void) { return true; }$/;"	f	class:GUI_Window
Closed	.\UI\XGrinderApp.cpp	/^	virtual	bool			Closed(void) { XGrinder_Quit(); return true; }$/;"	f	class:XGrinderWin
Closed	.\UI\XPWidgetWin.cpp	/^bool			XPWidgetWin::Closed(void)$/;"	f	class:XPWidgetWin
Closed	.\UI\XWin.lin.cpp	/^bool XWin::Closed(void)$/;"	f	class:XWin
Closed	.\WEDImportExport\WED_AptImportDialog.cpp	/^bool	WED_AptImportDialog::Closed(void)$/;"	f	class:WED_AptImportDialog
Closed	.\WEDWindows\WED_AboutBox.cpp	/^bool	WED_AboutBox::Closed(void)$/;"	f	class:WED_AboutBox
Closed	.\WEDWindows\WED_DocumentWindow.cpp	/^bool	WED_DocumentWindow::Closed(void)$/;"	f	class:WED_DocumentWindow
Closed	.\WEDWindows\WED_PackageWindow.cpp	/^bool	WED_PackageWindow::Closed(void)$/;"	f	class:WED_PackageWindow
Closed	.\WEDWindows\WED_StartWindow.cpp	/^bool	WED_StartWindow::Closed(void)$/;"	f	class:WED_StartWindow
Closed	.\XPTools\ViewObj.cpp	/^	virtual	bool			Closed(void) { return true; }$/;"	f	class:XObjWin
Cluster_vertices_iterator	.\XESCore\MeshConformer.h	/^    Cluster_vertices_iterator;$/;"	t	class:CGAL::Triangulation_conformer_any_2
CmdEval_t	.\GUI\GUI_Window.cpp	/^	struct CmdEval_t {$/;"	s	file:
CmdMap_t	.\GUI\GUI_Window.cpp	/^	typedef map<int, CmdEval_t>	CmdMap_t;$/;"	t	file:
ColForX	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::ColForX(int n)$/;"	f	class:GUI_SimpleTableGeometry
ColForX	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::ColForX(int n)$/;"	f	class:WED_ToolInfoAdapter
ColForX	.\WEDProperties\WED_PropertyTable.cpp	/^int		WED_PropertyTable::ColForX(int n)$/;"	f	class:WED_PropertyTable
ColForX	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::ColForX(int n)$/;"	f	class:WED_PackageListAdapter
CollectAllElementsOfType	.\WEDImportExport\WED_AptIE.cpp	/^static void CollectAllElementsOfType(WED_Thing * root, vector<T *> & elements)$/;"	f	file:
CollectAllElementsOfTypeInSet	.\WEDImportExport\WED_AptIE.cpp	/^static void CollectAllElementsOfTypeInSet(WED_Thing * root, vector<T *> & elements, const set<T *>& keepers)$/;"	f	file:
CollectEdges	.\XESCore\MapOverlay.cpp	/^static void		CollectEdges(Pmwx& io_dst, edge_collector_t<Pmwx> * collector, const Polygon_set_2& src, Locator * loc)$/;"	f	file:
CollectEdges	.\XESCore\MapOverlay.cpp	/^static void	CollectEdges(Pmwx& io_dst, edge_collector_t<Pmwx> * collector, const Polygon_2& src, Locator * loc)$/;"	f	file:
CollectEdges	.\XESCore\MapOverlay.cpp	/^static void	CollectEdges(Pmwx& io_dst, edge_collector_t<Pmwx> * collector, const Polygon_with_holes_2& src, Locator * loc)$/;"	f	file:
CollectRecursive	.\WEDMap\WED_ToolUtils.cpp	/^void CollectRecursive(WED_Thing * root, bool(* filter)(WED_Thing *), vector<WED_Thing *>& items)$/;"	f
CollectRecursive	.\WEDMap\WED_ToolUtils.cpp	/^void CollectRecursive(WED_Thing * root, bool(* filter)(WED_Thing *, void * ref), void * ref, vector<WED_Thing *>& items)$/;"	f
CollectionType	.\XESCore\MapTopology.h	/^	typedef set<Value>	CollectionType;	$/;"	t	struct:CollectionVisitor
CollectionVisitor	.\XESCore\MapTopology.h	/^	CollectionVisitor(CollectionType * col, const Predicate& pred=Predicate()) : col_(col), pred_(pred) { }$/;"	f	struct:CollectionVisitor
CollectionVisitor	.\XESCore\MapTopology.h	/^struct CollectionVisitor {$/;"	s
ColorBandMap	.\XESCore\DEMTables.h	/^typedef map<float, DEMColorBand_t>	ColorBandMap;$/;"	t
ColorBandTable	.\XESCore\DEMTables.h	/^typedef hash_map<int, ColorBandMap>	ColorBandTable;$/;"	t
ColorFaces	.\XESCore\Zoning.cpp	/^void	ColorFaces(set<Face_handle>&	io_faces)$/;"	f
ColorForValue	.\RenderFarmUI\RF_DEMGraphics.cpp	/^void ColorForValue($/;"	f
CommentInfo	.\lib_json\include\json\value.h	/^      struct CommentInfo$/;"	s	class:Json::Value
CommentInfo	.\lib_json\src\lib_json\json_value.cpp	/^Value::CommentInfo::CommentInfo()$/;"	f	class:Json::Value::CommentInfo
CommentPlacement	.\lib_json\include\json\value.h	/^   enum CommentPlacement$/;"	g	namespace:Json
Commit	.\ObjEdit\OE_DataModel.h	/^	void	Commit() { mCommited = true; }$/;"	f	struct:OECommand
Commit	.\Utils\BWImage.h	/^	void	Commit(void) { mRestore = false; }$/;"	f	struct:StRestoreChunk
CommitCommand	.\WEDCore\WED_Archive.cpp	/^void			WED_Archive::CommitCommand(void)$/;"	f	class:WED_Archive
CommitCommand	.\WEDCore\WED_Persistent.cpp	/^void		WED_Persistent::CommitCommand(void)$/;"	f	class:WED_Persistent
CommitCommand	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::CommitCommand(void)$/;"	f	class:WED_UndoMgr
CommitOperation	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::CommitOperation(void)$/;"	f	class:WED_Thing
CompareNoCase	.\WEDCore\WED_PackageMgr.cpp	/^static bool CompareNoCase(const string& s1, const string& s2) { return strcasecmp(s1.c_str(), s2.c_str()) < 0; }$/;"	f	file:
ComplexPolygon2	.\Utils\Skeleton.h	/^typedef	vector<Polygon2>		ComplexPolygon2;$/;"	t
ComplexPolygonVector	.\Utils\Skeleton.h	/^typedef vector<ComplexPolygon2>	ComplexPolygonVector;$/;"	t
ComplexPolygonWeight	.\Utils\Skeleton.h	/^typedef vector<PolygonWeight>	ComplexPolygonWeight;$/;"	t
CompressToFile	.\Utils\ZLIBUtils.cpp	/^int		CompressToFile(const char * inBuf, int inLength, FILE * InFile)$/;"	f
ComputePath	.\WEDCore\WED_PackageMgr.cpp	/^string		WED_PackageMgr::ComputePath(const string& package, const string& rel_file) const$/;"	f	class:WED_PackageMgr
ConfirmMessage	.\Utils\PlatformUtils.lin.cpp	/^int		ConfirmMessage(const char * inMsg, const char * proceedBtn, const char * cancelBtn)$/;"	f
ConfirmMessage	.\Utils\PlatformUtils.win.cpp	/^int		ConfirmMessage(const char * inMsg, const char * proceedBtn, const char * cancelBtn)$/;"	f
ConfirmNotNumber	.\XESCore\EnumSystem.cpp	/^static bool ConfirmNotNumber(const char * t)$/;"	f	file:
ConformCheckItems	.\XPTools\GetImage.cpp	/^void	ConformCheckItems(void)$/;"	f
ConformObjectToBox	.\Utils\ObjUtils.cpp	/^void	ConformObjectToBox( XObj&		obj,$/;"	f
ConformWater	.\XESCore\Hydro.cpp	/^void	ConformWater(DEMGeoMap& dems, const char * hydro_dir, bool inWrite, int borders[4])$/;"	f
Connect	.\Network\PCSBSocket.lin.cpp	/^void PCSBSocket::Connect(unsigned long inIP, unsigned short inPort)$/;"	f	class:PCSBSocket
Connect	.\Network\PCSBSocket.win.cpp	/^void PCSBSocket::Connect(unsigned long inIP, unsigned short inPort)$/;"	f	class:PCSBSocket
Connect	.\WEDXPlugin\WED_XPluginClient.cpp	/^void WED_XPluginClient::Connect()$/;"	f	class:WED_XPluginClient
ConnectHandle	.\Utils\UIUtils.cpp	/^void		DragHandleSet::ConnectHandle($/;"	f	class:DragHandleSet
ConnectionData	.\Network\PCSBSocket.h	/^	struct ConnectionData {$/;"	s	class:PCSBSocket
ConsoleProgressFunc	.\Utils\ProgressUtils.cpp	/^bool	ConsoleProgressFunc($/;"	f
ConstrainLogicalBounds	.\GUI\GUI_TextField.cpp	/^void	GUI_TextField::ConstrainLogicalBounds(void)$/;"	f	class:GUI_TextField
Container_	.\XESCore\MapDefs.h	/^typedef	std::vector<FastKernel::Point_2>											Container_;$/;"	t
ContentGeometryChanged	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::ContentGeometryChanged(void)$/;"	f	class:GUI_ScrollerPane
ContiguousSubPool	.\DSF\DSFPointPool.h	/^	struct	ContiguousSubPool {$/;"	s	class:DSFContiguousPointPool
ContiguousSubPool	.\DSF\dsflib_013005\DSFPointPool.h	/^	struct	ContiguousSubPool {$/;"	s	class:DSFContiguousPointPool
ContinueDrag	.\Utils\UIUtils.cpp	/^void		DragHandleSet::ContinueDrag($/;"	f	class:DragHandleSet
ControlLinkToCurve	.\WEDMap\WED_HandleToolBase.cpp	/^static bool	ControlLinkToCurve($/;"	f	file:
ControlsHandlesBy	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::ControlsHandlesBy(intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_CreateToolBase
ControlsHandlesBy	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::ControlsHandlesBy(intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_MarqueeTool
ControlsHandlesBy	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::ControlsHandlesBy(intptr_t id, int n, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_VertexTool
ControlsHandlesBy	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::ControlsHandlesBy(intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_TCEMarqueeTool
ControlsHandlesBy	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::ControlsHandlesBy(intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_TCEVertexTool
ControlsLinksBy	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::ControlsLinksBy	 (intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_CreateToolBase
ControlsLinksBy	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::ControlsLinksBy	 (intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_MarqueeTool
ControlsLinksBy	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::ControlsLinksBy	 (intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_VertexTool
ControlsLinksBy	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::ControlsLinksBy	 (intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_TCEMarqueeTool
ControlsLinksBy	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::ControlsLinksBy	 (intptr_t id, int c, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_TCEVertexTool
ControlsMoveBy	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::ControlsMoveBy	 (intptr_t id,        const Vector2& delta, Point2& io_track)$/;"	f	class:WED_CreateToolBase
ControlsMoveBy	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::ControlsMoveBy(intptr_t id, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_MarqueeTool
ControlsMoveBy	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::ControlsMoveBy(intptr_t id, const Vector2& delta, Point2& io_handle)$/;"	f	class:WED_VertexTool
ControlsMoveBy	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::ControlsMoveBy(intptr_t id, const Vector2& delta, Point2& io_pt)$/;"	f	class:WED_TCEMarqueeTool
ControlsMoveBy	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::ControlsMoveBy(intptr_t id, const Vector2& delta, Point2& io_handle)$/;"	f	class:WED_TCEVertexTool
ConvertAlphaToBitmap	.\Utils\BitmapUtils.cpp	/^int	ConvertAlphaToBitmap($/;"	f
ConvertBitmapToAlpha	.\Utils\BitmapUtils.cpp	/^int	ConvertBitmapToAlpha($/;"	f
ConvertCoordinates	.\SDTS\SDTSReadTVP.cpp	/^void	ConvertCoordinates(Topology& sdts, const CoordTransform& coords)$/;"	f
ConvertDEMTo	.\XESCore\DSFBuilder.cpp	/^T * ConvertDEMTo(const DEMGeo& d, DSFRasterHeader_t& h, int fmt, float s, float o)$/;"	f
ConvertForward	.\XESCore\AptIO.cpp	/^void	ConvertForward(AptInfo_t& io_apt)$/;"	f
ConvertKeysToLinks	.\SDTS\SDTSReadTVP.cpp	/^void	ConvertKeysToLinks(Topology& sdts)$/;"	f
CoordTransform	.\SDTS\SDTSReadTVP.cpp	/^struct	CoordTransform {$/;"	s	file:
CoordTranslator2	.\Utils\CompGeomUtils.h	/^struct	CoordTranslator2 {$/;"	s
CoordTranslator_2	.\XESCore\CGALDefs.h	/^struct	CoordTranslator_2 {$/;"	s
CopyBitmapSection	.\GUI\GUI_Fonts.cpp	/^static void		CopyBitmapSection($/;"	f	file:
CopyBitmapSection	.\UI\FontMgr.cpp	/^void    FontMgr::CopyBitmapSection($/;"	f	class:FontMgr
CopyBitmapSection	.\Utils\BitmapUtils.cpp	/^void	CopyBitmapSection($/;"	f
CopyBitmapSectionDirect	.\Utils\BitmapUtils.cpp	/^void	CopyBitmapSectionDirect($/;"	f
CopyBitmapSectionWarped	.\Utils\BitmapUtils.cpp	/^void	CopyBitmapSectionWarped($/;"	f
CopyEasy	.\XPTools\HackFixTextures.cpp	/^void	CopyEasy(ImageInfo * src, ImageInfo * dst,$/;"	f
CopyFrom	.\WEDEntities\WED_AirportChain.cpp	/^void WED_AirportChain::CopyFrom(const WED_AirportChain * rhs)$/;"	f	class:WED_AirportChain
CopyFrom	.\WEDEntities\WED_Entity.cpp	/^void WED_Entity::CopyFrom(const WED_Entity * rhs)$/;"	f	class:WED_Entity
CopyFrom	.\WEDEntities\WED_KeyObjects.cpp	/^void WED_KeyObjects::CopyFrom(const WED_KeyObjects * rhs)$/;"	f	class:WED_KeyObjects
CopyFrom	.\WEDEntities\WED_Select.cpp	/^void WED_Select::CopyFrom(const WED_Select * rhs)$/;"	f	class:WED_Select
CopyFrom	.\WEDEntities\WED_Thing.cpp	/^void WED_Thing::CopyFrom(const WED_Thing * rhs)$/;"	f	class:WED_Thing
CopyMenusRecursive	.\GUI\GUI_Window.cpp	/^void CopyMenusRecursive(HMENU src, HMENU dst)$/;"	f
CopyWetPoints	.\XESCore\MeshAlgs.cpp	/^double CopyWetPoints($/;"	f
CorrectWaterBodies	.\XESCore\Hydro.cpp	/^void	CorrectWaterBodies(Pmwx& inMap, DEMGeoMap& dems, ProgressFunc inProg)$/;"	f
CountAtoms	.\Utils\XChunkyFileUtils.cpp	/^int		XAtomContainer::CountAtoms(void)$/;"	f	class:XAtomContainer
CountAtomsOfID	.\Utils\XChunkyFileUtils.cpp	/^int 	XAtomContainer::CountAtomsOfID(uint32_t inID)$/;"	f	class:XAtomContainer
CountChildren	.\GUI\GUI_Pane.cpp	/^int			GUI_Pane::CountChildren(void) const$/;"	f	class:GUI_Pane
CountChildren	.\WEDEntities\WED_Thing.cpp	/^int					WED_Thing::CountChildren(void) const$/;"	f	class:WED_Thing
CountControlHandles	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::CountControlHandles(intptr_t id						  ) const$/;"	f	class:WED_CreateToolBase
CountControlHandles	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::CountControlHandles(intptr_t id						  ) const$/;"	f	class:WED_MarqueeTool
CountControlHandles	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::CountControlHandles(intptr_t id						  ) const$/;"	f	class:WED_VertexTool
CountControlHandles	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::CountControlHandles(intptr_t id						  ) const$/;"	f	class:WED_TCEMarqueeTool
CountControlHandles	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::CountControlHandles(intptr_t id						  ) const$/;"	f	class:WED_TCEVertexTool
CountCustomPackages	.\WEDCore\WED_PackageMgr.cpp	/^int			WED_PackageMgr::CountCustomPackages(void) const$/;"	f	class:WED_PackageMgr
CountEntities	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::CountEntities(void) const$/;"	f	class:WED_CreateToolBase
CountEntities	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::CountEntities(void) const$/;"	f	class:WED_MarqueeTool
CountEntities	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::CountEntities(void) const$/;"	f	class:WED_VertexTool
CountEntities	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::CountEntities(void) const$/;"	f	class:WED_TCEMarqueeTool
CountEntities	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::CountEntities(void) const$/;"	f	class:WED_TCEVertexTool
CountItems	.\GUI\GUI_Clipboard.cpp	/^int		GUI_DragData_Adapter::CountItems(void)$/;"	f	class:GUI_DragData_Adapter
CountItems	.\GUI\GUI_Clipboard.cpp	/^int		GUI_DragMgr_Adapter::CountItems(void)$/;"	f	class:GUI_DragMgr_Adapter
CountItems	.\GUI\GUI_Clipboard.cpp	/^int		GUI_OLE_Adapter::CountItems(void)$/;"	f	class:GUI_OLE_Adapter
CountNetwork	.\XESCore\NetPlacement.cpp	/^void	CountNetwork(const Net_JunctionInfoSet& inJunctions, const Net_ChainInfoSet& inChains)$/;"	f
CountPackages	.\WEDCore\WED_PackageMgr.cpp	/^int			WED_PackageMgr::CountPackages(void) const$/;"	f	class:WED_PackageMgr
CountProperties	.\WEDCore\WED_PropertyHelper.cpp	/^int		WED_PropertyHelper::CountProperties(void) const$/;"	f	class:WED_PropertyHelper
CountProperties	.\WEDEntities\WED_GISLine_Width.cpp	/^int			WED_GISLine_Width::CountProperties(void) const$/;"	f	class:WED_GISLine_Width
CountProperties	.\WEDTCE\WED_TCEToolAdapter.cpp	/^int			WED_TCEToolAdapter::CountProperties(void) const$/;"	f	class:WED_TCEToolAdapter
CountShared	.\DSF\DSFPointPool.cpp	/^int				DSF32BitPointPool::CountShared(const DSFTupleVector& inPoints)$/;"	f	class:DSF32BitPointPool
CountShared	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int				DSF32BitPointPool::CountShared(const DSFTupleVector& inPoints)$/;"	f	class:DSF32BitPointPool
CountSources	.\WEDEntities\WED_Thing.cpp	/^int					WED_Thing::CountSources(void) const$/;"	f	class:WED_Thing
CountSubs	.\WEDEntities\WED_Thing.cpp	/^int					WED_Thing::CountSubs(void)$/;"	f	class:WED_Thing
CountSubs	.\WEDMap\WED_MapToolNew.cpp	/^int					WED_MapToolNew::CountSubs(void) { return 0; }$/;"	f	class:WED_MapToolNew
CountViewers	.\WEDEntities\WED_Thing.cpp	/^int					WED_Thing::CountViewers(void) const$/;"	f	class:WED_Thing
CoverageFinder	.\Utils\CoverageFinder.cpp	/^CoverageFinder::CoverageFinder(int inNumAxes)$/;"	f	class:CoverageFinder
CoverageFinder	.\Utils\CoverageFinder.h	/^class CoverageFinder {$/;"	c
CreateBeaches	.\XESCore\Beaches.cpp	/^void	CreateBeaches(Pmwx& ioMap)$/;"	f
CreateBitmapFromDDS	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromDDS(const char * inFilePath, struct ImageInfo * outImageInfo)$/;"	f
CreateBitmapFromFile	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromFile(const char * inFilePath, struct ImageInfo * outImageInfo)$/;"	f
CreateBitmapFromJP2K	.\Utils\BitmapUtils.cpp	/^int CreateBitmapFromJP2K(const char * inFilePath, struct ImageInfo * outImageInfo)$/;"	f
CreateBitmapFromJPEG	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromJPEG(const char * inFilePath, struct ImageInfo * outImageInfo)$/;"	f
CreateBitmapFromJPEGData	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromJPEGData(void * inBytes, int inLength, struct ImageInfo * outImageInfo)$/;"	f
CreateBitmapFromPNG	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromPNG(const char * fname, struct ImageInfo * outImageInfo, bool leaveIndexed, float target_gamma)$/;"	f
CreateBitmapFromPNGData	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromPNGData(const void * inStart, int inLength, struct ImageInfo * outImageInfo, bool leaveIndexed, float target_gamma)$/;"	f
CreateBitmapFromTIF	.\Utils\BitmapUtils.cpp	/^int		CreateBitmapFromTIF(const char * inFilePath, struct ImageInfo * outImageInfo)$/;"	f
CreateBox_t	.\WEDMap\WED_CreateBoxTool.h	/^enum CreateBox_t {$/;"	g
CreateByClass	.\WEDCore\WED_Persistent.cpp	/^WED_Persistent * WED_Persistent::CreateByClass(const char * class_id, WED_Archive * parent, int id)$/;"	f	class:WED_Persistent
CreateEdge_t	.\WEDMap\WED_CreateEdgeTool.h	/^enum CreateEdge_t {$/;"	g
CreateEdit	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::CreateEdit(int cell_bounds[4])$/;"	f	class:GUI_TextTable
CreateLine_t	.\WEDMap\WED_CreateLineTool.h	/^enum CreateLine_t {$/;"	g
CreateLocalResourcePath	.\WEDCore\WED_LibraryMgr.cpp	/^string		WED_LibraryMgr::CreateLocalResourcePath(const string& r)$/;"	f	class:WED_LibraryMgr
CreateMenu	.\GUI\GUI_Application.cpp	/^GUI_Menu	GUI_Application::CreateMenu(const char * inTitle, const GUI_MenuItem_t items[], GUI_Menu	parent, int parentItem)$/;"	f	class:GUI_Application
CreateMenu	.\UI\XWin.lin.cpp	/^xmenu XWin::CreateMenu(xmenu parent, int item, const char * inTitle)$/;"	f	class:XWin
CreateMenu	.\UI\XWin.win.cpp	/^xmenu			XWin::CreateMenu(xmenu parent, int item, const char * inTitle)$/;"	f	class:XWin
CreateNewBitmap	.\Utils\BitmapUtils.cpp	/^int		CreateNewBitmap(long inWidth, long inHeight, short inChannels, struct ImageInfo * outImageInfo)$/;"	f
CreateNewCustomPackage	.\WEDCore\WED_PackageMgr.cpp	/^int WED_PackageMgr::CreateNewCustomPackage(void)$/;"	f	class:WED_PackageMgr
CreatePackageForDSF	.\XESCore\SceneryPackages.cpp	/^void	CreatePackageForDSF(const char * inPackage, int lon, int lat, char * outDSFDestination)$/;"	f
CreatePoint_t	.\WEDMap\WED_CreatePointTool.h	/^enum CreatePoint_t {$/;"	g
CreateTerrainPackage	.\XESCore\SceneryPackages.cpp	/^int	CreateTerrainPackage(const char * inPackage, bool make_stub_pngs, bool dry_run)$/;"	f
CreateTexListWindow	.\ObjEdit\(old)\OE_TexList.cpp	/^XPWidgetID		CreateTexListWindow($/;"	f
CreateTool_t	.\WEDMap\WED_CreatePolygonTool.h	/^enum CreateTool_t {$/;"	g
CreateTranslatorForBounds	.\Utils\GISUtils.cpp	/^void	CreateTranslatorForBounds($/;"	f
CreateTranslatorForPolygon	.\Utils\GISUtils.cpp	/^void	CreateTranslatorForPolygon($/;"	f
CreationDown	.\WEDMap\WED_CreateToolBase.cpp	/^int			WED_CreateToolBase::CreationDown(const Point2& start_pt)$/;"	f	class:WED_CreateToolBase
CreationDown	.\WEDMap\WED_HandleToolBase.h	/^	virtual	int					CreationDown(const Point2& start_pt) { return 0; }$/;"	f	class:WED_HandleToolBase
CreationDrag	.\WEDMap\WED_CreateToolBase.cpp	/^void		WED_CreateToolBase::CreationDrag(const Point2& start_pt, const Point2& now_pt)$/;"	f	class:WED_CreateToolBase
CreationDrag	.\WEDMap\WED_HandleToolBase.h	/^	virtual	void				CreationDrag(const Point2& start_pt, const Point2& now_pt) { }$/;"	f	class:WED_HandleToolBase
CreationUp	.\WEDMap\WED_CreateToolBase.cpp	/^void		WED_CreateToolBase::CreationUp(const Point2& start_pt, const Point2& now_pt)$/;"	f	class:WED_CreateToolBase
CreationUp	.\WEDMap\WED_HandleToolBase.h	/^	virtual	void				CreationUp(const Point2& start_pt, const Point2& now_pt) { }$/;"	f	class:WED_HandleToolBase
CropMap	.\XESCore\MapAlgs.cpp	/^void	CropMap($/;"	f
CrossCheck	.\XESCore\TensorRoads.cpp	/^bool CrossCheck(const Segment2& s1, const Segment2& s2, Point2& p)$/;"	f
Cull	.\Utils\XCull_inline.h	/^XCull<__Traits>::Cull($/;"	f	class:XCull
Cull	.\WEDEntities\WED_GISBoundingBox.cpp	/^bool	WED_GISBoundingBox::Cull(const Bbox2& b) const$/;"	f	class:WED_GISBoundingBox
Cull	.\WEDEntities\WED_GISChain.cpp	/^bool	WED_GISChain::Cull(const Bbox2& bounds) const$/;"	f	class:WED_GISChain
Cull	.\WEDEntities\WED_GISComposite.cpp	/^bool WED_GISComposite::Cull(const Bbox2& b) const$/;"	f	class:WED_GISComposite
Cull	.\WEDEntities\WED_GISEdge.cpp	/^bool WED_GISEdge::Cull(const Bbox2& b) const$/;"	f	class:WED_GISEdge
Cull	.\WEDEntities\WED_GISLine.cpp	/^bool WED_GISLine::Cull(const Bbox2& b) const$/;"	f	class:WED_GISLine
Cull	.\WEDEntities\WED_GISPoint.cpp	/^bool WED_GISPoint::Cull(const Bbox2& b) const$/;"	f	class:WED_GISPoint
Cull	.\WEDEntities\WED_GISPolygon.cpp	/^bool			WED_GISPolygon::Cull(const Bbox2& b) const$/;"	f	class:WED_GISPolygon
Cull	.\WEDEntities\WED_ObjPlacement.cpp	/^bool		WED_ObjPlacement::Cull(const Bbox2& b) const$/;"	f	class:WED_ObjPlacement
Cull	.\WEDEntities\WED_Runway.cpp	/^bool	WED_Runway::Cull(const Bbox2& b) const$/;"	f	class:WED_Runway
CullBucket	.\Utils\XCull_inline.h	/^XCull<__Traits>::CullBucket($/;"	f	class:XCull
CullType	.\Utils\QuadTree.h	/^	typedef typename __T::CullType			CullType;$/;"	t	class:QuadTree
CurTool	.\RenderFarmUI\RF_MapView.cpp	/^RF_MapTool * RF_MapView::CurTool(void)$/;"	f	class:RF_MapView
Curve_2	.\XESCore\MapDefs.h	/^typedef Traits_2::Curve_2						Curve_2;$/;"	t
CutInside	.\XESCore\MapAlgs.cpp	/^void	CutInside($/;"	f
DAdvise	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::DAdvise				(FORMATETC  *pformatetc, DWORD advf, IAdviseSink  *pAdvSink, DWORD  *pdwConnection)$/;"	f	class:GUI_SimpleDataObject
DDA_FACTOR	.\RenderFarmUI\RF_DEMGraphics.cpp	32;"	d	file:
DDA_STEPS	.\RenderFarmUI\RF_DEMGraphics.cpp	31;"	d	file:
DDPF_ALPHAPIXELS	.\Utils\BitmapUtils.cpp	97;"	d	file:
DDPF_FOURCC	.\Utils\BitmapUtils.cpp	98;"	d	file:
DDPF_RGB	.\Utils\BitmapUtils.cpp	99;"	d	file:
DDSCAPS_COMPLEX	.\Utils\BitmapUtils.cpp	104;"	d	file:
DDSCAPS_MIPMAP	.\Utils\BitmapUtils.cpp	103;"	d	file:
DDSCAPS_TEXTURE	.\Utils\BitmapUtils.cpp	102;"	d	file:
DDSD_CAPS	.\Utils\BitmapUtils.cpp	88;"	d	file:
DDSD_HEIGHT	.\Utils\BitmapUtils.cpp	89;"	d	file:
DDSD_LINEARSIZE	.\Utils\BitmapUtils.cpp	94;"	d	file:
DDSD_MIPMAPCOUNT	.\Utils\BitmapUtils.cpp	93;"	d	file:
DDSD_PITCH	.\Utils\BitmapUtils.cpp	91;"	d	file:
DDSD_PIXELFORMAT	.\Utils\BitmapUtils.cpp	92;"	d	file:
DDSD_WIDTH	.\Utils\BitmapUtils.cpp	90;"	d	file:
DDSTOOL_EXTRAVER	.\XPTools\version.h	11;"	d
DDSTOOL_VER	.\XPTools\version.h	10;"	d
DEBUG_BEZIERS	.\XESCore\NetPlacement.cpp	42;"	d	file:
DEBUG_BLOCK_CREATE_LINES	.\XESCore\BlockFill.cpp	85;"	d	file:
DEBUG_BUFFER_POLY	.\XESCore\MapBuffer.cpp	33;"	d	file:
DEBUG_CURVE_FIT_SOLUTION	.\XESCore\BezierApprox.cpp	117;"	d	file:
DEBUG_CURVE_FIT_TRIALS	.\XESCore\BezierApprox.cpp	115;"	d	file:
DEBUG_CURVE_INDEX	.\XESCore\BezierApprox.cpp	116;"	d	file:
DEBUG_FAST_SKIP_FORESTS	.\XESTools\GISTool_ProcessingCmds.cpp	57;"	d	file:
DEBUG_FLATTENING	.\XESCore\Airports.cpp	56;"	d	file:
DEBUG_FLATTEN_ERROR	.\XESCore\Hydro2.cpp	38;"	d	file:
DEBUG_MERGE	.\XESCore\BezierApprox.cpp	118;"	d	file:
DEBUG_MESSAGES	.\DSF\DSFLib.cpp	59;"	d	file:
DEBUG_MESSAGES	.\DSF\dsflib_013005\DSFLib.cpp	66;"	d	file:
DEBUG_OUTSET_REMOVER	.\XESCore\MapAlgs.cpp	49;"	d	file:
DEBUG_PREFS	.\GUI\GUI_Prefs.cpp	28;"	d	file:
DEBUG_PRINT_CORNERS	.\RenderFarmUI\RF_MapView.cpp	100;"	d	file:
DEBUG_PRINT_FOREST_TYPE	.\RenderFarmUI\RF_MapView.cpp	109;"	d	file:
DEBUG_PRINT_LAYERS	.\RenderFarmUI\RF_MapView.cpp	94;"	d	file:
DEBUG_PRINT_NORMALS	.\RenderFarmUI\RF_MapView.cpp	97;"	d	file:
DEBUG_PRINT_TRI_PARAMS	.\RenderFarmUI\RF_MapView.cpp	106;"	d	file:
DEBUG_PRINT_WAVES	.\RenderFarmUI\RF_MapView.cpp	103;"	d	file:
DEBUG_RASTERIZER	.\Utils\PolyRasterUtils.h	32;"	d
DEBUG_SHOW_FOREST_POLYS	.\XESTools\GISTool_ProcessingCmds.cpp	63;"	d	file:
DEBUG_SHOW_INSET	.\XESCore\MapAlgs.cpp	57;"	d	file:
DEBUG_SIMPLIFY	.\XESCore\MapHelpers.h	34;"	d
DEBUG_START_END	.\XESCore\BezierApprox.cpp	119;"	d	file:
DECLARE_INTERMEDIATE	.\WEDCore\WED_Persistent.h	108;"	d
DECLARE_PERSISTENT	.\WEDCore\WED_Persistent.h	93;"	d
DECODE_SCALED	.\DSF\DSFLib.cpp	107;"	d	file:
DECODE_SCALED	.\DSF\dsflib_013005\DSFLib.cpp	/^inline	double	DECODE_SCALED($/;"	f
DECODE_SCALED32	.\DSF\dsflib_013005\DSFLib.cpp	/^inline	double	DECODE_SCALED32($/;"	f
DECODE_SCALED32_CURRENT	.\DSF\DSFLib.cpp	111;"	d	file:
DECODE_SCALED_CURRENT	.\DSF\DSFLib.cpp	109;"	d	file:
DEFAULTPORT	.\WEDNetwork\WED_NWDefs.h	28;"	d
DEFAULT_IPAddr	.\WEDXPlugin\WED_XPluginClient.cpp	32;"	d	file:
DEFAULT_PACKAGE_PATH	.\WEDCore\WED_PackageMgr.cpp	35;"	d	file:
DEFAULT_Port	.\WEDXPlugin\WED_XPluginClient.cpp	33;"	d	file:
DEFINE_PERSISTENT	.\WEDCore\WED_Persistent.h	116;"	d
DEFINE_PREF_DOUBLE	.\AC3DPlugins\prefs.cpp	42;"	d	file:
DEFINE_PREF_DOUBLE	.\AC3DPlugins\prefs.cpp	54;"	d	file:
DEFINE_PREF_DOUBLE	.\AC3DPlugins\prefs.cpp	60;"	d	file:
DEFINE_PREF_DOUBLE	.\AC3DPlugins\prefs.cpp	66;"	d	file:
DEFINE_PREF_DOUBLE	.\AC3DPlugins\prefs.h	55;"	d
DEFINE_PREF_DOUBLE	.\AC3DPlugins\prefs.h	61;"	d
DEFINE_PREF_INT	.\AC3DPlugins\prefs.cpp	35;"	d	file:
DEFINE_PREF_INT	.\AC3DPlugins\prefs.cpp	53;"	d	file:
DEFINE_PREF_INT	.\AC3DPlugins\prefs.cpp	59;"	d	file:
DEFINE_PREF_INT	.\AC3DPlugins\prefs.cpp	65;"	d	file:
DEFINE_PREF_INT	.\AC3DPlugins\prefs.h	54;"	d
DEFINE_PREF_INT	.\AC3DPlugins\prefs.h	60;"	d
DEFINE_PREF_STRING	.\AC3DPlugins\prefs.cpp	30;"	d	file:
DEFINE_PREF_STRING	.\AC3DPlugins\prefs.cpp	52;"	d	file:
DEFINE_PREF_STRING	.\AC3DPlugins\prefs.cpp	58;"	d	file:
DEFINE_PREF_STRING	.\AC3DPlugins\prefs.cpp	64;"	d	file:
DEFINE_PREF_STRING	.\AC3DPlugins\prefs.h	53;"	d
DEFINE_PREF_STRING	.\AC3DPlugins\prefs.h	59;"	d
DEG2RAD	.\Utils\MatrixUtils.h	45;"	d
DEG_TO_MTR_LAT	.\XESCore\XESConstants.h	41;"	d
DEG_TO_NM_LAT	.\XESCore\XESConstants.h	35;"	d
DEG_TO_RAD	.\XESCore\XESConstants.h	39;"	d
DELETED_EDGE	.\Utils\Skeleton.cpp	135;"	d	file:
DELETED_POLYGON	.\Utils\Skeleton.cpp	136;"	d	file:
DELETED_VERTEX	.\Utils\Skeleton.cpp	134;"	d	file:
DEMALGS_H	.\XESCore\DEMAlgs.h	24;"	d
DEMChoiceCount	.\RenderFarmUI\RF_MapView.cpp	/^const int DEMChoiceCount = sizeof(kDEMs) \/ sizeof(DEMViewInfo_t);$/;"	v
DEMColorBand_t	.\XESCore\DEMTables.h	/^struct	DEMColorBand_t {$/;"	s
DEMDEFS_H	.\XESCore\DEMDefs.h	24;"	d
DEMGeo	.\XESCore\DEMDefs.cpp	/^DEMGeo::DEMGeo() :$/;"	f	class:DEMGeo
DEMGeo	.\XESCore\DEMDefs.cpp	/^DEMGeo::DEMGeo(const DEMGeo& x) :$/;"	f	class:DEMGeo
DEMGeo	.\XESCore\DEMDefs.cpp	/^DEMGeo::DEMGeo(int width, int height) :$/;"	f	class:DEMGeo
DEMGeo	.\XESCore\DEMDefs.h	/^struct	DEMGeo {$/;"	s
DEMGeoMap	.\XESCore\DEMDefs.h	/^class DEMGeoMap : public hash_map<int, DEMGeo> {$/;"	c
DEMGeo_BuildMinMax	.\XESCore\DEMDefs.cpp	/^void	DEMGeo_BuildMinMax($/;"	f
DEMGeo_LocalMaxOfCacheSquare	.\XESCore\DEMDefs.cpp	/^float	DEMGeo_LocalMaxOfCacheSquare($/;"	f
DEMGeo_LocalMinMaxWithCache	.\XESCore\DEMDefs.cpp	/^float	DEMGeo_LocalMinMaxWithCache($/;"	f
DEMGeo_LocalMinOfCacheSquare	.\XESCore\DEMDefs.cpp	/^float	DEMGeo_LocalMinOfCacheSquare($/;"	f
DEMGeo_ReduceMinMax	.\XESCore\DEMDefs.cpp	/^void	DEMGeo_ReduceMinMax($/;"	f
DEMGeo_ReduceMinMaxN	.\XESCore\DEMDefs.cpp	/^void	DEMGeo_ReduceMinMaxN($/;"	f
DEMGrid	.\XESCore\DEMGrid.cpp	/^DEMGrid::DEMGrid(const DEMGeo& d)$/;"	f	class:DEMGrid
DEMGrid	.\XESCore\DEMGrid.h	/^struct DEMGrid {$/;"	s
DEMGrid_H	.\XESCore\DEMGrid.h	25;"	d
DEMIO_H	.\XESCore\DEMIO.h	24;"	d
DEMLineImporter	.\XESCore\DEMIO.cpp	/^static 	bool	DEMLineImporter(const vector<string>& inTokenLine, void * inRef)$/;"	f	file:
DEMMakeDifferential	.\XESCore\DEMAlgs.cpp	/^void	DEMMakeDifferential(const DEMGeo& src, DEMGeo& dst)$/;"	f
DEMMakeFFT	.\XESCore\DEMAlgs.cpp	/^void	DEMMakeFFT(const DEMGeo& inDEM, vector<DEMGeo>& outFFT)$/;"	f
DEMMakeHistogram	.\XESCore\DEMAlgs.cpp	/^int		DEMMakeHistogram(const DEMGeo& inDEM, map<float, int>& histo, int x1, int y1, int x2, int y2)$/;"	f
DEMMask	.\XESCore\DEMDefs.cpp	/^DEMMask::DEMMask() :$/;"	f	class:DEMMask
DEMMask	.\XESCore\DEMDefs.cpp	/^DEMMask::DEMMask(const DEMGeo& rhs) : mWidth(rhs.mWidth), mHeight(rhs.mHeight),$/;"	f	class:DEMMask
DEMMask	.\XESCore\DEMDefs.cpp	/^DEMMask::DEMMask(int w, int h, bool ini) :$/;"	f	class:DEMMask
DEMMask	.\XESCore\DEMDefs.h	/^struct	DEMMask {$/;"	s
DEMPrefs_t	.\XESCore\DEMAlgs.h	/^struct	DEMPrefs_t {$/;"	s
DEMSpec	.\XESCore\DEMIO.h	/^struct	DEMSpec {$/;"	s
DEMTABLES_H	.\XESCore\DEMTables.h	24;"	d
DEMTOVECTOR_H	.\XESCore\DEMToVector.h	25;"	d
DEMToBitmap	.\RenderFarmUI\RF_DEMGraphics.cpp	/^int	DEMToBitmap($/;"	f
DEMViewInfo_t	.\RenderFarmUI\RF_MapView.cpp	/^struct	DEMViewInfo_t {$/;"	s	file:
DEM_EXIT_SEARCH_RANGE	.\XESCore\Hydro.cpp	63;"	d	file:
DEM_NO_DATA	.\XESCore\DEMDefs.h	88;"	d
DFace	.\XESCore\MapDefs.h	/^typedef  Arr_accessor::Dcel_face                DFace;$/;"	t
DHalfedge	.\XESCore\MapDefs.h	/^typedef  Arr_accessor::Dcel_halfedge            DHalfedge;$/;"	t
DIRS_COUNT	.\XESCore\Hydro.cpp	80;"	d	file:
DIRS_COUNT	.\XESCore\Hydro.cpp	84;"	d	file:
DIRS_FOUR	.\XESCore\Hydro.cpp	66;"	d	file:
DIRTYPE	.\Utils\MemFileUtils.cpp	137;"	d	file:
DIR_CHAR	.\Utils\MemFileUtils.cpp	100;"	d	file:
DIR_CHAR	.\Utils\MemFileUtils.cpp	102;"	d	file:
DIR_CHAR	.\Utils\PlatformUtils.h	40;"	d
DIR_CHAR	.\Utils\PlatformUtils.h	43;"	d
DIR_STR	.\Utils\PlatformUtils.h	41;"	d
DIR_STR	.\Utils\PlatformUtils.h	44;"	d
DInner_ccb	.\XESCore\MapDefs.h	/^typedef  Arr_accessor::Dcel_inner_ccb           DInner_ccb;$/;"	t
DIso_vert	.\XESCore\MapDefs.h	/^typedef  Arr_accessor::Dcel_isolated_vertex     DIso_vert;$/;"	t
DOMAIN_Create	.\WEDCore\WED_EnumSystem.cpp	/^int					DOMAIN_Create(const char * domain, const char * desc)$/;"	f
DOMAIN_Desc	.\WEDCore\WED_EnumSystem.cpp	/^const char *		DOMAIN_Desc(int domain)$/;"	f
DOMAIN_LookupDesc	.\WEDCore\WED_EnumSystem.cpp	/^int					DOMAIN_LookupDesc(const char * domain)$/;"	f
DOMAIN_Members	.\WEDCore\WED_EnumSystem.cpp	/^void				DOMAIN_Members(int domain, map<int, string>& members)$/;"	f
DOMAIN_Members	.\WEDCore\WED_EnumSystem.cpp	/^void				DOMAIN_Members(int domain, set<int>& members)$/;"	f
DOMAIN_Members	.\WEDCore\WED_EnumSystem.cpp	/^void				DOMAIN_Members(int domain, vector<int>& members)$/;"	f
DOMAIN_Name	.\WEDCore\WED_EnumSystem.cpp	/^const char *		DOMAIN_Name(int domain)$/;"	f
DOMAIN_Validate	.\WEDCore\WED_EnumSystem.cpp	/^bool				DOMAIN_Validate(int domain)$/;"	f
DOUBLE_PT_DIST	.\WEDWindows\WED_GroupCommands.cpp	54;"	d	file:
DO_CHECKS	.\Tiger\(TigerImport Backup.cpp).cpp	107;"	d	file:
DO_CHECKS	.\Tiger\TigerImport.cpp	48;"	d	file:
DOuter_ccb	.\XESCore\MapDefs.h	/^typedef  Arr_accessor::Dcel_outer_ccb			DOuter_ccb;$/;"	t
DRAWMAP_H	.\RenderFarmUI\RF_DrawMap.h	24;"	d
DRAW_EDGES	.\RenderFarmUI\RF_DrawMap.cpp	46;"	d	file:
DRAW_FACES	.\RenderFarmUI\RF_DrawMap.cpp	44;"	d	file:
DRAW_FEATURES	.\RenderFarmUI\RF_DrawMap.cpp	45;"	d	file:
DRAW_FOOTPRINTS	.\RenderFarmUI\RF_DrawMap.cpp	48;"	d	file:
DRAW_MESH_BORDERS	.\RenderFarmUI\RF_MapView.cpp	85;"	d	file:
DRAW_VERTICES	.\RenderFarmUI\RF_DrawMap.cpp	47;"	d	file:
DSF2Text	.\DSFTools\DSF2Text.cpp	/^bool DSF2Text(char ** inDSF, int n, const char * inFileName)$/;"	f
DSF2Text_AcceptNetworkDef	.\DSFTools\DSF2Text.cpp	/^int DSF2Text_AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f
DSF2Text_AcceptObjectDef	.\DSFTools\DSF2Text.cpp	/^int DSF2Text_AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f
DSF2Text_AcceptPolygonDef	.\DSFTools\DSF2Text.cpp	/^int DSF2Text_AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f
DSF2Text_AcceptProperty	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f
DSF2Text_AcceptRasterDef	.\DSFTools\DSF2Text.cpp	/^int DSF2Text_AcceptRasterDef(const char * inPartialPath, void * inRef)$/;"	f
DSF2Text_AcceptTerrainDef	.\DSFTools\DSF2Text.cpp	/^int DSF2Text_AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f
DSF2Text_AddObject	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_AddObject($/;"	f
DSF2Text_AddPatchVertex	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_AddPatchVertex($/;"	f
DSF2Text_AddPolygonPoint	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_AddPolygonPoint($/;"	f
DSF2Text_AddRaterData	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_AddRaterData($/;"	f
DSF2Text_AddSegmentShapePoint	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_AddSegmentShapePoint($/;"	f
DSF2Text_BeginPatch	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_BeginPatch($/;"	f
DSF2Text_BeginPolygon	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_BeginPolygon($/;"	f
DSF2Text_BeginPolygonWinding	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_BeginPolygonWinding($/;"	f
DSF2Text_BeginPrimitive	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_BeginPrimitive($/;"	f
DSF2Text_BeginSegment	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_BeginSegment($/;"	f
DSF2Text_CreateWriterCallbacks	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_CreateWriterCallbacks(DSFCallbacks_t * cbs)$/;"	f
DSF2Text_EndPatch	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_EndPatch($/;"	f
DSF2Text_EndPolygon	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_EndPolygon($/;"	f
DSF2Text_EndPolygonWinding	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_EndPolygonWinding($/;"	f
DSF2Text_EndPrimitive	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_EndPrimitive($/;"	f
DSF2Text_EndSegment	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_EndSegment($/;"	f
DSF2Text_H	.\DSFTools\DSF2Text.h	25;"	d
DSF2Text_NextPass	.\DSFTools\DSF2Text.cpp	/^bool DSF2Text_NextPass(int pass, void * ref)$/;"	f
DSF2Text_SetFilter	.\DSFTools\DSF2Text.cpp	/^void DSF2Text_SetFilter(int filter, void * ref)$/;"	f
DSF32BitPointPool	.\DSF\DSFPointPool.cpp	/^DSF32BitPointPool::DSF32BitPointPool($/;"	f	class:DSF32BitPointPool
DSF32BitPointPool	.\DSF\DSFPointPool.cpp	/^DSF32BitPointPool::DSF32BitPointPool()$/;"	f	class:DSF32BitPointPool
DSF32BitPointPool	.\DSF\DSFPointPool.h	/^class	DSF32BitPointPool {$/;"	c
DSF32BitPointPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSF32BitPointPool::DSF32BitPointPool($/;"	f	class:DSF32BitPointPool
DSF32BitPointPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSF32BitPointPool::DSF32BitPointPool()$/;"	f	class:DSF32BitPointPool
DSF32BitPointPool	.\DSF\dsflib_013005\DSFPointPool.h	/^class	DSF32BitPointPool {$/;"	c
DSFAtomHeader_t	.\DSF\DSFDefs.h	/^typedef	XAtomHeader_t	DSFAtomHeader_t;$/;"	t
DSFAtomHeader_t	.\DSF\dsflib_013005\DSFDefs.h	/^typedef	XAtomHeader_t	DSFAtomHeader_t;$/;"	t
DSFBUILDER_H	.\XESCore\DSFBuilder.h	24;"	d
DSFBuildPrefs_t	.\XESCore\DSFBuilder.h	/^struct	DSFBuildPrefs_t {$/;"	s
DSFCallbacks_t	.\DSF\DSFLib.h	/^struct	DSFCallbacks_t {$/;"	s
DSFCallbacks_t	.\DSF\dsflib_013005\DSFLib.h	/^struct	DSFCallbacks_t {$/;"	s
DSFCheckSignature	.\DSF\DSFLib.cpp	/^int		DSFCheckSignature(const char * inPath)$/;"	f
DSFContiguousPointPool	.\DSF\DSFPointPool.cpp	/^DSFContiguousPointPool::DSFContiguousPointPool($/;"	f	class:DSFContiguousPointPool
DSFContiguousPointPool	.\DSF\DSFPointPool.cpp	/^DSFContiguousPointPool::DSFContiguousPointPool()$/;"	f	class:DSFContiguousPointPool
DSFContiguousPointPool	.\DSF\DSFPointPool.h	/^class	DSFContiguousPointPool {$/;"	c
DSFContiguousPointPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFContiguousPointPool::DSFContiguousPointPool($/;"	f	class:DSFContiguousPointPool
DSFContiguousPointPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFContiguousPointPool::DSFContiguousPointPool()$/;"	f	class:DSFContiguousPointPool
DSFContiguousPointPool	.\DSF\dsflib_013005\DSFPointPool.h	/^class	DSFContiguousPointPool {$/;"	c
DSFContiguousPointPoolMap	.\DSF\DSFLibWrite.cpp	/^	typedef map<int, DSFContiguousPointPool>	DSFContiguousPointPoolMap;$/;"	t	class:DSFFileWriterImp	file:
DSFCreateWriter	.\DSF\DSFLibWrite.cpp	/^void *	DSFCreateWriter(double inWest, double inSouth, double inEast, double inNorth, double inElevMin, double inElevMax, int divisions)$/;"	f
DSFCreateWriter	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void *	DSFCreateWriter(double inWest, double inSouth, double inEast, double inNorth, int divisions)$/;"	f
DSFDEFS_H	.\DSF\DSFDefs.h	24;"	d
DSFDEFS_H	.\DSF\dsflib_013005\DSFDefs.h	24;"	d
DSFDestroyWriter	.\DSF\DSFLibWrite.cpp	/^void	DSFDestroyWriter(void * inRef)$/;"	f
DSFDestroyWriter	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFDestroyWriter(void * inRef)$/;"	f
DSFFileWriterImp	.\DSF\DSFLibWrite.cpp	/^DSFFileWriterImp::DSFFileWriterImp(double inWest, double inSouth, double inEast, double inNorth, double inElevMin, double inElevMax, int divisions)$/;"	f	class:DSFFileWriterImp
DSFFileWriterImp	.\DSF\DSFLibWrite.cpp	/^class	DSFFileWriterImp {$/;"	c	file:
DSFFileWriterImp	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^DSFFileWriterImp::DSFFileWriterImp(double inWest, double inSouth, double inEast, double inNorth, int divisions)$/;"	f	class:DSFFileWriterImp
DSFFileWriterImp	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^class	DSFFileWriterImp {$/;"	c	file:
DSFFooter_t	.\DSF\DSFDefs.h	/^struct	DSFFooter_t {$/;"	s
DSFFooter_t	.\DSF\dsflib_013005\DSFDefs.h	/^struct	DSFFooter_t {$/;"	s
DSFGetWriterCallbacks	.\DSF\DSFLibWrite.cpp	/^void	DSFGetWriterCallbacks(DSFCallbacks_t * ioCallbacks)$/;"	f
DSFGetWriterCallbacks	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFGetWriterCallbacks(DSFCallbacks_t * ioCallbacks)$/;"	f
DSFHeader_t	.\DSF\DSFDefs.h	/^struct	DSFHeader_t {$/;"	s
DSFHeader_t	.\DSF\dsflib_013005\DSFDefs.h	/^struct	DSFHeader_t {$/;"	s
DSFLIB_H	.\DSF\DSFLib.h	24;"	d
DSFLIB_H	.\DSF\dsflib_013005\DSFLib.h	24;"	d
DSFOptimizePrimitives	.\DSF\DSFPointPool.cpp	/^void DSFOptimizePrimitives($/;"	f
DSFPOINTPOOL_H	.\DSF\DSFPointPool.h	24;"	d
DSFPOINTPOOL_H	.\DSF\dsflib_013005\DSFPointPool.h	24;"	d
DSFPRINT_H	.\XPTools\DSFPrint.h	24;"	d
DSFPointPoolLoc	.\DSF\DSFPointPool.h	/^typedef	pair<int, int>	DSFPointPoolLoc;$/;"	t
DSFPointPoolLoc	.\DSF\dsflib_013005\DSFPointPool.h	/^typedef	pair<int, int>	DSFPointPoolLoc;$/;"	t
DSFPointPoolLocVector	.\DSF\DSFPointPool.h	/^typedef vector<DSFPointPoolLoc>	DSFPointPoolLocVector;$/;"	t
DSFPointPoolLocVector	.\DSF\dsflib_013005\DSFPointPool.h	/^typedef vector<DSFPointPoolLoc>	DSFPointPoolLocVector;$/;"	t
DSFPrimitive	.\DSF\DSFPointPool.h	/^struct DSFPrimitive {$/;"	s
DSFPrint_AcceptNetworkDef	.\DSF\DSFLib_Print.cpp	/^int DSFPrint_AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptNetworkDef	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AcceptNetworkDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptObjectDef	.\DSF\DSFLib_Print.cpp	/^int DSFPrint_AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptObjectDef	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AcceptObjectDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptPolygonDef	.\DSF\DSFLib_Print.cpp	/^int DSFPrint_AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptPolygonDef	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AcceptPolygonDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptProperty	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f
DSFPrint_AcceptProperty	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AcceptProperty(const char * inProp, const char * inValue, void * inRef)$/;"	f
DSFPrint_AcceptTerrainDef	.\DSF\DSFLib_Print.cpp	/^int DSFPrint_AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AcceptTerrainDef	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AcceptTerrainDef(const char * inPartialPath, void * inRef)$/;"	f
DSFPrint_AddObject	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_AddObject($/;"	f
DSFPrint_AddObject	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AddObject($/;"	f
DSFPrint_AddPatchVertex	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_AddPatchVertex(double * inData, void * inRef)$/;"	f
DSFPrint_AddPatchVertex	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AddPatchVertex(double * inData, void * inRef)$/;"	f
DSFPrint_AddPolygonPoint	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_AddPolygonPoint($/;"	f
DSFPrint_AddPolygonPoint	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AddPolygonPoint($/;"	f
DSFPrint_AddSegmentShapePoint	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_AddSegmentShapePoint($/;"	f
DSFPrint_AddSegmentShapePoint	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_AddSegmentShapePoint($/;"	f
DSFPrint_BeginPatch	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_BeginPatch($/;"	f
DSFPrint_BeginPatch	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_BeginPatch($/;"	f
DSFPrint_BeginPolygon	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_BeginPolygon($/;"	f
DSFPrint_BeginPolygon	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_BeginPolygon($/;"	f
DSFPrint_BeginPolygonWinding	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_BeginPolygonWinding($/;"	f
DSFPrint_BeginPolygonWinding	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_BeginPolygonWinding($/;"	f
DSFPrint_BeginPrimitive	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_BeginPrimitive(int type, void * inRef)$/;"	f
DSFPrint_BeginPrimitive	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_BeginPrimitive(int type, void * inRef)$/;"	f
DSFPrint_BeginSegment	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_BeginSegment($/;"	f
DSFPrint_BeginSegment	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_BeginSegment($/;"	f
DSFPrint_EndPatch	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_EndPatch($/;"	f
DSFPrint_EndPatch	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_EndPatch($/;"	f
DSFPrint_EndPolygon	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_EndPolygon($/;"	f
DSFPrint_EndPolygon	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_EndPolygon($/;"	f
DSFPrint_EndPolygonWinding	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_EndPolygonWinding($/;"	f
DSFPrint_EndPolygonWinding	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_EndPolygonWinding($/;"	f
DSFPrint_EndPrimitive	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_EndPrimitive($/;"	f
DSFPrint_EndPrimitive	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_EndPrimitive($/;"	f
DSFPrint_EndSegment	.\DSF\DSFLib_Print.cpp	/^void DSFPrint_EndSegment($/;"	f
DSFPrint_EndSegment	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void DSFPrint_EndSegment($/;"	f
DSFPrint_NextPass	.\DSF\DSFLib_Print.cpp	/^bool DSFPrint_NextPass(int pass, void * ref)$/;"	f
DSFPrint_NextPass	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^bool DSFPrint_NextPass(int pass, void * ref)$/;"	f
DSFRasterHeader_t	.\DSF\DSFDefs.h	/^struct DSFRasterHeader_t {$/;"	s
DSFReadFile	.\DSF\DSFLib.cpp	/^int		DSFReadFile($/;"	f
DSFReadFile	.\DSF\dsflib_013005\DSFLib.cpp	/^int		DSFReadFile(const char * inPath, DSFCallbacks_t * inCallbacks, const int * inPasses, void * inRef)$/;"	f
DSFReadMem	.\DSF\DSFLib.cpp	/^int		DSFReadMem(const char * inStart, const char * inStop, DSFCallbacks_t * inCallbacks, const int * inPasses, void * ref)$/;"	f
DSFReadMem	.\DSF\dsflib_013005\DSFLib.cpp	/^int		DSFReadMem(const char * inStart, const char * inStop, DSFCallbacks_t * inCallbacks, const int * inPasses, void * ref)$/;"	f
DSFSharedPointPool	.\DSF\DSFPointPool.cpp	/^DSFSharedPointPool::DSFSharedPointPool($/;"	f	class:DSFSharedPointPool
DSFSharedPointPool	.\DSF\DSFPointPool.cpp	/^DSFSharedPointPool::DSFSharedPointPool()$/;"	f	class:DSFSharedPointPool
DSFSharedPointPool	.\DSF\DSFPointPool.h	/^class	DSFSharedPointPool {$/;"	c
DSFSharedPointPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFSharedPointPool::DSFSharedPointPool($/;"	f	class:DSFSharedPointPool
DSFSharedPointPool	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFSharedPointPool::DSFSharedPointPool()$/;"	f	class:DSFSharedPointPool
DSFSharedPointPool	.\DSF\dsflib_013005\DSFPointPool.h	/^class	DSFSharedPointPool {$/;"	c
DSFSharedPointPoolMap	.\DSF\DSFLibWrite.cpp	/^	typedef map<int, DSFSharedPointPool>	DSFSharedPointPoolMap;$/;"	t	class:DSFFileWriterImp	file:
DSFSharedPointPoolMap	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef map<int, DSFSharedPointPool>	DSFSharedPointPoolMap;$/;"	t	class:DSFFileWriterImp	file:
DSFSignMD5	.\DSF\DSFLibWrite.cpp	/^static	void	DSFSignMD5(const char * inPath)$/;"	f	file:
DSFSignMD5	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^static	void	DSFSignMD5(const char * inPath)$/;"	f	file:
DSFTOOL_EXTRAVER	.\XPTools\version.h	14;"	d
DSFTOOL_VER	.\XPTools\version.h	13;"	d
DSFTuple	.\DSF\DSFPointPool.h	/^class	DSFTuple {$/;"	c
DSFTuple	.\DSF\DSFPointPool.h	/^inline DSFTuple::DSFTuple() : mLen(0)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\DSFPointPool.h	/^inline DSFTuple::DSFTuple(const DSFTuple& rhs) : mLen(rhs.mLen)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\DSFPointPool.h	/^inline DSFTuple::DSFTuple(const double * values, int length) : mLen(length)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\DSFPointPool.h	/^inline DSFTuple::DSFTuple(int planes) : mLen(planes)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple::DSFTuple() : mLen(0)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple::DSFTuple(const DSFTuple& rhs) : mLen(rhs.mLen)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple::DSFTuple(const double * values, int length) : mLen(length)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple::DSFTuple(int planes) : mLen(planes)$/;"	f	class:DSFTuple
DSFTuple	.\DSF\dsflib_013005\DSFPointPool.h	/^class	DSFTuple {$/;"	c
DSFTupleVector	.\DSF\DSFPointPool.h	/^typedef	vector<DSFTuple>			DSFTupleVector;$/;"	t
DSFTupleVector	.\DSF\dsflib_013005\DSFPointPool.h	/^typedef	vector<DSFTuple>			DSFTupleVector;$/;"	t
DSFTupleVectorVector	.\DSF\DSFPointPool.h	/^typedef list<DSFTupleVector>		DSFTupleVectorVector;$/;"	t
DSFTupleVectorVector	.\DSF\dsflib_013005\DSFPointPool.h	/^typedef vector<DSFTupleVector>		DSFTupleVectorVector;$/;"	t
DSFWriteToFile	.\DSF\DSFLibWrite.cpp	/^void	DSFWriteToFile(const char * inPath, void * inRef)$/;"	f
DSFWriteToFile	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFWriteToFile(const char * inPath, void * inRef)$/;"	f
DSF_AccumChain	.\WEDImportExport\WED_DSFExport.cpp	/^static void	DSF_AccumChain($/;"	f	file:
DSF_AccumChainBezier	.\WEDImportExport\WED_DSFExport.cpp	/^static void	DSF_AccumChainBezier($/;"	f	file:
DSF_AccumPolygon	.\WEDImportExport\WED_DSFExport.cpp	/^void DSF_AccumPolygon($/;"	f
DSF_AccumPolygonBezier	.\WEDImportExport\WED_DSFExport.cpp	/^void DSF_AccumPolygonBezier($/;"	f
DSF_AccumPolygonWithHoles	.\WEDImportExport\WED_DSFExport.cpp	/^void DSF_AccumPolygonWithHoles($/;"	f
DSF_AccumPolygonWithHolesBezier	.\WEDImportExport\WED_DSFExport.cpp	/^void DSF_AccumPolygonWithHolesBezier($/;"	f
DSF_AccumPts	.\WEDImportExport\WED_DSFExport.cpp	/^void DSF_AccumPts(		vector<Point2>::const_iterator		begin,$/;"	f
DSF_COOKIE	.\DSF\DSFDefs.h	35;"	d
DSF_COOKIE	.\DSF\dsflib_013005\DSFDefs.h	40;"	d
DSF_DIVISIONS	.\WEDImportExport\WED_DSFExport.cpp	190;"	d	file:
DSF_EXPORT_H	.\AC3DPlugins\dsf_export.h	25;"	d
DSF_EXTRA_1021	.\WEDImportExport\WED_DSFExport.cpp	69;"	d	file:
DSF_Export	.\WEDImportExport\WED_DSFExport.cpp	/^void DSF_Export(WED_Thing * base, IResolver * resolver, const string& package, set<WED_Thing *>& problem_children)$/;"	f
DSF_ExportAirportOverlay	.\WEDImportExport\WED_DSFExport.cpp	/^int DSF_ExportAirportOverlay(IResolver * resolver, WED_Airport  * apt, const string& package, set<WED_Thing *>& problem_children)$/;"	f
DSF_ExportTile	.\WEDImportExport\WED_DSFExport.cpp	/^static void DSF_ExportTile(WED_Thing * base, IResolver * resolver, const string& pkg, int x, int y, set <WED_Thing *>& problem_children)$/;"	f	file:
DSF_ExportTileRecursive	.\WEDImportExport\WED_DSFExport.cpp	/^static int	DSF_ExportTileRecursive($/;"	f	file:
DSF_HeightRangeRecursive	.\WEDImportExport\WED_DSFExport.cpp	/^static int	DSF_HeightRangeRecursive(WED_Thing * what, double& out_msl_min, double& out_msl_max, const Bbox2& bounds)$/;"	f	file:
DSF_Import	.\WEDImportExport\WED_DSFImport.cpp	/^int DSF_Import(const char * path, WED_Group * base)$/;"	f
DSF_Importer	.\WEDImportExport\WED_DSFImport.cpp	/^	DSF_Importer() { for(int n = 0; n < 7; ++n) req_level_obj[n] = req_level_agp[n] = req_level_fac[n] = -1; }$/;"	f	class:DSF_Importer
DSF_Importer	.\WEDImportExport\WED_DSFImport.cpp	/^class	DSF_Importer {$/;"	c	file:
DSF_MASTER_VERSION	.\DSF\DSFDefs.h	36;"	d
DSF_MASTER_VERSION	.\DSF\dsflib_013005\DSFDefs.h	41;"	d
DSF_ResourceTable	.\WEDImportExport\WED_DSFExport.cpp	/^	DSF_ResourceTable() { for(int i = 0; i < 7; ++i) show_level_obj[i] = show_level_pol[i] = -1; cur_filter = -1;}$/;"	f	struct:DSF_ResourceTable
DSF_ResourceTable	.\WEDImportExport\WED_DSFExport.cpp	/^struct	DSF_ResourceTable {$/;"	s	file:
DT	.\Utils\point_index.h	/^	typedef typename	CGAL::Delaunay_triangulation_2<Traits>		DT;$/;"	t	class:spatial_index_2
DTED_UHL_t	.\XESCore\DEMIO.cpp	/^struct DTED_UHL_t {$/;"	s	file:
DUMP_GTIF	.\Utils\GISUtils.cpp	38;"	d	file:
DUMP_INPUT_DATA	.\XESCore\MapAlgs.cpp	1935;"	d	file:
DUMP_RAW_JPEG	.\Network\Terraserver.cpp	39;"	d	file:
DUnadvise	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::DUnadvise				(DWORD dwConnection)$/;"	f	class:GUI_SimpleDataObject
DVertex	.\XESCore\MapDefs.h	/^typedef  Arr_accessor::Dcel_vertex              DVertex;$/;"	t
DWORD	.\Utils\BitmapUtils.cpp	107;"	d	file:
Dcel	.\XESCore\MapDefs.h	/^								CGAL::Gps_face_base>									Dcel;$/;"	t
Dcel	.\XESCore\MapDefs.h	/^	  typedef base::Dcel                                            Dcel;$/;"	t	class:Polygon_set_2
Dcel	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Dcel                   Dcel;$/;"	t	class:PmwxFmt	file:
DebugAssert	.\Utils\AssertUtils.h	42;"	d
DebugAssert	.\Utils\AssertUtils.h	47;"	d
DebugPrintTokens	.\XESCore\ConfigSystem.cpp	/^void	DebugPrintTokens(const vector<string>& tokens)$/;"	f
DebugValidateEventMap	.\Utils\Skeleton.cpp	/^static void DebugValidateEventMap(const EventMap& eventMap)$/;"	f	file:
DebugValidatePoly	.\Utils\Skeleton.cpp	/^static void DebugValidatePoly(SK_Polygon * p)$/;"	f	file:
Decode	.\Installer\InstallerProcs.cpp	/^void	InstallerChunk::Decode($/;"	f	class:InstallerChunk
DecodeNumericPlane	.\Utils\XChunkyFileUtils.cpp	/^static int DecodeNumericPlane($/;"	f	file:
DecodeNumericPlaneInterleaved	.\Utils\XChunkyFileUtils.cpp	/^static int DecodeNumericPlaneInterleaved($/;"	f	file:
DecodeNumericPlaneInterleavedScaled	.\Utils\XChunkyFileUtils.cpp	/^static F DecodeNumericPlaneInterleavedScaled($/;"	f	file:
DecomposeObj	.\Utils\ObjUtils.cpp	/^void	DecomposeObj(const XObj& inObj, XObj& outObj, int maxValence)$/;"	f
DecomposeObjCmd	.\Utils\ObjUtils.cpp	/^void	DecomposeObjCmd(const XObjCmd& inCmd, vector<XObjCmd>& outCmds, int maxValence)$/;"	f
DecompressDouble	.\Utils\XChunkyFileUtils.cpp	/^int	XAtomPlanerNumericTable::DecompressDouble($/;"	f	class:XAtomPlanerNumericTable
DecompressFloat	.\Utils\XChunkyFileUtils.cpp	/^int	XAtomPlanerNumericTable::DecompressFloat($/;"	f	class:XAtomPlanerNumericTable
DecompressInt	.\Utils\XChunkyFileUtils.cpp	/^int	XAtomPlanerNumericTable::DecompressInt($/;"	f	class:XAtomPlanerNumericTable
DecompressIntToDoubleInterleaved	.\Utils\XChunkyFileUtils.cpp	/^int XAtomPlanerNumericTable::DecompressIntToDoubleInterleaved($/;"	f	class:XAtomPlanerNumericTable
DecompressShort	.\Utils\XChunkyFileUtils.cpp	/^int	XAtomPlanerNumericTable::DecompressShort($/;"	f	class:XAtomPlanerNumericTable
DecompressShortToDoubleInterleaved	.\Utils\XChunkyFileUtils.cpp	/^int XAtomPlanerNumericTable::DecompressShortToDoubleInterleaved($/;"	f	class:XAtomPlanerNumericTable
DecorateGUIWindow	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::DecorateGUIWindow(string labelDesc)$/;"	f	class:WED_GatewayImportDialog
DefaultAssert	.\Utils\AssertUtils.cpp	/^static	void	DefaultAssert(const char * cond, const char * file, int line)$/;"	f	file:
DefaultDebugAssert	.\Utils\AssertUtils.cpp	/^static	void	DefaultDebugAssert(const char * cond, const char * file, int line)$/;"	f	file:
DefaultObjFromTypeAndHeight	.\XPTools\Env2DSF.cpp	/^string	DefaultObjFromTypeAndHeight(int type, double height)$/;"	f
Default_GetAnimParam	.\Obj\ObjDraw.cpp	/^static float	Default_GetAnimParam(const char * string, float v1, float v2, void * ref)$/;"	f	file:
Default_SetDraped	.\Obj\ObjDraw.cpp	/^static void	Default_SetDraped(void * ref) { }$/;"	f	file:
Default_SetNoDraped	.\Obj\ObjDraw.cpp	/^static void	Default_SetNoDraped(void * ref) { }$/;"	f	file:
Default_SetupLight	.\Obj\ObjDraw.cpp	/^static void	Default_SetupLight(void * ref)$/;"	f	file:
Default_SetupLine	.\Obj\ObjDraw.cpp	/^static void 	Default_SetupLine(void * ref)$/;"	f	file:
Default_SetupMovie	.\Obj\ObjDraw.cpp	/^static void	Default_SetupMovie(void * ref)$/;"	f	file:
Default_SetupPanel	.\Obj\ObjDraw.cpp	/^static void	Default_SetupPanel(void * ref)$/;"	f	file:
Default_SetupPoly	.\Obj\ObjDraw.cpp	/^static void	Default_SetupPoly(void * ref)$/;"	f	file:
Default_TexCoord	.\Obj\ObjDraw.cpp	/^static void	Default_TexCoord(const float * st, void * ref)$/;"	f	file:
Default_TexCoordPointer	.\Obj\ObjDraw.cpp	/^static void Default_TexCoordPointer(int size, unsigned long type, long stride, const void * pointer, void * ref)$/;"	f	file:
Degree	.\DSF\tri_stripper_101\tri_stripper.h	/^inline size_t tri_stripper::triangle_degree::Degree() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_degree
Del	.\WEDXPlugin\WED_XPluginMgr.cpp	/^void WED_XPluginMgr::Del(int inId)$/;"	f	class:WED_XPluginMgr
Delete	.\WEDCore\WED_Persistent.cpp	/^void			WED_Persistent::Delete(void)$/;"	f	class:WED_Persistent
DeleteBlankChains	.\XESCore\NetPlacement.cpp	/^void DeleteBlankChains(Net_JunctionInfoSet& ioJunctions, Net_ChainInfoSet& ioChains)$/;"	f
DeleteHandleHi	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::DeleteHandleHi	   (void)$/;"	f	class:WED_GISPoint_Bezier
DeleteHandleLo	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::DeleteHandleLo	   (void)$/;"	f	class:WED_GISPoint_Bezier
DeleteHole	.\WEDEntities\WED_GISPolygon.cpp	/^void				WED_GISPolygon::DeleteHole  (int n)$/;"	f	class:WED_GISPolygon
DemPt	.\XESCore\Hydro.cpp	/^	DemPt() : x(0), y(0) { }$/;"	f	struct:DemPt
DemPt	.\XESCore\Hydro.cpp	/^	DemPt(const DemPt& rhs) : x(rhs.x), y(rhs.y) { }$/;"	f	struct:DemPt
DemPt	.\XESCore\Hydro.cpp	/^	DemPt(int ix, int iy) : x(ix), y(iy) { }$/;"	f	struct:DemPt
DemPt	.\XESCore\Hydro.cpp	/^struct DemPt {$/;"	s	file:
DemPtMap	.\XESCore\Hydro.cpp	/^typedef multimap<float, DemPt>	DemPtMap;$/;"	t	file:
DemPtSet	.\XESCore\Hydro.cpp	/^typedef set<DemPt>				DemPtSet;$/;"	t	file:
DemPtVector	.\XESCore\Hydro.cpp	/^typedef vector<DemPt>			DemPtVector;$/;"	t	file:
DemToVector	.\XESCore\DEMToVector.cpp	/^void DemToVector(DEMGeo& ioDEM, Pmwx& ioMap, bool doSmooth, int inPositiveTerrain, ProgressFunc func)$/;"	f
DeriveDEMs	.\XESCore\DEMAlgs.cpp	/^void	DeriveDEMs($/;"	f
DestroyBitmap	.\Utils\BitmapUtils.cpp	/^void	DestroyBitmap(const struct ImageInfo * inImageInfo)$/;"	f
DestroyObject	.\XESTools\MapBuckets.cpp	/^void	MapFaceBucketTraits::DestroyObject(Object o)$/;"	f	class:MapFaceBucketTraits
DestroyObject	.\XESTools\MapBuckets.cpp	/^void	MapHalfedgeBucketTraits::DestroyObject(Object o)$/;"	f	class:MapHalfedgeBucketTraits
DestroyObject	.\XESTools\MapBuckets.cpp	/^void	MapVertexBucketTraits::DestroyObject(Object o)$/;"	f	class:MapVertexBucketTraits
DidLoad	.\SDTS\SDTSRead.cpp	/^bool			SDTSDirectory::DidLoad(void) const$/;"	f	class:SDTSDirectory
DifferenceDEM	.\XESCore\DEMAlgs.cpp	/^void DifferenceDEM(const DEMGeo& bottom, const DEMGeo& top, DEMGeo& diff)$/;"	f
DimsFromMap	.\RenderFarmUI\RF_Import.cpp	/^void	DimsFromMap(XPWidgetID)$/;"	f
DirectedForeignKey	.\SDTS\SDTSReadTVP.cpp	/^typedef	pair<ForeignKey, bool>		DirectedForeignKey;	\/\/ True for pointing at us$/;"	t	file:
DirectedForeignKeyVector	.\SDTS\SDTSReadTVP.cpp	/^typedef	vector<DirectedForeignKey>	DirectedForeignKeyVector;$/;"	t	file:
Direction_2	.\XESCore\CGALTypes.h	/^typedef Kernel::Direction_2									Direction_2;$/;"	t
Directory_Edit	.\WEDEntities\WED_KeyObjects.cpp	/^void WED_KeyObjects::Directory_Edit(const char * name, IBase * who)$/;"	f	class:WED_KeyObjects
Directory_Find	.\WEDEntities\WED_KeyObjects.cpp	/^IBase *	WED_KeyObjects::Directory_Find(const char * name)$/;"	f	class:WED_KeyObjects
Directory_Find	.\WEDEntities\WED_Thing.cpp	/^IBase *		WED_Thing::Directory_Find(const char * name)$/;"	f	class:WED_Thing
Disable	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::Disable(void)$/;"	f	class:GUI_Pane
Disable	.\WEDXPlugin\WED_XPluginCamera.cpp	/^void WED_XPluginCamera::Disable()$/;"	f	class:WED_XPluginCamera
DisableTool	.\GUI\GUI_ToolBar.cpp	/^void	GUI_ToolBar::DisableTool(int idx)$/;"	f	class:GUI_ToolBar
DisassemblePrimitive	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^DSFFileWriterImp::TriPrimitiveVector::iterator DSFFileWriterImp::DisassemblePrimitive($/;"	f	class:DSFFileWriterImp
Disconnect	.\Network\PCSBSocket.lin.cpp	/^void PCSBSocket::Disconnect(void)$/;"	f	class:PCSBSocket
Disconnect	.\Network\PCSBSocket.win.cpp	/^void PCSBSocket::Disconnect(void)$/;"	f	class:PCSBSocket
Disconnect	.\WEDXPlugin\WED_XPluginClient.cpp	/^void  WED_XPluginClient::Disconnect()$/;"	f	class:WED_XPluginClient
DispatchCanHandleCommand	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::DispatchCanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:GUI_Commander
DispatchHandleCommand	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::DispatchHandleCommand(int command)$/;"	f	class:GUI_Commander
DispatchKeyPress	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::DispatchKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:GUI_Commander
DisplayFileNames	.\UI\XWin32DND.cpp	/^void CDropTarget::DisplayFileNames(HWND hwndOwner, HGLOBAL hgFiles)$/;"	f	class:CDropTarget
DisplayTexture	.\UI\FontMgr.cpp	/^void FontMgr::DisplayTexture($/;"	f	class:FontMgr
DistForLOD8	.\XPTools\ViewObj.cpp	/^float DistForLOD8(const XObj8& obj, int lod)$/;"	f
DistPtToTri	.\XESCore\MeshAlgs.cpp	/^inline double	DistPtToTri(CDT::Vertex_handle v, CDT::Face_handle f)$/;"	f
DistanceVector	.\Utils\XCull.h	/^	typedef vector<Scalar>			DistanceVector;$/;"	t	class:XCull
DllMain	.\AC3DPlugins\x86_Win32 DLL.cpp	/^BOOL WINAPI DllMain( HINSTANCE hInst, DWORD fdwReason, LPVOID lpReserved )$/;"	f
DllMain	.\WEDXPlugin\WED_XPluginWin.cpp	/^BOOL APIENTRY DllMain( HANDLE hModule, $/;"	f
DoAddMissingWater	.\XESTools\GISTool_VectorCmds.cpp	/^int DoAddMissingWater(const vector<const char *>& args)$/;"	f
DoAnyImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoAnyImport(const vector<const char *>& args,$/;"	f	file:
DoApply	.\XESTools\GISTool_DemCmds.cpp	/^static int DoApply(const vector<const char *>& args)$/;"	f	file:
DoAptBulkExport	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptBulkExport(const vector<const char *>& args)$/;"	f	file:
DoAptExport	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptExport(const vector<const char *>& args)$/;"	f	file:
DoAptFilter	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptFilter(const vector<const char *>& args)$/;"	f	file:
DoAptGenBounds	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptGenBounds(const vector<const char *>& args)$/;"	f	file:
DoAptImport	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptImport(const vector<const char *>& args)$/;"	f	file:
DoAptInfo	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptInfo(const vector<const char *>& args)$/;"	f	file:
DoAptTest	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoAptTest(const vector<const char *>& args)$/;"	f	file:
DoAssignLandUse	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoAssignLandUse(const vector<const char *>& args)$/;"	f	file:
DoBbox	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoBbox(const vector<const char *>& args)$/;"	f	file:
DoBufferWater	.\XESTools\GISTool_VectorCmds.cpp	/^int DoBufferWater(const vector<const char *>& args)$/;"	f
DoBuildDSF	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoBuildDSF(const vector<const char *>& args)$/;"	f	file:
DoBuildObjLib	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoBuildObjLib(const vector<const char *>& args)$/;"	f	file:
DoBuildRoads	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoBuildRoads(const vector<const char *>& args)$/;"	f	file:
DoBulkConvertSRTM	.\XESTools\GISTool_DemCmds.cpp	/^static int DoBulkConvertSRTM(const vector<const  char *>& args)$/;"	f	file:
DoBurnAirports	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoBurnAirports(const vector<const char *>& args)$/;"	f	file:
DoCalcMesh	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoCalcMesh(const vector<const char *>& args)$/;"	f	file:
DoCalcSlope	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoCalcSlope(const vector<const char *>& args)$/;"	f	file:
DoCheckRoads	.\XESTools\GISTool_VectorCmds.cpp	/^int DoCheckRoads(const vector<const char *>& args)$/;"	f
DoCheckWaterConform	.\XESTools\GISTool_MiscCmds.cpp	/^static int DoCheckWaterConform(const vector<const char *>& args)$/;"	f	file:
DoChudStart	.\XESTools\GISTool.cpp	/^static int DoChudStart(const vector<const char *>& args)	{	return chudStartRemotePerfMonitor((char *) args[0]); }$/;"	f	file:
DoChudStop	.\XESTools\GISTool.cpp	/^static int DoChudStop(const vector<const char *>& args)		{	return chudStopRemotePerfMonitor(); }$/;"	f	file:
DoCleanToTerrain	.\XESTools\GISTool_VectorCmds.cpp	/^int DoCleanToTerrain(const vector<const char *>& args)$/;"	f
DoClear	.\XESTools\GISTool_MiscCmds.cpp	/^static int DoClear(const vector<const char *>& args)$/;"	f	file:
DoClearMarks	.\RenderFarmUI\RF_Main.cpp	/^static int DoClearMarks(const vector<const char *>& args) { gMeshLines.clear(); gMeshPoints.clear(); return 0; }$/;"	f	file:
DoConnection	.\WEDNetwork\WED_Server.cpp	/^void WED_Server::DoConnection(vector<string>& inList)$/;"	f	class:WED_Server
DoConnection	.\WEDXPlugin\WED_XPluginClient.cpp	/^int WED_XPluginClient::DoConnection()$/;"	f	class:WED_XPluginClient
DoCrop	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoCrop(const vector<const char *>& args)$/;"	f	file:
DoCropGrid	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoCropGrid(const vector<const char *>& args)$/;"	f	file:
DoCropSave	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoCropSave(const vector<const char *>& args)$/;"	f	file:
DoDeriveDEMs	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoDeriveDEMs(const vector<const char *>& args)$/;"	f	file:
DoDesliver	.\XESTools\GISTool_VectorCmds.cpp	/^int DoDesliver(const vector<const char *> &args)$/;"	f
DoDiffCoverage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoDiffCoverage(const vector<const char *>& args)$/;"	f
DoDrag	.\WEDImportExport\WED_AptTable.h	/^	virtual	void	DoDrag($/;"	f	class:WED_AptTable
DoDrag	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	void	DoDrag($/;"	f	class:WED_ICAOTable
DoDrag	.\WEDImportExport\WED_VerTable.h	/^	virtual	void	DoDrag($/;"	f	class:WED_VerTable
DoDrag	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::DoDrag($/;"	f	class:WED_LibraryListAdapter
DoDrag	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::DoDrag($/;"	f	class:WED_ToolInfoAdapter
DoDrag	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::DoDrag($/;"	f	class:WED_PropertyTable
DoDrag	.\WEDWindows\WED_FilterBar.h	/^	virtual	void	DoDrag($/;"	f	class:WED_FilterBar
DoDrag	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::DoDrag($/;"	f	class:WED_PackageListAdapter
DoDragAndDrop	.\GUI\GUI_Pane.cpp	/^GUI_DragOperation	GUI_Pane::DoDragAndDrop($/;"	f	class:GUI_Pane
DoDragAndDrop	.\GUI\GUI_Window.cpp	/^GUI_DragOperation	GUI_Window::DoDragAndDrop($/;"	f	class:GUI_Window
DoDropBetweenColumns	.\WEDImportExport\WED_AptTable.h	/^	virtual	GUI_DragOperation		DoDropBetweenColumns($/;"	f	class:WED_AptTable
DoDropBetweenColumns	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	GUI_DragOperation		DoDropBetweenColumns($/;"	f	class:WED_ICAOTable
DoDropBetweenColumns	.\WEDImportExport\WED_VerTable.h	/^	virtual	GUI_DragOperation		DoDropBetweenColumns($/;"	f	class:WED_VerTable
DoDropBetweenColumns	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	GUI_DragOperation		DoDropBetweenColumns($/;"	f	class:WED_LibraryListAdapter
DoDropBetweenColumns	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	GUI_DragOperation		DoDropBetweenColumns($/;"	f	class:WED_ToolInfoAdapter
DoDropBetweenColumns	.\WEDProperties\WED_PropertyTable.cpp	/^GUI_DragOperation		WED_PropertyTable::DoDropBetweenColumns($/;"	f	class:WED_PropertyTable
DoDropBetweenColumns	.\WEDWindows\WED_FilterBar.h	/^	virtual	GUI_DragOperation		DoDropBetweenColumns($/;"	f	class:WED_FilterBar
DoDropBetweenColumns	.\WEDWindows\WED_PackageListAdapter.cpp	/^GUI_DragOperation		WED_PackageListAdapter::DoDropBetweenColumns($/;"	f	class:WED_PackageListAdapter
DoDropBetweenRows	.\WEDImportExport\WED_AptTable.h	/^	virtual	GUI_DragOperation		DoDropBetweenRows($/;"	f	class:WED_AptTable
DoDropBetweenRows	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	GUI_DragOperation		DoDropBetweenRows($/;"	f	class:WED_ICAOTable
DoDropBetweenRows	.\WEDImportExport\WED_VerTable.h	/^	virtual	GUI_DragOperation		DoDropBetweenRows($/;"	f	class:WED_VerTable
DoDropBetweenRows	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	GUI_DragOperation		DoDropBetweenRows($/;"	f	class:WED_LibraryListAdapter
DoDropBetweenRows	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	GUI_DragOperation		DoDropBetweenRows($/;"	f	class:WED_ToolInfoAdapter
DoDropBetweenRows	.\WEDProperties\WED_PropertyTable.cpp	/^GUI_DragOperation		WED_PropertyTable::DoDropBetweenRows($/;"	f	class:WED_PropertyTable
DoDropBetweenRows	.\WEDWindows\WED_FilterBar.h	/^	virtual	GUI_DragOperation		DoDropBetweenRows($/;"	f	class:WED_FilterBar
DoDropBetweenRows	.\WEDWindows\WED_PackageListAdapter.cpp	/^GUI_DragOperation		WED_PackageListAdapter::DoDropBetweenRows($/;"	f	class:WED_PackageListAdapter
DoDropIntoCell	.\WEDImportExport\WED_AptTable.h	/^	virtual	GUI_DragOperation		DoDropIntoCell($/;"	f	class:WED_AptTable
DoDropIntoCell	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	GUI_DragOperation		DoDropIntoCell($/;"	f	class:WED_ICAOTable
DoDropIntoCell	.\WEDImportExport\WED_VerTable.h	/^	virtual	GUI_DragOperation		DoDropIntoCell($/;"	f	class:WED_VerTable
DoDropIntoCell	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	GUI_DragOperation		DoDropIntoCell($/;"	f	class:WED_LibraryListAdapter
DoDropIntoCell	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	GUI_DragOperation		DoDropIntoCell($/;"	f	class:WED_ToolInfoAdapter
DoDropIntoCell	.\WEDProperties\WED_PropertyTable.cpp	/^GUI_DragOperation		WED_PropertyTable::DoDropIntoCell($/;"	f	class:WED_PropertyTable
DoDropIntoCell	.\WEDWindows\WED_FilterBar.h	/^	virtual	GUI_DragOperation		DoDropIntoCell($/;"	f	class:WED_FilterBar
DoDropIntoCell	.\WEDWindows\WED_PackageListAdapter.cpp	/^GUI_DragOperation		WED_PackageListAdapter::DoDropIntoCell($/;"	f	class:WED_PackageListAdapter
DoDumpAtomic	.\XESTools\GISTool_DumpCmds.cpp	/^static int DoDumpAtomic(const vector<const char *>& args)$/;"	f	file:
DoDumpDSF	.\XESTools\GISTool_DumpCmds.cpp	/^static int DoDumpDSF(const vector<const char *>& args)$/;"	f	file:
DoDumpForests	.\XESTools\GISTool_MiscCmds.cpp	/^int DoDumpForests(const vector<const char *>& args)$/;"	f
DoDumpMap	.\XESTools\GISTool_DumpCmds.cpp	/^static int DoDumpMap(const vector<const char *>& args)$/;"	f	file:
DoDumpObs	.\XESTools\GISTool_DumpCmds.cpp	/^static int DoDumpObs(const vector<const char *>& args)$/;"	f	file:
DoDumpShapeFile	.\XESTools\GISTool_DumpCmds.cpp	/^static int DoDumpShapeFile(const vector<const char *>& args)$/;"	f	file:
DoEmit	.\WEDMap\WED_CreateToolBase.cpp	/^void		WED_CreateToolBase::DoEmit(int do_close)$/;"	f	class:WED_CreateToolBase
DoExport	.\RenderFarmUI\RF_Export.cpp	/^void	DoExport(XPWidgetID inWidget, int inResult)$/;"	f
DoExtent	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoExtent(const vector<const char *>& args)$/;"	f	file:
DoFilter	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void WED_LibraryListAdapter::DoFilter()$/;"	f	class:WED_LibraryListAdapter
DoFixRoads	.\XESTools\GISTool_VectorCmds.cpp	/^int DoFixRoads(const vector<const char *>& args)$/;"	f
DoFloatDEMImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoFloatDEMImport(const vector<const char *>& args)$/;"	f	file:
DoGLCCImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoGLCCImport(const vector<const char *>& args)$/;"	f	file:
DoGSHHSImport	.\XESTools\GISTool_VectorCmds.cpp	/^static int DoGSHHSImport(const vector<const char *>& args)$/;"	f	file:
DoHGTExport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoHGTExport(const vector<const char *>& args)$/;"	f	file:
DoHGTImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoHGTImport(const vector<const char *>& args)$/;"	f	file:
DoHGTTileExport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoHGTTileExport(const vector<const char *>& args)$/;"	f	file:
DoHGTTileExport_HELP	.\XESTools\GISTool_DemCmds.cpp	786;"	d	file:
DoHackTestrasterizer	.\XESTools\GISTool_MiscCmds.cpp	/^static int DoHackTestrasterizer(const vector<const char *>& args)$/;"	f	file:
DoHelp	.\XESTools\GISTool copy.cpp	/^void	DoHelp(void)$/;"	f
DoHelp	.\XESTools\GISTool.cpp	/^static int DoHelp(const vector<const char *>& args)$/;"	f	file:
DoIDAImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoIDAImport(const vector<const char *>& args)$/;"	f	file:
DoIfEmpty	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoIfEmpty(const vector<const char *>& args)$/;"	f	file:
DoImport	.\RenderFarmUI\RF_Import.cpp	/^void	DoImport(XPWidgetID inWidget, int inResult)$/;"	f
DoInstantiateObjs	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoInstantiateObjs(const vector<const char *>& args)$/;"	f	file:
DoIt	.\WEDImportExport\WED_AptImportDialog.cpp	/^void WED_AptImportDialog::DoIt(void)$/;"	f	class:WED_AptImportDialog
DoKillSliverWater	.\XESTools\GISTool_VectorCmds.cpp	/^int DoKillSliverWater(const vector<const char *> &args)$/;"	f
DoKillSlopedWater	.\XESTools\GISTool_VectorCmds.cpp	/^int DoKillSlopedWater(const vector<const char *> &args)$/;"	f
DoKillTunnels	.\XESTools\GISTool_VectorCmds.cpp	/^int DoKillTunnels(const vector<const char *>& args)$/;"	f
DoLoad	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoLoad(const vector<const char *>& args)$/;"	f	file:
DoMakeCoverage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoMakeCoverage(const vector<const char *>& args)$/;"	f
DoMakeLUCoverage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoMakeLUCoverage(const vector<const char *>& args)$/;"	f
DoMakeTerrainPackage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoMakeTerrainPackage(const vector<const char *>& args)$/;"	f
DoMakeWetCoverage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoMakeWetCoverage(const vector<const char *>& args)$/;"	f
DoMaskRemember	.\XESTools\GISTool_DemCmds.cpp	/^static int DoMaskRemember(const vector<const char *>& args)$/;"	f	file:
DoMerge	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoMerge(const vector<const char *>& args)$/;"	f	file:
DoMeshErrStats	.\XESTools\GISTool_MiscCmds.cpp	/^static int DoMeshErrStats(const vector<const char *>& s)$/;"	f	file:
DoNoProgress	.\RenderFarmUI\RF_Main.cpp	/^static int DoNoProgress(const vector<const char *>& args)	{	\/*gProgress = NULL;					*\/return 0;	}$/;"	f	file:
DoNoProgress	.\XESTools\GISTool.cpp	/^static int DoNoProgress(const vector<const char *>& args)	{	gProgress = NULL;					return 0;	}$/;"	f	file:
DoNoTiming	.\RenderFarmUI\RF_Main.cpp	/^static int DoNoTiming(const vector<const char *>& args)		{	gTiming = 0;	return 0;	}$/;"	f	file:
DoNoTiming	.\XESTools\GISTool.cpp	/^static int DoNoTiming(const vector<const char *>& args)		{	gTiming = 0;	return 0;	}$/;"	f	file:
DoObjToConfig	.\XESTools\GISTool_MiscCmds.cpp	/^static int	DoObjToConfig(const vector<const char *>& args)$/;"	f	file:
DoObsImport	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoObsImport(const vector<const char *>& args)$/;"	f	file:
DoOverlay	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoOverlay(const vector<const char *>& args)$/;"	f	file:
DoParseMore	.\WEDNetwork\WED_Server.cpp	/^int WED_Server::DoParseMore(vector<char>& io_buf)$/;"	f	class:WED_Server
DoParseMore	.\WEDXPlugin\WED_XPluginClient.cpp	/^void WED_XPluginClient::DoParseMore()$/;"	f	class:WED_XPluginClient
DoPreCheckWaterConform	.\XESTools\GISTool_MiscCmds.cpp	/^static int DoPreCheckWaterConform(const vector<const char *>& args)$/;"	f	file:
DoProcessing	.\Network\HTTPClient.cpp	/^int	HTTPConnection::DoProcessing(void)$/;"	f	class:HTTPConnection
DoProcessing	.\WEDNetwork\WED_Connection.cpp	/^int  	WED_Connection::DoProcessing(void)$/;"	f	class:WED_Connection
DoProcessing	.\WEDNetwork\WED_Server.cpp	/^int  WED_Server::DoProcessing(void)$/;"	f	class:WED_Server
DoProcessing	.\WEDXPlugin\WED_XPluginClient.cpp	/^int  WED_XPluginClient::DoProcessing()$/;"	f	class:WED_XPluginClient
DoProgress	.\RenderFarmUI\RF_Main.cpp	/^static int DoProgress(const vector<const char *>& args)		{	\/*gProgress = ConsoleProgressFunc;	*\/return 0;	}$/;"	f	file:
DoProgress	.\XESTools\GISTool.cpp	/^static int DoProgress(const vector<const char *>& args)		{	gProgress = ConsoleProgressFunc;	return 0;	}$/;"	f	file:
DoQuiet	.\RenderFarmUI\RF_Main.cpp	/^static int DoQuiet(const vector<const char *>& args)		{	gVerbose = 0;	return 0;	}$/;"	f	file:
DoQuiet	.\XESTools\GISTool.cpp	/^static int DoQuiet(const vector<const char *>& args)		{	gVerbose = 0;	return 0;	}$/;"	f	file:
DoRasterAdjust	.\XESTools\GISTool_DemCmds.cpp	/^int DoRasterAdjust(const vector<const char *>& args)$/;"	f
DoRasterAdjust_HELP	.\XESTools\GISTool_DemCmds.cpp	575;"	d	file:
DoRasterDEM	.\XESTools\GISTool_VectorCmds.cpp	/^int DoRasterDEM(const vector<const char *>& args)$/;"	f
DoRasterExport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoRasterExport(const vector<const char *>& args)$/;"	f	file:
DoRasterExport_HELP	.\XESTools\GISTool_DemCmds.cpp	342;"	d	file:
DoRasterImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoRasterImport(const vector<const char *>& args)$/;"	f	file:
DoRasterImport_HELP	.\XESTools\GISTool_DemCmds.cpp	41;"	d	file:
DoRasterInit	.\XESTools\GISTool_DemCmds.cpp	/^int DoRasterInit(const vector<const char *>& args)$/;"	f
DoRasterInit_HELP	.\XESTools\GISTool_DemCmds.cpp	445;"	d	file:
DoRasterMerge	.\XESTools\GISTool_DemCmds.cpp	/^int DoRasterMerge(const vector<const char *>& args)$/;"	f
DoRasterMerge_HELP	.\XESTools\GISTool_DemCmds.cpp	610;"	d	file:
DoRasterResample	.\XESTools\GISTool_DemCmds.cpp	/^int DoRasterResample(const vector<const char *>& args)$/;"	f
DoRasterResampleMedian	.\XESTools\GISTool_DemCmds.cpp	/^int DoRasterResampleMedian(const vector<const char *>& args)$/;"	f
DoRasterResampleMedian_HELP	.\XESTools\GISTool_DemCmds.cpp	532;"	d	file:
DoRasterResample_HELP	.\XESTools\GISTool_DemCmds.cpp	492;"	d	file:
DoRasterScale	.\XESTools\GISTool_DemCmds.cpp	/^int DoRasterScale(const vector<const char *>& args)$/;"	f
DoRasterScale_HELP	.\XESTools\GISTool_DemCmds.cpp	472;"	d	file:
DoRasterWatershed	.\XESTools\GISTool_DemCmds.cpp	/^static int DoRasterWatershed(const vector<const char *>& args)$/;"	f	file:
DoRasterWatershed_HELP	.\XESTools\GISTool_DemCmds.cpp	673;"	d	file:
DoReadData	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void	WED_NWLinkAdapter::DoReadData()$/;"	f	class:WED_NWLinkAdapter
DoReduceVectors	.\XESTools\GISTool_VectorCmds.cpp	/^int DoReduceVectors(const vector<const char *>& args)$/;"	f
DoRemember	.\XESTools\GISTool_DemCmds.cpp	/^static int DoRemember(const vector<const char *>& args)$/;"	f	file:
DoRemoveDupeObjs	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoRemoveDupeObjs(const vector<const char *>& args)$/;"	f	file:
DoRemoveIslands	.\XESTools\GISTool_VectorCmds.cpp	/^int DoRemoveIslands(const vector<const char *>& args)$/;"	f
DoRemoveOutsets	.\XESTools\GISTool_VectorCmds.cpp	/^int DoRemoveOutsets(const vector<const char *>& args)$/;"	f
DoRemoveWetAntennas	.\XESTools\GISTool_VectorCmds.cpp	/^int DoRemoveWetAntennas(const vector<const char *>& args)$/;"	f
DoReplaceText	.\OGLE\ogle.cpp	/^void			OGLE::DoReplaceText($/;"	f	class:OGLE
DoSave	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoSave(const vector<const char *>& args)$/;"	f	file:
DoSaveDiscardDialog	.\Utils\PlatformUtils.lin.cpp	/^int DoSaveDiscardDialog(const char * inMessage1, const char * inMessage2)$/;"	f
DoSaveDiscardDialog	.\Utils\PlatformUtils.win.cpp	/^int DoSaveDiscardDialog(const char * inMessage1, const char * inMessage2)$/;"	f
DoSaveForce	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoSaveForce(const vector<const char *>& args)$/;"	f	file:
DoSaveNormals	.\XESTools\GISTool_DemCmds.cpp	/^static int DoSaveNormals(const vector<const char *>& args)$/;"	f	file:
DoScreenShot	.\XESTools\GISTool_DumpCmds.cpp	/^static int DoScreenShot(const vector<const char *>& args)$/;"	f	file:
DoScreenshot	.\RenderFarmUI\RF_SpecialCommands.cpp	/^void DoScreenshot(void)$/;"	f
DoSelectAdjacentFaces	.\RenderFarmUI\RF_Main.cpp	/^static int DoSelectAdjacentFaces(const vector<const char *>& args)$/;"	f	file:
DoSelectComplexVertices	.\RenderFarmUI\RF_Main.cpp	/^static int DoSelectComplexVertices(const vector<const char *>& args)$/;"	f	file:
DoSelectFaces	.\RenderFarmUI\RF_Main.cpp	/^static int DoSelectFaces(const vector<const char *>& args)$/;"	f	file:
DoSelectSuperBlock	.\RenderFarmUI\RF_Main.cpp	/^static int DoSelectSuperBlock(const vector<const char *>& args)$/;"	f	file:
DoSelectWithFilter	.\WEDWindows\WED_GroupCommands.cpp	/^static void DoSelectWithFilter(const char * op_name, bool (* filter)(WED_Thing * t, void * ref), IResolver * resolver)$/;"	f	file:
DoSelectionPreview	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::DoSelectionPreview()$/;"	f	class:RF_SelectionTool
DoSelfTest	.\RenderFarmUI\RF_Main.cpp	/^static int DoSelfTest(const vector<const char *>& args)		{	\/*SelfTestAll();*\/ 	return 0; 	}$/;"	f	file:
DoSelfTest	.\XESTools\GISTool.cpp	/^static int DoSelfTest(const vector<const char *>& args)		{	SelfTestAll(); 	return 0; 	}$/;"	f	file:
DoSendData	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void 	WED_NWLinkAdapter::DoSendData()$/;"	f	class:WED_NWLinkAdapter
DoSetMeshLevel	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoSetMeshLevel(const vector<const char *>& args)$/;"	f	file:
DoSetSelMode	.\RenderFarmUI\RF_Main.cpp	/^static int DoSetSelMode(const vector<const char *>& args) { RF_SetSelectionMode(atoi(args[0])); return 0; } $/;"	f	file:
DoShapeExport	.\XESTools\GISTool_VectorCmds.cpp	/^static int DoShapeExport(const vector<const char *>& args)$/;"	f	file:
DoShapeImport	.\XESTools\GISTool_VectorCmds.cpp	/^static int DoShapeImport(const vector<const char *>& args)$/;"	f	file:
DoShapeRaster	.\XESTools\GISTool_VectorCmds.cpp	/^static int DoShapeRaster(const vector<const char *>& inArgs)$/;"	f	file:
DoShortOzImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoShortOzImport(const vector<const char *>& args)$/;"	f	file:
DoShowCoverage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoShowCoverage(const vector<const char *>& args)$/;"	f
DoShowObjRange	.\XESTools\GISTool_ObsCmds.cpp	/^static int DoShowObjRange(const vector<const char *>& args)$/;"	f	file:
DoSimplify	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoSimplify(const vector<const char *>& args)$/;"	f	file:
DoSpreadsheet	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoSpreadsheet(const vector<const char *>& args)$/;"	f	file:
DoStart	.\WEDNetwork\WED_Server.cpp	/^int WED_Server::DoStart()$/;"	f	class:WED_Server
DoStop	.\WEDNetwork\WED_Server.cpp	/^void WED_Server::DoStop()$/;"	f	class:WED_Server
DoTagOrigin	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoTagOrigin(const vector<const char *>& args)$/;"	f	file:
DoTestTerrainPackage	.\XESTools\GISTool_MiscCmds.cpp	/^int DoTestTerrainPackage(const vector<const char *>& args)$/;"	f
DoTiming	.\RenderFarmUI\RF_Main.cpp	/^static int DoTiming(const vector<const char *>& args)		{	gTiming = 1;	return 0;	}$/;"	f	file:
DoTiming	.\XESTools\GISTool.cpp	/^static int DoTiming(const vector<const char *>& args)		{	gTiming = 1;	return 0;	}$/;"	f	file:
DoUSGSNaturalImport	.\XESTools\GISTool_DemCmds.cpp	/^static int DoUSGSNaturalImport(const vector<const char *>& args)$/;"	f	file:
DoUpsample	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoUpsample(const vector<const char *>& args)$/;"	f	file:
DoUserAlert	.\Utils\PlatformUtils.lin.cpp	/^void	DoUserAlert(const char * inMsg)$/;"	f
DoUserAlert	.\Utils\PlatformUtils.win.cpp	/^void	DoUserAlert(const char * inMsg)$/;"	f
DoValidate	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoValidate(const vector<const char *>& args)$/;"	f	file:
DoVerbose	.\RenderFarmUI\RF_Main.cpp	/^static int DoVerbose(const vector<const char *>& args)		{	gVerbose = 1;	return 0;	}$/;"	f	file:
DoVerbose	.\XESTools\GISTool.cpp	/^static int DoVerbose(const vector<const char *>& args)		{	gVerbose = 1;	return 0;	}$/;"	f	file:
DoWaterCount	.\XESTools\GISTool_CoreCmds.cpp	/^static int DoWaterCount(const vector<const char *>& args)$/;"	f	file:
DoZoning	.\XESTools\GISTool_ProcessingCmds.cpp	/^static int DoZoning(const vector<const char *>& args)$/;"	f	file:
DoesPackHaveLibraryItems	.\WEDCore\WED_LibraryMgr.cpp	/^bool		WED_LibraryMgr::DoesPackHaveLibraryItems(int package)$/;"	f	class:WED_LibraryMgr
Done	.\SDTS\SDTSRead.cpp	/^bool			SDTSModuleIterator::Done(void)$/;"	f	class:SDTSModuleIterator
Done	.\Utils\XChunkyFileUtils.cpp	/^	void Done(void)$/;"	f	class:FlatEncoder
Done	.\Utils\XChunkyFileUtils.cpp	/^	void Done(void)$/;"	f	class:RLEEncoder
Done	.\Utils\XChunkyFileUtils.h	/^	bool	Done(void)			{ return position >= end;					}$/;"	f	struct:XAtomPackedData
Done	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::Done(void)$/;"	f	class:VPFTableIterator
DoneMesh	.\XESCore\GreedyMesh.cpp	/^void	DoneMesh(void)$/;"	f
DoneScan	.\Utils\PolyRasterUtils.h	/^	bool		DoneScan(void) { return unused_master_index >= masters.size() && actives.empty(); }$/;"	f	struct:PolyRasterizer
DoneScan	.\Utils\PolyRasterUtils.h	/^bool	BoxRasterizer<Number>::DoneScan()$/;"	f	class:BoxRasterizer
DoneWithFan	.\XESCore\TriFan.cpp	/^void			TriFanBuilder::DoneWithFan(TriFan_t * inFan)$/;"	f	class:TriFanBuilder
DoubleClickCell	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::DoubleClickCell($/;"	f	class:WED_AptTable
DoubleClickCell	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::DoubleClickCell($/;"	f	class:WED_ICAOTable
DoubleClickCell	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::DoubleClickCell($/;"	f	class:WED_VerTable
DoubleClickCell	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::DoubleClickCell($/;"	f	class:WED_LibraryListAdapter
DoubleClickCell	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int		WED_ToolInfoAdapter::DoubleClickCell($/;"	f	class:WED_ToolInfoAdapter
DoubleClickCell	.\WEDProperties\WED_PropertyTable.cpp	/^int		WED_PropertyTable::DoubleClickCell($/;"	f	class:WED_PropertyTable
DoubleClickCell	.\WEDWindows\WED_FilterBar.h	/^	virtual	int		DoubleClickCell($/;"	f	class:WED_FilterBar
DoubleClickCell	.\WEDWindows\WED_PackageListAdapter.cpp	/^int		WED_PackageListAdapter::DoubleClickCell($/;"	f	class:WED_PackageListAdapter
DoubleRange	.\XPTools\AddObjects.cpp	/^typedef	pair<double, double>	DoubleRange;$/;"	t	file:
DownloadRange	.\XPTools\GetImage.cpp	/^void	DownloadRange(const char * scale, double inLatSouth, double inLonWest, double inLatNorth, double inLonEast, const char * inFileName, float inLimit)$/;"	f
DownsampleDEM	.\XESCore\DEMAlgs.cpp	/^void	DownsampleDEM(const DEMGeo& ioDem, DEMGeo& smaller, int ratio)$/;"	f
Drag	.\OGLE\ogle.cpp	/^void			OGLE::Drag($/;"	f	class:OGLE
DragEnter	.\GUI\GUI_Pane.h	/^	virtual	GUI_DragOperation			DragEnter	(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended) { return gui_Drag_None;	}$/;"	f	class:GUI_Pane
DragEnter	.\GUI\GUI_Table.cpp	/^GUI_DragOperation			GUI_Table::DragEnter	(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_Table
DragEnter	.\GUI\GUI_Window.cpp	/^STDMETHODIMP GUI_Window_DND::DragEnter(LPDATAOBJECT data_obj, DWORD key_state, POINTL where, LPDWORD effect)$/;"	f	class:GUI_Window_DND
DragEnter	.\GUI\GUI_Window.h	/^	virtual	void			DragEnter(int inX, int inY) { }$/;"	f	class:GUI_Window
DragEnter	.\UI\XGrinderApp.cpp	/^	virtual	void			DragEnter(int inX, int inY) { }$/;"	f	class:XGrinderWin
DragEnter	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::DragEnter(int x, int y)$/;"	f	class:XPWidgetWin
DragEnter	.\UI\XWin32DND.cpp	/^STDMETHODIMP CDropTarget::DragEnter(   LPDATAOBJECT pDataObj,$/;"	f	class:CDropTarget
DragEnter	.\XPTools\ViewObj.cpp	/^	virtual	void			DragEnter(int inX, int inY) { }$/;"	f	class:XObjWin
DragHandleInfo_t	.\Utils\UIUtils.h	/^struct	DragHandleInfo_t {$/;"	s
DragHandleManager	.\Utils\UIUtils.h	/^class	DragHandleManager {$/;"	c
DragHandleSet	.\Utils\UIUtils.cpp	/^DragHandleSet::DragHandleSet($/;"	f	class:DragHandleSet
DragHandleSet	.\Utils\UIUtils.h	/^class	DragHandleSet {$/;"	c
DragLeave	.\GUI\GUI_Pane.h	/^	virtual	void						DragLeave	(void) { }$/;"	f	class:GUI_Pane
DragLeave	.\GUI\GUI_Table.cpp	/^void						GUI_Table::DragLeave	(void)$/;"	f	class:GUI_Table
DragLeave	.\GUI\GUI_Window.cpp	/^STDMETHODIMP GUI_Window_DND::DragLeave(void)$/;"	f	class:GUI_Window_DND
DragLeave	.\GUI\GUI_Window.h	/^	virtual	void			DragLeave(void) { }$/;"	f	class:GUI_Window
DragLeave	.\UI\XGrinderApp.cpp	/^	virtual	void			DragLeave(void) { }$/;"	f	class:XGrinderWin
DragLeave	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::DragLeave(void)$/;"	f	class:XPWidgetWin
DragLeave	.\UI\XWin32DND.cpp	/^STDMETHODIMP CDropTarget::DragLeave()$/;"	f	class:CDropTarget
DragLeave	.\XPTools\ViewObj.cpp	/^	virtual	void			DragLeave(void) { }$/;"	f	class:XObjWin
DragOver	.\GUI\GUI_Pane.h	/^	virtual	GUI_DragOperation			DragOver	(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended) { return gui_Drag_None;	}$/;"	f	class:GUI_Pane
DragOver	.\GUI\GUI_Table.cpp	/^GUI_DragOperation			GUI_Table::DragOver	(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_Table
DragOver	.\GUI\GUI_Window.cpp	/^STDMETHODIMP GUI_Window_DND::DragOver(DWORD key_state, POINTL where, LPDWORD effect)$/;"	f	class:GUI_Window_DND
DragOver	.\GUI\GUI_Window.h	/^	virtual	void			DragOver(int inX, int inY) { }$/;"	f	class:GUI_Window
DragOver	.\UI\XGrinderApp.cpp	/^	virtual	void			DragOver(int inX, int inY) { }$/;"	f	class:XGrinderWin
DragOver	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::DragOver(int x, int y)$/;"	f	class:XPWidgetWin
DragOver	.\UI\XWin32DND.cpp	/^STDMETHODIMP CDropTarget::DragOver( DWORD grfKeyState,$/;"	f	class:CDropTarget
DragOver	.\XPTools\ViewObj.cpp	/^	virtual	void			DragOver(int inX, int inY) { }$/;"	f	class:XObjWin
DragScroll	.\GUI\GUI_Pane.h	/^	virtual	void						DragScroll	(int x, int y) { }$/;"	f	class:GUI_Pane
DragScroll	.\GUI\GUI_Table.cpp	/^void					GUI_Table::DragScroll	(int x, int y)$/;"	f	class:GUI_Table
DragType_t	.\WEDMap\WED_HandleToolBase.h	/^	enum	DragType_t {$/;"	g	class:WED_HandleToolBase
DrainDir_CCW	.\XESCore\Hydro.cpp	/^inline int	DrainDir_CCW(int drain_dir) { return drain_Dir0 + ((drain_dir - drain_Dir0 + 7) % 8); }$/;"	f
DrainDir_CW	.\XESCore\Hydro.cpp	/^inline int	DrainDir_CW(int drain_dir)  { return drain_Dir0 + ((drain_dir - drain_Dir0 + 1) % 8); }$/;"	f
Draw	.\GUI\GUI_Button.cpp	/^void		GUI_Button::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Button
Draw	.\GUI\GUI_Label.cpp	/^void		GUI_Label::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Label
Draw	.\GUI\GUI_Packer.cpp	/^void		GUI_Packer::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Packer
Draw	.\GUI\GUI_Pane.h	/^	virtual	void		Draw(GUI_GraphState * state) { }$/;"	f	class:GUI_Pane
Draw	.\GUI\GUI_PopupButton.cpp	/^void		GUI_PopupButton::Draw(GUI_GraphState * state)$/;"	f	class:GUI_PopupButton
Draw	.\GUI\GUI_ScrollBar.cpp	/^void		GUI_ScrollBar::Draw(GUI_GraphState * state)$/;"	f	class:GUI_ScrollBar
Draw	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::Draw(GUI_GraphState * g)$/;"	f	class:GUI_ScrollerPane
Draw	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Splitter
Draw	.\GUI\GUI_TabControl.cpp	/^void		GUI_TabControl::Draw(GUI_GraphState * state)$/;"	f	class:GUI_TabControl
Draw	.\GUI\GUI_Table.cpp	/^void		GUI_Header::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Header
Draw	.\GUI\GUI_Table.cpp	/^void		GUI_Side::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Side
Draw	.\GUI\GUI_Table.cpp	/^void		GUI_Table::Draw(GUI_GraphState * state)$/;"	f	class:GUI_Table
Draw	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::Draw(GUI_GraphState * state)$/;"	f	class:GUI_TextField
Draw	.\GUI\GUI_ToolBar.cpp	/^void		GUI_ToolBar::Draw(GUI_GraphState * state)$/;"	f	class:GUI_ToolBar
Draw	.\Network\Terraserver.cpp	/^void	AsyncImage::Draw(double coords[4][2],GUI_GraphState * g)$/;"	f	class:AsyncImage
Draw	.\OGLE\ogle.cpp	/^void			OGLE::Draw(int draw_caret)$/;"	f	class:OGLE
Draw	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::Draw(GUI_GraphState * state)$/;"	f	class:RF_MapView
Draw	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^void	WED_LibraryPreviewPane::Draw(GUI_GraphState * g)$/;"	f	class:WED_LibraryPreviewPane
Draw	.\WEDMap\WED_Map.cpp	/^void		WED_Map::Draw(GUI_GraphState * state)$/;"	f	class:WED_Map
Draw	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::Draw(GUI_GraphState * state)$/;"	f	class:WED_TCE
Draw	.\WEDWindows\WED_AboutBox.cpp	/^void		WED_AboutBox::Draw(GUI_GraphState * state)$/;"	f	class:WED_AboutBox
Draw	.\WEDWindows\WED_PackageStatusPane.cpp	/^void		WED_PackageStatusPane::Draw(GUI_GraphState * state)$/;"	f	class:WED_PackageStatusPane
Draw	.\WEDWindows\WED_StartWindow.cpp	/^void	WED_StartWindow::Draw(GUI_GraphState * state)$/;"	f	class:WED_StartWindow
Draw	.\WEDXPlugin\WED_XPluginEntity.cpp	/^void WED_XPluginEntity::Draw(bool isLit)$/;"	f	class:WED_XPluginEntity
Draw	.\WEDXPlugin\WED_XPluginObject.cpp	/^void WED_XPluginObject::Draw(bool isLit)$/;"	f	class:WED_XPluginObject
DrawCell	.\ObjEdit\OE_PatchList.cpp	/^void	OE_PatchTable::DrawCell(int row, int col, int l, int t, int r, int b)$/;"	f	class:OE_PatchTable
DrawDeformer	.\ObjEdit\OE_CubeDeformer.cpp	/^void	OE_CubeDeformer::DrawDeformer(void)$/;"	f	class:OE_CubeDeformer
DrawEntityStructure	.\WEDMap\WED_MapLayer.h	/^	virtual	bool		DrawEntityStructure		(bool inCurrent, IGISEntity * entity, GUI_GraphState * g, int selected) { return false; }$/;"	f	class:WED_MapLayer
DrawEntityStructure	.\WEDMap\WED_StructureLayer.cpp	/^bool		WED_StructureLayer::DrawEntityStructure		(bool inCurrent, IGISEntity * entity, GUI_GraphState * g, int selected)$/;"	f	class:WED_StructureLayer
DrawEntityStructure	.\WEDTCE\WED_TCELayer.h	/^	virtual	void		DrawEntityStructure		(bool inCurrent, IGISEntity * entity, GUI_GraphState * g) { }$/;"	f	class:WED_TCELayer
DrawEntityStructure	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::DrawEntityStructure		(bool inCurrent, IGISEntity * entity, GUI_GraphState * g)$/;"	f	class:WED_TCEToolAdapter
DrawEntityVisualization	.\WEDMap\WED_MapLayer.h	/^	virtual	bool		DrawEntityVisualization	(bool inCurrent, IGISEntity * entity, GUI_GraphState * g, int selected) { return false; }$/;"	f	class:WED_MapLayer
DrawEntityVisualization	.\WEDMap\WED_PreviewLayer.cpp	/^bool		WED_PreviewLayer::DrawEntityVisualization		(bool inCurrent, IGISEntity * entity, GUI_GraphState * g, int selected)$/;"	f	class:WED_PreviewLayer
DrawEntityVisualization	.\WEDMap\WED_StructureLayer.cpp	/^bool		WED_StructureLayer::DrawEntityVisualization		(bool inCurrent, IGISEntity * entity, GUI_GraphState * g, int selected)$/;"	f	class:WED_StructureLayer
DrawEntityVisualization	.\WEDTCE\WED_TCELayer.h	/^	virtual	void		DrawEntityVisualization	(bool inCurrent, IGISEntity * entity, GUI_GraphState * g) { }$/;"	f	class:WED_TCELayer
DrawEntityVisualization	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::DrawEntityVisualization	(bool inCurrent, IGISEntity * entity, GUI_GraphState * g)$/;"	f	class:WED_TCEToolAdapter
DrawFeedbackOverlay	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void	RF_BezierTestTool::DrawFeedbackOverlay($/;"	f	class:RF_BezierTestTool
DrawFeedbackOverlay	.\RenderFarmUI\RF_CropTool.cpp	/^void	RF_CropTool::DrawFeedbackOverlay($/;"	f	class:RF_CropTool
DrawFeedbackOverlay	.\RenderFarmUI\RF_ImageTool.cpp	/^void	RF_ImageTool::DrawFeedbackOverlay($/;"	f	class:RF_ImageTool
DrawFeedbackOverlay	.\RenderFarmUI\RF_MeshTester.cpp	/^void	RF_MeshTester::DrawFeedbackOverlay($/;"	f	class:RF_MeshTester
DrawFeedbackOverlay	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::DrawFeedbackOverlay($/;"	f	class:RF_SelectionTool
DrawFeedbackOverlay	.\RenderFarmUI\RF_TerraTool.cpp	/^void	RF_TerraTool::DrawFeedbackOverlay($/;"	f	class:RF_TerraTool
DrawFeedbackOverlay	.\RenderFarmUI\RF_TopoTester.cpp	/^void	RF_TopoTester::DrawFeedbackOverlay($/;"	f	class:RF_TopoTester
DrawFeedbackOverlay	.\RenderFarmUI\RF_TriTestTool.cpp	/^void	RF_TriTestTool::DrawFeedbackOverlay($/;"	f	class:RF_TriTestTool
DrawFeedbackUnderlay	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void	RF_BezierTestTool::DrawFeedbackUnderlay($/;"	f	class:RF_BezierTestTool
DrawFeedbackUnderlay	.\RenderFarmUI\RF_CropTool.cpp	/^void	RF_CropTool::DrawFeedbackUnderlay($/;"	f	class:RF_CropTool
DrawFeedbackUnderlay	.\RenderFarmUI\RF_ImageTool.cpp	/^void	RF_ImageTool::DrawFeedbackUnderlay($/;"	f	class:RF_ImageTool
DrawFeedbackUnderlay	.\RenderFarmUI\RF_MeshTester.cpp	/^void	RF_MeshTester::DrawFeedbackUnderlay($/;"	f	class:RF_MeshTester
DrawFeedbackUnderlay	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::DrawFeedbackUnderlay($/;"	f	class:RF_SelectionTool
DrawFeedbackUnderlay	.\RenderFarmUI\RF_TerraTool.cpp	/^void	RF_TerraTool::DrawFeedbackUnderlay($/;"	f	class:RF_TerraTool
DrawFeedbackUnderlay	.\RenderFarmUI\RF_TopoTester.cpp	/^void	RF_TopoTester::DrawFeedbackUnderlay($/;"	f	class:RF_TopoTester
DrawFeedbackUnderlay	.\RenderFarmUI\RF_TriTestTool.cpp	/^void	RF_TriTestTool::DrawFeedbackUnderlay($/;"	f	class:RF_TriTestTool
DrawHandle	.\Utils\UIUtils.cpp	/^void		DragHandleSet::DrawHandle($/;"	f	class:DragHandleSet
DrawLaGrange	.\WEDMap\WED_StructureLayer.cpp	/^void DrawLaGrange(const vector<Point2>& p)$/;"	f
DrawLineAttrs	.\WEDMap\WED_DrawUtils.cpp	/^void DrawLineAttrs(GUI_GraphState * state, const Point2 * pts, int count, const set<int>& attrs, WED_Color c)$/;"	f
DrawMapBucketed	.\RenderFarmUI\RF_DrawMap.cpp	/^void	DrawMapBucketed($/;"	f
DrawMenuBar	.\UI\XWin.lin.cpp	/^void XWin::DrawMenuBar(void)$/;"	f	class:XWin
DrawMenuBar	.\UI\XWin.win.cpp	/^void			XWin::DrawMenuBar(void)$/;"	f	class:XWin
DrawProjectionSetup	.\ObjEdit\OE_ProjectionMgr.cpp	/^void		OE_ProjectionMgr::DrawProjectionSetup(void)$/;"	f	class:OE_ProjectionMgr
DrawProjector	.\ObjEdit\OE_TexProjector.cpp	/^void	OE_CylinderProjector::DrawProjector(void)$/;"	f	class:OE_CylinderProjector
DrawProjector	.\ObjEdit\OE_TexProjector.cpp	/^void	OE_PlanarProjector::DrawProjector(void)$/;"	f	class:OE_PlanarProjector
DrawProjector	.\ObjEdit\OE_TexProjector.cpp	/^void	OE_SphereProjector::DrawProjector(void)$/;"	f	class:OE_SphereProjector
DrawQuad	.\ObjEdit\OE_TexEdWindow.cpp	/^static	void	DrawQuad(float x, float y, float radius)$/;"	f	file:
DrawRange	.\UI\FontMgr.cpp	/^void FontMgr::DrawRange($/;"	f	class:FontMgr
DrawSelected	.\WEDMap\WED_MapLayer.h	/^	virtual	void		DrawSelected			(bool inCurrent, GUI_GraphState * g) { }$/;"	f	class:WED_MapLayer
DrawSelected	.\WEDMap\WED_VertexTool.cpp	/^void		WED_VertexTool::DrawSelected			(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_VertexTool
DrawSelected	.\WEDTCE\WED_TCELayer.h	/^	virtual	void		DrawSelected			(bool inCurrent, GUI_GraphState * g) { }$/;"	f	class:WED_TCELayer
DrawSelected	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::DrawSelected			(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_TCEToolAdapter
DrawSelection	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::DrawSelection($/;"	f	class:GUI_TextField
DrawSelectionCB	.\OGLE\ogle.cpp	/^void			OGLE::DrawSelectionCB($/;"	f	class:OGLE
DrawSelection_f	.\OGLE\ogle.h	/^	void			(* DrawSelection_f)($/;"	m	struct:OGLE_Callbacks
DrawSelf	.\ObjEdit\OE_Pane.cpp	/^void	OE_Pane::DrawSelf(void)$/;"	f	class:OE_Pane
DrawSelf	.\ObjEdit\OE_Preview.cpp	/^void	OE_Preview::DrawSelf(void)$/;"	f	class:OE_Preview
DrawSelf	.\ObjEdit\OE_Scroller.cpp	/^void		OE_Scroller::DrawSelf(void)$/;"	f	class:OE_Scroller
DrawSelf	.\ObjEdit\OE_TablePane.cpp	/^void	OE_TablePane::DrawSelf(void)$/;"	f	class:OE_TablePane
DrawSelf	.\ObjEdit\OE_TexEdWindow.cpp	/^void		OE_DirectEdPane::DrawSelf(void)$/;"	f	class:OE_DirectEdPane
DrawSelf	.\ObjEdit\OE_TexEdWindow.cpp	/^void		OE_PatchEdPane::DrawSelf(void)$/;"	f	class:OE_PatchEdPane
DrawSelf	.\ObjEdit\OE_TexEdWindow.cpp	/^void		OE_TexEdPane::DrawSelf(void)$/;"	f	class:OE_TexEdPane
DrawSelf	.\RenderFarmUI\RF_Pane.cpp	/^void	RF_Pane::DrawSelf(void)$/;"	f	class:RF_Pane
DrawStrFor	.\WEDMap\WED_Map.cpp	/^void		WED_Map::DrawStrFor(WED_MapLayer * layer, int current, const Bbox2& bounds, IGISEntity * what, GUI_GraphState * g, ISelection * sel, int depth)$/;"	f	class:WED_Map
DrawString	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::DrawString($/;"	f	class:GUI_TextField
DrawString	.\UI\FontMgr.cpp	/^void	FontMgr::DrawString($/;"	f	class:FontMgr
DrawStringCB	.\OGLE\ogle.cpp	/^void			OGLE::DrawStringCB($/;"	f	class:OGLE
DrawString_f	.\OGLE\ogle.h	/^	void			(* DrawString_f)($/;"	m	struct:OGLE_Callbacks
DrawStructure	.\WEDCore\WED_TCEDebugLayer.cpp	/^void	WED_TCEDebugLayer::DrawStructure			(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_TCEDebugLayer
DrawStructure	.\WEDMap\WED_DebugLayer.cpp	/^void	WED_DebugLayer::DrawStructure			(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_DebugLayer
DrawStructure	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::DrawStructure			(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_HandleToolBase
DrawStructure	.\WEDMap\WED_MapBkgnd.cpp	/^void		WED_MapBkgnd::DrawStructure(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_MapBkgnd
DrawStructure	.\WEDMap\WED_MapLayer.h	/^	virtual	void		DrawStructure			(bool inCurrent, GUI_GraphState * g) { }$/;"	f	class:WED_MapLayer
DrawStructure	.\WEDMap\WED_StructureLayer.cpp	/^void		WED_StructureLayer::DrawStructure(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_StructureLayer
DrawStructure	.\WEDNetwork\WED_NWInfoLayer.cpp	/^void	WED_NWInfoLayer::DrawStructure(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_NWInfoLayer
DrawStructure	.\WEDTCE\WED_TCELayer.h	/^	virtual	void		DrawStructure			(bool inCurrent, GUI_GraphState * g) { }$/;"	f	class:WED_TCELayer
DrawStructure	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::DrawStructure			(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_TCEToolAdapter
DrawVisFor	.\WEDMap\WED_Map.cpp	/^void		WED_Map::DrawVisFor(WED_MapLayer * layer, int current, const Bbox2& bounds, IGISEntity * what, GUI_GraphState * g, ISelection * sel, int depth)$/;"	f	class:WED_Map
DrawVisualization	.\WEDMap\WED_MapBkgnd.cpp	/^void		WED_MapBkgnd::DrawVisualization(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_MapBkgnd
DrawVisualization	.\WEDMap\WED_MapLayer.h	/^	virtual	void		DrawVisualization		(bool inCurrent, GUI_GraphState * g) { }$/;"	f	class:WED_MapLayer
DrawVisualization	.\WEDMap\WED_PreviewLayer.cpp	/^void		WED_PreviewLayer::DrawVisualization			(bool inCurent, GUI_GraphState * g)$/;"	f	class:WED_PreviewLayer
DrawVisualization	.\WEDMap\WED_TerraserverLayer.cpp	/^void		WED_TerraserverLayer::DrawVisualization		(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_TerraserverLayer
DrawVisualization	.\WEDMap\WED_WorldMapLayer.cpp	/^void		WED_WorldMapLayer::DrawVisualization		(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_WorldMapLayer
DrawVisualization	.\WEDNetwork\WED_NWInfoLayer.cpp	/^void	WED_NWInfoLayer::DrawVisualization(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_NWInfoLayer
DrawVisualization	.\WEDTCE\WED_TCELayer.h	/^	virtual	void		DrawVisualization		(bool inCurrent, GUI_GraphState * g) { }$/;"	f	class:WED_TCELayer
DrawVisualization	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::DrawVisualization		(bool inCurrent, GUI_GraphState * g)$/;"	f	class:WED_TCEToolAdapter
DrawWireFrame	.\GUI\GUI_Pane.cpp	/^void GUI_Pane::DrawWireFrame(int realBounds[4], bool prinf)$/;"	f	class:GUI_Pane
Drop	.\GUI\GUI_Pane.h	/^	virtual	GUI_DragOperation			Drop		(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended) { return gui_Drag_None;	}$/;"	f	class:GUI_Pane
Drop	.\GUI\GUI_Table.cpp	/^GUI_DragOperation			GUI_Table::Drop		(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_Table
Drop	.\GUI\GUI_Window.cpp	/^STDMETHODIMP GUI_Window_DND::Drop(LPDATAOBJECT data_obj, DWORD key_state, POINTL where, LPDWORD effect)$/;"	f	class:GUI_Window_DND
Drop	.\UI\XWin32DND.cpp	/^STDMETHODIMP CDropTarget::Drop(  LPDATAOBJECT pDataObj,$/;"	f	class:CDropTarget
Dump	.\Network\XMLObject.cpp	/^void		XMLObject::Dump(void)$/;"	f	class:XMLObject
DumpVPFTable	.\VPF\VPFTable.cpp	/^void	DumpVPFTable(MFMemFile * inFile, const VPF_TableDef& inDef)$/;"	f
DumpVPFTableHeader	.\VPF\VPFTable.cpp	/^void	DumpVPFTableHeader(const VPF_TableDef& inDef)$/;"	f
DuplicationPolicy	.\lib_json\include\json\value.h	/^         enum DuplicationPolicy $/;"	g	class:Json::Value::CZString
EARTH_DIR_NAME	.\WEDCore\WED_Package.cpp	35;"	d	file:
EDIT_DIR_NAME	.\WEDCore\WED_Package.cpp	34;"	d	file:
ENCODE_LAT_LON	.\Env\EnvWrite.c	/^long	ENCODE_LAT_LON(double lat, double lon, double latRef, double lonRef)$/;"	f
ENCODE_LLE_ALT	.\XPTools\Env2DSF.cpp	/^inline int		ENCODE_LLE_ALT(double alt) { return alt * (double) (1 << 16); }$/;"	f
ENCODE_LLE_INDEX	.\XPTools\Env2DSF.cpp	/^inline INDEX_t 	ENCODE_LLE_INDEX(float lon, float lat, float alt) { return (((INDEX_t) ENCODE_LLE_LON(lon)) << 32) | ((INDEX_t) ENCODE_LLE_LAT(lat)) | (((INDEX_t) ENCODE_LLE_ALT(alt)) << 24); }$/;"	f
ENCODE_LLE_LAT	.\XPTools\Env2DSF.cpp	/^inline int		ENCODE_LLE_LAT(double lat) { return lat * (double) (1 << 23); }$/;"	f
ENCODE_LLE_LON	.\XPTools\Env2DSF.cpp	/^inline int		ENCODE_LLE_LON(double lon) { return lon * (double) (1 << 23); }$/;"	f
ENCODE_LL_INDEX	.\XPTools\Env2DSF.cpp	/^inline INDEX_t 	ENCODE_LL_INDEX(double lon, double lat) { return (((INDEX_t) ENCODE_LL_LON(lon)) << 32) | ((INDEX_t) ENCODE_LL_LAT(lat)); }$/;"	f
ENCODE_LL_LAT	.\XPTools\Env2DSF.cpp	/^inline int		ENCODE_LL_LAT(double lat) { return lat * (double) (1 << 23); }$/;"	f
ENCODE_LL_LON	.\XPTools\Env2DSF.cpp	/^inline int		ENCODE_LL_LON(double lon) { return lon * (double) (1 << 23); }$/;"	f
ENCODE_ROAD_CFCC	.\Tiger\TigerImport.cpp	30;"	d	file:
ENCODE_ST_INDEX	.\XPTools\Env2DSF.cpp	/^inline INDEX_t 	ENCODE_ST_INDEX(float s, float t) { return (((INDEX_t) ENCODE_ST_S(s)) << 32) | ((INDEX_t) ENCODE_ST_T(t)); }$/;"	f
ENCODE_ST_S	.\XPTools\Env2DSF.cpp	/^inline short	ENCODE_ST_S(float s) { return s * (float) (1 << 14); }$/;"	f
ENCODE_ST_T	.\XPTools\Env2DSF.cpp	/^inline short	ENCODE_ST_T(float t) { return t * (float) (1 << 14); }$/;"	f
ENCODING_STATS	.\DSF\DSFLibWrite.cpp	39;"	d	file:
ENCODING_STATS	.\DSF\dsflib_013005\DSFLibWrite.cpp	41;"	d	file:
ENDHEADERMAGIC	.\Utils\zip.c	78;"	d	file:
END_STRING	.\OneOffs\osm_tile.c	123;"	d	file:
ENOERR	.\Obj\XDefs.h	239;"	d
ENUM	.\WEDCore\WED_EnumSystem.cpp	289;"	d	file:
ENUM	.\WEDCore\WED_EnumSystem.cpp	33;"	d	file:
ENUM	.\WEDCore\WED_EnumSystem.h	83;"	d
ENUM	.\WEDCore\WED_EnumSystem.h	94;"	d
ENUMSYSTEM_H	.\XESCore\EnumSystem.h	24;"	d
ENUM_Create	.\WEDCore\WED_EnumSystem.cpp	/^int					ENUM_Create(int domain, const char * value, const char * desc, int export_value)$/;"	f
ENUM_DOMAIN	.\WEDCore\WED_EnumSystem.cpp	288;"	d	file:
ENUM_DOMAIN	.\WEDCore\WED_EnumSystem.cpp	32;"	d	file:
ENUM_DOMAIN	.\WEDCore\WED_EnumSystem.h	82;"	d
ENUM_DOMAIN	.\WEDCore\WED_EnumSystem.h	93;"	d
ENUM_Desc	.\WEDCore\WED_EnumSystem.cpp	/^const char * ENUM_Desc(int value)$/;"	f
ENUM_Domain	.\WEDCore\WED_EnumSystem.cpp	/^int					ENUM_Domain(int value)$/;"	f
ENUM_Export	.\WEDCore\WED_EnumSystem.cpp	/^int					ENUM_Export(int value)$/;"	f
ENUM_ExportSet	.\WEDCore\WED_EnumSystem.cpp	/^int					ENUM_ExportSet(const set<int>& members)$/;"	f
ENUM_Import	.\WEDCore\WED_EnumSystem.cpp	/^int					ENUM_Import(int domain, int export_value)$/;"	f
ENUM_ImportSet	.\WEDCore\WED_EnumSystem.cpp	/^void				ENUM_ImportSet(int domain, int export_value, set<int>& vals)$/;"	f
ENUM_Init	.\WEDCore\WED_EnumSystem.cpp	/^void	ENUM_Init(void)$/;"	f
ENUM_LookupDesc	.\WEDCore\WED_EnumSystem.cpp	/^int					ENUM_LookupDesc(int domain, const char * value)$/;"	f
ENUM_Name	.\WEDCore\WED_EnumSystem.cpp	/^const char *		ENUM_Name(int value)$/;"	f
ENUM_Validate	.\WEDCore\WED_EnumSystem.cpp	/^bool				ENUM_Validate(int value)$/;"	f
ENUM_read	.\WEDCore\WED_EnumSystem.cpp	/^void		ENUM_read (sqlite3 * db, enum_map_t& out_map)$/;"	f
ENUM_write	.\WEDCore\WED_EnumSystem.cpp	/^void		ENUM_write(sqlite3 * db)$/;"	f
ENV2DSF_H	.\XPTools\Env2DSF.h	24;"	d
ENV2Overlay	.\DSFTools\ENV2Overlay.cpp	/^bool ENV2Overlay(const char * inFileName, const char * inDSF)$/;"	f
ENVPRINT_H	.\XPTools\EnvPrint.h	24;"	d
ENVSCAN_H	.\XPTools\EnvScan.h	24;"	d
ENV_STR_SIZE	.\Env\EnvDefs.h	50;"	d
ERR	.\Utils\QuiltUtils.h	299;"	d
ERR	.\Utils\QuiltUtils.h	335;"	d
EXTERN	.\AC3DPlugins\TclStubs.h	39;"	d
EXTRACT_TOKENS	.\XESCore\EnumSystem.cpp	28;"	d	file:
EXTRACT_TOKENS	.\XESCore\EnumSystem.cpp	38;"	d	file:
EXTRACT_TOKENS	.\XESCore\EnumSystem.h	33;"	d
EXTRACT_TOKENS	.\XESCore\EnumSystem.h	43;"	d
E_CRSH	.\XESCore\NetAlgs.cpp	336;"	d	file:
E_FLOT	.\XESCore\NetAlgs.cpp	332;"	d	file:
E_HPLG	.\XESCore\NetAlgs.cpp	338;"	d	file:
E_RAMP	.\XESCore\NetAlgs.cpp	335;"	d	file:
E_ROAD	.\XESCore\NetAlgs.cpp	341;"	d	file:
E_TERM	.\XESCore\NetAlgs.cpp	333;"	d	file:
E_VERT	.\XESCore\NetAlgs.cpp	340;"	d	file:
E_WATR	.\XESCore\NetAlgs.cpp	334;"	d	file:
EdgeIndex	.\Tiger\(TigerImport Backup.cpp).cpp	/^typedef	MAP_TYPE<TLID, Pmwx::Halfedge_handle>		EdgeIndex;$/;"	t	file:
EdgeKey	.\XESCore\MapDefs.h	/^typedef Arr_seg_traits_::Data					EdgeKey;$/;"	t
EdgeKey_container	.\XESCore\MapDefs.h	/^typedef	Arr_seg_traits_::Data_container			EdgeKey_container;$/;"	t
EdgeKey_iterator	.\XESCore\MapDefs.h	/^typedef	Arr_seg_traits_::Data_iterator			EdgeKey_iterator;$/;"	t
EdgeNode_t	.\XESCore\Zoning.cpp	/^struct EdgeNode_t {$/;"	s	file:
EdgePair	.\XESCore\WTPM.h	/^	typedef	pair<HalfedgeVector, HalfedgeVector>	EdgePair;$/;"	t	struct:WTPM_Line
EdgeQ	.\XESCore\Zoning.cpp	/^typedef multimap<float, EdgeNode_t *, greater<float> >	EdgeQ;$/;"	t	file:
EdgeRuleTable	.\XESCore\Zoning.h	/^typedef vector<EdgeRule_t>		EdgeRuleTable;$/;"	t
EdgeRule_t	.\XESCore\Zoning.h	/^struct EdgeRule_t {$/;"	s
Edges_level_any	.\XESCore\MeshConformer.h	/^  typedef Mesh_2::Refine_edges_with_clusters<Tr, Lcp > Edges_level_any;$/;"	t	class:CGAL::Triangulation_conformer_any_2
Eigen2Tensor	.\Utils\TensorUtils.h	/^inline Vector2		Eigen2Tensor(const Vector2& e)$/;"	f
EllipseFrame	.\AC3DPlugins\x86_Win32 DLL.cpp	/^IMPEXP int EllipseFrame(HDC hdc, int x1, int y1, int x2, int y2, int t)$/;"	f
EmitNorm	.\Utils\ObjUtilsGL.cpp	/^static	void	EmitNorm(const vector<vec_tex>& coords, int a, int b, int c)$/;"	f	file:
Empty	.\WEDCore\WED_UndoLayer.h	/^		bool	Empty(void) const { return mObjects.empty(); }$/;"	f	class:WED_UndoLayer
Enable	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::Enable(void)$/;"	f	class:GUI_Pane
Enable	.\WEDXPlugin\WED_XPluginCamera.cpp	/^void WED_XPluginCamera::Enable()$/;"	f	class:WED_XPluginCamera
EnableAlpha	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::EnableAlpha(bool test, bool blend)$/;"	f	class:GUI_GraphState
EnableCam	.\WEDXPlugin\WED_XPluginMgr.cpp	/^void  WED_XPluginMgr::EnableCam(bool inEnable)$/;"	f	class:WED_XPluginMgr
EnableDepth	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::EnableDepth(bool read, bool write)$/;"	f	class:GUI_GraphState
EnableFog	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::EnableFog(bool fog)$/;"	f	class:GUI_GraphState
EnableLighting	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::EnableLighting(bool lighting)$/;"	f	class:GUI_GraphState
EnableMenuItem	.\UI\XWin.lin.cpp	/^void XWin::EnableMenuItem(xmenu menu, int item, bool inEnable)$/;"	f	class:XWin
EnableMenuItem	.\UI\XWin.win.cpp	/^void			XWin::EnableMenuItem(xmenu menu, int item, bool inEnable)$/;"	f	class:XWin
EnableMenusWin	.\GUI\GUI_Window.cpp	/^void GUI_Window::EnableMenusWin(void)$/;"	f	class:GUI_Window
EndDefer	.\GUI\GUI_Commander.cpp	/^void			GUI_Commander::EndDefer(void)$/;"	f	class:GUI_Commander
EndDrag	.\Utils\UIUtils.cpp	/^void		DragHandleSet::EndDrag($/;"	f	class:DragHandleSet
EndEdit	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::EndEdit(void)$/;"	f	class:WED_CreateToolBase
EndEdit	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::EndEdit(void)$/;"	f	class:WED_MarqueeTool
EndEdit	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::EndEdit(void)$/;"	f	class:WED_VertexTool
EndEdit	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::EndEdit(void)$/;"	f	class:WED_TCEMarqueeTool
EndEdit	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::EndEdit(void)$/;"	f	class:WED_TCEVertexTool
EndElement	.\Network\XMLObject.cpp	/^void EndElement(void *userData, const char *name)$/;"	f
EndElement	.\WEDCore\WED_Archive.cpp	/^void		WED_Archive::EndElement(void)$/;"	f	class:WED_Archive
EndElement	.\WEDCore\WED_Document.cpp	/^void		WED_Document::EndElement(void)$/;"	f	class:WED_Document
EndElement	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::EndElement(void){ }$/;"	f	class:WED_PropIntEnumSet
EndElement	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::EndElement(void)$/;"	f	class:WED_PropertyHelper
EndElement	.\WEDEntities\WED_AirportChain.cpp	/^void		WED_AirportChain::EndElement(void) { }$/;"	f	class:WED_AirportChain
EndElement	.\WEDEntities\WED_KeyObjects.cpp	/^void		WED_KeyObjects::EndElement(void)$/;"	f	class:WED_KeyObjects
EndElement	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::EndElement(void) { }$/;"	f	class:WED_Select
EndElement	.\WEDEntities\WED_Thing.cpp	/^void		WED_Thing::EndElement(void)$/;"	f	class:WED_Thing
EndElementHandler	.\WEDCore\WED_XMLReader.cpp	/^void WED_XMLReader::EndElementHandler(void *userData,$/;"	f	class:WED_XMLReader
EndElementHandler_Count	.\OneOffs\osm2shape.c	/^void EndElementHandler_Count(void *userData,$/;"	f
EndElementHandler_Count	.\OneOffs\osm_tile.c	/^void EndElementHandler_Count(void *userData,$/;"	f
EndElementHandler_IndexNodes	.\OneOffs\osm_tile.c	/^void EndElementHandler_IndexNodes(void *userData,$/;"	f
EndElementHandler_IndexRelations	.\OneOffs\osm_tile.c	/^void EndElementHandler_IndexRelations(void *userData,$/;"	f
EndElementHandler_IndexWays	.\OneOffs\osm_tile.c	/^void EndElementHandler_IndexWays(void *userData,$/;"	f
EndElementHandler_Output	.\OneOffs\osm_tile.c	/^void EndElementHandler_Output(void *userData,$/;"	f
EndElementHandler_ReadData	.\OneOffs\osm2shape.c	/^void EndElementHandler_ReadData(void *userData,$/;"	f
EndElementHandler_ReindexNodes	.\OneOffs\osm_tile.c	/^void EndElementHandler_ReindexNodes(void *userData,$/;"	f
EndElementHandler_ReindexWays	.\OneOffs\osm_tile.c	/^void EndElementHandler_ReindexWays(void *userData,$/;"	f
EndLOD	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::EndLOD(void)$/;"	f	class:XObjBuilder
EndPatch	.\DSF\DSFLibWrite.cpp	/^void	DSFFileWriterImp::EndPatch($/;"	f	class:DSFFileWriterImp
EndPatch	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::EndPatch($/;"	f	class:DSFFileWriterImp
EndPatch	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	EndPatch($/;"	f	class:DSF_Importer
EndPatch_f	.\DSF\DSFLib.h	/^	void (* EndPatch_f)($/;"	m	struct:DSFCallbacks_t
EndPatch_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* EndPatch_f)($/;"	m	struct:DSFCallbacks_t
EndPolygon	.\DSF\DSFLibWrite.cpp	/^void	DSFFileWriterImp::EndPolygon($/;"	f	class:DSFFileWriterImp
EndPolygon	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::EndPolygon($/;"	f	class:DSFFileWriterImp
EndPolygon	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	EndPolygon($/;"	f	class:DSF_Importer
EndPolygonWinding	.\DSF\DSFLibWrite.cpp	/^void	DSFFileWriterImp::EndPolygonWinding($/;"	f	class:DSFFileWriterImp
EndPolygonWinding	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	DSFFileWriterImp::EndPolygonWinding($/;"	f	class:DSFFileWriterImp
EndPolygonWinding	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	EndPolygonWinding($/;"	f	class:DSF_Importer
EndPolygonWinding_f	.\DSF\DSFLib.h	/^	void (* EndPolygonWinding_f)($/;"	m	struct:DSFCallbacks_t
EndPolygonWinding_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* EndPolygonWinding_f)($/;"	m	struct:DSFCallbacks_t
EndPolygon_f	.\DSF\DSFLib.h	/^	void (* EndPolygon_f)($/;"	m	struct:DSFCallbacks_t
EndPolygon_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* EndPolygon_f)($/;"	m	struct:DSFCallbacks_t
EndPos	.\Utils\XChunkyFileUtils.cpp	/^	uint8_t *	EndPos(void)$/;"	f	class:RLEDecoder
EndPos	.\Utils\XChunkyFileUtils.cpp	/^	uint8_t * EndPos(void)$/;"	f	class:FlatDecoder
EndPrimitive	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::EndPrimitive($/;"	f	class:DSFFileWriterImp
EndPrimitive	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::EndPrimitive($/;"	f	class:DSFFileWriterImp
EndPrimitive	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	EndPrimitive($/;"	f	class:DSF_Importer
EndPrimitive_f	.\DSF\DSFLib.h	/^	void (* EndPrimitive_f)($/;"	m	struct:DSFCallbacks_t
EndPrimitive_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* EndPrimitive_f)($/;"	m	struct:DSFCallbacks_t
EndRule	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::EndRule(bool keep)$/;"	f	class:CoverageFinder
EndSegment	.\DSF\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::EndSegment($/;"	f	class:DSFFileWriterImp
EndSegment	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void 	DSFFileWriterImp::EndSegment($/;"	f	class:DSFFileWriterImp
EndSegment	.\WEDImportExport\WED_DSFImport.cpp	/^	static void	EndSegment($/;"	f	class:DSF_Importer
EndSegment_f	.\DSF\DSFLib.h	/^	void (* EndSegment_f)($/;"	m	struct:DSFCallbacks_t
EndSegment_f	.\DSF\dsflib_013005\DSFLib.h	/^	void (* EndSegment_f)($/;"	m	struct:DSFCallbacks_t
Endian16_Swap	.\Utils\EndianUtils.c	32;"	d	file:
Endian32_Swap	.\Utils\EndianUtils.c	38;"	d	file:
Endian64_Swap	.\Utils\EndianUtils.c	46;"	d	file:
EndianFlipLong	.\Utils\EndianUtils.c	/^void	EndianFlipLong(long * ioLong)$/;"	f
EndianFlipShort	.\Utils\EndianUtils.c	/^void	EndianFlipShort(short * ioShort)$/;"	f
EndianSwapArray	.\Utils\EndianUtils.c	/^void	EndianSwapArray($/;"	f
EndianSwapBuffer	.\Utils\EndianUtils.c	/^void	EndianSwapBuffer($/;"	f
EndsToCenter	.\XESCore\AptAlgs.cpp	/^static void EndsToCenter(const Segment2& ends, Point2& center, double& len, double& heading)$/;"	f	file:
EndsToCenter	.\XESCore\AptIO.cpp	/^static void EndsToCenter(const Segment2& ends, Point2& center, double& len, double& heading)$/;"	f	file:
EntityHandling_t	.\WEDMap\WED_HandleToolBase.h	/^	enum EntityHandling_t {$/;"	g	class:WED_HandleToolBase
EnumColorTable	.\XESCore\DEMTables.h	/^typedef hash_map<int, RGBColor_t>		EnumColorTable;$/;"	t
EnumDAdvise	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::EnumDAdvise			(IEnumSTATDATA ** ppenumAdvise)$/;"	f	class:GUI_SimpleDataObject
EnumFormatEtc	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::EnumFormatEtc			(DWORD direction, IEnumFORMATETC  ** ppEnumObj)$/;"	f	class:GUI_SimpleDataObject
EnumSystemSelfCheck	.\XESCore\EnumSystem.cpp	/^void EnumSystemSelfCheck(void)$/;"	f
EnumToIndex	.\Utils\CoverageFinder.cpp	/^int		CoverageFinder::EnumToIndex(int inAxis, int inEnum)$/;"	f	class:CoverageFinder
EnumToString	.\WEDCore\WED_Sign_Parser.cpp	/^string WED_Sign_Parser::EnumToString(FSM in)$/;"	f	class:WED_Sign_Parser
Env2DSF	.\XPTools\Env2DSF.cpp	/^void	Env2DSF(const char * filename)$/;"	f
EnvWrite	.\Env\EnvWrite.c	/^int	EnvWrite(const char * inFileName)$/;"	f
EpsiClamp	.\XESTools\GISTool_VectorCmds.cpp	/^inline void EpsiClamp(double& v, double c, double e) { if (fabs(v - c) < e) v = c; }$/;"	f
Erase	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::Erase(ISelectable * iwho)$/;"	f	class:WED_Select
ErasePair	.\DSF\DSFLibWrite.cpp	/^static bool	ErasePair(multimap<int, int>& ioMap, int key, int value)$/;"	f	file:
ErasePair	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	ErasePair(multimap<int, int>& ioMap, int key, int value)$/;"	f
Error	.\SDTS\SDTSRead.cpp	/^bool			SDTSModuleIterator::Error(void)$/;"	f	class:SDTSModuleIterator
Error	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::Error(void)$/;"	f	class:VPFTableIterator
ErrorInfo	.\lib_json\include\json\reader.h	/^      class ErrorInfo$/;"	c	class:Json::Reader
Error_map	.\XESCore\MapHelpers.h	/^	typedef	map<typename Arr::Halfedge_handle, list<Point2> >		Error_map;$/;"	t	class:arrangement_simplifier
Errors	.\lib_json\include\json\reader.h	/^      typedef std::deque<ErrorInfo> Errors;$/;"	t	class:Json::Reader
EventMap	.\Utils\Skeleton.cpp	/^typedef multimap<double, SK_Event *>		EventMap;$/;"	t	file:
Execute	.\WEDCore\WED_UndoLayer.cpp	/^void	WED_UndoLayer::Execute(void)$/;"	f	class:WED_UndoLayer
ExpandRunway	.\XESCore\Airports.cpp	/^static void ExpandRunway($/;"	f	file:
Export	.\WEDEntities\WED_ATCFlow.cpp	/^void	WED_ATCFlow::Export(		 AptFlow_t& info) const$/;"	f	class:WED_ATCFlow
Export	.\WEDEntities\WED_ATCFrequency.cpp	/^void	WED_ATCFrequency::Export(		 AptATCFreq_t& info) const$/;"	f	class:WED_ATCFrequency
Export	.\WEDEntities\WED_ATCRunwayUse.cpp	/^void	WED_ATCRunwayUse::Export(		 AptRunwayRule_t& info) const$/;"	f	class:WED_ATCRunwayUse
Export	.\WEDEntities\WED_ATCTimeRule.cpp	/^void		WED_ATCTimeRule::Export(		 AptTimeRule_t& info) const$/;"	f	class:WED_ATCTimeRule
Export	.\WEDEntities\WED_ATCWindRule.cpp	/^void		WED_ATCWindRule::Export(		 AptWindRule_t& info) const$/;"	f	class:WED_ATCWindRule
Export	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::Export(AptInfo_t& info) const$/;"	f	class:WED_Airport
Export	.\WEDEntities\WED_AirportBeacon.cpp	/^void	WED_AirportBeacon::Export(		 AptBeacon_t& x) const$/;"	f	class:WED_AirportBeacon
Export	.\WEDEntities\WED_AirportBoundary.cpp	/^void WED_AirportBoundary::Export(		 AptBoundary_t& x) const$/;"	f	class:WED_AirportBoundary
Export	.\WEDEntities\WED_AirportChain.cpp	/^void	WED_AirportChain::Export(		 AptMarking_t& x) const$/;"	f	class:WED_AirportChain
Export	.\WEDEntities\WED_AirportSign.cpp	/^void		WED_AirportSign::Export(		 AptSign_t& x) const$/;"	f	class:WED_AirportSign
Export	.\WEDEntities\WED_Helipad.cpp	/^void	WED_Helipad::Export(		 AptHelipad_t& x) const$/;"	f	class:WED_Helipad
Export	.\WEDEntities\WED_LightFixture.cpp	/^void	WED_LightFixture::Export(		 AptLight_t& x) const$/;"	f	class:WED_LightFixture
Export	.\WEDEntities\WED_RampPosition.cpp	/^void	WED_RampPosition::Export(		 AptGate_t& x) const$/;"	f	class:WED_RampPosition
Export	.\WEDEntities\WED_Runway.cpp	/^void		WED_Runway::Export(		 AptRunway_t& x) const$/;"	f	class:WED_Runway
Export	.\WEDEntities\WED_Sealane.cpp	/^void	WED_Sealane::Export(		 AptSealane_t& x) const$/;"	f	class:WED_Sealane
Export	.\WEDEntities\WED_TaxiRoute.cpp	/^void	WED_TaxiRoute::Export(		 AptRouteEdge_t& info) const$/;"	f	class:WED_TaxiRoute
Export	.\WEDEntities\WED_Taxiway.cpp	/^void		WED_Taxiway::Export(		 AptTaxiway_t& x) const$/;"	f	class:WED_Taxiway
Export	.\WEDEntities\WED_TowerViewpoint.cpp	/^void		WED_TowerViewpoint::Export(		 AptTowerPt_t& x) const$/;"	f	class:WED_TowerViewpoint
Export	.\WEDEntities\WED_Windsock.cpp	/^void	WED_Windsock::Export(		 AptWindsock_t& x) const$/;"	f	class:WED_Windsock
ExportLinearPath	.\WEDImportExport\WED_AptIE.cpp	/^static void ExportLinearPath(WED_AirportChain * chain, AptPolygon_t& poly)$/;"	f	file:
ExportNotifier	.\RenderFarmUI\RF_Export.cpp	/^void	ExportNotifier(int catagory, int message, void * param)$/;"	f
ExportPOL	.\WEDImportExport\WED_DSFExport.cpp	/^static void ExportPOL(const char * relativeDDSP, const char * relativePOLP, WED_DrapedOrthophoto * orth, int inHeight, WED_ResourceMgr * rmgr)$/;"	f	file:
ExtendBoundingSphereToPt	.\Utils\CompGeomUtils.cpp	/^void ExtendBoundingSphereToPt(const Point3& p, Sphere3& ioSphere)$/;"	f
ExtendBoundingSphereToPt1	.\Utils\CompGeomUtils.cpp	/^void ExtendBoundingSphereToPt1(const Point3& p, Sphere3& ioSphere)$/;"	f
ExtendBoundingSphereToSphere	.\Utils\CompGeomUtils.cpp	/^void ExtendBoundingSphereToSphere(const Sphere3& newSphere, Sphere3& ioSphere)$/;"	f
ExtendTo	.\GUI\GUI_SimpleTableGeometry.cpp	/^void		GUI_SimpleTableGeometry::ExtendTo(int n)$/;"	f	class:GUI_SimpleTableGeometry
ExtendTriToStrip	.\DSF\tri_stripper_101\tri_stripper.cpp	/^tri_stripper::triangle_strip tri_stripper::ExtendTriToStrip(const size_t StartTriPos, const triangle_strip::start_order StartOrder)$/;"	f	class:triangle_stripper::tri_stripper
ExtractDTED	.\XESCore\DEMIO.cpp	/^bool	ExtractDTED(DEMGeo& inMap, const char * inFileName)$/;"	f
ExtractFixedRecordLong	.\Utils\XUtils.cpp	/^bool	ExtractFixedRecordLong($/;"	f
ExtractFixedRecordString	.\Utils\XUtils.cpp	/^void	ExtractFixedRecordString($/;"	f
ExtractFixedRecordUnsignedLong	.\Utils\XUtils.cpp	/^bool	ExtractFixedRecordUnsignedLong($/;"	f
ExtractGeoTiff	.\XESCore\DEMIO.cpp	/^bool	ExtractGeoTiff(DEMGeo& inMap, const char * inFileName, int post_style, int no_geo_needed)$/;"	f
ExtractIDAFile	.\XESCore\DEMIO.cpp	/^bool	ExtractIDAFile(DEMGeo& inMap, const char * inFileName)$/;"	f
ExtractPath	.\Utils\XUtils.cpp	/^void		ExtractPath(string& ioPath)$/;"	f
ExtractRawIMGFile	.\XESCore\DEMIO.cpp	/^bool 	ExtractRawIMGFile(DEMGeo& inMap, const char * inFileName, int inWest, int inSouth, int inEast, int inNorth)$/;"	f
ExtractUSGSNaturalFile	.\XESCore\DEMIO.cpp	/^bool	ExtractUSGSNaturalFile(DEMGeo& inMap, const char * inFileName)$/;"	f
ExtrudeGeneralJunction	.\Utils\RoadNetUtils.cpp	/^void ExtrudeGeneralJunction($/;"	f
ExtrudeNetwork	.\Utils\RoadNetUtils.cpp	/^void	ExtrudeNetwork($/;"	f
ExtrudeRoadChain	.\Utils\RoadNetUtils.cpp	/^static	void	ExtrudeRoadChain($/;"	f	file:
ExtrudeSpecializedJunction	.\Utils\RoadNetUtils.cpp	/^void ExtrudeSpecializedJunction($/;"	f
F	.\Utils\md5.c	62;"	d	file:
FAAObsTable	.\RawImport\FAA_Obs.h	/^typedef hash_multimap<int, FAAObs_t>		FAAObsTable;$/;"	t
FAAObs_t	.\RawImport\FAA_Obs.h	/^struct	FAAObs_t {$/;"	s
FAA_OBS_H	.\RawImport\FAA_Obs.h	24;"	d
FACADES	.\XPTools\ViewObj.cpp	24;"	d	file:
FAR_TEX_DIVISIONS	.\XESCore\MeshAlgs_old.cpp	33;"	d	file:
FETCH_LIMIT	.\Network\Terraserver.cpp	506;"	d	file:
FF	.\Utils\md5.c	72;"	d	file:
FFTMakeDEM	.\XESCore\DEMAlgs.cpp	/^void	FFTMakeDEM(const vector<DEMGeo>& inFFT, DEMGeo& outDEM)$/;"	f
FFTSplit	.\XESCore\DEMAlgs.cpp	/^static	void	FFTSplit(const DEMGeo& inSrc, DEMGeo& equiv, DEMGeo& reduc, int n)$/;"	f	file:
FICT	.\XESCore\DEMAlgs.cpp	2098;"	d	file:
FIFOTYPE	.\Utils\MemFileUtils.cpp	138;"	d	file:
FILEUTILS_H	.\Utils\FileUtils.h	25;"	d
FILE_DIALOG_EXPORT_APTDAT	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_EXPORT_APTDAT,$/;"	e	enum:__anon126
FILE_DIALOG_IMPORT_APTDAT	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_IMPORT_APTDAT,$/;"	e	enum:__anon126
FILE_DIALOG_IMPORT_DSF	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_IMPORT_DSF,$/;"	e	enum:__anon126
FILE_DIALOG_NEW_PROJECT	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_NEW_PROJECT = 1,$/;"	e	enum:__anon126
FILE_DIALOG_OPEN_PROJECT	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_OPEN_PROJECT,$/;"	e	enum:__anon126
FILE_DIALOG_PICK_IMAGE_OVERLAY	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_PICK_IMAGE_OVERLAY,$/;"	e	enum:__anon126
FILE_DIALOG_PICK_XSYSTEM	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_PICK_XSYSTEM,$/;"	e	enum:__anon126
FILE_DIALOG_PROPERTY_TABLE	.\WEDWindows\WED_UIDefs.h	/^	FILE_DIALOG_PROPERTY_TABLE$/;"	e	enum:__anon126
FILE_case_correct	.\Utils\FileUtils.cpp	/^int FILE_case_correct(char * buf)$/;"	f
FILE_case_correct_path	.\Utils\FileUtils.cpp	/^FILE_case_correct_path::FILE_case_correct_path(const char * in_path) : path(strdup(in_path)) { FILE_case_correct(path); }$/;"	f	class:FILE_case_correct_path
FILE_case_correct_path	.\Utils\FileUtils.h	/^class	FILE_case_correct_path {$/;"	c
FILE_compress_dir	.\Utils\FileUtils.cpp	/^int FILE_compress_dir(const string& src_path, const string& dst_path, const string& prefix)$/;"	f
FILE_date_cmpr	.\Utils\FileUtils.cpp	/^date_cmpr_result_t FILE_date_cmpr(const char * first, const char * second)$/;"	f
FILE_delete_dir_recursive	.\Utils\FileUtils.cpp	/^int FILE_delete_dir_recursive(const string& path)$/;"	f
FILE_delete_file	.\Utils\FileUtils.cpp	/^int FILE_delete_file(const char * nuke_path, int is_dir)$/;"	f
FILE_exists	.\Utils\FileUtils.cpp	/^bool FILE_exists(const char * path)$/;"	f
FILE_get_directory	.\Utils\FileUtils.cpp	/^int FILE_get_directory($/;"	f
FILE_make_dir	.\Utils\FileUtils.cpp	/^int FILE_make_dir(const char * in_dir)$/;"	f
FILE_make_dir_exist	.\Utils\FileUtils.cpp	/^int FILE_make_dir_exist(const char * in_dir)$/;"	f
FILE_rename_file	.\Utils\FileUtils.cpp	/^int FILE_rename_file(const char * old_name, const char * new_name)$/;"	f
FIND_BAD_AIRPORTS	.\WEDCore\WED_Validate.cpp	68;"	d	file:
FIXED1616	.\GUI\GUI_Fonts.cpp	/^inline int FIXED1616(float f) { return f * 65536.0f; }$/;"	f
FIX_EMPTY	.\WEDCore\WED_XMLWriter.cpp	44;"	d	file:
FLAG_LOCALHEADER_OFFSET	.\Utils\zip.c	80;"	d	file:
FLT_PROP	.\AC3DPlugins\obj_model.cpp	212;"	d	file:
FM_BASE_ASCII_RANGE	.\UI\FontMgr.cpp	70;"	d	file:
FM_DEFAULT_FACE_INDEX	.\GUI\GUI_Fonts.cpp	55;"	d	file:
FM_DEFAULT_FACE_INDEX	.\UI\FontMgr.cpp	68;"	d	file:
FM_DEFAULT_TEX_WIDTH	.\GUI\GUI_Fonts.cpp	56;"	d	file:
FM_DEFAULT_TEX_WIDTH	.\UI\FontMgr.cpp	69;"	d	file:
FM_DEVICE_RES_H	.\GUI\GUI_Fonts.cpp	57;"	d	file:
FM_DEVICE_RES_H	.\UI\FontMgr.cpp	72;"	d	file:
FM_DEVICE_RES_V	.\GUI\GUI_Fonts.cpp	58;"	d	file:
FM_DEVICE_RES_V	.\UI\FontMgr.cpp	73;"	d	file:
FM_FONT_SIZE_INTERVAL	.\UI\FontMgr.cpp	67;"	d	file:
FM_PEAK_ASCII_RANGE	.\UI\FontMgr.cpp	71;"	d	file:
FM_PIX_PADDING	.\GUI\GUI_Fonts.cpp	59;"	d	file:
FM_PIX_PADDING	.\UI\FontMgr.cpp	74;"	d	file:
FONT_GAMMA	.\GUI\GUI_Fonts.cpp	49;"	d	file:
FOREST_SUBDIVIDE_AREA	.\XESCore\BlockFill.cpp	92;"	d	file:
FPrintDebugInfo	.\GUI\GUI_Pane.cpp	/^void GUI_Pane::FPrintDebugInfo(FILE * pFile, int indentLevel)$/;"	f	class:GUI_Pane
FSM	.\WEDCore\WED_Sign_Parser.cpp	/^	enum FSM$/;"	g	class:WED_Sign_Parser	file:
FT_TO_MTR	.\XESCore\XESConstants.h	31;"	d
FacadeChoice_t	.\XESCore\Zoning.h	/^struct FacadeChoice_t {$/;"	s
FacadeSpellingTable	.\XESCore\Zoning.h	/^typedef	vector<FacadeSpelling_t>FacadeSpellingTable;$/;"	t
FacadeSpelling_t	.\XESCore\Zoning.h	/^struct FacadeSpelling_t {$/;"	s
FaceGraph_t	.\XESCore\Zoning.cpp	/^	FaceGraph_t() { edges = NULL; faces = NULL; }$/;"	f	struct:FaceGraph_t
FaceGraph_t	.\XESCore\Zoning.cpp	/^struct FaceGraph_t {$/;"	s	file:
FaceIndex	.\Tiger\(TigerImport Backup.cpp).cpp	/^typedef	MAP_TYPE<CENID_POLYID, Pmwx::Face_handle>	FaceIndex;$/;"	t	file:
FaceNode_t	.\XESCore\Zoning.cpp	/^struct	FaceNode_t {$/;"	s	file:
FaceQueue	.\XESCore\MeshDefs.h	/^typedef multimap<float, void *, greater<float> >			FaceQueue;	\/\/ YUCK - hard cast to avoid snarky problems with forward decls$/;"	t
FaceToScaledPoly	.\RenderFarmUI\RF_DrawMap.cpp	/^void	FaceToScaledPoly(Pmwx::Face_const_handle	f, Polygon2& p, vector<Polygon2>& pp,$/;"	f
FaceTree	.\RenderFarmUI\RF_DrawMap.h	/^	typedef	RTree2<Face_handle,16>		FaceTree;$/;"	t	struct:PmwxIndex_t
Face_const_handle	.\XESCore\MapDefs.h	/^typedef Arrangement_2::Face_const_handle                    Face_const_handle;$/;"	t
Face_const_handle	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Face_const_handle      Face_const_handle;$/;"	t	class:PmwxFmt	file:
Face_handle	.\XESCore\MapDefs.h	/^typedef Arrangement_2::Face_handle                    Face_handle;$/;"	t
Face_handle	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Face_handle            Face_handle;$/;"	t	class:PmwxFmt	file:
Face_handle_A	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementA::Face_const_handle    Face_handle_A;$/;"	t	class:Arr_full_overlay_traits	file:
Face_handle_A	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementA::Face_const_handle    Face_handle_A;$/;"	t	class:Arr_replace_overlay_traits	file:
Face_handle_B	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementB::Face_const_handle    Face_handle_B;$/;"	t	class:Arr_full_overlay_traits	file:
Face_handle_B	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementB::Face_const_handle    Face_handle_B;$/;"	t	class:Arr_replace_overlay_traits	file:
Face_handle_R	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementR::Face_handle          Face_handle_R;$/;"	t	class:Arr_full_overlay_traits	file:
Face_handle_R	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementR::Face_handle          Face_handle_R;$/;"	t	class:Arr_replace_overlay_traits	file:
Factories	.\lib_json\src\test_lib_json\jsontest.h	/^      typedef std::deque<TestCaseFactory> Factories;$/;"	t	class:JsonTest::Runner
FailWithError	.\WEDCore\WED_XMLReader.cpp	/^void	WED_XMLReader::FailWithError(const string& e)$/;"	f	class:WED_XMLReader
Failure	.\lib_json\src\test_lib_json\jsontest.h	/^   class Failure$/;"	c	namespace:JsonTest
Failures	.\lib_json\src\test_lib_json\jsontest.h	/^      typedef std::deque<Failure> Failures;$/;"	t	class:JsonTest::TestResult
FastBoundingSphere	.\Utils\CompGeomUtils.cpp	/^void	FastBoundingSphere($/;"	f
FastCDT	.\XESCore\BlockAlgs.cpp	/^FastCDT;$/;"	t	file:
FastCDTDS	.\XESCore\BlockAlgs.cpp	/^						CGAL::Constrained_triangulation_face_base_2<HackKernel> >	FastCDTDS;$/;"	t	file:
FastKernel	.\XESCore\CGALDefs.h	/^typedef CGAL::Filtered_kernel<CGAL::Simple_cartesian<NT> > FastKernel;$/;"	t
FastKernel	.\XESCore\CGALTypes.h	/^typedef	CGAL::Simple_cartesian<double>						FastKernel;$/;"	t
FastWriter	.\lib_json\include\json\writer.h	/^   class JSON_API FastWriter : public Writer$/;"	c	namespace:Json
FastWriter	.\lib_json\src\lib_json\json_writer.cpp	/^FastWriter::FastWriter()$/;"	f	class:Json::FastWriter
Fb	.\XESCore\MeshDefs.h	/^typedef	CGAL::Constrained_triangulation_face_base_2<Traits_2, Fbi>				Fb;$/;"	t
Fbi	.\XESCore\MeshDefs.h	/^typedef CGAL::Triangulation_face_base_with_info_2<MeshFaceInfo, Traits_2>			Fbi;$/;"	t
Feature2RepInfo	.\XESCore\NetTables.h	/^struct	Feature2RepInfo {$/;"	s
Feature2RepInfoTable	.\XESCore\NetTables.h	/^typedef vector<Feature2RepInfo>		Feature2RepInfoTable;$/;"	t
FeatureHasNoHeight	.\RenderFarmUI\RF_SpecialCommands.cpp	/^struct FeatureHasNoHeight {$/;"	s	file:
FeatureInfo	.\XESCore\ObjTables.h	/^struct	FeatureInfo {$/;"	s
FeatureInfoTable	.\XESCore\ObjTables.h	/^typedef hash_map<int, FeatureInfo>		FeatureInfoTable;$/;"	t
FeatureInfo_t	.\Tiger\TigerImport.cpp	/^struct	FeatureInfo_t {$/;"	s	file:
Feature_IsAirportFurniture	.\XESCore\ParamDefs.h	/^	inline	int	Feature_IsAirportFurniture(int x) { return x > feat_FirstAirportFurniture && x < feat_LastAirportFurniture; }$/;"	f
Feature_Is_f	.\XESCore\Zoning.cpp	/^typedef int(* Feature_Is_f)(int);$/;"	t	file:
Features	.\lib_json\include\json\features.h	/^   class JSON_API Features$/;"	c	namespace:Json
Features	.\lib_json\src\lib_json\json_reader.cpp	/^Features::Features()$/;"	f	class:Json::Features
Fetch	.\Utils\XChunkyFileUtils.cpp	/^	T	Fetch(void)$/;"	f	class:FlatDecoder
Fetch	.\Utils\XChunkyFileUtils.cpp	/^	T	Fetch(void)$/;"	f	class:RLEDecoder
Fetch	.\WEDCore\WED_Archive.cpp	/^WED_Persistent *	WED_Archive::Fetch(int id) const$/;"	f	class:WED_Archive
FetchEquiv	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^inline float	FetchEquiv(const DEMGeo& master, const DEMGeo& slave, int x, int y)$/;"	f
FetchForeignKeyLine	.\SDTS\SDTSReadTVP.cpp	/^LineRecord *			Topology::FetchForeignKeyLine(const ForeignKey& inKey)$/;"	f	class:Topology
FetchForeignKeyPoint	.\SDTS\SDTSReadTVP.cpp	/^PointRecord *			Topology::FetchForeignKeyPoint(const ForeignKey& inKey)$/;"	f	class:Topology
FetchForeignKeyPolygon	.\SDTS\SDTSReadTVP.cpp	/^PolygonRecord *			Topology::FetchForeignKeyPolygon(const ForeignKey& inKey)$/;"	f	class:Topology
FetchNth	.\WEDProperties\WED_PropertyTable.cpp	/^WED_Thing *	WED_PropertyTable::FetchNth(int row)$/;"	f	class:WED_PropertyTable
FetchPeer	.\WEDCore\WED_Persistent.cpp	/^WED_Persistent *		WED_Persistent::FetchPeer(int id) const$/;"	f	class:WED_Persistent
FetchStripSegments	.\Utils\RoadNetUtils.cpp	/^static	void	FetchStripSegments($/;"	f	file:
FetchTIFFCorners	.\Utils\GISUtils.cpp	/^bool	FetchTIFFCorners(const char * inFileName, double corners[8], int& post_pos)$/;"	f
FetchTIFFCorners	.\XPTools\GetImage.cpp	/^static	bool	FetchTIFFCorners(const char * inFileName, double corners[8])$/;"	f	file:
FetchTIFFCornersWithJP2K	.\Utils\GISUtils.cpp	/^bool	FetchTIFFCornersWithJP2K(const char * inFileName, double corners[8], int& post_pos)$/;"	f
FetchTIFFCornersWithTIFF	.\Utils\GISUtils.cpp	/^bool	FetchTIFFCornersWithTIFF(TIFF * tiffFile, double corners[8], int& post_pos, int width, int height)$/;"	f
FetchTile	.\Network\Terraserver.cpp	/^int		FetchTile(const char * scale, const char * theme, int domain, int x, int y, ImageInfo * destBitmap, int pixLeft, int pixTop)$/;"	f
FetchTilePositioning	.\Network\Terraserver.cpp	/^int		FetchTilePositioning(const char * scale, const char * theme, int domain, int x, int y,$/;"	f
FetchTokenString	.\XESCore\EnumSystem.cpp	/^const char *	FetchTokenString(int x)$/;"	f
FieldMap	.\Network\HTTPClient.h	/^typedef	map<string, string>	FieldMap;$/;"	t
FileCmdHandleNotification	.\ObjEdit\OE_FileCmds.cpp	/^void	FileCmdHandleNotification(int inCatagory, int inMsg, void * inParam)$/;"	f
FileCmdHandler	.\ObjEdit\OE_FileCmds.cpp	/^void	FileCmdHandler(void * inMenuRef, void * inItemRef)$/;"	f
FileCmdUpdateItems	.\ObjEdit\OE_FileCmds.cpp	/^void	FileCmdUpdateItems(void)$/;"	f
FileList	.\Tiger\TIGERProcess.h	/^typedef	vector<TigerAreaInfo_t>	FileList;$/;"	t
FilePathToFSSpec	.\Utils\MacSpec.cpp	/^bool	FilePathToFSSpec(const char * inPath, FSSpec& outSpec)$/;"	f
FileReader	.\XESCore\SimpleIO.cpp	/^FileReader::FileReader(FILE * inFile, PlatformType platform)$/;"	f	class:FileReader
FileReader	.\XESCore\SimpleIO.cpp	/^FileReader::FileReader(const char * inFileName, PlatformType platform)$/;"	f	class:FileReader
FileReader	.\XESCore\SimpleIO.h	/^class	FileReader : public IOReader {$/;"	c
FileSet_Close	.\Utils\MemFileUtils.cpp	/^void			FileSet_Close(MFFileSet * fs)$/;"	f
FileSet_Count	.\Utils\MemFileUtils.cpp	/^int				FileSet_Count(MFFileSet * fs)$/;"	f
FileSet_GetNth	.\Utils\MemFileUtils.cpp	/^const char *	FileSet_GetNth(MFFileSet * fs, int n)$/;"	f
FileSet_LoadDirectory	.\Utils\MemFileUtils.cpp	/^static	void	FileSet_LoadDirectory(MFFileSet * fs)$/;"	f	file:
FileSet_Open	.\Utils\MemFileUtils.cpp	/^MFFileSet *		FileSet_Open(const char * inPath)$/;"	f
FileSet_OpenNth	.\Utils\MemFileUtils.cpp	/^MFMemFile *		FileSet_OpenNth(MFFileSet * fs, int n)$/;"	f
FileSet_OpenSpecific	.\Utils\MemFileUtils.cpp	/^MFMemFile *		FileSet_OpenSpecific(MFFileSet * fs, const char * fname)$/;"	f
FileSet_TarballClose	.\Utils\MemFileUtils.cpp	/^void FileSet_TarballClose(void * ref, void * fi)$/;"	f
FileSet_TarballOpen	.\Utils\MemFileUtils.cpp	/^void * FileSet_TarballOpen(const char * fname, int size, void * ref)$/;"	f
FileSet_TarballRead	.\Utils\MemFileUtils.cpp	/^int FileSet_TarballRead(const char * data, int len, void * ref, void * fi)$/;"	f
FileStatus	.\Installer\InstallerProcs.cpp	/^int	FileStatus(const char * inPath1, InstallerChunk& inChunk)$/;"	f
FileToBlock	.\Installer\XFileTwiddle.unix.cpp	/^int		FileToBlock(const char * inPath, char ** outPtr, int * outSize)$/;"	f
FileToBlock	.\Installer\XFileTwiddle.win.cpp	/^int		FileToBlock(const char * inPath, char ** outPtr, int * outSize)$/;"	f
FileToBlock	.\Utils\XFileTwiddle.mac.cpp	/^int		FileToBlock(const char * inPath, char ** outPtr, int * outSize)$/;"	f
FileToBlock	.\Utils\XFileTwiddle.unix.cpp	/^int		FileToBlock(const char * inPath, char ** outPtr, int * outSize)$/;"	f
FileToBlock	.\Utils\XFileTwiddle.win.cpp	/^int		FileToBlock(const char * inPath, char ** outPtr, int * outSize)$/;"	f
FileWriter	.\XESCore\SimpleIO.cpp	/^FileWriter::FileWriter(FILE * inFile, PlatformType platform)$/;"	f	class:FileWriter
FileWriter	.\XESCore\SimpleIO.cpp	/^FileWriter::FileWriter(const char * inFileName, PlatformType platform)$/;"	f	class:FileWriter
FileWriter	.\XESCore\SimpleIO.h	/^class	FileWriter : public IOWriter {$/;"	c
FilesAreSame	.\Installer\InstallerProcs.cpp	/^bool	FilesAreSame(const char * inPath1, const char * inPath2)$/;"	f
FillBitmap	.\Utils\BitmapUtils.cpp	/^void	FillBitmap(const struct ImageInfo * inImageInfo, char c)$/;"	f
FillICAOFromJSON	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::FillICAOFromJSON()$/;"	f	class:WED_GatewayImportDialog
FillPolygonGaps	.\XESCore\MapPolygon.cpp	/^void	FillPolygonGaps(Polygon_set_2& ioPolygon, double dist)$/;"	f
FillRuleTable	.\XESCore\Zoning.h	/^typedef vector<FillRule_t>		FillRuleTable;$/;"	t
FillRule_t	.\XESCore\Zoning.h	/^struct FillRule_t {$/;"	s
FillVersionsFromJSON	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::FillVersionsFromJSON()$/;"	f	class:WED_GatewayImportDialog
FindAdjacentFaces	.\XESCore\MapTopology.h	/^inline void	FindAdjacentFaces(typename Arr::Face_handle inFace, set<typename Arr::Face_handle>& outFaces)$/;"	f
FindAirports	.\XESCore\AptAlgs.cpp	/^void	FindAirports(const Bbox2& bounds, const AptIndex& index, set<int>& apts)$/;"	f
FindAnyAirport	.\WEDMap\WED_ToolUtils.cpp	/^static WED_Airport *			FindAnyAirport(WED_Thing * who)$/;"	f	file:
FindBestStrip	.\DSF\tri_stripper_101\tri_stripper.cpp	/^inline tri_stripper::triangle_strip tri_stripper::FindBestStrip()$/;"	f	class:triangle_stripper::tri_stripper
FindBridgeRule	.\XESCore\NetTables.cpp	/^int		FindBridgeRule(int rep_type, double len, double smallest_seg, double biggest_seg, int num_segments, double curve_dot, double agl1, double agl2)$/;"	f
FindByID	.\GUI\GUI_Pane.cpp	/^GUI_Pane *	GUI_Pane::FindByID(int id)$/;"	f	class:GUI_Pane
FindByPoint	.\GUI\GUI_Pane.cpp	/^GUI_Pane *	GUI_Pane::FindByPoint(int x, int y)$/;"	f	class:GUI_Pane
FindCmdsRecursive	.\GUI\GUI_Window.cpp	/^static void FindCmdsRecursive(HMENU menu, CmdMap_t& io_map)$/;"	f	file:
FindColumn	.\VPF\VPFImport.cpp	/^static bool FindColumn(const VPF_TableDef& header, const char * column, int& index, int validate, const char * file)$/;"	f	file:
FindCommonParent	.\WEDMap\WED_ToolUtils.cpp	/^static WED_Thing *	FindCommonParent(WED_Thing * a, WED_Thing * b)$/;"	f	file:
FindConfigFile	.\XESCore\ConfigSystem.cpp	/^string	FindConfigFile(const char * inFilename)$/;"	f
FindEdgesForFace	.\XESCore\MapTopology.h	/^inline void	FindEdgesForFace(typename Arr::Face_handle face, set<typename Arr::Halfedge_handle> &outEdges)$/;"	f
FindEdgesForFaceSet	.\XESCore\MapTopology.h	/^inline void	FindEdgesForFaceSet(const set<typename Arr::Face_handle>& inFaces, set<typename Arr::Halfedge_handle>& outEdges)$/;"	f
FindFaceFullyInRect	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindFaceFullyInRect(Pmwx& inMap, PmwxIndex_t& index, const Point2& p1, const Point2& p2, vector<Face_handle>& outIDs)$/;"	f
FindFaceTouchesPt	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindFaceTouchesPt(Pmwx& inMap, PmwxIndex_t& index, const Point2& p, vector<Face_handle>& outIDs)$/;"	f
FindFaceTouchesRectFast	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindFaceTouchesRectFast(Pmwx& inMap, PmwxIndex_t& index, const Point2& p1, const Point2& p2, vector<Face_handle>& outIDs)$/;"	f
FindFacesForEdgeSet	.\XESCore\MapTopology.h	/^inline void	FindFacesForEdgeSet(const set<typename Arr::Halfedge_handle>& inEdges, set<typename Arr::Face_handle>& outFaces)$/;"	f
FindForest	.\XESCore\ForestTables.cpp	/^int		FindForest($/;"	f
FindHalfedgeFullyInRect	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindHalfedgeFullyInRect(Pmwx& inMap, PmwxIndex_t& index, const Point2& p1, const Point2& p2, vector<Halfedge_handle>& outIDs)$/;"	f
FindHalfedgeTouchesRectFast	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindHalfedgeTouchesRectFast(Pmwx& inMap, PmwxIndex_t& index, const Point2& p1, const Point2& p2, vector<Halfedge_handle>& outIDs)$/;"	f
FindHighestLeft	.\XESCore\DEMToVector.cpp	/^bool FindHighestLeft(const DEMGeo& inDEM, const vector<int>& ioIndex, int& x, int& y, int y_start)$/;"	f
FindIndexForCmd	.\Obj\XObjDefs.cpp	/^int	FindIndexForCmd(int inCmd)$/;"	f
FindIndicesFromPt	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::FindIndicesFromPt(int p, vector<int>& indices)$/;"	f	class:CoverageFinder
FindInternalEdgesForEdgeSet	.\XESCore\MapTopology.h	/^inline void	FindInternalEdgesForEdgeSet(const set<typename Arr::Halfedge_handle>& inEdges, set<typename Arr::Halfedge_handle>& outEdges)$/;"	f
FindMinMaxPointsOnMesh	.\XESCore\MeshAlgs_old.cpp	/^int	FindMinMaxPointsOnMesh($/;"	f
FindNaturalTerrain	.\XESCore\DEMTables.cpp	/^int	FindNaturalTerrain($/;"	f
FindNear	.\WEDMap\WED_CreateEdgeTool.cpp	/^void WED_CreateEdgeTool::FindNear(WED_Thing * host, IGISEntity * ent, const char * filter, const Point2& loc, WED_Thing *& out_thing, double& out_dsq)$/;"	f	class:WED_CreateEdgeTool
FindNearP2S	.\WEDMap\WED_CreateEdgeTool.cpp	/^void WED_CreateEdgeTool::FindNearP2S(WED_Thing * host, IGISEntity * ent, const char * filter, const Point2& loc, IGISPointSequence *& out_thing, double& out_dsq)$/;"	f	class:WED_CreateEdgeTool
FindNearestFontSize	.\UI\FontMgr.cpp	/^static int FindNearestFontSize(int inSize, bool require_exact)$/;"	f	file:
FindNextCCW	.\XESCore\DEMToVector.cpp	/^int	FindNextCCW(const DEMGeo& dem, int x, int y, int last_dir)$/;"	f
FindNextEast	.\XESCore\MeshAlgs.cpp	/^inline void FindNextEast(CDT& ioMesh, CDT::Face_handle& ioFace, int& index, bool is_bot_edge)$/;"	f
FindNextNorth	.\XESCore\MeshAlgs.cpp	/^inline void FindNextNorth(CDT& ioMesh, CDT::Face_handle& ioFace, int& index, bool is_right_edge)$/;"	f
FindNextRiverSegment	.\XESCore\Hydro.cpp	/^void	FindNextRiverSegment(int old_x, int old_y, int cur_x, int cur_y, int& new_x, int& new_y, const DEMGeo& hydro_dir, const DEMGeo& hydro_flw, const DEMGeo& hydro_elev, const DEMGeo& is_river)$/;"	f
FindObjCmd	.\Obj\XObjDefs.cpp	/^int	FindObjCmd(const char * inToken, bool obj_8)$/;"	f
FindPointOnPlane	.\ObjEdit\OE_Zoomer3d.cpp	/^bool		OE_Zoomer3d::FindPointOnPlane($/;"	f	class:OE_Zoomer3d
FindPointOnPlane	.\Utils\GeoUtils.cpp	/^bool	FindPointOnPlane($/;"	f
FindPointOnSphere	.\ObjEdit\OE_Zoomer3d.cpp	/^bool		OE_Zoomer3d::FindPointOnSphere($/;"	f	class:OE_Zoomer3d
FindPointOnSphere	.\Utils\GeoUtils.cpp	/^bool	FindPointOnSphere($/;"	f
FindProperty	.\WEDCore\WED_PropertyHelper.cpp	/^int		WED_PropertyHelper::FindProperty(const char * in_prop) const$/;"	f	class:WED_PropertyHelper
FindProperty	.\WEDEntities\WED_GISLine_Width.cpp	/^int			WED_GISLine_Width::FindProperty(const char * in_prop) const$/;"	f	class:WED_GISLine_Width
FindProperty	.\WEDTCE\WED_TCEToolAdapter.cpp	/^int			WED_TCEToolAdapter::FindProperty(const char * in_prop) const$/;"	f	class:WED_TCEToolAdapter
FindTexture	.\ObjEdit\OE_TexMgr.cpp	/^GLenum		FindTexture(const string& inName, bool inNight, int * outWidth, int * outHeight)$/;"	f
FindTexture	.\XPTools\ViewObj.cpp	/^GLenum		FindTexture(const string& inName, bool inNight)$/;"	f
FindVectors	.\SDTS\SDTSReadTVP.cpp	/^void	FindVectors(Topology& sdts,$/;"	f
FindVerticesTouchesPt	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindVerticesTouchesPt(Pmwx& inMap, PmwxIndex_t& index, const Point2& p, vector<Vertex_handle>& outIDs)$/;"	f
FindVerticesTouchesRect	.\RenderFarmUI\RF_DrawMap.cpp	/^void		FindVerticesTouchesRect(Pmwx& inMap, PmwxIndex_t& index, const Point2& p1, const Point2& p2, vector<Vertex_handle>& outIDs)$/;"	f
FindWatersheds	.\XESCore\DEMAlgs.cpp	/^void	FindWatersheds(DEMGeo& ws, vector<DEMGeo::address>& out_sheds)$/;"	f
Finish	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::Finish(void)$/;"	f	class:XObjBuilder
FinishAxes	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::FinishAxes(void)$/;"	f	class:CoverageFinder
Finite_edges_iterator	.\XESCore\MeshConformer.h	/^  typedef typename Tr::Finite_edges_iterator Finite_edges_iterator;$/;"	t	class:CGAL::Triangulation_conformer_any_2
FitForward	.\UI\FontMgr.cpp	/^int		FontMgr::FitForward($/;"	f	class:FontMgr
FitReverse	.\UI\FontMgr.cpp	/^int		FontMgr::FitReverse($/;"	f	class:FontMgr
FitStringFwd	.\GUI\GUI_TextField.cpp	/^int				GUI_TextField::FitStringFwd($/;"	f	class:GUI_TextField
FitStringFwdCB	.\OGLE\ogle.cpp	/^int				OGLE::FitStringFwdCB($/;"	f	class:OGLE
FitStringFwd_f	.\OGLE\ogle.h	/^	int				(* FitStringFwd_f)($/;"	m	struct:OGLE_Callbacks
FitStringRev	.\GUI\GUI_TextField.cpp	/^int				GUI_TextField::FitStringRev($/;"	f	class:GUI_TextField
FitStringRevCB	.\OGLE\ogle.cpp	/^int				OGLE::FitStringRevCB($/;"	f	class:OGLE
FitStringRev_f	.\OGLE\ogle.h	/^	int				(* FitStringRev_f)($/;"	m	struct:OGLE_Callbacks
FixBeachContinuity	.\XESCore\DSFBuilder.cpp	/^void FixBeachContinuity($/;"	f
FixRegionPrefix	.\XESCore\SceneryPackages.cpp	/^static string FixRegionPrefix(const string& name)$/;"	f	file:
FixSink	.\XESCore\Hydro.cpp	/^int FixSink(int x, int y, DEMGeo& elev, DEMGeo& hydro_dir)$/;"	f
FlatDecoder	.\Utils\XChunkyFileUtils.cpp	/^	FlatDecoder(uint8_t * mem) : p(mem)$/;"	f	class:FlatDecoder
FlatDecoder	.\Utils\XChunkyFileUtils.cpp	/^class	FlatDecoder {$/;"	c	file:
FlatEncoder	.\Utils\XChunkyFileUtils.cpp	/^	FlatEncoder(FILE * inFile) : file(inFile)$/;"	f	class:FlatEncoder
FlatEncoder	.\Utils\XChunkyFileUtils.cpp	/^class	FlatEncoder {$/;"	c	file:
FlattenWater	.\XESCore\MeshAlgs.cpp	/^void FlattenWater(CDT& ioMesh)$/;"	f
FlipImageY	.\Utils\BitmapUtils.cpp	/^void	FlipImageY(struct ImageInfo&	io_image)$/;"	f
FloatToKey	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void FloatToKey(IniSectionMap& inMap, const char * sec, const  char * key, float& v)$/;"	f	file:
Flush	.\XESCore\SimpleIO.h	/^	void	Flush(void)$/;"	f	class:WriterBuffer
FocusChain	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::FocusChain(int inForce)$/;"	f	class:GUI_Commander
FontAlign_t	.\UI\FontMgr.h	/^typedef int FontAlign_t;$/;"	t
FontDrawDarkBox	.\RenderFarmUI\RF_MapView.cpp	/^static void FontDrawDarkBox($/;"	f	file:
FontFuncs	.\UI\FontMgr.h	/^struct FontFuncs {$/;"	s
FontHandle	.\UI\FontMgr.h	/^typedef struct FontInfo_t* FontHandle;$/;"	t	typeref:struct:FontInfo_t
FontInfo_t	.\UI\FontMgr.cpp	/^struct	FontInfo_t {$/;"	s	file:
FontMgr	.\UI\FontMgr.cpp	/^FontMgr::FontMgr()$/;"	f	class:FontMgr
FontMgr	.\UI\FontMgr.h	/^class FontMgr {$/;"	c
ForceRefresh	.\UI\XWin.lin.cpp	/^void XWin::ForceRefresh(void)$/;"	f	class:XWin
ForceRefresh	.\UI\XWin.win.cpp	/^void			XWin::ForceRefresh(void)$/;"	f	class:XWin
ForeignKey	.\SDTS\SDTSReadTVP.cpp	/^ForeignKey::ForeignKey() : pair<string,int>()$/;"	f	class:ForeignKey
ForeignKey	.\SDTS\SDTSReadTVP.cpp	/^ForeignKey::ForeignKey(const ForeignKey& x) : pair<string, int>(x)$/;"	f	class:ForeignKey
ForeignKey	.\SDTS\SDTSReadTVP.cpp	/^ForeignKey::ForeignKey(const sb_ForeignID& id) : pair<string, int>(id.moduleName(), id.recordID())$/;"	f	class:ForeignKey
ForeignKey	.\SDTS\SDTSReadTVP.cpp	/^ForeignKey::ForeignKey(const string& s, int d) : pair<string, int>(s, d)$/;"	f	class:ForeignKey
ForeignKey	.\SDTS\SDTSReadTVP.h	/^struct ForeignKey : public pair<string, int> {$/;"	s
ForeignKeyVector	.\SDTS\SDTSReadTVP.cpp	/^typedef vector<ForeignKey>			ForeignKeyVector;$/;"	t	file:
ForestIndex	.\XESCore\BlockFill.h	/^typedef RTree2<Pmwx::Face_handle, 4>		ForestIndex;$/;"	t
ForestInfoMap	.\XESCore\ForestTables.h	/^typedef	map<int, ForestInfo_t>	ForestInfoMap;$/;"	t
ForestInfo_t	.\XESCore\ForestTables.h	/^struct	ForestInfo_t {$/;"	s
ForestRuleVector	.\XESCore\ForestTables.h	/^typedef vector<ForestRule_t>	ForestRuleVector;$/;"	t
ForestRule_t	.\XESCore\ForestTables.h	/^struct	ForestRule_t {$/;"	s
ForestTables_H	.\XESCore\ForestTables.h	25;"	d
ForkRule	.\XESCore\NetTables.h	/^struct ForkRule {$/;"	s
ForkRuleTable	.\XESCore\NetTables.h	/^typedef vector<ForkRule>						ForkRuleTable;$/;"	t
Forward	.\Utils\CompGeomUtils.cpp	/^Point2	CoordTranslator2::Forward(const Point2& input) const$/;"	f	class:CoordTranslator2
Forward	.\XESCore\CGALDefs.h	/^ inline Point_2	CoordTranslator_2::Forward(const Point_2& input) const$/;"	f	class:CoordTranslator_2
FowlerLittle	.\XESCore\MeshAlgs_old.cpp	/^void FowlerLittle(const DEMGeo& orig, DEMGeo& deriv)$/;"	f
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropBoolText
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropDoubleText
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropFileText
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropIntEnum
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropIntEnumBitfield
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropIntEnumSet
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropIntEnumSetFilter
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropIntEnumSetUnion
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropIntText
FromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropStringText
FromDB	.\WEDEntities\WED_AirportChain.cpp	/^void			WED_AirportChain::FromDB(sqlite3 * db, const map<int,int>& mapping)$/;"	f	class:WED_AirportChain
FromDB	.\WEDEntities\WED_Entity.cpp	/^void	WED_Entity::FromDB(sqlite3 * db, const map<int,int>& mapping)$/;"	f	class:WED_Entity
FromDB	.\WEDEntities\WED_KeyObjects.cpp	/^void			WED_KeyObjects::FromDB(sqlite3 * db, const map<int,int>& mapping)$/;"	f	class:WED_KeyObjects
FromDB	.\WEDEntities\WED_Select.cpp	/^void			WED_Select::FromDB(sqlite3 * db, const map<int,int>& mapping)$/;"	f	class:WED_Select
FromDB	.\WEDEntities\WED_Thing.cpp	/^void			WED_Thing::FromDB(sqlite3 * db, const map<int,int>& mapping)$/;"	f	class:WED_Thing
FromDB	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::FromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_TypeField
FromGlobals	.\ObjEdit\OE_DataModel.cpp	/^void	UndoState_t::FromGlobals(void)$/;"	f	class:UndoState_t
FromPrefs	.\WEDMap\WED_MapPane.cpp	/^void			WED_MapPane::FromPrefs(IDocPrefs * prefs)$/;"	f	class:WED_MapPane
FromPrefs	.\WEDProperties\WED_PropertyPane.cpp	/^void	WED_PropertyPane::FromPrefs(IDocPrefs * prefs,int id)$/;"	f	class:WED_PropertyPane
FromPrefs	.\WEDTCE\WED_TCEPane.cpp	/^void			WED_TCEPane::FromPrefs(IDocPrefs * prefs)$/;"	f	class:WED_TCEPane
FromXML	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::FromXML(WED_XMLReader * reader, const XML_Char ** atts)$/;"	f	class:WED_Thing
FuncHillIrr	.\OneOffs\GenTerrain.c	/^void FuncHillIrr(const char * t, int vari)$/;"	f
FuncHillSq	.\OneOffs\GenTerrain.c	/^void FuncHillSq(const char * t, int vari)$/;"	f
FuncInIrr	.\OneOffs\GenTerrain.c	/^void FuncInIrr(const char * t, int vari)$/;"	f
FuncInSq	.\OneOffs\GenTerrain.c	/^void FuncInSq(const char * t, int vari)$/;"	f
FuncIndIrr	.\OneOffs\GenTerrain.c	/^void FuncIndIrr(const char * t, int vari)$/;"	f
FuncIndSq	.\OneOffs\GenTerrain.c	/^void FuncIndSq(const char * t, int vari)$/;"	f
FuncObjs	.\OneOffs\GenTerrain.c	/^void FuncObjs(const char * s, const char * t, int vari)$/;"	f
FuncOutIrr	.\OneOffs\GenTerrain.c	/^void FuncOutIrr(const char * t, int vari)$/;"	f
FuncOutSq	.\OneOffs\GenTerrain.c	/^void FuncOutSq(const char * t, int vari)$/;"	f
FuncPark	.\OneOffs\GenTerrain.c	/^void FuncPark(const char * t, int vari)$/;"	f
FuncTownIrr	.\OneOffs\GenTerrain.c	/^void FuncTownIrr(const char * t, int vari)$/;"	f
FuncTownSq	.\OneOffs\GenTerrain.c	/^void FuncTownSq(const char * t, int vari)$/;"	f
G	.\Utils\md5.c	63;"	d	file:
GAMMA_SRGB	.\Utils\BitmapUtils.h	31;"	d
GATEWAY_IMPORT_FEATURES	.\Obj\XDefs.h	79;"	d
GCC_VERSION	.\Obj\XDefs.h	175;"	d
GEOUTILS_H	.\Utils\GeoUtils.h	24;"	d
GET_DEGS	.\WEDMap\WED_Map.cpp	209;"	d	file:
GET_DEGS	.\WEDMap\WED_Map.cpp	224;"	d	file:
GET_EW	.\WEDMap\WED_Map.cpp	208;"	d	file:
GET_FLOAT_WORD	.\Obj\XObjBuilder.cpp	40;"	d	file:
GET_MINS	.\WEDMap\WED_Map.cpp	210;"	d	file:
GET_MINS	.\WEDMap\WED_Map.cpp	225;"	d	file:
GET_NS	.\WEDMap\WED_Map.cpp	207;"	d	file:
GET_SECS	.\WEDMap\WED_Map.cpp	211;"	d	file:
GET_SECS	.\WEDMap\WED_Map.cpp	226;"	d	file:
GET_XBUTTON_WPARAM	.\UI\XWin.win.cpp	28;"	d	file:
GG	.\Utils\md5.c	77;"	d	file:
GISAreaFeature_t	.\XESCore\MapDefs.h	/^struct GISAreaFeature_t {$/;"	s
GISClass_t	.\Interfaces\IGIS.h	/^enum GISClass_t {$/;"	g
GISLayer_t	.\Interfaces\IGIS.h	/^enum GISLayer_t {$/;"	g
GISNetworkSegmentVector	.\XESCore\MapDefs.h	/^typedef vector<GISNetworkSegment_t>		GISNetworkSegmentVector;$/;"	t
GISNetworkSegment_t	.\XESCore\MapDefs.h	/^struct	GISNetworkSegment_t {$/;"	s
GISObjPlacementVector	.\XESCore\MapDefs.h	/^typedef vector<GISObjPlacement_t>	GISObjPlacementVector;$/;"	t
GISObjPlacement_t	.\XESCore\MapDefs.h	/^struct	GISObjPlacement_t {$/;"	s
GISParamMap	.\XESCore\MapDefs.h	/^typedef	map<int, double>	GISParamMap;$/;"	t
GISPointFeatureVector	.\XESCore\MapDefs.h	/^typedef vector<GISPointFeature_t>	GISPointFeatureVector;$/;"	t
GISPointFeature_t	.\XESCore\MapDefs.h	/^struct	GISPointFeature_t {$/;"	s
GISPolyObjPlacementVector	.\XESCore\MapDefs.h	/^typedef vector<GISPolyObjPlacement_t>	GISPolyObjPlacementVector;$/;"	t
GISPolyObjPlacement_t	.\XESCore\MapDefs.h	/^struct	GISPolyObjPlacement_t {$/;"	s
GISPolygonFeatureVector	.\XESCore\MapDefs.h	/^typedef vector<GISPolygonFeature_t>	GISPolygonFeatureVector;$/;"	t
GISPolygonFeature_t	.\XESCore\MapDefs.h	/^struct GISPolygonFeature_t {$/;"	s
GISTOOL_CORECMDS_H	.\XESTools\GISTool_CoreCmds.h	25;"	d
GISTOOL_DEMCMDS_H	.\XESTools\GISTool_DemCmds.h	25;"	d
GISTOOL_DUMPCMDS_H	.\XESTools\GISTool_DumpCmds.h	25;"	d
GISTOOL_GLOBALS_H	.\XESTools\GISTool_Globals.h	25;"	d
GISTOOL_MISCCMDS_H	.\XESTools\GISTool_MiscCmds.h	25;"	d
GISTOOL_OBSCMDS_H	.\XESTools\GISTool_ObsCmds.h	25;"	d
GISTOOL_PROCESSINGCMDS_H	.\XESTools\GISTool_ProcessingCmds.h	25;"	d
GISTOOL_UTILS_H	.\XESTools\GISTool_Utils.h	25;"	d
GISTOOL_VECTORCMDS_H	.\XESTools\GISTool_VectorCmds.h	25;"	d
GISTool_CmdInfo_t	.\XESTools\GISTool_Utils.cpp	/^struct	GISTool_CmdInfo_t {$/;"	s	file:
GISTool_Command_f	.\XESTools\GISTool_Utils.h	/^typedef int (* GISTool_Command_f)(const vector<const char *>& inParms);$/;"	t
GISTool_FindCommand	.\XESTools\GISTool_Utils.cpp	/^bool	GISTool_FindCommand($/;"	f
GISTool_IsCommand	.\XESTools\GISTool_Utils.cpp	/^bool	GISTool_IsCommand($/;"	f
GISTool_ParseCommands	.\XESTools\GISTool_Utils.cpp	/^int	GISTool_ParseCommands(const vector<const char *>& args)$/;"	f
GISTool_PrintHelpCommand	.\XESTools\GISTool_Utils.cpp	/^int	GISTool_PrintHelpCommand(const char * inCommand)$/;"	f
GISTool_PrintHelpSummary	.\XESTools\GISTool_Utils.cpp	/^void	GISTool_PrintHelpSummary(void)$/;"	f
GISTool_RegCmd_t	.\XESTools\GISTool_Utils.h	/^struct	GISTool_RegCmd_t {$/;"	s
GISTool_RegisterCommand	.\XESTools\GISTool_Utils.cpp	/^void	GISTool_RegisterCommand($/;"	f
GISTool_RegisterCommands	.\XESTools\GISTool_Utils.cpp	/^void	GISTool_RegisterCommands($/;"	f
GISTool_SetSkip	.\XESTools\GISTool_Utils.cpp	/^void	GISTool_SetSkip(int n)$/;"	f
GISUTILS_H	.\Utils\GISUtils.h	24;"	d
GIS_face_data	.\XESCore\MapDefs.h	/^	GIS_face_data() : mTerrainType(0) { mAreaFeature.mFeatType = 0; }$/;"	f	class:GIS_face_data
GIS_face_data	.\XESCore\MapDefs.h	/^	GIS_face_data(const GIS_face_data &x) {$/;"	f	class:GIS_face_data
GIS_face_data	.\XESCore\MapDefs.h	/^class GIS_face_data {$/;"	c
GIS_halfedge_data	.\XESCore\MapDefs.h	/^	GIS_halfedge_data() : mMark(false),mInset(0.0f), mTransition(0.0) { }$/;"	f	struct:GIS_halfedge_data
GIS_halfedge_data	.\XESCore\MapDefs.h	/^struct GIS_halfedge_data {$/;"	s
GIS_vertex_data	.\XESCore\MapDefs.h	/^	GIS_vertex_data() { mTunnelPortal = false; mNeighborBurned = false; mNeighborNotBurned = false; }$/;"	f	struct:GIS_vertex_data
GIS_vertex_data	.\XESCore\MapDefs.h	/^struct GIS_vertex_data { $/;"	s
GK	.\XESCore\BlockDefs.h	/^typedef FastKernel GK;$/;"	t
GK_Container_	.\XESCore\BlockDefs.h	/^typedef	std::vector<GK::Point_2>													GK_Container_;$/;"	t
GK_TraitsBase	.\XESCore\BlockDefs.h	/^typedef CGAL::Arr_segment_traits_2<GK>												GK_TraitsBase;$/;"	t
GLDebugMacros_h	.\Utils\GLDebugMacros.h	10;"	d
GLDraw	.\GUI\GUI_Window.cpp	/^void			GUI_Window::GLDraw(void)$/;"	f	class:GUI_Window
GLDraw	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::GLDraw(void)$/;"	f	class:XPWidgetWin
GLDraw	.\XPTools\ViewObj.cpp	/^void			XObjWin::GLDraw(void)$/;"	f	class:XObjWin
GLOBAL_PACKAGE_PATH	.\WEDCore\WED_PackageMgr.cpp	34;"	d	file:
GLOBAL_WED_ART_ASSET_FUDGE_FACTOR	.\Obj\XDefs.h	103;"	d
GLReshaped	.\GUI\GUI_Window.cpp	/^void			GUI_Window::GLReshaped(int inWidth, int inHeight)$/;"	f	class:GUI_Window
GLReshaped	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::GLReshaped(int inWidth, int inHeight)$/;"	f	class:XPWidgetWin
GLReshaped	.\XPTools\ViewObj.cpp	/^void			XObjWin::GLReshaped(int inWidth, int inHeight)$/;"	f	class:XObjWin
GLX_GLXEXT_PROTOTYPES	.\GUI\GUI_Laftfont.cpp	7;"	d	file:
GL_ACTIVE_TEXTURE_ARB	.\UI\XWinGL.h	111;"	d
GL_CLAMP_TO_EDGE	.\UI\XWinGL.h	123;"	d
GL_CLIENT_ACTIVE_TEXTURE_ARB	.\UI\XWinGL.h	112;"	d
GL_COMPRESSED_RGB	.\UI\XWinGL.h	115;"	d
GL_COMPRESSED_RGBA	.\UI\XWinGL.h	116;"	d
GL_COMPRESSED_TEXTURE_FORMATS	.\UI\XWinGL.h	121;"	d
GL_ERR	.\Obj\ObjDraw.cpp	/^static void GL_ERR(int err)$/;"	f	file:
GL_EXT_texture_env_combine	.\RenderFarmUI\RF_MapView.cpp	73;"	d	file:
GL_GLEXT_FUNCTION_POINTERS	.\RenderFarmUI\RF_MapView.cpp	74;"	d	file:
GL_GLEXT_PROTOTYPES	.\GUI\GUI_Laftfont.cpp	6;"	d	file:
GL_MAX_TEXTURE_UNITS_ARB	.\UI\XWinGL.h	113;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	.\UI\XWinGL.h	120;"	d
GL_TEXTURE0_ARB	.\UI\XWinGL.h	79;"	d
GL_TEXTURE10_ARB	.\UI\XWinGL.h	89;"	d
GL_TEXTURE11_ARB	.\UI\XWinGL.h	90;"	d
GL_TEXTURE12_ARB	.\UI\XWinGL.h	91;"	d
GL_TEXTURE13_ARB	.\UI\XWinGL.h	92;"	d
GL_TEXTURE14_ARB	.\UI\XWinGL.h	93;"	d
GL_TEXTURE15_ARB	.\UI\XWinGL.h	94;"	d
GL_TEXTURE16_ARB	.\UI\XWinGL.h	95;"	d
GL_TEXTURE17_ARB	.\UI\XWinGL.h	96;"	d
GL_TEXTURE18_ARB	.\UI\XWinGL.h	97;"	d
GL_TEXTURE19_ARB	.\UI\XWinGL.h	98;"	d
GL_TEXTURE1_ARB	.\UI\XWinGL.h	80;"	d
GL_TEXTURE20_ARB	.\UI\XWinGL.h	99;"	d
GL_TEXTURE21_ARB	.\UI\XWinGL.h	100;"	d
GL_TEXTURE22_ARB	.\UI\XWinGL.h	101;"	d
GL_TEXTURE23_ARB	.\UI\XWinGL.h	102;"	d
GL_TEXTURE24_ARB	.\UI\XWinGL.h	103;"	d
GL_TEXTURE25_ARB	.\UI\XWinGL.h	104;"	d
GL_TEXTURE26_ARB	.\UI\XWinGL.h	105;"	d
GL_TEXTURE27_ARB	.\UI\XWinGL.h	106;"	d
GL_TEXTURE28_ARB	.\UI\XWinGL.h	107;"	d
GL_TEXTURE29_ARB	.\UI\XWinGL.h	108;"	d
GL_TEXTURE2_ARB	.\UI\XWinGL.h	81;"	d
GL_TEXTURE30_ARB	.\UI\XWinGL.h	109;"	d
GL_TEXTURE31_ARB	.\UI\XWinGL.h	110;"	d
GL_TEXTURE3_ARB	.\UI\XWinGL.h	82;"	d
GL_TEXTURE4_ARB	.\UI\XWinGL.h	83;"	d
GL_TEXTURE5_ARB	.\UI\XWinGL.h	84;"	d
GL_TEXTURE6_ARB	.\UI\XWinGL.h	85;"	d
GL_TEXTURE7_ARB	.\UI\XWinGL.h	86;"	d
GL_TEXTURE8_ARB	.\UI\XWinGL.h	87;"	d
GL_TEXTURE9_ARB	.\UI\XWinGL.h	88;"	d
GL_TEXTURE_COMPRESSED	.\UI\XWinGL.h	119;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	.\UI\XWinGL.h	118;"	d
GL_TEXTURE_COMPRESSION_HINT	.\UI\XWinGL.h	117;"	d
GRAPHIC_LOGGING	.\Utils\Skeleton.cpp	121;"	d	file:
GREEDYMESH_H	.\XESCore\GreedyMesh.h	25;"	d
GRID_BUCKET	.\OneOffs\osm_tile.c	/^int GRID_BUCKET(int v)$/;"	f
GSHHS	.\RawImport\gshhs.h	/^struct GSHHS {	\/* Global Self-consistent Hierarchical High-resolution Shorelines *\/$/;"	s
GUI2CIT	.\GUI\GUI_Clipboard.cpp	/^static int	GUI2CIT(GUI_ClipType in_t, GUI_CIT& out_t)$/;"	f	file:
GUI_APPLICATION_H	.\GUI\GUI_Application.h	25;"	d
GUI_APP_MENUS	.\GUI\GUI_Menus.h	/^	GUI_APP_MENUS = 2000$/;"	e	enum:__anon26
GUI_APP_MESSAGES	.\GUI\GUI_Messages.h	/^	GUI_APP_MESSAGES = 2000$/;"	e	enum:__anon27
GUI_Application	.\GUI\GUI_Application.cpp	/^GUI_Application::GUI_Application(int& argc, char* argv[])$/;"	f	class:GUI_Application
GUI_Application	.\GUI\GUI_Application.h	/^class	GUI_Application : public GUI_Commander {$/;"	c
GUI_BROADCASTER_H	.\GUI\GUI_Broadcaster.h	25;"	d
GUI_BUTTON_H	.\GUI\GUI_Button.h	25;"	d
GUI_BoolIcon	.\GUI\GUI_TextTable.h	/^enum GUI_BoolIcon {$/;"	g
GUI_Broadcaster	.\GUI\GUI_Broadcaster.cpp	/^GUI_Broadcaster::GUI_Broadcaster()$/;"	f	class:GUI_Broadcaster
GUI_Broadcaster	.\GUI\GUI_Broadcaster.h	/^class	GUI_Broadcaster {$/;"	c
GUI_Button	.\GUI\GUI_Button.cpp	/^GUI_Button::GUI_Button($/;"	f	class:GUI_Button
GUI_Button	.\GUI\GUI_Button.h	/^class	GUI_Button : public GUI_Control {$/;"	c
GUI_ButtonType	.\GUI\GUI_Button.h	/^enum GUI_ButtonType {$/;"	g
GUI_CIT	.\GUI\GUI_Clipboard.cpp	/^	typedef	CLIPFORMAT	GUI_CIT;		\/\/ Clipboard Internal Type$/;"	t	file:
GUI_CIT	.\GUI\GUI_Clipboard.cpp	/^	typedef	int	GUI_CIT;$/;"	t	file:
GUI_CIT	.\GUI\GUI_Clipboard.cpp	/^	typedef	string	GUI_CIT;		\/\/ Clipboard Internal Type$/;"	t	file:
GUI_CLIPBOARD_H	.\GUI\GUI_Clipboard.h	25;"	d
GUI_COMMANDER_H	.\GUI\GUI_Commander.h	25;"	d
GUI_CONTROL_H	.\GUI\GUI_Control.h	25;"	d
GUI_CONTROL_VALUE_CHANGED	.\GUI\GUI_Messages.h	/^	GUI_CONTROL_VALUE_CHANGED = 1000,$/;"	e	enum:__anon27
GUI_CellContent	.\GUI\GUI_TextTable.h	/^struct	GUI_CellContent {$/;"	s
GUI_CellContentType	.\GUI\GUI_TextTable.h	/^enum GUI_CellContentType {$/;"	g
GUI_ChangeView	.\GUI\GUI_ChangeView.cpp	/^GUI_ChangeView::GUI_ChangeView(GUI_Commander * parent) :$/;"	f	class:GUI_ChangeView
GUI_ChangeView	.\GUI\GUI_ChangeView.h	/^class GUI_ChangeView : public GUI_Pane, public GUI_Commander {$/;"	c
GUI_ChangeView_H	.\GUI\GUI_ChangeView.h	25;"	d
GUI_ClipType	.\GUI\GUI_Defs.h	/^typedef	int	GUI_ClipType;$/;"	t
GUI_Clipboard_GetData	.\GUI\GUI_Clipboard.cpp	/^bool			GUI_Clipboard_GetData(GUI_ClipType inType, int size, void * ptr)$/;"	f
GUI_Clipboard_GetSize	.\GUI\GUI_Clipboard.cpp	/^int				GUI_Clipboard_GetSize(GUI_ClipType inType)$/;"	f
GUI_Clipboard_GetTypes	.\GUI\GUI_Clipboard.cpp	/^void			GUI_Clipboard_GetTypes(vector<GUI_ClipType>& outTypes)$/;"	f
GUI_Clipboard_HasClipType	.\GUI\GUI_Clipboard.cpp	/^bool			GUI_Clipboard_HasClipType(GUI_ClipType inType)$/;"	f
GUI_Clipboard_SetData	.\GUI\GUI_Clipboard.cpp	/^bool			GUI_Clipboard_SetData(int type_count, GUI_ClipType inTypes[], int sizes[], const void * ptrs[])$/;"	f
GUI_Commander	.\GUI\GUI_Commander.cpp	/^GUI_Commander::GUI_Commander(GUI_Commander * inParent) : $/;"	f	class:GUI_Commander
GUI_Commander	.\GUI\GUI_Commander.h	/^class	GUI_Commander {$/;"	c
GUI_Commander_Notifiable	.\GUI\GUI_Commander.h	/^class	GUI_Commander_Notifiable {$/;"	c
GUI_Control	.\GUI\GUI_Control.cpp	/^GUI_Control::GUI_Control() :$/;"	f	class:GUI_Control
GUI_Control	.\GUI\GUI_Control.h	/^class GUI_Control : public GUI_Pane, public GUI_Broadcaster {$/;"	c
GUI_DEFS_H	.\GUI\GUI_Defs.h	25;"	d
GUI_DESTROYABLE_H	.\GUI\GUI_Destroyable.h	25;"	d
GUI_DRAWUTILS_H	.\GUI\GUI_DrawUtils.h	25;"	d
GUI_Destroyable	.\GUI\GUI_Destroyable.h	/^class	GUI_Destroyable {$/;"	c
GUI_DestroyableTask	.\GUI\GUI_Destroyable.cpp	/^GUI_DestroyableTask::GUI_DestroyableTask()$/;"	f	class:GUI_DestroyableTask
GUI_DestroyableTask	.\GUI\GUI_Destroyable.cpp	/^class	GUI_DestroyableTask : public GUI_Timer {$/;"	c	file:
GUI_DragData	.\GUI\GUI_Clipboard.h	/^class	GUI_DragData {$/;"	c
GUI_DragData_Adapter	.\GUI\GUI_Clipboard.cpp	/^GUI_DragData_Adapter::GUI_DragData_Adapter(void * data_obj) : mObject(data_obj)$/;"	f	class:GUI_DragData_Adapter
GUI_DragData_Adapter	.\GUI\GUI_Clipboard.h	/^class	GUI_DragData_Adapter : public GUI_DragData {$/;"	c
GUI_DragMgr_Adapter	.\GUI\GUI_Clipboard.cpp	/^GUI_DragMgr_Adapter::GUI_DragMgr_Adapter(void * data_obj) : mObject(data_obj)$/;"	f	class:GUI_DragMgr_Adapter
GUI_DragMgr_Adapter	.\GUI\GUI_Clipboard.h	/^class	GUI_DragMgr_Adapter : public GUI_DragData {$/;"	c
GUI_DragOperation	.\GUI\GUI_Defs.h	/^typedef int GUI_DragOperation;$/;"	t
GUI_DragPart	.\GUI\GUI_TextTable.h	/^	enum GUI_DragPart {			\/\/ DRAG PARTS - divide the cell into 4 zones, for the uppe rand lower half, and closer to the center or edges.$/;"	g	class:GUI_TextTable
GUI_DragTableDest	.\GUI\GUI_TextTable.h	/^	enum GUI_DragTableDest {	\/\/ Where we expect the row to go:$/;"	g	class:GUI_TextTable
GUI_DrawCentered	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_DrawCentered($/;"	f
GUI_DrawHorizontalStretch	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_DrawHorizontalStretch($/;"	f
GUI_DrawStretched	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_DrawStretched($/;"	f
GUI_DrawVerticalStretch	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_DrawVerticalStretch($/;"	f
GUI_DropSource	.\GUI\GUI_Window.cpp	/^	GUI_DropSource() : m_cRef(1) { }$/;"	f	class:GUI_DropSource
GUI_DropSource	.\GUI\GUI_Window.cpp	/^class GUI_DropSource : public IDropSource {$/;"	c	file:
GUI_EnumDictionary	.\GUI\GUI_TextTable.h	/^typedef	map<int, pair<string, bool> >	GUI_EnumDictionary;	\/\/ For each enum: what it is, can we pick it?$/;"	t
GUI_EnumSection	.\GUI\GUI_Prefs.cpp	/^void			GUI_EnumSection(const char * section, void (* cb)(const char * key, const char * value, void * ref), void * ref)$/;"	f
GUI_FILTER_FIELD_CHANGED	.\GUI\GUI_Messages.h	/^	GUI_FILTER_FIELD_CHANGED,$/;"	e	enum:__anon27
GUI_FONTS_H	.\GUI\GUI_Fonts.h	25;"	d
GUI_FitForward	.\GUI\GUI_Fonts.cpp	/^int GUI_FitForward(int inFontID, const char* inStart, const char* inEnd,float width)$/;"	f
GUI_FitReverse	.\GUI\GUI_Fonts.cpp	/^int GUI_FitReverse(int inFontID, const char* inStart, const char* inEnd,float width)$/;"	f
GUI_FontDraw	.\GUI\GUI_Fonts.cpp	/^void	GUI_FontDraw($/;"	f
GUI_FontDrawScaled	.\GUI\GUI_Fonts.cpp	/^void	GUI_FontDrawScaled($/;"	f
GUI_FormWindow	.\GUI\GUI_FormWindow.cpp	/^GUI_FormWindow::GUI_FormWindow($/;"	f	class:GUI_FormWindow
GUI_FormWindow	.\GUI\GUI_FormWindow.h	/^class GUI_FormWindow : public GUI_Window, public GUI_Listener, public GUI_Destroyable {$/;"	c
GUI_FormWindow_H	.\GUI\GUI_FormWindow.h	25;"	d
GUI_FreeFunc_f	.\GUI\GUI_Defs.h	/^typedef	void			(* GUI_FreeFunc_f)(const void * mem, void * ref);$/;"	t
GUI_GRAPHSTATE_H	.\GUI\GUI_GraphState.h	25;"	d
GUI_GetData_f	.\GUI\GUI_Defs.h	/^typedef GUI_FreeFunc_f	(* GUI_GetData_f)(GUI_ClipType clip_type, const void ** out_start, const void ** out_end, void * ref);$/;"	t
GUI_GetImageResource	.\GUI\GUI_Resources.cpp	/^int GUI_GetImageResource($/;"	f
GUI_GetImageResourceHeight	.\GUI\GUI_Resources.cpp	/^int	GUI_GetImageResourceHeight(const char * in_resource)$/;"	f
GUI_GetImageResourceSize	.\GUI\GUI_Resources.cpp	/^int	GUI_GetImageResourceSize(const char * in_resource, int bounds[2])$/;"	f
GUI_GetImageResourceWidth	.\GUI\GUI_Resources.cpp	/^int	GUI_GetImageResourceWidth(const char * in_resource)$/;"	f
GUI_GetLineAscent	.\GUI\GUI_Fonts.cpp	/^float	GUI_GetLineAscent(int inFontID)$/;"	f
GUI_GetLineDescent	.\GUI\GUI_Fonts.cpp	/^float	GUI_GetLineDescent(int inFontID)$/;"	f
GUI_GetLineHeight	.\GUI\GUI_Fonts.cpp	/^float	GUI_GetLineHeight(int inFontID)$/;"	f
GUI_GetMacNativeDragTypeList	.\GUI\GUI_Clipboard.cpp	/^void GUI_GetMacNativeDragTypeList(vector<string>& out_types)$/;"	f
GUI_GetPrefString	.\GUI\GUI_Prefs.cpp	/^const char *	GUI_GetPrefString(const char * section, const char * key, const char * def)$/;"	f
GUI_GetPrefsDir	.\GUI\GUI_Prefs.cpp	/^bool			GUI_GetPrefsDir(string& path)$/;"	f
GUI_GetResourceBegin	.\GUI\GUI_Resources.cpp	/^const char *	GUI_GetResourceBegin(GUI_Resource res)$/;"	f
GUI_GetResourceEnd	.\GUI\GUI_Resources.cpp	/^const char *	GUI_GetResourceEnd(GUI_Resource res)$/;"	f
GUI_GetResourcePath	.\GUI\GUI_Resources.cpp	/^static int 	GUI_GetResourcePath(const char * in_resource, string& out_path)$/;"	f	file:
GUI_GetTempResourcePath	.\GUI\GUI_Resources.cpp	/^bool			GUI_GetTempResourcePath(const char * in_resource, string& out_path)$/;"	f
GUI_GetTextClipType	.\GUI\GUI_Clipboard.cpp	/^GUI_ClipType	GUI_GetTextClipType(void)$/;"	f
GUI_GetTextFromClipboard	.\GUI\GUI_Clipboard.cpp	/^bool			GUI_GetTextFromClipboard(string& outText)$/;"	f
GUI_GetTextureResource	.\GUI\GUI_Resources.cpp	/^int	GUI_GetTextureResource($/;"	f
GUI_GraphState	.\GUI\GUI_GraphState.h	/^class GUI_GraphState {$/;"	c
GUI_Header	.\GUI\GUI_Table.cpp	/^ GUI_Header::GUI_Header(int fill_right) :$/;"	f	class:GUI_Header
GUI_Header	.\GUI\GUI_Table.h	/^class	GUI_Header : public GUI_Pane, public GUI_Listener {$/;"	c
GUI_HeaderContent	.\GUI\GUI_TextTable.h	/^struct GUI_HeaderContent {$/;"	s
GUI_Help_H	.\GUI\GUI_Help.h	25;"	d
GUI_InitClipboard	.\GUI\GUI_Clipboard.cpp	/^void GUI_InitClipboard(void)$/;"	f
GUI_KEY_0	.\GUI\GUI_Defs.h	50;"	d
GUI_KEY_1	.\GUI\GUI_Defs.h	51;"	d
GUI_KEY_2	.\GUI\GUI_Defs.h	52;"	d
GUI_KEY_3	.\GUI\GUI_Defs.h	53;"	d
GUI_KEY_4	.\GUI\GUI_Defs.h	54;"	d
GUI_KEY_5	.\GUI\GUI_Defs.h	55;"	d
GUI_KEY_6	.\GUI\GUI_Defs.h	56;"	d
GUI_KEY_7	.\GUI\GUI_Defs.h	57;"	d
GUI_KEY_8	.\GUI\GUI_Defs.h	58;"	d
GUI_KEY_9	.\GUI\GUI_Defs.h	59;"	d
GUI_KEY_BACK	.\GUI\GUI_Defs.h	45;"	d
GUI_KEY_DECIMAL	.\GUI\GUI_Defs.h	60;"	d
GUI_KEY_DELETE	.\GUI\GUI_Defs.h	61;"	d
GUI_KEY_DOWN	.\GUI\GUI_Defs.h	49;"	d
GUI_KEY_ESCAPE	.\GUI\GUI_Defs.h	43;"	d
GUI_KEY_LEFT	.\GUI\GUI_Defs.h	46;"	d
GUI_KEY_RETURN	.\GUI\GUI_Defs.h	42;"	d
GUI_KEY_RIGHT	.\GUI\GUI_Defs.h	47;"	d
GUI_KEY_TAB	.\GUI\GUI_Defs.h	44;"	d
GUI_KEY_UP	.\GUI\GUI_Defs.h	48;"	d
GUI_KeyFlags	.\GUI\GUI_Defs.h	/^typedef int GUI_KeyFlags;$/;"	t
GUI_LAFTFONT_H	.\GUI\GUI_Laftfont.h	2;"	d
GUI_LISTENER_H	.\GUI\GUI_Listener.h	25;"	d
GUI_Label	.\GUI\GUI_Label.cpp	/^GUI_Label::GUI_Label() : GUI_Pane(),$/;"	f	class:GUI_Label
GUI_Label	.\GUI\GUI_Label.h	/^class	GUI_Label : public GUI_Pane {$/;"	c
GUI_Label_H	.\GUI\GUI_Label.h	25;"	d
GUI_Laftfont	.\GUI\GUI_Laftfont.cpp	/^GUI_Laftfont::GUI_Laftfont(unsigned short maxCodePoints)$/;"	f	class:GUI_Laftfont
GUI_Laftfont	.\GUI\GUI_Laftfont.h	/^class GUI_Laftfont$/;"	c
GUI_LaunchURL	.\GUI\GUI_Help.cpp	/^void	GUI_LaunchURL(const char * url)$/;"	f
GUI_Listener	.\GUI\GUI_Listener.cpp	/^GUI_Listener::GUI_Listener()$/;"	f	class:GUI_Listener
GUI_Listener	.\GUI\GUI_Listener.h	/^class	GUI_Listener {$/;"	c
GUI_LoadOneSimpleDrag	.\GUI\GUI_Clipboard.cpp	/^void * GUI_LoadOneSimpleDrag($/;"	f
GUI_LoadResource	.\GUI\GUI_Resources.cpp	/^GUI_Resource	GUI_LoadResource(const char * in_resource)$/;"	f
GUI_LoadResource	.\GUI\GUI_Resources.cpp	/^GUI_Resource	GUI_LoadResource(const char* in_resource)$/;"	f
GUI_MENUS_H	.\GUI\GUI_Menus.h	25;"	d
GUI_MESSAGES_H	.\GUI\GUI_Messages.h	25;"	d
GUI_MeasureRange	.\GUI\GUI_Fonts.cpp	/^float GUI_MeasureRange(int inFontID, const char * inStart, const char * inEnd)$/;"	f
GUI_MemoryHog	.\GUI\GUI_MemoryHog.cpp	/^GUI_MemoryHog::GUI_MemoryHog()$/;"	f	class:GUI_MemoryHog
GUI_MemoryHog	.\GUI\GUI_MemoryHog.h	/^class GUI_MemoryHog {$/;"	c
GUI_MemoryHog_H	.\GUI\GUI_MemoryHog.h	37;"	d
GUI_Menu	.\GUI\GUI_Defs.h	/^typedef void *	GUI_Menu;$/;"	t
GUI_MenuItem_t	.\GUI\GUI_Defs.h	/^struct	GUI_MenuItem_t {$/;"	s
GUI_OLE_Adapter	.\GUI\GUI_Clipboard.cpp	/^GUI_OLE_Adapter::GUI_OLE_Adapter(IDataObject * data_obj)$/;"	f	class:GUI_OLE_Adapter
GUI_OLE_Adapter	.\GUI\GUI_Clipboard.h	/^class	GUI_OLE_Adapter : public GUI_DragData {$/;"	c
GUI_PACKER_H	.\GUI\GUI_Packer.h	25;"	d
GUI_PANE_H	.\GUI\GUI_Pane.h	25;"	d
GUI_POPUPBUTTON_H	.\GUI\GUI_PopupButton.h	25;"	d
GUI_Packer	.\GUI\GUI_Packer.cpp	/^GUI_Packer::GUI_Packer()$/;"	f	class:GUI_Packer
GUI_Packer	.\GUI\GUI_Packer.h	/^class	GUI_Packer : public GUI_Pane {$/;"	c
GUI_Packer_Side	.\GUI\GUI_Packer.h	/^enum GUI_Packer_Side {$/;"	g
GUI_Pane	.\GUI\GUI_Pane.cpp	/^GUI_Pane::GUI_Pane() :$/;"	f	class:GUI_Pane
GUI_Pane	.\GUI\GUI_Pane.h	/^class	GUI_Pane {$/;"	c
GUI_PlotIcon	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_PlotIcon($/;"	f
GUI_PlotIconBulk	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_PlotIconBulk($/;"	f
GUI_PopupButton	.\GUI\GUI_PopupButton.cpp	/^GUI_PopupButton::GUI_PopupButton()$/;"	f	class:GUI_PopupButton
GUI_PopupButton	.\GUI\GUI_PopupButton.h	/^class	GUI_PopupButton : public GUI_Control {$/;"	c
GUI_PositionRect	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_PositionRect($/;"	f
GUI_PrefSection_t	.\GUI\GUI_Prefs.cpp	/^typedef map<string,string>				GUI_PrefSection_t;$/;"	t	file:
GUI_Prefs_H	.\GUI\GUI_Prefs.h	25;"	d
GUI_Prefs_Read	.\GUI\GUI_Prefs.cpp	/^void			GUI_Prefs_Read(const char *app_name)$/;"	f
GUI_Prefs_Write	.\GUI\GUI_Prefs.cpp	/^void			GUI_Prefs_Write(const char * app_name)$/;"	f
GUI_Prefs_t	.\GUI\GUI_Prefs.cpp	/^typedef map<string,GUI_PrefSection_t>	GUI_Prefs_t;$/;"	t	file:
GUI_QtAction	.\GUI\GUI_Application.cpp	/^GUI_QtAction::GUI_QtAction$/;"	f	class:GUI_QtAction
GUI_QtAction	.\GUI\GUI_Application.h	/^class GUI_QtAction : public QAction$/;"	c
GUI_QtMenu	.\GUI\GUI_Application.cpp	/^GUI_QtMenu::GUI_QtMenu$/;"	f	class:GUI_QtMenu
GUI_QtMenu	.\GUI\GUI_Application.h	/^class GUI_QtMenu : public QMenu$/;"	c
GUI_RESOURCES_H	.\GUI\GUI_Resources.h	25;"	d
GUI_RegisterPrivateClipType	.\GUI\GUI_Clipboard.cpp	/^GUI_ClipType	GUI_RegisterPrivateClipType(const char * clip_type)$/;"	f
GUI_Rescale_S	.\GUI\GUI_Resources.h	/^inline float	GUI_Rescale_S(float s, GUI_TexPosition_t * metrics) { return s * metrics->s_rescale; }$/;"	f
GUI_Rescale_T	.\GUI\GUI_Resources.h	/^inline float	GUI_Rescale_T(float t, GUI_TexPosition_t * metrics) { return t * metrics->t_rescale; }$/;"	f
GUI_Resource	.\GUI\GUI_Resources.h	/^typedef void *	GUI_Resource;$/;"	t
GUI_SCROLLBAR_H	.\GUI\GUI_ScrollBar.h	25;"	d
GUI_SCROLLERPANE_H	.\GUI\GUI_ScrollerPane.h	25;"	d
GUI_SCROLL_CONTENT_SIZE_CHANGED	.\GUI\GUI_Messages.h	/^	GUI_SCROLL_CONTENT_SIZE_CHANGED,				\/\/ Sent by scroll pane when number of pixels in the content has changed$/;"	e	enum:__anon27
GUI_SIMPLESCROLLER_H	.\GUI\GUI_SimpleScroller.h	25;"	d
GUI_SIMPLETABLEGEOMETRY_H	.\GUI\GUI_SimpleTableGeometry.h	25;"	d
GUI_SPLITTER_H	.\GUI\GUI_Splitter.h	25;"	d
GUI_ScrollBar	.\GUI\GUI_ScrollBar.cpp	/^GUI_ScrollBar::GUI_ScrollBar()$/;"	f	class:GUI_ScrollBar
GUI_ScrollBar	.\GUI\GUI_ScrollBar.h	/^class GUI_ScrollBar : public GUI_Control, public GUI_Timer {$/;"	c
GUI_ScrollerPane	.\GUI\GUI_ScrollerPane.cpp	/^GUI_ScrollerPane::GUI_ScrollerPane(int inHScroll, int inVScroll) :$/;"	f	class:GUI_ScrollerPane
GUI_ScrollerPane	.\GUI\GUI_ScrollerPane.h	/^class	GUI_ScrollerPane : public GUI_Pane, public GUI_Listener {$/;"	c
GUI_ScrollerPaneContent	.\GUI\GUI_ScrollerPane.h	/^class	GUI_ScrollerPaneContent : public GUI_Broadcaster {$/;"	c
GUI_SetPrefString	.\GUI\GUI_Prefs.cpp	/^void			GUI_SetPrefString(const char * section, const char * key, const char * value)$/;"	f
GUI_SetTextToClipboard	.\GUI\GUI_Clipboard.cpp	/^bool			GUI_SetTextToClipboard(const string& inText)$/;"	f
GUI_Side	.\GUI\GUI_Table.cpp	/^ GUI_Side::GUI_Side() :$/;"	f	class:GUI_Side
GUI_Side	.\GUI\GUI_Table.h	/^class	GUI_Side : public GUI_Pane, public GUI_Listener {$/;"	c
GUI_SimpleDataObject	.\GUI\GUI_Clipboard.cpp	/^GUI_SimpleDataObject::GUI_SimpleDataObject($/;"	f	class:GUI_SimpleDataObject
GUI_SimpleDataObject	.\GUI\GUI_Clipboard.h	/^class GUI_SimpleDataObject : public IDataObject {$/;"	c
GUI_SimpleEnumFORMATETC	.\GUI\GUI_Clipboard.cpp	/^GUI_SimpleEnumFORMATETC::GUI_SimpleEnumFORMATETC(GUI_SimpleDataObject * parent) :$/;"	f	class:GUI_SimpleEnumFORMATETC
GUI_SimpleEnumFORMATETC	.\GUI\GUI_Clipboard.cpp	/^GUI_SimpleEnumFORMATETC::GUI_SimpleEnumFORMATETC(const GUI_SimpleEnumFORMATETC& rhs) :$/;"	f	class:GUI_SimpleEnumFORMATETC
GUI_SimpleEnumFORMATETC	.\GUI\GUI_Clipboard.cpp	/^class	GUI_SimpleEnumFORMATETC : public IEnumFORMATETC {$/;"	c	file:
GUI_SimpleScroller	.\GUI\GUI_SimpleScroller.cpp	/^GUI_SimpleScroller::GUI_SimpleScroller()$/;"	f	class:GUI_SimpleScroller
GUI_SimpleScroller	.\GUI\GUI_SimpleScroller.h	/^class	GUI_SimpleScroller : public GUI_Pane, public GUI_ScrollerPaneContent, public GUI_Listener {$/;"	c
GUI_SimpleTableGeometry	.\GUI\GUI_SimpleTableGeometry.cpp	/^GUI_SimpleTableGeometry::GUI_SimpleTableGeometry($/;"	f	class:GUI_SimpleTableGeometry
GUI_SimpleTableGeometry	.\GUI\GUI_SimpleTableGeometry.h	/^class	GUI_SimpleTableGeometry : public GUI_TableGeometry {$/;"	c
GUI_Splitter	.\GUI\GUI_Splitter.cpp	/^GUI_Splitter::GUI_Splitter(int direction)$/;"	f	class:GUI_Splitter
GUI_Splitter	.\GUI\GUI_Splitter.h	/^class GUI_Splitter : public GUI_Pane {$/;"	c
GUI_TABCONTROL_H	.\GUI\GUI_TabControl.h	25;"	d
GUI_TABLE_CONTENT_CHANGED	.\GUI\GUI_Messages.h	/^	GUI_TABLE_CONTENT_CHANGED,						\/\/ Content of table changed but geometry the same (sent by content)$/;"	e	enum:__anon27
GUI_TABLE_CONTENT_RESIZED	.\GUI\GUI_Messages.h	/^	GUI_TABLE_CONTENT_RESIZED,						\/\/ Number of rows changed (sent by content - note - geometry MUST "know" the new size BEFORE this is sent!$/;"	e	enum:__anon27
GUI_TABLE_H	.\GUI\GUI_Table.h	25;"	d
GUI_TABLE_SHAPE_RESIZED	.\GUI\GUI_Messages.h	/^	GUI_TABLE_SHAPE_RESIZED,						\/\/ Column sizes have changed (sent by geometry)$/;"	e	enum:__anon27
GUI_TEXTFIELD_H	.\GUI\GUI_TextField.h	25;"	d
GUI_TEXTTABLE_H	.\GUI\GUI_TextTable.h	25;"	d
GUI_TEXT_FIELD_TEXT_CHANGED	.\GUI\GUI_Messages.h	/^	GUI_TEXT_FIELD_TEXT_CHANGED,$/;"	e	enum:__anon27
GUI_TIMER_H	.\GUI\GUI_Timer.h	25;"	d
GUI_TOOLBAR_H	.\GUI\GUI_ToolBar.h	25;"	d
GUI_TabControl	.\GUI\GUI_TabControl.cpp	/^GUI_TabControl::GUI_TabControl()$/;"	f	class:GUI_TabControl
GUI_TabControl	.\GUI\GUI_TabControl.h	/^class	GUI_TabControl : public GUI_Control {$/;"	c
GUI_TabPane	.\GUI\GUI_TabPane.cpp	/^GUI_TabPane::GUI_TabPane(GUI_Commander * parent) :$/;"	f	class:GUI_TabPane
GUI_TabPane	.\GUI\GUI_TabPane.h	/^class GUI_TabPane : public GUI_Packer, public GUI_Commander, public GUI_Listener {$/;"	c
GUI_TabPane_H	.\GUI\GUI_TabPane.h	25;"	d
GUI_Table	.\GUI\GUI_Table.cpp	/^GUI_Table::GUI_Table(int fill_right) :$/;"	f	class:GUI_Table
GUI_Table	.\GUI\GUI_Table.h	/^class	GUI_Table : public GUI_Pane, public GUI_Listener, public GUI_ScrollerPaneContent {$/;"	c
GUI_TableContent	.\GUI\GUI_Table.h	/^class	GUI_TableContent {$/;"	c
GUI_TableGeometry	.\GUI\GUI_Table.h	/^class	GUI_TableGeometry {$/;"	c
GUI_TableHeader	.\GUI\GUI_Table.h	/^class	GUI_TableHeader {$/;"	c
GUI_TableSide	.\GUI\GUI_Table.h	/^class	GUI_TableSide {$/;"	c
GUI_TexPosition_t	.\GUI\GUI_Resources.h	/^struct	GUI_TexPosition_t {$/;"	s
GUI_TextField	.\GUI\GUI_TextField.cpp	/^GUI_TextField::GUI_TextField(int scrollH, GUI_Commander * parent) :$/;"	f	class:GUI_TextField
GUI_TextField	.\GUI\GUI_TextField.h	/^class	GUI_TextField : public GUI_Pane,$/;"	c
GUI_TextTable	.\GUI\GUI_TextTable.cpp	/^GUI_TextTable::GUI_TextTable(GUI_Commander * parent, int indent, int live_edit) : GUI_Commander(parent),$/;"	f	class:GUI_TextTable
GUI_TextTable	.\GUI\GUI_TextTable.h	/^class	GUI_TextTable : public GUI_TableContent, public GUI_Broadcaster, public GUI_Commander, public GUI_Listener {$/;"	c
GUI_TextTableHeader	.\GUI\GUI_TextTable.cpp	/^GUI_TextTableHeader::GUI_TextTableHeader() : mContent(NULL), mGeometry(NULL)$/;"	f	class:GUI_TextTableHeader
GUI_TextTableHeader	.\GUI\GUI_TextTable.h	/^class	GUI_TextTableHeader : public GUI_TableHeader, public GUI_Broadcaster {$/;"	c
GUI_TextTableHeaderProvider	.\GUI\GUI_TextTable.h	/^class	GUI_TextTableHeaderProvider {$/;"	c
GUI_TextTableProvider	.\GUI\GUI_TextTable.h	/^class	GUI_TextTableProvider {$/;"	c
GUI_TextTableSide	.\GUI\GUI_TextTable.cpp	/^GUI_TextTableSide::GUI_TextTableSide() : mContent(NULL), mGeometry(NULL)$/;"	f	class:GUI_TextTableSide
GUI_TextTableSide	.\GUI\GUI_TextTable.h	/^class	GUI_TextTableSide : public GUI_TableSide, public GUI_Broadcaster {$/;"	c
GUI_TileToST	.\GUI\GUI_DrawUtils.cpp	/^void	GUI_TileToST($/;"	f
GUI_Timer	.\GUI\GUI_Timer.cpp	/^GUI_Timer::GUI_Timer(void)$/;"	f	class:GUI_Timer
GUI_Timer	.\GUI\GUI_Timer.h	/^class	GUI_Timer$/;"	c
GUI_ToolBar	.\GUI\GUI_ToolBar.cpp	/^GUI_ToolBar::GUI_ToolBar(int h, int v, const char * in_resource) :$/;"	f	class:GUI_ToolBar
GUI_ToolBar	.\GUI\GUI_ToolBar.h	/^class	GUI_ToolBar : public GUI_Control {$/;"	c
GUI_TruncateText	.\GUI\GUI_Fonts.cpp	/^void	GUI_TruncateText($/;"	f
GUI_Unicode_H	.\GUI\GUI_Unicode.h	25;"	d
GUI_UnloadResource	.\GUI\GUI_Resources.cpp	/^void			GUI_UnloadResource(GUI_Resource res)$/;"	f
GUI_VK_0	.\GUI\GUI_Defs.h	91;"	d
GUI_VK_1	.\GUI\GUI_Defs.h	92;"	d
GUI_VK_2	.\GUI\GUI_Defs.h	93;"	d
GUI_VK_3	.\GUI\GUI_Defs.h	94;"	d
GUI_VK_4	.\GUI\GUI_Defs.h	95;"	d
GUI_VK_5	.\GUI\GUI_Defs.h	96;"	d
GUI_VK_6	.\GUI\GUI_Defs.h	97;"	d
GUI_VK_7	.\GUI\GUI_Defs.h	98;"	d
GUI_VK_8	.\GUI\GUI_Defs.h	99;"	d
GUI_VK_9	.\GUI\GUI_Defs.h	100;"	d
GUI_VK_A	.\GUI\GUI_Defs.h	102;"	d
GUI_VK_ADD	.\GUI\GUI_Defs.h	139;"	d
GUI_VK_B	.\GUI\GUI_Defs.h	103;"	d
GUI_VK_BACK	.\GUI\GUI_Defs.h	69;"	d
GUI_VK_BACKQUOTE	.\GUI\GUI_Defs.h	180;"	d
GUI_VK_BACKSLASH	.\GUI\GUI_Defs.h	176;"	d
GUI_VK_C	.\GUI\GUI_Defs.h	104;"	d
GUI_VK_CLEAR	.\GUI\GUI_Defs.h	71;"	d
GUI_VK_COMMA	.\GUI\GUI_Defs.h	177;"	d
GUI_VK_D	.\GUI\GUI_Defs.h	105;"	d
GUI_VK_DECIMAL	.\GUI\GUI_Defs.h	142;"	d
GUI_VK_DELETE	.\GUI\GUI_Defs.h	88;"	d
GUI_VK_DIVIDE	.\GUI\GUI_Defs.h	143;"	d
GUI_VK_DOWN	.\GUI\GUI_Defs.h	82;"	d
GUI_VK_E	.\GUI\GUI_Defs.h	106;"	d
GUI_VK_END	.\GUI\GUI_Defs.h	77;"	d
GUI_VK_ENTER	.\GUI\GUI_Defs.h	181;"	d
GUI_VK_EQUAL	.\GUI\GUI_Defs.h	170;"	d
GUI_VK_ESCAPE	.\GUI\GUI_Defs.h	73;"	d
GUI_VK_EXECUTE	.\GUI\GUI_Defs.h	85;"	d
GUI_VK_F	.\GUI\GUI_Defs.h	107;"	d
GUI_VK_F1	.\GUI\GUI_Defs.h	144;"	d
GUI_VK_F10	.\GUI\GUI_Defs.h	153;"	d
GUI_VK_F11	.\GUI\GUI_Defs.h	154;"	d
GUI_VK_F12	.\GUI\GUI_Defs.h	155;"	d
GUI_VK_F13	.\GUI\GUI_Defs.h	156;"	d
GUI_VK_F14	.\GUI\GUI_Defs.h	157;"	d
GUI_VK_F15	.\GUI\GUI_Defs.h	158;"	d
GUI_VK_F16	.\GUI\GUI_Defs.h	159;"	d
GUI_VK_F17	.\GUI\GUI_Defs.h	160;"	d
GUI_VK_F18	.\GUI\GUI_Defs.h	161;"	d
GUI_VK_F19	.\GUI\GUI_Defs.h	162;"	d
GUI_VK_F2	.\GUI\GUI_Defs.h	145;"	d
GUI_VK_F20	.\GUI\GUI_Defs.h	163;"	d
GUI_VK_F21	.\GUI\GUI_Defs.h	164;"	d
GUI_VK_F22	.\GUI\GUI_Defs.h	165;"	d
GUI_VK_F23	.\GUI\GUI_Defs.h	166;"	d
GUI_VK_F24	.\GUI\GUI_Defs.h	167;"	d
GUI_VK_F3	.\GUI\GUI_Defs.h	146;"	d
GUI_VK_F4	.\GUI\GUI_Defs.h	147;"	d
GUI_VK_F5	.\GUI\GUI_Defs.h	148;"	d
GUI_VK_F6	.\GUI\GUI_Defs.h	149;"	d
GUI_VK_F7	.\GUI\GUI_Defs.h	150;"	d
GUI_VK_F8	.\GUI\GUI_Defs.h	151;"	d
GUI_VK_F9	.\GUI\GUI_Defs.h	152;"	d
GUI_VK_G	.\GUI\GUI_Defs.h	108;"	d
GUI_VK_H	.\GUI\GUI_Defs.h	109;"	d
GUI_VK_HELP	.\GUI\GUI_Defs.h	89;"	d
GUI_VK_HOME	.\GUI\GUI_Defs.h	78;"	d
GUI_VK_I	.\GUI\GUI_Defs.h	110;"	d
GUI_VK_INSERT	.\GUI\GUI_Defs.h	87;"	d
GUI_VK_J	.\GUI\GUI_Defs.h	111;"	d
GUI_VK_K	.\GUI\GUI_Defs.h	112;"	d
GUI_VK_L	.\GUI\GUI_Defs.h	113;"	d
GUI_VK_LBRACE	.\GUI\GUI_Defs.h	173;"	d
GUI_VK_LEFT	.\GUI\GUI_Defs.h	79;"	d
GUI_VK_M	.\GUI\GUI_Defs.h	114;"	d
GUI_VK_MINUS	.\GUI\GUI_Defs.h	171;"	d
GUI_VK_MULTIPLY	.\GUI\GUI_Defs.h	138;"	d
GUI_VK_N	.\GUI\GUI_Defs.h	115;"	d
GUI_VK_NEXT	.\GUI\GUI_Defs.h	76;"	d
GUI_VK_NUMPAD0	.\GUI\GUI_Defs.h	128;"	d
GUI_VK_NUMPAD1	.\GUI\GUI_Defs.h	129;"	d
GUI_VK_NUMPAD2	.\GUI\GUI_Defs.h	130;"	d
GUI_VK_NUMPAD3	.\GUI\GUI_Defs.h	131;"	d
GUI_VK_NUMPAD4	.\GUI\GUI_Defs.h	132;"	d
GUI_VK_NUMPAD5	.\GUI\GUI_Defs.h	133;"	d
GUI_VK_NUMPAD6	.\GUI\GUI_Defs.h	134;"	d
GUI_VK_NUMPAD7	.\GUI\GUI_Defs.h	135;"	d
GUI_VK_NUMPAD8	.\GUI\GUI_Defs.h	136;"	d
GUI_VK_NUMPAD9	.\GUI\GUI_Defs.h	137;"	d
GUI_VK_NUMPAD_ENT	.\GUI\GUI_Defs.h	182;"	d
GUI_VK_NUMPAD_EQ	.\GUI\GUI_Defs.h	183;"	d
GUI_VK_O	.\GUI\GUI_Defs.h	116;"	d
GUI_VK_P	.\GUI\GUI_Defs.h	117;"	d
GUI_VK_PERIOD	.\GUI\GUI_Defs.h	179;"	d
GUI_VK_PRINT	.\GUI\GUI_Defs.h	84;"	d
GUI_VK_PRIOR	.\GUI\GUI_Defs.h	75;"	d
GUI_VK_Q	.\GUI\GUI_Defs.h	118;"	d
GUI_VK_QUOTE	.\GUI\GUI_Defs.h	174;"	d
GUI_VK_R	.\GUI\GUI_Defs.h	119;"	d
GUI_VK_RBRACE	.\GUI\GUI_Defs.h	172;"	d
GUI_VK_RETURN	.\GUI\GUI_Defs.h	72;"	d
GUI_VK_RIGHT	.\GUI\GUI_Defs.h	81;"	d
GUI_VK_S	.\GUI\GUI_Defs.h	120;"	d
GUI_VK_SELECT	.\GUI\GUI_Defs.h	83;"	d
GUI_VK_SEMICOLON	.\GUI\GUI_Defs.h	175;"	d
GUI_VK_SEPARATOR	.\GUI\GUI_Defs.h	140;"	d
GUI_VK_SLASH	.\GUI\GUI_Defs.h	178;"	d
GUI_VK_SNAPSHOT	.\GUI\GUI_Defs.h	86;"	d
GUI_VK_SPACE	.\GUI\GUI_Defs.h	74;"	d
GUI_VK_SUBTRACT	.\GUI\GUI_Defs.h	141;"	d
GUI_VK_T	.\GUI\GUI_Defs.h	121;"	d
GUI_VK_TAB	.\GUI\GUI_Defs.h	70;"	d
GUI_VK_U	.\GUI\GUI_Defs.h	122;"	d
GUI_VK_UP	.\GUI\GUI_Defs.h	80;"	d
GUI_VK_V	.\GUI\GUI_Defs.h	123;"	d
GUI_VK_W	.\GUI\GUI_Defs.h	124;"	d
GUI_VK_X	.\GUI\GUI_Defs.h	125;"	d
GUI_VK_Y	.\GUI\GUI_Defs.h	126;"	d
GUI_VK_Z	.\GUI\GUI_Defs.h	127;"	d
GUI_WINDOW_H	.\GUI\GUI_Window.h	25;"	d
GUI_Window	.\GUI\GUI_Window.cpp	/^GUI_Window::GUI_Window(const char * inTitle, int inAttributes, const int inBounds[4], GUI_Commander * inCommander) : GUI_Commander(inCommander),$/;"	f	class:GUI_Window
GUI_Window	.\GUI\GUI_Window.h	/^class	GUI_Window : public XWinGL, public GUI_Pane, public GUI_Commander {$/;"	c
GUI_Window_DND	.\GUI\GUI_Window.cpp	/^GUI_Window_DND::GUI_Window_DND(GUI_Pane * inTarget, HWND inWindow) :$/;"	f	class:GUI_Window_DND
GUI_Window_DND	.\GUI\GUI_Window.cpp	/^class GUI_Window_DND : public IDropTarget {$/;"	c	file:
GaussianBlurDEM	.\XESCore\DEMAlgs.cpp	/^void GaussianBlurDEM(DEMGeo& dem, float sigma)$/;"	f
GenBoundary	.\XESCore\Airports.cpp	/^void	GenBoundary($/;"	f
GenFakeDSFFile	.\DSF\DSFLib_TestGen.cpp	/^void	GenFakeDSFFile(const char * path)$/;"	f
GenFakeDSFFile	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^void	GenFakeDSFFile(const char * path)$/;"	f
GenerateOGL	.\XESCore\AptIO.cpp	/^void	GenerateOGL(AptInfo_t * a)$/;"	f
GenerateTextures	.\UI\FontMgr.cpp	/^static void GenerateTextures	(int in1,	int* in2)	{glGenTextures(in1, (GLuint*)in2);}$/;"	f	file:
GenerateTextures	.\UI\FontMgr.h	/^	void (*GenerateTextures)(int n,			int* textures);$/;"	m	struct:FontFuncs
Get	.\SDTS\SDTSRead.cpp	/^void			SDTSModuleIterator::Get(sc_Record& outRecord)$/;"	f	class:SDTSModuleIterator
GetAGP	.\WEDCore\WED_ResourceMgr.cpp	/^bool	WED_ResourceMgr::GetAGP(const string& path, agp_t& out_info)$/;"	f	class:WED_ResourceMgr
GetActive	.\UI\XWin.lin.cpp	/^bool XWin::GetActive(void) const$/;"	f	class:XWin
GetActive	.\UI\XWin.win.cpp	/^bool			XWin::GetActive(void) const$/;"	f	class:XWin
GetAdapter	.\WEDLibrary\WED_LibraryPane.h	/^	WED_LibraryListAdapter *	GetAdapter(void) { return &mLibraryList; }$/;"	f	class:WED_LibraryPane
GetAddresses	.\Network\PCSBSocket.lin.cpp	/^void PCSBSocket::GetAddresses(ConnectionData* dataStruct)$/;"	f	class:PCSBSocket
GetAddresses	.\Network\PCSBSocket.win.cpp	/^void PCSBSocket::GetAddresses(ConnectionData* dataStruct)$/;"	f	class:PCSBSocket
GetAirportIconRadius	.\WEDMap\WED_MapLayer.cpp	/^double		WED_MapLayer::GetAirportIconRadius(void) const$/;"	f	class:WED_MapLayer
GetAirportIconScale	.\WEDMap\WED_MapLayer.cpp	/^double		WED_MapLayer::GetAirportIconScale(void) const$/;"	f	class:WED_MapLayer
GetAirportTransWidth	.\WEDMap\WED_MapLayer.h	/^	inline	int					GetAirportTransWidth(void) const { return mAirportTransWidth; }$/;"	f	class:WED_MapLayer
GetAirportType	.\WEDEntities\WED_Airport.cpp	/^int		WED_Airport::GetAirportType(void) const$/;"	f	class:WED_Airport
GetAllModuleNames	.\SDTS\SDTSRead.cpp	/^void	SDTSDirectory::GetAllModuleNames(vector<string>& outNames)$/;"	f	class:SDTSDirectory
GetAllViewers	.\WEDEntities\WED_Thing.cpp	/^void WED_Thing::GetAllViewers(set<WED_Thing *>& out_viewers) const$/;"	f	class:WED_Thing
GetAlpha	.\WEDEntities\WED_OverlayImage.cpp	/^double		WED_OverlayImage::GetAlpha(void) const$/;"	f	class:WED_OverlayImage
GetAnchor1	.\WEDMap\WED_MapToolNew.cpp	/^bool				WED_MapToolNew::GetAnchor1(Point2& a)	{ if (has_anchor1 ) a = anchor1 ; return has_anchor1 ; }$/;"	f	class:WED_MapToolNew
GetAnchor2	.\WEDMap\WED_MapToolNew.cpp	/^bool				WED_MapToolNew::GetAnchor2(Point2& a)	{ if (has_anchor2 ) a = anchor2 ; return has_anchor2 ; }$/;"	f	class:WED_MapToolNew
GetAnimParam	.\Obj\ObjDraw.h	/^	float (* GetAnimParam)(const char * string, float v1, float v2, void * ref);$/;"	m	struct:ObjDrawFuncs10_t
GetApplicationPath	.\Utils\PlatformUtils.lin.cpp	/^const char* GetApplicationPath(char* pathBuf, int sz)$/;"	f
GetApplicationPath	.\Utils\PlatformUtils.win.cpp	/^const char * GetApplicationPath(char * pathBuf, int sz)$/;"	f
GetAptPOI	.\XESCore\AptAlgs.cpp	/^void GetAptPOI(const AptInfo_t * a, vector<Point2>& poi)$/;"	f
GetAptPolygons	.\XESCore\AptAlgs.cpp	/^void	GetAptPolygons($/;"	f
GetArchive	.\WEDCore\WED_Document.cpp	/^WED_Archive *		WED_Document::GetArchive(void)$/;"	f	class:WED_Document
GetArchive	.\WEDCore\WED_Persistent.h	/^			WED_Archive *	GetArchive(void) const 				{ return mArchive;	}$/;"	f	class:WED_Persistent
GetArchive	.\WEDMap\WED_CreateToolBase.h	/^		inline WED_Archive * GetArchive(void) { return mArchive; }$/;"	f	class:WED_CreateToolBase
GetArraySize	.\Utils\XChunkyFileUtils.cpp	/^int	XAtomPlanerNumericTable::GetArraySize(void)$/;"	f	class:XAtomPlanerNumericTable
GetAttributes	.\WEDEntities\WED_AirportNode.cpp	/^void		WED_AirportNode::GetAttributes(set<int>& out_attrs) const$/;"	f	class:WED_AirportNode
GetBest	.\XESCore\DEMDefs.cpp	/^	float	GetBest(void) const { return (best == -1) ? DEM_NO_DATA : values[best]; }$/;"	f	struct:HistoHelper
GetBezierLocation	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::GetBezierLocation  (GISLayer_t l, BezierPoint2& p) const$/;"	f	class:WED_GISPoint_Bezier
GetBlas1	.\WEDEntities\WED_Runway.cpp	/^double		WED_Runway::GetBlas1(void) const { return blas1.value; }$/;"	f	class:WED_Runway
GetBlas2	.\WEDEntities\WED_Runway.cpp	/^double		WED_Runway::GetBlas2(void) const { return blas2.value; }$/;"	f	class:WED_Runway
GetBoneName	.\Utils\XCarBoneUtils.cpp	/^string		XCarBones::GetBoneName(void * v)$/;"	f	class:XCarBones
GetBounds	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::GetBounds(int outBounds[4])$/;"	f	class:GUI_Pane
GetBounds	.\UI\XWin.lin.cpp	/^void XWin::GetBounds(int * outX, int * outY)$/;"	f	class:XWin
GetBounds	.\UI\XWin.win.cpp	/^void			XWin::GetBounds(int * outX, int * outY)$/;"	f	class:XWin
GetBounds	.\WEDCore\WED_Document.cpp	/^void		WED_Document::GetBounds(double bounds[4])$/;"	f	class:WED_Document
GetBounds	.\WEDEntities\WED_GISBoundingBox.cpp	/^void			WED_GISBoundingBox::GetBounds		(GISLayer_t l,   Bbox2&  bounds) const$/;"	f	class:WED_GISBoundingBox
GetBounds	.\WEDEntities\WED_GISChain.cpp	/^void			WED_GISChain::GetBounds		(GISLayer_t l, Bbox2&  bounds) const$/;"	f	class:WED_GISChain
GetBounds	.\WEDEntities\WED_GISComposite.cpp	/^void			WED_GISComposite::GetBounds		(GISLayer_t l, Bbox2&  bounds) const$/;"	f	class:WED_GISComposite
GetBounds	.\WEDEntities\WED_GISEdge.cpp	/^void			WED_GISEdge::GetBounds		(GISLayer_t l, Bbox2&  bounds) const$/;"	f	class:WED_GISEdge
GetBounds	.\WEDEntities\WED_GISLine.cpp	/^void			WED_GISLine::GetBounds		(GISLayer_t l,Bbox2&  bounds) const$/;"	f	class:WED_GISLine
GetBounds	.\WEDEntities\WED_GISLine_Width.cpp	/^void			WED_GISLine_Width::GetBounds		(GISLayer_t l,  Bbox2&  bounds) const$/;"	f	class:WED_GISLine_Width
GetBounds	.\WEDEntities\WED_GISPoint.cpp	/^void			WED_GISPoint::GetBounds		(GISLayer_t l,Bbox2&  bounds) const$/;"	f	class:WED_GISPoint
GetBounds	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void			WED_GISPoint_HeadingWidthLength::GetBounds		(GISLayer_t l,   Bbox2&  bounds) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
GetBounds	.\WEDEntities\WED_GISPolygon.cpp	/^void			WED_GISPolygon::GetBounds		(GISLayer_t l,Bbox2&  bounds) const$/;"	f	class:WED_GISPolygon
GetBucketForEdge	.\RenderFarmUI\RF_MapView.cpp	/^inline	int GetBucketForEdge(Bbox2 * buckets, int bucket_count, CDT::Finite_edges_iterator eit)$/;"	f
GetBucketForFace	.\RenderFarmUI\RF_MapView.cpp	/^inline	int GetBucketForFace(Bbox2 * buckets, int bucket_count, CDT::Face_handle f)$/;"	f
GetBuoys	.\WEDEntities\WED_Sealane.h	/^	int			GetBuoys(void) const { return buoys.value; }$/;"	f	class:WED_Sealane
GetCamAlt	.\WEDNetwork\WED_NWLinkAdapter.h	/^                float   GetCamAlt(){return mCamera.alt;}$/;"	f	class:WED_NWLinkAdapter
GetCamHdg	.\WEDNetwork\WED_NWLinkAdapter.h	/^                float   GetCamHdg(){return mCamera.heading;}$/;"	f	class:WED_NWLinkAdapter
GetCamLat	.\WEDNetwork\WED_NWLinkAdapter.h	/^				double  GetCamLat(){return mCamera.lat;}$/;"	f	class:WED_NWLinkAdapter
GetCamLon	.\WEDNetwork\WED_NWLinkAdapter.h	/^				double  GetCamLon(){return mCamera.lon;}$/;"	f	class:WED_NWLinkAdapter
GetCamPit	.\WEDNetwork\WED_NWLinkAdapter.h	/^                float   GetCamPit(){return mCamera.pitch;}$/;"	f	class:WED_NWLinkAdapter
GetCanonicalFormatEtc	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::GetCanonicalFormatEtc	(FORMATETC *format_in, FORMATETC  *format_out)$/;"	f	class:GUI_SimpleDataObject
GetCaps	.\WEDCore\WED_TCEDebugLayer.cpp	/^void	WED_TCEDebugLayer::GetCaps(bool& draw_ent_v, bool& draw_ent_s)$/;"	f	class:WED_TCEDebugLayer
GetCaps	.\WEDMap\WED_DebugLayer.cpp	/^void	WED_DebugLayer::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_DebugLayer
GetCaps	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_HandleToolBase
GetCaps	.\WEDMap\WED_MapBkgnd.cpp	/^void		WED_MapBkgnd::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_MapBkgnd
GetCaps	.\WEDMap\WED_PreviewLayer.cpp	/^void		WED_PreviewLayer::GetCaps						(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_PreviewLayer
GetCaps	.\WEDMap\WED_StructureLayer.cpp	/^void		WED_StructureLayer::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_StructureLayer
GetCaps	.\WEDMap\WED_TerraserverLayer.cpp	/^void		WED_TerraserverLayer::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_TerraserverLayer
GetCaps	.\WEDMap\WED_WorldMapLayer.cpp	/^void		WED_WorldMapLayer::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_WorldMapLayer
GetCaps	.\WEDNetwork\WED_NWInfoLayer.cpp	/^void	WED_NWInfoLayer::GetCaps(bool& draw_ent_v, bool& draw_ent_s, bool& cares_about_sel, bool& wants_clicks)$/;"	f	class:WED_NWInfoLayer
GetCaps	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::GetCaps(bool& draw_ent_v, bool& draw_ent_s)$/;"	f	class:WED_TCEToolAdapter
GetCellBottom	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::GetCellBottom(int n)$/;"	f	class:GUI_SimpleTableGeometry
GetCellBottom	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetCellBottom(int n)$/;"	f	class:WED_ToolInfoAdapter
GetCellBottom	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetCellBottom(int n)$/;"	f	class:WED_PackageListAdapter
GetCellContent	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::GetCellContent($/;"	f	class:WED_AptTable
GetCellContent	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::GetCellContent($/;"	f	class:WED_ICAOTable
GetCellContent	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::GetCellContent($/;"	f	class:WED_VerTable
GetCellContent	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::GetCellContent($/;"	f	class:WED_LibraryListAdapter
GetCellContent	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::GetCellContent($/;"	f	class:WED_ToolInfoAdapter
GetCellContent	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::GetCellContent($/;"	f	class:WED_PropertyTable
GetCellContent	.\WEDWindows\WED_FilterBar.cpp	/^void	WED_FilterBar::GetCellContent($/;"	f	class:WED_FilterBar
GetCellContent	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::GetCellContent($/;"	f	class:WED_PackageListAdapter
GetCellDimensions	.\ObjEdit\OE_TablePane.cpp	/^void	OE_TablePane::GetCellDimensions($/;"	f	class:OE_TablePane
GetCellDragPart	.\GUI\GUI_TextTable.cpp	/^GUI_TextTable::GUI_DragPart	GUI_TextTable::GetCellDragPart(int cell_bounds[4], int x, int y, int vertical)$/;"	f	class:GUI_TextTable
GetCellHeight	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::GetCellHeight(int n)$/;"	f	class:GUI_SimpleTableGeometry
GetCellHeight	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetCellHeight(int n)$/;"	f	class:WED_ToolInfoAdapter
GetCellHeight	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetCellHeight(int n)$/;"	f	class:WED_PackageListAdapter
GetCellLeft	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::GetCellLeft (int n)$/;"	f	class:GUI_SimpleTableGeometry
GetCellLeft	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetCellLeft (int n)$/;"	f	class:WED_ToolInfoAdapter
GetCellLeft	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetCellLeft (int n)$/;"	f	class:WED_PackageListAdapter
GetCellRight	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::GetCellRight(int n)$/;"	f	class:GUI_SimpleTableGeometry
GetCellRight	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetCellRight(int n)$/;"	f	class:WED_ToolInfoAdapter
GetCellRight	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetCellRight(int n)$/;"	f	class:WED_PackageListAdapter
GetCellTop	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::GetCellTop	 (int n)$/;"	f	class:GUI_SimpleTableGeometry
GetCellTop	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetCellTop	 (int n)$/;"	f	class:WED_ToolInfoAdapter
GetCellTop	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetCellTop	 (int n)$/;"	f	class:WED_PackageListAdapter
GetCellWidth	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::GetCellWidth(int n)$/;"	f	class:GUI_SimpleTableGeometry
GetCellWidth	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetCellWidth(int n)$/;"	f	class:WED_ToolInfoAdapter
GetCellWidth	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetCellWidth(int n)$/;"	f	class:WED_PackageListAdapter
GetCenter	.\WEDEntities\WED_GISLine_Width.cpp	/^Point2		WED_GISLine_Width::GetCenter(void) const$/;"	f	class:WED_GISLine_Width
GetChance	.\XPTools\AddObjects.cpp	/^double	GroupNode::GetChance(void)$/;"	f	class:GroupNode
GetChance	.\XPTools\AddObjects.cpp	/^double	ObjectNode::GetChance(void)$/;"	f	class:ObjectNode
GetChance	.\XPTools\AddObjects.cpp	/^double	SwitchNode::GetChance(void)$/;"	f	class:SwitchNode
GetChangeMask	.\WEDCore\WED_UndoLayer.h	/^		int		GetChangeMask(void) { return mChangeMask; }$/;"	f	class:WED_UndoLayer
GetChildren	.\Utils\XCarBoneUtils.cpp	/^void		XCarBones::GetChildren(void * p, vector<void *>& c)$/;"	f	class:XCarBones
GetClickRadius	.\WEDMap\WED_MapZoomerNew.cpp	/^double WED_MapZoomerNew::GetClickRadius(double p)$/;"	f	class:WED_MapZoomerNew
GetClosed	.\WEDProperties\WED_PropertyTable.cpp	/^void WED_PropertyTable::GetClosed(set<int>& closed_list)$/;"	f	class:WED_PropertyTable
GetCmdParent	.\GUI\GUI_Commander.cpp	/^GUI_Commander * GUI_Commander::GetCmdParent(void) { return mCmdParent; }$/;"	f	class:GUI_Commander
GetColCount	.\ObjEdit\OE_PatchList.cpp	/^int		OE_PatchTable::GetColCount(void)$/;"	f	class:OE_PatchTable
GetColCount	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::GetColCount(void)$/;"	f	class:WED_AptTable
GetColCount	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::GetColCount(void)$/;"	f	class:WED_ICAOTable
GetColCount	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::GetColCount(void)$/;"	f	class:WED_VerTable
GetColCount	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::GetColCount(void)$/;"	f	class:WED_LibraryListAdapter
GetColCount	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetColCount(void)$/;"	f	class:WED_ToolInfoAdapter
GetColCount	.\WEDProperties\WED_PropertyTable.cpp	/^int			WED_PropertyTable::GetColCount(void)$/;"	f	class:WED_PropertyTable
GetColCount	.\WEDWindows\WED_FilterBar.cpp	/^int			WED_FilterBar::GetColCount(void)$/;"	f	class:WED_FilterBar
GetColCount	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetColCount(void)$/;"	f	class:WED_PackageListAdapter
GetColRight	.\ObjEdit\OE_PatchList.cpp	/^int		OE_PatchTable::GetColRight(int col)$/;"	f	class:OE_PatchTable
GetColorForAlt	.\RenderFarmUI\RF_DEMGraphics.cpp	/^void	GetColorForAlt(float alt, unsigned char col[3])$/;"	f
GetColorForLU	.\RenderFarmUI\RF_DEMGraphics.cpp	/^void GetColorForLU(float alt, unsigned char col[3])$/;"	f
GetColorForParam	.\RenderFarmUI\RF_DEMGraphics.cpp	/^void	GetColorForParam(float	v, float mapping[][4], int num_bands, unsigned char col[3])$/;"	f
GetColorForTable	.\RenderFarmUI\RF_DEMGraphics.cpp	/^void	GetColorForTable(float v, ColorBandMap& table, unsigned char col[3])$/;"	f
GetColumnByName	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::GetColumnByName(const string& inName) const$/;"	f	class:VPF_TableDef
GetContentLength	.\Utils\XChunkyFileUtils.cpp	/^uint32_t	XAtom::GetContentLength(void)$/;"	f	class:XAtom
GetContentLengthWithHeader	.\Utils\XChunkyFileUtils.cpp	/^uint32_t	XAtom::GetContentLengthWithHeader(void)$/;"	f	class:XAtom
GetContents	.\Network\XMLObject.cpp	/^void	XMLObject::GetContents(std::string& outContents)$/;"	f	class:XMLObject
GetContents	.\Utils\XChunkyFileUtils.cpp	/^void			XAtom::GetContents(XSpan& outContents)$/;"	f	class:XAtom
GetContentsDouble	.\Network\XMLObject.cpp	/^double			XMLObject::GetContentsDouble(void)$/;"	f	class:XMLObject
GetContentsInt	.\Network\XMLObject.cpp	/^int			XMLObject::GetContentsInt(void)$/;"	f	class:XMLObject
GetControlHandleHi	.\WEDEntities\WED_FacadeNode.cpp	/^bool	WED_FacadeNode::GetControlHandleHi (GISLayer_t l,       Point2& p) const$/;"	f	class:WED_FacadeNode
GetControlHandleHi	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^bool	WED_GISPoint_Bezier::GetControlHandleHi (GISLayer_t l,       Point2& p) const$/;"	f	class:WED_GISPoint_Bezier
GetControlHandleHi	.\WEDEntities\WED_TextureBezierNode.cpp	/^bool	WED_TextureBezierNode::GetControlHandleHi (GISLayer_t layer,      Point2& p) const$/;"	f	class:WED_TextureBezierNode
GetControlHandleLo	.\WEDEntities\WED_FacadeNode.cpp	/^bool	WED_FacadeNode::GetControlHandleLo (GISLayer_t l,       Point2& p) const$/;"	f	class:WED_FacadeNode
GetControlHandleLo	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^bool	WED_GISPoint_Bezier::GetControlHandleLo (GISLayer_t l,       Point2& p) const$/;"	f	class:WED_GISPoint_Bezier
GetControlHandleLo	.\WEDEntities\WED_TextureBezierNode.cpp	/^bool	WED_TextureBezierNode::GetControlHandleLo (GISLayer_t layer,      Point2& p) const$/;"	f	class:WED_TextureBezierNode
GetCoords	.\Network\Terraserver.cpp	/^bool			AsyncImage::GetCoords(double	coords[4][2])$/;"	f	class:AsyncImage
GetCorners	.\WEDEntities\WED_GISBoundingBox.cpp	/^void	WED_GISBoundingBox::GetCorners(GISLayer_t l,Point2 corners[4]) const$/;"	f	class:WED_GISBoundingBox
GetCorners	.\WEDEntities\WED_GISLine_Width.cpp	/^void	WED_GISLine_Width::GetCorners(GISLayer_t l,  Point2 corners[4]) const$/;"	f	class:WED_GISLine_Width
GetCorners	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::GetCorners(GISLayer_t l,Point2 corners[4]) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
GetCorners	.\WEDEntities\WED_OverlayImage.cpp	/^void	WED_OverlayImage::GetCorners(GISLayer_t l,Point2 corners[4]) const$/;"	f	class:WED_OverlayImage
GetCornersBlas1	.\WEDEntities\WED_Runway.cpp	/^bool		WED_Runway::GetCornersBlas1(Point2 corners[4]) const$/;"	f	class:WED_Runway
GetCornersBlas2	.\WEDEntities\WED_Runway.cpp	/^bool		WED_Runway::GetCornersBlas2(Point2 corners[4]) const$/;"	f	class:WED_Runway
GetCornersDisp1	.\WEDEntities\WED_Runway.cpp	/^bool		WED_Runway::GetCornersDisp1(Point2 corners[4]) const$/;"	f	class:WED_Runway
GetCornersDisp2	.\WEDEntities\WED_Runway.cpp	/^bool		WED_Runway::GetCornersDisp2(Point2 corners[4]) const$/;"	f	class:WED_Runway
GetCornersShoulders	.\WEDEntities\WED_Runway.cpp	/^bool		WED_Runway::GetCornersShoulders(Point2 corners[8]) const$/;"	f	class:WED_Runway
GetCurPak	.\WEDWindows\WED_FilterBar.h	/^			string		GetCurPak(void) {return mCurPak;}$/;"	f	class:WED_FilterBar
GetCurrentDragHandle	.\Utils\UIUtils.cpp	/^int			DragHandleSet::GetCurrentDragHandle(void)$/;"	f	class:DragHandleSet
GetCursor	.\GUI\GUI_Pane.h	/^	virtual	int			GetCursor(int x, int y) { return gui_Cursor_None; }$/;"	f	class:GUI_Pane
GetCursor	.\GUI\GUI_Splitter.cpp	/^int			GUI_Splitter::GetCursor(int x, int y)$/;"	f	class:GUI_Splitter
GetCursor	.\GUI\GUI_Table.cpp	/^int		GUI_Header::GetCursor(int x, int y)$/;"	f	class:GUI_Header
GetCursor	.\GUI\GUI_Table.cpp	/^int		GUI_Side::GetCursor(int x, int y)$/;"	f	class:GUI_Side
GetCursor	.\GUI\GUI_Table.cpp	/^int		GUI_Table::GetCursor(int x, int y)$/;"	f	class:GUI_Table
GetCustomMSL	.\WEDEntities\WED_ObjPlacement.cpp	/^double		WED_ObjPlacement::GetCustomMSL(void) const$/;"	f	class:WED_ObjPlacement
GetDC	.\UI\XWinGL.win.cpp	/^HDC				XWinGL::GetDC(void)$/;"	f	class:XWinGL
GetData	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::GetData				(FORMATETC * format, STGMEDIUM * medium)$/;"	f	class:GUI_SimpleDataObject
GetData	.\Network\HTTPClient.cpp	/^int		HTTPRequest::GetData(void * outBuffer, int inSize)$/;"	f	class:HTTPRequest
GetData	.\Network\HTTPClient.cpp	/^void	HTTPRequest::GetData(vector<char>& foo)$/;"	f	class:HTTPRequest
GetData	.\WEDNetwork\WED_Server.cpp	/^int WED_Server::GetData(vector<string>& outData)$/;"	f	class:WED_Server
GetDataHere	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::GetDataHere			(FORMATETC * format, STGMEDIUM * medium)$/;"	f	class:GUI_SimpleDataObject
GetDeboneMatrix	.\Utils\XCarBoneUtils.cpp	/^void		XCarBones::GetDeboneMatrix(void * who, double m[16])$/;"	f	class:XCarBones
GetDensity	.\WEDEntities\WED_ForestPlacement.cpp	/^double WED_ForestPlacement::GetDensity(void) const$/;"	f	class:WED_ForestPlacement
GetDescriptor	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::GetDescriptor(string& outDesc) const$/;"	f	class:GUI_Pane
GetDirty	.\WEDCore\WED_Persistent.cpp	/^int			WED_Persistent::GetDirty(void) const$/;"	f	class:WED_Persistent
GetDisp1	.\WEDEntities\WED_Runway.cpp	/^double		WED_Runway::GetDisp1(void) const { return disp1.value; }$/;"	f	class:WED_Runway
GetDisp2	.\WEDEntities\WED_Runway.cpp	/^double		WED_Runway::GetDisp2(void) const { return disp2.value; }$/;"	f	class:WED_Runway
GetDistance	.\WEDMap\WED_MapToolNew.cpp	/^bool				WED_MapToolNew::GetDistance(double& d)	{ if (has_distance) d = distance; return has_distance; }$/;"	f	class:WED_MapToolNew
GetEnd	.\Utils\GISUtils.cpp	/^	unsigned char * GetEnd()$/;"	f	struct:MemJASGeoFile
GetEntityInternal	.\WEDMap\WED_VertexTool.cpp	/^void WED_VertexTool::GetEntityInternal(void) const$/;"	f	class:WED_VertexTool
GetEnumDictionary	.\WEDImportExport\WED_AptTable.h	/^	virtual	void	GetEnumDictionary($/;"	f	class:WED_AptTable
GetEnumDictionary	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	void	GetEnumDictionary($/;"	f	class:WED_ICAOTable
GetEnumDictionary	.\WEDImportExport\WED_VerTable.h	/^	virtual	void	GetEnumDictionary($/;"	f	class:WED_VerTable
GetEnumDictionary	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::GetEnumDictionary($/;"	f	class:WED_LibraryListAdapter
GetEnumDictionary	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::GetEnumDictionary($/;"	f	class:WED_ToolInfoAdapter
GetEnumDictionary	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::GetEnumDictionary($/;"	f	class:WED_PropertyTable
GetEnumDictionary	.\WEDWindows\WED_FilterBar.cpp	/^void	WED_FilterBar::GetEnumDictionary($/;"	f	class:WED_FilterBar
GetEnumDictionary	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::GetEnumDictionary($/;"	f	class:WED_PackageListAdapter
GetExclusions	.\WEDEntities\WED_ExclusionZone.cpp	/^void		WED_ExclusionZone::GetExclusions(set<int>& out_exclusions) const$/;"	f	class:WED_ExclusionZone
GetExtentAll	.\WEDMap\WED_MapPane.cpp	/^static void GetExtentAll(Bbox2& box, IResolver * resolver)$/;"	f	file:
GetExtentSel	.\WEDMap\WED_MapPane.cpp	/^static void GetExtentSel(Bbox2& box, IResolver * resolver)$/;"	f	file:
GetFac	.\WEDCore\WED_ResourceMgr.cpp	/^bool	WED_ResourceMgr::GetFac(const string& path, fac_info_t& out_info)$/;"	f	class:WED_ResourceMgr
GetFacadeRule	.\XESCore\Zoning.cpp	/^FacadeSpelling_t * GetFacadeRule(int zoning, int variant, double front_wall_len, double height, double depth_one_fac)$/;"	f
GetField	.\GUI\GUI_FormWindow.cpp	/^string		GUI_FormWindow::GetField($/;"	f	class:GUI_FormWindow
GetFieldCount	.\VPF\VPFTable.cpp	/^int		VPFTableIterator::GetFieldCount(void)$/;"	f	class:VPFTableIterator
GetFile	.\WEDCore\WED_UndoLayer.h	/^		const char * GetFile(void) const { return mFile; }$/;"	f	class:WED_UndoLayer
GetFileBlockSizeIfExists	.\Installer\XFileTwiddle.unix.cpp	/^int		GetFileBlockSizeIfExists(const char * inPath)$/;"	f
GetFileBlockSizeIfExists	.\Installer\XFileTwiddle.win.cpp	/^int		GetFileBlockSizeIfExists(const char * inPath)$/;"	f
GetFileBlockSizeIfExists	.\Utils\XFileTwiddle.mac.cpp	/^int		GetFileBlockSizeIfExists(const char * inPath)$/;"	f
GetFileBlockSizeIfExists	.\Utils\XFileTwiddle.unix.cpp	/^int		GetFileBlockSizeIfExists(const char * inPath)$/;"	f
GetFileBlockSizeIfExists	.\Utils\XFileTwiddle.win.cpp	/^int		GetFileBlockSizeIfExists(const char * inPath)$/;"	f
GetFileMD5	.\Installer\InstallerProcs.cpp	/^bool	GetFileMD5(const char * inPath, MD5_Sig& outSig)$/;"	f
GetFileNameArg	.\XESTools\GISTool copy.cpp	/^const char * GetFileNameArg(int& index, int argc, char * argv[])$/;"	f
GetFilePath	.\WEDCore\WED_Document.cpp	/^string				WED_Document::GetFilePath(void) const$/;"	f	class:WED_Document
GetFilePathFromUser	.\Utils\PlatformUtils.lin.cpp	/^int		GetFilePathFromUser($/;"	f
GetFilePathFromUser	.\Utils\PlatformUtils.win.cpp	/^int		GetFilePathFromUser($/;"	f
GetFillMode	.\WEDEntities\WED_ForestPlacement.cpp	/^int			WED_ForestPlacement::GetFillMode(void) const$/;"	f	class:WED_ForestPlacement
GetFillRuleForBlock	.\XESCore\Zoning.cpp	/^FillRule_t * GetFillRuleForBlock(Pmwx::Face_handle f)$/;"	f
GetFilterStatus	.\WEDProperties\WED_PropertyTable.cpp	/^void		WED_PropertyTable::GetFilterStatus(WED_Thing * what, ISelection * sel,$/;"	f	class:WED_PropertyTable
GetFirst	.\Utils\XChunkyFileUtils.cpp	/^bool	XAtomContainer::GetFirst(XAtom& outAtom)$/;"	f	class:XAtomContainer
GetFirstString	.\Utils\XChunkyFileUtils.cpp	/^const char *	XAtomStringTable::GetFirstString(void)$/;"	f	class:XAtomStringTable
GetFlowDir	.\XESCore\Hydro.cpp	/^inline int	GetFlowDir(float e[DIRS_COUNT+1])$/;"	f
GetFocusForCommander	.\GUI\GUI_Commander.cpp	/^GUI_Commander *	GUI_Commander::GetFocusForCommander(void)$/;"	f	class:GUI_Commander
GetForkSizes	.\Utils\MacSpec.cpp	/^int		GetForkSizes(const char * inPath, long& outDF, long& outRF)$/;"	f
GetFrustumBounds	.\Utils\HLCamera.cpp	/^void		xcam_class::GetFrustumBounds(GLdouble	outMin[3], GLdouble outMax[3])$/;"	f	class:xcam_class
GetFurnitureIconRadius	.\WEDMap\WED_MapLayer.cpp	/^double		WED_MapLayer::GetFurnitureIconRadius(void) const$/;"	f	class:WED_MapLayer
GetFurnitureIconScale	.\WEDMap\WED_MapLayer.cpp	/^double		WED_MapLayer::GetFurnitureIconScale(void) const$/;"	f	class:WED_MapLayer
GetGISBase	.\WEDMap\WED_Map.cpp	/^IGISEntity *	WED_Map::GetGISBase()$/;"	f	class:WED_Map
GetGISBase	.\WEDTCE\WED_TCE.cpp	/^IGISEntity *	WED_TCE::GetGISBase()$/;"	f	class:WED_TCE
GetGISClass	.\WEDEntities\WED_GISBoundingBox.cpp	/^GISClass_t		WED_GISBoundingBox::GetGISClass		(void				 ) const$/;"	f	class:WED_GISBoundingBox
GetGISClass	.\WEDEntities\WED_GISChain.cpp	/^GISClass_t		WED_GISChain::GetGISClass		(void				 ) const$/;"	f	class:WED_GISChain
GetGISClass	.\WEDEntities\WED_GISComposite.cpp	/^GISClass_t		WED_GISComposite::GetGISClass		(void				 ) const$/;"	f	class:WED_GISComposite
GetGISClass	.\WEDEntities\WED_GISEdge.cpp	/^GISClass_t		WED_GISEdge::GetGISClass		(void				 ) const$/;"	f	class:WED_GISEdge
GetGISClass	.\WEDEntities\WED_GISLine.cpp	/^GISClass_t		WED_GISLine::GetGISClass		(void				 ) const$/;"	f	class:WED_GISLine
GetGISClass	.\WEDEntities\WED_GISLine_Width.cpp	/^GISClass_t		WED_GISLine_Width::GetGISClass		(void				 ) const$/;"	f	class:WED_GISLine_Width
GetGISClass	.\WEDEntities\WED_GISPoint.cpp	/^GISClass_t		WED_GISPoint::GetGISClass		(void				 ) const$/;"	f	class:WED_GISPoint
GetGISClass	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^GISClass_t		WED_GISPoint_Bezier::GetGISClass		(void				 ) const$/;"	f	class:WED_GISPoint_Bezier
GetGISClass	.\WEDEntities\WED_GISPoint_Heading.cpp	/^GISClass_t		WED_GISPoint_Heading::GetGISClass		(void				 ) const$/;"	f	class:WED_GISPoint_Heading
GetGISClass	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^GISClass_t	WED_GISPoint_HeadingWidthLength::GetGISClass		(void				 ) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
GetGISClass	.\WEDEntities\WED_GISPolygon.cpp	/^GISClass_t		WED_GISPolygon::GetGISClass		(void				 ) const$/;"	f	class:WED_GISPolygon
GetGISSubtype	.\WEDEntities\WED_GISBoundingBox.cpp	/^const char *	WED_GISBoundingBox::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISBoundingBox
GetGISSubtype	.\WEDEntities\WED_GISChain.cpp	/^const char *	WED_GISChain::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISChain
GetGISSubtype	.\WEDEntities\WED_GISComposite.cpp	/^const char *	WED_GISComposite::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISComposite
GetGISSubtype	.\WEDEntities\WED_GISEdge.cpp	/^const char *	WED_GISEdge::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISEdge
GetGISSubtype	.\WEDEntities\WED_GISLine.cpp	/^const char *	WED_GISLine::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISLine
GetGISSubtype	.\WEDEntities\WED_GISPoint.cpp	/^const char *	WED_GISPoint::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISPoint
GetGISSubtype	.\WEDEntities\WED_GISPolygon.cpp	/^const char *	WED_GISPolygon::GetGISSubtype	(void				 ) const$/;"	f	class:WED_GISPolygon
GetGen	.\Network\TerraServer.h	/^	int				GetGen(void) { return mGen; }$/;"	f	class:AsyncImage
GetHandleRadius	.\ObjEdit\OE_TexEdWindow.cpp	/^float		OE_TexEdPane::GetHandleRadius(bool	inSquared)$/;"	f	class:OE_TexEdPane
GetHandleRect	.\Utils\UIUtils.cpp	/^void		DragHandleSet::GetHandleRect($/;"	f	class:DragHandleSet
GetHandleX	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double		RF_BezierTestTool::GetHandleX(int inHandle) const$/;"	f	class:RF_BezierTestTool
GetHandleX	.\RenderFarmUI\RF_CropTool.cpp	/^double		RF_CropTool::GetHandleX(int inHandle) const$/;"	f	class:RF_CropTool
GetHandleX	.\RenderFarmUI\RF_ImageTool.cpp	/^double		RF_ImageTool::GetHandleX(int inHandle) const$/;"	f	class:RF_ImageTool
GetHandleY	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double		RF_BezierTestTool::GetHandleY(int inHandle) const$/;"	f	class:RF_BezierTestTool
GetHandleY	.\RenderFarmUI\RF_CropTool.cpp	/^double		RF_CropTool::GetHandleY(int inHandle) const$/;"	f	class:RF_CropTool
GetHandleY	.\RenderFarmUI\RF_ImageTool.cpp	/^double		RF_ImageTool::GetHandleY(int inHandle) const$/;"	f	class:RF_ImageTool
GetHeaderContent	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::GetHeaderContent($/;"	f	class:WED_AptTable
GetHeaderContent	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::GetHeaderContent($/;"	f	class:WED_ICAOTable
GetHeaderContent	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::GetHeaderContent($/;"	f	class:WED_VerTable
GetHeaderContent	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::GetHeaderContent($/;"	f	class:WED_LibraryListAdapter
GetHeaderContent	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::GetHeaderContent($/;"	f	class:WED_PropertyTable
GetHeading	.\WEDEntities\WED_GISLine_Width.cpp	/^double		WED_GISLine_Width::GetHeading(void) const$/;"	f	class:WED_GISLine_Width
GetHeading	.\WEDEntities\WED_GISPoint_Heading.cpp	/^double	WED_GISPoint_Heading::GetHeading(void			) const$/;"	f	class:WED_GISPoint_Heading
GetHeading	.\WEDEntities\WED_PolygonPlacement.cpp	/^double WED_PolygonPlacement::GetHeading(void) const$/;"	f	class:WED_PolygonPlacement
GetHeading	.\WEDEntities\WED_Taxiway.cpp	/^double		WED_Taxiway::GetHeading(void) const$/;"	f	class:WED_Taxiway
GetHeading	.\WEDMap\WED_MapToolNew.cpp	/^bool				WED_MapToolNew::GetHeading(double& h)	{ if (has_heading ) h = heading ; return has_heading ; }$/;"	f	class:WED_MapToolNew
GetHeight	.\WEDEntities\WED_FacadePlacement.cpp	/^double WED_FacadePlacement::GetHeight(void) const$/;"	f	class:WED_FacadePlacement
GetHelpTip	.\GUI\GUI_Pane.h	/^	virtual	int			GetHelpTip(int x, int y, int tip_bounds[4], string& tip) { return 0; }$/;"	f	class:GUI_Pane
GetHelpTip	.\GUI\GUI_Table.cpp	/^int			GUI_Table::GetHelpTip(int x, int y, int tip_bounds[4], string& tip)$/;"	f	class:GUI_Table
GetHelpTip	.\GUI\GUI_Table.cpp	/^int		GUI_Header::GetHelpTip(int x, int y, int tip_bounds[4], string& tip)$/;"	f	class:GUI_Header
GetHelpTip	.\GUI\GUI_Table.cpp	/^int		GUI_Side::GetHelpTip(int x, int y, int tip_bounds[4], string& tip)$/;"	f	class:GUI_Side
GetHelpTip	.\GUI\GUI_ToolBar.cpp	/^int		GUI_ToolBar::GetHelpTip(int x, int y, int tip_bounds[4], string& tip)$/;"	f	class:GUI_ToolBar
GetHidden	.\WEDEntities\WED_Entity.cpp	/^int		WED_Entity::GetHidden(void) const$/;"	f	class:WED_Entity
GetHost	.\WEDMap\WED_CreateEdgeTool.cpp	/^WED_Thing *	WED_CreateEdgeTool::GetHost(int& idx)$/;"	f	class:WED_CreateEdgeTool
GetHost	.\WEDMap\WED_CreatePolygonTool.cpp	/^WED_Thing *		WED_CreatePolygonTool::GetHost(int& idx)$/;"	f	class:WED_CreatePolygonTool
GetHost	.\WEDMap\WED_MapLayer.h	/^	inline	GUI_Pane *			GetHost(void) const { return mHost; }$/;"	f	class:WED_MapLayer
GetHost	.\WEDTCE\WED_TCELayer.h	/^	inline	GUI_Pane *			GetHost(void) const { return mHost; }$/;"	f	class:WED_TCELayer
GetICAO	.\WEDEntities\WED_Airport.cpp	/^void	WED_Airport::GetICAO(string& i) const$/;"	f	class:WED_Airport
GetID	.\GUI\GUI_Pane.cpp	/^int			GUI_Pane::GetID(void) const$/;"	f	class:GUI_Pane
GetID	.\Utils\XChunkyFileUtils.cpp	/^uint32_t	XAtom::GetID(void)$/;"	f	class:XAtom
GetID	.\WEDCore\WED_Persistent.h	/^			int				GetID(void) const					{ return mID;		}$/;"	f	class:WED_Persistent
GetImage	.\Network\Terraserver.cpp	/^ImageInfo *		AsyncImage::GetImage(void)$/;"	f	class:AsyncImage
GetImage	.\WEDEntities\WED_OverlayImage.cpp	/^void		WED_OverlayImage::GetImage(string& image_file) const$/;"	f	class:WED_OverlayImage
GetInterpF	.\ObjEdit\(old)\OE_TexEd.cpp	/^inline float	GetInterpF(float mi, float ma, float v) { if (ma == mi) return 0.0; return (v - mi) \/ (ma - mi); }$/;"	f
GetLatestEdge	.\DSF\tri_stripper_101\tri_stripper.cpp	/^inline tri_stripper::triangle_edge tri_stripper::GetLatestEdge(const triangle & Triangle, const triangle_strip::start_order Order) const$/;"	f	class:triangle_stripper::tri_stripper
GetLayerForChain	.\XESCore\NetPlacement.cpp	/^int			Net_JunctionInfo_t::GetLayerForChain(Net_ChainInfo_t * me)$/;"	f	class:Net_JunctionInfo_t
GetLegalDropOperations	.\WEDImportExport\WED_AptTable.h	/^	virtual	void					GetLegalDropOperations($/;"	f	class:WED_AptTable
GetLegalDropOperations	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	void					GetLegalDropOperations($/;"	f	class:WED_ICAOTable
GetLegalDropOperations	.\WEDImportExport\WED_VerTable.h	/^	virtual	void					GetLegalDropOperations($/;"	f	class:WED_VerTable
GetLegalDropOperations	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	void					GetLegalDropOperations($/;"	f	class:WED_LibraryListAdapter
GetLegalDropOperations	.\WEDMap\WED_ToolInfoAdapter.h	/^	virtual	void					GetLegalDropOperations($/;"	f	class:WED_ToolInfoAdapter
GetLegalDropOperations	.\WEDProperties\WED_PropertyTable.cpp	/^void					WED_PropertyTable::GetLegalDropOperations($/;"	f	class:WED_PropertyTable
GetLegalDropOperations	.\WEDWindows\WED_FilterBar.h	/^	virtual	void					GetLegalDropOperations($/;"	f	class:WED_FilterBar
GetLegalDropOperations	.\WEDWindows\WED_PackageListAdapter.cpp	/^void					WED_PackageListAdapter::GetLegalDropOperations($/;"	f	class:WED_PackageListAdapter
GetLength	.\WEDEntities\WED_GISLine_Width.cpp	/^double		WED_GISLine_Width::GetLength(void) const$/;"	f	class:WED_GISLine_Width
GetLength	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^double	WED_GISPoint_HeadingWidthLength::GetLength(void		 ) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
GetLibrary	.\WEDCore\WED_Document.h	/^	WED_LibraryMgr *	GetLibrary(void) { return mLibraryMgr; }$/;"	f	class:WED_Document
GetLine	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::GetLine(vector<Number>& out_line, Number& next_y)$/;"	f	class:PolyRasterizer
GetLine	.\WEDCore\WED_UndoLayer.h	/^		int		GetLine(void) const { return mLine; }$/;"	f	class:WED_UndoLayer
GetLineAscent	.\UI\FontMgr.cpp	/^float	FontMgr::GetLineAscent($/;"	f	class:FontMgr
GetLineDescent	.\UI\FontMgr.cpp	/^float	FontMgr::GetLineDescent($/;"	f	class:FontMgr
GetLineHeight	.\GUI\GUI_TextField.cpp	/^float			GUI_TextField::GetLineHeight(void)$/;"	f	class:GUI_TextField
GetLineHeight	.\UI\FontMgr.cpp	/^float FontMgr::GetLineHeight($/;"	f	class:FontMgr
GetLineHeightCB	.\OGLE\ogle.cpp	/^float			OGLE::GetLineHeightCB($/;"	f	class:OGLE
GetLineHeight_f	.\OGLE\ogle.h	/^	float			(* GetLineHeight_f)($/;"	m	struct:OGLE_Callbacks
GetLineTrash	.\Utils\PolyRasterUtils.h	/^void	BoxRasterizer<Number>::GetLineTrash(vector<Number>& out_line)$/;"	f	class:BoxRasterizer
GetLineage	.\WEDMap\WED_ToolUtils.cpp	/^static void GetLineage(WED_Thing * who, list<WED_Thing *>& parents)$/;"	f	file:
GetLinks	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::GetLinks		    (intptr_t id) const$/;"	f	class:WED_CreateToolBase
GetLinks	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::GetLinks		    (intptr_t id) const$/;"	f	class:WED_MarqueeTool
GetLinks	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::GetLinks		    (intptr_t id) const$/;"	f	class:WED_VertexTool
GetLinks	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::GetLinks		    (intptr_t id) const$/;"	f	class:WED_TCEMarqueeTool
GetLinks	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::GetLinks		    (intptr_t id) const$/;"	f	class:WED_TCEVertexTool
GetLoc	.\WEDXPlugin\WED_XPluginEntity.cpp	/^void   WED_XPluginEntity::GetLoc(double * outLat,double * outLon,double * outAlt)$/;"	f	class:WED_XPluginEntity
GetLocation	.\Network\Terraserver.cpp	/^bool	AsyncImageLocator::GetLocation(const char* scale, const char * theme, double w, double s, double e, double n,$/;"	f	class:AsyncImageLocator
GetLocation	.\WEDEntities\WED_FacadeNode.cpp	/^void	WED_FacadeNode::GetLocation		   (GISLayer_t l,      Point2& p) const$/;"	f	class:WED_FacadeNode
GetLocation	.\WEDEntities\WED_GISPoint.cpp	/^void	WED_GISPoint::GetLocation(GISLayer_t l,     Point2& p) const$/;"	f	class:WED_GISPoint
GetLocation	.\WEDEntities\WED_TextureBezierNode.cpp	/^void		WED_TextureBezierNode::GetLocation(GISLayer_t l,	   Point2& st) const$/;"	f	class:WED_TextureBezierNode
GetLocation	.\WEDEntities\WED_TextureNode.cpp	/^void		WED_TextureNode::GetLocation(GISLayer_t l,	   Point2& st) const$/;"	f	class:WED_TextureNode
GetLocationAtTime	.\Utils\Skeleton.cpp	/^	void GetLocationAtTime(Point3& p, double t) const {$/;"	f	struct:SK_Vertex
GetLocked	.\WEDEntities\WED_Entity.cpp	/^int		WED_Entity::GetLocked(void) const$/;"	f	class:WED_Entity
GetLogicalBounds	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::GetLogicalBounds($/;"	f	class:GUI_TextField
GetLogicalBoundsCB	.\OGLE\ogle.cpp	/^void			OGLE::GetLogicalBoundsCB($/;"	f	class:OGLE
GetLogicalBounds_f	.\OGLE\ogle.h	/^	void			(* GetLogicalBounds_f)($/;"	m	struct:OGLE_Callbacks
GetMapEdgeLengthMeters	.\XESCore\MapAlgs.cpp	/^double	GetMapEdgeLengthMeters(const Pmwx::Halfedge_handle e)$/;"	f
GetMapFaceAreaDegrees	.\XESCore\MapAlgs.cpp	/^double	GetMapFaceAreaDegrees(const Face_handle f)$/;"	f
GetMapFaceAreaMeters	.\XESCore\MapAlgs.cpp	/^double	GetMapFaceAreaMeters(const Face_handle f, Bbox2 * out_bounds)$/;"	f
GetMapLogicalBounds	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::GetMapLogicalBounds($/;"	f	class:RF_MapZoomer
GetMapLogicalBounds	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::GetMapLogicalBounds($/;"	f	class:WED_MapZoomerNew
GetMapVisibleBounds	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::GetMapVisibleBounds($/;"	f	class:RF_MapZoomer
GetMapVisibleBounds	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::GetMapVisibleBounds($/;"	f	class:WED_MapZoomerNew
GetMax	.\GUI\GUI_Control.cpp	/^float	GUI_Control::GetMax(void) const$/;"	f	class:GUI_Control
GetMax	.\WEDEntities\WED_GISBoundingBox.cpp	/^IGISPoint *				WED_GISBoundingBox::GetMax(void) const$/;"	f	class:WED_GISBoundingBox
GetMenuBar	.\GUI\GUI_Application.cpp	/^GUI_Menu		GUI_Application::GetMenuBar(void)$/;"	f	class:GUI_Application
GetMenuBar	.\UI\XWin.lin.cpp	/^xmenu XWin::GetMenuBar(void)$/;"	f	class:XWin
GetMenuBar	.\UI\XWin.win.cpp	/^HMENU	XWin::GetMenuBar(void)$/;"	f	class:XWin
GetMenuBarHeight	.\UI\XWin.lin.cpp	/^int XWin::GetMenuBarHeight(void)$/;"	f	class:XWin
GetMin	.\GUI\GUI_Control.cpp	/^float	GUI_Control::GetMin(void) const$/;"	f	class:GUI_Control
GetMin	.\WEDEntities\WED_GISBoundingBox.cpp	/^IGISPoint *				WED_GISBoundingBox::GetMin(void) const$/;"	f	class:WED_GISBoundingBox
GetMinorAxis	.\GUI\GUI_ScrollBar.cpp	/^int		GUI_ScrollBar::GetMinorAxis(int vertical)$/;"	f	class:GUI_ScrollBar
GetModifiersNow	.\GUI\GUI_Pane.cpp	/^GUI_KeyFlags GUI_Pane::GetModifiersNow(void)$/;"	f	class:GUI_Pane
GetMouseLoc	.\UI\XWin.lin.cpp	/^void XWin::GetMouseLoc(int * outX, int * outY)$/;"	f	class:XWin
GetMouseLoc	.\UI\XWin.win.cpp	/^void			XWin::GetMouseLoc(int * outX, int * outY)$/;"	f	class:XWin
GetMouseLocNow	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::GetMouseLocNow(int * out_x, int * out_y)$/;"	f	class:GUI_Pane
GetMouseLocNow	.\GUI\GUI_Window.cpp	/^void		GUI_Window::GetMouseLocNow(int * out_x, int * out_y)$/;"	f	class:GUI_Window
GetMultiFilePathFromUser	.\Utils\PlatformUtils.lin.cpp	/^char *	GetMultiFilePathFromUser($/;"	f
GetMultiFilePathFromUser	.\Utils\PlatformUtils.win.cpp	/^char *	GetMultiFilePathFromUser($/;"	f
GetMyPosition	.\WEDEntities\WED_Thing.cpp	/^int			WED_Thing::GetMyPosition(void) const$/;"	f	class:WED_Thing
GetNWLink	.\WEDCore\WED_Document.cpp	/^WED_NWLinkAdapter *	WED_Document::GetNWLink(void)$/;"	f	class:WED_Document
GetName	.\WEDCore\WED_UndoLayer.h	/^		string	GetName(void) const { return mName; }$/;"	f	class:WED_UndoLayer
GetName	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::GetName(string& n) const$/;"	f	class:WED_Thing
GetName	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual string  GetName(){return mName;}$/;"	f	class:WED_XPluginEntity
GetNamedChild	.\WEDEntities\WED_Thing.cpp	/^WED_Thing *		WED_Thing::GetNamedChild(const string& s) const$/;"	f	class:WED_Thing
GetNativePlatformType	.\Utils\EndianUtils.c	/^PlatformType	GetNativePlatformType(void)$/;"	f
GetNaturalHeight	.\GUI\GUI_TabControl.cpp	/^int		GUI_TabControl::GetNaturalHeight(void)$/;"	f	class:GUI_TabControl
GetNaturalTerrainColor	.\XESCore\DEMTables.cpp	/^void	GetNaturalTerrainColor(int terrain, float rgb[3])$/;"	f
GetNeighbors	.\XESCore\Hydro.cpp	/^inline void GetNeighbors(const DemPtSet& pts, DemPtSet& neighbors, DemPtMap& borderMap, int width, int height, const DEMGeo& elev)$/;"	f
GetNestedSubObject	.\Network\XMLObject.cpp	/^XMLObject *	XMLObject::GetNestedSubObject(const std::string& inKey)$/;"	f	class:XMLObject
GetNext	.\Utils\XChunkyFileUtils.cpp	/^bool			XAtom::GetNext(const XSpan& inContainer, XAtom& outNext)$/;"	f	class:XAtom
GetNext	.\XESCore\Hydro.cpp	/^inline bool GetNext(int& x, int& y, const DEMGeo& dem)$/;"	f
GetNextFan	.\XESCore\TriFan.cpp	/^TriFan_t *		TriFanBuilder::GetNextFan(void)$/;"	f	class:TriFanBuilder
GetNextNoComments	.\Utils\XUtils.cpp	/^bool	GetNextNoComments(StTextFileScanner& f, string& s)$/;"	f
GetNextPrimitive	.\XESCore\TriFan.cpp	/^int			TriFanBuilder::GetNextPrimitive(list<CDT::Vertex_handle>& out_handles)$/;"	f	class:TriFanBuilder
GetNextRemainingTriangle	.\XESCore\TriFan.cpp	/^CDT::Face_handle 	TriFanBuilder::GetNextRemainingTriangle(void)$/;"	f	class:TriFanBuilder
GetNextString	.\Utils\XChunkyFileUtils.cpp	/^const char *	XAtomStringTable::GetNextString(const char * inString)$/;"	f	class:XAtomStringTable
GetNextTriFan	.\XESCore\TriFan.cpp	/^void		TriFanBuilder::GetNextTriFan(list<CDT::Vertex_handle>& out_handles)$/;"	f	class:TriFanBuilder
GetNthAtom	.\Utils\XChunkyFileUtils.cpp	/^bool	XAtomContainer::GetNthAtom(int inIndex, XAtom& outAtom)$/;"	f	class:XAtomContainer
GetNthAtomOfID	.\Utils\XChunkyFileUtils.cpp	/^bool	XAtomContainer::GetNthAtomOfID(uint32_t inID, int inIndex, XAtom& outAtom)$/;"	f	class:XAtomContainer
GetNthButtonName	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void	RF_BezierTestTool::GetNthButtonName(int n, string& s)$/;"	f	class:RF_BezierTestTool
GetNthButtonName	.\RenderFarmUI\RF_CropTool.cpp	/^void	RF_CropTool::GetNthButtonName(int n, string& s)$/;"	f	class:RF_CropTool
GetNthButtonName	.\RenderFarmUI\RF_ImageTool.cpp	/^void	RF_ImageTool::GetNthButtonName(int n, string& s)$/;"	f	class:RF_ImageTool
GetNthButtonName	.\RenderFarmUI\RF_MeshTester.cpp	/^void	RF_MeshTester::GetNthButtonName(int, string&) { }$/;"	f	class:RF_MeshTester
GetNthButtonName	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::GetNthButtonName(int n, string& s)$/;"	f	class:RF_SelectionTool
GetNthButtonName	.\RenderFarmUI\RF_TerraTool.cpp	/^void	RF_TerraTool::GetNthButtonName(int n, string& s)$/;"	f	class:RF_TerraTool
GetNthButtonName	.\RenderFarmUI\RF_TopoTester.cpp	/^void	RF_TopoTester::GetNthButtonName(int, string&) { }$/;"	f	class:RF_TopoTester
GetNthButtonName	.\RenderFarmUI\RF_TriTestTool.cpp	/^void	RF_TriTestTool::GetNthButtonName(int n, string& s) { if (n == 0) s = "Retri hi"; else if (n == 1) s = "Retri lo"; else if (n == 2) s = "Road Density"; }$/;"	f	class:RF_TriTestTool
GetNthCacheIndex	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^string WED_LibraryListAdapter::GetNthCacheIndex (int index, bool noPrefix)$/;"	f	class:WED_LibraryListAdapter
GetNthChild	.\GUI\GUI_Pane.cpp	/^GUI_Pane *	GUI_Pane::GetNthChild(int n) const$/;"	f	class:GUI_Pane
GetNthChild	.\WEDEntities\WED_Thing.cpp	/^WED_Thing *		WED_Thing::GetNthChild(int n) const$/;"	f	class:WED_Thing
GetNthControlHandle	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::GetNthControlHandle(intptr_t id, int n, bool * active, HandleType_t * con_type, Point2 * p, Vector2 * direction, float * radius) const$/;"	f	class:WED_CreateToolBase
GetNthControlHandle	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::GetNthControlHandle(intptr_t id, int n, bool * active, HandleType_t * con_type, Point2 * p, Vector2 * direction, float * radius) const$/;"	f	class:WED_MarqueeTool
GetNthControlHandle	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::GetNthControlHandle(intptr_t id, int n, bool * active, HandleType_t * con_type, Point2 * p, Vector2 * dir, float * radius) const$/;"	f	class:WED_VertexTool
GetNthControlHandle	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::GetNthControlHandle(intptr_t id, int n, bool * active, HandleType_t * con_type, Point2 * p, Vector2 * direction, float * radius) const$/;"	f	class:WED_TCEMarqueeTool
GetNthControlHandle	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::GetNthControlHandle(intptr_t id, int n, bool * active, HandleType_t * con_type, Point2 * p, Vector2 * direction, float * radius) const$/;"	f	class:WED_TCEVertexTool
GetNthCustomPackageName	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::GetNthCustomPackageName(int n, string& package) const$/;"	f	class:WED_PackageMgr
GetNthCustomPackagePath	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::GetNthCustomPackagePath(int n, string& package) const$/;"	f	class:WED_PackageMgr
GetNthEntity	.\WEDEntities\WED_GISChain.cpp	/^IGISEntity *	WED_GISChain::GetNthEntity  (int n) const$/;"	f	class:WED_GISChain
GetNthEntity	.\WEDEntities\WED_GISComposite.cpp	/^IGISEntity *	WED_GISComposite::GetNthEntity  (int n) const$/;"	f	class:WED_GISComposite
GetNthEntity	.\WEDEntities\WED_GISPolygon.cpp	/^IGISEntity *	WED_GISPolygon::GetNthEntity  (int n) const$/;"	f	class:WED_GISPolygon
GetNthEntityID	.\WEDMap\WED_CreateToolBase.cpp	/^intptr_t	WED_CreateToolBase::GetNthEntityID(int n) const$/;"	f	class:WED_CreateToolBase
GetNthEntityID	.\WEDMap\WED_MarqueeTool.cpp	/^intptr_t		WED_MarqueeTool::GetNthEntityID(int n) const$/;"	f	class:WED_MarqueeTool
GetNthEntityID	.\WEDMap\WED_VertexTool.cpp	/^intptr_t	WED_VertexTool::GetNthEntityID(int n) const$/;"	f	class:WED_VertexTool
GetNthEntityID	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^intptr_t		WED_TCEMarqueeTool::GetNthEntityID(int n) const$/;"	f	class:WED_TCEMarqueeTool
GetNthEntityID	.\WEDTCE\WED_TCEVertexTool.cpp	/^intptr_t		WED_TCEVertexTool::GetNthEntityID(int n) const$/;"	f	class:WED_TCEVertexTool
GetNthFieldAsCoordPair	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsCoordPair(int n, Point2& p)$/;"	f	class:VPFTableIterator
GetNthFieldAsCoordPairArray	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsCoordPairArray(int n, vector<Point2>& v)$/;"	f	class:VPFTableIterator
GetNthFieldAsCoordTriple	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsCoordTriple(int n , Point3& p)$/;"	f	class:VPFTableIterator
GetNthFieldAsCoordTripleArray	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsCoordTripleArray(int n, vector<Point3>& v)$/;"	f	class:VPFTableIterator
GetNthFieldAsDouble	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsDouble(int n, double& v)$/;"	f	class:VPFTableIterator
GetNthFieldAsDoubleArray	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsDoubleArray(int n, vector<double>& v)$/;"	f	class:VPFTableIterator
GetNthFieldAsInt	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsInt(int n, int& v)$/;"	f	class:VPFTableIterator
GetNthFieldAsIntArray	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsIntArray(int n, vector<int>& v)$/;"	f	class:VPFTableIterator
GetNthFieldAsString	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsString(int n, string& s)$/;"	f	class:VPFTableIterator
GetNthFieldAsTripletKey	.\VPF\VPFTable.cpp	/^bool	VPFTableIterator::GetNthFieldAsTripletKey(int n, VPF_TripletKey& k)$/;"	f	class:VPFTableIterator
GetNthHole	.\WEDEntities\WED_GISPolygon.cpp	/^IGISPointSequence *		WED_GISPolygon::GetNthHole  (int n)	const$/;"	f	class:WED_GISPolygon
GetNthItemData	.\GUI\GUI_Clipboard.cpp	/^bool	GUI_DragData_Adapter::GetNthItemData(int n, GUI_ClipType ct, int size, void * ptr)$/;"	f	class:GUI_DragData_Adapter
GetNthItemData	.\GUI\GUI_Clipboard.cpp	/^bool	GUI_DragMgr_Adapter::GetNthItemData(int n, GUI_ClipType ct, int size, void * ptr)$/;"	f	class:GUI_DragMgr_Adapter
GetNthItemData	.\GUI\GUI_Clipboard.cpp	/^bool	GUI_OLE_Adapter::GetNthItemData(int n, GUI_ClipType ct, int size, void * ptr)$/;"	f	class:GUI_OLE_Adapter
GetNthItemSize	.\GUI\GUI_Clipboard.cpp	/^int		GUI_DragData_Adapter::GetNthItemSize(int n, GUI_ClipType ct)$/;"	f	class:GUI_DragData_Adapter
GetNthItemSize	.\GUI\GUI_Clipboard.cpp	/^int		GUI_DragMgr_Adapter::GetNthItemSize(int n, GUI_ClipType ct)$/;"	f	class:GUI_DragMgr_Adapter
GetNthItemSize	.\GUI\GUI_Clipboard.cpp	/^int		GUI_OLE_Adapter::GetNthItemSize(int n, GUI_ClipType ct)$/;"	f	class:GUI_OLE_Adapter
GetNthLinkInfo	.\WEDMap\WED_CreateToolBase.cpp	/^void	WED_CreateToolBase::GetNthLinkInfo(intptr_t id, int n, bool * active, LinkType_t * ltype) const$/;"	f	class:WED_CreateToolBase
GetNthLinkInfo	.\WEDMap\WED_MarqueeTool.cpp	/^void	WED_MarqueeTool::GetNthLinkInfo		(intptr_t id, int n, bool * active, LinkType_t * ltype) const$/;"	f	class:WED_MarqueeTool
GetNthLinkInfo	.\WEDMap\WED_VertexTool.cpp	/^void	WED_VertexTool::GetNthLinkInfo		(intptr_t id, int n, bool * active, LinkType_t * ltype) const$/;"	f	class:WED_VertexTool
GetNthLinkInfo	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^void	WED_TCEMarqueeTool::GetNthLinkInfo		(intptr_t id, int n, bool * active, LinkType_t * ltype) const$/;"	f	class:WED_TCEMarqueeTool
GetNthLinkInfo	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::GetNthLinkInfo		(intptr_t id, int n, bool * active, LinkType_t * ltype) const$/;"	f	class:WED_TCEVertexTool
GetNthLinkSource	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::GetNthLinkSource   (intptr_t id, int n) const$/;"	f	class:WED_CreateToolBase
GetNthLinkSource	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::GetNthLinkSource   (intptr_t id, int n) const$/;"	f	class:WED_MarqueeTool
GetNthLinkSource	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::GetNthLinkSource   (intptr_t id, int n) const$/;"	f	class:WED_VertexTool
GetNthLinkSource	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::GetNthLinkSource   (intptr_t id, int n) const$/;"	f	class:WED_TCEMarqueeTool
GetNthLinkSource	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::GetNthLinkSource   (intptr_t id, int n) const$/;"	f	class:WED_TCEVertexTool
GetNthLinkSourceCtl	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::GetNthLinkSourceCtl(intptr_t id, int n) const$/;"	f	class:WED_CreateToolBase
GetNthLinkSourceCtl	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::GetNthLinkSourceCtl(intptr_t id, int n) const$/;"	f	class:WED_MarqueeTool
GetNthLinkSourceCtl	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::GetNthLinkSourceCtl(intptr_t id, int n) const$/;"	f	class:WED_VertexTool
GetNthLinkSourceCtl	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::GetNthLinkSourceCtl(intptr_t id, int n) const$/;"	f	class:WED_TCEMarqueeTool
GetNthLinkSourceCtl	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::GetNthLinkSourceCtl(intptr_t id, int n) const$/;"	f	class:WED_TCEVertexTool
GetNthLinkTarget	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::GetNthLinkTarget   (intptr_t id, int n) const$/;"	f	class:WED_CreateToolBase
GetNthLinkTarget	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::GetNthLinkTarget   (intptr_t id, int n) const$/;"	f	class:WED_MarqueeTool
GetNthLinkTarget	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::GetNthLinkTarget   (intptr_t id, int n) const$/;"	f	class:WED_VertexTool
GetNthLinkTarget	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::GetNthLinkTarget   (intptr_t id, int n) const$/;"	f	class:WED_TCEMarqueeTool
GetNthLinkTarget	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::GetNthLinkTarget   (intptr_t id, int n) const$/;"	f	class:WED_TCEVertexTool
GetNthLinkTargetCtl	.\WEDMap\WED_CreateToolBase.cpp	/^int		WED_CreateToolBase::GetNthLinkTargetCtl(intptr_t id, int n) const$/;"	f	class:WED_CreateToolBase
GetNthLinkTargetCtl	.\WEDMap\WED_MarqueeTool.cpp	/^int		WED_MarqueeTool::GetNthLinkTargetCtl(intptr_t id, int n) const$/;"	f	class:WED_MarqueeTool
GetNthLinkTargetCtl	.\WEDMap\WED_VertexTool.cpp	/^int		WED_VertexTool::GetNthLinkTargetCtl(intptr_t id, int n) const$/;"	f	class:WED_VertexTool
GetNthLinkTargetCtl	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^int		WED_TCEMarqueeTool::GetNthLinkTargetCtl(intptr_t id, int n) const$/;"	f	class:WED_TCEMarqueeTool
GetNthLinkTargetCtl	.\WEDTCE\WED_TCEVertexTool.cpp	/^int			WED_TCEVertexTool::GetNthLinkTargetCtl(intptr_t id, int n) const$/;"	f	class:WED_TCEVertexTool
GetNthObject	.\Env\Persistence.cpp	/^int		GetNthObject($/;"	f
GetNthPackageName	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::GetNthPackageName(int n, string& package) const$/;"	f	class:WED_PackageMgr
GetNthPackagePath	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::GetNthPackagePath(int n, string& package) const$/;"	f	class:WED_PackageMgr
GetNthPoint	.\WEDEntities\WED_GISChain.cpp	/^IGISPoint *	WED_GISChain::GetNthPoint (int n) const$/;"	f	class:WED_GISChain
GetNthPoint	.\WEDEntities\WED_GISEdge.cpp	/^IGISPoint *	WED_GISEdge::GetNthPoint (int n) const$/;"	f	class:WED_GISEdge
GetNthPoint	.\WEDEntities\WED_GISLine.cpp	/^IGISPoint *	WED_GISLine::GetNthPoint (int n) const$/;"	f	class:WED_GISLine
GetNthPowerSegment	.\Env\Persistence.cpp	/^int		GetNthPowerSegment($/;"	f
GetNthProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::GetNthProperty(int n, PropertyVal_t& val) const$/;"	f	class:WED_PropertyHelper
GetNthProperty	.\WEDEntities\WED_GISLine_Width.cpp	/^void		WED_GISLine_Width::GetNthProperty(int n, PropertyVal_t& val) const$/;"	f	class:WED_GISLine_Width
GetNthProperty	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::GetNthProperty(int n, PropertyVal_t& val) const$/;"	f	class:WED_TaxiRoute
GetNthProperty	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::GetNthProperty(int n, PropertyVal_t& val) const$/;"	f	class:WED_TCEToolAdapter
GetNthPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_PropertyHelper
GetNthPropertyDict	.\WEDEntities\WED_ATCFlow.cpp	/^void	WED_ATCFlow::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_ATCFlow
GetNthPropertyDict	.\WEDEntities\WED_ATCRunwayUse.cpp	/^void	WED_ATCRunwayUse::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_ATCRunwayUse
GetNthPropertyDict	.\WEDEntities\WED_FacadeNode.cpp	/^void	WED_FacadeNode::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_FacadeNode
GetNthPropertyDict	.\WEDEntities\WED_GISLine_Width.cpp	/^void		WED_GISLine_Width::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_GISLine_Width
GetNthPropertyDict	.\WEDEntities\WED_TaxiRoute.cpp	/^void	WED_TaxiRoute::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_TaxiRoute
GetNthPropertyDict	.\WEDMap\WED_CreateEdgeTool.cpp	/^void	WED_CreateEdgeTool::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_CreateEdgeTool
GetNthPropertyDict	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::GetNthPropertyDict(int n, PropertyDict_t& dict) const$/;"	f	class:WED_TCEToolAdapter
GetNthPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::GetNthPropertyDictItem(int n, int e, string& item) const$/;"	f	class:WED_PropertyHelper
GetNthPropertyDictItem	.\WEDEntities\WED_FacadeNode.cpp	/^void		WED_FacadeNode::GetNthPropertyDictItem(int n, int e, string& item) const$/;"	f	class:WED_FacadeNode
GetNthPropertyDictItem	.\WEDEntities\WED_GISLine_Width.cpp	/^void		WED_GISLine_Width::GetNthPropertyDictItem(int n, int e, string& item) const$/;"	f	class:WED_GISLine_Width
GetNthPropertyDictItem	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::GetNthPropertyDictItem(int n, int e, string& item) const$/;"	f	class:WED_TCEToolAdapter
GetNthPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::GetNthPropertyInfo(int n, PropertyInfo_t& info) const$/;"	f	class:WED_PropertyHelper
GetNthPropertyInfo	.\WEDEntities\WED_GISLine_Width.cpp	/^void		WED_GISLine_Width::GetNthPropertyInfo(int n, PropertyInfo_t& info) const$/;"	f	class:WED_GISLine_Width
GetNthPropertyInfo	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::GetNthPropertyInfo(int n, PropertyInfo_t& info) const$/;"	f	class:WED_TaxiRoute
GetNthPropertyInfo	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::GetNthPropertyInfo(int n, PropertyInfo_t& info) const$/;"	f	class:WED_TCEToolAdapter
GetNthPropertyName	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void	RF_BezierTestTool::GetNthPropertyName(int n, string& s)$/;"	f	class:RF_BezierTestTool
GetNthPropertyName	.\RenderFarmUI\RF_CropTool.cpp	/^void	RF_CropTool::GetNthPropertyName(int n, string& s)$/;"	f	class:RF_CropTool
GetNthPropertyName	.\RenderFarmUI\RF_ImageTool.cpp	/^void	RF_ImageTool::GetNthPropertyName(int n, string& s)$/;"	f	class:RF_ImageTool
GetNthPropertyName	.\RenderFarmUI\RF_MeshTester.cpp	/^void	RF_MeshTester::GetNthPropertyName(int, string&) { }$/;"	f	class:RF_MeshTester
GetNthPropertyName	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::GetNthPropertyName(int n, string& s)$/;"	f	class:RF_SelectionTool
GetNthPropertyName	.\RenderFarmUI\RF_TerraTool.cpp	/^void	RF_TerraTool::GetNthPropertyName(int n, string& s)$/;"	f	class:RF_TerraTool
GetNthPropertyName	.\RenderFarmUI\RF_TopoTester.cpp	/^void	RF_TopoTester::GetNthPropertyName(int, string&) { }$/;"	f	class:RF_TopoTester
GetNthPropertyName	.\RenderFarmUI\RF_TriTestTool.cpp	/^void	RF_TriTestTool::GetNthPropertyName(int, string&) { }$/;"	f	class:RF_TriTestTool
GetNthPropertyValue	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double	RF_BezierTestTool::GetNthPropertyValue(int n)$/;"	f	class:RF_BezierTestTool
GetNthPropertyValue	.\RenderFarmUI\RF_CropTool.cpp	/^double	RF_CropTool::GetNthPropertyValue(int n)$/;"	f	class:RF_CropTool
GetNthPropertyValue	.\RenderFarmUI\RF_ImageTool.cpp	/^double	RF_ImageTool::GetNthPropertyValue(int n)$/;"	f	class:RF_ImageTool
GetNthPropertyValue	.\RenderFarmUI\RF_MeshTester.cpp	/^double	RF_MeshTester::GetNthPropertyValue(int) { return 0.0; }$/;"	f	class:RF_MeshTester
GetNthPropertyValue	.\RenderFarmUI\RF_SelectionTool.cpp	/^double	RF_SelectionTool::GetNthPropertyValue(int n)$/;"	f	class:RF_SelectionTool
GetNthPropertyValue	.\RenderFarmUI\RF_TerraTool.cpp	/^double	RF_TerraTool::GetNthPropertyValue(int)$/;"	f	class:RF_TerraTool
GetNthPropertyValue	.\RenderFarmUI\RF_TopoTester.cpp	/^double	RF_TopoTester::GetNthPropertyValue(int) { return 0.0; }$/;"	f	class:RF_TopoTester
GetNthPropertyValue	.\RenderFarmUI\RF_TriTestTool.cpp	/^double	RF_TriTestTool::GetNthPropertyValue(int) { return 0.0; }$/;"	f	class:RF_TriTestTool
GetNthRiverSegment	.\Env\Persistence.cpp	/^int		GetNthRiverSegment($/;"	f
GetNthRoadSegment	.\Env\Persistence.cpp	/^int		GetNthRoadSegment($/;"	f
GetNthSelection	.\WEDEntities\WED_Select.cpp	/^ISelectable *		WED_Select::GetNthSelection(int n) const$/;"	f	class:WED_Select
GetNthSource	.\WEDEntities\WED_Thing.cpp	/^WED_Thing *			WED_Thing::GetNthSource(int n) const$/;"	f	class:WED_Thing
GetNthString	.\Utils\XChunkyFileUtils.cpp	/^const char *	XAtomStringTable::GetNthString(int inIndex)$/;"	f	class:XAtomStringTable
GetNthSub	.\WEDEntities\WED_Thing.cpp	/^IPropertyObject *	WED_Thing::GetNthSub(int n)$/;"	f	class:WED_Thing
GetNthSub	.\WEDMap\WED_MapToolNew.cpp	/^IPropertyObject *	WED_MapToolNew::GetNthSub(int n) { return NULL; }$/;"	f	class:WED_MapToolNew
GetNthTaxiwaySegment	.\Env\Persistence.cpp	/^int		GetNthTaxiwaySegment($/;"	f
GetNthTexture	.\Env\Persistence.cpp	/^int		GetNthTexture($/;"	f
GetNthTrailSegment	.\Env\Persistence.cpp	/^int		GetNthTrailSegment($/;"	f
GetNthTrainSegment	.\Env\Persistence.cpp	/^int		GetNthTrainSegment($/;"	f
GetNthVertex	.\Env\Persistence.cpp	/^void	GetNthVertex($/;"	f
GetNumButtons	.\RenderFarmUI\RF_BezierTestTool.cpp	/^int		RF_BezierTestTool::GetNumButtons(void)$/;"	f	class:RF_BezierTestTool
GetNumButtons	.\RenderFarmUI\RF_CropTool.cpp	/^int		RF_CropTool::GetNumButtons(void)$/;"	f	class:RF_CropTool
GetNumButtons	.\RenderFarmUI\RF_ImageTool.cpp	/^int		RF_ImageTool::GetNumButtons(void)$/;"	f	class:RF_ImageTool
GetNumButtons	.\RenderFarmUI\RF_MeshTester.cpp	/^int		RF_MeshTester::GetNumButtons(void) { return 0; }$/;"	f	class:RF_MeshTester
GetNumButtons	.\RenderFarmUI\RF_SelectionTool.cpp	/^int		RF_SelectionTool::GetNumButtons(void)$/;"	f	class:RF_SelectionTool
GetNumButtons	.\RenderFarmUI\RF_TerraTool.cpp	/^int		RF_TerraTool::GetNumButtons(void)$/;"	f	class:RF_TerraTool
GetNumButtons	.\RenderFarmUI\RF_TopoTester.cpp	/^int		RF_TopoTester::GetNumButtons(void) { return 0; }$/;"	f	class:RF_TopoTester
GetNumButtons	.\RenderFarmUI\RF_TriTestTool.cpp	/^int		RF_TriTestTool::GetNumButtons(void) { return 3; }$/;"	f	class:RF_TriTestTool
GetNumEntities	.\WEDEntities\WED_GISChain.cpp	/^int				WED_GISChain::GetNumEntities(void ) const$/;"	f	class:WED_GISChain
GetNumEntities	.\WEDEntities\WED_GISComposite.cpp	/^int				WED_GISComposite::GetNumEntities(void ) const$/;"	f	class:WED_GISComposite
GetNumEntities	.\WEDEntities\WED_GISPolygon.cpp	/^int				WED_GISPolygon::GetNumEntities(void ) const$/;"	f	class:WED_GISPolygon
GetNumHoles	.\WEDEntities\WED_GISPolygon.cpp	/^int						WED_GISPolygon::GetNumHoles (void ) const$/;"	f	class:WED_GISPolygon
GetNumPoints	.\WEDEntities\WED_GISChain.cpp	/^int					WED_GISChain::GetNumPoints(void ) const$/;"	f	class:WED_GISChain
GetNumPoints	.\WEDEntities\WED_GISEdge.cpp	/^int					WED_GISEdge::GetNumPoints(void ) const$/;"	f	class:WED_GISEdge
GetNumPoints	.\WEDEntities\WED_GISLine.cpp	/^int					WED_GISLine::GetNumPoints(void ) const$/;"	f	class:WED_GISLine
GetNumProperties	.\RenderFarmUI\RF_BezierTestTool.cpp	/^int		RF_BezierTestTool::GetNumProperties(void)$/;"	f	class:RF_BezierTestTool
GetNumProperties	.\RenderFarmUI\RF_CropTool.cpp	/^int		RF_CropTool::GetNumProperties(void)$/;"	f	class:RF_CropTool
GetNumProperties	.\RenderFarmUI\RF_ImageTool.cpp	/^int		RF_ImageTool::GetNumProperties(void)$/;"	f	class:RF_ImageTool
GetNumProperties	.\RenderFarmUI\RF_MeshTester.cpp	/^int		RF_MeshTester::GetNumProperties(void) { return 0; }$/;"	f	class:RF_MeshTester
GetNumProperties	.\RenderFarmUI\RF_SelectionTool.cpp	/^int		RF_SelectionTool::GetNumProperties(void)$/;"	f	class:RF_SelectionTool
GetNumProperties	.\RenderFarmUI\RF_TerraTool.cpp	/^int		RF_TerraTool::GetNumProperties(void)$/;"	f	class:RF_TerraTool
GetNumProperties	.\RenderFarmUI\RF_TopoTester.cpp	/^int		RF_TopoTester::GetNumProperties(void) { return 0; }$/;"	f	class:RF_TopoTester
GetNumProperties	.\RenderFarmUI\RF_TriTestTool.cpp	/^int		RF_TriTestTool::GetNumProperties(void) { return 0; }$/;"	f	class:RF_TriTestTool
GetNumSides	.\WEDEntities\WED_GISChain.cpp	/^int			WED_GISChain::GetNumSides(void) const$/;"	f	class:WED_GISChain
GetNumSides	.\WEDEntities\WED_GISEdge.cpp	/^int					WED_GISEdge::GetNumSides(void) const$/;"	f	class:WED_GISEdge
GetNumSides	.\WEDEntities\WED_GISLine.cpp	/^int					WED_GISLine::GetNumSides(void) const$/;"	f	class:WED_GISLine
GetObj	.\WEDCore\WED_ResourceMgr.cpp	/^bool	WED_ResourceMgr::GetObj(const string& path, XObj8 *& obj)$/;"	f	class:WED_ResourceMgr
GetObjBoundingSphere	.\Utils\ObjUtils.cpp	/^void	GetObjBoundingSphere(const XObj& inObj, float outSphere[4])$/;"	f
GetObjDensity	.\WEDMap\WED_PreviewLayer.cpp	/^int			WED_PreviewLayer::GetObjDensity(void) const$/;"	f	class:WED_PreviewLayer
GetObjDimensions	.\Utils\ObjUtils.cpp	/^void	GetObjDimensions(const XObj& inObj,$/;"	f
GetObjDimensions8	.\Utils\ObjUtils.cpp	/^void	GetObjDimensions8(const XObj8& inObj,$/;"	f
GetObjMinMaxHeights	.\RawImport\FAA_Obs.cpp	/^int	GetObjMinMaxHeights(map<int, float>& mins, map<int, float>& maxs)$/;"	f
GetObjRadius	.\Utils\ObjUtils.cpp	/^double	GetObjRadius(const XObj& inObj)$/;"	f
GetObjRadius8	.\Utils\ObjUtils.cpp	/^double	GetObjRadius8(const XObj8& inObj)$/;"	f
GetObjRelative	.\WEDCore\WED_ResourceMgr.cpp	/^bool	WED_ResourceMgr::GetObjRelative(const string& obj_path, const string& parent_path, XObj8 *& obj)$/;"	f	class:WED_ResourceMgr
GetObjTerrainTypes	.\XESCore\ObjTables.cpp	/^void GetObjTerrainTypes(set<int>& outTypes)$/;"	f
GetObjType	.\RawImport\FAA_Obs.cpp	/^static int	GetObjType(const char * str)$/;"	f	file:
GetObjectBounds	.\XESTools\MapBuckets.cpp	/^void	MapFaceBucketTraits::GetObjectBounds(Object o, Point2& p1, Point2& p2)$/;"	f	class:MapFaceBucketTraits
GetObjectBounds	.\XESTools\MapBuckets.cpp	/^void	MapHalfedgeBucketTraits::GetObjectBounds(Object o, Point2& p1, Point2& p2)$/;"	f	class:MapHalfedgeBucketTraits
GetObjectBounds	.\XESTools\MapBuckets.cpp	/^void	MapVertexBucketTraits::GetObjectBounds(Object o, Point2& p1, Point2& p2)$/;"	f	class:MapVertexBucketTraits
GetObjectLesserRadius	.\AC3DPlugins\obj_radius.cpp	/^float GetObjectLesserRadius(float mins[3], float maxes[3])$/;"	f
GetOpen	.\WEDProperties\WED_PropertyTable.cpp	/^bool WED_PropertyTable::GetOpen(int id)$/;"	f	class:WED_PropertyTable
GetOrthoPhotos	.\RenderFarmUI\RF_ImageTool.cpp	/^void		RF_ImageTool::GetOrthoPhotos(void)$/;"	f	class:RF_ImageTool
GetOrthoPhotos	.\XPTools\GetImage.cpp	/^void	GetOrthoPhotos($/;"	f
GetOuterRing	.\WEDEntities\WED_GISPolygon.cpp	/^IGISPointSequence *		WED_GISPolygon::GetOuterRing(void )	const$/;"	f	class:WED_GISPolygon
GetPPM	.\WEDMap\WED_MapZoomerNew.cpp	/^double	WED_MapZoomerNew::GetPPM(void)$/;"	f	class:WED_MapZoomerNew
GetPackage	.\WEDXPlugin\WED_XPluginMgr.h	/^        string  GetPackage(){return mPackage;}$/;"	f	class:WED_XPluginMgr
GetPackagePath	.\WEDXPlugin\WED_XPluginMgr.cpp	/^string  WED_XPluginMgr::GetPackagePath()$/;"	f	class:WED_XPluginMgr
GetPadWidth	.\XESCore\Airports.cpp	/^static void GetPadWidth($/;"	f	file:
GetPageSize	.\GUI\GUI_Control.cpp	/^float	GUI_Control::GetPageSize(void) const$/;"	f	class:GUI_Control
GetPakVal	.\WEDWindows\WED_FilterBar.h	/^			int			GetPakVal(void) {return mCurPakVal;}$/;"	f	class:WED_FilterBar
GetPaneObj	.\ObjEdit\OE_Pane.cpp	/^OE_Pane *	OE_Pane::GetPaneObj(XPWidgetID inWidget)$/;"	f	class:OE_Pane
GetPaneObj	.\RenderFarmUI\RF_Pane.cpp	/^RF_Pane *	RF_Pane::GetPaneObj(XPWidgetID inWidget)$/;"	f	class:RF_Pane
GetPaneOwner	.\GUI\GUI_TabPane.cpp	/^GUI_Commander *	GUI_TabPane::GetPaneOwner(void)$/;"	f	class:GUI_TabPane
GetParam	.\XESCore\MapDefs.h	/^	float		GetParam(int p, float d) const { GISParamMap::const_iterator i = mParams.find(p); return (i == mParams.end()) ? d : i->second; }$/;"	f	class:GIS_face_data
GetParamAverage	.\XESCore\MapAlgs.cpp	/^float	GetParamAverage(const Pmwx::Face_handle f, const DEMGeo& dem, float * outMin, float * outMax)$/;"	f
GetParamConst	.\XESCore\DSFBuilder.cpp	/^float GetParamConst(const Face_handle face, int e)$/;"	f
GetParamHistogram	.\XESCore\MapAlgs.cpp	/^int	GetParamHistogram(const Pmwx::Face_handle f, const DEMGeo& dem, map<float, int>& outHistogram)$/;"	f
GetParent	.\GUI\GUI_Pane.cpp	/^GUI_Pane *	GUI_Pane::GetParent(void) const$/;"	f	class:GUI_Pane
GetParent	.\Utils\XCarBoneUtils.cpp	/^void *	XCarBones::GetParent(void * child)$/;"	f	class:XCarBones
GetParent	.\WEDEntities\WED_Thing.cpp	/^WED_Thing *		WED_Thing::GetParent(void) const$/;"	f	class:WED_Thing
GetPatternRunway	.\WEDEntities\WED_ATCFlow.cpp	/^int		WED_ATCFlow::GetPatternRunway(void) const$/;"	f	class:WED_ATCFlow
GetPavementTransparency	.\WEDMap\WED_PreviewLayer.cpp	/^float		WED_PreviewLayer::GetPavementTransparency(void) const$/;"	f	class:WED_PreviewLayer
GetPercentDone	.\Network\HTTPClient.cpp	/^float	HTTPRequest::GetPercentDone(void)$/;"	f	class:HTTPRequest
GetPixelBounds	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::GetPixelBounds($/;"	f	class:RF_MapZoomer
GetPixelBounds	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::GetPixelBounds($/;"	f	class:WED_MapZoomerNew
GetPlaneCount	.\Utils\XChunkyFileUtils.cpp	/^int	XAtomPlanerNumericTable::GetPlaneCount(void)$/;"	f	class:XAtomPlanerNumericTable
GetPointRuleForFeature	.\XESCore\Zoning.cpp	/^PointRule_t * GetPointRuleForFeature(int zoning, const GISPointFeature_t& f)$/;"	f
GetPol	.\WEDCore\WED_ResourceMgr.cpp	/^bool	WED_ResourceMgr::GetPol(const string& path, pol_info_t& out_info)$/;"	f	class:WED_ResourceMgr
GetPopupContainer	.\GUI\GUI_Application.cpp	/^GUI_Menu		GUI_Application::GetPopupContainer(void)$/;"	f	class:GUI_Application
GetPort	.\WEDNetwork\WED_Server.h	/^	unsigned short		GetPort(){return  mPort;}$/;"	f	class:WED_Server
GetPos	.\WEDXPlugin\WED_XPluginCamera.cpp	/^void WED_XPluginCamera::GetPos(XPLMCameraPosition_t * outCameraPosition)$/;"	f	class:WED_XPluginCamera
GetPos	.\WEDXPlugin\WED_XPluginEntity.cpp	/^void   WED_XPluginEntity::GetPos(float * outX,float * outY,float * outZ)$/;"	f	class:WED_XPluginEntity
GetPreviewObj	.\ObjEdit\OE_ProjectionMgr.cpp	/^const XObj&		OE_ProjectionMgr::GetPreviewObj(void)$/;"	f	class:OE_ProjectionMgr
GetProbeRef	.\WEDXPlugin\WED_XPluginMgr.h	/^        XPLMProbeRef GetProbeRef(){return mProbeRef;}$/;"	f	class:WED_XPluginMgr
GetProjector	.\ObjEdit\OE_ProjectionMgr.cpp	/^int			OE_ProjectionMgr::GetProjector(void)$/;"	f	class:OE_ProjectionMgr
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropBoolText
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropDoubleText
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleTextMeters::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropDoubleTextMeters
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropFileText
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropIntEnum
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropIntEnumBitfield
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropIntEnumSet
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropIntEnumSetFilter
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropIntEnumSetUnion
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropIntText
GetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::GetProperty(PropertyVal_t& val) const$/;"	f	class:WED_PropStringText
GetProperty	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::GetProperty(PropertyVal_t& v) const$/;"	f	class:WED_TypeField
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropBoolText
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropDoubleText
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropFileText
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropIntEnum
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropIntEnumBitfield
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropIntEnumSet
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropIntEnumSetFilter
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropIntEnumSetUnion
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropIntText
GetPropertyDict	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_PropStringText
GetPropertyDict	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::GetPropertyDict(PropertyDict_t& dict)$/;"	f	class:WED_TypeField
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropBoolText
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropDoubleText
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropFileText
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropIntEnum
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropIntEnumBitfield
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropIntEnumSet
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropIntEnumSetFilter
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropIntEnumSetUnion
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropIntText
GetPropertyDictItem	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_PropStringText
GetPropertyDictItem	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::GetPropertyDictItem(int e, string& item)$/;"	f	class:WED_TypeField
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropBoolText
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropDoubleText
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropFileText
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropIntEnum
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropIntEnumBitfield
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropIntEnumSet
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropIntEnumSetFilter
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropIntEnumSetUnion
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropIntText
GetPropertyInfo	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_PropStringText
GetPropertyInfo	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::GetPropertyInfo(PropertyInfo_t& info)$/;"	f	class:WED_TypeField
GetRandomRat	.\Utils\perlin.h	/^inline	float	GetRandomRat(int seed)$/;"	f
GetRange	.\Utils\PolyRasterUtils.h	/^bool		PolyRasterizer<Number>::GetRange(int& x1, int& x2)$/;"	f	class:PolyRasterizer
GetRawChar	.\VPF\VPFTable.cpp	/^const char *	GetRawChar(const char * inP, char& outValue, PlatformType endian)$/;"	f
GetRawDouble	.\VPF\VPFTable.cpp	/^const char *	GetRawDouble(const char * inP, double& outValue, PlatformType endian)$/;"	f
GetRawFloat	.\VPF\VPFTable.cpp	/^const char *	GetRawFloat(const char * inP, float& outValue, PlatformType endian)$/;"	f
GetRawInt	.\VPF\VPFTable.cpp	/^const char *	GetRawInt(const char * inP, int& outValue, PlatformType endian)$/;"	f
GetRawShort	.\VPF\VPFTable.cpp	/^const char *	GetRawShort(const char * inP, short& outValue, PlatformType endian)$/;"	f
GetRawUChar	.\VPF\VPFTable.cpp	/^const char *	GetRawUChar(const char * inP, unsigned char& outValue, PlatformType endian)$/;"	f
GetRawUInt	.\VPF\VPFTable.cpp	/^const char *	GetRawUInt(const char * inP, unsigned int& outValue, PlatformType endian)$/;"	f
GetRawUShort	.\VPF\VPFTable.cpp	/^const char *	GetRawUShort(const char * inP, unsigned short& outValue, PlatformType endian)$/;"	f
GetRealLinesShowing	.\WEDMap\WED_StructureLayer.cpp	/^bool		WED_StructureLayer::GetRealLinesShowing(void) const$/;"	f	class:WED_StructureLayer
GetReboneMatrix	.\Utils\XCarBoneUtils.cpp	/^void		XCarBones::GetReboneMatrix(void * who, double m[16])$/;"	f	class:XCarBones
GetRectMapCoords	.\RenderFarmUI\RF_SelectionTool.cpp	/^bool	RF_SelectionTool::GetRectMapCoords(double coords[4])$/;"	f	class:RF_SelectionTool
GetRedoName	.\WEDCore\WED_UndoMgr.cpp	/^string	WED_UndoMgr::GetRedoName(void) const$/;"	f	class:WED_UndoMgr
GetRegion	.\Obj\XObjBuilder.h	/^	inline int		GetRegion(void) const	{ return cockpit;		}$/;"	f	class:XObjBuilder
GetRemainingTriangles	.\XESCore\TriFan.cpp	/^void		TriFanBuilder::GetRemainingTriangles(list<CDT::Vertex_handle>& out_handles)$/;"	f	class:TriFanBuilder
GetResPath	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual string  GetResPath(){return mResPath;}$/;"	f	class:WED_XPluginEntity
GetResolver	.\WEDCore\WED_Archive.h	/^	IResolver *		GetResolver(void) { return mResolver; }$/;"	f	class:WED_Archive
GetResolver	.\WEDMap\WED_MapLayer.h	/^	inline	IResolver *			GetResolver(void) const { return mResolver; }$/;"	f	class:WED_MapLayer
GetResolver	.\WEDTCE\WED_TCELayer.h	/^	inline	IResolver *			GetResolver(void) const { return mResolver; }$/;"	f	class:WED_TCELayer
GetResource	.\WEDEntities\WED_DrapedOrthophoto.cpp	/^void		WED_DrapedOrthophoto::GetResource(	  string& r) const$/;"	f	class:WED_DrapedOrthophoto
GetResource	.\WEDEntities\WED_FacadePlacement.cpp	/^void		WED_FacadePlacement::GetResource(	  string& r) const$/;"	f	class:WED_FacadePlacement
GetResource	.\WEDEntities\WED_ForestPlacement.cpp	/^void		WED_ForestPlacement::GetResource(	  string& r) const$/;"	f	class:WED_ForestPlacement
GetResource	.\WEDEntities\WED_LinePlacement.cpp	/^void		WED_LinePlacement::GetResource(	  string& r) const$/;"	f	class:WED_LinePlacement
GetResource	.\WEDEntities\WED_ObjPlacement.cpp	/^void		WED_ObjPlacement::GetResource(	  string& r) const$/;"	f	class:WED_ObjPlacement
GetResource	.\WEDEntities\WED_PolygonPlacement.cpp	/^void		WED_PolygonPlacement::GetResource(	  string& r) const$/;"	f	class:WED_PolygonPlacement
GetResource	.\WEDEntities\WED_StringPlacement.cpp	/^void		WED_StringPlacement::GetResource(	  string& r) const$/;"	f	class:WED_StringPlacement
GetResourceChildren	.\WEDCore\WED_LibraryMgr.cpp	/^void		WED_LibraryMgr::GetResourceChildren(const string& r, int filter_package, vector<string>& children)$/;"	f	class:WED_LibraryMgr
GetResourceMgr	.\WEDCore\WED_Document.h	/^	WED_ResourceMgr *	GetResourceMgr(void) { return mResourceMgr; }$/;"	f	class:WED_Document
GetResourceParent	.\WEDCore\WED_LibraryMgr.cpp	/^string		WED_LibraryMgr::GetResourceParent(const string& r)$/;"	f	class:WED_LibraryMgr
GetResourcePath	.\WEDCore\WED_LibraryMgr.cpp	/^string		WED_LibraryMgr::GetResourcePath(const string& r)$/;"	f	class:WED_LibraryMgr
GetResourceType	.\WEDCore\WED_LibraryMgr.cpp	/^int			WED_LibraryMgr::GetResourceType(const string& r)$/;"	f	class:WED_LibraryMgr
GetResponseFields	.\Network\HTTPClient.cpp	/^void	HTTPRequest::GetResponseFields(FieldMap& outFields)$/;"	f	class:HTTPRequest
GetResponseName	.\Network\HTTPClient.cpp	/^string	HTTPRequest::GetResponseName(void)$/;"	f	class:HTTPRequest
GetResponseNum	.\Network\HTTPClient.cpp	/^int		HTTPRequest::GetResponseNum(void)$/;"	f	class:HTTPRequest
GetRoadDensity	.\XESCore\DEMAlgs.cpp	/^static float	GetRoadDensity(Pmwx::Halfedge_const_handle	he)$/;"	f	file:
GetRoadType	.\XESTools\HackExport.cpp	/^int	GetRoadType(Pmwx::Halfedge_handle e)$/;"	f
GetRoot	.\WEDCore\WED_Document.cpp	/^WED_Thing *		WED_Document::GetRoot(void)$/;"	f	class:WED_Document
GetRootForCommander	.\GUI\GUI_Commander.cpp	/^GUI_Commander *	GUI_Commander::GetRootForCommander(void)$/;"	f	class:GUI_Commander
GetRoughness	.\WEDEntities\WED_Runway.cpp	/^double		WED_Runway::GetRoughness(void) const { return roughness.value; }$/;"	f	class:WED_Runway
GetRowBottom	.\ObjEdit\OE_PatchList.cpp	/^int		OE_PatchTable::GetRowBottom(int col)$/;"	f	class:OE_PatchTable
GetRowCount	.\ObjEdit\OE_PatchList.cpp	/^int		OE_PatchTable::GetRowCount(void)$/;"	f	class:OE_PatchTable
GetRowCount	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::GetRowCount(void)$/;"	f	class:WED_AptTable
GetRowCount	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::GetRowCount(void)$/;"	f	class:WED_ICAOTable
GetRowCount	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::GetRowCount(void)$/;"	f	class:WED_VerTable
GetRowCount	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::GetRowCount(void)$/;"	f	class:WED_LibraryListAdapter
GetRowCount	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::GetRowCount(void)$/;"	f	class:WED_ToolInfoAdapter
GetRowCount	.\WEDProperties\WED_PropertyTable.cpp	/^int			WED_PropertyTable::GetRowCount(void)$/;"	f	class:WED_PropertyTable
GetRowCount	.\WEDWindows\WED_FilterBar.cpp	/^int			WED_FilterBar::GetRowCount(void)$/;"	f	class:WED_FilterBar
GetRowCount	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::GetRowCount(void)$/;"	f	class:WED_PackageListAdapter
GetRunway	.\WEDEntities\WED_TaxiRoute.cpp	/^int		WED_TaxiRoute::GetRunway(void) const$/;"	f	class:WED_TaxiRoute
GetSceneryID	.\WEDEntities\WED_Airport.cpp	/^int		WED_Airport::GetSceneryID(void) const$/;"	f	class:WED_Airport
GetScrollBounds	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::GetScrollBounds(float outTotalBounds[4], float outVisibleBounds[4])$/;"	f	class:GUI_SimpleScroller
GetScrollBounds	.\GUI\GUI_Table.cpp	/^void	GUI_Table::GetScrollBounds(float outTotalBounds[4], float outVisibleBounds[4])$/;"	f	class:GUI_Table
GetScrollBounds	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::GetScrollBounds(float outTotalBounds[4], float outVisibleBounds[4])$/;"	f	class:GUI_TextField
GetScrollBounds	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::GetScrollBounds(float outTotalBounds[4], float outVisibleBounds[4])$/;"	f	class:WED_MapZoomerNew
GetScrollH	.\GUI\GUI_Table.cpp	/^int			GUI_Table::GetScrollH(void)$/;"	f	class:GUI_Table
GetScrollV	.\GUI\GUI_Table.cpp	/^int			GUI_Table::GetScrollV(void)$/;"	f	class:GUI_Table
GetScrollbarValues	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::GetScrollbarValues($/;"	f	class:RF_MapZoomer
GetSel	.\WEDMap\WED_Map.cpp	/^ISelection *	WED_Map::GetSel()$/;"	f	class:WED_Map
GetSel	.\WEDTCE\WED_TCE.cpp	/^ISelection *	WED_TCE::GetSel()$/;"	f	class:WED_TCE
GetSelection	.\OGLE\ogle.cpp	/^void			OGLE::GetSelection($/;"	f	class:OGLE
GetSelection	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::GetSelection($/;"	f	class:WED_AptTable
GetSelection	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::GetSelection($/;"	f	class:WED_ICAOTable
GetSelection	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::GetSelection($/;"	f	class:WED_VerTable
GetSelection	.\WEDWindows\WED_PackageListAdapter.cpp	/^int	WED_PackageListAdapter::GetSelection(string * package)$/;"	f	class:WED_PackageListAdapter
GetSelectionCount	.\WEDEntities\WED_Select.cpp	/^int				WED_Select::GetSelectionCount(void) const$/;"	f	class:WED_Select
GetSelectionID	.\WEDCore\WED_Persistent.h	/^	virtual		int			GetSelectionID(void) const { return mID; }$/;"	f	class:WED_Persistent
GetSelectionSet	.\WEDEntities\WED_Select.cpp	/^void			WED_Select::GetSelectionSet(set<ISelectable *>& sel) const$/;"	f	class:WED_Select
GetSelectionVector	.\WEDEntities\WED_Select.cpp	/^void			WED_Select::GetSelectionVector(vector<ISelectable *>& sel) const$/;"	f	class:WED_Select
GetServer	.\WEDCore\WED_Document.cpp	/^WED_Server *	WED_Document::GetServer(void)$/;"	f	class:WED_Document
GetShoulder	.\WEDEntities\WED_Runway.cpp	/^int			WED_Runway::GetShoulder(void) const$/;"	f	class:WED_Runway
GetShowForFacID	.\WEDImportExport\WED_DSFImport.cpp	/^	int GetShowForFacID(int id)$/;"	f	class:DSF_Importer
GetShowForObjID	.\WEDImportExport\WED_DSFImport.cpp	/^	int GetShowForObjID(int id)$/;"	f	class:DSF_Importer
GetShowLevel	.\WEDEntities\WED_FacadePlacement.cpp	/^int			WED_FacadePlacement::GetShowLevel(void) const$/;"	f	class:WED_FacadePlacement
GetShowLevel	.\WEDEntities\WED_ObjPlacement.cpp	/^int			WED_ObjPlacement::GetShowLevel(void) const$/;"	f	class:WED_ObjPlacement
GetSide	.\WEDEntities\WED_GISChain.cpp	/^bool		WED_GISChain::GetSide(GISLayer_t l,int n, Segment2& s, Bezier2& b) const$/;"	f	class:WED_GISChain
GetSide	.\WEDEntities\WED_GISEdge.cpp	/^bool				WED_GISEdge::GetSide  (GISLayer_t l,int n, Segment2& s, Bezier2& b) const$/;"	f	class:WED_GISEdge
GetSide	.\WEDEntities\WED_GISLine.cpp	/^bool				WED_GISLine::GetSide(GISLayer_t l,int n, Segment2& s, Bezier2& b) const$/;"	f	class:WED_GISLine
GetSnowLine	.\XESCore\DEMAlgs.cpp	/^static	float	GetSnowLine(float lat, float moisture)$/;"	f	file:
GetSource	.\WEDEntities\WED_GISLine.cpp	/^IGISPoint *		WED_GISLine::GetSource(void) const$/;"	f	class:WED_GISLine
GetSpacing	.\WEDEntities\WED_StringPlacement.cpp	/^double			WED_StringPlacement::GetSpacing	(void) const$/;"	f	class:WED_StringPlacement
GetSplitPoint	.\GUI\GUI_Splitter.cpp	/^int		GUI_Splitter::GetSplitPoint(void)$/;"	f	class:GUI_Splitter
GetSplitSize	.\GUI\GUI_Splitter.cpp	/^int		GUI_Splitter::GetSplitSize(void)$/;"	f	class:GUI_Splitter
GetStats	.\Utils\PerfUtils.h	/^	void	GetStats(double& totalSeconds, unsigned long& calls)$/;"	f	class:PerfTimer
GetStatus	.\Network\PCSBSocket.lin.cpp	/^PCSBSocket::Status PCSBSocket::GetStatus(void)$/;"	f	class:PCSBSocket
GetStatus	.\Network\PCSBSocket.win.cpp	/^PCSBSocket::Status PCSBSocket::GetStatus(void)$/;"	f	class:PCSBSocket
GetStatus	.\WEDXPlugin\WED_XPluginClient.h	/^		  		string	GetStatus(){return mStatus;}$/;"	f	class:WED_XPluginClient
GetStatusText	.\RenderFarmUI\RF_BezierTestTool.cpp	/^char *	RF_BezierTestTool::GetStatusText(void)$/;"	f	class:RF_BezierTestTool
GetStatusText	.\RenderFarmUI\RF_CropTool.cpp	/^char *	RF_CropTool::GetStatusText(int x, int y)$/;"	f	class:RF_CropTool
GetStatusText	.\RenderFarmUI\RF_ImageTool.cpp	/^char *	RF_ImageTool::GetStatusText(int x, int y)$/;"	f	class:RF_ImageTool
GetStatusText	.\RenderFarmUI\RF_MeshTester.cpp	/^char *	RF_MeshTester::GetStatusText(void)$/;"	f	class:RF_MeshTester
GetStatusText	.\RenderFarmUI\RF_SelectionTool.cpp	/^char *	RF_SelectionTool::GetStatusText(int x, int y)$/;"	f	class:RF_SelectionTool
GetStatusText	.\RenderFarmUI\RF_TerraTool.cpp	/^char *	RF_TerraTool::GetStatusText(int x, int y)$/;"	f	class:RF_TerraTool
GetStatusText	.\RenderFarmUI\RF_TopoTester.cpp	/^char *	RF_TopoTester::GetStatusText(void)$/;"	f	class:RF_TopoTester
GetStatusText	.\RenderFarmUI\RF_TriTestTool.cpp	/^char *	RF_TriTestTool::GetStatusText(int x, int y)$/;"	f	class:RF_TriTestTool
GetStatusText	.\WEDMap\WED_CreateBoxTool.cpp	/^const char *	WED_CreateBoxTool::GetStatusText(void)$/;"	f	class:WED_CreateBoxTool
GetStatusText	.\WEDMap\WED_CreateEdgeTool.cpp	/^const char *		WED_CreateEdgeTool::GetStatusText(void)$/;"	f	class:WED_CreateEdgeTool
GetStatusText	.\WEDMap\WED_CreateLineTool.cpp	/^const char *	WED_CreateLineTool::GetStatusText(void)$/;"	f	class:WED_CreateLineTool
GetStatusText	.\WEDMap\WED_CreatePointTool.cpp	/^const char *	WED_CreatePointTool::GetStatusText(void)$/;"	f	class:WED_CreatePointTool
GetStatusText	.\WEDMap\WED_CreatePolygonTool.cpp	/^const char *	WED_CreatePolygonTool::GetStatusText(void)$/;"	f	class:WED_CreatePolygonTool
GetStatusText	.\WEDMap\WED_MarqueeTool.h	/^	virtual	const char *		GetStatusText(void) { return NULL; }$/;"	f	class:WED_MarqueeTool
GetStatusText	.\WEDMap\WED_VertexTool.h	/^	virtual	const char *		GetStatusText(void) { return NULL; }$/;"	f	class:WED_VertexTool
GetStatusText	.\WEDTCE\WED_TCEMarqueeTool.h	/^	virtual	const char *		GetStatusText(void) { return NULL; }$/;"	f	class:WED_TCEMarqueeTool
GetStatusText	.\WEDTCE\WED_TCEToolAdapter.cpp	/^const char *		WED_TCEToolAdapter::GetStatusText(void)$/;"	f	class:WED_TCEToolAdapter
GetStatusText	.\WEDTCE\WED_TCEVertexTool.h	/^	virtual	const char *		GetStatusText(void) { return NULL; }$/;"	f	class:WED_TCEVertexTool
GetSticky	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::GetSticky(float outSticky[4])$/;"	f	class:GUI_Pane
GetSubObject	.\Network\XMLObject.cpp	/^XMLObject *	XMLObject::GetSubObject(long inIndex)$/;"	f	class:XMLObject
GetSupportedType	.\Utils\BitmapUtils.cpp	/^int GetSupportedType(const char * path)$/;"	f
GetSurface	.\WEDEntities\WED_Helipad.cpp	/^int			WED_Helipad::GetSurface(void) const$/;"	f	class:WED_Helipad
GetSurface	.\WEDEntities\WED_Runway.cpp	/^int			WED_Runway::GetSurface(void) const$/;"	f	class:WED_Runway
GetSurface	.\WEDEntities\WED_Taxiway.cpp	/^int			WED_Taxiway::GetSurface(void) const$/;"	f	class:WED_Taxiway
GetTab	.\GUI\GUI_TabPane.cpp	/^int				GUI_TabPane::GetTab(void) const$/;"	f	class:GUI_TabPane
GetTag	.\Network\XMLObject.cpp	/^void	XMLObject::GetTag(std::string& outTag)$/;"	f	class:XMLObject
GetTaggedSubObject	.\Network\XMLObject.cpp	/^XMLObject *	XMLObject::GetTaggedSubObject(const std::string& inKey, long inIndex)$/;"	f	class:XMLObject
GetTarget	.\WEDEntities\WED_GISLine.cpp	/^IGISPoint *		WED_GISLine::GetTarget(void) const$/;"	f	class:WED_GISLine
GetTexID	.\WEDCore\WED_TexMgr.cpp	/^int			WED_TexMgr::GetTexID(TexRef ref)$/;"	f	class:WED_TexMgr
GetTexInfo	.\WEDCore\WED_TexMgr.cpp	/^void		WED_TexMgr::GetTexInfo($/;"	f	class:WED_TexMgr
GetText	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::GetText($/;"	f	class:GUI_TextField
GetText	.\WEDWindows\WED_FilterBar.h	/^			string		GetText(void) { return mText; }$/;"	f	class:WED_FilterBar
GetTextCB	.\OGLE\ogle.cpp	/^void			OGLE::GetTextCB($/;"	f	class:OGLE
GetText_f	.\OGLE\ogle.h	/^	void			(* GetText_f)($/;"	m	struct:OGLE_Callbacks
GetTexture	.\ObjEdit\OE_ProjectionMgr.cpp	/^OE_Texture_t&	OE_ProjectionMgr::GetTexture(void)$/;"	f	class:OE_ProjectionMgr
GetTexture	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_Texture_t&	OE_PatchEdPane::GetTexture(void)$/;"	f	class:OE_PatchEdPane
GetThemeInfo	.\Network\Terraserver.cpp	/^int	GetThemeInfo(const char *inTheme, string	info[9])$/;"	f
GetThingDepth	.\WEDProperties\WED_PropertyTable.cpp	/^int			WED_PropertyTable::GetThingDepth(WED_Thing * d)$/;"	f	class:WED_PropertyTable
GetThingResouce	.\WEDCore\WED_Validate.cpp	/^static bool GetThingResouce(WED_Thing * who, string& r)$/;"	f	file:
GetTightnessBlend	.\XESCore\DSFBuilder.cpp	/^static double GetTightnessBlend(CDT& inMesh, CDT::Face_handle f_han, CDT::Vertex_handle v_han, int terrain)$/;"	f	file:
GetTileDocument	.\WEDCore\WED_Package.cpp	/^WED_Document *	WED_Package::GetTileDocument(int lon, int lat)$/;"	f	class:WED_Package
GetTileStatus	.\WEDCore\WED_Package.cpp	/^int				WED_Package::GetTileStatus(int lon, int lat)$/;"	f	class:WED_Package
GetTilesForArea	.\Network\Terraserver.cpp	/^int	GetTilesForArea(const char * scale,$/;"	f
GetTimeNow	.\GUI\GUI_Pane.cpp	/^float		GUI_Pane::GetTimeNow(void)$/;"	f	class:GUI_Pane
GetToolName	.\WEDMap\WED_MapToolNew.cpp	/^const char *	WED_MapToolNew::GetToolName(void) const$/;"	f	class:WED_MapToolNew
GetToolName	.\WEDTCE\WED_TCEToolNew.cpp	/^const char *	WED_TCEToolNew::GetToolName(void) const$/;"	f	class:WED_TCEToolNew
GetTopBar	.\WEDMap\WED_MapPane.cpp	/^GUI_Pane *	WED_MapPane::GetTopBar(void)$/;"	f	class:WED_MapPane
GetTopoMode	.\WEDEntities\WED_FacadePlacement.cpp	/^WED_FacadePlacement::TopoMode		WED_FacadePlacement::GetTopoMode(void) const $/;"	f	class:WED_FacadePlacement
GetTotalBounds	.\WEDMap\WED_MarqueeTool.cpp	/^bool	WED_MarqueeTool::GetTotalBounds(void) const$/;"	f	class:WED_MarqueeTool
GetTotalBounds	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^bool	WED_TCEMarqueeTool::GetTotalBounds(void) const$/;"	f	class:WED_TCEMarqueeTool
GetTotalExpected	.\Network\HTTPClient.cpp	/^int		HTTPRequest::GetTotalExpected(void)$/;"	f	class:HTTPRequest
GetTransform	.\ObjEdit\OE_CubeDeformer.cpp	/^void	OE_CubeDeformer::GetTransform(double	outTransform[16])$/;"	f	class:OE_CubeDeformer
GetType	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual int     GetType(){return mType;}$/;"	f	class:WED_XPluginEntity
GetUndoMgr	.\WEDCore\WED_Document.cpp	/^WED_UndoMgr *	WED_Document::GetUndoMgr(void)$/;"	f	class:WED_Document
GetUndoName	.\WEDCore\WED_UndoMgr.cpp	/^string	WED_UndoMgr::GetUndoName(void) const$/;"	f	class:WED_UndoMgr
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropBoolText
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropDoubleText
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropFileText
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropIntEnum
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropIntEnumBitfield
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropIntEnumSet
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropIntEnumSetFilter
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropIntEnumSetUnion
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropIntText
GetUpdate	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_PropStringText
GetUpdate	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::GetUpdate(SQL_Update& io_update)$/;"	f	class:WED_TypeField
GetVPFLink	.\VPF\VPFImport.cpp	/^static bool GetVPFLink(VPFTableIterator& iter, const VPF_TableDef& header, int row, int& value)$/;"	f	file:
GetValue	.\GUI\GUI_Control.cpp	/^float	GUI_Control::GetValue(void) const$/;"	f	class:GUI_Control
GetValueForTime	.\Utils\XCarBoneUtils.cpp	/^double	GetValueForTime(double inTime, const XCarBone::KeyTable& inTable)$/;"	f
GetVerticesShowing	.\WEDMap\WED_StructureLayer.cpp	/^bool		WED_StructureLayer::GetVerticesShowing(void) const$/;"	f	class:WED_StructureLayer
GetVisible	.\UI\XWin.lin.cpp	/^bool XWin::GetVisible(void) const$/;"	f	class:XWin
GetVisible	.\UI\XWin.win.cpp	/^bool			XWin::GetVisible(void) const$/;"	f	class:XWin
GetVisibleBounds	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::GetVisibleBounds(int outBounds[4])$/;"	f	class:GUI_Pane
GetVisibleBounds	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::GetVisibleBounds($/;"	f	class:GUI_TextField
GetVisibleBoundsCB	.\OGLE\ogle.cpp	/^void			OGLE::GetVisibleBoundsCB($/;"	f	class:OGLE
GetVisibleBounds_f	.\OGLE\ogle.h	/^	void			(* GetVisibleBounds_f)($/;"	m	struct:OGLE_Callbacks
GetWallType	.\WEDEntities\WED_FacadeNode.cpp	/^int		WED_FacadeNode::GetWallType(void) const$/;"	f	class:WED_FacadeNode
GetWaterBlend	.\XESCore\DSFBuilder.cpp	/^static double GetWaterBlend(CDT::Vertex_handle v_han, const DEMGeo& dem_land, const DEMGeo& dem_water)$/;"	f	file:
GetWidget	.\ObjEdit\OE_Pane.cpp	/^XPWidgetID	OE_Pane::GetWidget(void)$/;"	f	class:OE_Pane
GetWidget	.\RenderFarmUI\RF_Pane.cpp	/^XPWidgetID	RF_Pane::GetWidget(void)$/;"	f	class:RF_Pane
GetWidth	.\WEDEntities\WED_GISLine_Width.cpp	/^double	WED_GISLine_Width::GetWidth (void		 ) const$/;"	f	class:WED_GISLine_Width
GetWidth	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^double	WED_GISPoint_HeadingWidthLength::GetWidth (void		 ) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
GetWindowLoc	.\UI\XWin.lin.cpp	/^void XWin::GetWindowLoc(int * outX, int * outY)$/;"	f	class:XWin
GetWindowLoc	.\UI\XWin.win.cpp	/^void			XWin::GetWindowLoc(int * outX, int * outY)$/;"	f	class:XWin
GetWritePos	.\WEDCore\WED_Buffer.cpp	/^void WED_Buffer::GetWritePos(intptr_t& a, intptr_t& b)$/;"	f	class:WED_Buffer
GetXPlaneFolder	.\WEDCore\WED_PackageMgr.cpp	/^bool		WED_PackageMgr::GetXPlaneFolder(string& root) const$/;"	f	class:WED_PackageMgr
GetXonDist	.\XESCore\MeshAlgs.cpp	/^inline double GetXonDist(int layer1, int layer2, double y_normal)$/;"	f
GetZoning	.\XESCore\MapDefs.h	/^	int			GetZoning(void) const { GISParamMap::const_iterator i = mParams.find(af_Zoning); return (i == mParams.end()) ? NO_VALUE : i->second; }$/;"	f	class:GIS_face_data
GetZoomer	.\RenderFarmUI\RF_MapTool.h	/^	inline RF_MapZoomer *	GetZoomer(void) const { return mZoomer; }$/;"	f	class:RF_MapTool
GetZoomer	.\WEDMap\WED_MapLayer.h	/^	inline	WED_MapZoomerNew *	GetZoomer(void) const { return mZoomer; }$/;"	f	class:WED_MapLayer
GetZoomer	.\WEDTCE\WED_TCELayer.h	/^	inline	WED_MapZoomerNew *	GetZoomer(void) const { return mZoomer; }$/;"	f	class:WED_TCELayer
GetbyId	.\WEDXPlugin\WED_XPluginMgr.cpp	/^WED_XPluginEntity * WED_XPluginMgr::GetbyId(int inId)$/;"	f	class:WED_XPluginMgr
GiveFeedback	.\GUI\GUI_Window.cpp	/^HRESULT GUI_DropSource::GiveFeedback(DWORD dwEffect)$/;"	f	class:GUI_DropSource
Gradient2Tensor	.\Utils\TensorUtils.h	/^inline Vector2		Gradient2Tensor(const Vector2& g)$/;"	f
GreedyMeshBuild	.\XESCore\GreedyMesh.cpp	/^void	GreedyMeshBuild(CDT& inCDT, const DEMGeo& inAvail, DEMMask& ioUsed, double err_lim, double size_lim, int max_num, ProgressFunc func)$/;"	f
GroupNode	.\XPTools\AddObjects.cpp	/^GroupNode::GroupNode(double inChance) :$/;"	f	class:GroupNode
GroupNode	.\XPTools\AddObjects.cpp	/^class	GroupNode : public SceneryNode {$/;"	c	file:
H	.\Utils\md5.c	64;"	d	file:
HACKEXPORT_H	.\XESTools\HackExport.h	24;"	d
HACK_HEIGHT	.\WEDWindows\WED_PackageListAdapter.cpp	31;"	d	file:
HACK_SAFETY_AMOUNT	.\Utils\RoadNetUtils.cpp	728;"	d	file:
HACK_WIDTH	.\WEDWindows\WED_PackageListAdapter.cpp	30;"	d	file:
HANDLE_RAD	.\WEDMap\WED_HandleToolBase.cpp	49;"	d	file:
HASH_MAP_NAMESPACE_END	.\Obj\XDefs.h	212;"	d
HASH_MAP_NAMESPACE_END	.\Obj\XDefs.h	228;"	d
HASH_MAP_NAMESPACE_START	.\Obj\XDefs.h	211;"	d
HASH_MAP_NAMESPACE_START	.\Obj\XDefs.h	227;"	d
HASH_PARENT	.\Obj\XDefs.h	213;"	d
HASH_PARENT	.\Obj\XDefs.h	229;"	d
HAS_GATEWAY	.\Obj\XDefs.h	89;"	d
HAVE_BOOLEAN	.\Utils\BitmapUtils.cpp	177;"	d	file:
HEAVY_VALIDATION	.\Utils\Skeleton.cpp	123;"	d	file:
HEIGHT_SPREAD_FACTOR	.\XESCore\Zoning.cpp	1138;"	d	file:
HELP_ADD_MISSING_WATER	.\XESTools\GISTool_VectorCmds.cpp	785;"	d	file:
HELP_DESLIVER	.\XESTools\GISTool_VectorCmds.cpp	754;"	d	file:
HELP_KILL_SLIVER_WATER	.\XESTools\GISTool_VectorCmds.cpp	765;"	d	file:
HELP_KILL_SLOPED_WATER	.\XESTools\GISTool_VectorCmds.cpp	775;"	d	file:
HELP_REDUCE_VECTORS	.\XESTools\GISTool_VectorCmds.cpp	736;"	d	file:
HELP_REMOVE_ISLANDS	.\XESTools\GISTool_VectorCmds.cpp	835;"	d	file:
HELP_REMOVE_OUTSETS	.\XESTools\GISTool_VectorCmds.cpp	822;"	d	file:
HELP_REMOVE_WET_ANTENNAS	.\XESTools\GISTool_VectorCmds.cpp	847;"	d	file:
HELP_SHAPE_EXPORT	.\XESTools\GISTool_VectorCmds.cpp	617;"	d	file:
HELP_SHAPE_IMPORT	.\XESTools\GISTool_VectorCmds.cpp	558;"	d	file:
HH	.\Utils\md5.c	82;"	d	file:
HIST_MAX	.\XESCore\DEMDefs.cpp	28;"	d	file:
HL_CAMERA_H	.\Utils\HLCamera.h	24;"	d
HTTPCLIENT_H	.\Network\HTTPClient.h	24;"	d
HTTPConnection	.\Network\HTTPClient.cpp	/^HTTPConnection::HTTPConnection($/;"	f	class:HTTPConnection
HTTPConnection	.\Network\HTTPClient.h	/^class	HTTPConnection {$/;"	c
HTTPRequest	.\Network\HTTPClient.cpp	/^HTTPRequest::HTTPRequest($/;"	f	class:HTTPRequest
HTTPRequest	.\Network\HTTPClient.h	/^class	HTTPRequest {$/;"	c
HYDRO2_H	.\XESCore\Hydro2.h	25;"	d
HYDRO_H	.\XESCore\Hydro.h	25;"	d
HackExport	.\XESTools\HackExport.cpp	/^void	HackExport(Pmwx& ioMap, const char * inFileName)$/;"	f
HackFixTextures	.\XPTools\HackFixTextures.cpp	/^void	HackFixTextures(const char * fnames[4], const char * fname)$/;"	f
HackKernel	.\XESCore\BlockAlgs.cpp	/^typedef CGAL::Filtered_kernel< CGAL::Simple_cartesian<double> >	HackKernel;$/;"	t	file:
HalfedgeTree	.\RenderFarmUI\RF_DrawMap.h	/^	typedef	RTree2<Halfedge_handle,16>	HalfedgeTree;$/;"	t	struct:PmwxIndex_t
HalfedgeVector	.\XESCore\WTPM.h	/^	typedef vector<DHalfedge *>						HalfedgeVector;$/;"	t	struct:WTPM_Line
Halfedge_const_handle	.\XESCore\MapDefs.h	/^typedef Arrangement_2::Halfedge_const_handle                Halfedge_const_handle;$/;"	t
Halfedge_const_handle	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Halfedge_const_handle  Halfedge_const_handle;$/;"	t	class:PmwxFmt	file:
Halfedge_handle	.\XESCore\MapDefs.h	/^typedef Arrangement_2::Halfedge_handle                Halfedge_handle;$/;"	t
Halfedge_handle	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Halfedge_handle        Halfedge_handle;$/;"	t	class:PmwxFmt	file:
Halfedge_handle_A	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementA::Halfedge_const_handle  Halfedge_handle_A;$/;"	t	class:Arr_full_overlay_traits	file:
Halfedge_handle_A	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementA::Halfedge_const_handle  Halfedge_handle_A;$/;"	t	class:Arr_replace_overlay_traits	file:
Halfedge_handle_B	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementB::Halfedge_const_handle  Halfedge_handle_B;$/;"	t	class:Arr_full_overlay_traits	file:
Halfedge_handle_B	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementB::Halfedge_const_handle  Halfedge_handle_B;$/;"	t	class:Arr_replace_overlay_traits	file:
Halfedge_handle_R	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementR::Halfedge_handle        Halfedge_handle_R;$/;"	t	class:Arr_full_overlay_traits	file:
Halfedge_handle_R	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementR::Halfedge_handle        Halfedge_handle_R;$/;"	t	class:Arr_replace_overlay_traits	file:
HandleAssert	.\DSFTools\DSF2TextGUI.cpp	/^void HandleAssert(const char * condition, const char * file, int line)$/;"	f
HandleChars	.\Network\XMLObject.cpp	/^void HandleChars(void *userData,const XML_Char *s,int len)$/;"	f
HandleClick	.\ObjEdit\OE_Pane.cpp	/^int		OE_Pane::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:OE_Pane
HandleClick	.\ObjEdit\OE_Preview.cpp	/^int	OE_Preview::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:OE_Preview
HandleClick	.\ObjEdit\OE_TablePane.cpp	/^int		OE_TablePane::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:OE_TablePane
HandleClick	.\ObjEdit\OE_TexEdWindow.cpp	/^int			OE_DirectEdPane::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:OE_DirectEdPane
HandleClick	.\ObjEdit\OE_TexEdWindow.cpp	/^int			OE_PatchEdPane::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:OE_PatchEdPane
HandleClick	.\ObjEdit\OE_TexEdWindow.cpp	/^int			OE_TexEdPane::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:OE_TexEdPane
HandleClick	.\RenderFarmUI\RF_BezierTestTool.cpp	/^bool	RF_BezierTestTool::HandleClick($/;"	f	class:RF_BezierTestTool
HandleClick	.\RenderFarmUI\RF_CropTool.cpp	/^bool	RF_CropTool::HandleClick($/;"	f	class:RF_CropTool
HandleClick	.\RenderFarmUI\RF_ImageTool.cpp	/^bool	RF_ImageTool::HandleClick($/;"	f	class:RF_ImageTool
HandleClick	.\RenderFarmUI\RF_MeshTester.cpp	/^bool	RF_MeshTester::HandleClick($/;"	f	class:RF_MeshTester
HandleClick	.\RenderFarmUI\RF_Pane.cpp	/^int		RF_Pane::HandleClick(XPLMMouseStatus status, int x, int y, int button)$/;"	f	class:RF_Pane
HandleClick	.\RenderFarmUI\RF_SelectionTool.cpp	/^bool	RF_SelectionTool::HandleClick($/;"	f	class:RF_SelectionTool
HandleClick	.\RenderFarmUI\RF_TerraTool.cpp	/^bool	RF_TerraTool::HandleClick($/;"	f	class:RF_TerraTool
HandleClick	.\RenderFarmUI\RF_TopoTester.cpp	/^bool	RF_TopoTester::HandleClick($/;"	f	class:RF_TopoTester
HandleClick	.\RenderFarmUI\RF_TriTestTool.cpp	/^bool	RF_TriTestTool::HandleClick($/;"	f	class:RF_TriTestTool
HandleClickDown	.\WEDMap\WED_HandleToolBase.cpp	/^int			WED_HandleToolBase::HandleClickDown			(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_HandleToolBase
HandleClickDown	.\WEDMap\WED_MapLayer.h	/^	virtual	int					HandleClickDown(int inX, int inY, int inButton, GUI_KeyFlags modifiers) { return 0; }$/;"	f	class:WED_MapLayer
HandleClickDown	.\WEDNetwork\WED_NWInfoLayer.cpp	/^int			WED_NWInfoLayer::HandleClickDown(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_NWInfoLayer
HandleClickDown	.\WEDTCE\WED_TCEToolAdapter.cpp	/^int					WED_TCEToolAdapter::HandleClickDown(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_TCEToolAdapter
HandleClickDrag	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::HandleClickDrag			(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_HandleToolBase
HandleClickDrag	.\WEDMap\WED_MapLayer.h	/^	virtual	void				HandleClickDrag(int inX, int inY, int inButton, GUI_KeyFlags modifiers) {			}$/;"	f	class:WED_MapLayer
HandleClickDrag	.\WEDNetwork\WED_NWInfoLayer.cpp	/^void		WED_NWInfoLayer::HandleClickDrag(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_NWInfoLayer
HandleClickDrag	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void				WED_TCEToolAdapter::HandleClickDrag(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_TCEToolAdapter
HandleClickUp	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::HandleClickUp			(int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_HandleToolBase
HandleClickUp	.\WEDMap\WED_MapLayer.h	/^	virtual	void				HandleClickUp  (int inX, int inY, int inButton, GUI_KeyFlags modifiers)	{			}$/;"	f	class:WED_MapLayer
HandleClickUp	.\WEDNetwork\WED_NWInfoLayer.cpp	/^void		WED_NWInfoLayer::HandleClickUp  (int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_NWInfoLayer
HandleClickUp	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void				WED_TCEToolAdapter::HandleClickUp  (int inX, int inY, int inButton, GUI_KeyFlags modifiers)$/;"	f	class:WED_TCEToolAdapter
HandleCommand	.\GUI\GUI_Application.cpp	/^int			GUI_Application::HandleCommand(int command)$/;"	f	class:GUI_Application
HandleCommand	.\GUI\GUI_Commander.h	/^	virtual	int				HandleCommand(int command) 									{ return 0; }$/;"	f	class:GUI_Commander
HandleCommand	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::HandleCommand(int command)$/;"	f	class:GUI_TextField
HandleCommand	.\RenderFarmUI\RF_Application.cpp	/^int		RF_Application::HandleCommand(int command)$/;"	f	class:RF_Application
HandleCommand	.\RenderFarmUI\RF_MapView.cpp	/^int		RF_MapView::HandleCommand(int command)$/;"	f	class:RF_MapView
HandleCommand	.\WEDCore\WED_Application.cpp	/^int		WED_Application::HandleCommand(int command)$/;"	f	class:WED_Application
HandleCommand	.\WEDWindows\WED_DocumentWindow.cpp	/^int	WED_DocumentWindow::HandleCommand(int command)$/;"	f	class:WED_DocumentWindow
HandleCommand	.\WEDWindows\WED_PackageWindow.cpp	/^int	WED_PackageWindow::HandleCommand(int command)$/;"	f	class:WED_PackageWindow
HandleCommand	.\WEDWindows\WED_StartWindow.cpp	/^int			WED_StartWindow::HandleCommand(int command)$/;"	f	class:WED_StartWindow
HandleFlags	.\XESCore\DEMTables.cpp	/^bool HandleFlags(const vector<string>& tokens, void * ref)$/;"	f
HandleInclude	.\XESCore\ConfigSystem.cpp	/^static bool HandleInclude(const vector<string>& args, void * ref)$/;"	f	file:
HandleKey	.\ObjEdit\OE_Pane.cpp	/^int		OE_Pane::HandleKey(char key, XPLMKeyFlags flags, char vkey)$/;"	f	class:OE_Pane
HandleKey	.\RenderFarmUI\RF_Pane.cpp	/^int		RF_Pane::HandleKey(char key, XPLMKeyFlags flags, char vkey)$/;"	f	class:RF_Pane
HandleKeyPress	.\GUI\GUI_Commander.h	/^	virtual	int				HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)	 	{ return 0; }$/;"	f	class:GUI_Commander
HandleKeyPress	.\GUI\GUI_FormWindow.cpp	/^int			GUI_FormWindow::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:GUI_FormWindow
HandleKeyPress	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:GUI_TextField
HandleKeyPress	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTable::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:GUI_TextTable
HandleKeyPress	.\RenderFarmUI\RF_MapView.cpp	/^int		RF_MapView::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:RF_MapView
HandleKeyPress	.\WEDMap\WED_Map.cpp	/^int			WED_Map::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_Map
HandleKeyPress	.\WEDTCE\WED_TCE.cpp	/^int			WED_TCE::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_TCE
HandleKeyPress	.\WEDWindows\WED_DocumentWindow.cpp	/^int	WED_DocumentWindow::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_DocumentWindow
HandleKeyPress	.\WEDWindows\WED_PackageWindow.cpp	/^int	WED_PackageWindow::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_PackageWindow
HandleKeyPress	.\WEDWindows\WED_StartWindow.cpp	/^int			WED_StartWindow::HandleKeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_StartWindow
HandleMenuCmd	.\UI\XGrinderApp.cpp	/^	virtual	int				HandleMenuCmd(xmenu inMenu, int inCommand) { return XGrinderMenuPick(inMenu, inCommand); };$/;"	f	class:XGrinderWin
HandleMenuCmd	.\UI\XPWidgetWin.cpp	/^int		XPWidgetWin::HandleMenuCmd(xmenu inMenu, int inCommand)$/;"	f	class:XPWidgetWin
HandleMenuCmd	.\UI\XWinGL.h	/^	virtual	int				HandleMenuCmd(xmenu inMenu, int inCommand) { return 0; }$/;"	f	class:XWinGL
HandleMouseWheel	.\ObjEdit\OE_Pane.cpp	/^int		OE_Pane::HandleMouseWheel(int x, int y, int direction)$/;"	f	class:OE_Pane
HandleMouseWheel	.\ObjEdit\OE_Preview.cpp	/^int		OE_Preview::HandleMouseWheel(int x, int y, int direction)$/;"	f	class:OE_Preview
HandleMouseWheel	.\ObjEdit\OE_TexEdWindow.cpp	/^int		OE_TexEdPane::HandleMouseWheel(int x, int y, int direction)$/;"	f	class:OE_TexEdPane
HandleMouseWheel	.\RenderFarmUI\RF_Pane.cpp	/^int		RF_Pane::HandleMouseWheel(int x, int y, int direction)$/;"	f	class:RF_Pane
HandleNetworkError	.\WEDImportExport\WED_GatewayImport.cpp	/^string HandleNetworkError(curl_http_get_file * mCurl)$/;"	f
HandleNotification	.\ObjEdit\OE_PatchList.cpp	/^void	OE_PatchTable::HandleNotification(int catagory, int message, void * param)$/;"	f	class:OE_PatchTable
HandleNotification	.\ObjEdit\OE_ProjectionMgr.cpp	/^void		OE_ProjectionMgr::HandleNotification(int catagory, int message, void * param)$/;"	f	class:OE_ProjectionMgr
HandleNotification	.\ObjEdit\OE_TexEdWindow.cpp	/^void		OE_PatchEdPane::HandleNotification(int catagory, int message, void * param)$/;"	f	class:OE_PatchEdPane
HandleNotification	.\ObjEdit\OE_TexEdWindow.cpp	/^void OE_DirectEdPane::HandleNotification(int catagory, int message, void * param)$/;"	f	class:OE_DirectEdPane
HandleNotification	.\ObjEdit\OE_TexEdWindow.cpp	/^void OE_TexEdPane::HandleNotification(int catagory, int message, void * param)$/;"	f	class:OE_TexEdPane
HandleNotification	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::HandleNotification(int catagory, int message, void * param)$/;"	f	class:RF_MapView
HandleOpenDoc	.\UI\XWidgetApp.cpp	/^pascal OSErr HandleOpenDoc(const AppleEvent *theAppleEvent, AppleEvent *reply, long handlerRefcon)$/;"	f
HandleRotationClick	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::HandleRotationClick($/;"	f	class:OE_Zoomer3d
HandleScale	.\XPTools\DDSTool.cpp	/^static bool HandleScale(ImageInfo& info, bool up, bool down, bool half, bool square)$/;"	f	file:
HandleSeg	.\RawImport\gshhs.cpp	/^bool	HandleSeg(Pmwx& inMap, double clip[4], const Point2& p1, const Point2& p2)$/;"	f
HandleSnap	.\WEDTCE\WED_TCEVertexTool.cpp	/^void	WED_TCEVertexTool::HandleSnap(Point2& io_pt, const Vector2& delta)$/;"	f	class:WED_TCEVertexTool
HandleSpecialCommand	.\RenderFarmUI\RF_SpecialCommands.cpp	/^void	HandleSpecialCommand(int cmd)$/;"	f
HandleToolKeyPress	.\WEDMap\WED_CreateToolBase.cpp	/^int			WED_CreateToolBase::HandleToolKeyPress(char inKey, int inVK, GUI_KeyFlags inFlags			  )$/;"	f	class:WED_CreateToolBase
HandleToolKeyPress	.\WEDMap\WED_HandleToolBase.cpp	/^int			WED_HandleToolBase::HandleToolKeyPress(char inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_HandleToolBase
HandleToolKeyPress	.\WEDTCE\WED_TCEToolAdapter.cpp	/^int					WED_TCEToolAdapter::HandleToolKeyPress(char inKey, int inVK, GUI_KeyFlags inFlags			  )$/;"	f	class:WED_TCEToolAdapter
HandleTranslate	.\XESCore\DEMTables.cpp	/^static bool HandleTranslate(const vector<string>& inTokenLine, void * inRef)$/;"	f	file:
HandleTranslationClick	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::HandleTranslationClick($/;"	f	class:OE_Zoomer3d
HandleType_t	.\Interfaces\IControlHandles.h	/^enum HandleType_t {$/;"	g
HandleVocab	.\XESCore\XESInit.cpp	/^static bool HandleVocab(const vector<string>& inTokenLine, void * inRef)$/;"	f	file:
HandleZoomWheel	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::HandleZoomWheel($/;"	f	class:OE_Zoomer3d
HandlerEntry	.\XESCore\ConfigSystem.cpp	/^typedef pair<ProcessConfigString_f, void *>			HandlerEntry;$/;"	t	file:
HandlerMap	.\XESCore\ConfigSystem.cpp	/^typedef hash_map<string, HandlerEntry>				HandlerMap;$/;"	t	file:
HasBest	.\XESCore\DEMDefs.cpp	/^	bool	HasBest(void) const { return best != -1; }$/;"	f	struct:HistoHelper
HasBridgeRoads	.\XESCore\MapDefs.h	/^	inline	bool	HasBridgeRoads(void) const { $/;"	f	struct:GIS_halfedge_data
HasClient	.\WEDNetwork\WED_Connection.h	/^		bool		HasClient;$/;"	m	class:WED_Connection
HasCustomMSL	.\WEDEntities\WED_ObjPlacement.cpp	/^bool		WED_ObjPlacement::HasCustomMSL(void) const$/;"	f	class:WED_ObjPlacement
HasCustomWalls	.\WEDEntities\WED_FacadePlacement.cpp	/^bool		WED_FacadePlacement::HasCustomWalls(void) const $/;"	f	class:WED_FacadePlacement
HasDefaultResource	.\WEDWindows\WED_GroupCommands.cpp	/^bool HasDefaultResource(WED_Thing * t, void * ref)$/;"	f
HasErr	.\Network\Terraserver.cpp	/^bool			AsyncImage::HasErr(void)$/;"	f	class:AsyncImage
HasExtNoCase	.\Utils\XUtils.cpp	/^bool	HasExtNoCase(const string& inStr, const char * inExt)$/;"	f
HasGroundRoads	.\XESCore\MapDefs.h	/^	inline	bool	HasGroundRoads(void) const { $/;"	f	struct:GIS_halfedge_data
HasHotArrival	.\WEDEntities\WED_TaxiRoute.cpp	/^bool	WED_TaxiRoute::HasHotArrival(void) const$/;"	f	class:WED_TaxiRoute
HasHotDepart	.\WEDEntities\WED_TaxiRoute.cpp	/^bool	WED_TaxiRoute::HasHotDepart(void) const$/;"	f	class:WED_TaxiRoute
HasHotILS	.\WEDEntities\WED_TaxiRoute.cpp	/^bool	WED_TaxiRoute::HasHotILS(void) const$/;"	f	class:WED_TaxiRoute
HasInvalidHotZones	.\WEDEntities\WED_TaxiRoute.cpp	/^bool	WED_TaxiRoute::HasInvalidHotZones(const set<int>& legal_rwys) const$/;"	f	class:WED_TaxiRoute
HasLayer	.\WEDEntities\WED_FacadeNode.cpp	/^bool	WED_FacadeNode::HasLayer		(GISLayer_t layer							  ) const$/;"	f	class:WED_FacadeNode
HasLayer	.\WEDEntities\WED_FacadePlacement.cpp	/^bool		WED_FacadePlacement::HasLayer		(GISLayer_t layer							  ) const$/;"	f	class:WED_FacadePlacement
HasLayer	.\WEDEntities\WED_FacadeRing.cpp	/^bool		WED_FacadeRing::HasLayer		(GISLayer_t layer							  ) const$/;"	f	class:WED_FacadeRing
HasLayer	.\WEDEntities\WED_GISBoundingBox.cpp	/^bool			WED_GISBoundingBox::HasLayer		(GISLayer_t l) const$/;"	f	class:WED_GISBoundingBox
HasLayer	.\WEDEntities\WED_GISChain.cpp	/^bool			WED_GISChain::HasLayer			(GISLayer_t l) const$/;"	f	class:WED_GISChain
HasLayer	.\WEDEntities\WED_GISComposite.cpp	/^bool			WED_GISComposite::HasLayer	(GISLayer_t l) const$/;"	f	class:WED_GISComposite
HasLayer	.\WEDEntities\WED_GISEdge.cpp	/^bool			WED_GISEdge::HasLayer			(GISLayer_t l) const$/;"	f	class:WED_GISEdge
HasLayer	.\WEDEntities\WED_GISLine.cpp	/^bool			WED_GISLine::HasLayer		(GISLayer_t l) const$/;"	f	class:WED_GISLine
HasLayer	.\WEDEntities\WED_GISPoint.cpp	/^bool			WED_GISPoint::HasLayer(GISLayer_t l) const$/;"	f	class:WED_GISPoint
HasLayer	.\WEDEntities\WED_GISPolygon.cpp	/^bool			WED_GISPolygon::HasLayer			(GISLayer_t l) const$/;"	f	class:WED_GISPolygon
HasLayer	.\WEDEntities\WED_TextureBezierNode.cpp	/^bool		WED_TextureBezierNode::HasLayer(GISLayer_t l) const$/;"	f	class:WED_TextureBezierNode
HasLayer	.\WEDEntities\WED_TextureNode.cpp	/^bool		WED_TextureNode::HasLayer(GISLayer_t l) const$/;"	f	class:WED_TextureNode
HasLibraryResource	.\WEDWindows\WED_GroupCommands.cpp	/^bool HasLibraryResource(WED_Thing * t, void * ref)$/;"	f
HasLocalResource	.\WEDWindows\WED_GroupCommands.cpp	/^bool HasLocalResource(WED_Thing * t, void * ref)$/;"	f
HasMissingResource	.\WEDWindows\WED_GroupCommands.cpp	/^bool HasMissingResource(WED_Thing * t, void * ref)$/;"	f
HasParam	.\XESCore\MapDefs.h	/^	bool		HasParam(int p) const { return mParams.count(p) > 0; }$/;"	f	class:GIS_face_data
HasRedo	.\WEDCore\WED_UndoMgr.cpp	/^bool	WED_UndoMgr::HasRedo(void) const$/;"	f	class:WED_UndoMgr
HasRoad	.\XESCore\Hydro.cpp	/^bool HasRoad(Halfedge_handle e)$/;"	f
HasRoadOfType	.\XESCore\MapDefs.h	/^	inline bool		HasRoadOfType(int t) const {$/;"	f	struct:GIS_halfedge_data
HasRoads	.\XESCore\MapDefs.h	/^	inline	bool	HasRoads(void) const { return !mSegments.empty(); }$/;"	f	struct:GIS_halfedge_data
HasSelection	.\WEDWindows\WED_PackageListAdapter.cpp	/^bool	WED_PackageListAdapter::HasSelection(void)$/;"	f	class:WED_PackageListAdapter
HasSystemFolder	.\WEDCore\WED_PackageMgr.cpp	/^bool		WED_PackageMgr::HasSystemFolder(void) const$/;"	f	class:WED_PackageMgr
HasTexture	.\ObjEdit\OE_TexEdWindow.cpp	/^bool			OE_PatchEdPane::HasTexture(void)$/;"	f	class:OE_PatchEdPane
HasThirdPartyResource	.\WEDWindows\WED_GroupCommands.cpp	/^bool HasThirdPartyResource(WED_Thing * t, void * ref)$/;"	f
HasUndo	.\WEDCore\WED_UndoMgr.cpp	/^bool	WED_UndoMgr::HasUndo(void) const$/;"	f	class:WED_UndoMgr
HashKey	.\lib_json\include\json\value.h	/^      typedef unsigned int HashKey;$/;"	t	class:Json::ValueInternalMap
HashLonLat	.\RawImport\FAA_Obs.h	/^inline int		HashLonLat(double lon, double lat)$/;"	f
HeadDraw	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::HeadDraw	 (int cell_bounds[4], int cell_x, GUI_GraphState * inState			  )$/;"	f	class:GUI_TextTableHeader
HeadGetCursor	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTableHeader::HeadGetCursor(int cell_bounds[4], int cell_x, int mouse_x, int mouse_y)$/;"	f	class:GUI_TextTableHeader
HeadGetHelpTip	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTableHeader::HeadGetHelpTip(int cell_bounds[4], int cell_x, int mouse_x, int mouse_y, string& tip)$/;"	f	class:GUI_TextTableHeader
HeadMouseDown	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTableHeader::HeadMouseDown(int cell_bounds[4], int cell_x, int mouse_x, int mouse_y, int button, GUI_KeyFlags flags, int& want_lock)$/;"	f	class:GUI_TextTableHeader
HeadMouseDrag	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::HeadMouseDrag(int cell_bounds[4], int cell_x, int mouse_x, int mouse_y, int button)$/;"	f	class:GUI_TextTableHeader
HeadMouseUp	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::HeadMouseUp  (int cell_bounds[4], int cell_x, int mouse_x, int mouse_y, int button)$/;"	f	class:GUI_TextTableHeader
HeightWithinTri	.\XESCore\MeshAlgs.cpp	/^double	HeightWithinTri(CDT& inMesh, CDT::Face_handle f, CDT::Point in)$/;"	f
Hide	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::Hide(void)$/;"	f	class:GUI_Pane
Hide	.\GUI\GUI_Window.cpp	/^void GUI_Window::Hide(void)$/;"	f	class:GUI_Window
HintMap	.\XESCore\MeshDefs.h	/^	typedef hash_map<int, Face_handle>	HintMap;$/;"	t	class:CDT
HistoHelper	.\XESCore\DEMDefs.cpp	/^			HistoHelper() : choices(0), best(-1) { }$/;"	f	struct:HistoHelper
HistoHelper	.\XESCore\DEMDefs.cpp	/^struct	HistoHelper {$/;"	s	file:
HistogramGetPercentile	.\XESCore\DEMAlgs.cpp	/^float	HistogramGetPercentile(const map<float, int>& histo, int total_samples, float percentile)$/;"	f
HitCount	.\DSF\tri_stripper_101\cache_simulator.h	/^inline size_t cache_simulator::HitCount() const {$/;"	f	class:triangle_stripper::cache_simulator
HumanReadableType	.\WEDEntities\WED_ATCFlow.h	/^	virtual const char *	HumanReadableType(void) const { return "ATC Flow"; }$/;"	f	class:WED_ATCFlow
HumanReadableType	.\WEDEntities\WED_ATCFrequency.h	/^	virtual const char *	HumanReadableType(void) const { return "ATC Frequency"; }$/;"	f	class:WED_ATCFrequency
HumanReadableType	.\WEDEntities\WED_ATCRunwayUse.h	/^	virtual const char *	HumanReadableType(void) const { return "Runway Use"; }$/;"	f	class:WED_ATCRunwayUse
HumanReadableType	.\WEDEntities\WED_ATCTimeRule.h	/^	virtual const char *	HumanReadableType(void) const { return "Time Rule"; }$/;"	f	class:WED_ATCTimeRule
HumanReadableType	.\WEDEntities\WED_ATCWindRule.h	/^	virtual const char *	HumanReadableType(void) const { return "Wind Rule"; }$/;"	f	class:WED_ATCWindRule
HumanReadableType	.\WEDEntities\WED_Airport.h	/^	virtual const char *	HumanReadableType(void) const { return "Airport"; }$/;"	f	class:WED_Airport
HumanReadableType	.\WEDEntities\WED_AirportBeacon.h	/^	virtual const char *	HumanReadableType(void) const { return "Airport Beacon"; }$/;"	f	class:WED_AirportBeacon
HumanReadableType	.\WEDEntities\WED_AirportBoundary.h	/^	virtual const char *	HumanReadableType(void) const { return "Airport Boundary"; }$/;"	f	class:WED_AirportBoundary
HumanReadableType	.\WEDEntities\WED_AirportChain.h	/^	virtual const char *	HumanReadableType(void) const { return "Airport Line Marking"; }$/;"	f	class:WED_AirportChain
HumanReadableType	.\WEDEntities\WED_AirportNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Airport Line Node"; }$/;"	f	class:WED_AirportNode
HumanReadableType	.\WEDEntities\WED_AirportSign.h	/^	virtual const char *	HumanReadableType(void) const { return "Taxi Sign"; }$/;"	f	class:WED_AirportSign
HumanReadableType	.\WEDEntities\WED_DrapedOrthophoto.h	/^	virtual const char *	HumanReadableType(void) const { return "Draped Orthophoto"; }$/;"	f	class:WED_DrapedOrthophoto
HumanReadableType	.\WEDEntities\WED_ExclusionZone.h	/^	virtual const char *	HumanReadableType(void) const { return "Exclusion Zone"; }$/;"	f	class:WED_ExclusionZone
HumanReadableType	.\WEDEntities\WED_FacadeNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Facade Node"; }$/;"	f	class:WED_FacadeNode
HumanReadableType	.\WEDEntities\WED_FacadePlacement.h	/^	virtual const char *	HumanReadableType(void) const { return "Facade"; }$/;"	f	class:WED_FacadePlacement
HumanReadableType	.\WEDEntities\WED_FacadeRing.h	/^	virtual const char *	HumanReadableType(void) const { return "Facade Boundary"; }$/;"	f	class:WED_FacadeRing
HumanReadableType	.\WEDEntities\WED_ForestPlacement.h	/^	virtual const char *	HumanReadableType(void) const { return "Forest"; }$/;"	f	class:WED_ForestPlacement
HumanReadableType	.\WEDEntities\WED_ForestRing.h	/^	virtual const char *	HumanReadableType(void) const { return "Forest Boundary"; }$/;"	f	class:WED_ForestRing
HumanReadableType	.\WEDEntities\WED_Group.h	/^	virtual const char *	HumanReadableType(void) const { return "Group"; }$/;"	f	class:WED_Group
HumanReadableType	.\WEDEntities\WED_Helipad.h	/^	virtual const char *	HumanReadableType(void) const { return "Helipad"; }$/;"	f	class:WED_Helipad
HumanReadableType	.\WEDEntities\WED_KeyObjects.h	/^	virtual const char *	HumanReadableType(void) const { return "Project Internal Directory"; }	\/\/ This better not be visible anywhere!$/;"	f	class:WED_KeyObjects
HumanReadableType	.\WEDEntities\WED_LightFixture.h	/^	virtual const char *	HumanReadableType(void) const { return "Light Fixture"; }$/;"	f	class:WED_LightFixture
HumanReadableType	.\WEDEntities\WED_LinePlacement.h	/^	virtual const char *	HumanReadableType(void) const { return "Line"; }$/;"	f	class:WED_LinePlacement
HumanReadableType	.\WEDEntities\WED_ObjPlacement.h	/^	virtual const char *	HumanReadableType(void) const { return "Object"; }$/;"	f	class:WED_ObjPlacement
HumanReadableType	.\WEDEntities\WED_OverlayImage.h	/^	virtual const char *	HumanReadableType(void) const { return "Reference Image"; }$/;"	f	class:WED_OverlayImage
HumanReadableType	.\WEDEntities\WED_PolygonPlacement.h	/^	virtual const char *	HumanReadableType(void) const { return "Draped Polygon"; }$/;"	f	class:WED_PolygonPlacement
HumanReadableType	.\WEDEntities\WED_RampPosition.h	/^	virtual const char *	HumanReadableType(void) const { return "Ramp Start"; }$/;"	f	class:WED_RampPosition
HumanReadableType	.\WEDEntities\WED_Ring.h	/^	virtual const char *	HumanReadableType(void) const { return "Boundary"; }$/;"	f	class:WED_Ring
HumanReadableType	.\WEDEntities\WED_RoadEdge.h	/^	virtual const char *	HumanReadableType(void) const { return "Road"; }$/;"	f	class:WED_RoadEdge
HumanReadableType	.\WEDEntities\WED_Root.h	/^	virtual const char *	HumanReadableType(void) const { return "Project Root Object"; }$/;"	f	class:WED_Root
HumanReadableType	.\WEDEntities\WED_Runway.h	/^	virtual const char *	HumanReadableType(void) const { return "Runway"; }$/;"	f	class:WED_Runway
HumanReadableType	.\WEDEntities\WED_RunwayNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Runway Node"; }$/;"	f	class:WED_RunwayNode
HumanReadableType	.\WEDEntities\WED_Sealane.h	/^	virtual const char *	HumanReadableType(void) const { return "Sea Lane"; }$/;"	f	class:WED_Sealane
HumanReadableType	.\WEDEntities\WED_Select.h	/^	virtual const char *	HumanReadableType(void) const { return "Selection"; }	$/;"	f	class:WED_Select
HumanReadableType	.\WEDEntities\WED_SimpleBezierBoundaryNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Curved Boundary Node"; }$/;"	f	class:WED_SimpleBezierBoundaryNode
HumanReadableType	.\WEDEntities\WED_SimpleBoundaryNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Boundary Node"; }$/;"	f	class:WED_SimpleBoundaryNode
HumanReadableType	.\WEDEntities\WED_StringPlacement.h	/^	virtual const char *	HumanReadableType(void) const { return "Object String"; }$/;"	f	class:WED_StringPlacement
HumanReadableType	.\WEDEntities\WED_TaxiRoute.h	/^	virtual const char *	HumanReadableType(void) const { return "Taxi Route"; }$/;"	f	class:WED_TaxiRoute
HumanReadableType	.\WEDEntities\WED_TaxiRouteNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Taxi Route Node"; }$/;"	f	class:WED_TaxiRouteNode
HumanReadableType	.\WEDEntities\WED_Taxiway.h	/^	virtual const char *	HumanReadableType(void) const { return "Taxiway"; }$/;"	f	class:WED_Taxiway
HumanReadableType	.\WEDEntities\WED_TextureBezierNode.h	/^	virtual const char *	HumanReadableType(void) const { return "Curved UV-Mapped Node"; }$/;"	f	class:WED_TextureBezierNode
HumanReadableType	.\WEDEntities\WED_TextureNode.h	/^	virtual const char *	HumanReadableType(void) const { return "UV-Mapped Node"; }$/;"	f	class:WED_TextureNode
HumanReadableType	.\WEDEntities\WED_TowerViewpoint.h	/^	virtual const char *	HumanReadableType(void) const { return "Tower Viewpoint"; }$/;"	f	class:WED_TowerViewpoint
HumanReadableType	.\WEDEntities\WED_Windsock.h	/^	virtual const char *	HumanReadableType(void) const { return "Windsock"; }$/;"	f	class:WED_Windsock
HydroFlowToPt	.\XESCore\Hydro.cpp	/^inline int HydroFlowToPt(int x, int y, DEMGeo * elev, DEMGeo * dirs, DEMGeo * flows, DEMGeo * slope, int * ctr)$/;"	f
HydroReconstruct	.\XESCore\Hydro.cpp	/^void	HydroReconstruct(Pmwx& ioMap, DEMGeoMap& ioDem, const char * mask_file, const char * hydro_dir, ProgressFunc inFunc)$/;"	f
I	.\Utils\md5.c	65;"	d	file:
IARRAY_H	.\Interfaces\IArray.h	25;"	d
IArray	.\Interfaces\IArray.h	/^class IArray : public virtual IBase {$/;"	c
IBASE_H	.\Interfaces\IBase.h	25;"	d
IBase	.\Interfaces\IBase.h	/^class	IBase {$/;"	c
ICONTROLHANDLES_H	.\Interfaces\IControlHandles.h	25;"	d
IControlHandles	.\Interfaces\IControlHandles.h	/^class	IControlHandles : public virtual IBase {$/;"	c
IDIRECTORY_H	.\Interfaces\IDirectory.h	25;"	d
IDT_TIMER1	.\UI\XWin.win.cpp	25;"	d	file:
IDirectory	.\Interfaces\IDirectory.h	/^class	IDirectory : public virtual IBase {$/;"	c
IDirectoryEdit	.\Interfaces\IDirectory.h	/^class	IDirectoryEdit : public virtual IBase {$/;"	c
IDocPrefs	.\Interfaces\IDocPrefs.h	/^class IDocPrefs : public virtual IBase {$/;"	c
IDocPrefs_H	.\Interfaces\IDocPrefs.h	25;"	d
IGISBoundingBox	.\Interfaces\IGIS.h	/^class	IGISBoundingBox : public virtual IGISEntity {$/;"	c
IGISComposite	.\Interfaces\IGIS.h	/^class IGISComposite :  public virtual IGISEntity {$/;"	c
IGISEdge	.\Interfaces\IGIS.h	/^class	IGISEdge : public virtual IGISPointSequence { $/;"	c
IGISEntity	.\Interfaces\IGIS.h	/^class	IGISEntity : public virtual ISelectable {$/;"	c
IGISLine	.\Interfaces\IGIS.h	/^class IGISLine : public virtual IGISPointSequence {$/;"	c
IGISLine_Width	.\Interfaces\IGIS.h	/^class IGISLine_Width : public virtual IGISLine, public virtual IGISQuad {$/;"	c
IGISPoint	.\Interfaces\IGIS.h	/^class	IGISPoint : public virtual IGISEntity {$/;"	c
IGISPointSequence	.\Interfaces\IGIS.h	/^class	IGISPointSequence : public virtual IGISEntity {$/;"	c
IGISPoint_Bezier	.\Interfaces\IGIS.h	/^class	IGISPoint_Bezier : public virtual IGISPoint {$/;"	c
IGISPoint_Heading	.\Interfaces\IGIS.h	/^class	IGISPoint_Heading : public virtual IGISPoint {$/;"	c
IGISPoint_WidthLength	.\Interfaces\IGIS.h	/^class	IGISPoint_WidthLength : public virtual IGISPoint_Heading, public virtual IGISQuad {$/;"	c
IGISPolygon	.\Interfaces\IGIS.h	/^class	IGISPolygon  : public virtual IGISEntity {$/;"	c
IGISQuad	.\Interfaces\IGIS.h	/^class	IGISQuad : public virtual IGISEntity {$/;"	c
IGIS_H	.\Interfaces\IGIS.h	25;"	d
IGNORE_DENSITY	.\XESCore\TensorRoads.cpp	61;"	d	file:
IGNORE_ORIGIN_CODES	.\XESCore\TensorRoads.cpp	55;"	d	file:
IGNORE_SHORT_AXIS	.\XESCore\BlockFill.cpp	64;"	d	file:
II	.\Utils\md5.c	87;"	d	file:
ILibrarian	.\Interfaces\ILibrarian.h	/^class	ILibrarian : public virtual IBase {$/;"	c
ILibrarian_H	.\Interfaces\ILibrarian.h	25;"	d
IMG_X_RES	.\XESCore\DEMIO.cpp	454;"	d	file:
IMG_X_SIZE	.\XESCore\DEMIO.cpp	456;"	d	file:
IMG_Y_RES	.\XESCore\DEMIO.cpp	455;"	d	file:
IMPEXP	.\AC3DPlugins\x86_Win32 DLL.cpp	18;"	d	file:
IMPEXP	.\AC3DPlugins\x86_Win32 DLL.h	36;"	d
INDEXED	.\XESCore\BezierApprox.cpp	112;"	d	file:
INDEX_T	.\Obj\ObjConvert.cpp	544;"	d	file:
INDEX_t	.\XPTools\Env2DSF.cpp	/^typedef long long INDEX_t;$/;"	t	file:
INIT	.\XESCore\DEMAlgs.cpp	2097;"	d	file:
INITIALIZER_H	.\linuxinit\initializer.h	19;"	d
INIT_GL_INFO	.\Utils\TexUtils.cpp	51;"	d	file:
INLAND_BLEND_DIST	.\XESCore\DSFBuilder.cpp	412;"	d	file:
INLINING_BW	.\Utils\BWImage.h	100;"	d
INLINING_BW	.\Utils\BWImage.h	102;"	d
INSTALLERPROCS_H	.\Installer\InstallerProcs.h	24;"	d
INSTALLERRUN_H	.\Installer\InstallerRun.h	24;"	d
INSTALLERSCRIPT_H	.\Installer\InstallerScript.h	24;"	d
INTERVALT	.\WEDNetwork\WED_NWDefs.h	32;"	d
INT_PROP	.\AC3DPlugins\obj_model.cpp	209;"	d	file:
IODEFS_H	.\XESCore\IODefs.h	24;"	d
IOPERATION_H	.\Interfaces\IOperation.h	25;"	d
IOReader	.\XESCore\IODefs.h	/^class	IOReader {$/;"	c
IOWriter	.\XESCore\IODefs.h	/^class	IOWriter {$/;"	c
IOperation	.\Interfaces\IOperation.h	/^class	IOperation : public virtual IBase {$/;"	c
IPROPERTYOBJECT_H	.\Interfaces\IPropertyObject.h	25;"	d
IPropertyObject	.\Interfaces\IPropertyObject.h	/^class IPropertyObject : public virtual IBase {$/;"	c
IRESOLVER_H	.\Interfaces\IResolver.h	25;"	d
IResolver	.\Interfaces\IResolver.h	/^class	IResolver : public virtual IBase {$/;"	c
ISELECTION_H	.\Interfaces\ISelection.h	25;"	d
IS_POSITIVE	.\Utils\PolyRasterUtils.h	/^inline bool IS_POSITIVE(int n) 	{ return (n%2) == 0; }$/;"	f
IS_POSITIVE_INTERVAL	.\Utils\UTL_interval.h	/^inline bool IS_POSITIVE_INTERVAL(int n)$/;"	f
ISelectable	.\Interfaces\ISelection.h	/^class	ISelectable : public virtual IBase {$/;"	c
ISelection	.\Interfaces\ISelection.h	/^class	ISelection : public virtual IBase {$/;"	c
ITexMgr	.\Interfaces\ITexMgr.h	/^class	ITexMgr : public virtual IBase {$/;"	c
ITexMgr_H	.\Interfaces\ITexMgr.h	25;"	d
I_ACCUM_GLPHYS	.\WEDCore\WED_Sign_Parser.cpp	/^		I_ACCUM_GLPHYS,\/\/For collecting glpyhs$/;"	e	enum:WED_Sign_Parser::FSM	file:
I_ANY_CONTROL	.\WEDCore\WED_Sign_Parser.cpp	/^		I_ANY_CONTROL,\/\/When it hits a @$/;"	e	enum:WED_Sign_Parser::FSM	file:
I_COMMA	.\WEDCore\WED_Sign_Parser.cpp	/^		I_COMMA,\/\/We just hit a comma and are now expecting single$/;"	e	enum:WED_Sign_Parser::FSM	file:
I_INCUR	.\WEDCore\WED_Sign_Parser.cpp	/^		I_INCUR,\/\/For when we hit {$/;"	e	enum:WED_Sign_Parser::FSM	file:
I_WAITING_SEPERATOR	.\WEDCore\WED_Sign_Parser.cpp	/^		I_WAITING_SEPERATOR,\/\/For when it is waiting for a , or }$/;"	e	enum:WED_Sign_Parser::FSM	file:
Id	.\lib_json\src\test_lib_json\jsontest.h	/^      typedef unsigned int Id;$/;"	t	struct:JsonTest::PredicateContext
Identity	.\Utils\HLCamera.cpp	/^void		xcam_class::Identity(void)$/;"	f	class:xcam_class
IgnoreTiffErrs	.\XESCore\DEMIO.cpp	/^static	void	IgnoreTiffErrs(const char *, const char* fmt, va_list args)$/;"	f	file:
IgnoreTiffWarnings	.\Utils\BitmapUtils.cpp	/^static	void	IgnoreTiffWarnings(const char *, const char*, va_list)$/;"	f	file:
IgnoreTiffWarnings	.\XESCore\DEMIO.cpp	/^static	void	IgnoreTiffWarnings(const char *, const char* fmt, va_list args)$/;"	f	file:
ImageInfo	.\Utils\BitmapUtils.h	/^struct	ImageInfo {$/;"	s
Import	.\WEDEntities\WED_ATCFlow.cpp	/^void	WED_ATCFlow::Import(const AptFlow_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_ATCFlow
Import	.\WEDEntities\WED_ATCFrequency.cpp	/^void	WED_ATCFrequency::Import(const AptATCFreq_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_ATCFrequency
Import	.\WEDEntities\WED_ATCRunwayUse.cpp	/^void	WED_ATCRunwayUse::Import(const AptRunwayRule_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_ATCRunwayUse
Import	.\WEDEntities\WED_ATCTimeRule.cpp	/^void		WED_ATCTimeRule::Import(const AptTimeRule_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_ATCTimeRule
Import	.\WEDEntities\WED_ATCWindRule.cpp	/^void		WED_ATCWindRule::Import(const AptWindRule_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_ATCWindRule
Import	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::Import(const AptInfo_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_Airport
Import	.\WEDEntities\WED_AirportBeacon.cpp	/^void	WED_AirportBeacon::Import(const AptBeacon_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_AirportBeacon
Import	.\WEDEntities\WED_AirportBoundary.cpp	/^void WED_AirportBoundary::Import(const AptBoundary_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_AirportBoundary
Import	.\WEDEntities\WED_AirportChain.cpp	/^void	WED_AirportChain::Import(const AptMarking_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_AirportChain
Import	.\WEDEntities\WED_AirportSign.cpp	/^void		WED_AirportSign::Import(const AptSign_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_AirportSign
Import	.\WEDEntities\WED_Helipad.cpp	/^void	WED_Helipad::Import(const AptHelipad_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_Helipad
Import	.\WEDEntities\WED_LightFixture.cpp	/^void	WED_LightFixture::Import(const AptLight_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_LightFixture
Import	.\WEDEntities\WED_RampPosition.cpp	/^void	WED_RampPosition::Import(const AptGate_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_RampPosition
Import	.\WEDEntities\WED_Runway.cpp	/^void		WED_Runway::Import(const AptRunway_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_Runway
Import	.\WEDEntities\WED_Sealane.cpp	/^void	WED_Sealane::Import(const AptSealane_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_Sealane
Import	.\WEDEntities\WED_TaxiRoute.cpp	/^void	WED_TaxiRoute::Import(const AptRouteEdge_t& info, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_TaxiRoute
Import	.\WEDEntities\WED_Taxiway.cpp	/^void		WED_Taxiway::Import(const AptTaxiway_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_Taxiway
Import	.\WEDEntities\WED_TowerViewpoint.cpp	/^void		WED_TowerViewpoint::Import(const AptTowerPt_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_TowerViewpoint
Import	.\WEDEntities\WED_Windsock.cpp	/^void	WED_Windsock::Import(const AptWindsock_t& x, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	class:WED_Windsock
ImportEnable	.\RenderFarmUI\RF_Import.cpp	/^void ImportEnable(XPWidgetID)$/;"	f
ImportGSHHS	.\RawImport\gshhs.cpp	/^bool ImportGSHHS(const char * inFile, Pmwx& outMap, double clip[4])$/;"	f
ImportLinearPath	.\WEDImportExport\WED_AptIE.cpp	/^static WED_AirportChain * ImportLinearPath(const AptPolygon_t& path, WED_Archive * archive, WED_Thing * parent, vector<WED_AirportChain *> * chains, void (* print_func)(void *, const char *, ...), void * ref)$/;"	f	file:
ImportNotifier	.\RenderFarmUI\RF_Import.cpp	/^void	ImportNotifier(int catagory, int message, void * param)$/;"	f
ImportSDTSTransferTVP	.\SDTS\SDTSReadTVP.cpp	/^void	ImportSDTSTransferTVP(const char * path, const char * ext, Pmwx& pmwx)$/;"	f
ImportSpecificVersion	.\WEDImportExport\WED_GatewayImport.cpp	/^WED_Airport * WED_GatewayImportDialog::ImportSpecificVersion(JSON_BUF version_json_buf)$/;"	f	class:WED_GatewayImportDialog
InArgs	.\lib_json\include\json\value.h	/^      typedef std::vector<const PathArgument *> InArgs;$/;"	t	class:Json::Path
InRange	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^inline float	InRange(float minv, float maxv, float vv) { return minv <= vv && vv <= maxv; }$/;"	f
Increment	.\SDTS\SDTSRead.cpp	/^void			SDTSModuleIterator::Increment(void)$/;"	f	class:SDTSModuleIterator
IncrementRepUsage	.\XESCore\ObjTables.cpp	/^void IncrementRepUsage(int inRep)$/;"	f
IndexAirports	.\XESCore\AptAlgs.cpp	/^void	IndexAirports(const AptVector& apts, AptIndex& index)$/;"	f
IndexDEM	.\XESCore\DEMToVector.cpp	/^int IndexDEM(const DEMGeo& inDEM, vector<int>& outIndex)$/;"	f
IndexPmwx	.\RenderFarmUI\RF_DrawMap.cpp	/^void	IndexPmwx(Pmwx& pmwx, PmwxIndex_t& index)$/;"	f
IndexToEnum	.\Utils\CoverageFinder.cpp	/^int CoverageFinder::IndexToEnum(int inAxis, int inIndex)$/;"	f	class:CoverageFinder
IndexToEnumString	.\Utils\CoverageFinder.cpp	/^string CoverageFinder::IndexToEnumString(int inAxis, int inIndex)$/;"	f	class:CoverageFinder
IndexToRange	.\Utils\CoverageFinder.cpp	/^float CoverageFinder::IndexToRange(int inAxis, int inIndex)$/;"	f	class:CoverageFinder
IniSection	.\RenderFarmUI\RF_PrefsDialog.cpp	/^typedef map<string, string>		IniSection;$/;"	t	file:
IniSectionMap	.\RenderFarmUI\RF_PrefsDialog.cpp	/^typedef map<string, IniSection>	IniSectionMap;$/;"	t	file:
Init	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::Init(void)$/;"	f	class:GUI_GraphState
InitCache	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::InitCache()$/;"	f	class:triangle_stripper::tri_stripper
InitEnumSystem	.\XESCore\EnumSystem.cpp	/^void InitEnumSystem()$/;"	f
InitFromLU	.\XESTools\GISTool_MiscCmds.cpp	/^int InitFromLU(const vector<const char *>& args)$/;"	f
InitFromWet	.\XESTools\GISTool_MiscCmds.cpp	/^int InitFromWet(const vector<const char *>& args)$/;"	f
InitMesh	.\XESCore\GreedyMesh.cpp	/^void	InitMesh(CDT& inCDT, const DEMGeo& inDem, DEMMask& inUsed, double err_cutoff, double size_lim)$/;"	f
InitOneTri	.\XESCore\GreedyMesh.cpp	/^bool	InitOneTri(CDT::Face_handle face)$/;"	f
InitTriGraph	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::InitTriGraph()$/;"	f	class:triangle_stripper::tri_stripper
InitTriHeap	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::InitTriHeap()$/;"	f	class:triangle_stripper::tri_stripper
Initialization	.\XESCore\MeshConformer.h	/^  enum Initialization {$/;"	g	class:CGAL::Triangulation_conformer_any_2
Initializer	.\linuxinit\initializer.cpp	/^Initializer::Initializer(int* argc, char** argv[], bool loadgtk)$/;"	f	class:Initializer
Initializer	.\linuxinit\initializer.h	/^class Initializer$/;"	c
InitializerConstants	.\linuxinit\initializer.h	/^enum InitializerConstants$/;"	g
Insert	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::Insert(ISelectable * iwho)$/;"	f	class:WED_Select
InsertAnyPoint	.\XESCore\MeshAlgs.cpp	/^CDT::Vertex_handle InsertAnyPoint($/;"	f
InsertDEMPoint	.\XESCore\MeshAlgs.cpp	/^CDT::Vertex_handle InsertDEMPoint($/;"	f
InsertEdgeInSet	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void InsertEdgeInSet(Pmwx::Halfedge_handle f, set<Pmwx::Halfedge_handle> * s)$/;"	f	file:
InsertFaceInSet	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void InsertFaceInSet(Pmwx::Face_handle f, set<Pmwx::Face_handle> * s)$/;"	f	file:
InsertMidPoints	.\XESCore\MeshAlgs.cpp	/^void InsertMidPoints(const DEMGeo& in_orig, CDT& io_mesh, CDT::Vertex_handle v1, CDT::Vertex_handle v2, CDT::Face_handle& hint)$/;"	f
InsertNewMasters	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::InsertNewMasters(void)$/;"	f	class:PolyRasterizer
InsertObj_f	.\XPTools\AddObjects.cpp	/^typedef	void ( * InsertObj_f)(double lat, double lon, double heading, const string& name, void * ref);$/;"	t	file:
InsertOneEdge	.\XESCore\TensorRoads.cpp	/^Halfedge_handle InsertOneEdge(const Point_2& p1, const Point_2& p2, Pmwx& io_map, Locator& io_locator)$/;"	f
InsertOneSegment	.\Tiger\(TigerImport Backup.cpp).cpp	/^Pmwx::Halfedge_handle	InsertOneSegment($/;"	f
InsertVertexInSet	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void InsertVertexInSet(Pmwx::Vertex_handle f, set<Pmwx::Vertex_handle> * s)$/;"	f	file:
InsetPolygon_2	.\XESCore\MapDefs.h	/^static void	InsetPolygon_2($/;"	f
Inset_f	.\XESCore\MapPolygon.h	/^typedef double (* Inset_f)(Halfedge_const_handle he);$/;"	t
InstallAssertHandler	.\Utils\AssertUtils.cpp	/^AssertHandler_f		InstallAssertHandler(AssertHandler_f f)$/;"	f
InstallCallbacks	.\UI\FontMgr.cpp	/^void	FontMgr::InstallCallbacks($/;"	f	class:FontMgr
InstallChunk	.\Installer\InstallerProcs.cpp	/^void	InstallChunk(InstallerChunk& inChunk, const char * basePath)$/;"	f
InstallDebugAssertHandler	.\Utils\AssertUtils.cpp	/^AssertHandler_f		InstallDebugAssertHandler(AssertHandler_f f)$/;"	f
InstallNewHandler	.\GUI\GUI_MemoryHog.cpp	/^void	GUI_MemoryHog::InstallNewHandler(void)$/;"	f	class:GUI_MemoryHog
InstallerChunk	.\Installer\InstallerProcs.cpp	/^InstallerChunk::InstallerChunk() : mem(NULL), len(0) { }$/;"	f	class:InstallerChunk
InstallerChunk	.\Installer\InstallerProcs.h	/^struct InstallerChunk {$/;"	s
InstallerError	.\Installer\BuildInstaller.cpp	/^void	InstallerError($/;"	f
InstallerError	.\Installer\InstallerRun.cpp	/^void	InstallerError($/;"	f
InstallerStat	.\Installer\BuildInstaller.cpp	/^struct	InstallerStat {$/;"	s	file:
Int	.\lib_json\include\json\config.h	/^   typedef int Int;$/;"	t	namespace:Json
Int	.\lib_json\include\json\value.h	/^      typedef Json::Int Int;$/;"	t	class:Json::Value
Int64	.\lib_json\include\json\config.h	/^   typedef __int64 Int64;$/;"	t	namespace:Json
Int64	.\lib_json\include\json\config.h	/^   typedef long long int Int64;$/;"	t	namespace:Json
Int64	.\lib_json\include\json\value.h	/^      typedef Json::Int64 Int64;$/;"	t	class:Json::Value
IntToKey	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void IntToKey(IniSectionMap& inMap, const char * sec, const  char * key, int& v)$/;"	f	file:
IntegLine	.\XESCore\DEMAlgs.cpp	/^float	IntegLine(const DEMGeo& dem, double x1, double y1, double x2, double y2, int over_sample_ratio)$/;"	f
InternalDragEnter	.\GUI\GUI_Pane.cpp	/^GUI_DragOperation		GUI_Pane::InternalDragEnter	(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_Pane
InternalDragLeave	.\GUI\GUI_Pane.cpp	/^void					GUI_Pane::InternalDragLeave	(void)$/;"	f	class:GUI_Pane
InternalDragOver	.\GUI\GUI_Pane.cpp	/^GUI_DragOperation		GUI_Pane::InternalDragOver	(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_Pane
InternalDragScroll	.\GUI\GUI_Pane.cpp	/^void GUI_Pane::InternalDragScroll(int x, int y)$/;"	f	class:GUI_Pane
InternalDraw	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::InternalDraw(GUI_GraphState * state)$/;"	f	class:GUI_Pane
InternalDrop	.\GUI\GUI_Pane.cpp	/^GUI_DragOperation		GUI_Pane::InternalDrop		(int x, int y, GUI_DragData * drag, GUI_DragOperation allowed, GUI_DragOperation recommended)$/;"	f	class:GUI_Pane
InternalFlags	.\lib_json\include\json\value.h	/^      enum InternalFlags { $/;"	g	class:Json::ValueInternalLink
InternalGetCursor	.\GUI\GUI_Pane.cpp	/^int			GUI_Pane::InternalGetCursor(int x, int y)$/;"	f	class:GUI_Pane
InternalGetHelpTip	.\GUI\GUI_Pane.cpp	/^int		GUI_Pane::InternalGetHelpTip(int x, int y, int tip_bounds[4], string& tip)$/;"	f	class:GUI_Pane
InternalMouseDown	.\GUI\GUI_Pane.cpp	/^GUI_Pane *	GUI_Pane::InternalMouseDown(int x, int y, int button)$/;"	f	class:GUI_Pane
InternalMouseMove	.\GUI\GUI_Pane.cpp	/^GUI_Pane *	GUI_Pane::InternalMouseMove(int x, int y)$/;"	f	class:GUI_Pane
InternalMouseWheel	.\GUI\GUI_Pane.cpp	/^int			GUI_Pane::InternalMouseWheel(int x, int y, int dist, int axis)$/;"	f	class:GUI_Pane
Interp2	.\RenderFarmUI\RF_ImageTool.cpp	/^inline double	Interp2(double frac, double sml, double big)$/;"	f
Interp2	.\Utils\BitmapUtils.cpp	/^inline double	Interp2(double frac, double sml, double big)$/;"	f
Interp2	.\XPTools\GetImage.cpp	/^inline double	Interp2(double frac, double sml, double big)$/;"	f
Interp2d	.\ObjEdit\OE_Zoomer3d.cpp	/^static	inline	float	Interp2d($/;"	f	file:
Interp2d	.\Utils\GeoUtils.cpp	/^static	inline	float	Interp2d($/;"	f	file:
Interp2d	.\Utils\ObjUtils.cpp	/^static	inline	float	Interp2d($/;"	f	file:
Interp3d	.\Utils\ObjUtils.cpp	/^static	void	Interp3d($/;"	f	file:
InterpDoubleDEM	.\XESCore\DEMAlgs.cpp	/^void InterpDoubleDEM(const DEMGeo& inDEM, DEMGeo& bigger)$/;"	f
InterpF	.\ObjEdit\(old)\OE_TexEd.cpp	/^inline float	InterpF(float mi, float ma, float v) { return mi + v * (ma - mi); }$/;"	f
InterpPt3	.\Utils\RoadNetUtils.cpp	/^void	InterpPt3(const Point3& p1, const Point3& p2, float i, Point3& o)$/;"	f
IntersectLinesAroundJunction	.\Utils\CompGeomUtils.cpp	/^bool	IntersectLinesAroundJunction($/;"	f
IntersectRanges	.\Utils\PolyRasterUtils.h	/^void BoxRasterizer<Number>::IntersectRanges(vector<Number>& o, const vector<Number>& a)$/;"	f	class:BoxRasterizer
IntersectRanges	.\Utils\PolyRasterUtils.h	/^void BoxRasterizer<Number>::IntersectRanges(vector<Number>& out, const vector<Number>& a, const vector<Number>& b)$/;"	f	class:BoxRasterizer
IntersectsBox	.\WEDEntities\WED_GISBoundingBox.cpp	/^bool			WED_GISBoundingBox::IntersectsBox	(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISBoundingBox
IntersectsBox	.\WEDEntities\WED_GISChain.cpp	/^bool				WED_GISChain::IntersectsBox	(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISChain
IntersectsBox	.\WEDEntities\WED_GISComposite.cpp	/^bool			WED_GISComposite::IntersectsBox	(GISLayer_t l, const Bbox2&  bounds) const$/;"	f	class:WED_GISComposite
IntersectsBox	.\WEDEntities\WED_GISEdge.cpp	/^bool			WED_GISEdge::IntersectsBox	(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISEdge
IntersectsBox	.\WEDEntities\WED_GISLine.cpp	/^bool			WED_GISLine::IntersectsBox	(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISLine
IntersectsBox	.\WEDEntities\WED_GISLine_Width.cpp	/^bool			WED_GISLine_Width::IntersectsBox	(GISLayer_t l,  const Bbox2&  bounds) const$/;"	f	class:WED_GISLine_Width
IntersectsBox	.\WEDEntities\WED_GISPoint.cpp	/^bool				WED_GISPoint::IntersectsBox	(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISPoint
IntersectsBox	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^bool			WED_GISPoint_HeadingWidthLength::IntersectsBox	(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
IntersectsBox	.\WEDEntities\WED_GISPolygon.cpp	/^bool				WED_GISPolygon::IntersectsBox		(GISLayer_t l, const Bbox2&  bounds) const$/;"	f	class:WED_GISPolygon
IsActiveNow	.\GUI\GUI_Pane.cpp	/^bool		GUI_Pane::IsActiveNow(void) const$/;"	f	class:GUI_Pane
IsActiveNow	.\GUI\GUI_Window.cpp	/^bool		GUI_Window::IsActiveNow(void) const$/;"	f	class:GUI_Window
IsAdjacentWater	.\XESCore\MapTopology.cpp	/^bool		IsAdjacentWater(Face_const_handle in_face, bool unbounded_is_wet)$/;"	f
IsAirportTerrain	.\XESCore\DEMTables.cpp	/^bool	IsAirportTerrain(int t)$/;"	f
IsAliased	.\XESCore\DSFBuilder.cpp	/^static int IsAliased(int lu)$/;"	f	file:
IsAlive	.\Network\HTTPClient.cpp	/^bool	HTTPConnection::IsAlive(void)$/;"	f	class:HTTPConnection
IsAlive	.\WEDNetwork\WED_Connection.cpp	/^bool 	WED_Connection::IsAlive()$/;"	f	class:WED_Connection
IsBorderPair	.\XPTools\TaxiMaker.cpp	/^static	bool	IsBorderPair(int leftSym, int rightSym)$/;"	f	file:
IsBridge	.\XESCore\Hydro.cpp	/^bool IsBridge(Halfedge_handle e)$/;"	f
IsCamEnabled	.\WEDNetwork\WED_NWLinkAdapter.h	/^				int     IsCamEnabled(){return mCamera.enabled;}$/;"	f	class:WED_NWLinkAdapter
IsCheck	.\lib_json\src\test_lib_json\main.cpp	/^   struct IsCheck$/;"	s	struct:ValueTest	file:
IsCheck	.\lib_json\src\test_lib_json\main.cpp	/^ValueTest::IsCheck::IsCheck()$/;"	f	class:ValueTest::IsCheck
IsClosed	.\WEDEntities\WED_AirportChain.cpp	/^bool	 WED_AirportChain::IsClosed	(void	) const$/;"	f	class:WED_AirportChain
IsClosed	.\WEDEntities\WED_FacadeRing.cpp	/^bool	 WED_FacadeRing::IsClosed	(void	) const$/;"	f	class:WED_FacadeRing
IsClosed	.\WEDEntities\WED_ForestRing.cpp	/^bool	 WED_ForestRing::IsClosed	(void	) const$/;"	f	class:WED_ForestRing
IsClosed	.\WEDEntities\WED_GISEdge.cpp	/^bool				WED_GISEdge::IsClosed(void) const$/;"	f	class:WED_GISEdge
IsClosed	.\WEDEntities\WED_GISLine.cpp	/^bool		WED_GISLine::IsClosed(void) const$/;"	f	class:WED_GISLine
IsClosed	.\WEDEntities\WED_LinePlacement.cpp	/^bool WED_LinePlacement::IsClosed(void) const$/;"	f	class:WED_LinePlacement
IsClosed	.\WEDEntities\WED_Ring.cpp	/^bool	 WED_Ring::IsClosed	(void	) const$/;"	f	class:WED_Ring
IsClosed	.\WEDEntities\WED_StringPlacement.cpp	/^bool WED_StringPlacement::IsClosed(void) const$/;"	f	class:WED_StringPlacement
IsCoastal	.\XESCore\Hydro.cpp	/^inline bool	IsCoastal(const DEMGeo& dem, int x, int y)$/;"	f
IsCockpit	.\Obj\XObjBuilder.h	/^	inline int		IsCockpit(void) const	{ return cockpit > -2;	}$/;"	f	class:XObjBuilder
IsConsoleApp	.\XPTools\XGrinderShell.cpp	/^bool IsConsoleApp(const char * path)$/;"	f
IsCustom	.\XESCore\DSFBuilder.cpp	/^inline bool IsCustom(int n)$/;"	f
IsCustom	.\XESCore\MeshAlgs.cpp	/^inline bool IsCustom(int n)$/;"	f
IsCustomOverWaterAny	.\XESCore\DSFBuilder.cpp	/^inline bool IsCustomOverWaterAny(int n)$/;"	f
IsCustomOverWaterHard	.\XESCore\DSFBuilder.cpp	/^inline bool IsCustomOverWaterHard(int n)$/;"	f
IsCustomOverWaterSoft	.\XESCore\DSFBuilder.cpp	/^inline bool IsCustomOverWaterSoft(int n)$/;"	f
IsDirty	.\WEDCore\WED_Archive.cpp	/^int		WED_Archive::IsDirty(void)$/;"	f	class:WED_Archive
IsDirty	.\WEDCore\WED_Document.cpp	/^bool	WED_Document::IsDirty(void)$/;"	f	class:WED_Document
IsDisabledString	.\GUI\GUI_Application.cpp	/^static bool IsDisabledString(string& ioString)$/;"	f	file:
IsDone	.\Network\HTTPClient.cpp	/^bool	HTTPRequest::IsDone(void)$/;"	f	class:HTTPRequest
IsDone	.\Network\Terraserver.cpp	/^bool			AsyncImage::IsDone(void)$/;"	f	class:AsyncImage
IsDragClick	.\GUI\GUI_Pane.cpp	/^bool				GUI_Pane::IsDragClick(int x, int y, int button)$/;"	f	class:GUI_Pane
IsDragClick	.\GUI\GUI_Window.cpp	/^bool				GUI_Window::IsDragClick(int x, int y, int button)$/;"	f	class:GUI_Window
IsEdgeVertex	.\XESCore\MeshDefs.h	/^inline bool IsEdgeVertex(CDT& inMesh, CDT::Vertex_handle v)$/;"	f
IsEnabled	.\GUI\GUI_Pane.cpp	/^bool		GUI_Pane::IsEnabled(void) const$/;"	f	class:GUI_Pane
IsEnabled	.\WEDXPlugin\WED_XPluginCamera.cpp	/^int WED_XPluginCamera::IsEnabled()$/;"	f	class:WED_XPluginCamera
IsEnabledCam	.\WEDXPlugin\WED_XPluginMgr.h	/^        bool    IsEnabledCam(){return mCamera.IsEnabled();}$/;"	f	class:WED_XPluginMgr
IsEnabledNow	.\GUI\GUI_Pane.cpp	/^bool		GUI_Pane::IsEnabledNow(void) const$/;"	f	class:GUI_Pane
IsError	.\Network\HTTPClient.cpp	/^bool	HTTPRequest::IsError(void)$/;"	f	class:HTTPRequest
IsFaceNotSliverFast	.\XESCore\MapAlgs.cpp	/^bool IsFaceNotSliverFast(Pmwx::Face_handle f, double metric)$/;"	f
IsFeatureObject	.\XESCore\ObjTables.cpp	/^bool IsFeatureObject(int inName)$/;"	f
IsFieldArray	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldArray(int n) const$/;"	f	class:VPF_TableDef
IsFieldFloat	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldFloat(int n) const$/;"	f	class:VPF_TableDef
IsFieldInt	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldInt(int n) const$/;"	f	class:VPF_TableDef
IsFieldNumeric	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldNumeric(int n) const$/;"	f	class:VPF_TableDef
IsFieldString	.\VPF\VPFTable.cpp	/^bool	VPF_TableDef::IsFieldString(int n) const$/;"	f	class:VPF_TableDef
IsFieldThreeTuple	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldThreeTuple(int n) const$/;"	f	class:VPF_TableDef
IsFieldTripletKey	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldTripletKey(int n) const$/;"	f	class:VPF_TableDef
IsFieldTwoTuple	.\VPF\VPFTable.cpp	/^int		VPF_TableDef::IsFieldTwoTuple(int n) const$/;"	f	class:VPF_TableDef
IsFocused	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::IsFocused(void)$/;"	f	class:GUI_Commander
IsFocusedChain	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::IsFocusedChain(void)$/;"	f	class:GUI_Commander
IsForestType	.\XESCore\ForestTables.h	/^inline bool IsForestType(int t) { return gForestInfo.count(t); }$/;"	f
IsGraphEdge	.\WEDMap\WED_ToolUtils.cpp	/^bool IsGraphEdge(WED_Thing * what)$/;"	f
IsGraphNode	.\WEDMap\WED_ToolUtils.cpp	/^bool IsGraphNode(WED_Thing * what)$/;"	f
IsHard	.\Obj\XObjBuilder.h	/^	inline string	IsHard(void) const		{ return hard;			}$/;"	f	class:XObjBuilder
IsIdle	.\Network\HTTPClient.cpp	/^bool	HTTPConnection::IsIdle(void)$/;"	f	class:HTTPConnection
IsIndependentGlyph	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::IsIndependentGlyph(const string & inLetters)$/;"	f	class:WED_Sign_Parser
IsInteriorFilled	.\WEDEntities\WED_AirportBoundary.h	/^	virtual	bool		IsInteriorFilled(void) const { return false; }$/;"	f	class:WED_AirportBoundary
IsInteriorFilled	.\WEDEntities\WED_DrapedOrthophoto.h	/^	virtual	bool		IsInteriorFilled(void) const { return true; }$/;"	f	class:WED_DrapedOrthophoto
IsInteriorFilled	.\WEDEntities\WED_FacadePlacement.h	/^	virtual	bool		IsInteriorFilled(void) const { return GetTopoMode() == 0; }$/;"	f	class:WED_FacadePlacement
IsInteriorFilled	.\WEDEntities\WED_ForestPlacement.h	/^	virtual	bool		IsInteriorFilled(void) const { return GetFillMode() == dsf_fill_area; }$/;"	f	class:WED_ForestPlacement
IsInteriorFilled	.\WEDEntities\WED_OverlayImage.h	/^	virtual	bool		IsInteriorFilled(void) const { return true; }$/;"	f	class:WED_OverlayImage
IsInteriorFilled	.\WEDEntities\WED_PolygonPlacement.h	/^	virtual	bool		IsInteriorFilled(void) const { return true; }$/;"	f	class:WED_PolygonPlacement
IsInteriorFilled	.\WEDEntities\WED_Taxiway.h	/^	virtual	bool		IsInteriorFilled(void) const { return true; }$/;"	f	class:WED_Taxiway
IsJustPoints	.\WEDEntities\WED_AirportChain.h	/^	virtual	bool			IsJustPoints(void) const { return false; }$/;"	f	class:WED_AirportChain
IsJustPoints	.\WEDEntities\WED_FacadeRing.h	/^	virtual	bool			IsJustPoints(void) const { return false; }$/;"	f	class:WED_FacadeRing
IsJustPoints	.\WEDEntities\WED_ForestRing.cpp	/^bool			WED_ForestRing::IsJustPoints(void) const$/;"	f	class:WED_ForestRing
IsJustPoints	.\WEDEntities\WED_LinePlacement.h	/^	virtual	bool			IsJustPoints(void) const { return false; }$/;"	f	class:WED_LinePlacement
IsJustPoints	.\WEDEntities\WED_Ring.h	/^	virtual	bool			IsJustPoints(void) const { return false; }$/;"	f	class:WED_Ring
IsJustPoints	.\WEDEntities\WED_StringPlacement.h	/^	virtual	bool			IsJustPoints(void) const { return false; }$/;"	f	class:WED_StringPlacement
IsNew	.\WEDEntities\WED_DrapedOrthophoto.cpp	/^bool WED_DrapedOrthophoto::IsNew(string * out_suffix) $/;"	f	class:WED_DrapedOrthophoto
IsNoFlattenVertex	.\XESCore\MeshAlgs.h	/^inline bool IsNoFlattenVertex(const CDT& inMesh, CDT::Vertex_handle v)$/;"	f
IsOnDisk	.\WEDCore\WED_Document.cpp	/^bool	WED_Document::IsOnDisk(void)$/;"	f	class:WED_Document
IsOneway	.\WEDEntities\WED_RoadEdge.cpp	/^bool			WED_RoadEdge::IsOneway(void) const$/;"	f	class:WED_RoadEdge
IsOneway	.\WEDEntities\WED_TaxiRoute.cpp	/^bool	WED_TaxiRoute::IsOneway(void) const$/;"	f	class:WED_TaxiRoute
IsOneway	.\XESCore\NetTables.cpp	/^bool	IsOneway(int rep_type)$/;"	f
IsOpen	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::IsOpen(const string& r)$/;"	f	class:WED_LibraryListAdapter
IsPackageDefault	.\WEDCore\WED_PackageMgr.cpp	/^bool		WED_PackageMgr::IsPackageDefault(int n) const$/;"	f	class:WED_PackageMgr
IsPolygonSliver	.\XESCore\MapPolygon.cpp	/^bool	IsPolygonSliver(const Polygon_with_holes_2& pwh, double r, const Bbox_2& extent)$/;"	f
IsQueued	.\Network\HTTPClient.cpp	/^bool	HTTPRequest::IsQueued(void)$/;"	f	class:HTTPRequest
IsReady	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^int     WED_NWLinkAdapter::IsReady(void)$/;"	f	class:WED_NWLinkAdapter
IsReady	.\WEDNetwork\WED_Server.cpp	/^int  WED_Server::IsReady()$/;"	f	class:WED_Server
IsReady	.\WEDXPlugin\WED_XPluginClient.h	/^				int 	IsReady(){return mIsReady;}$/;"	f	class:WED_XPluginClient
IsReflex	.\Utils\Skeleton.cpp	/^	bool	IsReflex(void) const {$/;"	f	struct:SK_Vertex
IsRegion	.\Obj\XObjBuilder.h	/^	inline int		IsRegion(void) const	{ return cockpit >= 0;  }$/;"	f	class:XObjBuilder
IsResourceDefault	.\WEDCore\WED_LibraryMgr.cpp	/^bool	WED_LibraryMgr::IsResourceDefault(const string& r)$/;"	f	class:WED_LibraryMgr
IsResourceDeprecatedOrPrivate	.\WEDCore\WED_LibraryMgr.cpp	/^bool	WED_LibraryMgr::IsResourceDeprecatedOrPrivate(const string& r)$/;"	f	class:WED_LibraryMgr
IsResourceLibrary	.\WEDCore\WED_LibraryMgr.cpp	/^bool	WED_LibraryMgr::IsResourceLibrary(const string& r)$/;"	f	class:WED_LibraryMgr
IsResourceLocal	.\WEDCore\WED_LibraryMgr.cpp	/^bool	WED_LibraryMgr::IsResourceLocal(const string& r)$/;"	f	class:WED_LibraryMgr
IsRunway	.\WEDEntities\WED_TaxiRoute.cpp	/^bool	WED_TaxiRoute::IsRunway(void) const$/;"	f	class:WED_TaxiRoute
IsSelected	.\WEDEntities\WED_Select.cpp	/^bool		WED_Select::IsSelected(ISelectable * iwho) const$/;"	f	class:WED_Select
IsSplit	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^bool	WED_GISPoint_Bezier::IsSplit(void) const$/;"	f	class:WED_GISPoint_Bezier
IsStarted	.\WEDNetwork\WED_Server.h	/^				int 	IsStarted(){return  mStarted;}$/;"	f	class:WED_Server
IsSupportedChar	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::IsSupportedChar(char inChar)$/;"	f	class:WED_Sign_Parser
IsTriangleInverted	.\XESCore\MapBuffer.cpp	/^bool IsTriangleInverted($/;"	f
IsTwinRoads	.\XESCore\NetTables.cpp	/^bool	IsTwinRoads(int rep_type1, int rep_type2)$/;"	f
IsValid	.\Utils\XCarBoneUtils.cpp	/^bool		XCarBones::IsValid(void * w)$/;"	f	class:XCarBones
IsVisible	.\GUI\GUI_Pane.cpp	/^bool		GUI_Pane::IsVisible(void) const$/;"	f	class:GUI_Pane
IsVisible	.\ObjEdit\OE_Pane.cpp	/^bool	OE_Pane::IsVisible(void) const$/;"	f	class:OE_Pane
IsVisible	.\Obj\XObjBuilder.h	/^	inline bool		IsVisible(void) const	{ return !draw_disable;	}$/;"	f	class:XObjBuilder
IsVisible	.\RenderFarmUI\RF_Pane.cpp	/^bool	RF_Pane::IsVisible(void) const$/;"	f	class:RF_Pane
IsVisible	.\WEDMap\WED_MapLayer.cpp	/^bool		WED_MapLayer::IsVisible(void) const$/;"	f	class:WED_MapLayer
IsVisibleNow	.\GUI\GUI_Pane.cpp	/^bool		GUI_Pane::IsVisibleNow(void) const$/;"	f	class:GUI_Pane
IsVisibleNow	.\GUI\GUI_Window.cpp	/^bool		GUI_Window::IsVisibleNow(void) const$/;"	f	class:GUI_Window
IsWEDLocked	.\WEDEntities\WED_GISComposite.cpp	/^static bool IsWEDLocked(IGISEntity * g)$/;"	f	file:
IsWater	.\XESCore\MapDefs.h	/^	bool		IsWater(void) const  { return (mTerrainType == terrain_Water); }$/;"	f	class:GIS_face_data
IsWellKnownFeature	.\XESCore\ObjTables.cpp	/^bool IsWellKnownFeature(int inFeat)$/;"	f
Is_CCW_Between	.\Utils\CompGeomUtils.cpp	/^bool	Is_CCW_Between(const Vector2& v1, const Vector2& v2, const Vector2& v3)$/;"	f
Iso_rectangle_2	.\XESCore\CGALTypes.h	/^typedef	Kernel::Iso_rectangle_2								Iso_rectangle_2;$/;"	t
Iterate	.\Utils\XCull.h	/^XCull<__Traits>::Iterate($/;"	f	class:XCull
Iterate	.\Utils\XCull.h	/^void	XCull<__Traits>::Iterate($/;"	f	class:XCull
IterateBucket	.\Utils\XCull.h	/^void	XCull<__Traits>::IterateBucket($/;"	f	class:XCull
IterateDirsNew	.\Installer\BuildInstaller.cpp	/^bool IterateDirsNew(const char * fileName, bool isDir, void * ref)$/;"	f
IterateDirsOld	.\Installer\BuildInstaller.cpp	/^bool IterateDirsOld(const char * fileName, bool isDir, void * ref)$/;"	f
IterateDoReverse	.\WEDWindows\WED_GroupCommands.cpp	/^static int IterateDoReverse(ISelectable * what, void * ref)$/;"	f	file:
IterateDoRotate	.\WEDWindows\WED_GroupCommands.cpp	/^static int IterateDoRotate(ISelectable * what, void * ref)$/;"	f	file:
IterateNonReversable	.\WEDWindows\WED_GroupCommands.cpp	/^static int IterateNonReversable(ISelectable * what, void * ref)$/;"	f	file:
IterateSelectionAnd	.\WEDEntities\WED_Select.cpp	/^int			WED_Select::IterateSelectionAnd(int (* func)(ISelectable * who, void * ref), void * ref) const$/;"	f	class:WED_Select
IterateSelectionOr	.\WEDEntities\WED_Select.cpp	/^int			WED_Select::IterateSelectionOr(int (* func)(ISelectable * who, void * ref), void * ref) const$/;"	f	class:WED_Select
Iterate_ChildRequiresClass	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_ChildRequiresClass(ISelectable * what, void * ref)$/;"	f
Iterate_CollectChildPointSequences	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_CollectChildPointSequences(ISelectable * what, void * ref)$/;"	f
Iterate_CollectEntities	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_CollectEntities(ISelectable * what, void * ref)$/;"	f
Iterate_CollectEntitiesUV	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_CollectEntitiesUV(ISelectable * what, void * ref)$/;"	f
Iterate_CollectRequiredParents	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_CollectRequiredParents(ISelectable * what, void * ref)$/;"	f
Iterate_CollectThings	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_CollectThings(ISelectable * what, void * ref)$/;"	f
Iterate_HasSelectedParent	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_HasSelectedParent(ISelectable * what, void * ref)$/;"	f
Iterate_IsClass	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsClass(ISelectable * what, void * ref)$/;"	f
Iterate_IsNonEmptyComposite	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_IsNonEmptyComposite(ISelectable * what, void * ref)$/;"	f
Iterate_IsNotGroup	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_IsNotGroup(ISelectable * what, void * ref)$/;"	f
Iterate_IsNotPartOfStructuredObject	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsNotPartOfStructuredObject(ISelectable * what, void * ref)$/;"	f
Iterate_IsNotStructuredObject	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsNotStructuredObject(ISelectable * what, void * ref)$/;"	f
Iterate_IsOrChildClass	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsOrChildClass(ISelectable * what, void * ref)$/;"	f
Iterate_IsOrParentClass	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsOrParentClass(ISelectable * what, void * ref)$/;"	f
Iterate_IsParentOf	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_IsParentOf(ISelectable * what, void * ref)					\/\/ This object is a parent of (or is) "ref".$/;"	f
Iterate_IsPartOfStructuredObject	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsPartOfStructuredObject(ISelectable * what, void * ref)$/;"	f
Iterate_IsStructuredObject	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_IsStructuredObject(ISelectable * what, void * ref)$/;"	f
Iterate_JSON_One_Airport	.\WEDImportExport\WED_GatewayExport.cpp	/^int	Iterate_JSON_One_Airport(ISelectable * what, void * ref)$/;"	f
Iterate_MatchesThing	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_MatchesThing(ISelectable * what, void * ref)					\/\/ ref is a thing to match$/;"	f
Iterate_NotMatchesThing	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_NotMatchesThing(ISelectable * what, void * ref)					\/\/ ref is a thing to match$/;"	f
Iterate_ParentMismatch	.\WEDMap\WED_ToolUtils.cpp	/^int Iterate_ParentMismatch(ISelectable * what, void * ref)$/;"	f
Iterate_RequiresClass	.\WEDMap\WED_ToolUtils.cpp	/^int	Iterate_RequiresClass(ISelectable * what, void * ref)$/;"	f
IteratorState	.\lib_json\include\json\value.h	/^         IteratorState() $/;"	f	struct:Json::ValueInternalArray::IteratorState
IteratorState	.\lib_json\include\json\value.h	/^         IteratorState() $/;"	f	struct:Json::ValueInternalMap::IteratorState
IteratorState	.\lib_json\include\json\value.h	/^      struct IteratorState \/\/ Must be a POD$/;"	s	class:Json::ValueInternalArray
IteratorState	.\lib_json\include\json\value.h	/^      struct IteratorState$/;"	s	class:Json::ValueInternalMap
JSONCPP_BATCHALLOCATOR_H_INCLUDED	.\lib_json\src\lib_json\json_batchallocator.h	7;"	d
JSONCPP_DEPRECATED	.\lib_json\include\json\config.h	66;"	d
JSONCPP_DEPRECATED	.\lib_json\include\json\config.h	70;"	d
JSONTEST_ASSERT	.\lib_json\src\test_lib_json\jsontest.h	201;"	d
JSONTEST_ASSERT_EQUAL	.\lib_json\src\test_lib_json\jsontest.h	223;"	d
JSONTEST_ASSERT_PRED	.\lib_json\src\test_lib_json\jsontest.h	210;"	d
JSONTEST_ASSERT_STRING_EQUAL	.\lib_json\src\test_lib_json\jsontest.h	229;"	d
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\jsontest.h	235;"	d
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, accessArray )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, asFloat )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareArray )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareBoolean )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareDouble )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareInt )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareNull )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareObject )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareString )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareType )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, compareUInt )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isArray )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isBool )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isDouble )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isInt )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isNull )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isObject )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isString )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, isUInt )$/;"	f
JSONTEST_FIXTURE	.\lib_json\src\test_lib_json\main.cpp	/^JSONTEST_FIXTURE( ValueTest, size )$/;"	f
JSONTEST_FIXTURE_FACTORY	.\lib_json\src\test_lib_json\jsontest.h	253;"	d
JSONTEST_H_INCLUDED	.\lib_json\src\test_lib_json\jsontest.h	7;"	d
JSONTEST_REGISTER_FIXTURE	.\lib_json\src\test_lib_json\jsontest.h	256;"	d
JSON_API	.\lib_json\include\json\config.h	45;"	d
JSON_API	.\lib_json\include\json\config.h	47;"	d
JSON_API	.\lib_json\include\json\config.h	49;"	d
JSON_API	.\lib_json\include\json\config.h	51;"	d
JSON_ASSERT	.\lib_json\src\lib_json\json_value.cpp	24;"	d	file:
JSON_ASSERT_MESSAGE	.\lib_json\src\lib_json\json_value.cpp	26;"	d	file:
JSON_ASSERT_UNREACHABLE	.\lib_json\src\lib_json\json_value.cpp	23;"	d	file:
JSON_AUTOLINK_H_INCLUDED	.\lib_json\include\json\autolink.h	7;"	d
JSON_BUF	.\WEDImportExport\WED_GatewayImport.cpp	/^typedef vector<char> JSON_BUF;$/;"	t	file:
JSON_CONFIG_H_INCLUDED	.\lib_json\include\json\config.h	7;"	d
JSON_FAIL_MESSAGE	.\lib_json\src\lib_json\json_value.cpp	25;"	d	file:
JSON_FORWARDS_H_INCLUDED	.\lib_json\include\json\forwards.h	7;"	d
JSON_HAS_INT64	.\lib_json\include\json\config.h	79;"	d
JSON_HAS_INT64	.\lib_json\include\json\config.h	91;"	d
JSON_JSON_H_INCLUDED	.\lib_json\include\json\json.h	7;"	d
JSON_USE_CPPTL	.\lib_json\include\json\config.h	40;"	d
JSON_USE_EXCEPTION	.\lib_json\include\json\config.h	29;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	.\lib_json\include\json\config.h	61;"	d
JSON_WRITER_H_INCLUDED	.\lib_json\include\json\writer.h	7;"	d
Json	.\lib_json\include\json\config.h	/^namespace Json {$/;"	n
Json	.\lib_json\include\json\features.h	/^namespace Json {$/;"	n
Json	.\lib_json\include\json\forwards.h	/^namespace Json {$/;"	n
Json	.\lib_json\include\json\reader.h	/^namespace Json {$/;"	n
Json	.\lib_json\include\json\value.h	/^namespace Json {$/;"	n
Json	.\lib_json\include\json\writer.h	/^namespace Json {$/;"	n
Json	.\lib_json\src\lib_json\json_batchallocator.h	/^namespace Json {$/;"	n
Json	.\lib_json\src\lib_json\json_reader.cpp	/^namespace Json {$/;"	n	file:
Json	.\lib_json\src\lib_json\json_tool.h	/^namespace Json {$/;"	n
Json	.\lib_json\src\lib_json\json_value.cpp	/^namespace Json {$/;"	n	file:
Json	.\lib_json\src\lib_json\json_writer.cpp	/^namespace Json {$/;"	n	file:
JsonTest	.\lib_json\src\test_lib_json\jsontest.cpp	/^namespace JsonTest {$/;"	n	file:
JsonTest	.\lib_json\src\test_lib_json\jsontest.h	/^namespace JsonTest {$/;"	n
JuncPair	.\XESCore\NetPlacement.cpp	/^typedef pair<Net_JunctionInfo_t *,Net_JunctionInfo_t *>	JuncPair;$/;"	t	file:
KEEP_UPLOAD_MASTER_ZIP	.\WEDImportExport\WED_GatewayExport.cpp	74;"	d	file:
KILL_IF_APT_LEAK	.\XESCore\Airports.cpp	54;"	d	file:
Key	.\OGLE\ogle.cpp	/^void			OGLE::Key(char				key, int extend)$/;"	f	class:OGLE
KeyPressed	.\GUI\GUI_Window.cpp	/^int			GUI_Window::KeyPressed(uint32_t inKey, long inMsg, long inParam1, long inParam2)$/;"	f	class:GUI_Window
KeyPressed	.\UI\XGrinderApp.cpp	/^	virtual	int				KeyPressed(uint32_t, long, long, long) { return 1; }$/;"	f	class:XGrinderWin
KeyPressed	.\UI\XPWidgetWin.cpp	/^int			XPWidgetWin::KeyPressed(uint32_t inKey, long msg, long param1, long param2)$/;"	f	class:XPWidgetWin
KeyPressed	.\XPTools\ViewObj.cpp	/^int			XObjWin::KeyPressed(unsigned int inKey, long, long, long)$/;"	f	class:XObjWin
KeyTable	.\Utils\XCarBoneUtils.h	/^	typedef map<double, double>	KeyTable;$/;"	t	struct:XCarBone
KeyToFloat	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void KeyToFloat(IniSectionMap& inMap, const char * sec, const  char * key, float& v)$/;"	f	file:
KeyToInt	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void KeyToInt(IniSectionMap& inMap, const char * sec, const  char * key, int& v)$/;"	f	file:
KeyToStr	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void KeyToStr(IniSectionMap& inMap, const char * sec, const  char * key, string& v)$/;"	f	file:
KeyType	.\Utils\QuadTree.h	/^	typedef typename __T::KeyType			KeyType;$/;"	t	class:QuadTree
Key_MBCS	.\OGLE\ogle.cpp	/^void			OGLE::Key_MBCS(int count, const char				keys[], int extend)$/;"	f	class:OGLE
Kill	.\Network\HTTPClient.cpp	/^void	HTTPConnection::Kill(void)$/;"	f	class:HTTPConnection
Kill	.\ObjEdit\OE_Pane.cpp	/^void	OE_Pane::Kill(bool inRecursive)$/;"	f	class:OE_Pane
Kill	.\RenderFarmUI\RF_Pane.cpp	/^void	RF_Pane::Kill(bool inRecursive)$/;"	f	class:RF_Pane
Kill	.\WEDNetwork\WED_Connection.cpp	/^void 	WED_Connection::Kill()$/;"	f	class:WED_Connection
KillBadDSF	.\XESTools\GISTool_MiscCmds.cpp	/^int KillBadDSF(const vector<const char *>& args)$/;"	f
KillEditing	.\GUI\GUI_TextTable.cpp	/^void	GUI_TextTable::KillEditing(bool save_it)$/;"	f	class:GUI_TextTable
KillOperation	.\WEDMap\WED_CreateToolBase.cpp	/^void			WED_CreateToolBase::KillOperation(bool mouse_is_down)$/;"	f	class:WED_CreateToolBase
KillOperation	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::KillOperation(bool mouse_is_down)$/;"	f	class:WED_HandleToolBase
KillOperation	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void				WED_TCEToolAdapter::KillOperation(bool mouse_is_down)$/;"	f	class:WED_TCEToolAdapter
KillSliverWater	.\XESCore\MapAlgs.cpp	/^int KillSliverWater(Pmwx& pmwx, double metric, ProgressFunc func)$/;"	f
KillSlopedWater	.\XESCore\MapAlgs.cpp	/^int KillSlopedWater(Pmwx& pmwx, $/;"	f
KillTunnels	.\XESCore\NetAlgs.cpp	/^int	KillTunnels(Pmwx& ioMap)$/;"	f
KillWetAntennaRoads	.\XESCore\MapAlgs.cpp	/^int KillWetAntennaRoads(Pmwx& io_map)$/;"	f
Kind	.\lib_json\include\json\value.h	/^      enum Kind$/;"	g	class:Json::PathArgument
LAND	.\Tiger\TIGERTypes.h	/^typedef	unsigned long	LAND;$/;"	t
LATEST_APT_VERSION	.\XESCore\AptIO.h	32;"	d
LEFT_TURN	.\Utils\CompGeomDefs2.h	/^	LEFT_TURN = 1,$/;"	e	enum:__anon89
LIB_JSONCPP_JSON_TOOL_H_INCLUDED	.\lib_json\src\lib_json\json_tool.h	7;"	d
LIL	.\AC3DPlugins\ac3d_prefix.h	26;"	d
LIL	.\AC3DPlugins\ac3d_prefix.h	29;"	d
LIL	.\AC3DPlugins\ac3d_prefix.h	33;"	d
LIL	.\Obj\XDefs.h	39;"	d
LIL	.\Obj\XDefs.h	42;"	d
LIL	.\Obj\XDefs.h	46;"	d
LIMIT_CAMERA_FOR_DEBUGGING	.\Utils\HLCamera.cpp	29;"	d	file:
LINE_DIST	.\WEDMap\WED_HandleToolBase.cpp	48;"	d	file:
LLToPixel	.\WEDMap\WED_MapZoomerNew.cpp	/^Point2	WED_MapZoomerNew::LLToPixel(const Point2& p)$/;"	f	class:WED_MapZoomerNew
LLToPixelv	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::LLToPixelv(Point2 * dst, const Point2 * src, int n)$/;"	f	class:WED_MapZoomerNew
LNKTYPE	.\Utils\MemFileUtils.cpp	133;"	d	file:
LOCALHEADERMAGIC	.\Utils\zip.c	76;"	d	file:
LODRange	.\ObjEdit\OE_Globals.h	/^typedef pair<double, double>		LODRange;			\/\/ One object's LOD range$/;"	t
LODTable	.\ObjEdit\OE_Globals.h	/^typedef	vector<LODRange>			LODTable;			\/\/ LOD for a set of object reps$/;"	t
LOD_CUTOVER	.\DSF\DSFLib_TestGen.cpp	173;"	d	file:
LOD_CUTOVER	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	175;"	d	file:
LOD_FAR	.\OneOffs\gen_roads.cpp	14;"	d	file:
LOD_NEAR	.\OneOffs\gen_roads.cpp	13;"	d	file:
LOG_CASE_DESENS	.\Utils\FileUtils.cpp	40;"	d	file:
LOG_MSG	.\Utils\FileUtils.cpp	43;"	d	file:
LOG_MSG	.\Utils\FileUtils.cpp	45;"	d	file:
LOG_SKELETONS	.\Utils\Skeleton.cpp	122;"	d	file:
LOOKUP_ERR	.\WEDCore\WED_Sign_Parser.cpp	/^		LOOKUP_ERR\/\/Return code for any errors in the lookup table$/;"	e	enum:WED_Sign_Parser::FSM	file:
LOW_RES_WATER_INTERVAL	.\XESCore\MeshAlgs.cpp	55;"	d	file:
LOW_RES_WATER_INTERVAL	.\XESCore\MeshAlgs.cpp	58;"	d	file:
LandClassInfoTable	.\XESCore\Zoning.h	/^typedef hash_map<int, LandClassInfo_t>	LandClassInfoTable;$/;"	t
LandClassInfo_t	.\XESCore\Zoning.h	/^struct LandClassInfo_t {$/;"	s
LandFillRuleTable	.\XESCore\Zoning.h	/^typedef vector<LandFillRule_t>	LandFillRuleTable;$/;"	t
LandFillRule_t	.\XESCore\Zoning.h	/^struct LandFillRule_t {$/;"	s
LandFillStrandedRoads	.\XESCore\MapAlgs.cpp	/^int LandFillStrandedRoads(Pmwx& io_map, double dist_lo, double dist_hi)$/;"	f
LandUseTransTable	.\XESCore\DEMTables.h	/^typedef hash_map<int, int> 	LandUseTransTable;$/;"	t
LandmarkInfoMap	.\Tiger\TIGERTypes.h	/^typedef	hash_map<LAND, LandmarkInfo_t>	LandmarkInfoMap;$/;"	t
LandmarkInfo_t	.\Tiger\TIGERTypes.h	/^struct	LandmarkInfo_t {$/;"	s
LargestInt	.\lib_json\include\json\config.h	/^   typedef Int64 LargestInt;$/;"	t	namespace:Json
LargestInt	.\lib_json\include\json\config.h	/^   typedef int LargestInt;$/;"	t	namespace:Json
LargestInt	.\lib_json\include\json\value.h	/^      typedef Json::LargestInt LargestInt;$/;"	t	class:Json::Value
LargestUInt	.\lib_json\include\json\config.h	/^   typedef UInt64 LargestUInt;$/;"	t	namespace:Json
LargestUInt	.\lib_json\include\json\config.h	/^   typedef unsigned int LargestUInt;$/;"	t	namespace:Json
LargestUInt	.\lib_json\include\json\value.h	/^      typedef Json::LargestUInt LargestUInt;$/;"	t	class:Json::Value
LastPart	.\WEDWindows\WED_StartWindow.cpp	/^const char * LastPart(const char * s)$/;"	f
LatLonPair	.\Tiger\TIGERProcess.h	/^typedef	pair<double, double>	LatLonPair;$/;"	t
LatLonVector	.\Tiger\TIGERProcess.h	/^typedef vector<LatLonPair>		LatLonVector;$/;"	t
LatToYPixel	.\RenderFarmUI\RF_MapZoomer.cpp	/^double	RF_MapZoomer::LatToYPixel(double lat)$/;"	f	class:RF_MapZoomer
LatToYPixel	.\WEDMap\WED_MapZoomerNew.cpp	/^double	WED_MapZoomerNew::LatToYPixel(double lat)$/;"	f	class:WED_MapZoomerNew
LayerList	.\WEDCore\WED_UndoMgr.h	/^	typedef list<WED_UndoLayer *>	LayerList;$/;"	t	class:WED_UndoMgr
LayerOp	.\WEDCore\WED_UndoLayer.h	/^	enum LayerOp {$/;"	g	class:WED_UndoLayer
LazyLog_t	.\WEDImportExport\WED_AptIE.cpp	/^struct	LazyLog_t {$/;"	s	file:
LazyPrintf	.\WEDImportExport\WED_AptIE.cpp	/^void LazyPrintf(void * ref, const char * fmt, ...)$/;"	f
Less	.\DSF\tri_stripper_101\heap_array.h	/^inline bool heap_array<T, CmpT>::Less(const linker & a, const linker & b) const {$/;"	f	class:common_structures::heap_array
LessEdgesThan	.\XESCore\TensorRoads.cpp	/^inline bool LessEdgesThan(Face_handle f, int c)$/;"	f
LessInFutureThan	.\Utils\PolyRasterUtils.h	/^	bool LessInFutureThan(const PolyRasterSeg_t& rhs) const { return (x2-x1)*(rhs.y2-rhs.y1) < (rhs.x2-rhs.x1)*(y2-y1); }$/;"	f	struct:PolyRasterSeg_t
LevelCrossingTable	.\XESCore\NetTables.h	/^typedef map<int,int>							LevelCrossingTable;$/;"	t
Line2	.\Utils\CompGeomDefs2.h	/^	Line2() : a(0.0), b(1.0), c(0.) { }$/;"	f	struct:Line2
Line2	.\Utils\CompGeomDefs2.h	/^	Line2(const Line2& l) : a(l.a), b(l.b), c(l.c) { }$/;"	f	struct:Line2
Line2	.\Utils\CompGeomDefs2.h	/^	Line2(const Point2& p, const Vector2& v) : a(-v.dy), b(v.dx), c(v.dy * p.x_ - v.dx * p.y_) { }$/;"	f	struct:Line2
Line2	.\Utils\CompGeomDefs2.h	/^	Line2(const Point2& p1, const Point2& p2) : a(p1.y_ - p2.y_), b(p2.x_ - p1.x_), c((p2.y_ - p1.y_) * p1.x_ - (p2.x_ - p1.x_) * p1.y_) { }$/;"	f	struct:Line2
Line2	.\Utils\CompGeomDefs2.h	/^	Line2(double ia, double ib, double ic) : a(ia), b(ib), c(ic) { }$/;"	f	struct:Line2
Line2	.\Utils\CompGeomDefs2.h	/^	explicit Line2(const Segment2& s) : a(s.p1.y_ - s.p2.y_), b(s.p2.x_ - s.p1.x_), c((s.p2.y_ - s.p1.y_) * s.p1.x_ - (s.p2.x_ - s.p1.x_) * s.p1.y_) { }$/;"	f	struct:Line2
Line2	.\Utils\CompGeomDefs2.h	/^struct	Line2 {$/;"	s
Line3	.\Utils\CompGeomDefs3.h	/^	Line3() : p(), v() { }$/;"	f	struct:Line3
Line3	.\Utils\CompGeomDefs3.h	/^	Line3(const Line3& rhs) : p(rhs.p), v(rhs.v) { }$/;"	f	struct:Line3
Line3	.\Utils\CompGeomDefs3.h	/^	Line3(const Point3& ip, const Vector3& iv) : p(ip), v(iv) { }$/;"	f	struct:Line3
Line3	.\Utils\CompGeomDefs3.h	/^	Line3(const Point3& p1, const Point3& p2) : p(p1), v(p1, p2) { }$/;"	f	struct:Line3
Line3	.\Utils\CompGeomDefs3.h	/^	explicit Line3(const Segment3& s) : p(s.p1), v(s.p1, s.p2) { }$/;"	f	struct:Line3
Line3	.\Utils\CompGeomDefs3.h	/^struct Line3 {$/;"	s
LineMap	.\SDTS\SDTSReadTVP.cpp	/^typedef hash_map<int, LineRecord>		LineMap;$/;"	t	file:
LineRecord	.\SDTS\SDTSReadTVP.cpp	/^struct	LineRecord : public WTPM_Line {$/;"	s	file:
LineTable	.\SDTS\SDTSReadTVP.cpp	/^typedef	hash_map<string, LineMap>		LineTable;$/;"	t	file:
Line_2	.\XESCore\CGALDefs.h	/^typedef CGAL::Line_2<FastKernel>                        Line_2;$/;"	t
Line_2	.\XESCore\CGALTypes.h	/^typedef	Kernel::Line_2										Line_2;$/;"	t
Linear_Tensor	.\Utils\TensorUtils.h	/^inline Vector2 Linear_Tensor($/;"	f
LinkNeighboursTri	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::LinkNeighboursTri(const triangle_edges & TriInterface, const triangle_edge Edge)$/;"	f	class:triangle_stripper::tri_stripper
LinkType_t	.\Interfaces\IControlHandles.h	/^enum LinkType_t {$/;"	g
LoadCLUT	.\RenderFarmUI\RF_Export.cpp	/^static	void	LoadCLUT(XPWidgetID inID)$/;"	f	file:
LoadCLUT	.\RenderFarmUI\RF_Import.cpp	/^static	void	LoadCLUT(XPWidgetID inID)$/;"	f	file:
LoadConfigFile	.\XESCore\ConfigSystem.cpp	/^bool	LoadConfigFile(const char * inFilename)$/;"	f
LoadConfigFileFullPath	.\XESCore\ConfigSystem.cpp	/^bool	LoadConfigFileFullPath(const char * inFilename)$/;"	f
LoadConfigFileOnce	.\XESCore\ConfigSystem.cpp	/^bool	LoadConfigFileOnce(const char * inFilename)$/;"	f
LoadDEMTables	.\XESCore\DEMTables.cpp	/^void	LoadDEMTables(void)$/;"	f
LoadFAAObsFile	.\RawImport\FAA_Obs.cpp	/^bool	LoadFAAObsFile(const char * inFile)$/;"	f
LoadFAARadarFile	.\RawImport\FAA_Obs.cpp	/^bool	LoadFAARadarFile(const char * inFile, bool isApproach)$/;"	f
LoadFont	.\UI\FontMgr.cpp	/^FontHandle FontMgr::LoadFont(const char* inFontPath, const char * inStartMem, const char * inEndMem, unsigned int inSizePx, bool require_exact)$/;"	f	class:FontMgr
LoadForestTables	.\XESCore\ForestTables.cpp	/^void	LoadForestTables(void)$/;"	f
LoadFromDB	.\WEDCore\WED_Archive.cpp	/^void	WED_Archive::LoadFromDB(sqlite3 * db, const map<int,int>& mapping)$/;"	f	class:WED_Archive
LoadIniSectionMap	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static bool LoadIniSectionMap(const char * inFileName, IniSectionMap& outMap)$/;"	f	file:
LoadLegacyObjectArchive	.\RawImport\FAA_Obs.cpp	/^bool	LoadLegacyObjectArchive(const char * inFile)$/;"	f
LoadModelView	.\Utils\HLCamera.h	/^	void		LoadModelView(void)		{ glMatrixMode(GL_MODELVIEW ); glLoadMatrixd(mModelView  ); }$/;"	f	class:xcam_class
LoadNetFeatureTables	.\XESCore\NetTables.cpp	/^void	LoadNetFeatureTables(void)$/;"	f
LoadNetworkDefs	.\Utils\RoadNetUtils.cpp	/^bool	LoadNetworkDefs($/;"	f
LoadObjTables	.\XESCore\ObjTables.cpp	/^void	LoadObjTables(void)$/;"	f
LoadPerspective	.\Utils\HLCamera.h	/^	void		LoadPerspective(void) 	{ glMatrixMode(GL_PROJECTION); glLoadMatrixd(mPerspective); }$/;"	f	class:xcam_class
LoadTexture	.\WEDCore\WED_TexMgr.cpp	/^WED_TexMgr::TexInfo *	WED_TexMgr::LoadTexture(const char * path, bool is_absolute, int flags)$/;"	f	class:WED_TexMgr
LoadTextureFromFile	.\Utils\TexUtils.cpp	/^bool LoadTextureFromFile($/;"	f
LoadTextureFromImage	.\Utils\TexUtils.cpp	/^bool LoadTextureFromImage(ImageInfo& im, int inTexNum, int inFlags, int * outWidth, int * outHeight, float * outS, float * outT)$/;"	f
LoadTigerConfig	.\Tiger\TigerImport.cpp	/^void LoadTigerConfig()$/;"	f
LoadTranslationFile	.\XESCore\DEMIO.cpp	/^bool	LoadTranslationFile(const char * 		inFileName,$/;"	f
LoadZoningRules	.\XESCore\Zoning.cpp	/^void LoadZoningRules(void)$/;"	f
Location	.\lib_json\include\json\reader.h	/^      typedef const Char *Location;$/;"	t	class:Json::Reader
Locator	.\XESCore\MapDefs.h	/^typedef CGAL::Arr_landmarks_point_location<Arrangement_2>  Locator;$/;"	t
LockPackage	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::LockPackage(const string& name)$/;"	f	class:WED_PackageListAdapter
LogToUIX	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double		RF_BezierTestTool::LogToUIX(double v) const$/;"	f	class:RF_BezierTestTool
LogToUIX	.\RenderFarmUI\RF_CropTool.cpp	/^double		RF_CropTool::LogToUIX(double v) const$/;"	f	class:RF_CropTool
LogToUIX	.\RenderFarmUI\RF_ImageTool.cpp	/^double		RF_ImageTool::LogToUIX(double v) const$/;"	f	class:RF_ImageTool
LogToUIY	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double		RF_BezierTestTool::LogToUIY(double v) const$/;"	f	class:RF_BezierTestTool
LogToUIY	.\RenderFarmUI\RF_CropTool.cpp	/^double		RF_CropTool::LogToUIY(double v) const$/;"	f	class:RF_CropTool
LogToUIY	.\RenderFarmUI\RF_ImageTool.cpp	/^double		RF_ImageTool::LogToUIY(double v) const$/;"	f	class:RF_ImageTool
LonLatDistMeters	.\Utils\GISUtils.cpp	/^double	LonLatDistMeters(double lon1, double lat1, double lon2, double lat2)$/;"	f
LonLatDistMetersWithScale	.\Utils\GISUtils.cpp	/^double	LonLatDistMetersWithScale(double lon1, double lat1, double lon2, double lat2,$/;"	f
LonToXPixel	.\RenderFarmUI\RF_MapZoomer.cpp	/^double	RF_MapZoomer::LonToXPixel(double lon)$/;"	f	class:RF_MapZoomer
LonToXPixel	.\WEDMap\WED_MapZoomerNew.cpp	/^double	WED_MapZoomerNew::LonToXPixel(double lon)$/;"	f	class:WED_MapZoomerNew
LongStrand	.\XESCore\Hydro.cpp	/^typedef list<Halfedge_handle>	LongStrand;$/;"	t	file:
LongerSideOfQuad	.\Utils\CompGeomUtils.cpp	/^double	LongerSideOfQuad($/;"	f
LookAtCamera	.\Utils\HLCamera.cpp	/^void	xcam_class::LookAtCamera(xcam_class * inCamera, GLdouble look_dir[3], GLdouble look_dist)$/;"	f	class:xcam_class
LookAtPtFromDir	.\Utils\HLCamera.cpp	/^void		xcam_class::LookAtPtFromDir(GLdouble centerx, GLdouble centery, GLdouble centerz,$/;"	f	class:xcam_class
LookAtPtFromPt	.\Utils\HLCamera.cpp	/^void		xcam_class::LookAtPtFromPt(GLdouble eyex, GLdouble eyey, GLdouble eyez,$/;"	f	class:xcam_class
LookUpTable	.\WEDCore\WED_Sign_Parser.cpp	/^WED_Sign_Parser::FSM WED_Sign_Parser::LookUpTable(FSM curState, char curChar, int position, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
LookupAddress	.\Network\PCSBSocket.lin.cpp	/^unsigned long PCSBSocket::LookupAddress(const char* inAddress)$/;"	f	class:PCSBSocket
LookupAddress	.\Network\PCSBSocket.win.cpp	/^unsigned long PCSBSocket::LookupAddress(const char* inAddress)$/;"	f	class:PCSBSocket
LookupAreaCFCC	.\Tiger\(TigerImport Backup.cpp).cpp	/^int	LookupAreaCFCC(const char * inCode)$/;"	f
LookupFeatureCFCC	.\Tiger\TigerImport.cpp	/^FeatureInfo_t * LookupFeatureCFCC(const char * inCode)$/;"	f
LookupNetCFCC	.\Tiger\(TigerImport Backup.cpp).cpp	/^int LookupNetCFCC(const char * inCode)$/;"	f
LookupNetCFCC	.\Tiger\TigerImport.cpp	/^RoadInfo_t * LookupNetCFCC(const char * inCode)$/;"	f
LookupObjectAlias	.\XPTools\AddObjects.cpp	/^string	LookupObjectAlias(const string& inName)$/;"	f
LookupPath	.\WEDCore\WED_Document.cpp	/^void	WED_Document::LookupPath(string& io_path)$/;"	f	class:WED_Document
LookupTexture	.\WEDCore\WED_TexMgr.cpp	/^TexRef		WED_TexMgr::LookupTexture(const char * path, bool is_absolute, int flags)$/;"	f	class:WED_TexMgr
LookupToken	.\XESCore\EnumSystem.cpp	/^int				LookupToken(const char * inString)$/;"	f
LookupTokenCreate	.\XESCore\EnumSystem.cpp	/^int				LookupTokenCreate(const char * inString)$/;"	f
LookupWaterCFCC	.\Tiger\TigerImport.cpp	/^int	LookupWaterCFCC(const char * inCode)$/;"	f
LoseFocus	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::LoseFocus(int inForce)$/;"	f	class:GUI_Commander
LowerCheckName	.\XESCore\DEMTables.cpp	/^static	bool	LowerCheckName(string& ioName)$/;"	f	file:
LowerPriorityFeature	.\XESTools\GISTool_ProcessingCmds.cpp	/^static bool	LowerPriorityFeature(GISPointFeature_t& lhs, GISPointFeature_t& rhs)$/;"	f	file:
LowerPriorityNaturalTerrain	.\XESCore\DEMTables.h	/^inline bool	LowerPriorityNaturalTerrain(int lhs, int rhs)$/;"	f
LowestInRange	.\XESCore\Hydro.cpp	/^inline float LowestInRange(const DEMGeo& inDEM, int x1, int y1, int x2, int y2, int& outX, int& outY)$/;"	f
M	.\Utils\MatrixUtils.cpp	1230;"	d	file:
M	.\Utils\MatrixUtils.cpp	718;"	d	file:
M	.\Utils\MatrixUtils.cpp	728;"	d	file:
M	.\Utils\MatrixUtils.cpp	858;"	d	file:
M	.\Utils\MatrixUtils.cpp	868;"	d	file:
M	.\Utils\MatrixUtils.cpp	928;"	d	file:
MACIMAGETOCLIPBOARD_H	.\Utils\MacImageToClipboard.h	24;"	d
MACSPEC_H	.\Utils\MacSpec.h	24;"	d
MAJORITY_RULES	.\XESCore\MeshAlgs.cpp	/^inline int MAJORITY_RULES(int a, int b, int c, int d)$/;"	f
MAJOR_VERSION_REQUIRED	.\Network\PCSBSocket.lin.cpp	42;"	d	file:
MAJOR_VERSION_REQUIRED	.\Network\PCSBSocket.win.cpp	27;"	d	file:
MAPALGS_H	.\XESCore\MapAlgs.h	24;"	d
MAPBUCKETS_H	.\XESTools\MapBuckets.h	49;"	d
MAPDEFS_H	.\XESCore\MapDefs.h	29;"	d
MAPIO_H	.\XESCore\MapIO.h	24;"	d
MAP_BUCKET_DEPTH	.\RenderFarmUI\RF_FileCommands.cpp	298;"	d	file:
MAP_FILE	.\Utils\CarbonMemMap.h	26;"	d
MASK	.\XESCore\DEMAlgs.cpp	2095;"	d	file:
MAT	.\Utils\MatrixUtils.cpp	114;"	d	file:
MAT	.\Utils\MatrixUtils.cpp	348;"	d	file:
MATCH	.\XESCore\MeshAlgs.cpp	/^inline bool MATCH(const char * big, const char * msmall)$/;"	f
MATCH_ENUM	.\XESCore\DEMTables.cpp	1007;"	d	file:
MATCH_RANGE	.\XESCore\DEMTables.cpp	1006;"	d	file:
MATHUTILS_H	.\Utils\MathUtils.h	25;"	d
MAX_AREA	.\XESCore\Hydro.cpp	52;"	d	file:
MAX_AREA	.\XESCore\Zoning.cpp	1714;"	d	file:
MAX_BORDER_MATCH	.\XESCore\MeshAlgs.cpp	100;"	d	file:
MAX_BUF_SIZE	.\WEDNetwork\WED_NWDefs.h	29;"	d
MAX_CUT_DIST	.\XESCore\NetPlacement.cpp	219;"	d	file:
MAX_DIM	.\XESCore\Zoning.cpp	1715;"	d	file:
MAX_EDGE_DIST	.\XESCore\MeshAlgs.cpp	90;"	d	file:
MAX_ERR_APT_BEZ_CHECK	.\XESCore\Airports.cpp	48;"	d	file:
MAX_FIELD_LEN	.\OneOffs\osm2shape.c	/^static int	MAX_FIELD_LEN = 64;$/;"	v	file:
MAX_FILES_EVER	.\OneOffs\osm_tile.c	215;"	d	file:
MAX_FLOOD	.\XESCore\Hydro.cpp	48;"	d	file:
MAX_FOREST_RINGS	.\XESCore\BlockFill.cpp	95;"	d	file:
MAX_JUNC_PTS	.\Utils\RoadNetUtils.cpp	30;"	d	file:
MAX_LAT_SPAN_GATEWAY	.\WEDCore\WED_Validate.cpp	65;"	d	file:
MAX_LINE_LEN	.\WEDNetwork\WED_NWDefs.h	30;"	d
MAX_LON_SPAN_GATEWAY	.\WEDCore\WED_Validate.cpp	64;"	d	file:
MAX_MULTI_COUNT	.\AC3DPlugins\obj_editor.cpp	/^const int MAX_MULTI_COUNT = 5;$/;"	v
MAX_NODATA	.\XESCore\DEMDefs.h	/^inline	float	MAX_NODATA(float a, float b)$/;"	f
MAX_OBJ_SPREAD	.\XESCore\Zoning.cpp	53;"	d	file:
MAX_QUEUE_SIZE	.\WEDNetwork\WED_NWDefs.h	31;"	d
MAX_TRIS_PER_PATCH	.\XESCore\DSFBuilder.cpp	77;"	d	file:
MAX_TUPLE_LEN	.\DSF\DSFPointPool.h	51;"	d
MAX_TUPLE_LEN	.\DSF\dsflib_013005\DSFPointPool.h	38;"	d
MAX_UNDO_LEVELS	.\WEDCore\WED_UndoMgr.cpp	37;"	d	file:
MAX_WAIT_FORLOGIN	.\WEDNetwork\WED_NWDefs.h	33;"	d
MAX_WATER_SLOPE	.\XESCore\MeshAlgs.cpp	103;"	d	file:
MBCS_Next	.\GUI\GUI_TextField.cpp	/^const char *	GUI_TextField::MBCS_Next($/;"	f	class:GUI_TextField
MBCS_NextCB	.\OGLE\ogle.cpp	/^const char *	OGLE::MBCS_NextCB($/;"	f	class:OGLE
MBCS_NextPos	.\GUI\GUI_TextField.cpp	/^int				GUI_TextField::MBCS_NextPos($/;"	f	class:GUI_TextField
MBCS_NextPosCB	.\OGLE\ogle.cpp	/^int				OGLE::MBCS_NextPosCB($/;"	f	class:OGLE
MBCS_NextPos_f	.\OGLE\ogle.h	/^	int				(* MBCS_NextPos_f)($/;"	m	struct:OGLE_Callbacks
MBCS_Next_f	.\OGLE\ogle.h	/^	const char *	(* MBCS_Next_f)($/;"	m	struct:OGLE_Callbacks
MBCS_PrevPos	.\GUI\GUI_TextField.cpp	/^int				GUI_TextField::MBCS_PrevPos($/;"	f	class:GUI_TextField
MBCS_PrevPosCB	.\OGLE\ogle.cpp	/^int				OGLE::MBCS_PrevPosCB($/;"	f	class:OGLE
MBCS_PrevPos_f	.\OGLE\ogle.h	/^	int				(* MBCS_PrevPos_f)($/;"	m	struct:OGLE_Callbacks
MD5Final	.\Utils\md5.c	/^void MD5Final (MD5_CTX *mdContext)$/;"	f
MD5Init	.\Utils\md5.c	/^void MD5Init (MD5_CTX *mdContext)$/;"	f
MD5Update	.\Utils\md5.c	/^void MD5Update (MD5_CTX *mdContext, unsigned char *inBuf, unsigned short inLen)$/;"	f
MD5_Block	.\Utils\XFileTwiddle.cpp	/^void	MD5_Block(const char * inMem, int inSize, MD5_Sig& outSig)$/;"	f
MD5_CTX	.\Utils\md5.h	/^} MD5_CTX;$/;"	t	typeref:struct:__anon91
MD5_Sig	.\Utils\XFileTwiddle.h	/^struct	MD5_Sig {$/;"	s
MEMFILEUTILS_H	.\Utils\MemFileUtils.h	24;"	d
MEMISTREAMBUF_H	.\Utils\MemIStreamBuf.h	24;"	d
MESHALGS_H	.\XESCore\MeshAlgs.h	24;"	d
MESHDEFS_H	.\XESCore\MeshDefs.h	24;"	d
MESHIO_H	.\XESCore\MeshIO.h	25;"	d
MESHTOOL_EXTRAVER	.\XPTools\version.h	20;"	d
MESHTOOL_VER	.\XPTools\version.h	19;"	d
MESH_BUCKET_SIZE	.\RenderFarmUI\RF_MapView.h	54;"	d
MFFileSet	.\Utils\MemFileUtils.cpp	/^struct	MFFileSet {$/;"	s	file:
MFMemFile	.\Utils\MemFileUtils.cpp	/^struct	MFMemFile {$/;"	s	file:
MFS_done	.\Utils\MemFileUtils.cpp	/^int		MFS_done(MFScanner * s)$/;"	f
MFS_double	.\Utils\MemFileUtils.cpp	/^double	MFS_double(MFScanner * s)$/;"	f
MFS_has_word	.\Utils\MemFileUtils.cpp	/^int		MFS_has_word(MFScanner * s)$/;"	f
MFS_init	.\Utils\MemFileUtils.cpp	/^void	MFS_init(MFScanner * scanner, MFMemFile * inFile)$/;"	f
MFS_init	.\Utils\MemFileUtils.cpp	/^void	MFS_init(MFScanner * scanner, const char * begin, const char * end)$/;"	f
MFS_int	.\Utils\MemFileUtils.cpp	/^int		MFS_int(MFScanner * s)$/;"	f
MFS_string	.\Utils\MemFileUtils.cpp	/^void	MFS_string(MFScanner * s, string * out_string)$/;"	f
MFS_string_eol	.\Utils\MemFileUtils.cpp	/^void	MFS_string_eol(MFScanner * s, string * out_string)$/;"	f
MFS_string_match	.\Utils\MemFileUtils.cpp	/^int		MFS_string_match(MFScanner * s, const char * input, int eol_ok)$/;"	f
MFS_string_match_no_case	.\Utils\MemFileUtils.cpp	/^int		MFS_string_match_no_case(MFScanner * s, const char * input, int eol_ok)$/;"	f
MFS_xplane_header	.\Utils\MemFileUtils.cpp	/^int		MFS_xplane_header(MFScanner * s, int * versions, const char * identifier, string * copyright)$/;"	f
MFScanner	.\Utils\MemFileUtils.h	/^struct	MFScanner {$/;"	s
MFTextScanner	.\Utils\MemFileUtils.cpp	/^struct	MFTextScanner {$/;"	s	file:
MF_AnalysisLevel	.\Utils\MemFileUtils.h	/^typedef int MF_AnalysisLevel;$/;"	t
MF_FileType	.\Utils\MemFileUtils.h	/^typedef int	MF_FileType;$/;"	t
MF_GetDirectoryBulk	.\Utils\MemFileUtils.cpp	/^MF_GetDirectoryBulk($/;"	f
MF_GetFileType	.\Utils\MemFileUtils.cpp	/^MF_FileType	MF_GetFileType(const char * path, int analysis_level)$/;"	f
MF_IsCollection	.\Utils\MemFileUtils.h	/^inline bool	MF_IsCollection(MF_FileType f) { return f == mf_Directory || f == mf_ZipFile || f == mf_ZipFiles || f == mf_GZTarBall; }$/;"	f
MF_IsSingle	.\Utils\MemFileUtils.h	/^inline bool	MF_IsSingle(MF_FileType f) 	   { return f == mf_DataFile || f == mf_ZipFile || f == mf_GZFile; }$/;"	f
MF_IterateDirectory	.\Installer\InstallerProcs.cpp	/^bool	MF_IterateDirectory(const char * dirPath, bool (* cbFunc)(const char * fileName, bool isDir, void * ref), void * ref)$/;"	f
MF_IterateDirectory	.\Utils\MemFileUtils.cpp	/^bool	MF_IterateDirectory(const char * dirPath, bool (* cbFunc)(const char * fileName, bool isDir, void * ref), void * ref)$/;"	f
MF_Untar	.\Utils\MemFileUtils.cpp	/^bool	MF_Untar(		const char * 	path,$/;"	f
MINOR_VERSION_REQUIRED	.\Network\PCSBSocket.lin.cpp	43;"	d	file:
MINOR_VERSION_REQUIRED	.\Network\PCSBSocket.win.cpp	28;"	d	file:
MIN_ANGLE_FOR_CURVE	.\XESCore\NetPlacement.cpp	44;"	d	file:
MIN_CELL_WIDTH	.\GUI\GUI_TextTable.cpp	53;"	d	file:
MIN_CLIENT_VERS	.\WEDNetwork\WED_NWDefs.h	35;"	d
MIN_DEPTH	.\XESCore\DEMAlgs.cpp	46;"	d	file:
MIN_DIST_FOR_TYPE	.\XESCore\NetAlgs.cpp	38;"	d	file:
MIN_EDGE_DIST	.\XESCore\MeshAlgs.cpp	91;"	d	file:
MIN_HANDLE_RECURSE_SIZE	.\WEDMap\WED_VertexTool.cpp	51;"	d	file:
MIN_HEIGHT_TO_SPREAD	.\XESCore\Zoning.cpp	1139;"	d	file:
MIN_MARQUEE_PIXELS	.\WEDMap\WED_MarqueeTool.cpp	80;"	d	file:
MIN_NODATA	.\XESCore\DEMDefs.h	/^inline	float	MIN_NODATA(float a, float b)$/;"	f
MIN_NODATA_XY	.\XESCore\DEMDefs.h	/^inline	float	MIN_NODATA_XY(float a, float b, int& xo, int& yo, int xn, int yn )$/;"	f
MIN_NOVALUE	.\XESCore\Zoning.cpp	/^inline int MIN_NOVALUE(int a, int b)$/;"	f
MISCFUNCS_H	.\XESTools\MiscFuncs.h	25;"	d
MISSING_ORTHO_WARNING	.\XESCore\MeshAlgs.cpp	373;"	d	file:
MODE_POLYGONS	.\OneOffs\osm2shape.c	/^	MODE_POLYGONS = 1$/;"	e	enum:__anon63	file:
MODE_WAYS	.\OneOffs\osm2shape.c	/^	MODE_WAYS = 0,$/;"	e	enum:__anon63	file:
MTR_TO_DEG_LAT	.\XESCore\XESConstants.h	42;"	d
MTR_TO_FT	.\XESCore\XESConstants.h	32;"	d
MTR_TO_NM	.\XESCore\XESConstants.h	30;"	d
MT_Cleanup	.\MeshTool\MeshTool_Create.cpp	/^void MT_Cleanup(void)$/;"	f
MT_Contour	.\MeshTool\MeshTool_Create.cpp	/^void MT_Contour(const char * shapefile)$/;"	f
MT_CreateCustomTerrain	.\MeshTool\MeshTool_Create.cpp	/^int MT_CreateCustomTerrain($/;"	f
MT_EnableDDSGeneration	.\MeshTool\MeshTool_Create.cpp	/^void MT_EnableDDSGeneration(int create)$/;"	f
MT_Error_f	.\MeshTool\MeshTool_Create.h	/^typedef	void (* MT_Error_f)(const char * fmt,va_list args);$/;"	t
MT_FinishCreate	.\MeshTool\MeshTool_Create.cpp	/^void MT_FinishCreate(void)$/;"	f
MT_GAMMA	.\MeshTool\MeshTool_Create.cpp	55;"	d	file:
MT_GeoTiff	.\MeshTool\MeshTool_Create.cpp	/^void MT_GeoTiff(const char * fname, int back_with_water)$/;"	f
MT_HoleEnd	.\MeshTool\MeshTool_Create.cpp	/^void MT_HoleEnd(void)$/;"	f
MT_HolePoint	.\MeshTool\MeshTool_Create.cpp	/^void MT_HolePoint(double lon, double lat)$/;"	f
MT_HoleStart	.\MeshTool\MeshTool_Create.cpp	/^void MT_HoleStart(void)$/;"	f
MT_LayerBackground	.\MeshTool\MeshTool_Create.cpp	/^void MT_LayerBackground(const char * in_terrain_type)$/;"	f
MT_LayerEnd	.\MeshTool\MeshTool_Create.cpp	/^void MT_LayerEnd(void)$/;"	f
MT_LayerShapefile	.\MeshTool\MeshTool_Create.cpp	/^void MT_LayerShapefile(const char * fi, const char * in_terrain_type)$/;"	f
MT_LayerStart	.\MeshTool\MeshTool_Create.cpp	/^void MT_LayerStart(int in_terrain_type)$/;"	f
MT_LimitZ	.\MeshTool\MeshTool_Create.cpp	/^void MT_LimitZ(int limit)$/;"	f
MT_MakeDSF	.\MeshTool\MeshTool_Create.cpp	/^void MT_MakeDSF(const char * dump, const char * out_dsf)$/;"	f
MT_Mask	.\MeshTool\MeshTool_Create.cpp	/^void MT_Mask(const char * shapefile)$/;"	f
MT_NetEnd	.\MeshTool\MeshTool_Create.cpp	/^void MT_NetEnd(void)$/;"	f
MT_NetSegment	.\MeshTool\MeshTool_Create.cpp	/^void MT_NetSegment(double lon1, double lat1, double lon2, double lat2)$/;"	f
MT_NetStart	.\MeshTool\MeshTool_Create.cpp	/^void MT_NetStart(const char * typ)$/;"	f
MT_OrthoPhoto	.\MeshTool\MeshTool_Create.cpp	/^void MT_OrthoPhoto($/;"	f
MT_PolygonEnd	.\MeshTool\MeshTool_Create.cpp	/^bool MT_PolygonEnd(void)$/;"	f
MT_PolygonPoint	.\MeshTool\MeshTool_Create.cpp	/^void MT_PolygonPoint(double lon, double lat)$/;"	f
MT_PolygonStart	.\MeshTool\MeshTool_Create.cpp	/^void MT_PolygonStart(void)$/;"	f
MT_QMID	.\MeshTool\MeshTool_Create.cpp	/^void MT_QMID(const char * id, int back_with_water)$/;"	f
MT_QMID_Prefix	.\MeshTool\MeshTool_Create.cpp	/^void MT_QMID_Prefix(const char * prefix)$/;"	f
MT_SetMeshSpecs	.\MeshTool\MeshTool_Create.cpp	/^void MT_SetMeshSpecs(int max_pts, float max_err)$/;"	f
MT_StartCreate	.\MeshTool\MeshTool_Create.cpp	/^void MT_StartCreate(const char * xes_path, const DEMGeo& in_dem, MT_Error_f err_handler)$/;"	f
MT_USE_WIN_GAMMA	.\MeshTool\MeshTool_Create.cpp	56;"	d	file:
MWM_HINTS_DECORATIONS	.\UI\XPopup.h	24;"	d
M_PI	.\RawImport\gshhs.h	72;"	d
M_PI	.\Utils\MatrixUtils.h	42;"	d
M_a	.\Utils\CompGeomDefs3.h	445;"	d
M_b	.\Utils\CompGeomDefs3.h	446;"	d
M_c	.\Utils\CompGeomDefs3.h	447;"	d
M_d	.\Utils\CompGeomDefs3.h	448;"	d
M_e	.\Utils\CompGeomDefs3.h	449;"	d
M_f	.\Utils\CompGeomDefs3.h	450;"	d
M_g	.\Utils\CompGeomDefs3.h	451;"	d
M_h	.\Utils\CompGeomDefs3.h	452;"	d
M_i	.\Utils\CompGeomDefs3.h	453;"	d
M_j	.\Utils\CompGeomDefs3.h	454;"	d
M_k	.\Utils\CompGeomDefs3.h	455;"	d
M_l	.\Utils\CompGeomDefs3.h	456;"	d
MacImageToClipboard	.\Utils\MacImageToClipboard.c	/^bool MacImageToClipboard(const unsigned char * rgb, int width, int height)$/;"	f
MainLoop	.\WEDCore\WED_Sign_Parser.cpp	/^void WED_Sign_Parser::MainLoop(const parser_in_info & input, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
MakeCompo	.\XESCore\DEMTables.cpp	/^static string	MakeCompo(const string& inName)$/;"	f	file:
MakeDEMName	.\XESTools\GISTool copy.cpp	/^static	char * MakeDEMName(int e)$/;"	f	file:
MakeDirExist	.\Installer\XFileTwiddle.unix.cpp	/^int		MakeDirExist(const char * inPath)$/;"	f
MakeDirExist	.\Installer\XFileTwiddle.win.cpp	/^int		MakeDirExist(const char * inPath)$/;"	f
MakeDirExist	.\Utils\XFileTwiddle.mac.cpp	/^int		MakeDirExist(const char * inPath)$/;"	f
MakeDirExist	.\Utils\XFileTwiddle.unix.cpp	/^int		MakeDirExist(const char * inPath)$/;"	f
MakeDirExist	.\Utils\XFileTwiddle.win.cpp	/^int		MakeDirExist(const char * inPath)$/;"	f
MakeDirectRules	.\XESCore\DEMTables.cpp	/^void MakeDirectRules(void)$/;"	f
MakeEdgeClosestMaybe	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void	MakeEdgeClosestMaybe(Pmwx::Halfedge_handle v, NearestEdgeToPt_t * s)$/;"	f	file:
MakeEdgeRouting	.\WEDImportExport\WED_AptIE.cpp	/^static void MakeEdgeRouting(vector<WED_TaxiRoute *>& edges, AptNetwork_t& net, vector<IGISPoint *> * nodes)$/;"	f	file:
MakeICAOTable	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::MakeICAOTable(int bounds[4])$/;"	f	class:WED_GatewayImportDialog
MakeLit	.\XESCore\DEMTables.cpp	/^static string	MakeLit(const string& inName)$/;"	f	file:
MakeMenus	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::MakeMenus(void)$/;"	f	class:RF_MapView
MakeMipmapStack	.\Utils\BitmapUtils.cpp	/^int MakeMipmapStack(struct ImageInfo * ioImage)$/;"	f
MakeMipmapStackFromImage	.\Utils\BitmapUtils.cpp	/^int MakeMipmapStackFromImage(struct ImageInfo * ioImage)$/;"	f
MakeMipmapStackWithFilter	.\Utils\BitmapUtils.cpp	/^int MakeMipmapStackWithFilter(struct ImageInfo * ioImage, unsigned char (* filter)(unsigned char src[], int count, int channel, int level))$/;"	f
MakeNewBuffer	.\WEDCore\WED_FastBuffer.cpp	/^WED_FastBuffer *		WED_FastBufferGroup::MakeNewBuffer(void)$/;"	f	class:WED_FastBufferGroup
MakeNodeRouting	.\WEDImportExport\WED_AptIE.cpp	/^static void MakeNodeRouting(vector<IGISPoint *>& nodes, AptNetwork_t& net)$/;"	f	file:
MakePFSClosestMaybe	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void	MakePFSClosestMaybe(PointFeatureSelection& v, NearestPFSToPt_t * s)$/;"	f	file:
MakePoint	.\XESTools\MapBuckets.h	/^	static	void	MakePoint(Scalar x, Scalar y, Point2& p) {	p = Point2(x, y); }$/;"	f	class:MapFaceBucketTraits
MakePoint	.\XESTools\MapBuckets.h	/^	static	void	MakePoint(Scalar x, Scalar y, Point2& p) {	p = Point2(x, y); }$/;"	f	class:MapHalfedgeBucketTraits
MakePoint	.\XESTools\MapBuckets.h	/^	static	void	MakePoint(Scalar x, Scalar y, Point2& p) {	p = Point2(x, y); }$/;"	f	class:MapVertexBucketTraits
MakePol	.\WEDCore\WED_ResourceMgr.cpp	/^void WED_ResourceMgr::MakePol(const string& path, const pol_info_t& out_info)$/;"	f	class:WED_ResourceMgr
MakePolygonSimple	.\XESCore\MapPolygon.cpp	/^void MakePolygonSimple(const Polygon_2& inPolygon, vector<Polygon_2>& out_simple_polygons)$/;"	f
MakeRVariant	.\XESCore\DEMTables.cpp	/^void MakeRVariant(string& io_string)$/;"	f
MakeSupportedType	.\Utils\BitmapUtils.cpp	/^int MakeSupportedType(const char * path, ImageInfo * inImage)$/;"	f
MakeTiles	.\XESCore\DEMAlgs.cpp	/^void	MakeTiles(const DEMGeo& inDEM, list<DEMGeo>& outTiles)$/;"	f
MakeVersionsTable	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::MakeVersionsTable(int bounds[4])$/;"	f	class:WED_GatewayImportDialog
MakeVertexClosestMaybe	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void	MakeVertexClosestMaybe(Pmwx::Vertex_handle v, NearestVertexToPt_t * s)$/;"	f	file:
MakeWetMask	.\XESCore\Hydro.cpp	/^bool	MakeWetMask(const char * inShapeDir, int lon, int lat, const char * inMaskDir)$/;"	f
Map2dTo3d	.\ObjEdit\OE_Zoomer3d.cpp	/^void	OE_Zoomer3d::Map2dTo3d($/;"	f	class:OE_Zoomer3d
MapBFSVisitor	.\XESCore\MapTopology.h	/^class	MapBFSVisitor {$/;"	c
MapBuffer_H	.\XESCore\MapBuffer.h	25;"	d
MapCreate_H	.\XESCore\MapCreate.h	25;"	d
MapDesliver	.\XESCore\MapAlgs.cpp	/^int MapDesliver(Pmwx& pmwx, double metric, ProgressFunc func)$/;"	f
MapFaceBucketTraits	.\XESTools\MapBuckets.h	/^class	MapFaceBucketTraits {$/;"	c
MapFaceBuckets	.\XESTools\MapBuckets.h	/^typedef	XBuckets<Pmwx::Face_handle, MapFaceBucketTraits>			MapFaceBuckets;$/;"	t
MapFromDEM	.\XESCore\MapRaster.cpp	/^void	MapFromDEM($/;"	f
MapHalfedgeBucketTraits	.\XESTools\MapBuckets.h	/^class	MapHalfedgeBucketTraits {$/;"	c
MapHalfedgeBuckets	.\XESTools\MapBuckets.h	/^typedef	XBuckets<Pmwx::Halfedge_handle, MapHalfedgeBucketTraits>	MapHalfedgeBuckets;$/;"	t
MapHelpers_H	.\XESCore\MapHelpers.h	25;"	d
MapLineToPlane	.\Utils\GeoUtils.cpp	/^bool	MapLineToPlane($/;"	f
MapLineToSphere	.\Utils\GeoUtils.cpp	/^bool	MapLineToSphere($/;"	f
MapMerge	.\XESCore\MapOverlay.cpp	/^void	MapMerge(Pmwx& src_a, Pmwx& src_b, Pmwx& result)$/;"	f
MapMergePolygon	.\XESCore\MapOverlay.cpp	/^void			MapMergePolygon(Pmwx& io_dst, const Polygon_2& src, set<Face_handle> * out_faces, Locator * loc)$/;"	f
MapMergePolygonAny	.\XESCore\MapOverlay.cpp	/^void	MapMergePolygonAny(Pmwx& io_dst, const __EdgeContainer& src, set<Face_handle> * out_faces, Locator * loc)$/;"	f
MapMergePolygonSet	.\XESCore\MapOverlay.cpp	/^void			MapMergePolygonSet(Pmwx& io_dst, const Polygon_set_2& src, set<Face_handle> * out_faces, Locator * loc)$/;"	f
MapMergePolygonWithHoles	.\XESCore\MapOverlay.cpp	/^void			MapMergePolygonWithHoles(Pmwx& io_dst, const Polygon_with_holes_2& src, set<Face_handle> * out_faces, Locator * loc)$/;"	f
MapMouseToCoord	.\RenderFarmUI\RF_DrawMap.cpp	/^static void	MapMouseToCoord($/;"	f	file:
MapOverlay	.\XESCore\MapOverlay.cpp	/^void	MapOverlay(Pmwx& bottom, Pmwx& top, Pmwx& result)$/;"	f
MapOverlayPolygon	.\XESCore\MapOverlay.cpp	/^Face_handle		MapOverlayPolygon(Pmwx& io_dst, const Polygon_2& src, Locator * loc)$/;"	f
MapOverlayPolygonAny	.\XESCore\MapOverlay.cpp	/^Face_handle		MapOverlayPolygonAny(Pmwx& io_dst, const __EdgeContainer& src, Locator * loc)$/;"	f
MapOverlayPolygonSet	.\XESCore\MapOverlay.cpp	/^void			MapOverlayPolygonSet(Pmwx& io_dst, const Polygon_set_2& src, Locator * loc, set<Face_handle> * faces)$/;"	f
MapOverlayPolygonWithHoles	.\XESCore\MapOverlay.cpp	/^Face_handle		MapOverlayPolygonWithHoles(Pmwx& io_dst, const Polygon_with_holes_2& src, Locator * loc)$/;"	f
MapOverlay_H	.\XESCore\MapOverlay.h	25;"	d
MapPolygonForward	.\XESCore\MapPolygon.cpp	/^void	MapPolygonForward(Polygon_2& io_poly, const CoordTranslator_2& translator)$/;"	f
MapPolygonForward	.\XESCore\MapPolygon.cpp	/^void	MapPolygonForward(Polygon_with_holes_2& io_poly, const CoordTranslator_2& translator)$/;"	f
MapPolygonReverse	.\XESCore\MapPolygon.cpp	/^void	MapPolygonReverse(Polygon_2& io_poly, const CoordTranslator_2& translator)$/;"	f
MapPolygonReverse	.\XESCore\MapPolygon.cpp	/^void	MapPolygonReverse(Polygon_with_holes_2& io_poly, const CoordTranslator_2& translator)$/;"	f
MapPolygon_H	.\XESCore\MapPolygon.h	7;"	d
MapPoolNumber	.\DSF\DSFPointPool.cpp	/^int				DSFContiguousPointPool::MapPoolNumber(int n)$/;"	f	class:DSFContiguousPointPool
MapPoolNumber	.\DSF\DSFPointPool.cpp	/^int				DSFSharedPointPool::MapPoolNumber(int n)$/;"	f	class:DSFSharedPointPool
MapPoolNumber	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int				DSFContiguousPointPool::MapPoolNumber(int n)$/;"	f	class:DSFContiguousPointPool
MapPoolNumber	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int				DSFSharedPointPool::MapPoolNumber(int n)$/;"	f	class:DSFSharedPointPool
MapQuads	.\RenderFarmUI\RF_ImageTool.cpp	/^static void	MapQuads(	double old_bounds[4][2], double old_sub[4][2],$/;"	f	file:
MapQuads	.\XPTools\GetImage.cpp	/^void	MapQuads(	double old_bounds[4][2], double old_sub[4][2],$/;"	f
MapRaster_H	.\XESCore\MapRaster.h	25;"	d
MapSimplify	.\XESCore\MapAlgs.cpp	/^void MapSimplify(Pmwx& pmwx, double metric)$/;"	f
MapTopology_H	.\XESCore\MapTopology.h	25;"	d
MapVertexBucketTraits	.\XESTools\MapBuckets.h	/^class	MapVertexBucketTraits {$/;"	c
MapVertexBuckets	.\XESTools\MapBuckets.h	/^typedef	XBuckets<Pmwx::Vertex_handle, MapVertexBucketTraits>		MapVertexBuckets;$/;"	t
Map_CanHandleCommand	.\WEDMap\WED_MapPane.cpp	/^int		WED_MapPane::Map_CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:WED_MapPane
Map_CreateReturnEdges	.\XESCore\MapCreate.cpp	/^void	Map_CreateReturnEdges($/;"	f
Map_CreateWithLineData	.\XESCore\MapCreate.cpp	/^void	Map_CreateWithLineData($/;"	f
Map_HandleCommand	.\WEDMap\WED_MapPane.cpp	/^int		WED_MapPane::Map_HandleCommand(int command)$/;"	f	class:WED_MapPane
Map_KeyPress	.\WEDMap\WED_MapPane.cpp	/^int		WED_MapPane::Map_KeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_MapPane
MarkFunkyRoadIssues	.\XESCore\NetAlgs.cpp	/^void MarkFunkyRoadIssues(Pmwx& ioMap)$/;"	f
MarkTriAsTaken	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::MarkTriAsTaken(const size_t i)$/;"	f	class:triangle_stripper::tri_stripper
MatchMode	.\XPTools\TaxiMaker.cpp	/^static	bool	MatchMode(int cur, int possible)$/;"	f	file:
MeasureRange	.\UI\FontMgr.cpp	/^float FontMgr::MeasureRange($/;"	f	class:FontMgr
MeasureString	.\GUI\GUI_TextField.cpp	/^float			GUI_TextField::MeasureString($/;"	f	class:GUI_TextField
MeasureString	.\UI\FontMgr.cpp	/^float FontMgr::MeasureString($/;"	f	class:FontMgr
MeasureStringCB	.\OGLE\ogle.cpp	/^float			OGLE::MeasureStringCB($/;"	f	class:OGLE
MeasureString_f	.\OGLE\ogle.h	/^	float			(* MeasureString_f)($/;"	m	struct:OGLE_Callbacks
MemFileHandling	.\WEDImportExport\WED_GatewayImport.cpp	/^string MemFileHandling(const string & zipPath, const string & filePath, const string & ICAO, bool & has_dsf)$/;"	f
MemFileReader	.\XESCore\SimpleIO.cpp	/^MemFileReader::MemFileReader(const char * inStart, const char * inEnd, PlatformType platform)$/;"	f	class:MemFileReader
MemFileReader	.\XESCore\SimpleIO.h	/^class	MemFileReader : public IOReader {$/;"	c
MemFile_Close	.\Utils\MemFileUtils.cpp	/^void		MemFile_Close(MFMemFile * inFile)$/;"	f
MemFile_GetBegin	.\Utils\MemFileUtils.cpp	/^const char *	MemFile_GetBegin(MFMemFile * inFile)$/;"	f
MemFile_GetEnd	.\Utils\MemFileUtils.cpp	/^const char *	MemFile_GetEnd(MFMemFile * inFile)$/;"	f
MemFile_Open	.\Utils\MemFileUtils.cpp	/^MFMemFile * 	MemFile_Open(const char * inPath)$/;"	f
MemJASGeoClose	.\Utils\GISUtils.cpp	/^static int 		MemJASGeoClose(thandle_t)$/;"	f	file:
MemJASGeoFile	.\Utils\GISUtils.cpp	/^	MemJASGeoFile(jas_aux_buffer_t * aux_buf_t) $/;"	f	struct:MemJASGeoFile
MemJASGeoFile	.\Utils\GISUtils.cpp	/^struct	MemJASGeoFile {$/;"	s	file:
MemJASGeoMapFile	.\Utils\GISUtils.cpp	/^static int 		MemJASGeoMapFile(thandle_t handle, tdata_t* dp, toff_t* len)$/;"	f	file:
MemJASGeoRead	.\Utils\GISUtils.cpp	/^static tsize_t	MemJASGeoRead(thandle_t handle, tdata_t data, tsize_t len)$/;"	f	file:
MemJASGeoSeek	.\Utils\GISUtils.cpp	/^static toff_t 	MemJASGeoSeek(thandle_t handle, toff_t pos, int mode)$/;"	f	file:
MemJASGeoSize	.\Utils\GISUtils.cpp	/^static toff_t 	MemJASGeoSize(thandle_t handle)$/;"	f	file:
MemJASGeoUnmapFile	.\Utils\GISUtils.cpp	/^static void 	MemJASGeoUnmapFile(thandle_t, tdata_t, toff_t)$/;"	f	file:
MemJASGeoWrite	.\Utils\GISUtils.cpp	/^static tsize_t MemJASGeoWrite(thandle_t handle, tdata_t data, tsize_t len)$/;"	f	file:
MemTIFFCloseProc	.\XESCore\DEMIO.cpp	/^static int 		MemTIFFCloseProc(thandle_t)$/;"	f	file:
MemTIFFMapFileProc	.\XESCore\DEMIO.cpp	/^static int 		MemTIFFMapFileProc(thandle_t handle, tdata_t* dp, toff_t* len)$/;"	f	file:
MemTIFFReadWriteProc	.\XESCore\DEMIO.cpp	/^static tsize_t	MemTIFFReadWriteProc(thandle_t handle, tdata_t data, tsize_t len)$/;"	f	file:
MemTIFFSeekProc	.\XESCore\DEMIO.cpp	/^static toff_t 	MemTIFFSeekProc(thandle_t handle, toff_t pos, int mode)$/;"	f	file:
MemTIFFSizeProc	.\XESCore\DEMIO.cpp	/^static toff_t 	MemTIFFSizeProc(thandle_t handle)$/;"	f	file:
MemTIFFUnmapFileProc	.\XESCore\DEMIO.cpp	/^static void 	MemTIFFUnmapFileProc(thandle_t, tdata_t, toff_t)$/;"	f	file:
MemUtils_H	.\Utils\MemUtils.h	25;"	d
Members	.\lib_json\include\json\value.h	/^      typedef std::vector<std::string> Members;$/;"	t	class:Json::Value
MenuCommandCB	.\GUI\GUI_Application.cpp	/^void GUI_Application::MenuCommandCB(void * ref, int cmd)$/;"	f	class:GUI_Application
MenuMap	.\UI\XWin.win.cpp	/^typedef	map<int, pair<xmenu, int> >	MenuMap;$/;"	t	file:
MenuUpdateCB	.\GUI\GUI_Application.cpp	/^void GUI_Application::MenuUpdateCB(void * ref, int cmd, char * io_name, int * io_check, int * io_enable)$/;"	f	class:GUI_Application
MergeMMU	.\XESCore\DEMAlgs.cpp	/^void	MergeMMU(DEMGeo& ws, vector<DEMGeo::address>& io_sheds, int min_mmu_size)$/;"	f
MergeMaps_legacy	.\XESCore\MapOverlay.cpp	/^void MergeMaps_legacy(Pmwx& ioDstMap, Pmwx& ioSrcMap, bool inForceProps, set<Face_handle> * outFaces, bool pre_integrated, ProgressFunc func)$/;"	f
MergeNearJunctions	.\XESCore\NetPlacement.cpp	/^void	MergeNearJunctions(Net_JunctionInfoSet& juncs, Net_ChainInfoSet& chains, double dist)$/;"	f
MergePhotos	.\XPTools\GetImage.cpp	/^void	MergePhotos(int x1, int y1, int x2, int y2, int res_per_quad, const char * inFileName, const char * inPath, bool isMerge)$/;"	f
MergeSegs	.\XPTools\Env2DSF.cpp	/^void	MergeSegs(		int inSeg1, int inSeg2,$/;"	f
MeshConformer_H	.\XESCore\MeshConformer.h	2;"	d
MeshFaceInfo	.\XESCore\MeshDefs.h	/^	MeshFaceInfo() : terrain(DEM_NO_DATA),feature(NO_VALUE),flag(0), orig_face(NULL) { edge_flags[0] = edge_flags[1] = edge_flags[2] = 0; }$/;"	f	struct:MeshFaceInfo
MeshFaceInfo	.\XESCore\MeshDefs.h	/^	MeshFaceInfo(const MeshFaceInfo& rhs) :$/;"	f	struct:MeshFaceInfo
MeshFaceInfo	.\XESCore\MeshDefs.h	/^struct	MeshFaceInfo {$/;"	s
MeshHeightAtPoint	.\XESCore\MeshAlgs.cpp	/^double	MeshHeightAtPoint(CDT& inMesh, double inLon, double inLat, int hint_id)$/;"	f
MeshPrefs_t	.\XESCore\MeshAlgs.h	/^struct	MeshPrefs_t {$/;"	s
MeshSimplify	.\XESCore\MeshSimplify.cpp	/^MeshSimplify::MeshSimplify(CDT& in_mesh, mesh_error_f in_err) : mesh(in_mesh), err_f(in_err)$/;"	f	class:MeshSimplify
MeshSimplify	.\XESCore\MeshSimplify.h	/^class	MeshSimplify {$/;"	c
MeshSimplify_H	.\XESCore\MeshSimplify.h	25;"	d
MeshTool_Create_H	.\MeshTool\MeshTool_Create.h	25;"	d
MeshVertexInfo	.\XESCore\MeshDefs.h	/^	MeshVertexInfo() : height(0.0), wave_height(1.0) { }$/;"	f	struct:MeshVertexInfo
MeshVertexInfo	.\XESCore\MeshDefs.h	/^	MeshVertexInfo(const MeshVertexInfo& rhs) :$/;"	f	struct:MeshVertexInfo
MeshVertexInfo	.\XESCore\MeshDefs.h	/^struct	MeshVertexInfo {$/;"	s
MessageFunc	.\ObjEdit\OE_Pane.cpp	/^int		OE_Pane::MessageFunc($/;"	f	class:OE_Pane
MessageFunc	.\ObjEdit\OE_Scroller.cpp	/^int		OE_Scroller::MessageFunc($/;"	f	class:OE_Scroller
MessageFunc	.\RenderFarmUI\RF_Pane.cpp	/^int		RF_Pane::MessageFunc($/;"	f	class:RF_Pane
MetersToLLE	.\Utils\GISUtils.cpp	/^void MetersToLLE(const Point2& ref, int count, Point2 * pts)$/;"	f
Midpoint2	.\Utils\CompGeomDefs2.h	/^inline	Point2	Midpoint2(const Point2& p1, const Point2& p2)	{ return Point2((p1.x_ + p2.x_) * 0.5, (p1.y_ + p2.y_) * 0.5); }$/;"	f
MinSlopeNear	.\XESCore\Hydro.cpp	/^inline float MinSlopeNear(const DEMGeo& dem, int x, int y)$/;"	f
ModelToScreenPt	.\Utils\GeoUtils.cpp	/^void	ModelToScreenPt($/;"	f
MonitorCaption	.\RenderFarmUI\RF_MapView.cpp	/^char * RF_MapView::MonitorCaption(void)$/;"	f	class:RF_MapView
MouseDown	.\GUI\GUI_Button.cpp	/^int			GUI_Button::MouseDown(int x, int y, int button)$/;"	f	class:GUI_Button
MouseDown	.\GUI\GUI_Pane.h	/^	virtual	int			MouseDown(int x, int y, int button) { return 0; }$/;"	f	class:GUI_Pane
MouseDown	.\GUI\GUI_PopupButton.cpp	/^int			GUI_PopupButton::MouseDown(int x, int y, int button)$/;"	f	class:GUI_PopupButton
MouseDown	.\GUI\GUI_ScrollBar.cpp	/^int			GUI_ScrollBar::MouseDown(int x, int y, int button)$/;"	f	class:GUI_ScrollBar
MouseDown	.\GUI\GUI_Splitter.cpp	/^int			GUI_Splitter::MouseDown(int x, int y, int button)$/;"	f	class:GUI_Splitter
MouseDown	.\GUI\GUI_TabControl.cpp	/^int			GUI_TabControl::MouseDown(int x, int y, int button)$/;"	f	class:GUI_TabControl
MouseDown	.\GUI\GUI_Table.cpp	/^int			GUI_Header::MouseDown(int x, int y, int button)$/;"	f	class:GUI_Header
MouseDown	.\GUI\GUI_Table.cpp	/^int			GUI_Side::MouseDown(int x, int y, int button)$/;"	f	class:GUI_Side
MouseDown	.\GUI\GUI_Table.cpp	/^int			GUI_Table::MouseDown(int x, int y, int button)$/;"	f	class:GUI_Table
MouseDown	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::MouseDown(int x, int y, int button)$/;"	f	class:GUI_TextField
MouseDown	.\GUI\GUI_ToolBar.cpp	/^int			GUI_ToolBar::MouseDown(int x, int y, int button)$/;"	f	class:GUI_ToolBar
MouseDown	.\RenderFarmUI\RF_MapView.cpp	/^int		RF_MapView::MouseDown(int x, int y, int button)$/;"	f	class:RF_MapView
MouseDown	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^int			WED_LibraryPreviewPane::MouseDown(int x, int y, int button)$/;"	f	class:WED_LibraryPreviewPane
MouseDown	.\WEDMap\WED_Map.cpp	/^int			WED_Map::MouseDown(int x, int y, int button)$/;"	f	class:WED_Map
MouseDown	.\WEDTCE\WED_TCE.cpp	/^int			WED_TCE::MouseDown(int x, int y, int button)$/;"	f	class:WED_TCE
MouseDown	.\WEDWindows\WED_AboutBox.cpp	/^int			WED_AboutBox::MouseDown(int x, int y, int button)$/;"	f	class:WED_AboutBox
MouseDown	.\WEDWindows\WED_PackageStatusPane.cpp	/^int			WED_PackageStatusPane::MouseDown(int x, int y, int button)$/;"	f	class:WED_PackageStatusPane
MouseDrag	.\GUI\GUI_Button.cpp	/^void		GUI_Button::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_Button
MouseDrag	.\GUI\GUI_Pane.h	/^	virtual	void		MouseDrag(int x, int y, int button) { 			}$/;"	f	class:GUI_Pane
MouseDrag	.\GUI\GUI_PopupButton.cpp	/^void		GUI_PopupButton::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_PopupButton
MouseDrag	.\GUI\GUI_ScrollBar.cpp	/^void		GUI_ScrollBar::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_ScrollBar
MouseDrag	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_Splitter
MouseDrag	.\GUI\GUI_TabControl.cpp	/^void		GUI_TabControl::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_TabControl
MouseDrag	.\GUI\GUI_Table.cpp	/^void		GUI_Header::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_Header
MouseDrag	.\GUI\GUI_Table.cpp	/^void		GUI_Side::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_Side
MouseDrag	.\GUI\GUI_Table.cpp	/^void		GUI_Table::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_Table
MouseDrag	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::MouseDrag(int x, int y, int button)$/;"	f	class:GUI_TextField
MouseDrag	.\GUI\GUI_ToolBar.cpp	/^void		GUI_ToolBar::MouseDrag(int x, int y, int button) { 			}$/;"	f	class:GUI_ToolBar
MouseDrag	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::MouseDrag(int x, int y, int button)$/;"	f	class:RF_MapView
MouseDrag	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^void		WED_LibraryPreviewPane::MouseDrag(int x, int y, int button)$/;"	f	class:WED_LibraryPreviewPane
MouseDrag	.\WEDMap\WED_Map.cpp	/^void		WED_Map::MouseDrag(int x, int y, int button)$/;"	f	class:WED_Map
MouseDrag	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::MouseDrag(int x, int y, int button)$/;"	f	class:WED_TCE
MouseDrag	.\WEDWindows\WED_PackageStatusPane.cpp	/^void		WED_PackageStatusPane::MouseDrag(int x, int y, int button)$/;"	f	class:WED_PackageStatusPane
MouseMove	.\GUI\GUI_Button.cpp	/^int		GUI_Button::MouseMove(int x, int y)$/;"	f	class:GUI_Button
MouseMove	.\GUI\GUI_Pane.h	/^	virtual	int			MouseMove(int x, int y			  ) { return 0; }$/;"	f	class:GUI_Pane
MouseMove	.\RenderFarmUI\RF_MapView.cpp	/^int		RF_MapView::MouseMove(int x, int y			  )$/;"	f	class:RF_MapView
MouseMove	.\WEDMap\WED_Map.cpp	/^int	WED_Map::MouseMove(int x, int y)$/;"	f	class:WED_Map
MouseMove	.\WEDTCE\WED_TCE.cpp	/^int	WED_TCE::MouseMove(int x, int y)$/;"	f	class:WED_TCE
MouseMove	.\WEDWindows\WED_StartWindow.cpp	/^int		WED_StartWindow::MouseMove(int x, int y)$/;"	f	class:WED_StartWindow
MouseToCellX	.\GUI\GUI_Table.cpp	/^int		GUI_Header::MouseToCellX(int x)$/;"	f	class:GUI_Header
MouseToCellX	.\GUI\GUI_Table.cpp	/^int		GUI_Table::MouseToCellX(int x)$/;"	f	class:GUI_Table
MouseToCellY	.\GUI\GUI_Table.cpp	/^int		GUI_Side::MouseToCellY(int y)$/;"	f	class:GUI_Side
MouseToCellY	.\GUI\GUI_Table.cpp	/^int		GUI_Table::MouseToCellY(int y)$/;"	f	class:GUI_Table
MouseUp	.\GUI\GUI_Button.cpp	/^void		GUI_Button::MouseUp  (int x, int y, int button)$/;"	f	class:GUI_Button
MouseUp	.\GUI\GUI_Pane.h	/^	virtual	void		MouseUp  (int x, int y, int button) { 			}$/;"	f	class:GUI_Pane
MouseUp	.\GUI\GUI_PopupButton.cpp	/^void		GUI_PopupButton::MouseUp  (int x, int y, int button)$/;"	f	class:GUI_PopupButton
MouseUp	.\GUI\GUI_ScrollBar.cpp	/^void		GUI_ScrollBar::MouseUp(int x, int y, int button)$/;"	f	class:GUI_ScrollBar
MouseUp	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::MouseUp(int x, int y, int button)$/;"	f	class:GUI_Splitter
MouseUp	.\GUI\GUI_TabControl.cpp	/^void		GUI_TabControl::MouseUp  (int x, int y, int button)$/;"	f	class:GUI_TabControl
MouseUp	.\GUI\GUI_Table.cpp	/^void		GUI_Header::MouseUp  (int x, int y, int button)$/;"	f	class:GUI_Header
MouseUp	.\GUI\GUI_Table.cpp	/^void		GUI_Side::MouseUp  (int x, int y, int button)$/;"	f	class:GUI_Side
MouseUp	.\GUI\GUI_Table.cpp	/^void		GUI_Table::MouseUp  (int x, int y, int button)$/;"	f	class:GUI_Table
MouseUp	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::MouseUp(int x, int y, int button)$/;"	f	class:GUI_TextField
MouseUp	.\GUI\GUI_ToolBar.cpp	/^void		GUI_ToolBar::MouseUp  (int x, int y, int button) { 			}$/;"	f	class:GUI_ToolBar
MouseUp	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::MouseUp  (int x, int y, int button)$/;"	f	class:RF_MapView
MouseUp	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^void		WED_LibraryPreviewPane::MouseUp  (int x, int y, int button)$/;"	f	class:WED_LibraryPreviewPane
MouseUp	.\WEDMap\WED_Map.cpp	/^void		WED_Map::MouseUp  (int x, int y, int button)$/;"	f	class:WED_Map
MouseUp	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::MouseUp  (int x, int y, int button)$/;"	f	class:WED_TCE
MouseUp	.\WEDWindows\WED_AboutBox.cpp	/^void		WED_AboutBox::MouseUp  (int x, int y, int button)$/;"	f	class:WED_AboutBox
MouseUp	.\WEDWindows\WED_PackageStatusPane.cpp	/^void		WED_PackageStatusPane::MouseUp(int x, int y, int button)$/;"	f	class:WED_PackageStatusPane
MouseWheel	.\GUI\GUI_Window.cpp	/^void			GUI_Window::MouseWheel(int inX, int inY, int inDelta, int inAxis)$/;"	f	class:GUI_Window
MouseWheel	.\UI\XGrinderApp.cpp	/^	virtual	void			MouseWheel(int inX, int inY, int inDelta, int inAxis) { }$/;"	f	class:XGrinderWin
MouseWheel	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::MouseWheel(int inX, int inY, int inDelta, int inAxis)$/;"	f	class:XPWidgetWin
MouseWheel	.\XPTools\ViewObj.cpp	/^void			XObjWin::MouseWheel(int inX, int inY, int inDelta, int inAxis)$/;"	f	class:XObjWin
MoveCorner	.\WEDEntities\WED_GISBoundingBox.cpp	/^void	WED_GISBoundingBox::MoveCorner(GISLayer_t l,int corner, const Vector2& delta)$/;"	f	class:WED_GISBoundingBox
MoveCorner	.\WEDEntities\WED_GISLine_Width.cpp	/^void	WED_GISLine_Width::MoveCorner(GISLayer_t layer,  int corner, const Vector2& delta)$/;"	f	class:WED_GISLine_Width
MoveCorner	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::MoveCorner(GISLayer_t la,int corner, const Vector2& delta)$/;"	f	class:WED_GISPoint_HeadingWidthLength
MoveCorner	.\WEDEntities\WED_OverlayImage.cpp	/^void	WED_OverlayImage::MoveCorner(GISLayer_t l,int corner, const Vector2& delta)$/;"	f	class:WED_OverlayImage
MoveHandleX	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void		RF_BezierTestTool::MoveHandleX(int handle, double deltaX)$/;"	f	class:RF_BezierTestTool
MoveHandleX	.\RenderFarmUI\RF_CropTool.cpp	/^void		RF_CropTool::MoveHandleX(int handle, double deltaX)$/;"	f	class:RF_CropTool
MoveHandleX	.\RenderFarmUI\RF_ImageTool.cpp	/^void		RF_ImageTool::MoveHandleX(int h, double v)$/;"	f	class:RF_ImageTool
MoveHandleY	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void		RF_BezierTestTool::MoveHandleY(int handle, double deltaY)$/;"	f	class:RF_BezierTestTool
MoveHandleY	.\RenderFarmUI\RF_CropTool.cpp	/^void		RF_CropTool::MoveHandleY(int handle, double deltaY)$/;"	f	class:RF_CropTool
MoveHandleY	.\RenderFarmUI\RF_ImageTool.cpp	/^void		RF_ImageTool::MoveHandleY(int h, double v)$/;"	f	class:RF_ImageTool
MoveSegLeft	.\XESCore\BlockFill.cpp	/^inline	void	MoveSegLeft(const Segment2& l1, double dist, Segment2& l2)$/;"	f
MoveSegLeft	.\XESCore\MapDefs.h	/^static	void	MoveSegLeft(const Segment_2& l1, double dist, Segment_2& l2)$/;"	f
MoveSegLeft_	.\XESCore\MapBuffer.cpp	/^inline	void	MoveSegLeft_(const Segment_2& l1, double dist, Segment_2& l2, Vector_2& offset_vector)$/;"	f
MoveSide	.\WEDEntities\WED_GISBoundingBox.cpp	/^void	WED_GISBoundingBox::MoveSide(GISLayer_t l,int side, const Vector2& delta)$/;"	f	class:WED_GISBoundingBox
MoveSide	.\WEDEntities\WED_GISLine_Width.cpp	/^void	WED_GISLine_Width::MoveSide(GISLayer_t l,  int side, const Vector2& delta)$/;"	f	class:WED_GISLine_Width
MoveSide	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::MoveSide(GISLayer_t la,int side, const Vector2& delta)$/;"	f	class:WED_GISPoint_HeadingWidthLength
MoveSide	.\WEDEntities\WED_OverlayImage.cpp	/^void	WED_OverlayImage::MoveSide(GISLayer_t l,int side, const Vector2& delta)$/;"	f	class:WED_OverlayImage
MoveTo	.\UI\XWin.lin.cpp	/^void XWin::MoveTo(int inX, int inY)$/;"	f	class:XWin
MoveTo	.\UI\XWin.win.cpp	/^void			XWin::MoveTo(int inX, int inY)$/;"	f	class:XWin
MultiTexCoord	.\ObjEdit\OE_DrawObj.cpp	/^static	void	MultiTexCoord(float s, float t)$/;"	f	file:
MwmHints	.\UI\XPopup.h	/^typedef struct MwmHints$/;"	s
MwmHints	.\UI\XPopup.h	/^} MwmHints;$/;"	t	typeref:struct:MwmHints
MyCopyBitmapSection	.\XPTools\GetImage.cpp	/^void	MyCopyBitmapSection($/;"	f
MyCreateBitmapFromFile	.\XPTools\GetImage.cpp	/^int		MyCreateBitmapFromFile(const char * inFilePath, struct ImageInfo * outImageInfo)$/;"	f
MyObjReceiver	.\XPTools\ViewObj.cpp	/^void	MyObjReceiver(double x, double y, double z, double r, const char * obj, void * inRef)$/;"	f
MyVertexConverter	.\XPTools\ViewObj.cpp	/^void	MyVertexConverter(double lat, double lon, double h, float * x, float * y, float * z)$/;"	f
MyWriteBitmapToFile	.\XPTools\GetImage.cpp	/^int	MyWriteBitmapToFile	(const struct ImageInfo * inImage, const char * inFilePath)$/;"	f
N	.\WEDCore\WED_Clipping.cpp	/^	static const int N = 2;$/;"	m	struct:split_traits	file:
N	.\WEDCore\WED_Clipping.cpp	/^	static const int N = 4;$/;"	m	struct:split_traits	file:
NEAR_COLINEAR	.\Utils\CompGeomUtils.cpp	560;"	d	file:
NETPLACEMENT_H	.\XESCore\NetPlacement.h	24;"	d
NETTABLES_H	.\XESCore\NetTables.h	24;"	d
NEW_ALG	.\XESCore\MeshAlgs.cpp	1232;"	d	file:
NM_TO_DEG_LAT	.\XESCore\XESConstants.h	36;"	d
NM_TO_MTR	.\XESCore\XESConstants.h	29;"	d
NOATOM	.\lib_json\src\test_lib_json\jsontest.cpp	35;"	d	file:
NOBITMAP	.\lib_json\src\test_lib_json\jsontest.cpp	46;"	d	file:
NOCLIPBOARD	.\lib_json\src\test_lib_json\jsontest.cpp	61;"	d	file:
NOCOLOR	.\lib_json\src\test_lib_json\jsontest.cpp	41;"	d	file:
NOCOMM	.\lib_json\src\test_lib_json\jsontest.cpp	24;"	d	file:
NOCTLMGR	.\lib_json\src\test_lib_json\jsontest.cpp	66;"	d	file:
NODBCS	.\lib_json\src\test_lib_json\jsontest.cpp	38;"	d	file:
NODEFERWINDOWPOS	.\lib_json\src\test_lib_json\jsontest.cpp	55;"	d	file:
NODRAWTEXT	.\lib_json\src\test_lib_json\jsontest.cpp	43;"	d	file:
NODRIVERS	.\lib_json\src\test_lib_json\jsontest.cpp	28;"	d	file:
NOGDI	.\lib_json\src\test_lib_json\jsontest.cpp	26;"	d	file:
NOGDICAPMASKS	.\lib_json\src\test_lib_json\jsontest.cpp	40;"	d	file:
NOGDIOBJ	.\lib_json\src\test_lib_json\jsontest.cpp	42;"	d	file:
NOICONS	.\lib_json\src\test_lib_json\jsontest.cpp	62;"	d	file:
NOIME	.\lib_json\src\test_lib_json\jsontest.cpp	22;"	d	file:
NOKEYBOARDINFO	.\lib_json\src\test_lib_json\jsontest.cpp	39;"	d	file:
NOKEYSTATES	.\lib_json\src\test_lib_json\jsontest.cpp	57;"	d	file:
NOLANGUAGE	.\lib_json\src\test_lib_json\jsontest.cpp	36;"	d	file:
NOLFILEIO	.\lib_json\src\test_lib_json\jsontest.cpp	32;"	d	file:
NOLOGERROR	.\lib_json\src\test_lib_json\jsontest.cpp	29;"	d	file:
NOLSTRING	.\lib_json\src\test_lib_json\jsontest.cpp	37;"	d	file:
NOMB	.\lib_json\src\test_lib_json\jsontest.cpp	63;"	d	file:
NOMCX	.\lib_json\src\test_lib_json\jsontest.cpp	21;"	d	file:
NOMDI	.\lib_json\src\test_lib_json\jsontest.cpp	65;"	d	file:
NOMEMMGR	.\lib_json\src\test_lib_json\jsontest.cpp	31;"	d	file:
NOMENUS	.\lib_json\src\test_lib_json\jsontest.cpp	59;"	d	file:
NOMETAFILE	.\lib_json\src\test_lib_json\jsontest.cpp	48;"	d	file:
NOMSG	.\lib_json\src\test_lib_json\jsontest.cpp	51;"	d	file:
NONE	.\XESCore\MeshConformer.h	/^    NONE,     \/**< \\c this is not initialized. *\/$/;"	e	enum:CGAL::Triangulation_conformer_any_2::Initialization
NON_BLOCKING	.\Network\PCSBSocket.lin.cpp	45;"	d	file:
NON_BLOCKING	.\Network\PCSBSocket.win.cpp	30;"	d	file:
NON_BLOCKING	.\Network\PCSBSocketUDP.lin.cpp	27;"	d	file:
NON_BLOCKING	.\Network\PCSBSocketUDP.win.cpp	27;"	d	file:
NOOPENFILE	.\lib_json\src\test_lib_json\jsontest.cpp	33;"	d	file:
NOPROFILER	.\lib_json\src\test_lib_json\jsontest.cpp	30;"	d	file:
NORASTEROPS	.\lib_json\src\test_lib_json\jsontest.cpp	47;"	d	file:
NORESOURCE	.\lib_json\src\test_lib_json\jsontest.cpp	34;"	d	file:
NORPC	.\lib_json\src\test_lib_json\jsontest.cpp	25;"	d	file:
NOSCALABLEFONT	.\lib_json\src\test_lib_json\jsontest.cpp	45;"	d	file:
NOSCROLL	.\lib_json\src\test_lib_json\jsontest.cpp	60;"	d	file:
NOSERVICE	.\lib_json\src\test_lib_json\jsontest.cpp	20;"	d	file:
NOSHOWWINDOW	.\lib_json\src\test_lib_json\jsontest.cpp	54;"	d	file:
NOSOUND	.\lib_json\src\test_lib_json\jsontest.cpp	23;"	d	file:
NOSYSCOMMANDS	.\lib_json\src\test_lib_json\jsontest.cpp	64;"	d	file:
NOSYSMETRICS	.\lib_json\src\test_lib_json\jsontest.cpp	49;"	d	file:
NOSYSTEMPARAMSINFO	.\lib_json\src\test_lib_json\jsontest.cpp	50;"	d	file:
NOTEXTMETRIC	.\lib_json\src\test_lib_json\jsontest.cpp	44;"	d	file:
NOUSER	.\lib_json\src\test_lib_json\jsontest.cpp	27;"	d	file:
NOVIRTUALKEYCODES	.\lib_json\src\test_lib_json\jsontest.cpp	56;"	d	file:
NOWH	.\lib_json\src\test_lib_json\jsontest.cpp	58;"	d	file:
NOWINMESSAGES	.\lib_json\src\test_lib_json\jsontest.cpp	67;"	d	file:
NOWINOFFSETS	.\lib_json\src\test_lib_json\jsontest.cpp	53;"	d	file:
NOWINSTYLES	.\lib_json\src\test_lib_json\jsontest.cpp	52;"	d	file:
NO_BORDERS	.\XESCore\DSFBuilder.cpp	83;"	d	file:
NO_BORDERS_AT_ALL	.\XESCore\MeshAlgs.cpp	68;"	d	file:
NO_BORDER_SHARING	.\XESCore\MeshAlgs.cpp	72;"	d	file:
NO_FACE_RENDER	.\RenderFarmUI\RF_DrawMap.cpp	42;"	d	file:
NO_FOREST_TYPES	.\XESTools\GISTool_ProcessingCmds.cpp	60;"	d	file:
NO_ORTHO	.\XESCore\DSFBuilder.cpp	80;"	d	file:
NO_RECURSION	.\Utils\XCull.h	123;"	d
NSOpenGLView	.\UI\XWinGL.h	/^		typedef void NSOpenGLView;$/;"	t
NT	.\Utils\point_index.h	/^	typedef typename Traits::FT				NT;$/;"	t	class:spatial_index_2
NT	.\XESCore\CGALDefs.h	/^typedef CGAL::Lazy_exact_nt<CGAL::Gmpq> NT;$/;"	t
NT	.\XESCore\CGALDefs.h	/^typedef CGAL::Lazy_exact_nt<CGAL::Quotient<CGAL::MP_Float> >  NT;$/;"	t
NUMBER_OF_DEFAULT_TOKENS	.\XESCore\EnumSystem.h	/^	NUMBER_OF_DEFAULT_TOKENS$/;"	e	enum:__anon133
NUM_KEYFRAMES	.\AC3DPlugins\obj_editor.cpp	/^const int NUM_KEYFRAMES = 50;$/;"	v
NUM_LEVELS	.\WEDMap\WED_TerraserverLayer.h	30;"	d
NUM_NEIGHBORS	.\OneOffs\gen_tiles.c	17;"	d	file:
NameAxis	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::NameAxis(int inAxis, const string& inName)$/;"	f	class:CoverageFinder
NaturalTerrainInfoMap	.\XESCore\DEMTables.h	/^typedef map<int, NaturalTerrainInfo_t>	NaturalTerrainInfoMap;				\/\/ Index from .ter enum to line info!$/;"	t
NaturalTerrainInfo_t	.\XESCore\DEMTables.h	/^struct	NaturalTerrainInfo_t {$/;"	s
NaturalTerrainRuleVector	.\XESCore\DEMTables.h	/^typedef vector<NaturalTerrainRule_t>	NaturalTerrainRuleVector;			\/\/ Natural terrain rules ordered by rule priority$/;"	t
NaturalTerrainRule_t	.\XESCore\DEMTables.h	/^struct	NaturalTerrainRule_t {$/;"	s
NearestEdgeToPt_t	.\RenderFarmUI\RF_SelectionTool.cpp	/^struct	NearestEdgeToPt_t {$/;"	s	file:
NearestPFSToPt_t	.\RenderFarmUI\RF_SelectionTool.cpp	/^struct	NearestPFSToPt_t {$/;"	s	file:
NearestVertexToPt_t	.\RenderFarmUI\RF_SelectionTool.cpp	/^struct	NearestVertexToPt_t {$/;"	s	file:
NeighborHisto	.\XESCore\DEMAlgs.cpp	/^void	NeighborHisto(const DEMGeo& input, DEMGeo& output, int semi)$/;"	f
NeighborsWater	.\XESCore\Airports.cpp	/^bool NeighborsWater(Face_handle f)$/;"	f
NetAlgs_H	.\XESCore\NetAlgs.h	25;"	d
NetFeatureInfo	.\XESCore\NetTables.h	/^struct	NetFeatureInfo {$/;"	s
NetFeatureInfoTable	.\XESCore\NetTables.h	/^typedef hash_map<int, NetFeatureInfo>	NetFeatureInfoTable;$/;"	t
NetHelpers_H	.\XESCore\NetHelpers.h	25;"	d
NetRepInfo	.\XESCore\NetTables.h	/^struct	NetRepInfo {$/;"	s
NetRepInfoTable	.\XESCore\NetTables.h	/^typedef hash_map<int, NetRepInfo>				NetRepInfoTable;$/;"	t
Net_ChainInfoSet	.\XESCore\NetPlacement.h	/^typedef set<Net_ChainInfo_t *>		Net_ChainInfoSet;$/;"	t
Net_ChainInfo_t	.\XESCore\NetPlacement.h	/^struct	Net_ChainInfo_t {$/;"	s
Net_JunctionInfoSet	.\XESCore\NetPlacement.h	/^typedef set<Net_JunctionInfo_t *>	Net_JunctionInfoSet;$/;"	t
Net_JunctionInfo_t	.\XESCore\NetPlacement.h	/^		Net_JunctionInfo_t() {$/;"	f	struct:Net_JunctionInfo_t
Net_JunctionInfo_t	.\XESCore\NetPlacement.h	/^struct	Net_JunctionInfo_t {$/;"	s
NetworkNode_t	.\XPTools\Env2DSF.cpp	/^struct	NetworkNode_t {$/;"	s	file:
NetworkSeg_t	.\XPTools\Env2DSF.cpp	/^struct	NetworkSeg_t {$/;"	s	file:
NewID	.\WEDCore\WED_Archive.cpp	/^int	WED_Archive::NewID(void)$/;"	f	class:WED_Archive
NewTile	.\WEDCore\WED_Package.cpp	/^WED_Document *	WED_Package::NewTile(int lon, int lat)$/;"	f	class:WED_Package
NewToken	.\XESCore\EnumSystem.cpp	/^int				NewToken(const char * inString)$/;"	f
Next	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleEnumFORMATETC::Next			(ULONG count, FORMATETC * formats, ULONG * out_count)$/;"	f	class:GUI_SimpleEnumFORMATETC
Next	.\VPF\VPFTable.cpp	/^void	VPFTableIterator::Next(void)$/;"	f	class:VPFTableIterator
Next	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::Next()$/;"	f	class:WED_GatewayImportDialog
NextNonEmptyTime	.\Utils\PolyRasterUtils.h	/^Number		PolyRasterizer<Number>::NextNonEmptyTime(Number y)$/;"	f	class:PolyRasterizer
NextOneRoad	.\XESCore\Hydro.cpp	/^Halfedge_handle NextOneRoad(Halfedge_handle r, bool allow_bridge)$/;"	f
NextPass	.\WEDImportExport\WED_DSFImport.cpp	/^	static bool NextPass(int finished_pass_index, void * inRef)$/;"	f	class:DSF_Importer
NextPass_f	.\DSF\DSFLib.h	/^	bool (* NextPass_f)(int finished_pass_index, void * inRef);$/;"	m	struct:DSFCallbacks_t
NextPass_f	.\DSF\dsflib_013005\DSFLib.h	/^	bool (* NextPass_f)(int finished_pass_index, void * inRef);$/;"	m	struct:DSFCallbacks_t
NextPowerOf2	.\Utils\TexUtils.cpp	/^inline int NextPowerOf2(int a)$/;"	f
NextVersionsDownload	.\WEDImportExport\WED_GatewayImport.cpp	/^bool WED_GatewayImportDialog::NextVersionsDownload()$/;"	f	class:WED_GatewayImportDialog
Node	.\Utils\QuadTree.h	/^	struct	Node {$/;"	s	class:QuadTree
NodeInfoMap	.\Tiger\TIGERTypes.h	/^typedef	hash_map<RawCoordKey, NodeInfo_t>	NodeInfoMap;$/;"	t
NodeInfo_t	.\Tiger\TIGERTypes.h	/^struct	NodeInfo_t : public WTPM_Node {$/;"	s
NodeVector	.\XPTools\AddObjects.cpp	/^typedef vector<SceneryNode*>	NodeVector;$/;"	t	file:
Nodes	.\lib_json\include\json\reader.h	/^      typedef std::stack<Value *> Nodes;$/;"	t	class:Json::Reader
NormalVector	.\ObjEdit\OE_Utils.h	/^typedef	vector<Vector3>			NormalVector;$/;"	t
NorthHeading2VectorDegs	.\Utils\GISUtils.cpp	/^void NorthHeading2VectorDegs(const Point2& ref, const Point2& p, double heading, Vector2& dir)$/;"	f
NorthHeading2VectorMeters	.\Utils\GISUtils.cpp	/^void NorthHeading2VectorMeters(const Point2& ref, const Point2& p, double heading, Vector2& dir)$/;"	f
Notify	.\ObjEdit\OE_Notify.cpp	/^void	OE_Notifiable::Notify(int catagory, int message, void * param)$/;"	f	class:OE_Notifiable
Notify	.\RenderFarmUI\RF_Notify.cpp	/^void	RF_Notifiable::Notify(int catagory, int message, void * param)$/;"	f	class:RF_Notifiable
NthButtonPressed	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void	RF_BezierTestTool::NthButtonPressed(int n)$/;"	f	class:RF_BezierTestTool
NthButtonPressed	.\RenderFarmUI\RF_CropTool.cpp	/^void	RF_CropTool::NthButtonPressed(int n)$/;"	f	class:RF_CropTool
NthButtonPressed	.\RenderFarmUI\RF_ImageTool.cpp	/^void	RF_ImageTool::NthButtonPressed(int n)$/;"	f	class:RF_ImageTool
NthButtonPressed	.\RenderFarmUI\RF_MeshTester.cpp	/^void	RF_MeshTester::NthButtonPressed(int) { }$/;"	f	class:RF_MeshTester
NthButtonPressed	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::NthButtonPressed(int n)$/;"	f	class:RF_SelectionTool
NthButtonPressed	.\RenderFarmUI\RF_TerraTool.cpp	/^void	RF_TerraTool::NthButtonPressed(int n)$/;"	f	class:RF_TerraTool
NthButtonPressed	.\RenderFarmUI\RF_TopoTester.cpp	/^void	RF_TopoTester::NthButtonPressed(int) { }$/;"	f	class:RF_TopoTester
NthButtonPressed	.\RenderFarmUI\RF_TriTestTool.cpp	/^void	RF_TriTestTool::NthButtonPressed(int n)$/;"	f	class:RF_TriTestTool
NthItemHasClipType	.\GUI\GUI_Clipboard.cpp	/^bool	GUI_DragData_Adapter::NthItemHasClipType(int n, GUI_ClipType ct)$/;"	f	class:GUI_DragData_Adapter
NthItemHasClipType	.\GUI\GUI_Clipboard.cpp	/^bool	GUI_DragMgr_Adapter::NthItemHasClipType(int n, GUI_ClipType ct)$/;"	f	class:GUI_DragMgr_Adapter
NthItemHasClipType	.\GUI\GUI_Clipboard.cpp	/^bool	GUI_OLE_Adapter::NthItemHasClipType(int n, GUI_ClipType ct)$/;"	f	class:GUI_OLE_Adapter
NukeAmpersand	.\GUI\GUI_Application.cpp	/^static void	NukeAmpersand(string& ioString)$/;"	f	file:
NukeDupePts	.\VPF\VPFImport.cpp	/^static void NukeDupePts(vector<Point2>& pts)$/;"	f	file:
NukeFile	.\Installer\XFileTwiddle.unix.cpp	/^int		NukeFile(const char * inPath)$/;"	f
NukeFile	.\Installer\XFileTwiddle.win.cpp	/^int		NukeFile(const char * inPath)$/;"	f
NukeFile	.\Utils\XFileTwiddle.mac.cpp	/^int		NukeFile(const char * inPath)$/;"	f
NukeFile	.\Utils\XFileTwiddle.unix.cpp	/^int		NukeFile(const char * inPath)$/;"	f
NukeFile	.\Utils\XFileTwiddle.win.cpp	/^int		NukeFile(const char * inPath)$/;"	f
NukeStraightShapePoints	.\XESCore\NetPlacement.cpp	/^int	NukeStraightShapePoints(Net_ChainInfoSet& ioChains)$/;"	f
NumNotZero	.\ObjEdit\OE_CubeDeformer.cpp	/^inline	int	NumNotZero(double	x, double y, double z)$/;"	f
OBJ8_EXPORT_H	.\AC3DPlugins\obj8_export.h	25;"	d
OBJ8_IMPORT_H	.\AC3DPlugins\obj8_import.h	25;"	d
OBJCONVERT_EXTRAVER	.\XPTools\version.h	17;"	d
OBJCONVERT_H	.\Obj\ObjConvert.h	24;"	d
OBJCONVERT_VER	.\XPTools\version.h	16;"	d
OBJDRAW_H	.\Obj\ObjDraw.h	24;"	d
OBJPOINTPOOL_H	.\Obj\ObjPointPool.h	24;"	d
OBJTABLES_H	.\XESCore\ObjTables.h	24;"	d
OBJUTILSGL_H	.\Utils\ObjUtilsGL.h	24;"	d
OBJUTILS_H	.\Utils\ObjUtils.h	24;"	d
OBJ_ANIM_H	.\AC3DPlugins\obj_anim.h	25;"	d
OBJ_EDITOR	.\AC3DPlugins\obj_editor.h	25;"	d
OBJ_FOR_ALL_ATTRS	.\AC3DPlugins\obj8_import.cpp	75;"	d	file:
OBJ_HISTO	.\DSF\DSFLib_Print.cpp	36;"	d	file:
OBJ_MODEL_H	.\AC3DPlugins\obj_model.h	25;"	d
OBJ_RADIUS_H	.\AC3DPlugins\obj_radius.h	25;"	d
OBJ_TOOLS_H	.\AC3DPlugins\obj_tools.h	25;"	d
OBJ_UPDATE_H	.\AC3DPlugins\obj_update.h	25;"	d
OBJ_can_animate_tcl	.\AC3DPlugins\obj_editor.cpp	/^static void OBJ_can_animate_tcl(float n)$/;"	f	file:
OBJ_change_f	.\AC3DPlugins\obj_model.h	/^typedef void (* OBJ_change_f)(ACObject * obj);$/;"	t
OBJ_editor_init	.\AC3DPlugins\obj_editor.cpp	/^void	OBJ_editor_init(void)$/;"	f
OBJ_editor_sync	.\AC3DPlugins\obj_editor.cpp	/^static void OBJ_editor_sync(ACObject * changed)$/;"	f	file:
OBJ_editor_sync_tcl	.\AC3DPlugins\obj_editor.cpp	/^static void OBJ_editor_sync_tcl(void)$/;"	f	file:
OBJ_get_anim_nth_angle	.\AC3DPlugins\obj_model.cpp	/^float		OBJ_get_anim_nth_angle(ACObject * obj, int n)$/;"	f
OBJ_get_anim_nth_value	.\AC3DPlugins\obj_model.cpp	/^float		OBJ_get_anim_nth_value(ACObject * obj, int n)$/;"	f
OBJ_get_name	.\AC3DPlugins\obj_model.cpp	/^const char *	OBJ_get_name(ACObject * obj, char * buf)$/;"	f
OBJ_get_panel_bottom	.\AC3DPlugins\obj_model.cpp	/^int			OBJ_get_panel_bottom(ACObject * obj, int r)$/;"	f
OBJ_get_panel_left	.\AC3DPlugins\obj_model.cpp	/^int			OBJ_get_panel_left(ACObject * obj, int r)$/;"	f
OBJ_get_panel_right	.\AC3DPlugins\obj_model.cpp	/^int			OBJ_get_panel_right(ACObject * obj, int r)$/;"	f
OBJ_get_panel_top	.\AC3DPlugins\obj_model.cpp	/^int			OBJ_get_panel_top(ACObject * obj, int r)$/;"	f
OBJ_get_prop_tcl	.\AC3DPlugins\obj_model.cpp	/^static void	OBJ_get_prop_tcl(const char * s)$/;"	f	file:
OBJ_get_property_flt	.\AC3DPlugins\obj_model.cpp	/^static float OBJ_get_property_flt(ACObject * obj, const char * tag)$/;"	f	file:
OBJ_get_property_int	.\AC3DPlugins\obj_model.cpp	/^static int OBJ_get_property_int(ACObject * obj, const char * tag)$/;"	f	file:
OBJ_get_property_str	.\AC3DPlugins\obj_model.cpp	/^static const char * OBJ_get_property_str(ACObject * obj, const char * tag, char * buf)$/;"	f	file:
OBJ_get_sel_count_tcl	.\AC3DPlugins\obj_editor.cpp	/^static void OBJ_get_sel_count_tcl(void)$/;"	f	file:
OBJ_get_sel_type	.\AC3DPlugins\obj_editor.cpp	/^static int OBJ_get_sel_type(int n, ACObject ** out_obj)$/;"	f	file:
OBJ_get_sel_type_tcl	.\AC3DPlugins\obj_editor.cpp	/^static void OBJ_get_sel_type_tcl(float n)$/;"	f	file:
OBJ_get_single_type	.\AC3DPlugins\obj_editor.cpp	/^static int OBJ_get_single_type(ACObject * who)$/;"	f	file:
OBJ_register_change_cb	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_register_change_cb(OBJ_change_f func)$/;"	f
OBJ_register_datamodel_tcl_cmds	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_register_datamodel_tcl_cmds(void)$/;"	f
OBJ_set_anim_nth_angle	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_anim_nth_angle(ACObject * obj, int n, float a)$/;"	f
OBJ_set_anim_nth_value	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_anim_nth_value(ACObject * obj, int n, float v)$/;"	f
OBJ_set_name	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_name(ACObject * obj, const char * name)$/;"	f
OBJ_set_panel_bottom	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_panel_bottom(ACObject * obj, int r, int v)$/;"	f
OBJ_set_panel_left	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_panel_left(ACObject * obj, int r, int v)$/;"	f
OBJ_set_panel_right	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_panel_right(ACObject * obj, int r, int v)$/;"	f
OBJ_set_panel_top	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_set_panel_top(ACObject * obj, int r, int v)$/;"	f
OBJ_set_prop_tcl	.\AC3DPlugins\obj_model.cpp	/^static void OBJ_set_prop_tcl(int argc, const char * argv[])$/;"	f	file:
OBJ_set_property_flt	.\AC3DPlugins\obj_model.cpp	/^static void OBJ_set_property_flt(ACObject * ob, const char * tag, float v)$/;"	f	file:
OBJ_set_property_int	.\AC3DPlugins\obj_model.cpp	/^static void OBJ_set_property_int(ACObject * ob, const char * tag, int v)$/;"	f	file:
OBJ_set_property_str	.\AC3DPlugins\obj_model.cpp	/^static void OBJ_set_property_str(ACObject * obj, const char * in_key, const char * new_value)$/;"	f	file:
OBJ_unregister_change_cb	.\AC3DPlugins\obj_model.cpp	/^void		OBJ_unregister_change_cb(OBJ_change_f func)$/;"	f
OECommand	.\ObjEdit\OE_DataModel.h	/^			OECommand(const char * inCommand) : mCommited(false) { OE_BeginCommand(inCommand); }$/;"	f	struct:OECommand
OECommand	.\ObjEdit\OE_DataModel.h	/^struct	OECommand {$/;"	s
OE_AbortCommand	.\ObjEdit\OE_DataModel.cpp	/^void	OE_AbortCommand(void)$/;"	f
OE_AbstactTexProjector	.\ObjEdit\OE_TexProjector.h	/^class	OE_AbstactTexProjector {$/;"	c
OE_BeginCommand	.\ObjEdit\OE_DataModel.cpp	/^void	OE_BeginCommand(const char * inCommandName)$/;"	f
OE_CUBEDEFORMER_H	.\ObjEdit\OE_CubeDeformer.h	24;"	d
OE_ClearST	.\ObjEdit\OE_Utils.cpp	/^void	OE_ClearST($/;"	f
OE_CompleteCommand	.\ObjEdit\OE_DataModel.cpp	/^void	OE_CompleteCommand(void)$/;"	f
OE_ConstrainDrag	.\ObjEdit\OE_Utils.cpp	/^void	OE_ConstrainDrag($/;"	f
OE_CreateTexEd	.\ObjEdit\(old)\OE_TexEd.cpp	/^XPWidgetID	OE_CreateTexEd($/;"	f
OE_CreateTexInfo	.\ObjEdit\(old)\OE_TexInfo.cpp	/^XPWidgetID	OE_CreateTexInfo(int x1, int y1, int x2, int y2)$/;"	f
OE_CubeDeformer	.\ObjEdit\OE_CubeDeformer.cpp	/^OE_CubeDeformer::OE_CubeDeformer()$/;"	f	class:OE_CubeDeformer
OE_CubeDeformer	.\ObjEdit\OE_CubeDeformer.h	/^class	OE_CubeDeformer {$/;"	c
OE_CylinderProjector	.\ObjEdit\OE_TexProjector.h	/^class	OE_CylinderProjector : public OE_AbstactTexProjector {$/;"	c
OE_DATAMODEL_H	.\ObjEdit\OE_DataModel.h	24;"	d
OE_DRAWOBJ_H	.\ObjEdit\OE_DrawObj.h	24;"	d
OE_DeriveNormals	.\ObjEdit\OE_Utils.cpp	/^void	OE_DeriveNormals($/;"	f
OE_DerivePolygons	.\ObjEdit\OE_Utils.cpp	/^void	OE_DerivePolygons($/;"	f
OE_DeriveVisible	.\ObjEdit\OE_Utils.cpp	/^void	OE_DeriveVisible($/;"	f
OE_DirectEdPane	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_DirectEdPane::OE_DirectEdPane($/;"	f	class:OE_DirectEdPane
OE_DirectEdPane	.\ObjEdit\OE_TexEdWindow.h	/^class	OE_DirectEdPane: public OE_TexEdPane {$/;"	c
OE_DrawObj	.\ObjEdit\OE_DrawObj.cpp	/^void	OE_DrawObj($/;"	f
OE_FILECMDS_H	.\ObjEdit\OE_FileCmds.h	24;"	d
OE_FlipST	.\ObjEdit\OE_Utils.cpp	/^void	OE_FlipST($/;"	f
OE_GLOBALS_H	.\ObjEdit\OE_Globals.h	24;"	d
OE_HasRedo	.\ObjEdit\OE_DataModel.cpp	/^bool	OE_HasRedo(char * outCmdName)$/;"	f
OE_HasUndo	.\ObjEdit\OE_DataModel.cpp	/^bool	OE_HasUndo(char * outCmdName)$/;"	f
OE_IsCleared	.\ObjEdit\OE_Utils.cpp	/^bool	OE_IsCleared($/;"	f
OE_LabelVertices	.\ObjEdit\OE_DrawObj.cpp	/^void OE_LabelVertices(const XObj& inObj, const set<int>& sel, int cur)$/;"	f
OE_MSGS_H	.\ObjEdit\OE_Msgs.h	24;"	d
OE_MaxSelected	.\ObjEdit\OE_Utils.cpp	/^int		OE_MaxSelected(void)$/;"	f
OE_MergeObject	.\ObjEdit\OE_Utils.cpp	/^void	OE_MergeObject($/;"	f
OE_NOTIFY_H	.\ObjEdit\OE_Notify.h	24;"	d
OE_NextPrevUntextured	.\ObjEdit\OE_Utils.cpp	/^int		OE_NextPrevUntextured(int direction)$/;"	f
OE_Notifiable	.\ObjEdit\OE_Notify.cpp	/^OE_Notifiable::OE_Notifiable()$/;"	f	class:OE_Notifiable
OE_Notifiable	.\ObjEdit\OE_Notify.h	/^class	OE_Notifiable {$/;"	c
OE_Notify_f	.\ObjEdit\OE_Notify.h	/^typedef	void (* OE_Notify_f)(int catagory, int message, void * param);$/;"	t
OE_PANE_H	.\ObjEdit\OE_Pane.h	24;"	d
OE_PATCHLIST_H	.\ObjEdit\OE_PatchList.h	24;"	d
OE_PREVIEW_H	.\ObjEdit\OE_Preview.h	24;"	d
OE_PROJECTIONMGR_H	.\ObjEdit\OE_ProjectionMgr.h	24;"	d
OE_Pane	.\ObjEdit\OE_Pane.cpp	/^OE_Pane::OE_Pane($/;"	f	class:OE_Pane
OE_Pane	.\ObjEdit\OE_Pane.h	/^class	OE_Pane {$/;"	c
OE_PatchEdPane	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_PatchEdPane::OE_PatchEdPane($/;"	f	class:OE_PatchEdPane
OE_PatchEdPane	.\ObjEdit\OE_TexEdWindow.h	/^class	OE_PatchEdPane : public OE_TexEdPane {$/;"	c
OE_PatchList	.\ObjEdit\OE_PatchList.cpp	/^OE_PatchList::OE_PatchList($/;"	f	class:OE_PatchList
OE_PatchList	.\ObjEdit\OE_PatchList.h	/^class	OE_PatchList : public OE_Pane {$/;"	c
OE_PatchTable	.\ObjEdit\OE_PatchList.cpp	/^OE_PatchTable::OE_PatchTable($/;"	f	class:OE_PatchTable
OE_PatchTable	.\ObjEdit\OE_PatchList.h	/^class	OE_PatchTable : public OE_TablePane, OE_Notifiable {$/;"	c
OE_PlanarProjector	.\ObjEdit\OE_TexProjector.h	/^class	OE_PlanarProjector : public OE_AbstactTexProjector {$/;"	c
OE_Preview	.\ObjEdit\OE_Preview.cpp	/^OE_Preview::OE_Preview($/;"	f	class:OE_Preview
OE_Preview	.\ObjEdit\OE_Preview.h	/^class	OE_Preview : public OE_Pane {$/;"	c
OE_ProjectionMgr	.\ObjEdit\OE_ProjectionMgr.cpp	/^OE_ProjectionMgr::OE_ProjectionMgr()$/;"	f	class:OE_ProjectionMgr
OE_ProjectionMgr	.\ObjEdit\OE_ProjectionMgr.h	/^class	OE_ProjectionMgr : public OE_Notifiable {$/;"	c
OE_PurgeUndo	.\ObjEdit\OE_DataModel.cpp	/^void	OE_PurgeUndo(void)$/;"	f
OE_Redo	.\ObjEdit\OE_DataModel.cpp	/^void	OE_Redo(void)$/;"	f
OE_RegisterNotifyFunc	.\ObjEdit\OE_Notify.cpp	/^void	OE_RegisterNotifyFunc(OE_Notify_f inFunc)$/;"	f
OE_ResetST	.\ObjEdit\OE_Utils.cpp	/^void	OE_ResetST($/;"	f
OE_ResyncScrollbars	.\ObjEdit\(old)\OE_TexList.cpp	/^static	void	OE_ResyncScrollbars(XPWidgetID inList)$/;"	f	file:
OE_RotateST	.\ObjEdit\OE_Utils.cpp	/^void	OE_RotateST($/;"	f
OE_SCROLLER_H	.\ObjEdit\OE_Scroller.h	24;"	d
OE_SELCMDS_H	.\ObjEdit\OE_SelCmds.h	24;"	d
OE_Scroller	.\ObjEdit\OE_Scroller.cpp	/^OE_Scroller::OE_Scroller($/;"	f	class:OE_Scroller
OE_Scroller	.\ObjEdit\OE_Scroller.h	/^class	OE_Scroller : public OE_Pane {$/;"	c
OE_SelectByPixels	.\ObjEdit\OE_Utils.cpp	/^void	OE_SelectByPixels($/;"	f
OE_SelectByPoint	.\ObjEdit\OE_Utils.cpp	/^int		OE_SelectByPoint($/;"	f
OE_SetupUndoCmds	.\ObjEdit\OE_DataModel.cpp	/^void	OE_SetupUndoCmds()$/;"	f
OE_SphereProjector	.\ObjEdit\OE_TexProjector.h	/^class	OE_SphereProjector : public OE_AbstactTexProjector {$/;"	c
OE_SplitObj	.\ObjEdit\OE_Utils.cpp	/^void	OE_SplitObj($/;"	f
OE_TABLEPANE_H	.\ObjEdit\OE_TablePane.h	24;"	d
OE_TEXCMDS_H	.\ObjEdit\OE_TexCmds.h	24;"	d
OE_TEXEDWINDOW_H	.\ObjEdit\OE_TexEdWindow.h	24;"	d
OE_TEXED_H	.\ObjEdit\(old)\OE_TexEd.h	24;"	d
OE_TEXINFO_H	.\ObjEdit\(old)\OE_TexInfo.h	24;"	d
OE_TEXLIST_H	.\ObjEdit\(old)\OE_TexList.h	24;"	d
OE_TEXMGR_H	.\ObjEdit\OE_TexMgr.h	24;"	d
OE_TEXPROJECTOR_H	.\ObjEdit\OE_TexProjector.h	24;"	d
OE_TablePane	.\ObjEdit\OE_TablePane.cpp	/^OE_TablePane::OE_TablePane($/;"	f	class:OE_TablePane
OE_TablePane	.\ObjEdit\OE_TablePane.h	/^class	OE_TablePane : public OE_Pane {$/;"	c
OE_TexEdFunc	.\ObjEdit\(old)\OE_TexEd.cpp	/^int		OE_TexEdFunc(		   XPWidgetMessage      inMessage,$/;"	f
OE_TexEdNotify	.\ObjEdit\(old)\OE_TexEd.cpp	/^void	OE_TexEdNotify(int cat, int msg, void * param, void * ref)$/;"	f
OE_TexEdPane	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_TexEdPane::OE_TexEdPane($/;"	f	class:OE_TexEdPane
OE_TexEdPane	.\ObjEdit\OE_TexEdWindow.h	/^class	OE_TexEdPane : public OE_Pane, OE_Notifiable {$/;"	c
OE_TexEdWindow	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_TexEdWindow::OE_TexEdWindow($/;"	f	class:OE_TexEdWindow
OE_TexEdWindow	.\ObjEdit\OE_TexEdWindow.h	/^class	OE_TexEdWindow : public OE_Pane {$/;"	c
OE_TexInfoFunc	.\ObjEdit\(old)\OE_TexInfo.cpp	/^int		OE_TexInfoFunc(		   XPWidgetMessage      inMessage,$/;"	f
OE_TexInfoNotify	.\ObjEdit\(old)\OE_TexInfo.cpp	/^void	OE_TexInfoNotify(int cat, int msg, void * param, void * ref)$/;"	f
OE_TexListFunc	.\ObjEdit\(old)\OE_TexList.cpp	/^int	OE_TexListFunc(		   XPWidgetMessage      inMessage,$/;"	f
OE_TexListNotify	.\ObjEdit\(old)\OE_TexList.cpp	/^void	OE_TexListNotify(int cat, int msg, void * param, void * ref)$/;"	f
OE_Texture_t	.\ObjEdit\OE_Globals.h	/^struct	OE_Texture_t {$/;"	s
OE_UTILS_H	.\ObjEdit\OE_Utils.h	24;"	d
OE_Undo	.\ObjEdit\OE_DataModel.cpp	/^void	OE_Undo(void)$/;"	f
OE_UnregisterNotifyFunc	.\ObjEdit\OE_Notify.cpp	/^void	OE_UnregisterNotifyFunc(OE_Notify_f inFunc)$/;"	f
OE_ZOOMER3D_H	.\ObjEdit\OE_Zoomer3d.h	24;"	d
OE_Zoomer3d	.\ObjEdit\OE_Zoomer3d.cpp	/^OE_Zoomer3d::OE_Zoomer3d()$/;"	f	class:OE_Zoomer3d
OE_Zoomer3d	.\ObjEdit\OE_Zoomer3d.h	/^class	OE_Zoomer3d {$/;"	c
OGL2Client_X	.\GUI\GUI_Window.cpp	/^inline int GUI_Window::OGL2Client_X(int x, void* w) { return x; }$/;"	f	class:GUI_Window
OGL2Client_X	.\GUI\GUI_Window.cpp	/^inline int OGL2Client_X(int x, HWND w) { return x; }$/;"	f
OGL2Client_X	.\GUI\GUI_Window.cpp	/^inline int OGL2Client_X(int x, void* w) { return x; }$/;"	f
OGL2Client_Y	.\GUI\GUI_Window.cpp	/^inline int GUI_Window::OGL2Client_Y(int y, void* w) { return (this->size().height() - y ); }$/;"	f	class:GUI_Window
OGL2Client_Y	.\GUI\GUI_Window.cpp	/^inline int OGL2Client_Y(int y, HWND w) { RECT c; GetClientRect(w,&c); return c.bottom-y; }$/;"	f
OGL2Client_Y	.\GUI\GUI_Window.cpp	/^inline int OGL2Client_Y(int y, void* w) { int h = get_ns_window_height(w); return h-y; }$/;"	f
OGLE	.\OGLE\ogle.cpp	/^OGLE::OGLE()$/;"	f	class:OGLE
OGLE	.\OGLE\ogle.h	/^class	OGLE {$/;"	c
OGLE_Callbacks	.\OGLE\ogle.h	/^struct OGLE_Callbacks {$/;"	s
OGLE_CharPosToLine	.\OGLE\ogle.cpp	/^static int OGLE_CharPosToLine(OGLE_Handle h, int charpos)$/;"	f	file:
OGLE_CharPosVerticalAdjust	.\OGLE\ogle.cpp	/^static int OGLE_CharPosVerticalAdjust(OGLE_Handle h, int charpos, int delta, float& old_gap)$/;"	f	file:
OGLE_Click	.\OGLE\ogle.cpp	/^void			OGLE_Click($/;"	f
OGLE_CoordToCharPos	.\OGLE\ogle.cpp	/^static int OGLE_CoordToCharPos(OGLE_Handle h, float x, float y)$/;"	f	file:
OGLE_Create	.\OGLE\ogle.cpp	/^OGLE_Handle		OGLE_Create($/;"	f
OGLE_Destroy	.\OGLE\ogle.cpp	/^void			OGLE_Destroy($/;"	f
OGLE_Drag	.\OGLE\ogle.cpp	/^void			OGLE_Drag($/;"	f
OGLE_Draw	.\OGLE\ogle.cpp	/^void			OGLE_Draw($/;"	f
OGLE_GetRef	.\OGLE\ogle.cpp	/^void *			OGLE_GetRef($/;"	f
OGLE_GetSelection	.\OGLE\ogle.cpp	/^void			OGLE_GetSelection($/;"	f
OGLE_H	.\OGLE\ogle.h	25;"	d
OGLE_Handle	.\OGLE\ogle.h	/^typedef OGLE_Rec *		OGLE_Handle;$/;"	t
OGLE_Key	.\OGLE\ogle.cpp	/^void			OGLE_Key($/;"	f
OGLE_Key_MBCS	.\OGLE\ogle.cpp	/^void			OGLE_Key_MBCS($/;"	f
OGLE_LineEnd	.\OGLE\ogle.cpp	/^inline int			OGLE_LineEnd(OGLE_Handle h, int l, int total)$/;"	f
OGLE_LineLengthInternal	.\OGLE\ogle.cpp	/^static int			OGLE_LineLengthInternal($/;"	f	file:
OGLE_LineStart	.\OGLE\ogle.cpp	/^inline int			OGLE_LineStart(OGLE_Handle h, int l, int total)$/;"	f
OGLE_NormalizeSelectionInternal	.\OGLE\ogle.cpp	/^static void OGLE_NormalizeSelectionInternal(OGLE_Handle handle)$/;"	f	file:
OGLE_Rec	.\OGLE\ogle.cpp	/^struct OGLE_Rec {$/;"	s	file:
OGLE_Repaginate	.\OGLE\ogle.cpp	/^void			OGLE_Repaginate($/;"	f
OGLE_RepaginateInternal	.\OGLE\ogle.cpp	/^static void			OGLE_RepaginateInternal($/;"	f	file:
OGLE_ReplaceText	.\OGLE\ogle.cpp	/^void			OGLE_ReplaceText($/;"	f
OGLE_RevealSelection	.\OGLE\ogle.cpp	/^void			OGLE_RevealSelection($/;"	f
OGLE_SetSelection	.\OGLE\ogle.cpp	/^void			OGLE_SetSelection($/;"	f
OGL_AI_88	.\XPTools\DDSTool.cpp	/^        OGL_AI_88,$/;"	e	enum:__anon140	file:
OGL_ERROR	.\UI\FontMgr.cpp	56;"	d	file:
OGL_ERROR	.\UI\FontMgr.cpp	58;"	d	file:
OGL_I_8	.\XPTools\DDSTool.cpp	/^        OGL_I_8,$/;"	e	enum:__anon140	file:
OGL_PVRTC2	.\XPTools\DDSTool.cpp	/^        OGL_PVRTC2,$/;"	e	enum:__anon140	file:
OGL_PVRTC2_2	.\XPTools\DDSTool.cpp	/^        OGL_PVRTC2_2,$/;"	e	enum:__anon140	file:
OGL_PVRTC2_4	.\XPTools\DDSTool.cpp	/^        OGL_PVRTC2_4,$/;"	e	enum:__anon140	file:
OGL_PVRTC4	.\XPTools\DDSTool.cpp	/^        OGL_PVRTC4,$/;"	e	enum:__anon140	file:
OGL_RGBA_4444	.\XPTools\DDSTool.cpp	/^		OGL_RGBA_4444= 0x10,$/;"	e	enum:__anon140	file:
OGL_RGBA_5551	.\XPTools\DDSTool.cpp	/^        OGL_RGBA_5551,$/;"	e	enum:__anon140	file:
OGL_RGBA_8888	.\XPTools\DDSTool.cpp	/^        OGL_RGBA_8888,$/;"	e	enum:__anon140	file:
OGL_RGB_555	.\XPTools\DDSTool.cpp	/^        OGL_RGB_555,$/;"	e	enum:__anon140	file:
OGL_RGB_565	.\XPTools\DDSTool.cpp	/^        OGL_RGB_565,$/;"	e	enum:__anon140	file:
OGL_RGB_888	.\XPTools\DDSTool.cpp	/^        OGL_RGB_888,$/;"	e	enum:__anon140	file:
OGL_char_info	.\GUI\GUI_Fonts.cpp	/^struct	OGL_char_info {$/;"	s	file:
OGL_char_map	.\GUI\GUI_Fonts.cpp	/^typedef	hash_map<UTF32, OGL_char_info>	OGL_char_map;$/;"	t	file:
OGL_push_quad	.\XESCore\AptIO.cpp	/^static void OGL_push_quad(AptInfo_t *		io_airport, float r, float g, float b, const POINT2 p[4])$/;"	f	file:
OKAY_WITH_BEZ_BORDERS	.\XESCore\Airports.cpp	49;"	d	file:
OLD_SERGIO_RULES	.\XESCore\DEMTables.cpp	34;"	d	file:
ONLY_OPTIMIZE_RAMPS	.\XESCore\DSFBuilder.cpp	90;"	d	file:
ON_BOUNDARY	.\Utils\CompGeomDefs2.h	/^	ON_BOUNDARY = 0,$/;"	e	enum:__anon89
ON_BOUNDED_SIDE	.\Utils\CompGeomDefs2.h	/^	ON_BOUNDED_SIDE = 1$/;"	e	enum:__anon89
ON_UNBOUNDED_SIDE	.\Utils\CompGeomDefs2.h	/^	ON_UNBOUNDED_SIDE = -1,$/;"	e	enum:__anon89
OP_GUI2LIN	.\GUI\GUI_Clipboard.h	/^inline  Qt::DropActions OP_GUI2LIN(GUI_DragOperation fx)$/;"	f
OP_GUI2Mac	.\GUI\GUI_Clipboard.h	/^inline int	OP_GUI2Mac(GUI_DragOperation fx)$/;"	f
OP_GUI2Win	.\GUI\GUI_Clipboard.h	/^inline DWORD	OP_GUI2Win(GUI_DragOperation fx)$/;"	f
OP_LIN2GUI	.\GUI\GUI_Clipboard.h	/^inline GUI_DragOperation	OP_LIN2GUI(Qt::DropActions fx)$/;"	f
OP_Mac2GUI	.\GUI\GUI_Clipboard.h	/^inline GUI_DragOperation	OP_Mac2GUI(int fx)$/;"	f
OP_Win2GUI	.\GUI\GUI_Clipboard.h	/^inline GUI_DragOperation	OP_Win2GUI(DWORD fx)$/;"	f
ORTHO_FAR_LOD	.\XESCore\DSFBuilder.cpp	76;"	d	file:
ORTHO_NEAR_LOD	.\XESCore\DSFBuilder.cpp	75;"	d	file:
OUR_FONT	.\WEDMap\WED_ToolInfoAdapter.cpp	33;"	d	file:
OVERLAP_MIN	.\XESTools\GISTool_ProcessingCmds.cpp	147;"	d	file:
O_ACCUM_GLYPHS	.\WEDCore\WED_Sign_Parser.cpp	/^		O_ACCUM_GLYPHS,$/;"	e	enum:WED_Sign_Parser::FSM	file:
O_END	.\WEDCore\WED_Sign_Parser.cpp	/^		O_END,\/\/For when the string ends$/;"	e	enum:WED_Sign_Parser::FSM	file:
O_RDONLY	.\Utils\CarbonMemMap.h	33;"	d
Obj7ToObj8	.\Obj\ObjConvert.cpp	/^void	Obj7ToObj8(const XObj& obj7, XObj8& obj8)$/;"	f
Obj8ToObj7	.\Obj\ObjConvert.cpp	/^void	Obj8ToObj7(const XObj8& obj8, XObj& obj7)$/;"	f
Obj8_CalcNormals	.\Obj\ObjConvert.cpp	/^void	Obj8_CalcNormals(XObj8& obj8)$/;"	f
Obj8_ConsolidateIndexCommands	.\Obj\ObjConvert.cpp	/^void	Obj8_ConsolidateIndexCommands(XObj8& obj8)$/;"	f
Obj8_Optimize	.\Obj\ObjConvert.cpp	/^bool	Obj8_Optimize(XObj8& obj8)$/;"	f
ObjCUtils_h	.\UI\ObjCUtils.h	10;"	d
ObjDraw	.\Obj\ObjDraw.cpp	/^void	ObjDraw(const XObj& obj, float dist, ObjDrawFuncs10_t * funcs, void * ref)$/;"	f
ObjDraw8	.\Obj\ObjDraw.cpp	/^void	ObjDraw8(const XObj8& obj, float dist, ObjDrawFuncs10_t * funcs, void * ref)$/;"	f
ObjDrawFuncs10_t	.\Obj\ObjDraw.h	/^struct	ObjDrawFuncs10_t {$/;"	s
ObjInfo	.\WEDCore\WED_UndoLayer.h	/^	struct ObjInfo {$/;"	s	class:WED_UndoLayer
ObjInfoMap	.\WEDCore\WED_UndoLayer.h	/^	typedef hash_map<int, ObjInfo>		ObjInfoMap;$/;"	t	class:WED_UndoLayer
ObjPlacement_t	.\XPTools\ViewObj.cpp	/^	struct ObjPlacement_t {$/;"	s	class:XObjWin	file:
ObjPointPool	.\Obj\ObjPointPool.cpp	/^ObjPointPool::ObjPointPool() : mDepth(8)$/;"	f	class:ObjPointPool
ObjPointPool	.\Obj\ObjPointPool.h	/^class ObjPointPool {$/;"	c
ObjPrio	.\XESCore\DSFBuilder.cpp	/^struct	ObjPrio {$/;"	s	file:
ObjScheduleJump	.\XESCore\ObjTables.cpp	/^static int ObjScheduleJump(int height)$/;"	f	file:
ObjSpec_t	.\OneOffs\GenTerrain.c	/^}  ObjSpec_t;$/;"	t	typeref:struct:__anon60	file:
ObjViewInfo_t	.\XPTools\ViewObj.cpp	/^struct	ObjViewInfo_t {$/;"	s	file:
ObjView_GetAnimParam	.\XPTools\ViewObj.cpp	/^static float	ObjView_GetAnimParam(const char * string, float v1, float v2, void * ref)$/;"	f	file:
ObjView_SetDraped	.\XPTools\ViewObj.cpp	/^static void ObjView_SetDraped(void * ref)$/;"	f	file:
ObjView_SetNoDraped	.\XPTools\ViewObj.cpp	/^static void ObjView_SetNoDraped(void * ref)$/;"	f	file:
ObjView_SetupLine	.\XPTools\ViewObj.cpp	/^static void 	ObjView_SetupLine(void * ref)$/;"	f	file:
ObjView_SetupPanel	.\XPTools\ViewObj.cpp	/^static void	ObjView_SetupPanel(void * ref)$/;"	f	file:
ObjView_SetupPoly	.\XPTools\ViewObj.cpp	/^static void	ObjView_SetupPoly(void * ref)$/;"	f	file:
ObjView_TexCoord	.\XPTools\ViewObj.cpp	/^static void	ObjView_TexCoord(const float * st, void * ref)$/;"	f	file:
ObjView_TexCoordPointer	.\XPTools\ViewObj.cpp	/^static void	ObjView_TexCoordPointer(int size, unsigned long type, long stride, const void * pointer, void * ref)$/;"	f	file:
Obj_DrawStruct	.\WEDMap\WED_PreviewLayer.cpp	/^struct	Obj_DrawStruct {$/;"	s	file:
Obj_GetAnimParam	.\WEDMap\WED_PreviewLayer.cpp	/^float Obj_GetAnimParam(const char * string, float v1, float v2, void * ref)$/;"	f
Obj_SetDraped	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetDraped(void * ref)$/;"	f
Obj_SetNoDraped	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetNoDraped(void * ref)$/;"	f
Obj_SetupLight	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetupLight(void * ref)$/;"	f
Obj_SetupLine	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetupLine(void * ref)$/;"	f
Obj_SetupMovie	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetupMovie(void * ref)$/;"	f
Obj_SetupPanel	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetupPanel(void * ref)$/;"	f
Obj_SetupPoly	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_SetupPoly(void * ref)$/;"	f
Obj_TexCoord	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_TexCoord(const float * st, void * ref)$/;"	f
Obj_TexCoordPointer	.\WEDMap\WED_PreviewLayer.cpp	/^void Obj_TexCoordPointer(int size, unsigned long type, long stride, const void * pointer, void * ref)$/;"	f
Object	.\XESTools\MapBuckets.h	/^	typedef	Pmwx::Face_handle	Object;$/;"	t	class:MapFaceBucketTraits
Object	.\XESTools\MapBuckets.h	/^	typedef	Pmwx::Halfedge_handle	Object;$/;"	t	class:MapHalfedgeBucketTraits
Object	.\XESTools\MapBuckets.h	/^	typedef	Pmwx::Vertex_handle	Object;$/;"	t	class:MapVertexBucketTraits
ObjectChanged	.\WEDCore\WED_UndoLayer.cpp	/^void	WED_UndoLayer::ObjectChanged(WED_Persistent * inObject, int change_kind)$/;"	f	class:WED_UndoLayer
ObjectChanged	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void	WED_NWLinkAdapter::ObjectChanged(WED_Persistent * inObject, int chgkind)$/;"	f	class:WED_NWLinkAdapter
ObjectCreated	.\WEDCore\WED_UndoLayer.cpp	/^void 	WED_UndoLayer::ObjectCreated(WED_Persistent * inObject)$/;"	f	class:WED_UndoLayer
ObjectCreated	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void 	WED_NWLinkAdapter::ObjectCreated(WED_Persistent * inObject)$/;"	f	class:WED_NWLinkAdapter
ObjectDestroyed	.\WEDCore\WED_UndoLayer.cpp	/^void	WED_UndoLayer::ObjectDestroyed(WED_Persistent * inObject)$/;"	f	class:WED_UndoLayer
ObjectDestroyed	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void 	WED_NWLinkAdapter::ObjectDestroyed(WED_Persistent * inObject)$/;"	f	class:WED_NWLinkAdapter
ObjectFullyInRect	.\XESTools\MapBuckets.cpp	/^bool	MapFaceBucketTraits::ObjectFullyInRect(Object o, const Point2& p1, const Point2& p2)$/;"	f	class:MapFaceBucketTraits
ObjectFullyInRect	.\XESTools\MapBuckets.cpp	/^bool	MapHalfedgeBucketTraits::ObjectFullyInRect(Object o, const Point2& p1, const Point2& p2)$/;"	f	class:MapHalfedgeBucketTraits
ObjectFullyInRect	.\XESTools\MapBuckets.cpp	/^bool	MapVertexBucketTraits::ObjectFullyInRect(Object o, const Point2& p1, const Point2& p2)$/;"	f	class:MapVertexBucketTraits
ObjectInfo	.\Env\Persistence.h	/^struct ObjectInfo {$/;"	s
ObjectMap	.\Network\XMLObject.h	/^	typedef	std::vector<ObjectPair>				ObjectMap;$/;"	t	class:XMLObject
ObjectMap	.\WEDCore\WED_Archive.h	/^	typedef hash_map<int, WED_Persistent *>	ObjectMap;$/;"	t	class:WED_Archive
ObjectNode	.\XPTools\AddObjects.cpp	/^ObjectNode::ObjectNode($/;"	f	class:ObjectNode
ObjectNode	.\XPTools\AddObjects.cpp	/^class	ObjectNode : public SceneryNode {$/;"	c	file:
ObjectPair	.\Network\XMLObject.h	/^	typedef	std::pair<std::string, XMLObject *>	ObjectPair;$/;"	t	class:XMLObject
ObjectSpec	.\DSF\DSFLibWrite.cpp	/^	struct	ObjectSpec {$/;"	s	class:DSFFileWriterImp	file:
ObjectSpec	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	struct	ObjectSpec {$/;"	s	class:DSFFileWriterImp	file:
ObjectSpecVector	.\DSF\DSFLibWrite.cpp	/^	typedef vector<ObjectSpec>	ObjectSpecVector;$/;"	t	class:DSFFileWriterImp	file:
ObjectSpecVector	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef vector<ObjectSpec>	ObjectSpecVector;$/;"	t	class:DSFFileWriterImp	file:
ObjectTable	.\ObjEdit\OE_Globals.h	/^typedef	vector<XObj>				ObjectTable;		\/\/ Objects at various LODs$/;"	t
ObjectToDL	.\Utils\ObjUtilsGL.cpp	/^void	ObjectToDL(int inList, const XObj& inObj, int texNum, double inDist, bool build, PFNGLMULTITEXCOORD2FARBPROC multitexproc)$/;"	f
ObjectTouchesPoint	.\XESTools\MapBuckets.cpp	/^bool	MapFaceBucketTraits::ObjectTouchesPoint(Object o, const Point2& p)$/;"	f	class:MapFaceBucketTraits
ObjectTouchesPoint	.\XESTools\MapBuckets.cpp	/^bool	MapHalfedgeBucketTraits::ObjectTouchesPoint(Object o, const Point2& p)$/;"	f	class:MapHalfedgeBucketTraits
ObjectTouchesPoint	.\XESTools\MapBuckets.cpp	/^bool	MapVertexBucketTraits::ObjectTouchesPoint(Object o, const Point2& p)$/;"	f	class:MapVertexBucketTraits
ObjectTouchesRect	.\XESTools\MapBuckets.cpp	/^bool	MapFaceBucketTraits::ObjectTouchesRect(Object o, const Point2& p1, const Point2& p2)$/;"	f	class:MapFaceBucketTraits
ObjectTouchesRect	.\XESTools\MapBuckets.cpp	/^bool	MapHalfedgeBucketTraits::ObjectTouchesRect(Object o, const Point2& p1, const Point2& p2)$/;"	f	class:MapHalfedgeBucketTraits
ObjectTouchesRect	.\XESTools\MapBuckets.cpp	/^bool	MapVertexBucketTraits::ObjectTouchesRect(Object o, const Point2& p1, const Point2& p2)$/;"	f	class:MapVertexBucketTraits
ObjectValues	.\lib_json\include\json\value.h	/^      typedef CppTL::SmallMap<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
ObjectValues	.\lib_json\include\json\value.h	/^      typedef std::map<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
Obstacle	.\Env\EnvDefs.h	/^} Obstacle;$/;"	t	typeref:struct:__anon19
OffsetObject	.\Utils\ObjUtils.cpp	/^void OffsetObject(XObj& ioObj, double x, double y, double z)$/;"	f
OleStdGetDropEffect	.\GUI\GUI_Window.cpp	155;"	d	file:
OleStdGetDropEffect	.\UI\XWin32DND.cpp	254;"	d	file:
OnCollected	.\XESCore\MapAlgs.cpp	/^  virtual void OnCollected( Vertex_handle const& vertex ) const {}                $/;"	f	class:Visitor_base
OnFinished	.\XESCore\MapAlgs.cpp	/^  virtual void OnFinished() const {} $/;"	f	class:Visitor_base
OnNonRemovable	.\XESCore\MapAlgs.cpp	/^  virtual void OnNonRemovable( Vertex_handle const& vertex) const {}                $/;"	f	class:Visitor_base
OnRemoved	.\XESCore\MapAlgs.cpp	/^  virtual void OnRemoved( Vertex_handle const& p, Vertex_handle const& r) const {}        $/;"	f	class:Visitor_base
OnRemoving	.\XESCore\MapAlgs.cpp	/^	virtual void OnRemoving(Vertex_handle v1, Vertex_handle v2, Vertex_handle v3) const$/;"	f	struct:UpdatePmwx
OnRemoving	.\XESCore\MapAlgs.cpp	/^  virtual void OnRemoving( Vertex_handle const& p, Vertex_handle const& q, Vertex_handle const& r) const {}          $/;"	f	class:Visitor_base
OnSelected	.\XESCore\MapAlgs.cpp	/^	virtual void OnSelected( Vertex_handle const& v2, boost::optional<double> const& cost, unsigned initial_count, unsigned current_count) const$/;"	f	struct:UpdatePmwx
OnSelected	.\XESCore\MapAlgs.cpp	/^  virtual void OnSelected( Vertex_handle const& vertex, boost::optional<double> const& cost, unsigned initial_count, unsigned current_count) const {}                $/;"	f	class:Visitor_base
OnStarted	.\XESCore\MapAlgs.cpp	/^  virtual void OnStarted() const {} $/;"	f	class:Visitor_base
OnStopConditionReached	.\XESCore\MapAlgs.cpp	/^  virtual void OnStopConditionReached() const {} $/;"	f	class:Visitor_base
OpenFiles	.\RenderFarmUI\RF_Application.cpp	/^void	RF_Application::OpenFiles(const vector<string>& inFiles)$/;"	f	class:RF_Application
OpenFiles	.\WEDCore\WED_Application.cpp	/^void	WED_Application::OpenFiles(const vector<string>& inFiles)$/;"	f	class:WED_Application
OpenModule	.\SDTS\SDTSRead.cpp	/^MFMemFile *		SDTSDirectory::OpenModule(const string& inModuleName)$/;"	f	class:SDTSDirectory
OpenTile	.\WEDCore\WED_Package.cpp	/^WED_Document *	WED_Package::OpenTile(int lon, int lat)$/;"	f	class:WED_Package
OptimizeNetwork	.\XESCore\NetPlacement.cpp	/^void	OptimizeNetwork(Net_JunctionInfoSet& ioJunctions, Net_ChainInfoSet& outChains, bool water_only)$/;"	f
OutputGaps	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::OutputGaps(void)$/;"	f	class:CoverageFinder
OverlayMap_legacy	.\XESCore\MapOverlay.cpp	/^void OverlayMap_legacy($/;"	f
Overlay_edge_data	.\XESCore\MapOverlay.cpp	/^	typedef OverlayEdgeData_                            Overlay_edge_data;$/;"	t	class:Arr_full_overlay_traits	file:
Overlay_face_data	.\XESCore\MapOverlay.cpp	/^	typedef OverlayFaceData_                            Overlay_face_data;$/;"	t	class:Arr_full_overlay_traits	file:
Overlay_network	.\XESCore\MapOverlay.cpp	/^struct Overlay_network$/;"	s	file:
Overlay_terrain	.\XESCore\MapOverlay.cpp	/^struct Overlay_terrain$/;"	s	file:
Overlay_vertex	.\XESCore\MapOverlay.cpp	/^struct Overlay_vertex$/;"	s	file:
Overlay_vertex_data	.\XESCore\MapOverlay.cpp	/^	typedef OverlayVertexData_                          Overlay_vertex_data;$/;"	t	class:Arr_full_overlay_traits	file:
Overrun	.\Utils\XChunkyFileUtils.h	/^	bool	Overrun(void)		{ return position > end;					}$/;"	f	struct:XAtomPackedData
PADDING	.\Utils\md5.c	/^static unsigned char PADDING[64] = {$/;"	v	file:
PAD_POINTS_FOR_ZOOM_MTR	.\WEDMap\WED_MapPane.cpp	86;"	d	file:
PANEL_REGION_DIMS	.\AC3DPlugins\obj_panel.cpp	33;"	d	file:
PARAMDEFS_H	.\XESCore\ParamDefs.h	866;"	d
PATCH_DIM_HI	.\XESCore\DSFBuilder.cpp	59;"	d	file:
PATCH_DIM_HI	.\XESCore\DSFBuilder.cpp	62;"	d	file:
PATCH_DIM_LO	.\XESCore\DSFBuilder.cpp	60;"	d	file:
PATCH_DIM_LO	.\XESCore\DSFBuilder.cpp	63;"	d	file:
PAUSE_STEP	.\XESCore\MeshAlgs.cpp	111;"	d	file:
PAUSE_STEP	.\XESCore\MeshAlgs.cpp	117;"	d	file:
PCSBSocket	.\Network\PCSBSocket.h	/^class	PCSBSocket {$/;"	c
PCSBSocket	.\Network\PCSBSocket.lin.cpp	/^PCSBSocket::PCSBSocket(int inWorkerSocket)$/;"	f	class:PCSBSocket
PCSBSocket	.\Network\PCSBSocket.lin.cpp	/^PCSBSocket::PCSBSocket(unsigned short inPort, bool inServer)$/;"	f	class:PCSBSocket
PCSBSocket	.\Network\PCSBSocket.win.cpp	/^PCSBSocket::PCSBSocket(SOCKET inWorkerSocket)$/;"	f	class:PCSBSocket
PCSBSocket	.\Network\PCSBSocket.win.cpp	/^PCSBSocket::PCSBSocket(unsigned short inPort, bool inServer)$/;"	f	class:PCSBSocket
PCSBSocketUDP	.\Network\PCSBSocketUDP.h	/^class	PCSBSocketUDP {$/;"	c
PCSBSocketUDP	.\Network\PCSBSocketUDP.lin.cpp	/^PCSBSocketUDP::PCSBSocketUDP(unsigned short inPort)$/;"	f	class:PCSBSocketUDP
PCSBSocketUDP	.\Network\PCSBSocketUDP.win.cpp	/^PCSBSocketUDP::PCSBSocketUDP(unsigned short inPort)$/;"	f	class:PCSBSocketUDP
PERFUTILS_H	.\Utils\PerfUtils.h	24;"	d
PERLIN_H	.\Utils\perlin.h	24;"	d
PERSIST_OBJECTS	.\Env\Persistence.h	34;"	d
PERSIST_PATHS	.\Env\Persistence.h	38;"	d
PERSIST_TEXTURES	.\Env\Persistence.h	42;"	d
PERSIST_VERTICES	.\Env\Persistence.h	30;"	d
PFNGLACTIVETEXTUREARBPROC	.\UI\XWinGL.h	/^   typedef void (APIENTRY * PFNGLACTIVETEXTUREARBPROC      )(GLenum                );$/;"	t
PFNGLCLIENTACTIVETEXTUREARBPROC	.\UI\XWinGL.h	/^   typedef void (APIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture        );$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC	.\UI\XWinGL.h	/^   typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid* data); $/;"	t
PFNGLMULTITEXCOORD2FARBPROC	.\UI\XWinGL.h	/^   typedef void (APIENTRY * PFNGLMULTITEXCOORD2FARBPROC    )(GLenum,GLfloat,GLfloat);$/;"	t
PFNGLMULTITEXCOORD2FARBPROC	.\Utils\ObjUtilsGL.h	/^typedef void (* PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);$/;"	t
PFNGLMULTITEXCOORD2FVARBPROC	.\UI\XWinGL.h	/^   typedef void (APIENTRY * PFNGLMULTITEXCOORD2FVARBPROC   )(GLenum,const GLfloat *);$/;"	t
PHONE	.\XESCore\MeshAlgs.cpp	128;"	d	file:
PI	.\Tiger\TIGERRead.cpp	/^const double PI = 3.14159265358979323846;$/;"	v
PI	.\XESCore\XESConstants.h	33;"	d
PI2	.\Tiger\TIGERRead.cpp	/^const double PI2 = PI * 2.0;$/;"	v
PI2	.\XESCore\XESConstants.h	34;"	d
PIXEL1	.\Utils\QuiltUtils.h	111;"	d
PIXEL1	.\Utils\QuiltUtils.h	134;"	d
PIXEL1	.\Utils\QuiltUtils.h	146;"	d
PIXEL1	.\Utils\QuiltUtils.h	177;"	d
PIXEL1	.\Utils\QuiltUtils.h	201;"	d
PIXEL1	.\Utils\QuiltUtils.h	212;"	d
PIXEL1	.\Utils\QuiltUtils.h	220;"	d
PIXEL1	.\Utils\QuiltUtils.h	296;"	d
PIXEL1	.\Utils\QuiltUtils.h	333;"	d
PIXEL1	.\Utils\QuiltUtils.h	99;"	d
PIXEL2	.\Utils\QuiltUtils.h	100;"	d
PIXEL2	.\Utils\QuiltUtils.h	112;"	d
PIXEL2	.\Utils\QuiltUtils.h	135;"	d
PIXEL2	.\Utils\QuiltUtils.h	147;"	d
PIXEL2	.\Utils\QuiltUtils.h	178;"	d
PIXEL2	.\Utils\QuiltUtils.h	202;"	d
PIXEL2	.\Utils\QuiltUtils.h	213;"	d
PIXEL2	.\Utils\QuiltUtils.h	221;"	d
PIXEL2	.\Utils\QuiltUtils.h	297;"	d
PIXEL22	.\Utils\QuiltUtils.h	334;"	d
PIXEL3	.\Utils\QuiltUtils.h	136;"	d
PIXEL3	.\Utils\QuiltUtils.h	148;"	d
PIXEL3	.\Utils\QuiltUtils.h	179;"	d
PIXEL3	.\Utils\QuiltUtils.h	203;"	d
PM_Curve_2	.\XESCore\CGALTypes.h	/^typedef PM_Traits::X_monotone_curve_2						PM_Curve_2;$/;"	t
PM_Traits	.\XESCore\CGALTypes.h	/^typedef	CGAL::Arr_segment_traits_2<Kernel>					PM_Traits;$/;"	t
POINT	.\UI\XWin.h	/^} POINT, *PPOINT;$/;"	t	typeref:struct:tagPOINT
POINT2	.\Obj\XDefs.h	274;"	d
POLYRASTERUTILS_H	.\Utils\PolyRasterUtils.h	24;"	d
POLY_POINT_POOL_COUNT	.\DSF\DSFLibWrite.cpp	36;"	d	file:
PPOINT	.\UI\XWin.h	/^} POINT, *PPOINT;$/;"	t	typeref:struct:tagPOINT
PRECALC_Begin	.\RenderFarmUI\RF_DrawMap.cpp	/^void PRECALC_Begin (GLenum mode)$/;"	f
PRECALC_End	.\RenderFarmUI\RF_DrawMap.cpp	/^void PRECALC_End (void)$/;"	f
PRECALC_Vertex2fv	.\RenderFarmUI\RF_DrawMap.cpp	/^void PRECALC_Vertex2fv (const GLfloat *v)$/;"	f
PREFS_FILE	.\RenderFarmUI\RF_PrefsDialog.cpp	39;"	d	file:
PREFS_H	.\AC3DPlugins\prefs.h	25;"	d
PREFS_KEY_FLOAT	.\RenderFarmUI\RF_PrefsDialog.cpp	231;"	d	file:
PREFS_KEY_FLOAT	.\RenderFarmUI\RF_PrefsDialog.cpp	235;"	d	file:
PREFS_KEY_FLOAT	.\RenderFarmUI\RF_PrefsDialog.cpp	245;"	d	file:
PREFS_KEY_FLOAT	.\RenderFarmUI\RF_PrefsDialog.cpp	249;"	d	file:
PREFS_KEY_INT	.\RenderFarmUI\RF_PrefsDialog.cpp	230;"	d	file:
PREFS_KEY_INT	.\RenderFarmUI\RF_PrefsDialog.cpp	234;"	d	file:
PREFS_KEY_INT	.\RenderFarmUI\RF_PrefsDialog.cpp	244;"	d	file:
PREFS_KEY_INT	.\RenderFarmUI\RF_PrefsDialog.cpp	248;"	d	file:
PREFS_KEY_STR	.\RenderFarmUI\RF_PrefsDialog.cpp	232;"	d	file:
PREFS_KEY_STR	.\RenderFarmUI\RF_PrefsDialog.cpp	236;"	d	file:
PREFS_KEY_STR	.\RenderFarmUI\RF_PrefsDialog.cpp	246;"	d	file:
PREFS_KEY_STR	.\RenderFarmUI\RF_PrefsDialog.cpp	250;"	d	file:
PREFS_LIST	.\AC3DPlugins\prefs.h	27;"	d
PRINT_ATOM_SIZES	.\DSF\DSFLib.cpp	57;"	d	file:
PRINT_ATOM_SIZES	.\DSF\dsflib_013005\DSFLib.cpp	64;"	d	file:
PRINT_IT	.\DSF\DSFLib_Print.cpp	33;"	d	file:
PRINT_IT	.\DSF\dsflib_013005\DSFLib_Print.cpp	33;"	d	file:
PRINT_IT_DEF	.\DSF\DSFLib_Print.cpp	34;"	d	file:
PRINT_IT_DEF	.\DSF\dsflib_013005\DSFLib_Print.cpp	34;"	d	file:
PRINT_LIST	.\XESTools\GISTool_ObsCmds.cpp	215;"	d	file:
PROCESS	.\XESCore\MapBuffer.cpp	43;"	d	file:
PROFILE_PERFORMANCE	.\XESCore\DSFBuilder.cpp	47;"	d	file:
PROFILE_PERFORMANCE	.\XESCore\MeshAlgs.cpp	75;"	d	file:
PROFILE_PERFORMANCE	.\XESCore\TensorRoads.cpp	43;"	d	file:
PROGRESSUTILS_H	.\Utils\ProgressUtils.h	24;"	d
PROGRESS_CHECK	.\Utils\ProgressUtils.h	28;"	d
PROGRESS_DONE	.\Utils\ProgressUtils.h	29;"	d
PROGRESS_RATIO	.\XESCore\MapIO.cpp	34;"	d	file:
PROGRESS_SHOW	.\Utils\ProgressUtils.h	27;"	d
PROGRESS_START	.\Utils\ProgressUtils.h	26;"	d
PROP_MWM_HINTS_ELEMENTS	.\UI\XPopup.h	25;"	d
PROTOTYPES	.\DSF\dsflib_013005\DSFLibWrite.cpp	27;"	d	file:
PROT_EXEC	.\Utils\CarbonMemMap.h	31;"	d
PROT_NONE	.\Utils\CarbonMemMap.h	28;"	d
PROT_READ	.\Utils\CarbonMemMap.h	29;"	d
PROT_WRITE	.\Utils\CarbonMemMap.h	30;"	d
PTS_LIM	.\XESCore\BlockAlgs.cpp	33;"	d	file:
PT_Triangle_Strip	.\DSF\tri_stripper_101\tri_stripper.h	/^		PT_Triangle_Strip	= 0x0005	\/\/ = GL_TRIANGLE_STRIP$/;"	e	enum:triangle_stripper::tri_stripper::primitive_type
PT_Triangles	.\DSF\tri_stripper_101\tri_stripper.h	/^		PT_Triangles		= 0x0004,	\/\/ = GL_TRIANGLES$/;"	e	enum:triangle_stripper::tri_stripper::primitive_type
PVALUE	.\Utils\GISUtils.cpp	26;"	d	file:
PVR_Header_Texture_TAG	.\XPTools\DDSTool.cpp	/^typedef struct PVR_Header_Texture_TAG$/;"	s	file:
PVR_Texture_Header	.\XPTools\DDSTool.cpp	/^} PVR_Texture_Header;$/;"	t	typeref:struct:PVR_Header_Texture_TAG	file:
PackPane	.\GUI\GUI_Packer.cpp	/^void		GUI_Packer::PackPane(GUI_Pane * child, GUI_Packer_Side side)$/;"	f	class:GUI_Packer
PackPaneToRight	.\GUI\GUI_Packer.cpp	/^void		GUI_Packer::PackPaneToRight(GUI_Pane * child, GUI_Packer_Side side, GUI_Pane * target)$/;"	f	class:GUI_Packer
PageIndex	.\lib_json\include\json\value.h	/^      typedef unsigned int PageIndex;$/;"	t	class:Json::ValueInternalArray
PanPixels	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::PanPixels($/;"	f	class:RF_MapZoomer
PanPixels	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::PanPixels($/;"	f	class:WED_MapZoomerNew
Panic	.\WEDCore\WED_Document.cpp	/^void WED_Document::Panic(void)$/;"	f	class:WED_Document
ParentResized	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::ParentResized(int inOldBounds[4], int inNewBounds[4])$/;"	f	class:GUI_Pane
ParseCurrent	.\VPF\VPFTable.cpp	/^void	VPFTableIterator::ParseCurrent(void)$/;"	f	class:VPFTableIterator
ParseFile	.\XPTools\AddObjects.cpp	/^SceneryNode *	ParseFile(const char * inFile)$/;"	f
ParseMore	.\Network\HTTPClient.cpp	/^int		HTTPRequest::ParseMore(vector<char>& io_buf)$/;"	f	class:HTTPRequest
ParseXML	.\Network\XMLObject.cpp	/^XMLObject *	ParseXML(const char * inBuf, int inLen)$/;"	f
ParserInfo	.\Network\XMLObject.cpp	/^struct	ParserInfo {$/;"	s	file:
ParserTaxiSign	.\WEDCore\WED_Sign_Parser.cpp	/^void ParserTaxiSign(const parser_in_info & input, parser_out_info & output)$/;"	f
PatchSpec	.\DSF\DSFLibWrite.cpp	/^	struct PatchSpec {$/;"	s	class:DSFFileWriterImp	file:
PatchSpec	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	struct PatchSpec {$/;"	s	class:DSFFileWriterImp	file:
PatchSpecVector	.\DSF\DSFLibWrite.cpp	/^	typedef	vector<PatchSpec>		PatchSpecVector;$/;"	t	class:DSFFileWriterImp	file:
PatchSpecVector	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef	vector<PatchSpec>		PatchSpecVector;$/;"	t	class:DSFFileWriterImp	file:
Path	.\lib_json\include\json\value.h	/^   class Path$/;"	c	namespace:Json
Path	.\lib_json\src\lib_json\json_value.cpp	/^Path::Path( const std::string &path,$/;"	f	class:Json::Path
PathArgument	.\lib_json\include\json\value.h	/^   class PathArgument$/;"	c	namespace:Json
PathArgument	.\lib_json\src\lib_json\json_value.cpp	/^PathArgument::PathArgument( ArrayIndex index )$/;"	f	class:Json::PathArgument
PathArgument	.\lib_json\src\lib_json\json_value.cpp	/^PathArgument::PathArgument( const char *key )$/;"	f	class:Json::PathArgument
PathArgument	.\lib_json\src\lib_json\json_value.cpp	/^PathArgument::PathArgument( const std::string &key )$/;"	f	class:Json::PathArgument
PathArgument	.\lib_json\src\lib_json\json_value.cpp	/^PathArgument::PathArgument()$/;"	f	class:Json::PathArgument
PathInfo	.\Env\Persistence.h	/^struct PathInfo {$/;"	s
Peek	.\Utils\XChunkyFileUtils.cpp	/^	T	Peek(void)$/;"	f	class:FlatDecoder
PerfTimer	.\Utils\PerfUtils.h	/^	PerfTimer(const char * inName) :$/;"	f	class:PerfTimer
PerfTimer	.\Utils\PerfUtils.h	/^class	PerfTimer {$/;"	c
PickRandom	.\Utils\XUtils.cpp	/^int		PickRandom(vector<double>& chances)$/;"	f
PickZoningRule	.\XESCore\Zoning.cpp	/^static int		PickZoningRule($/;"	f	file:
PixelToLL	.\WEDMap\WED_MapZoomerNew.cpp	/^Point2	WED_MapZoomerNew::PixelToLL(const Point2& p)$/;"	f	class:WED_MapZoomerNew
PixelToLLv	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::PixelToLLv(Point2 * dst, const Point2 * src, int n)$/;"	f	class:WED_MapZoomerNew
Plane3	.\Utils\CompGeomDefs3.h	/^	Plane3() : ndotp(0), n() { }$/;"	f	struct:Plane3
Plane3	.\Utils\CompGeomDefs3.h	/^	Plane3(const Plane3& rhs) : n(rhs.n), ndotp(rhs.ndotp) { }$/;"	f	struct:Plane3
Plane3	.\Utils\CompGeomDefs3.h	/^	Plane3(const Point3& point, const Vector3& normal) : n(normal), ndotp(0.0) { n.normalize(); ndotp = n.dot(Vector3(point)); }$/;"	f	struct:Plane3
Plane3	.\Utils\CompGeomDefs3.h	/^struct	Plane3 {$/;"	s
Plane_3	.\XESCore\CGALDefs.h	/^typedef FastKernel::Plane_3                             Plane_3;$/;"	t
PlatformType	.\Utils\EndianUtils.h	/^} PlatformType;$/;"	t	typeref:enum:__anon90
PlotOneObj	.\XPTools\ViewObj.cpp	/^void	PlotOneObj(const XObj& inObj, int inShowCulled, bool inLit, bool inLighting, bool inSolid, bool inAnimate, float dist)$/;"	f
PlotOneObj8	.\XPTools\ViewObj.cpp	/^void	PlotOneObj8(const XObj8& inObj, int inShowCulled, bool inLit, bool inLighting, bool inSolid, bool inAnimate, float dist)$/;"	f
Pmwx	.\XESCore\MapDefs.h	/^typedef Arrangement_2		Pmwx;$/;"	t
PmwxFmt	.\XESCore\MapIO.cpp	/^	PmwxFmt(IOReader * r, const TokenConversionMap * t) : reader(r), writer(NULL), token_map(t) { }$/;"	f	class:PmwxFmt
PmwxFmt	.\XESCore\MapIO.cpp	/^	PmwxFmt(IOWriter * w) : reader(NULL), writer(w), token_map(NULL) { }$/;"	f	class:PmwxFmt
PmwxFmt	.\XESCore\MapIO.cpp	/^class PmwxFmt { $/;"	c	file:
PmwxIndex_t	.\RenderFarmUI\RF_DrawMap.h	/^	PmwxIndex_t() { }$/;"	f	struct:PmwxIndex_t
PmwxIndex_t	.\RenderFarmUI\RF_DrawMap.h	/^struct PmwxIndex_t {$/;"	s
Pmwx_Coastal_t	.\XESCore\MapTopology.h	/^enum Pmwx_Coastal_t {$/;"	g
Point2	.\Utils\CompGeomDefs2.h	/^	Point2() : x_(0.0), y_(0.0) { }$/;"	f	struct:Point2
Point2	.\Utils\CompGeomDefs2.h	/^	Point2(const Point2& rhs) : x_(rhs.x_), y_(rhs.y_) { }$/;"	f	struct:Point2
Point2	.\Utils\CompGeomDefs2.h	/^	Point2(double ix, double iy) : x_(ix), y_(iy) { }$/;"	f	struct:Point2
Point2	.\Utils\CompGeomDefs2.h	/^struct Point2 {$/;"	s
Point2	.\XESTools\MapBuckets.h	/^	typedef	Point2					Point2;$/;"	t	class:MapHalfedgeBucketTraits
Point2	.\XESTools\MapBuckets.h	/^	typedef	Point2				Point2;$/;"	t	class:MapFaceBucketTraits
Point2	.\XESTools\MapBuckets.h	/^	typedef	Point2				Point2;$/;"	t	class:MapVertexBucketTraits
Point2c	.\XESCore\BezierApprox.h	/^	Point2c() : c(false) {}$/;"	f	struct:Point2c
Point2c	.\XESCore\BezierApprox.h	/^	Point2c(const Point2& p, bool cc) : Point2(p), c(cc) {}$/;"	f	struct:Point2c
Point2c	.\XESCore\BezierApprox.h	/^	Point2c(const Point2& rhs) : Point2(rhs), c(false) {}$/;"	f	struct:Point2c
Point2c	.\XESCore\BezierApprox.h	/^	Point2c(const Point2c& rhs) : Point2(rhs), c(rhs.c) {}$/;"	f	struct:Point2c
Point2c	.\XESCore\BezierApprox.h	/^struct Point2c : public Point2 {$/;"	s
Point3	.\Utils\CompGeomDefs3.h	/^	Point3() : x(0.0), y(0.0), z(0.0) { }$/;"	f	struct:Point3
Point3	.\Utils\CompGeomDefs3.h	/^	Point3(const Point3& rhs) : x(rhs.x), y(rhs.y), z(rhs.z) { }$/;"	f	struct:Point3
Point3	.\Utils\CompGeomDefs3.h	/^	Point3(double ix, double iy, double iz) : x(ix), y(iy), z(iz) { }$/;"	f	struct:Point3
Point3	.\Utils\CompGeomDefs3.h	/^struct Point3 {$/;"	s
PointFeatureSelection	.\RenderFarmUI\RF_Selection.h	/^typedef	pair<Pmwx::Face_handle, int>	PointFeatureSelection;$/;"	t
PointInPolygon3	.\Utils\CompGeomUtils.cpp	/^bool	PointInPolygon3($/;"	f
PointMap	.\SDTS\SDTSReadTVP.cpp	/^typedef	hash_map<int, PointRecord>		PointMap;$/;"	t	file:
PointOnStructure	.\WEDMap\WED_CreateToolBase.cpp	/^bool	WED_CreateToolBase::PointOnStructure(intptr_t id, const Point2& p) const$/;"	f	class:WED_CreateToolBase
PointOnStructure	.\WEDMap\WED_MarqueeTool.cpp	/^bool	WED_MarqueeTool::PointOnStructure(intptr_t id, const Point2& p) const$/;"	f	class:WED_MarqueeTool
PointOnStructure	.\WEDMap\WED_VertexTool.cpp	/^bool	WED_VertexTool::PointOnStructure(intptr_t id, const Point2& p) const$/;"	f	class:WED_VertexTool
PointOnStructure	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^bool	WED_TCEMarqueeTool::PointOnStructure(intptr_t id, const Point2& p) const$/;"	f	class:WED_TCEMarqueeTool
PointOnStructure	.\WEDTCE\WED_TCEVertexTool.cpp	/^bool		WED_TCEVertexTool::PointOnStructure(intptr_t id, const Point2& p) const$/;"	f	class:WED_TCEVertexTool
PointRecord	.\SDTS\SDTSReadTVP.cpp	/^struct PointRecord : public WTPM_Node {$/;"	s	file:
PointRuleTable	.\XESCore\Zoning.h	/^typedef vector<PointRule_t>		PointRuleTable;$/;"	t
PointRule_t	.\XESCore\Zoning.h	/^struct PointRule_t {$/;"	s
PointSequenceToVector	.\WEDMap\WED_DrawUtils.cpp	/^void PointSequenceToVector($/;"	f
PointTable	.\SDTS\SDTSReadTVP.cpp	/^typedef	hash_map<string, PointMap>		PointTable;$/;"	t	file:
Point_2	.\Utils\point_index.h	/^	typedef	typename Traits::Point_2		Point_2;$/;"	t	class:spatial_index_2
Point_2	.\XESCore\CGALDefs.h	/^typedef FastKernel::Point_2                             Point_2;$/;"	t
Point_2	.\XESCore\CGALTypes.h	/^typedef	Kernel::Point_2										Point_2;$/;"	t
Point_2	.\XESCore\MapHelpers.h	/^	typedef typename K::Point_2	Point_2;$/;"	t	struct:visit_pt_in_tri
Point_2	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Point_2                Point_2;$/;"	t	class:PmwxFmt	file:
Point_3	.\XESCore\CGALDefs.h	/^typedef FastKernel::Point_3                             Point_3;$/;"	t
PolyInset_t	.\XESCore\MapPolygon.h	/^typedef vector<RingInset_t>		PolyInset_t;$/;"	t
PolyLineIndex	.\XESCore\BezierApprox.cpp	/^typedef	pair<list<vector<Point2> >, bool>		PolyLineIndex;$/;"	t	file:
PolyRasterSeg	.\Utils\PolyRasterUtils.h	/^	typedef PolyRasterSeg_t<Number>			PolyRasterSeg;$/;"	t	struct:PolyRasterizer
PolyRasterSeg_t	.\Utils\PolyRasterUtils.h	/^	PolyRasterSeg_t(Number a, Number b, Number c, Number d) :$/;"	f	struct:PolyRasterSeg_t
PolyRasterSeg_t	.\Utils\PolyRasterUtils.h	/^struct	PolyRasterSeg_t {$/;"	s
PolyRasterizer	.\Utils\PolyRasterUtils.h	/^struct	PolyRasterizer {$/;"	s
Polygon2	.\Utils\CompGeomDefs2.h	/^				Polygon2() 						: vector<Point2>() 		{ }$/;"	f	struct:Polygon2
Polygon2	.\Utils\CompGeomDefs2.h	/^				Polygon2(__Iterator s, __Iterator e) : vector<Point2>(s,e) { }$/;"	f	struct:Polygon2
Polygon2	.\Utils\CompGeomDefs2.h	/^				Polygon2(const Polygon2& rhs)   : vector<Point2>(rhs) 	{ }$/;"	f	struct:Polygon2
Polygon2	.\Utils\CompGeomDefs2.h	/^				Polygon2(int x) 				: vector<Point2>(x) 	{ }$/;"	f	struct:Polygon2
Polygon2	.\Utils\CompGeomDefs2.h	/^struct	Polygon2 : public vector<Point2> {$/;"	s
Polygon2p	.\WEDCore\WED_GISUtils.h	/^struct Polygon2p : public vector<Segment2p> {$/;"	s
Polygon3	.\Utils\CompGeomDefs3.h	/^class	Polygon3 : public vector<Point3> {$/;"	c
Polygon3Vector	.\ObjEdit\OE_Utils.h	/^typedef	vector<Polygon3>		Polygon3Vector;$/;"	t
PolygonFromBlock	.\XESCore\BlockFill.cpp	/^void	PolygonFromBlock(Block_2::Face_const_handle in_face, Block_2::Halfedge_const_handle first_side, vector<Polygon2>& out_ps, CoordTranslator2 * translator, double err, bool will_split)$/;"	f
PolygonFromBlockCCB	.\XESCore\BlockFill.cpp	/^void	PolygonFromBlockCCB(Block_2::Halfedge_const_handle circ, Polygon2& out_poly, CoordTranslator2 * translator, double err)$/;"	f
PolygonFromCCB	.\XESCore\MapPolygon.cpp	/^void	PolygonFromCCB(Pmwx::Ccb_halfedge_const_circulator circ, Polygon_2& out_poly, RingInset_t * out_inset, Inset_f func,Bbox_2 * extent)$/;"	f
PolygonFromFace	.\XESCore\MapPolygon.cpp	/^void	PolygonFromFace(Pmwx::Face_const_handle in_face, Polygon_with_holes_2& out_ps, PolyInset_t * out_inset, Inset_f func,Bbox_2 * extent)$/;"	f
PolygonFromFaceEx	.\XESCore\MapPolygon.cpp	/^void PolygonFromFaceEx($/;"	f
PolygonFromFaceExCCB	.\XESCore\MapPolygon.cpp	/^static void PolygonFromFaceExCCB(		$/;"	f	file:
PolygonInfoMap	.\Tiger\TIGERTypes.h	/^typedef hash_map<CENID_POLYID, PolygonInfo_t>	PolygonInfoMap;$/;"	t
PolygonInfo_t	.\Tiger\TIGERTypes.h	/^struct	PolygonInfo_t : public WTPM_Face {$/;"	s
PolygonMap	.\SDTS\SDTSReadTVP.cpp	/^typedef	hash_map<int, PolygonRecord>		PolygonMap;$/;"	t	file:
PolygonRecord	.\SDTS\SDTSReadTVP.cpp	/^struct	PolygonRecord : public WTPM_Face {$/;"	s	file:
PolygonSpec	.\DSF\DSFLibWrite.cpp	/^	struct PolygonSpec {$/;"	s	class:DSFFileWriterImp	file:
PolygonSpec	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	struct PolygonSpec {$/;"	s	class:DSFFileWriterImp	file:
PolygonSpecVector	.\DSF\DSFLibWrite.cpp	/^	typedef	vector<PolygonSpec>		PolygonSpecVector;$/;"	t	class:DSFFileWriterImp	file:
PolygonSpecVector	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef	vector<PolygonSpec>		PolygonSpecVector;$/;"	t	class:DSFFileWriterImp	file:
PolygonTable	.\SDTS\SDTSReadTVP.cpp	/^typedef	hash_map<string, PolygonMap>	PolygonTable;$/;"	t	file:
PolygonVector_t	.\Utils\RoadNetUtils.cpp	/^typedef	vector<Polygon_t>		PolygonVector_t;$/;"	t	file:
PolygonWeight	.\Utils\Skeleton.h	/^typedef vector<double>			PolygonWeight;$/;"	t
Polygon_2	.\XESCore\CGALDefs.h	/^typedef CGAL::Polygon_2<FastKernel>						Polygon_2;					\/\/ Ben says: this only works because GPS polygon uses "standard" kernel polygons.  If this was not$/;"	t
Polygon_2	.\XESCore\CGALTypes.h	/^typedef	CGAL::Polygon_2<Kernel>								Polygon_2;$/;"	t
Polygon_2	.\XESCore\MapDefs.h	/^	  typedef base::Polygon_2										Polygon_2;$/;"	t	class:Polygon_set_2
Polygon_set_2	.\XESCore\MapDefs.h	/^	Polygon_set_2() { }$/;"	f	class:Polygon_set_2
Polygon_set_2	.\XESCore\MapDefs.h	/^	Polygon_set_2(const Arrangement_2& rhs)$/;"	f	class:Polygon_set_2
Polygon_set_2	.\XESCore\MapDefs.h	/^	Polygon_set_2(const Polygon_2& rhs) : base(rhs) { }$/;"	f	class:Polygon_set_2
Polygon_set_2	.\XESCore\MapDefs.h	/^	Polygon_set_2(const Polygon_set_2& rhs) : base(rhs) { }$/;"	f	class:Polygon_set_2
Polygon_set_2	.\XESCore\MapDefs.h	/^	Polygon_set_2(const base& rhs) : base(rhs) { }$/;"	f	class:Polygon_set_2
Polygon_set_2	.\XESCore\MapDefs.h	/^class	Polygon_set_2	: public CGAL::General_polygon_set_2<Traits_2, Dcel > {$/;"	c
Polygon_t	.\Utils\RoadNetUtils.cpp	/^typedef	vector<Point3>			Polygon_t;$/;"	t	file:
Polygon_with_holes_2	.\XESCore\CGALDefs.h	/^typedef CGAL::Polygon_with_holes_2<FastKernel>			Polygon_with_holes_2;		\/\/ true, we could use these definitons from our GPS segment traits.  This allows us to have polygons$/;"	t
Polygon_with_holes_2	.\XESCore\MapDefs.h	/^	  typedef base::Polygon_with_holes_2							Polygon_with_holes_2;$/;"	t	class:Polygon_set_2
PopHandler	.\WEDCore\WED_Archive.cpp	/^void		WED_Archive::PopHandler(void)$/;"	f	class:WED_Archive
PopHandler	.\WEDCore\WED_Document.cpp	/^void		WED_Document::PopHandler(void)$/;"	f	class:WED_Document
PopHandler	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::PopHandler(void){ }$/;"	f	class:WED_PropIntEnumSet
PopHandler	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::PopHandler(void)$/;"	f	class:WED_PropertyHelper
PopHandler	.\WEDEntities\WED_AirportChain.cpp	/^void		WED_AirportChain::PopHandler(void) { }$/;"	f	class:WED_AirportChain
PopHandler	.\WEDEntities\WED_KeyObjects.cpp	/^void		WED_KeyObjects::PopHandler(void)$/;"	f	class:WED_KeyObjects
PopHandler	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::PopHandler(void) { }$/;"	f	class:WED_Select
PopHandler	.\WEDEntities\WED_Thing.cpp	/^void		WED_Thing::PopHandler(void)$/;"	f	class:WED_Thing
PopupMenu	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::PopupMenu(GUI_Menu menu, int x, int y, int button)$/;"	f	class:GUI_Pane
PopupMenu	.\GUI\GUI_Window.cpp	/^void		GUI_Window::PopupMenu(GUI_Menu menu, int x, int y, int button)$/;"	f	class:GUI_Window
PopupMenuDynamic	.\GUI\GUI_Pane.cpp	/^int		GUI_Pane::PopupMenuDynamic(const GUI_MenuItem_t items[], int x, int y, int button, int current)$/;"	f	class:GUI_Pane
PopupMenuDynamic	.\GUI\GUI_Window.cpp	/^int		GUI_Window::PopupMenuDynamic(const GUI_MenuItem_t items[], int x, int y, int button, int current)$/;"	f	class:GUI_Window
PositionHeaderPane	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::PositionHeaderPane(GUI_Pane * pane)$/;"	f	class:GUI_ScrollerPane
PositionInContentArea	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::PositionInContentArea(GUI_Pane * inPane)$/;"	f	class:GUI_ScrollerPane
PositionSidePane	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::PositionSidePane(GUI_Pane * pane)$/;"	f	class:GUI_ScrollerPane
PostCtor	.\WEDCore\WED_Persistent.cpp	/^void WED_Persistent::PostCtor()$/;"	f	class:WED_Persistent
PostProcessObj	.\XPTools\ConvertObj.cpp	/^void	PostProcessObj(XObj& ioObj, bool inReverse)$/;"	f
PostProcessVertex	.\XPTools\ConvertObj.cpp	/^void	PostProcessVertex(float v[3], bool inReverse)$/;"	f
PreCommandNotification	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::PreCommandNotification(GUI_Commander * focus_target, int command)$/;"	f	class:WED_HandleToolBase
PrecalcOGL	.\RenderFarmUI\RF_DrawMap.cpp	/^void	PrecalcOGL(Pmwx&						ioMap, ProgressFunc inFunc)$/;"	f
PredicateAlways	.\XESCore\MapTopology.h	/^struct PredicateAlways { bool operator()(const Value& v) const { return true; } };$/;"	s
PredicateContext	.\lib_json\src\test_lib_json\jsontest.h	/^   struct PredicateContext$/;"	s	namespace:JsonTest
PrefCB	.\WEDCore\WED_Document.cpp	/^static void PrefCB(const char * key, const char * value, void * ref)$/;"	f	file:
Preferences	.\RenderFarmUI\RF_Application.cpp	/^void	RF_Application::Preferences(void)$/;"	f	class:RF_Application
Preferences	.\WEDCore\WED_Application.cpp	/^void	WED_Application::Preferences(void)$/;"	f	class:WED_Application
PrevOneRoad	.\XESCore\Hydro.cpp	/^Halfedge_handle PrevOneRoad(Halfedge_handle r, bool allow_bridge)$/;"	f
PrintCommandChain	.\GUI\GUI_Commander.cpp	/^void			GUI_Commander::PrintCommandChain(int indent)$/;"	f	class:GUI_Commander
PrintDSFFile	.\DSF\DSFLib_Print.cpp	/^int	PrintDSFFile(const char * inPath, FILE * output, bool print_it)$/;"	f
PrintDSFFile	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^void	PrintDSFFile(const char * inPath, FILE * output)$/;"	f
PrintDebugInfo	.\GUI\GUI_Pane.cpp	/^void GUI_Pane::PrintDebugInfo(int indentLevel)$/;"	f	class:GUI_Pane
PrintENVData	.\XPTools\EnvPrint.cpp	/^bool	PrintENVData(const char * newPath)$/;"	f
PrintHeader	.\OneOffs\GenTerrain.c	/^void PrintHeader(const char * label, const char * comment)$/;"	f
PrintObj	.\OneOffs\GenTerrain.c	/^void PrintObj(const char * feature, const char * terrain, int variant, int width1, int width2, int depth1, int depth2, int height1, int height2, int road, int fill, const char * name)$/;"	f
PrintSpec	.\OneOffs\GenTerrain.c	/^void PrintSpec(const char * suite, const char * terrain, int variant, const ObjSpec_t spec[])$/;"	f
PrintToWidget	.\ObjEdit\(old)\OE_TexInfo.cpp	/^static void	PrintToWidget(XPWidgetID host, long sub_id, const char * fmt, ...)$/;"	f	file:
ProcessAirports	.\XESCore\Airports.cpp	/^void ProcessAirports(const AptVector& apts, Pmwx& ioMap, DEMGeo& elevation, DEMGeo& transport, bool crop, bool dems, bool kill_rivers, ProgressFunc prog)$/;"	f
ProcessBitmapSection	.\GUI\GUI_Fonts.cpp	/^static void		ProcessBitmapSection($/;"	f	file:
ProcessConfigString_f	.\XESCore\ConfigSystem.h	/^typedef bool (* ProcessConfigString_f)(const vector<string>& inTokenLine, void * inRef);$/;"	t
ProcessPoints	.\DSF\DSFPointPool.cpp	/^void			DSFContiguousPointPool::ProcessPoints(void)$/;"	f	class:DSFContiguousPointPool
ProcessPoints	.\DSF\DSFPointPool.cpp	/^void			DSFSharedPointPool::ProcessPoints(void)$/;"	f	class:DSFSharedPointPool
ProcessPoints	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void			DSFContiguousPointPool::ProcessPoints(void)$/;"	f	class:DSFContiguousPointPool
ProcessPoints	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void			DSFSharedPointPool::ProcessPoints(void)$/;"	f	class:DSFSharedPointPool
ProcessSelectionRecursive	.\WEDMap\WED_HandleToolBase.cpp	/^int		WED_HandleToolBase::ProcessSelectionRecursive($/;"	f	class:WED_HandleToolBase
ProcessingPrefs_t	.\RenderFarmUI\RF_ProcessingCmds.h	/^struct ProcessingPrefs_t {$/;"	s
ProgressFunc	.\Utils\ProgressUtils.h	/^typedef	bool (* ProgressFunc)($/;"	t
ProjectTex	.\XESCore\DSFBuilder.cpp	/^static void ProjectTex(double lon, double lat, double& s, double& t, const tex_proj_info * info)$/;"	f	file:
ProjectVertex	.\ObjEdit\OE_TexProjector.cpp	/^void	OE_CylinderProjector::ProjectVertex(double x, double y, double z, double& s, double& t)$/;"	f	class:OE_CylinderProjector
ProjectVertex	.\ObjEdit\OE_TexProjector.cpp	/^void	OE_PlanarProjector::ProjectVertex(double x, double y, double z, double& s, double& t)$/;"	f	class:OE_PlanarProjector
ProjectVertex	.\ObjEdit\OE_TexProjector.cpp	/^void	OE_SphereProjector::ProjectVertex(double x, double y, double z, double& s, double& t)$/;"	f	class:OE_SphereProjector
PropEditCallback	.\WEDEntities\WED_GISPoint.cpp	/^void		WED_GISPoint::PropEditCallback(int before)$/;"	f	class:WED_GISPoint
PropEditCallback	.\WEDEntities\WED_Thing.cpp	/^void		WED_Thing::PropEditCallback(int before)$/;"	f	class:WED_Thing
PropEditCallback	.\WEDMap\WED_MapToolNew.cpp	/^void		WED_MapToolNew::PropEditCallback(int before)$/;"	f	class:WED_MapToolNew
Prop_t	.\RawImport\ShapeIO.cpp	/^	typedef	set<int>	Prop_t;$/;"	t	class:toggle_properties_visitor	file:
Prop_t	.\XESCore\BlockAlgs.cpp	/^	typedef	set<int>				Prop_t;$/;"	t	class:apply_properties_visitor	file:
PropertyDict_t	.\Interfaces\IPropertyObject.h	/^typedef	map<int,pair<string, bool> >	PropertyDict_t;		\/\/ Maps integer enum value to (string name and true if selectable in the UI)$/;"	t
PropertyInfo_t	.\Interfaces\IPropertyObject.h	/^struct PropertyInfo_t {$/;"	s
PropertyItemNumber	.\WEDCore\WED_PropertyHelper.cpp	/^int			WED_PropertyHelper::PropertyItemNumber(const WED_PropertyItem * item) const$/;"	f	class:WED_PropertyHelper
PropertyVal_t	.\Interfaces\IPropertyObject.h	/^struct	PropertyVal_t {$/;"	s
PropsFromDB	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropertyHelper::PropsFromDB(sqlite3 * db, const char * where_clause, const map<int,int>& mapping)$/;"	f	class:WED_PropertyHelper
PropsToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropertyHelper::PropsToDB(sqlite3 * db, const char * id_col, const char * id_val, const char * skip_table)$/;"	f	class:WED_PropertyHelper
PropsToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::PropsToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropertyHelper
PtOnFrame	.\WEDEntities\WED_GISBoundingBox.cpp	/^bool			WED_GISBoundingBox::PtOnFrame		(GISLayer_t l,const Point2& p, double d) const$/;"	f	class:WED_GISBoundingBox
PtOnFrame	.\WEDEntities\WED_GISChain.cpp	/^bool			WED_GISChain::PtOnFrame		(GISLayer_t l,const Point2& p, double d	 ) const$/;"	f	class:WED_GISChain
PtOnFrame	.\WEDEntities\WED_GISComposite.cpp	/^bool			WED_GISComposite::PtOnFrame		(GISLayer_t l, const Point2& p, double d) const$/;"	f	class:WED_GISComposite
PtOnFrame	.\WEDEntities\WED_GISEdge.cpp	/^bool			WED_GISEdge::PtOnFrame		(GISLayer_t l,const Point2& p, double d) const$/;"	f	class:WED_GISEdge
PtOnFrame	.\WEDEntities\WED_GISLine.cpp	/^bool			WED_GISLine::PtOnFrame		(GISLayer_t l,const Point2& p, double dist ) const$/;"	f	class:WED_GISLine
PtOnFrame	.\WEDEntities\WED_GISLine_Width.cpp	/^bool			WED_GISLine_Width::PtOnFrame		(GISLayer_t l,  const Point2& p, double dist) const$/;"	f	class:WED_GISLine_Width
PtOnFrame	.\WEDEntities\WED_GISPoint.cpp	/^bool				WED_GISPoint::PtOnFrame		(GISLayer_t l, const Point2& pt, double dist) const$/;"	f	class:WED_GISPoint
PtOnFrame	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^bool			WED_GISPoint_HeadingWidthLength::PtOnFrame		(GISLayer_t l,const Point2& p, double dist) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
PtOnFrame	.\WEDEntities\WED_GISPolygon.cpp	/^bool				WED_GISPolygon::PtOnFrame		(GISLayer_t l,const Point2& p, double d) const$/;"	f	class:WED_GISPolygon
PtWithin	.\WEDEntities\WED_GISBoundingBox.cpp	/^bool			WED_GISBoundingBox::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISBoundingBox
PtWithin	.\WEDEntities\WED_GISChain.cpp	/^bool			WED_GISChain::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISChain
PtWithin	.\WEDEntities\WED_GISComposite.cpp	/^bool			WED_GISComposite::PtWithin		(GISLayer_t l, const Point2& p	 ) const$/;"	f	class:WED_GISComposite
PtWithin	.\WEDEntities\WED_GISEdge.cpp	/^bool			WED_GISEdge::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISEdge
PtWithin	.\WEDEntities\WED_GISLine.cpp	/^bool			WED_GISLine::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISLine
PtWithin	.\WEDEntities\WED_GISLine_Width.cpp	/^bool			WED_GISLine_Width::PtWithin		(GISLayer_t l,  const Point2& p	 ) const$/;"	f	class:WED_GISLine_Width
PtWithin	.\WEDEntities\WED_GISPoint.cpp	/^bool				WED_GISPoint::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISPoint
PtWithin	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^bool			WED_GISPoint_HeadingWidthLength::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
PtWithin	.\WEDEntities\WED_GISPolygon.cpp	/^bool				WED_GISPolygon::PtWithin		(GISLayer_t l,const Point2& p	 ) const$/;"	f	class:WED_GISPolygon
PullFaceFromFan	.\XESCore\TriFan.cpp	/^void TriFanBuilder::PullFaceFromFan(CDT::Face_handle f, TriFan_t * victim)$/;"	f	class:TriFanBuilder
Purge	.\Network\Terraserver.cpp	/^void	AsyncImageLocator::Purge(void)$/;"	f	class:AsyncImageLocator
Purge	.\WEDCore\WED_ResourceMgr.cpp	/^void	WED_ResourceMgr::Purge(void)$/;"	f	class:WED_ResourceMgr
PurgeRedo	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::PurgeRedo(void)$/;"	f	class:WED_UndoMgr
PurgeUndo	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::PurgeUndo(void)$/;"	f	class:WED_UndoMgr
PushHandler	.\WEDCore\WED_XMLReader.cpp	/^void	WED_XMLReader::PushHandler(WED_XMLHandler * handler)$/;"	f	class:WED_XMLReader
PushST	.\XPTools\TaxiMaker.cpp	/^void	PushST(XObjCmd&	cmd, double	x, double y, double z, double s, double t)$/;"	f
PushSideIn	.\XESCore\BlockFill.cpp	/^void PushSideIn(Polygon2& poly, int side, double dist)$/;"	f
QUADTREE_H	.\Utils\QuadTree.h	25;"	d
QuadStripVector_t	.\Utils\RoadNetUtils.cpp	/^typedef	vector<QuadStrip_t>		QuadStripVector_t;$/;"	t	file:
QuadStrip_t	.\Utils\RoadNetUtils.cpp	/^typedef	vector<Point3>			QuadStrip_t;$/;"	t	file:
QuadTree	.\Utils\QuadTree.h	/^QuadTree<__T, __N>::QuadTree(const KeyType& iextent, const Traits& itraits) :$/;"	f	class:QuadTree
QuadTree	.\Utils\QuadTree.h	/^class QuadTree {$/;"	c
Quad_1to2	.\Utils\GISUtils.cpp	/^void	Quad_1to2(const Point2& ctr, double heading, double len_mtr, Point2 ends[2])$/;"	f
Quad_1to4	.\Utils\GISUtils.cpp	/^void	Quad_1to4(const Point2& ctr, double heading, double len_mtr, double width_mtr, Point2 corners[4])$/;"	f
Quad_2to1	.\Utils\GISUtils.cpp	/^void	Quad_2to1(const Point2 ends[2], Point2& ctr, double& heading, double& len_mtr)$/;"	f
Quad_2to4	.\Utils\GISUtils.cpp	/^void	Quad_2to4(const Point2 ends[2], double width_mtr, Point2 corners[4])$/;"	f
Quad_4to1	.\Utils\GISUtils.cpp	/^void	Quad_4to1(const Point2 corners[4], Point2& ctr, double& heading, double& len_mtr, double& width_mtr)$/;"	f
Quad_4to2	.\Utils\GISUtils.cpp	/^void	Quad_4to2(const Point2 corners[4], Point2 ends[2], double& width_mtr)$/;"	f
Quad_MoveSide2	.\Utils\GISUtils.cpp	/^void	Quad_MoveSide2(Point2 ends[2], double& width_mtr, int side, const Vector2& delta)$/;"	f
Quad_ResizeCorner1	.\Utils\GISUtils.cpp	/^void Quad_ResizeCorner1(Point2& ctr, double heading, double& l, double& w, int corner, const Vector2& move, bool symetric)$/;"	f
Quad_ResizeSide4	.\Utils\GISUtils.cpp	/^void Quad_ResizeSide4(Point2 corners[4], int side, const Vector2& move, bool symetric)$/;"	f
Quad_diagto1	.\Utils\GISUtils.cpp	/^void	Quad_diagto1(const Point2 ends[2], double width_mtr, Point2& ctr, double& heading, double& len_mtr, int swapped)$/;"	f
QueryContinueDrag	.\GUI\GUI_Window.cpp	/^HRESULT GUI_DropSource::QueryContinueDrag(BOOL fEscapePressed, DWORD grfKeyState)$/;"	f	class:GUI_DropSource
QueryDrop	.\UI\XWin32DND.cpp	/^BOOL CDropTarget::QueryDrop(DWORD grfKeyState, LPDWORD pdwEffect)$/;"	f	class:CDropTarget
QueryGetData	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::QueryGetData			(FORMATETC * format)$/;"	f	class:GUI_SimpleDataObject
QueryInterface	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		 GUI_SimpleDataObject::QueryInterface(REFIID riid, void **ppvOut)$/;"	f	class:GUI_SimpleDataObject
QueryInterface	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		 GUI_SimpleEnumFORMATETC::QueryInterface(REFIID riid, void **ppvOut)$/;"	f	class:GUI_SimpleEnumFORMATETC
QueryInterface	.\GUI\GUI_Window.cpp	/^HRESULT GUI_DropSource::QueryInterface(REFIID riid, void **ppv)$/;"	f	class:GUI_DropSource
QueryInterface	.\GUI\GUI_Window.cpp	/^STDMETHODIMP GUI_Window_DND::QueryInterface(REFIID riid, LPVOID* ppvOut)$/;"	f	class:GUI_Window_DND
QueryInterface	.\UI\XWin32DND.cpp	/^STDMETHODIMP CDropTarget::QueryInterface(REFIID riid, LPVOID *ppvOut)$/;"	f	class:CDropTarget
QueryUsableFacsBySize	.\XESCore\ObjTables.cpp	/^int	QueryUsableFacsBySize($/;"	f
QueryUsableObjsBySize	.\XESCore\ObjTables.cpp	/^int QueryUsableObjsBySize($/;"	f
QueueDepth	.\Network\HTTPClient.cpp	/^int	HTTPConnection::QueueDepth(void)$/;"	f	class:HTTPConnection
QueueSeed	.\XESCore\TensorRoads.cpp	/^void	QueueSeed($/;"	f
QuickToFile	.\RenderFarmUI\RF_MapView.cpp	/^inline const char * QuickToFile(const string& s)$/;"	f
QuiltUtils_H	.\Utils\QuiltUtils.h	25;"	d
Quit	.\GUI\GUI_Application.cpp	/^void			GUI_Application::Quit(void)$/;"	f	class:GUI_Application
RADIUS	.\RawImport\AptElev.cpp	350;"	d	file:
RAD_TO_DEG	.\XESCore\XESConstants.h	38;"	d
RAII_CURL_HNDL	.\WEDImportExport\WED_GatewayImport.cpp	/^	RAII_CURL_HNDL():$/;"	f	class:RAII_CURL_HNDL
RAII_CURL_HNDL	.\WEDImportExport\WED_GatewayImport.cpp	/^class RAII_CURL_HNDL$/;"	c	file:
RAII_file	.\WEDImportExport\WED_GatewayImport.cpp	/^ RAII_file(const char * fname, const char * mode) :$/;"	f	class:RAII_file
RAII_file	.\WEDImportExport\WED_GatewayImport.cpp	/^class RAII_file $/;"	c	file:
RANGE_RULE	.\XESCore\ObjTables.cpp	302;"	d	file:
RAN_RAT_DIM	.\Utils\perlin.h	26;"	d
REDUCE_SHAPE_ANGLE	.\XESCore\NetPlacement.cpp	218;"	d	file:
REDUCE_SUBDIVIDE	.\XESCore\MeshAlgs.cpp	96;"	d	file:
RED_YELLOW_LETTER	.\XPTools\TaxiMaker.cpp	77;"	d	file:
REF	.\DSF\DSFLibWrite.cpp	156;"	d	file:
REF	.\DSF\DSFLib_Print.cpp	405;"	d	file:
REF	.\DSF\DSFLib_Print.cpp	67;"	d	file:
REF	.\DSF\dsflib_013005\DSFLibWrite.cpp	135;"	d	file:
REF	.\DSF\dsflib_013005\DSFLib_Print.cpp	332;"	d	file:
REF	.\DSF\dsflib_013005\DSFLib_Print.cpp	52;"	d	file:
REGISTER_LIST	.\WEDCore\WED_AppMain.cpp	55;"	d	file:
REGISTER_LIST_ATC	.\WEDCore\WED_AppMain.cpp	94;"	d	file:
REGTYPE	.\Utils\MemFileUtils.cpp	131;"	d	file:
RENORMCOUNT	.\Utils\trackball.c	244;"	d	file:
REQUIRED_FLOW	.\XESCore\Hydro.cpp	58;"	d	file:
REQUIRED_SLOPE	.\XESCore\Hydro.cpp	60;"	d	file:
RESIZE_MARGIN	.\GUI\GUI_TextTable.cpp	36;"	d	file:
RF_ASSERT_H	.\RenderFarmUI\RF_Assert.h	25;"	d
RF_Application	.\RenderFarmUI\RF_Application.cpp	/^RF_Application::RF_Application(int& argc, char* argv[]) : GUI_Application(argc, argv)$/;"	f	class:RF_Application
RF_Application	.\RenderFarmUI\RF_Application.h	/^class	RF_Application : public GUI_Application {$/;"	c
RF_Application_H	.\RenderFarmUI\RF_Application.h	25;"	d
RF_AssertHandler_f	.\RenderFarmUI\RF_Assert.cpp	/^void RF_AssertHandler_f(const char * condition, const char * file, int line)$/;"	f
RF_AssertInit	.\RenderFarmUI\RF_Assert.cpp	/^void	RF_AssertInit(void)$/;"	f
RF_BEZIERTESTTOOL_H	.\RenderFarmUI\RF_BezierTestTool.h	24;"	d
RF_BezierTestTool	.\RenderFarmUI\RF_BezierTestTool.cpp	/^RF_BezierTestTool::RF_BezierTestTool(RF_MapZoomer * inZoomer) :$/;"	f	class:RF_BezierTestTool
RF_BezierTestTool	.\RenderFarmUI\RF_BezierTestTool.h	/^class	RF_BezierTestTool : public RF_MapTool, public DragHandleManager {$/;"	c
RF_CROPTOOL_H	.\RenderFarmUI\RF_CropTool.h	24;"	d
RF_CropTool	.\RenderFarmUI\RF_CropTool.cpp	/^RF_CropTool::RF_CropTool(RF_MapZoomer * inZoomer) :$/;"	f	class:RF_CropTool
RF_CropTool	.\RenderFarmUI\RF_CropTool.h	/^class	RF_CropTool : public RF_MapTool, public DragHandleManager {$/;"	c
RF_DEMGRAPHICS_H	.\RenderFarmUI\RF_DEMGraphics.h	24;"	d
RF_EXPORT_ALPHA	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_ALPHA = 1006;$/;"	v
RF_EXPORT_CALC	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_CALC = 1009;$/;"	v
RF_EXPORT_COLOR	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_COLOR = 1007;$/;"	v
RF_EXPORT_FORMAT	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_FORMAT = 1000;$/;"	v
RF_EXPORT_H	.\RenderFarmUI\RF_Export.h	25;"	d
RF_EXPORT_INVERT	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_INVERT = 1005;$/;"	v
RF_EXPORT_OFFSET	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_OFFSET = 1002;$/;"	v
RF_EXPORT_RASTERS	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_RASTERS = 1001;$/;"	v
RF_EXPORT_RESCALE	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_RESCALE = 1008;$/;"	v
RF_EXPORT_SCALE	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_SCALE = 1003;$/;"	v
RF_EXPORT_TRANSLATION	.\RenderFarmUI\RF_Export.cpp	/^const int RF_EXPORT_TRANSLATION = 1004;$/;"	v
RF_EditCommands_H	.\RenderFarmUI\RF_EditCommands.h	25;"	d
RF_ExportState_t	.\RenderFarmUI\RF_Export.cpp	/^struct	RF_ExportState_t {$/;"	s	file:
RF_FILECMDS_H	.\RenderFarmUI\RF_FileCommands.h	25;"	d
RF_FileNew	.\RenderFarmUI\RF_FileCommands.cpp	/^void	RF_FileNew(void)$/;"	f
RF_FileOpen	.\RenderFarmUI\RF_FileCommands.cpp	/^bool	RF_FileOpen(const string& inPath)$/;"	f
RF_FileSave	.\RenderFarmUI\RF_FileCommands.cpp	/^void	RF_FileSave(void)$/;"	f
RF_GLOBALS_H	.\RenderFarmUI\RF_Globals.h	24;"	d
RF_HandleEditMenuCmd	.\RenderFarmUI\RF_EditCommands.cpp	/^static	void	RF_HandleEditMenuCmd(void *, void * i)$/;"	f	file:
RF_HandleProcMenuCmd	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^static	void	RF_HandleProcMenuCmd(void *, void * i)$/;"	f	file:
RF_IMAGETOOL_H	.\RenderFarmUI\RF_ImageTool.h	24;"	d
RF_IMPORT_BYTE_HEIGHT	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_BYTE_HEIGHT = 1006;$/;"	v
RF_IMPORT_BYTE_OFFSET	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_BYTE_OFFSET = 1004;$/;"	v
RF_IMPORT_BYTE_WIDTH	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_BYTE_WIDTH = 1005;$/;"	v
RF_IMPORT_EAST	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_EAST = 1010;$/;"	v
RF_IMPORT_FORMAT	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_FORMAT = 1000;$/;"	v
RF_IMPORT_H	.\RenderFarmUI\RF_Import.h	25;"	d
RF_IMPORT_MAP	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_MAP = 1012;$/;"	v
RF_IMPORT_NORTH	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_NORTH = 1008;$/;"	v
RF_IMPORT_OFFSET	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_OFFSET = 1003;$/;"	v
RF_IMPORT_RESCALE	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_RESCALE = 1001;$/;"	v
RF_IMPORT_SCALE	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_SCALE = 1002;$/;"	v
RF_IMPORT_SOUTH	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_SOUTH = 1009;$/;"	v
RF_IMPORT_TRANSLATION	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_TRANSLATION = 1007;$/;"	v
RF_IMPORT_WEST	.\RenderFarmUI\RF_Import.cpp	/^const int RF_IMPORT_WEST = 1011;$/;"	v
RF_ImageTool	.\RenderFarmUI\RF_ImageTool.cpp	/^RF_ImageTool::RF_ImageTool(RF_MapZoomer * inZoomer) :$/;"	f	class:RF_ImageTool
RF_ImageTool	.\RenderFarmUI\RF_ImageTool.h	/^class	RF_ImageTool : public RF_MapTool, public DragHandleManager {$/;"	c
RF_ImportState_t	.\RenderFarmUI\RF_Import.cpp	/^struct	RF_ImportState_t {$/;"	s	file:
RF_LoadPrefs	.\RenderFarmUI\RF_PrefsDialog.cpp	/^void	RF_LoadPrefs(void)$/;"	f
RF_MAPTOOL_H	.\RenderFarmUI\RF_MapTool.h	24;"	d
RF_MAPVIEW_H	.\RenderFarmUI\RF_MapView.h	24;"	d
RF_MAPZOOMER_H	.\RenderFarmUI\RF_MapZoomer.h	24;"	d
RF_MESHTESTER_H	.\RenderFarmUI\RF_MeshTester.h	25;"	d
RF_MSGS_H	.\RenderFarmUI\RF_Msgs.h	24;"	d
RF_MapTool	.\RenderFarmUI\RF_MapTool.cpp	/^RF_MapTool::RF_MapTool(RF_MapZoomer * inZoomer) : mZoomer(inZoomer)$/;"	f	class:RF_MapTool
RF_MapTool	.\RenderFarmUI\RF_MapTool.h	/^class	RF_MapTool {$/;"	c
RF_MapView	.\RenderFarmUI\RF_MapView.cpp	/^RF_MapView::RF_MapView(GUI_Commander * cmdr) : GUI_Commander(cmdr),$/;"	f	class:RF_MapView
RF_MapView	.\RenderFarmUI\RF_MapView.h	/^class	RF_MapView : public GUI_Pane, public GUI_Commander, public GUI_Listener, public RF_Notifiable, public GUI_Timer {$/;"	c
RF_MapZoomer	.\RenderFarmUI\RF_MapZoomer.cpp	/^RF_MapZoomer::RF_MapZoomer()$/;"	f	class:RF_MapZoomer
RF_MapZoomer	.\RenderFarmUI\RF_MapZoomer.h	/^class	RF_MapZoomer {$/;"	c
RF_MeshTester	.\RenderFarmUI\RF_MeshTester.cpp	/^RF_MeshTester::RF_MeshTester(RF_MapZoomer * inZoomer) : RF_MapTool(inZoomer)$/;"	f	class:RF_MeshTester
RF_MeshTester	.\RenderFarmUI\RF_MeshTester.h	/^class	RF_MeshTester : public RF_MapTool {$/;"	c
RF_NOTIFY_H	.\RenderFarmUI\RF_Notify.h	24;"	d
RF_Notifiable	.\RenderFarmUI\RF_Notify.cpp	/^RF_Notifiable::RF_Notifiable()$/;"	f	class:RF_Notifiable
RF_Notifiable	.\RenderFarmUI\RF_Notify.h	/^class	RF_Notifiable {$/;"	c
RF_NotifyEditMenus	.\RenderFarmUI\RF_EditCommands.cpp	/^void	RF_NotifyEditMenus(int catagory, int message, void * param)$/;"	f
RF_NotifyProcCmds	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^void RF_NotifyProcCmds(int catagory, int message, void * param)$/;"	f
RF_Notify_f	.\RenderFarmUI\RF_Notify.h	/^typedef	void (* RF_Notify_f)(int catagory, int message, void * param);$/;"	t
RF_PANE_H	.\RenderFarmUI\RF_Pane.h	25;"	d
RF_PREFSDIALOG_H	.\RenderFarmUI\RF_PrefsDialog.h	25;"	d
RF_PROCESSINGCMDS_H	.\RenderFarmUI\RF_ProcessingCmds.h	24;"	d
RF_PROGRESS_H	.\RenderFarmUI\RF_Progress.h	24;"	d
RF_Pane	.\RenderFarmUI\RF_Pane.cpp	/^RF_Pane::RF_Pane($/;"	f	class:RF_Pane
RF_Pane	.\RenderFarmUI\RF_Pane.h	/^class	RF_Pane {$/;"	c
RF_Prefs	.\RenderFarmUI\RF_PrefsDialog.h	/^struct	RF_Prefs {$/;"	s
RF_ProgressFunc	.\RenderFarmUI\RF_Progress.cpp	/^bool	RF_ProgressFunc($/;"	f
RF_RecalcEditMenus	.\RenderFarmUI\RF_EditCommands.cpp	/^void	RF_RecalcEditMenus(void)$/;"	f
RF_RegisterNotifyFunc	.\RenderFarmUI\RF_Notify.cpp	/^void	RF_RegisterNotifyFunc(RF_Notify_f inFunc)$/;"	f
RF_SELECTIONTOOL_H	.\RenderFarmUI\RF_SelectionTool.h	24;"	d
RF_SELECTION_H	.\RenderFarmUI\RF_Selection.h	24;"	d
RF_SPECIALCMDS_H	.\RenderFarmUI\RF_SpecialCommands.h	25;"	d
RF_SPREADSHEETWIZARD_H	.\RenderFarmUI\RF_SpreadsheetWizard.h	25;"	d
RF_SavePrefs	.\RenderFarmUI\RF_PrefsDialog.cpp	/^void	RF_SavePrefs(void)$/;"	f
RF_SelectionTool	.\RenderFarmUI\RF_SelectionTool.cpp	/^RF_SelectionTool::RF_SelectionTool(RF_MapZoomer * inZoomer) : RF_MapTool(inZoomer)$/;"	f	class:RF_SelectionTool
RF_SelectionTool	.\RenderFarmUI\RF_SelectionTool.h	/^class	RF_SelectionTool : public RF_MapTool {$/;"	c
RF_SetSelectionMode	.\RenderFarmUI\RF_Selection.cpp	/^void	RF_SetSelectionMode(int mode)$/;"	f
RF_ShowExportDialog	.\RenderFarmUI\RF_Export.cpp	/^void	RF_ShowExportDialog(void)$/;"	f
RF_ShowImportDialog	.\RenderFarmUI\RF_Import.cpp	/^void	RF_ShowImportDialog(void)$/;"	f
RF_ShowPrefsDialog	.\RenderFarmUI\RF_PrefsDialog.cpp	/^void	RF_ShowPrefsDialog(void)$/;"	f
RF_ShowSpreadsheetWizard	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^void	RF_ShowSpreadsheetWizard(void)$/;"	f
RF_TERRATOOL_H	.\RenderFarmUI\RF_TerraTool.h	24;"	d
RF_TOPOTESTER_H	.\RenderFarmUI\RF_TopoTester.h	25;"	d
RF_TRITESTTOOL_H	.\RenderFarmUI\RF_TriTestTool.h	24;"	d
RF_TerraTool	.\RenderFarmUI\RF_TerraTool.cpp	/^RF_TerraTool::RF_TerraTool(RF_MapZoomer * inZoomer) :$/;"	f	class:RF_TerraTool
RF_TerraTool	.\RenderFarmUI\RF_TerraTool.h	/^class	RF_TerraTool : public RF_MapTool {$/;"	c
RF_TopoTester	.\RenderFarmUI\RF_TopoTester.cpp	/^RF_TopoTester::RF_TopoTester(RF_MapZoomer * inZoomer) : RF_MapTool(inZoomer), mRayShoot(false)$/;"	f	class:RF_TopoTester
RF_TopoTester	.\RenderFarmUI\RF_TopoTester.h	/^class	RF_TopoTester : public RF_MapTool {$/;"	c
RF_TriTestTool	.\RenderFarmUI\RF_TriTestTool.cpp	/^RF_TriTestTool::RF_TriTestTool(RF_MapZoomer * inZoomer) : RF_MapTool(inZoomer)$/;"	f	class:RF_TriTestTool
RF_TriTestTool	.\RenderFarmUI\RF_TriTestTool.h	/^class	RF_TriTestTool : public RF_MapTool {$/;"	c
RF_UnregisterNotifyFunc	.\RenderFarmUI\RF_Notify.cpp	/^void	RF_UnregisterNotifyFunc(RF_Notify_f inFunc)$/;"	f
RF_UpdateProcCmds	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^void RF_UpdateProcCmds(void)$/;"	f
RF_WizardAction	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^void	RF_WizardAction(XPWidgetID)$/;"	f
RF_WizardParams	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^struct	RF_WizardParams {$/;"	s	file:
RGBColor_t	.\XESCore\ConfigSystem.h	/^struct	RGBColor_t {$/;"	s
RIGHT_TURN	.\Utils\CompGeomDefs2.h	/^	RIGHT_TURN = -1,$/;"	e	enum:__anon89
RIVER_SKIP	.\XESCore\MeshAlgs_old.cpp	32;"	d	file:
RLEDecoder	.\Utils\XChunkyFileUtils.cpp	/^	RLEDecoder(uint8_t * mem)$/;"	f	class:RLEDecoder
RLEDecoder	.\Utils\XChunkyFileUtils.cpp	/^class	RLEDecoder {$/;"	c	file:
RLEEncoder	.\Utils\XChunkyFileUtils.cpp	/^	RLEEncoder(FILE * inFile)$/;"	f	class:RLEEncoder
RLEEncoder	.\Utils\XChunkyFileUtils.cpp	/^class	RLEEncoder {$/;"	c	file:
RLEREGION_H	.\Utils\RLERegion.h	25;"	d
RLERegion	.\Utils\RLERegion.cpp	/^RLERegion::RLERegion() : x1_(0), x2_(0), y1_(0), y2_(0)$/;"	f	class:RLERegion
RLERegion	.\Utils\RLERegion.cpp	/^RLERegion::RLERegion(const RLERegion& rhs) :$/;"	f	class:RLERegion
RLERegion	.\Utils\RLERegion.cpp	/^RLERegion::RLERegion(int x1, int y1, int x2, int y2) : x1_(0), x2_(0), y1_(0), y2_(0)$/;"	f	class:RLERegion
RLERegion	.\Utils\RLERegion.h	/^class RLERegion {$/;"	c
RLERegionDualScanner	.\Utils\RLERegion.cpp	/^	RLERegionDualScanner(const RLERegion& r1, const RLERegion& r2) : rgn1_(r1), rgn2_(r2) { }$/;"	f	class:RLERegionDualScanner
RLERegionDualScanner	.\Utils\RLERegion.cpp	/^class RLERegionDualScanner {$/;"	c	file:
RLERegionScanner	.\Utils\RLERegion.cpp	/^RLERegionScanner::RLERegionScanner(const RLERegion& region) : region_(region)$/;"	f	class:RLERegionScanner
RLERegionScanner	.\Utils\RLERegion.h	/^class	RLERegionScanner {$/;"	c
ROADNETUTILS_H	.\Utils\RoadNetUtils.h	24;"	d
ROAD_EDITING	.\Obj\XDefs.h	67;"	d
ROCK_SLOPE_CUTOFF	.\XESCore\MeshAlgs_old.cpp	37;"	d	file:
ROTATE_LEFT	.\Utils\md5.c	68;"	d	file:
RRF	.\DSF\DSFLib_TestGen.cpp	/^float RRF(float a, float b)$/;"	f
RRF	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^float RRF(float a, float b)$/;"	f
RRI	.\DSF\DSFLib_TestGen.cpp	/^int	RRI(int a, int b)$/;"	f
RRI	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^int	RRI(int a, int b)$/;"	f
RTree2	.\Utils\RTree2.h	/^	RTree2() : root(NULL) { }$/;"	f	class:RTree2
RTree2	.\Utils\RTree2.h	/^class RTree2 {$/;"	c
RTree2_H	.\Utils\RTree2.h	25;"	d
R_VARY	.\XESCore\DEMTables.cpp	67;"	d	file:
Radial_Tensor	.\Utils\TensorUtils.h	/^inline Vector2		Radial_Tensor($/;"	f
RandRange	.\Utils\XUtils.cpp	/^double	RandRange(double mmin, double mmax)$/;"	f
RandRangeBias	.\Utils\XUtils.cpp	/^double	RandRangeBias(double mmin, double mmax, double biasRatio, double randomAmount)$/;"	f
RangeToIndex	.\Utils\CoverageFinder.cpp	/^int		CoverageFinder::RangeToIndex(int inAxis, float inVal)$/;"	f	class:CoverageFinder
RasterEdge	.\XESCore\TensorRoads.cpp	/^void	RasterEdge($/;"	f
RasterShapeFile	.\RawImport\ShapeIO.cpp	/^bool	RasterShapeFile($/;"	f
RasterizeLocal	.\Utils\BWImage.cpp	/^BWINLINE void			BWImage::RasterizeLocal($/;"	f	class:BWImage
RasterizeLocalCheck	.\Utils\BWImage.cpp	/^BWINLINE bool			BWImage::RasterizeLocalCheck($/;"	f	class:BWImage
RasterizeLocalStopConflicts	.\Utils\BWImage.cpp	/^BWINLINE bool			BWImage::RasterizeLocalStopConflicts($/;"	f	class:BWImage
RasterizerFill	.\XESTools\GISTool_ProcessingCmds.cpp	/^void	RasterizerFill(PolyRasterizer<double>& rasterizer, DEMGeo& ag_ok, float v)$/;"	f
RawCoord	.\Tiger\TIGERTypes.h	/^typedef	string			RawCoord;$/;"	t
RawCoordKey	.\Tiger\TIGERTypes.h	/^typedef	string			RawCoordKey;$/;"	t
RawCoordPair	.\Tiger\TIGERTypes.h	/^typedef	pair<RawCoord, RawCoord>	RawCoordPair;$/;"	t
RawCoordToCoord	.\Tiger\(TigerImport Backup.cpp).cpp	/^inline	Point_2 RawCoordToCoord(const RawCoordPair& p) { return Point_2(atof(p.second.c_str())\/* \/ 1000000.0*\/, atof(p.first.c_str())\/* \/ 1000000.0*\/); }$/;"	f
RawCoordToDouble	.\Tiger\TIGERRead.cpp	/^inline	Point2 RawCoordToDouble(const RawCoordPair& p) { return Point2(atof(p.second.c_str()) \/ 1000000.0, atof(p.first.c_str()) \/ 1000000.0); }$/;"	f
RawCoordToKey	.\Tiger\(TigerImport Backup.cpp).cpp	/^inline	string	RawCoordToKey(const RawCoordPair& p) { return p.first + p.second; }$/;"	f
Ray_2	.\XESCore\CGALDefs.h	/^typedef FastKernel::Ray_2								Ray_2;$/;"	t
Ray_2	.\XESCore\CGALTypes.h	/^typedef Kernel::Ray_2										Ray_2;$/;"	t
ReadAPTNavAsObs	.\RawImport\FAA_Obs.cpp	/^bool	ReadAPTNavAsObs(const char * inFile)$/;"	f
ReadARCASCII	.\XESCore\DEMIO.cpp	/^bool	ReadARCASCII(DEMGeo& inMap, const char * inFileName)$/;"	f
ReadAirportRawElevations	.\RawImport\AptElev.cpp	/^bool	ReadAirportRawElevations(const char * inFile)$/;"	f
ReadAptFile	.\XESCore\AptIO.cpp	/^string	ReadAptFile(const char * inFileName, AptVector& outApts)$/;"	f
ReadAptFileMem	.\XESCore\AptIO.cpp	/^string	ReadAptFileMem(const char * inBegin, const char * inEnd, AptVector& outApts)$/;"	f
ReadAreaFeature	.\XESCore\MapIO.cpp	/^void ReadAreaFeature(IOReader& inReader, GISAreaFeature_t& obj, const TokenConversionMap& c)$/;"	f
ReadBeachInfo	.\XESCore\DEMTables.cpp	/^bool	ReadBeachInfo(const vector<string>& tokens, void * ref)$/;"	f
ReadBonesFromFile	.\Utils\XCarBoneUtils.cpp	/^bool	ReadBonesFromFile(const char * inFileName, XCarBones& outBones)$/;"	f
ReadBulk	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ReadBulk(char * inBuf, int inLength, bool inZip)$/;"	f	class:WED_Buffer
ReadBulk	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::ReadBulk(char * inBuf, int inLength, bool inZip)$/;"	f	class:WED_FastBuffer
ReadBulk	.\XESCore\SimpleIO.cpp	/^void	FileReader::ReadBulk(char * inBuf, int inLength, bool inZip)$/;"	f	class:FileReader
ReadBulk	.\XESCore\SimpleIO.cpp	/^void	MemFileReader::ReadBulk(char * inBuf, int inLength, bool inZip)$/;"	f	class:MemFileReader
ReadChangeRule	.\XESCore\NetTables.cpp	/^bool	ReadChangeRule(const vector<string>& tokens, void * ref)$/;"	f
ReadCoordinate	.\XESCore\MapIO.cpp	/^void ReadCoordinate(IOReader& inReader, NT& c)$/;"	f
ReadDEM	.\XESCore\DEMIO.cpp	/^void	ReadDEM (		DEMGeo& inMap, IOReader * inReader)$/;"	f
ReadData	.\Network\PCSBSocket.lin.cpp	/^long PCSBSocket::ReadData(void* outBuf,long inLength)$/;"	f	class:PCSBSocket
ReadData	.\Network\PCSBSocket.win.cpp	/^long PCSBSocket::ReadData(void* outBuf,long inLength)$/;"	f	class:PCSBSocket
ReadData	.\Network\PCSBSocketUDP.lin.cpp	/^long PCSBSocketUDP::ReadData($/;"	f	class:PCSBSocketUDP
ReadData	.\Network\PCSBSocketUDP.win.cpp	/^long PCSBSocketUDP::ReadData($/;"	f	class:PCSBSocketUDP
ReadDegFile	.\RawImport\FAA_Obs.cpp	/^bool	ReadDegFile(const char * inFile)$/;"	f
ReadDouble	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ReadDouble(double& v)$/;"	f	class:WED_Buffer
ReadDouble	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::ReadDouble(double& x)$/;"	f	class:WED_FastBuffer
ReadDouble	.\XESCore\SimpleIO.cpp	/^void	FileReader::ReadDouble(double& x)$/;"	f	class:FileReader
ReadDouble	.\XESCore\SimpleIO.cpp	/^void	MemFileReader::ReadDouble(double& x)$/;"	f	class:MemFileReader
ReadDoublePref	.\WEDCore\WED_Document.cpp	/^double			WED_Document::ReadDoublePref(const char * in_key, double in_default)$/;"	f	class:WED_Document
ReadEdgeRule	.\XESCore\Zoning.cpp	/^static bool ReadEdgeRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadEnumBand	.\XESCore\DEMTables.cpp	/^bool	ReadEnumBand(const vector<string>& tokens, void * ref)$/;"	f
ReadEnumColor	.\XESCore\DEMTables.cpp	/^bool	ReadEnumColor(const vector<string>& tokens, void * ref)$/;"	f
ReadEnumDEM	.\XESCore\DEMTables.cpp	/^bool	ReadEnumDEM(const vector<string>& tokens, void * ref)$/;"	f
ReadEnumsAtomFromFile	.\XESCore\EnumSystem.cpp	/^void	ReadEnumsAtomFromFile(XAtomContainer& inAtomContainer, TokenMap& outTokens, int atomCode)$/;"	f
ReadEnvFile	.\Env\EnvParser.c	/^int	ReadEnvFile(const char * envFileName)$/;"	f
ReadFacadeRule	.\XESCore\Zoning.cpp	/^static bool ReadFacadeRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadFeatureLine	.\Tiger\TigerImport.cpp	/^bool	ReadFeatureLine(const vector<string>& tokens, void * ref)$/;"	f
ReadFeatureProps	.\XESCore\ObjTables.cpp	/^bool	ReadFeatureProps(const vector<string>& tokens, void * ref)$/;"	f
ReadFile	.\WEDCore\WED_XMLReader.cpp	/^string	WED_XMLReader::ReadFile(const char * filename, bool * exists)$/;"	f	class:WED_XMLReader
ReadFillRule	.\XESCore\Zoning.cpp	/^static bool ReadFillRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadFloat	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ReadFloat(float& v)$/;"	f	class:WED_Buffer
ReadFloat	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::ReadFloat(float& x)$/;"	f	class:WED_FastBuffer
ReadFloat	.\XESCore\SimpleIO.cpp	/^void	FileReader::ReadFloat(float& x)$/;"	f	class:FileReader
ReadFloat	.\XESCore\SimpleIO.cpp	/^void	MemFileReader::ReadFloat(float& x)$/;"	f	class:MemFileReader
ReadFloat32	.\Utils\XChunkyFileUtils.h	/^	float				ReadFloat32(void)	{ float 	v = *((float *		) position); *((int32_t *	) &v) = SWAP32(*((int32_t *) &v));	position += sizeof(v);	return v; }$/;"	f	struct:XAtomPackedData
ReadFloat64	.\Utils\XChunkyFileUtils.h	/^	double				ReadFloat64(void) 	{ double 	v = *((double *		) position); *((int64_t *	) &v) = SWAP64(*((int64_t *) &v));	position += sizeof(v);	return v; }$/;"	f	struct:XAtomPackedData
ReadFloatHGT	.\XESCore\DEMIO.cpp	/^bool	ReadFloatHGT(DEMGeo& inMap, const char * inFileName)$/;"	f
ReadFloatHGTCached	.\RawImport\AptElev.cpp	/^DEMGeo *	ReadFloatHGTCached(const char * fname)$/;"	f
ReadForestRule	.\XESCore\ForestTables.cpp	/^static bool	ReadForestRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadForkRule	.\XESCore\NetTables.cpp	/^bool	ReadForkRule(const vector<string>& tokens, void * ref)$/;"	f
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropBoolText::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropBoolText
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropDoubleText::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropDoubleText
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropFileText::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropFileText
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnum::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropIntEnum
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumBitfield::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropIntEnumBitfield
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumSet::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropIntEnumSet
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumSetFilter::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropIntEnumSetFilter
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumSetUnion::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropIntEnumSetUnion
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntText::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropIntText
ReadFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropStringText::ReadFrom(IOReader * reader)$/;"	f	class:WED_PropStringText
ReadFrom	.\WEDEntities\WED_AirportChain.cpp	/^void 			WED_AirportChain::ReadFrom(IOReader * reader)$/;"	f	class:WED_AirportChain
ReadFrom	.\WEDEntities\WED_Entity.cpp	/^void 	WED_Entity::ReadFrom(IOReader * reader)$/;"	f	class:WED_Entity
ReadFrom	.\WEDEntities\WED_KeyObjects.cpp	/^void 			WED_KeyObjects::ReadFrom(IOReader * reader)$/;"	f	class:WED_KeyObjects
ReadFrom	.\WEDEntities\WED_Select.cpp	/^void 			WED_Select::ReadFrom(IOReader * reader)$/;"	f	class:WED_Select
ReadFrom	.\WEDEntities\WED_Thing.cpp	/^void 			WED_Thing::ReadFrom(IOReader * reader)$/;"	f	class:WED_Thing
ReadFrom	.\WEDEntities\WED_Thing.cpp	/^void 		WED_TypeField::ReadFrom(IOReader * reader)$/;"	f	class:WED_TypeField
ReadGlobalPrefs	.\WEDCore\WED_Document.cpp	/^void	WED_Document::ReadGlobalPrefs(void)$/;"	f	class:WED_Document
ReadHDR	.\XESCore\DEMIO.cpp	/^void	ReadHDR(const string& in_real_file, DEMSpec& io_header, bool force_area)$/;"	f
ReadInt	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ReadInt(int& v)$/;"	f	class:WED_Buffer
ReadInt	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::ReadInt(int& x)$/;"	f	class:WED_FastBuffer
ReadInt	.\XESCore\SimpleIO.cpp	/^void	FileReader::ReadInt(int& x)$/;"	f	class:FileReader
ReadInt	.\XESCore\SimpleIO.cpp	/^void	MemFileReader::ReadInt(int& x)$/;"	f	class:MemFileReader
ReadIntPref	.\WEDCore\WED_Document.cpp	/^int			WED_Document::ReadIntPref(const char * in_key, int in_default)$/;"	f	class:WED_Document
ReadIntSetPref	.\WEDCore\WED_Document.cpp	/^void		WED_Document::ReadIntSetPref(const char * in_key, set<int>& out_value)$/;"	f	class:WED_Document
ReadInternal	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ReadInternal(char* p, unsigned long l)$/;"	f	class:WED_Buffer
ReadLandClassRule	.\XESCore\Zoning.cpp	/^static bool ReadLandClassRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadLandFillRule	.\XESCore\Zoning.cpp	/^static bool ReadLandFillRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadLevelCrossing	.\XESCore\NetTables.cpp	/^bool	ReadLevelCrossing(const vector<string>& tokens, void * ref)$/;"	f
ReadLineModule	.\SDTS\SDTSReadTVP.cpp	/^SDTSErrorType	ReadLineModule(Topology& ioTopology, MFMemFile * file, sio_8211_converter_dictionary * dictionary)$/;"	f
ReadMap	.\XESCore\MapIO.cpp	/^void	ReadMap(XAtomContainer& container, Pmwx& inMap, ProgressFunc inProgress, int atomID, const TokenConversionMap& c)$/;"	f
ReadMesh	.\XESCore\MeshIO.cpp	/^void ReadMesh(XAtomContainer& container, CDT& mesh, int atomID, const TokenConversionMap& conv, ProgressFunc func)$/;"	f
ReadNaturalTerrainInfo	.\XESCore\DEMTables.cpp	/^bool	ReadNaturalTerrainInfo(const vector<string>& tokens, void * ref)$/;"	f
ReadNetworkSegment	.\XESCore\MapIO.cpp	/^void ReadNetworkSegment(IOReader& inReader, GISNetworkSegment_t& seg, const TokenConversionMap& c)$/;"	f
ReadNewTerrainInfo	.\XESCore\DEMTables.cpp	/^bool	ReadNewTerrainInfo(const vector<string>& tokens, void * ref)$/;"	f
ReadObj3DS	.\XPTools\ConvertObj3DS.cpp	/^bool	ReadObj3DS(const char * inFilePath, XObj& obj, bool inReversePoly)$/;"	f
ReadObjDXF	.\XPTools\ConvertObjDXF.cpp	/^bool	ReadObjDXF(const char * inFilePath, XObj& obj, bool inReversePoly)$/;"	f
ReadObjPlacement	.\XESCore\MapIO.cpp	/^void ReadObjPlacement(IOReader& inReader, GISObjPlacement_t& p, const TokenConversionMap& c)$/;"	f
ReadObstacles	.\Env\EnvParser.c	/^int ReadObstacles(FILE * inFile, PlatformType inFileEndian)$/;"	f
ReadParamMap	.\XESCore\MapIO.cpp	/^void ReadParamMap				(IOReader& inReader, GISParamMap& m, const TokenConversionMap& c)$/;"	f
ReadPaths	.\Env\EnvParser.c	/^int ReadPaths(FILE * inFile, PlatformType inEndian, long inLat, long inLon, int inHasTaxiways, int inHasRivers)$/;"	f
ReadPoint	.\XESCore\MapIO.cpp	/^void ReadPoint(IOReader& inReader, Point_2& p)$/;"	f
ReadPointFeature	.\XESCore\MapIO.cpp	/^void ReadPointFeature(IOReader& inReader, GISPointFeature_t& feature, const TokenConversionMap& c)$/;"	f
ReadPointFillRule	.\XESCore\Zoning.cpp	/^static bool ReadPointFillRule(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadPointModule	.\SDTS\SDTSReadTVP.cpp	/^SDTSErrorType	ReadPointModule(Topology& ioTopology, MFMemFile * file, sio_8211_converter_dictionary * dictionary)$/;"	f
ReadPolyObjPlacement	.\XESCore\MapIO.cpp	/^void ReadPolyObjPlacement(IOReader& inReader, GISPolyObjPlacement_t& obj, const TokenConversionMap& c)$/;"	f
ReadPolygonFeature	.\XESCore\MapIO.cpp	/^void ReadPolygonFeature(IOReader& inReader, GISPolygonFeature_t& obj, const TokenConversionMap& c)$/;"	f
ReadPolygonModule	.\SDTS\SDTSReadTVP.cpp	/^SDTSErrorType	ReadPolygonModule(Topology& ioTopology, MFMemFile * file, sio_8211_converter_dictionary * dictionary)$/;"	f
ReadPreciseSpecificPath	.\Env\EnvParser.c	/^int	ReadPreciseSpecificPath(FILE * inFile, PlatformType inEndian, long inLat, long inLon, void (* acceptFunc)(double, double, int))$/;"	f
ReadPrefixLine	.\XESCore\ObjTables.cpp	/^bool	ReadPrefixLine(const vector<string>& tokens, void * ref)$/;"	f
ReadPropsFrom	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropertyHelper::ReadPropsFrom(IOReader * reader)$/;"	f	class:WED_PropertyHelper
ReadRawBIL	.\XESCore\DEMIO.cpp	/^bool	ReadRawBIL(DEMGeo& inMap, const char * inFileName, int bounds[4])$/;"	f
ReadRawHGT	.\XESCore\DEMIO.cpp	/^bool	ReadRawHGT(DEMGeo& inMap, const char * inFileName)$/;"	f
ReadRawWithHeader	.\XESCore\DEMIO.cpp	/^bool	ReadRawWithHeader(DEMGeo& inMap, const char * inFilename, const DEMSpec& spec)$/;"	f
ReadReal48	.\XESCore\DEMIO.cpp	/^static	double	ReadReal48(const unsigned char * p)$/;"	f	file:
ReadRepLine	.\XESCore\ObjTables.cpp	/^bool	ReadRepLine(const vector<string>& tokens, void * ref)$/;"	f
ReadRoadBridge	.\XESCore\NetTables.cpp	/^bool	ReadRoadBridge(const vector<string>& tokens, void * ref)$/;"	f
ReadRoadLine	.\Tiger\TigerImport.cpp	/^bool	ReadRoadLine(const vector<string>& tokens, void * ref)$/;"	f
ReadRoadPick	.\XESCore\NetTables.cpp	/^bool	ReadRoadPick(const vector<string>& tokens, void * ref)$/;"	f
ReadRoadPromote	.\XESCore\NetTables.cpp	/^bool	ReadRoadPromote(const vector<string>& tokens, void * ref)$/;"	f
ReadRoadPromoteZoning	.\XESCore\NetTables.cpp	/^bool	ReadRoadPromoteZoning(const vector<string>& tokens, void * ref)$/;"	f
ReadRoadSpecificProps	.\XESCore\NetTables.cpp	/^bool	ReadRoadSpecificProps(const vector<string>& tokens, void * ref)$/;"	f
ReadSInt16	.\Utils\XChunkyFileUtils.h	/^	int16_t				ReadSInt16(void)	{ int16_t 	v = *((int16_t *	) position); position += sizeof(v);	return SWAP16(v); }$/;"	f	struct:XAtomPackedData
ReadSInt32	.\Utils\XChunkyFileUtils.h	/^	int32_t				ReadSInt32(void)	{ int32_t 	v = *((int32_t *	) position); position += sizeof(v);	return SWAP32(v); }$/;"	f	struct:XAtomPackedData
ReadSInt8	.\Utils\XChunkyFileUtils.h	/^	int8_t				ReadSInt8 (void)	{ int8_t 	v = *((int8_t *		) position); position += sizeof(v);	return v; 		  }$/;"	f	struct:XAtomPackedData
ReadShapeFile	.\RawImport\ShapeIO.cpp	/^bool	ReadShapeFile(const char * in_file, Pmwx& io_map, shp_Flags flags, const char * feature_desc, double bounds[4], double simplify_mtr, int grid_steps, ProgressFunc	inFunc)$/;"	f
ReadShort	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ReadShort(short& v)$/;"	f	class:WED_Buffer
ReadShort	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::ReadShort(short& x)$/;"	f	class:WED_FastBuffer
ReadShort	.\XESCore\SimpleIO.cpp	/^void	FileReader::ReadShort(short& x)$/;"	f	class:FileReader
ReadShort	.\XESCore\SimpleIO.cpp	/^void	MemFileReader::ReadShort(short& x)$/;"	f	class:MemFileReader
ReadShortOz	.\XESCore\DEMIO.cpp	/^bool	ReadShortOz(DEMGeo& inMap, const char * inFileName)$/;"	f
ReadSpecificPath	.\Env\EnvParser.c	/^int	ReadSpecificPath(FILE * inFile, PlatformType inEndian, long inLat, long inLon, void (* acceptFunc)(double, double, int))$/;"	f
ReadStringPref	.\WEDCore\WED_Document.cpp	/^string			WED_Document::ReadStringPref(const char * in_key, const string& in_default)$/;"	f	class:WED_Document
ReadTerrain606	.\Env\EnvParser.c	/^int	ReadTerrain606(FILE * inFile, PlatformType inFileEndian)$/;"	f
ReadTerrain610	.\Env\EnvParser.c	/^int	ReadTerrain610(FILE * inFile, PlatformType inFileEndian, long inLat, long inLon)$/;"	f
ReadTextures	.\Env\EnvParser.c	/^int ReadTextures(FILE * inFile)$/;"	f
ReadTigerIndex	.\Tiger\TIGERProcess.cpp	/^void	ReadTigerIndex(const char * inFileName, TigerMap& outMap)$/;"	f
ReadTransfer	.\SDTS\SDTSReadTVP.cpp	/^void	ReadTransfer(Topology& ioTopology, SDTSDirectory * inDirectory, sio_8211_converter_dictionary * inDictionary, CoordTransform&	transform)$/;"	f
ReadTwinRule	.\XESCore\NetTables.cpp	/^bool ReadTwinRule(const vector<string>& tokens, void * ref)$/;"	f
ReadUInt16	.\Utils\XChunkyFileUtils.h	/^	uint16_t			ReadUInt16(void)	{ uint16_t	v = *((uint16_t *	) position); position += sizeof(v);	return SWAP16(v); }$/;"	f	struct:XAtomPackedData
ReadUInt32	.\Utils\XChunkyFileUtils.h	/^	uint32_t			ReadUInt32(void)	{ uint32_t  v = *((uint32_t *	) position); position += sizeof(v);	return SWAP32(v); }$/;"	f	struct:XAtomPackedData
ReadUInt8	.\Utils\XChunkyFileUtils.h	/^	uint8_t				ReadUInt8 (void)	{ uint8_t	v = *((uint8_t *	) position); position += sizeof(v); return v; 		  }$/;"	f	struct:XAtomPackedData
ReadVPFTableHeader	.\VPF\VPFTable.cpp	/^bool	ReadVPFTableHeader(MFMemFile * inFile, VPF_TableDef& outDef)$/;"	f
ReadVector	.\XESCore\MapIO.cpp	/^void ReadVector(IOReader& reader, T& v, F func, const TokenConversionMap& c)$/;"	f
ReadWaterLine	.\Tiger\TigerImport.cpp	/^bool	ReadWaterLine(const vector<string>& tokens, void * ref)$/;"	f
ReadXESFile	.\XESCore\XESIO.cpp	/^void	ReadXESFile($/;"	f
ReadZoningInfo	.\XESCore\Zoning.cpp	/^static bool ReadZoningInfo(const vector<string>& tokens, void * ref)$/;"	f	file:
ReadZoningRule	.\XESCore\Zoning.cpp	/^static bool	ReadZoningRule(const vector<string>& tokens, void * ref)$/;"	f	file:
Reader	.\lib_json\include\json\reader.h	/^   class JSON_API Reader$/;"	c	namespace:Json
Reader	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::Reader( const Features &features )$/;"	f	class:Json::Reader
Reader	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::Reader()$/;"	f	class:Json::Reader
RebaseTriangle	.\XESCore\MeshAlgs.cpp	/^static void RebaseTriangle(CDT& ioMesh, CDT::Face_handle tri, int new_base, CDT::Vertex_handle v1, CDT::Vertex_handle v2, set<CDT::Vertex_handle>& ioModVertices)$/;"	f	file:
RebuildCache	.\WEDEntities\WED_GISChain.cpp	/^void WED_GISChain::RebuildCache(int flags) const$/;"	f	class:WED_GISChain
RebuildCache	.\WEDEntities\WED_GISComposite.cpp	/^void	WED_GISComposite::RebuildCache(int flags) const$/;"	f	class:WED_GISComposite
RebuildCache	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::RebuildCache()$/;"	f	class:WED_LibraryListAdapter
RebuildCache	.\WEDProperties\WED_PropertyTable.cpp	/^void WED_PropertyTable::RebuildCache(void)$/;"	f	class:WED_PropertyTable
RebuildCacheRecursive	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::RebuildCacheRecursive(const string& r, int packType, const string& prefix)$/;"	f	class:WED_LibraryListAdapter
RebuildCacheRecursive	.\WEDProperties\WED_PropertyTable.cpp	/^void WED_PropertyTable::RebuildCacheRecursive(WED_Thing * e, ISelection * sel, set<WED_Thing *> * sel_and_friends)$/;"	f	class:WED_PropertyTable
RebuildChildCache	.\Utils\XCarBoneUtils.cpp	/^void		XCarBones::RebuildChildCache(void)$/;"	f	class:XCarBones
RebuildIndex	.\Utils\XCarBoneUtils.cpp	/^void		XCarBones::RebuildIndex(void)$/;"	f	class:XCarBones
RebuildMap	.\XESCore\MapAlgs.cpp	/^void	RebuildMap($/;"	f
RebuildMenu	.\GUI\GUI_Application.cpp	/^void	GUI_Application::RebuildMenu(GUI_Menu new_menu, const GUI_MenuItem_t	items[])$/;"	f	class:GUI_Application
RecalcActiveCurX	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::RecalcActiveCurX(void)$/;"	f	class:PolyRasterizer
RecalcAspectRatio	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::RecalcAspectRatio(void)$/;"	f	class:WED_MapZoomerNew
RecalcDEM	.\RenderFarmUI\RF_MapView.cpp	/^bool	RF_MapView::RecalcDEM(bool do_relief)$/;"	f	class:RF_MapView
RecalcHeadings	.\WEDMap\WED_CreateToolBase.cpp	/^void		WED_CreateToolBase::RecalcHeadings(void)$/;"	f	class:WED_CreateToolBase
RecalcOGLColors	.\RenderFarmUI\RF_DrawMap.cpp	/^void	RecalcOGLColors(Pmwx& ioMap, ProgressFunc inFunc)$/;"	f
RecalcSize	.\ObjEdit\OE_TexEdWindow.cpp	/^void	OE_TexEdPane::RecalcSize(void)$/;"	f	class:OE_TexEdPane
ReceiveFiles	.\GUI\GUI_Window.h	/^	virtual	void			ReceiveFiles(const vector<string>& inFiles, int inX, int inY) { }$/;"	f	class:GUI_Window
ReceiveFiles	.\UI\XGrinderApp.cpp	/^	virtual	void			ReceiveFiles(const vector<string>& inFiles, int x, int y) { XGrindFiles(inFiles); }$/;"	f	class:XGrinderWin
ReceiveFiles	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::ReceiveFiles(const vector<string>& inFiles, int x, int y)$/;"	f	class:XPWidgetWin
ReceiveFiles	.\XPTools\ViewObj.cpp	/^void			XObjWin::ReceiveFiles(const vector<string>& files, int, int)$/;"	f	class:XObjWin
ReceiveFilesFromDrag	.\UI\XWin.lin.cpp	/^void XWin::ReceiveFilesFromDrag(const vector<string>& inFiles)$/;"	f	class:XWin
ReceiveFilesFromDrag	.\UI\XWin.win.cpp	/^void	XWin::ReceiveFilesFromDrag($/;"	f	class:XWin
ReceiveMessage	.\GUI\GUI_FormWindow.cpp	/^void		GUI_FormWindow::ReceiveMessage($/;"	f	class:GUI_FormWindow
ReceiveMessage	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::ReceiveMessage($/;"	f	class:GUI_ScrollerPane
ReceiveMessage	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::ReceiveMessage($/;"	f	class:GUI_SimpleScroller
ReceiveMessage	.\GUI\GUI_TabPane.cpp	/^void	GUI_TabPane::ReceiveMessage($/;"	f	class:GUI_TabPane
ReceiveMessage	.\GUI\GUI_Table.cpp	/^void		GUI_Header::ReceiveMessage($/;"	f	class:GUI_Header
ReceiveMessage	.\GUI\GUI_Table.cpp	/^void		GUI_Side::ReceiveMessage($/;"	f	class:GUI_Side
ReceiveMessage	.\GUI\GUI_Table.cpp	/^void		GUI_Table::ReceiveMessage($/;"	f	class:GUI_Table
ReceiveMessage	.\GUI\GUI_TextTable.cpp	/^void	GUI_TextTable::ReceiveMessage($/;"	f	class:GUI_TextTable
ReceiveMessage	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::ReceiveMessage($/;"	f	class:RF_MapView
ReceiveMessage	.\WEDCore\WED_LibraryMgr.cpp	/^void	WED_LibraryMgr::ReceiveMessage($/;"	f	class:WED_LibraryMgr
ReceiveMessage	.\WEDCore\WED_Package.cpp	/^void	WED_Package::ReceiveMessage($/;"	f	class:WED_Package
ReceiveMessage	.\WEDCore\WED_ResourceMgr.cpp	/^void	WED_ResourceMgr::ReceiveMessage($/;"	f	class:WED_ResourceMgr
ReceiveMessage	.\WEDImportExport\WED_AptImportDialog.cpp	/^void	WED_AptImportDialog::ReceiveMessage($/;"	f	class:WED_AptImportDialog
ReceiveMessage	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::ReceiveMessage($/;"	f	class:WED_GatewayImportDialog
ReceiveMessage	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::ReceiveMessage($/;"	f	class:WED_LibraryListAdapter
ReceiveMessage	.\WEDLibrary\WED_LibraryPane.cpp	/^void	WED_LibraryPane::ReceiveMessage($/;"	f	class:WED_LibraryPane
ReceiveMessage	.\WEDMap\WED_Map.cpp	/^void		WED_Map::ReceiveMessage($/;"	f	class:WED_Map
ReceiveMessage	.\WEDMap\WED_MapPane.cpp	/^void	WED_MapPane::ReceiveMessage($/;"	f	class:WED_MapPane
ReceiveMessage	.\WEDNetwork\WED_NWInfoLayer.cpp	/^void	WED_NWInfoLayer::ReceiveMessage(GUI_Broadcaster * inSrc,intptr_t inMsg,intptr_t inParam)$/;"	f	class:WED_NWInfoLayer
ReceiveMessage	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void	WED_NWLinkAdapter::ReceiveMessage(GUI_Broadcaster * inSrc,intptr_t inMsg,intptr_t inParam)$/;"	f	class:WED_NWLinkAdapter
ReceiveMessage	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::ReceiveMessage($/;"	f	class:WED_PropertyTable
ReceiveMessage	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::ReceiveMessage($/;"	f	class:WED_TCE
ReceiveMessage	.\WEDTCE\WED_TCEPane.cpp	/^void	WED_TCEPane::ReceiveMessage($/;"	f	class:WED_TCEPane
ReceiveMessage	.\WEDWindows\WED_DocumentWindow.cpp	/^void	WED_DocumentWindow::ReceiveMessage($/;"	f	class:WED_DocumentWindow
ReceiveMessage	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::ReceiveMessage($/;"	f	class:WED_PackageListAdapter
ReceiveMessage	.\WEDWindows\WED_PackageWindow.cpp	/^void	WED_PackageWindow::ReceiveMessage($/;"	f	class:WED_PackageWindow
ReceiveMessage	.\WEDWindows\WED_StartWindow.cpp	/^void	WED_StartWindow::ReceiveMessage($/;"	f	class:WED_StartWindow
ReceiveObject	.\XPTools\ViewObj.cpp	/^void			XObjWin::ReceiveObject(double x, double y, double z, double r, const string& obj)$/;"	f	class:XObjWin
ReceivedRelease	.\Network\PCSBSocket.lin.cpp	/^bool PCSBSocket::ReceivedRelease(void)$/;"	f	class:PCSBSocket
ReceivedRelease	.\Network\PCSBSocket.win.cpp	/^bool PCSBSocket::ReceivedRelease(void)$/;"	f	class:PCSBSocket
RecomputeButtonEnables	.\WEDWindows\WED_StartWindow.cpp	/^void			WED_StartWindow::RecomputeButtonEnables()$/;"	f	class:WED_StartWindow
RecomputeScrollbars	.\ObjEdit\OE_Scroller.cpp	/^void	OE_Scroller::RecomputeScrollbars()$/;"	f	class:OE_Scroller
RectFrame	.\AC3DPlugins\x86_Win32 DLL.cpp	/^IMPEXP int RectFrame(HDC hdc, int x1, int y1, int x2, int y2, int t)$/;"	f
Redo	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::Redo(void)$/;"	f	class:WED_UndoMgr
ReducePath	.\WEDCore\WED_Document.cpp	/^void	WED_Document::ReducePath(string& io_path)$/;"	f	class:WED_Document
ReducePath	.\WEDCore\WED_PackageMgr.cpp	/^string		WED_PackageMgr::ReducePath(const string& package, const string& full_file) const$/;"	f	class:WED_PackageMgr
ReduceStripSegments	.\Utils\RoadNetUtils.cpp	/^static	void	ReduceStripSegments($/;"	f	file:
ReduceToBorder	.\XESCore\DEMAlgs.cpp	/^void	ReduceToBorder(const DEMGeo& inDEM, DEMGeo& outDEM)$/;"	f
ReduceToWaterBodies	.\XESCore\MapTopology.cpp	/^void ReduceToWaterBodies(Pmwx& ioMap)$/;"	f
Reference	.\Utils\XCull.h	/^	typedef typename Traits::Reference	Reference;$/;"	t	class:XCull
Refresh	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::Refresh(void)$/;"	f	class:GUI_Pane
Refresh	.\GUI\GUI_Window.cpp	/^void		GUI_Window::Refresh(void)$/;"	f	class:GUI_Window
RegionalizationVector	.\XESCore\DEMTables.h	/^typedef vector<Regionalization_t>		RegionalizationVector;$/;"	t
Regionalization_t	.\XESCore\DEMTables.h	/^struct	Regionalization_t {$/;"	s
Register	.\WEDCore\WED_Persistent.cpp	/^void WED_Persistent::Register($/;"	f	class:WED_Persistent
RegisterAGResource	.\XESCore\Zoning.cpp	/^inline int RegisterAGResource(const string& r)$/;"	f
RegisterAccel	.\GUI\GUI_Application.cpp	/^void	RegisterAccel(const ACCEL& inAccel)$/;"	f
RegisterAccel	.\UI\XWidgetApp.cpp	/^void	RegisterAccel(const ACCEL& inAccel)$/;"	f
RegisterClass	.\UI\XWin.win.cpp	/^void	XWin::RegisterClass(HINSTANCE hInstance)$/;"	f	class:XWin
RegisterCoreCmds	.\XESTools\GISTool_CoreCmds.cpp	/^void	RegisterCoreCmds(void)$/;"	f
RegisterDemCmds	.\XESTools\GISTool_DemCmds.cpp	/^void	RegisterDemCmds(void)$/;"	f
RegisterDumpCmds	.\XESTools\GISTool_DumpCmds.cpp	/^void RegisterDumpCmds(void)$/;"	f
RegisterEditCommands	.\RenderFarmUI\RF_EditCommands.cpp	/^void	RegisterEditCommands(void)$/;"	f
RegisterLineHandler	.\XESCore\ConfigSystem.cpp	/^bool	RegisterLineHandler($/;"	f
RegisterMiscCmds	.\XESTools\GISTool_MiscCmds.cpp	/^void	RegisterMiscCmds(void)$/;"	f
RegisterNotifiable	.\GUI\GUI_Commander.cpp	/^void		GUI_Commander::RegisterNotifiable(GUI_Commander_Notifiable * notif)$/;"	f	class:GUI_Commander
RegisterObsCmds	.\XESTools\GISTool_ObsCmds.cpp	/^void	RegisterObsCmds(void)$/;"	f
RegisterProcessingCmds	.\XESTools\GISTool_ProcessingCmds.cpp	/^void	RegisterProcessingCmds(void)$/;"	f
RegisterProcessingCommands	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^void	RegisterProcessingCommands(void)$/;"	f
RegisterSpecialCommands	.\RenderFarmUI\RF_SpecialCommands.cpp	/^void	RegisterSpecialCommands(void)$/;"	f
RegisterVectorCmds	.\XESTools\GISTool_VectorCmds.cpp	/^void	RegisterVectorCmds(void)$/;"	f
Release	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP_(ULONG) GUI_SimpleDataObject::Release()$/;"	f	class:GUI_SimpleDataObject
Release	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP_(ULONG) GUI_SimpleEnumFORMATETC::Release()$/;"	f	class:GUI_SimpleEnumFORMATETC
Release	.\GUI\GUI_Window.cpp	/^STDMETHODIMP_(ULONG) GUI_Window_DND::Release(void)$/;"	f	class:GUI_Window_DND
Release	.\GUI\GUI_Window.cpp	/^ULONG GUI_DropSource::Release()$/;"	f	class:GUI_DropSource
Release	.\Network\PCSBSocket.lin.cpp	/^void PCSBSocket::Release(void)$/;"	f	class:PCSBSocket
Release	.\Network\PCSBSocket.win.cpp	/^void PCSBSocket::Release(void)$/;"	f	class:PCSBSocket
Release	.\UI\XWin32DND.cpp	/^STDMETHODIMP_(ULONG) CDropTarget::Release(void)$/;"	f	class:CDropTarget
ReleaseMemory	.\WEDCore\WED_UndoMgr.cpp	/^bool	WED_UndoMgr::ReleaseMemory(void)$/;"	f	class:WED_UndoMgr
ReloadTexture	.\ObjEdit\OE_TexMgr.cpp	/^void		ReloadTexture(const string& inName)$/;"	f
ReloadTexture	.\XPTools\ViewObj.cpp	/^void		ReloadTexture(const string& inName)$/;"	f
RemapEnumDEM	.\XESCore\DEMIO.cpp	/^void	RemapEnumDEM(	DEMGeo& ioMap, const TokenConversionMap& inMap)$/;"	f
RemapPolygonCoords	.\RenderFarmUI\RF_DrawMap.cpp	/^void	RemapPolygonCoords(Polygon2& p,$/;"	f
RememberHalfedge	.\VPF\VPFImport.cpp	/^class	RememberHalfedge : public CGAL::Arr_observer<Arrangement_2> {$/;"	c	file:
RemoveChild	.\WEDEntities\WED_Entity.cpp	/^void	WED_Entity::RemoveChild(int id)$/;"	f	class:WED_Entity
RemoveChild	.\WEDEntities\WED_Thing.cpp	/^void				WED_Thing::RemoveChild(int id)$/;"	f	class:WED_Thing
RemoveDupes	.\XESCore\MapBuffer.cpp	/^void	RemoveDupes(Polygon_2& io_p)$/;"	f
RemoveDuplicates	.\XESTools\GISTool_ProcessingCmds.cpp	/^void	RemoveDuplicates(Pmwx::Face_iterator inFace)$/;"	f
RemoveDuplicatesAll	.\XESTools\GISTool_ProcessingCmds.cpp	/^void	RemoveDuplicatesAll($/;"	f
RemoveFromQuadStripBack	.\Utils\CompGeomUtils.cpp	/^void	RemoveFromQuadStripBack($/;"	f
RemoveFromQuadStripFront	.\Utils\CompGeomUtils.cpp	/^void	RemoveFromQuadStripFront($/;"	f
RemoveIslands	.\XESCore\MapAlgs.cpp	/^int RemoveIslands(Pmwx& io_map, double max_area)$/;"	f
RemoveListener	.\GUI\GUI_Broadcaster.cpp	/^void	GUI_Broadcaster::RemoveListener(GUI_Listener * inListener)$/;"	f	class:GUI_Broadcaster
RemoveNewHandler	.\GUI\GUI_MemoryHog.cpp	/^void	GUI_MemoryHog::RemoveNewHandler(void)$/;"	f	class:GUI_MemoryHog
RemoveObject	.\WEDCore\WED_Archive.cpp	/^void		WED_Archive::RemoveObject(WED_Persistent * inObject)$/;"	f	class:WED_Archive
RemoveOutsets	.\XESCore\MapAlgs.cpp	/^int RemoveOutsets(Pmwx& io_map, double max_len_sq, double max_area)$/;"	f
RemoveSource	.\WEDEntities\WED_Thing.cpp	/^void				WED_Thing::RemoveSource(WED_Thing * src)$/;"	f	class:WED_Thing
RemoveUnboundedWater	.\XESCore\MapTopology.cpp	/^int RemoveUnboundedWater(Pmwx& ioMap)$/;"	f
RemoveViewer	.\WEDEntities\WED_Entity.cpp	/^void	WED_Entity::RemoveViewer(int id)$/;"	f	class:WED_Entity
RemoveViewer	.\WEDEntities\WED_Thing.cpp	/^void		WED_Thing::RemoveViewer(int id)$/;"	f	class:WED_Thing
Remove_Queue	.\XESCore\MapHelpers.h	/^	typedef pqueue<double, typename Arr::Vertex_handle>				Remove_Queue;$/;"	t	class:arrangement_simplifier
RenameCustomPackage	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::RenameCustomPackage(int n, const string& new_name)$/;"	f	class:WED_PackageMgr
RepAreaIndex	.\XESCore\ObjTables.h	/^typedef multimap<float, int, greater<float> >		RepAreaIndex;$/;"	t
RepFeatureIndex	.\XESCore\ObjTables.h	/^typedef hash_map<int, int>							RepFeatureIndex;$/;"	t
RepInfo_t	.\XESCore\ObjTables.h	/^struct	RepInfo_t {$/;"	s
RepTable	.\XESCore\ObjTables.h	/^typedef	vector<RepInfo_t>							RepTable;$/;"	t
RepTableTerrainIndex	.\XESCore\ObjTables.h	/^typedef hash_map<int, pair<int, int> >				RepTableTerrainIndex;$/;"	t
RepUsageTable	.\XESCore\ObjTables.h	/^typedef hash_map<int, int>							RepUsageTable;$/;"	t
Repaginate	.\OGLE\ogle.cpp	/^void			OGLE::Repaginate(void)$/;"	f	class:OGLE
ReplaceSource	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::ReplaceSource(WED_Thing * old, WED_Thing * rep)$/;"	f	class:WED_Thing
ReplaceText	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::ReplaceText($/;"	f	class:GUI_TextField
ReplaceTextCB	.\OGLE\ogle.cpp	/^void			OGLE::ReplaceTextCB($/;"	f	class:OGLE
ReplaceText_f	.\OGLE\ogle.h	/^	void			(* ReplaceText_f)($/;"	m	struct:OGLE_Callbacks
ResString	.\RenderFarmUI\RF_TerraTool.cpp	/^const char *	RF_TerraTool::ResString(void)$/;"	f	class:RF_TerraTool
ResString	.\WEDMap\WED_TerraserverLayer.cpp	/^const char *	WED_TerraserverLayer::ResString(int res)$/;"	f	class:WED_TerraserverLayer
ResampleDEM	.\XESCore\DEMAlgs.cpp	/^void ResampleDEM(const DEMGeo& inSrc, DEMGeo& inDst)$/;"	f
ResampleDEMmedian	.\XESCore\DEMAlgs.cpp	/^void ResampleDEMmedian(const DEMGeo& inSrc, DEMGeo& inDst, int radius)$/;"	f
Rescale	.\WEDEntities\WED_GISBoundingBox.cpp	/^void			WED_GISBoundingBox::Rescale(GISLayer_t l,const Bbox2& old_bounds,const Bbox2& new_bounds)$/;"	f	class:WED_GISBoundingBox
Rescale	.\WEDEntities\WED_GISChain.cpp	/^void			WED_GISChain::Rescale			(GISLayer_t l,const Bbox2& old_bounds,const Bbox2& new_bounds)$/;"	f	class:WED_GISChain
Rescale	.\WEDEntities\WED_GISComposite.cpp	/^void			WED_GISComposite::Rescale(GISLayer_t l, const Bbox2& old_bounds,const Bbox2& new_bounds)$/;"	f	class:WED_GISComposite
Rescale	.\WEDEntities\WED_GISEdge.cpp	/^void			WED_GISEdge::Rescale			(GISLayer_t l,const Bbox2& old_bounds,const Bbox2& new_bounds)$/;"	f	class:WED_GISEdge
Rescale	.\WEDEntities\WED_GISLine.cpp	/^void	WED_GISLine::Rescale			(GISLayer_t l,const Bbox2& old_bounds,const Bbox2& new_bounds)$/;"	f	class:WED_GISLine
Rescale	.\WEDEntities\WED_GISLine_Width.cpp	/^void			WED_GISLine_Width::Rescale(GISLayer_t l,  $/;"	f	class:WED_GISLine_Width
Rescale	.\WEDEntities\WED_GISPoint.cpp	/^void			WED_GISPoint::Rescale			(GISLayer_t l,const Bbox2& old_bounds, const Bbox2& new_bounds)$/;"	f	class:WED_GISPoint
Rescale	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void			WED_GISPoint_Bezier::Rescale			(GISLayer_t l, const Bbox2& old_bounds, const Bbox2& new_bounds)$/;"	f	class:WED_GISPoint_Bezier
Rescale	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void			WED_GISPoint_HeadingWidthLength::Rescale(GISLayer_t la,$/;"	f	class:WED_GISPoint_HeadingWidthLength
Rescale	.\WEDEntities\WED_GISPolygon.cpp	/^void			WED_GISPolygon::Rescale(GISLayer_t l,const Bbox2& old_bounds,const Bbox2& new_bounds)$/;"	f	class:WED_GISPolygon
Rescale	.\WEDEntities\WED_TextureBezierNode.cpp	/^void			WED_TextureBezierNode::Rescale			(GISLayer_t l, const Bbox2& old_bounds, const Bbox2& new_bounds)$/;"	f	class:WED_TextureBezierNode
Rescan	.\WEDCore\WED_LibraryMgr.cpp	/^void		WED_LibraryMgr::Rescan()$/;"	f	class:WED_LibraryMgr
Rescan	.\WEDCore\WED_Package.cpp	/^void			WED_Package::Rescan(void)$/;"	f	class:WED_Package
Rescan	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::Rescan(void)$/;"	f	class:WED_PackageMgr
Reset	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleEnumFORMATETC::Reset			(void)$/;"	f	class:GUI_SimpleEnumFORMATETC
Reset	.\GUI\GUI_FormWindow.cpp	/^void		GUI_FormWindow::Reset($/;"	f	class:GUI_FormWindow
Reset	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::Reset(void)$/;"	f	class:GUI_GraphState
Reset	.\Utils\XChunkyFileUtils.h	/^	void	Reset(void)			{ position = begin + sizeof(XAtomHeader_t); }$/;"	f	struct:XAtomPackedData
Reset	.\Utils\XCull_inline.h	/^XCull<__Traits>::Reset(unsigned int 	inLayers)$/;"	f	class:XCull
ResetFakeFarClippingPlane	.\Utils\HLCamera.cpp	/^void		xcam_class::ResetFakeFarClippingPlane(void)$/;"	f	class:xcam_class
ResetHitCount	.\DSF\tri_stripper_101\cache_simulator.h	/^inline void cache_simulator::ResetHitCount() {$/;"	f	class:triangle_stripper::cache_simulator
ResetMatrices	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::ResetMatrices(void)$/;"	f	class:OE_Zoomer3d
ResetRead	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::ResetRead(void)$/;"	f	class:WED_Buffer
ResetRead	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::ResetRead(void)$/;"	f	class:WED_FastBuffer
ResetToIdentity	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::ResetToIdentity(void)$/;"	f	class:OE_Zoomer3d
ResetUsages	.\XESCore\ObjTables.cpp	/^void ResetUsages(void)$/;"	f
Resize	.\UI\XWin.lin.cpp	/^void XWin::Resize(int inWidth, int inHeight)$/;"	f	class:XWin
Resize	.\UI\XWin.win.cpp	/^void			XWin::Resize(int inWidth, int inHeight)$/;"	f	class:XWin
ResizeCorner	.\WEDEntities\WED_GISBoundingBox.cpp	/^void	WED_GISBoundingBox::ResizeCorner(GISLayer_t l,int corner, const Vector2& delta, bool symetric)$/;"	f	class:WED_GISBoundingBox
ResizeCorner	.\WEDEntities\WED_GISLine_Width.cpp	/^void	WED_GISLine_Width::ResizeCorner(GISLayer_t layer,  int corner, const Vector2& delta, bool symetric)$/;"	f	class:WED_GISLine_Width
ResizeCorner	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::ResizeCorner(GISLayer_t la,int corner, const Vector2& delta, bool symetric)$/;"	f	class:WED_GISPoint_HeadingWidthLength
ResizeCorner	.\WEDEntities\WED_OverlayImage.cpp	/^void	WED_OverlayImage::ResizeCorner(GISLayer_t l,int corner, const Vector2& delta, bool symetric)$/;"	f	class:WED_OverlayImage
ResizeSide	.\WEDEntities\WED_GISBoundingBox.cpp	/^void	WED_GISBoundingBox::ResizeSide(GISLayer_t l,int side, const Vector2& delta, bool symetric)$/;"	f	class:WED_GISBoundingBox
ResizeSide	.\WEDEntities\WED_GISLine_Width.cpp	/^void	WED_GISLine_Width::ResizeSide(GISLayer_t l,  int side, const Vector2& delta, bool symetric)$/;"	f	class:WED_GISLine_Width
ResizeSide	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::ResizeSide(GISLayer_t la,int side, const Vector2& delta, bool symetric)$/;"	f	class:WED_GISPoint_HeadingWidthLength
ResizeSide	.\WEDEntities\WED_OverlayImage.cpp	/^void WED_OverlayImage::ResizeSide(GISLayer_t l,int side, const Vector2& delta, bool symetric)$/;"	f	class:WED_OverlayImage
Resized	.\UI\XGrinderApp.cpp	/^	virtual	void			Resized(int inWidth, int inHeight) { }$/;"	f	class:XGrinderWin
Resized	.\UI\XWin.lin.cpp	/^void XWin::Resized(int inWidth, int inHeight)$/;"	f	class:XWin
Resized	.\UI\XWinGL.lin.cpp	/^void                    XWinGL::Resized(int w, int h)$/;"	f	class:XWinGL
Resized	.\UI\XWinGL.win.cpp	/^void			XWinGL::Resized(int inWidth, int inHeight)$/;"	f	class:XWinGL
Resolver_Find	.\WEDCore\WED_Document.cpp	/^IBase *	WED_Document::Resolver_Find(const char * in_path)$/;"	f	class:WED_Document
RestoreDefaultProcessing	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void RestoreDefaultProcessing(XPWidgetID)$/;"	f	file:
Result	.\XESCore\BlockAlgs.cpp	/^	typedef std::pair<Block_2::Halfedge_handle, bool>            Result;$/;"	t	class:check_block_visitor	file:
Result	.\XESCore\MapHelpers.h	/^	typedef std::pair<typename Arr::Halfedge_handle, bool>            Result;$/;"	t	class:check_split_zone_visitor
ResyncExportDialog	.\RenderFarmUI\RF_Export.cpp	/^void	ResyncExportDialog(void)$/;"	f
ResyncImportDialog	.\RenderFarmUI\RF_Import.cpp	/^void	ResyncImportDialog(void)$/;"	f
ResyncScrollBars	.\ObjEdit\(old)\OE_TexEd.cpp	/^void	ResyncScrollBars(XPWidgetID me)$/;"	f
ResyncTexInfo	.\ObjEdit\(old)\OE_TexInfo.cpp	/^void	ResyncTexInfo(XPWidgetID me, bool inPush, long inWho)$/;"	f
Retry	.\Network\HTTPClient.cpp	/^void HTTPRequest::Retry(HTTPConnection *	inConnection)$/;"	f	class:HTTPRequest
RevealCell	.\GUI\GUI_Table.cpp	/^void	GUI_Table::RevealCell(int x, int y)$/;"	f	class:GUI_Table
RevealCol	.\GUI\GUI_Table.cpp	/^void	GUI_Table::RevealCol(int x)$/;"	f	class:GUI_Table
RevealRow	.\GUI\GUI_Table.cpp	/^void	GUI_Table::RevealRow(int y)$/;"	f	class:GUI_Table
RevealSelection	.\OGLE\ogle.cpp	/^void			OGLE::RevealSelection(void)$/;"	f	class:OGLE
Reverse	.\Utils\CompGeomUtils.cpp	/^Point2	CoordTranslator2::Reverse(const Point2& input) const$/;"	f	class:CoordTranslator2
Reverse	.\WEDEntities\WED_GISChain.cpp	/^void WED_GISChain::Reverse(GISLayer_t l)$/;"	f	class:WED_GISChain
Reverse	.\WEDEntities\WED_GISEdge.cpp	/^void WED_GISEdge::Reverse(GISLayer_t l)$/;"	f	class:WED_GISEdge
Reverse	.\WEDEntities\WED_GISLine.cpp	/^void WED_GISLine::Reverse(GISLayer_t l)$/;"	f	class:WED_GISLine
Reverse	.\WEDEntities\WED_GISPolygon.cpp	/^void WED_GISPolygon::Reverse(GISLayer_t l)$/;"	f	class:WED_GISPolygon
Reverse	.\XESCore\CGALDefs.h	/^ inline Point_2	CoordTranslator_2::Reverse(const Point_2& input) const$/;"	f	class:CoordTranslator_2
ReverseQuadStrip	.\Utils\CompGeomUtils.cpp	/^void	ReverseQuadStrip($/;"	f
Revert	.\WEDCore\WED_Document.cpp	/^void	WED_Document::Revert(void)$/;"	f	class:WED_Document
RingInset_t	.\XESCore\MapPolygon.h	/^typedef	vector<double>			RingInset_t;$/;"	t
RiverPtsConnected	.\XESCore\Hydro.cpp	/^bool	RiverPtsConnected(int x1, int y1, int x2, int y2, const DEMGeo& hydro_dir, const DEMGeo& hydro_flw, const DEMGeo& hydro_elev, const DEMGeo& is_river)$/;"	f
RiverPtsConnectedAngle	.\XESCore\Hydro.cpp	/^int		RiverPtsConnectedAngle(int x1, int y1, int x2, int y2)$/;"	f
RoadGeneralProps	.\XESCore\NetTables.cpp	/^bool	RoadGeneralProps(const vector<string>& tokens, void * ref)$/;"	f
RoadInfo_t	.\Tiger\(TigerImport Backup.cpp).cpp	/^struct	RoadInfo_t {$/;"	s	file:
RoadInfo_t	.\Tiger\TigerImport.cpp	/^struct	RoadInfo_t {$/;"	s	file:
RoadPrefs_t	.\XESCore\TensorRoads.h	/^struct	RoadPrefs_t {$/;"	s
Road_IsAccess	.\XESCore\ParamDefs.h	/^	inline	int	Road_IsAccess  (int x) { return x > road_Start_Access    && x < road_End_Access;    }$/;"	f
Road_IsDam	.\XESCore\ParamDefs.h	/^	inline	int Road_IsDam		(int x){ return x == dam_Generic; }$/;"	f
Road_IsHighway	.\XESCore\ParamDefs.h	/^	inline	int	Road_IsHighway (int x) { return x > road_Start_Highway   && x < road_End_Highway;   }$/;"	f
Road_IsLocal	.\XESCore\ParamDefs.h	/^	inline	int	Road_IsLocal   (int x) { return x > road_Start_LocalRoad && x < road_End_LocalRoad; }$/;"	f
Road_IsMainDrag	.\XESCore\ParamDefs.h	/^	inline	int	Road_IsMainDrag(int x) { return x > road_Start_MainDrag  && x < road_End_MainDrag;  }$/;"	f
Road_IsPowerline	.\XESCore\ParamDefs.h	/^	inline	int Road_IsPowerline(int x){ return x == powerline_Generic; }$/;"	f
Road_IsTrain	.\XESCore\ParamDefs.h	/^	inline	int	Road_IsTrain   (int x) { return x > train_Start			 && x < train_End;			}$/;"	f
Road_IsWalkway	.\XESCore\ParamDefs.h	/^	inline	int Road_IsWalkway (int x) { return x > road_Start_Walkway   && x < road_End_Walkway;   }$/;"	f
RoadsForThisFace	.\XESCore\TensorRoads.cpp	/^inline bool RoadsForThisFace(Face_handle f)$/;"	f
RollDice	.\Utils\XUtils.cpp	/^bool	RollDice(double inProb)$/;"	f
Rotate	.\Utils\HLCamera.cpp	/^void		xcam_class::Rotate(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:xcam_class
Rotate	.\WEDEntities\WED_GISBoundingBox.cpp	/^void			WED_GISBoundingBox::Rotate			(GISLayer_t l,const Point2& center, double angle)$/;"	f	class:WED_GISBoundingBox
Rotate	.\WEDEntities\WED_GISChain.cpp	/^void			WED_GISChain::Rotate			(GISLayer_t l,const Point2& ctr, double angle)$/;"	f	class:WED_GISChain
Rotate	.\WEDEntities\WED_GISComposite.cpp	/^void			WED_GISComposite::Rotate(GISLayer_t l, const Point2& ctr, double angle)$/;"	f	class:WED_GISComposite
Rotate	.\WEDEntities\WED_GISEdge.cpp	/^void			WED_GISEdge::Rotate			(GISLayer_t l,const Point2& ctr, double a)$/;"	f	class:WED_GISEdge
Rotate	.\WEDEntities\WED_GISLine.cpp	/^void	WED_GISLine::Rotate			(GISLayer_t l,const Point2& ctr, double angle)$/;"	f	class:WED_GISLine
Rotate	.\WEDEntities\WED_GISPoint.cpp	/^void			WED_GISPoint::Rotate			(GISLayer_t l, const Point2& ctr, double a)$/;"	f	class:WED_GISPoint
Rotate	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void			WED_GISPoint_Bezier::Rotate			(GISLayer_t l, const Point2& ctr, double a)$/;"	f	class:WED_GISPoint_Bezier
Rotate	.\WEDEntities\WED_GISPoint_Heading.cpp	/^void	WED_GISPoint_Heading::Rotate			(GISLayer_t l,const Point2& center, double angle)$/;"	f	class:WED_GISPoint_Heading
Rotate	.\WEDEntities\WED_GISPolygon.cpp	/^void			WED_GISPolygon::Rotate(GISLayer_t l,const Point2& ctr, double angle)$/;"	f	class:WED_GISPolygon
Rotate	.\WEDEntities\WED_TextureBezierNode.cpp	/^void			WED_TextureBezierNode::Rotate			(GISLayer_t l, const Point2& ctr, double a)$/;"	f	class:WED_TextureBezierNode
RotateBitmapCCW	.\Utils\BitmapUtils.cpp	/^void	RotateBitmapCCW($/;"	f
RowForY	.\GUI\GUI_SimpleTableGeometry.cpp	/^int			GUI_SimpleTableGeometry::RowForY(int n)$/;"	f	class:GUI_SimpleTableGeometry
RowForY	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int			WED_ToolInfoAdapter::RowForY(int n)$/;"	f	class:WED_ToolInfoAdapter
RowForY	.\WEDWindows\WED_PackageListAdapter.cpp	/^int			WED_PackageListAdapter::RowForY(int n)$/;"	f	class:WED_PackageListAdapter
Run	.\GUI\GUI_Application.cpp	/^void			GUI_Application::Run(void)$/;"	f	class:GUI_Application
RunInstaller	.\Installer\InstallerRun.cpp	/^void	RunInstaller(const char * inBasePath)$/;"	f
RunScript	.\Installer\InstallerScript.cpp	/^void RunScript(FILE * script, const char * path)$/;"	f
Runner	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::Runner()$/;"	f	class:JsonTest::Runner
Runner	.\lib_json\src\test_lib_json\jsontest.h	/^   class Runner$/;"	c	namespace:JsonTest
RwyInfo	.\RawImport\AptElev.h	/^struct	RwyInfo {$/;"	s
RwyInfoMap	.\RawImport\AptElev.h	/^typedef map<int, RwyInfoVector>	RwyInfoMap;$/;"	t
RwyInfoVector	.\RawImport\AptElev.h	/^typedef vector<RwyInfo>	RwyInfoVector;$/;"	t
S11	.\Utils\md5.c	192;"	d	file:
S12	.\Utils\md5.c	193;"	d	file:
S13	.\Utils\md5.c	194;"	d	file:
S14	.\Utils\md5.c	195;"	d	file:
S21	.\Utils\md5.c	214;"	d	file:
S22	.\Utils\md5.c	215;"	d	file:
S23	.\Utils\md5.c	216;"	d	file:
S24	.\Utils\md5.c	217;"	d	file:
S31	.\Utils\md5.c	236;"	d	file:
S32	.\Utils\md5.c	237;"	d	file:
S33	.\Utils\md5.c	238;"	d	file:
S34	.\Utils\md5.c	239;"	d	file:
S41	.\Utils\md5.c	258;"	d	file:
S42	.\Utils\md5.c	259;"	d	file:
S43	.\Utils\md5.c	260;"	d	file:
S44	.\Utils\md5.c	261;"	d	file:
SAFE_AVERAGE	.\XESCore\MeshAlgs.cpp	/^inline float SAFE_AVERAGE(float a, float b, float c)$/;"	f
SAFE_CAST	.\Interfaces\IBase.h	69;"	d
SAFE_MAX	.\XESCore\MeshAlgs.cpp	/^inline float SAFE_MAX(float a, float b, float c)$/;"	f
SAFE_VECTORS	.\Obj\XDefs.h	82;"	d
SAMPLE_RANGE	.\XESCore\MeshAlgs_old.cpp	157;"	d	file:
SAVE_ON_HDD	.\WEDImportExport\WED_GatewayImport.cpp	89;"	d	file:
SB_BuildMetrix	.\GUI\GUI_ScrollBar.cpp	/^static int SB_BuildMetrix($/;"	f	file:
SCENERYPACKAGES_H	.\XESCore\SceneryPackages.h	25;"	d
SCNFOLDERNAME	.\WEDXPlugin\WED_XPluginMgr.cpp	35;"	d	file:
SCoordToX	.\ObjEdit\OE_TexEdWindow.cpp	/^float		OE_TexEdPane::SCoordToX(float inX)$/;"	f	class:OE_TexEdPane
SDTSDirectory	.\SDTS\SDTSRead.cpp	/^SDTSDirectory::SDTSDirectory(const char * inContainerPath, const char * inExternal)$/;"	f	class:SDTSDirectory
SDTSDirectory	.\SDTS\SDTSRead.h	/^class	SDTSDirectory {$/;"	c
SDTSErrorType	.\SDTS\SDTSReadTVP.h	/^enum SDTSErrorType {$/;"	g
SDTSException	.\SDTS\SDTSReadTVP.cpp	/^SDTSException::SDTSException(SDTSErrorType errType, const ForeignKey& theKey, const ForeignKey& us)$/;"	f	class:SDTSException
SDTSException	.\SDTS\SDTSReadTVP.cpp	/^SDTSException::SDTSException(SDTSErrorType errType, const ForeignKey& theKey, const char * info)$/;"	f	class:SDTSException
SDTSException	.\SDTS\SDTSReadTVP.cpp	/^SDTSException::SDTSException(SDTSErrorType errType, const char * s1 , const char * s2)$/;"	f	class:SDTSException
SDTSException	.\SDTS\SDTSReadTVP.cpp	/^SDTSException::SDTSException(SDTSErrorType errType, const sb_Spatial& addr)$/;"	f	class:SDTSException
SDTSException	.\SDTS\SDTSReadTVP.cpp	/^SDTSException::SDTSException(SDTSErrorType errType, const sc_Record& theRecord, const char * info)$/;"	f	class:SDTSException
SDTSException	.\SDTS\SDTSReadTVP.h	/^class	SDTSException : public exception {$/;"	c
SDTSModuleIterator	.\SDTS\SDTSRead.cpp	/^SDTSModuleIterator::SDTSModuleIterator(MFMemFile * inFile, sio_8211_converter_dictionary * conv) :$/;"	f	class:SDTSModuleIterator
SDTSModuleIterator	.\SDTS\SDTSRead.h	/^class	SDTSModuleIterator {$/;"	c
SDTSModuleIteratorImp	.\SDTS\SDTSRead.cpp	/^	SDTSModuleIteratorImp(MFMemFile * mf, sio_8211_converter_dictionary * conv) :$/;"	f	struct:SDTSModuleIterator::SDTSModuleIteratorImp
SDTSModuleIteratorImp	.\SDTS\SDTSRead.cpp	/^struct	SDTSModuleIterator::SDTSModuleIteratorImp {$/;"	s	class:SDTSModuleIterator	file:
SDTSREADTVP_H	.\SDTS\SDTSReadTVP.h	24;"	d
SDTSREAD_H	.\SDTS\SDTSRead.h	24;"	d
SEEK_CUR	.\RawImport\gshhs.h	80;"	d
SEEK_CUR	.\Utils\unzip.c	61;"	d	file:
SEEK_CUR	.\Utils\zip.c	59;"	d	file:
SEEK_END	.\Utils\unzip.c	65;"	d	file:
SEEK_END	.\Utils\zip.c	63;"	d	file:
SEEK_SET	.\Utils\unzip.c	69;"	d	file:
SEEK_SET	.\Utils\zip.c	67;"	d	file:
SEGMENT2	.\Obj\XDefs.h	275;"	d
SET_FLOAT_WORD	.\Obj\XObjBuilder.cpp	47;"	d	file:
SHADE_TRIS	.\RenderFarmUI\RF_MapView.cpp	91;"	d	file:
SHOW_BEZIERS	.\XESCore\DSFBuilder.cpp	93;"	d	file:
SHOW_FPS	.\WEDMap\WED_Map.cpp	61;"	d	file:
SHOW_GENERATED_ROADS	.\XESCore\TensorRoads.cpp	58;"	d	file:
SHOW_RAW_RING	.\XESCore\MapBuffer.cpp	36;"	d	file:
SHOW_REMOVALS	.\XESCore\MapAlgs.cpp	54;"	d	file:
SHOW_ROAD_RESTRICT	.\XESCore\TensorRoads.cpp	52;"	d	file:
SHOW_STEPS	.\XESCore\MeshAlgs.cpp	78;"	d	file:
SHOW_VERTEX_CHOICE	.\XESCore\MapBuffer.cpp	39;"	d	file:
SIGMAS_NEEDED	.\XESCore\DEMAlgs.cpp	2050;"	d	file:
SIMPLEIO_H	.\XESCore\SimpleIO.h	24;"	d
SIMPLE_PROPERTY_FLT	.\AC3DPlugins\obj_editor.cpp	182;"	d	file:
SIMPLE_PROPERTY_FLT	.\AC3DPlugins\obj_editor.cpp	194;"	d	file:
SIMPLE_PROPERTY_FLT	.\AC3DPlugins\obj_editor.cpp	376;"	d	file:
SIMPLE_PROPERTY_FLT	.\AC3DPlugins\obj_editor.cpp	408;"	d	file:
SIMPLE_PROPERTY_FLT	.\AC3DPlugins\obj_editor.cpp	431;"	d	file:
SIMPLE_PROPERTY_FLT	.\AC3DPlugins\obj_editor.cpp	456;"	d	file:
SIMPLE_PROPERTY_INT	.\AC3DPlugins\obj_editor.cpp	177;"	d	file:
SIMPLE_PROPERTY_INT	.\AC3DPlugins\obj_editor.cpp	193;"	d	file:
SIMPLE_PROPERTY_INT	.\AC3DPlugins\obj_editor.cpp	374;"	d	file:
SIMPLE_PROPERTY_INT	.\AC3DPlugins\obj_editor.cpp	407;"	d	file:
SIMPLE_PROPERTY_INT	.\AC3DPlugins\obj_editor.cpp	429;"	d	file:
SIMPLE_PROPERTY_INT	.\AC3DPlugins\obj_editor.cpp	455;"	d	file:
SIMPLE_PROPERTY_MAPPINGS_ALL	.\AC3DPlugins\obj_editor.cpp	96;"	d	file:
SIMPLE_PROPERTY_MAPPINGS_GRP	.\AC3DPlugins\obj_editor.cpp	132;"	d	file:
SIMPLE_PROPERTY_MAPPINGS_LGT	.\AC3DPlugins\obj_editor.cpp	138;"	d	file:
SIMPLE_PROPERTY_MAPPINGS_OBJ	.\AC3DPlugins\obj_editor.cpp	99;"	d	file:
SIMPLE_PROPERTY_STR	.\AC3DPlugins\obj_editor.cpp	172;"	d	file:
SIMPLE_PROPERTY_STR	.\AC3DPlugins\obj_editor.cpp	192;"	d	file:
SIMPLE_PROPERTY_STR	.\AC3DPlugins\obj_editor.cpp	372;"	d	file:
SIMPLE_PROPERTY_STR	.\AC3DPlugins\obj_editor.cpp	406;"	d	file:
SIMPLE_PROPERTY_STR	.\AC3DPlugins\obj_editor.cpp	427;"	d	file:
SIMPLE_PROPERTY_STR	.\AC3DPlugins\obj_editor.cpp	454;"	d	file:
SIZECENTRALDIRITEM	.\Utils\unzip.c	54;"	d	file:
SIZECENTRALHEADER	.\Utils\zip.c	83;"	d	file:
SIZEDATA_INDATABLOCK	.\Utils\zip.c	74;"	d	file:
SIZEZIPLOCALHEADER	.\Utils\unzip.c	55;"	d	file:
SKELETON_H	.\Utils\Skeleton.h	25;"	d
SK_AdvanceVertices	.\Utils\Skeleton.cpp	/^static bool SK_AdvanceVertices(SK_Polygon * poly, double advance_time)$/;"	f	file:
SK_BisectorEventPossible	.\Utils\Skeleton.cpp	/^bool	SK_BisectorEventPossible(SK_Event * inEvent)$/;"	f
SK_CheckCreateEvent	.\Utils\Skeleton.cpp	/^static SK_Event * SK_CheckCreateEvent(SK_Edge * a, SK_Edge * b, SK_Edge * c, double time_min, bool is_reflex, EventMap& ioMap)$/;"	f	file:
SK_CloserToLine	.\Utils\Skeleton.cpp	/^bool	SK_CloserToLine(const Line2& line1, const Line2& line2, const Point2& split, const Point2& p)$/;"	f
SK_CombinePolys	.\Utils\Skeleton.cpp	/^static void SK_CombinePolys(SK_Polygon * live, SK_Polygon * die)$/;"	f	file:
SK_CreateReflexEventsForPolygon	.\Utils\Skeleton.cpp	/^static void SK_CreateReflexEventsForPolygon(SK_Polygon * poly, SK_Polygon * world, double min_time, EventMap& ioMap)$/;"	f	file:
SK_CreateReflexEventsForVertexAndPolygon	.\Utils\Skeleton.cpp	/^static void SK_CreateReflexEventsForVertexAndPolygon(SK_Polygon * poly, SK_Vertex * vert, double min_time, EventMap& ioMap)$/;"	f	file:
SK_CreateVertexEventsForPolygon	.\Utils\Skeleton.cpp	/^static void SK_CreateVertexEventsForPolygon(SK_Polygon * poly, double min_time, EventMap& ioMap)$/;"	f	file:
SK_DestroyEvent	.\Utils\Skeleton.cpp	/^static void	SK_DestroyEvent(SK_Event * the_event, EventMap& ioMap)$/;"	f	file:
SK_DestroyEventsForEdge	.\Utils\Skeleton.cpp	/^static void	SK_DestroyEventsForEdge(SK_Edge * the_edge, EventMap& ioMap, bool inReflex)$/;"	f	file:
SK_Edge	.\Utils\Skeleton.cpp	/^struct	SK_Edge {$/;"	s	file:
SK_Event	.\Utils\Skeleton.cpp	/^struct	SK_Event {$/;"	s	file:
SK_FixedMemIsLess	.\Utils\Skeleton.cpp	/^inline bool	SK_FixedMemIsLess(unsigned const char * c1, unsigned const char * c2, unsigned int len)$/;"	f
SK_InsetPolyIntoComplexPolygonList	.\Utils\Skeleton.cpp	/^static void SK_InsetPolyIntoComplexPolygonList(SK_Polygon * world, ComplexPolygonVector& outPolys)$/;"	f	file:
SK_InsetPolygon	.\Utils\Skeleton.cpp	/^int	SK_InsetPolygon($/;"	f
SK_NormalizeProjection	.\Utils\Skeleton.cpp	/^void SK_NormalizeProjection(Plane3& p)$/;"	f
SK_OrderedIntersect	.\Utils\Skeleton.cpp	/^bool	SK_OrderedIntersect(const Plane3& p1, const Plane3& p2, Line3& cross)$/;"	f
SK_OrderedIntersect	.\Utils\Skeleton.cpp	/^bool	SK_OrderedIntersect(const Plane3& p1, const Plane3& p2, const Plane3& p3, Point3& cross)$/;"	f
SK_PlaneIsLess	.\Utils\Skeleton.cpp	/^inline bool SK_PlaneIsLess(const Plane3& p1, const Plane3& p2)$/;"	f
SK_PointInRing	.\Utils\Skeleton.cpp	/^bool	SK_PointInRing(SK_Edge * ring, SK_Vertex * inVert, double time)$/;"	f
SK_Polygon	.\Utils\Skeleton.cpp	/^struct	SK_Polygon {$/;"	s	file:
SK_PolygonCreate	.\Utils\Skeleton.cpp	/^static SK_Polygon *	SK_PolygonCreate($/;"	f	file:
SK_PolygonCreateComplex	.\Utils\Skeleton.cpp	/^static SK_Polygon * SK_PolygonCreateComplex(SK_Polygon * parent, const ComplexPolygon2& inPoly, const ComplexPolygonWeight& weights)$/;"	f	file:
SK_PolygonDestroy	.\Utils\Skeleton.cpp	/^static void SK_PolygonDestroy(SK_Polygon * ioPolygon)$/;"	f	file:
SK_PolygonMitreReflexVertices	.\Utils\Skeleton.cpp	/^static void SK_PolygonMitreReflexVertices(SK_Polygon * poly)$/;"	f	file:
SK_PolygonSplitAntennas	.\Utils\Skeleton.cpp	/^static void SK_PolygonSplitAntennas(SK_Polygon * ioPolygon)$/;"	f	file:
SK_ReflexEventPossible	.\Utils\Skeleton.cpp	/^bool	SK_ReflexEventPossible(SK_Event * inEvent)$/;"	f
SK_RemoveEmptyPolygons	.\Utils\Skeleton.cpp	/^static void SK_RemoveEmptyPolygons(SK_Polygon * who, EventMap& ioMap)$/;"	f	file:
SK_SafeIntersect	.\Utils\Skeleton.cpp	/^bool	SK_SafeIntersect(SK_Edge * plane1, SK_Edge * plane2, const Point3& common_corner, Line3& cross)$/;"	f
SK_SafeIntersect	.\Utils\Skeleton.cpp	/^bool	SK_SafeIntersect(SK_Edge * plane1, SK_Edge * plane2, const Point3& common_corner, double t, Point3& cross)$/;"	f
SK_SafeIntersect2	.\Utils\Skeleton.cpp	/^bool	SK_SafeIntersect2(SK_Edge * plane1, SK_Edge * plane2, SK_Edge * plane3, const Point3& common_corner, Point3& cross)$/;"	f
SK_SafeIntersect3	.\Utils\Skeleton.cpp	/^bool	SK_SafeIntersect3(SK_Edge * plane1, SK_Edge * plane2, SK_Edge * plane3, const Point3& common_corner1, const Point3& common_corner2, Point3& cross)$/;"	f
SK_SplitEdge	.\Utils\Skeleton.cpp	/^static SK_Vertex * SK_SplitEdge(SK_Edge * e0, const Point2& loc, double now)$/;"	f	file:
SK_Vertex	.\Utils\Skeleton.cpp	/^struct	SK_Vertex {$/;"	s	file:
SLOPE_TO_SIDE	.\XESCore\BlockFill.cpp	1063;"	d	file:
SMALL_CUT	.\XESCore\BlockFill.cpp	72;"	d	file:
SNAP_ERR	.\MeshTool\MeshTool_Create.cpp	132;"	d	file:
SNAP_RADIUS	.\WEDMap\WED_VertexTool.cpp	52;"	d	file:
SOAP_GETAREAFROMRECT	.\Network\Terraserver.cpp	54;"	d	file:
SOAP_GETTHEMEINFO	.\Network\Terraserver.cpp	43;"	d	file:
SOAP_GETTILE	.\Network\Terraserver.cpp	73;"	d	file:
SOAP_GETTILEMETAFROMTILEID	.\Network\Terraserver.cpp	89;"	d	file:
SPLAT_CURL_IO	.\WEDImportExport\WED_GatewayExport.cpp	80;"	d	file:
SPLIT_BEACHED_WATER	.\XESCore\MeshAlgs.cpp	84;"	d	file:
SPLIT_BEACHED_WATER	.\XESCore\MeshAlgs.cpp	86;"	d	file:
SPLIT_CLIFFS	.\XESCore\MeshAlgs.cpp	65;"	d	file:
SQLUTILS_H	.\Utils\SQLUtils.h	25;"	d
SQL_ColumnUpdate	.\WEDCore\WED_PropertyHelper.h	/^typedef pair<string,string>				SQL_ColumnUpdate;$/;"	t
SQL_Name	.\WEDCore\WED_PropertyHelper.h	/^struct SQL_Name : public pair<const char *, const char *> { SQL_Name(const char * a, const char * b) : pair<const char *, const char *>(a,b) { } };$/;"	f	struct:SQL_Name
SQL_Name	.\WEDCore\WED_PropertyHelper.h	/^struct SQL_Name : public pair<const char *, const char *> { SQL_Name(const char * a, const char * b) : pair<const char *, const char *>(a,b) { } };$/;"	s
SQL_TableUpdate	.\WEDCore\WED_PropertyHelper.h	/^typedef vector<SQL_ColumnUpdate>		SQL_TableUpdate;$/;"	t
SQL_Update	.\WEDCore\WED_PropertyHelper.h	/^typedef map<string, SQL_TableUpdate>	SQL_Update;$/;"	t
SRTM_CHOICE_BLOCK_SIZE	.\XESCore\Hydro.cpp	75;"	d	file:
SRTM_TRUSTED_WETNESS	.\XESCore\Hydro.cpp	77;"	d	file:
SRTM_VERTICAL_SLOP	.\XESCore\Hydro.cpp	55;"	d	file:
ST	.\XESCore\DEMTables.h	/^	Point2	ST[4];$/;"	m	struct:tex_proj_info
STACK_DEPTH	.\Utils\XCull.h	196;"	d
START_STRING	.\OneOffs\osm_tile.c	122;"	d	file:
STATIC_CAST	.\Interfaces\IBase.h	71;"	d
STDCALL_MACRO	.\RenderFarmUI\RF_DrawMap.cpp	109;"	d	file:
STDCALL_MACRO	.\RenderFarmUI\RF_DrawMap.cpp	111;"	d	file:
STEP_DOWN	.\Utils\XCull.h	198;"	d
STLUtils_H	.\Utils\STLUtils.h	25;"	d
STRCMPCASENOSENTIVEFUNCTION	.\Utils\unzip.c	237;"	d	file:
STR_PROP	.\AC3DPlugins\obj_model.cpp	206;"	d	file:
STUB_FANS	.\XESCore\TriFan.h	31;"	d
STUB_GAMMA	.\XESCore\SceneryPackages.cpp	36;"	d	file:
SUPPORT_STL	.\Obj\XDefs.h	161;"	d
SWAP16	.\DSF\DSFLib.cpp	66;"	d	file:
SWAP16	.\DSF\DSFLib.cpp	72;"	d	file:
SWAP16	.\DSF\DSFLibWrite.cpp	45;"	d	file:
SWAP16	.\DSF\DSFLibWrite.cpp	51;"	d	file:
SWAP16	.\DSF\dsflib_013005\DSFLib.cpp	72;"	d	file:
SWAP16	.\DSF\dsflib_013005\DSFLib.cpp	75;"	d	file:
SWAP16	.\DSF\dsflib_013005\DSFLibWrite.cpp	46;"	d	file:
SWAP16	.\DSF\dsflib_013005\DSFLibWrite.cpp	49;"	d	file:
SWAP16	.\Utils\XChunkyFileUtils.h	32;"	d
SWAP16	.\Utils\XChunkyFileUtils.h	39;"	d
SWAP32	.\DSF\DSFLib.cpp	65;"	d	file:
SWAP32	.\DSF\DSFLib.cpp	71;"	d	file:
SWAP32	.\DSF\DSFLibWrite.cpp	44;"	d	file:
SWAP32	.\DSF\DSFLibWrite.cpp	50;"	d	file:
SWAP32	.\DSF\dsflib_013005\DSFLib.cpp	71;"	d	file:
SWAP32	.\DSF\dsflib_013005\DSFLib.cpp	74;"	d	file:
SWAP32	.\DSF\dsflib_013005\DSFLibWrite.cpp	45;"	d	file:
SWAP32	.\DSF\dsflib_013005\DSFLibWrite.cpp	48;"	d	file:
SWAP32	.\Utils\BitmapUtils.cpp	1616;"	d	file:
SWAP32	.\Utils\BitmapUtils.cpp	1621;"	d	file:
SWAP32	.\Utils\TexUtils.cpp	299;"	d	file:
SWAP32	.\Utils\TexUtils.cpp	304;"	d	file:
SWAP32	.\Utils\XChunkyFileUtils.h	33;"	d
SWAP32	.\Utils\XChunkyFileUtils.h	40;"	d
SWAP64	.\Utils\XChunkyFileUtils.h	34;"	d
SWAP64	.\Utils\XChunkyFileUtils.h	41;"	d
SWAP_ROWS	.\Utils\MatrixUtils.cpp	112;"	d	file:
SWAP_ROWS	.\Utils\MatrixUtils.cpp	350;"	d	file:
SWATCH_HEIGHT	.\WEDMap\WED_Colors.cpp	32;"	d	file:
SYMTYPE	.\Utils\MemFileUtils.cpp	134;"	d	file:
SYM_SPACE	.\XPTools\TaxiMaker.cpp	45;"	d	file:
S_ISDIR	.\Obj\XDefs.h	246;"	d
SafeMakeMoreConvex	.\XESCore\MapPolygon.cpp	/^void	SafeMakeMoreConvex(Polygon_set_2& ioPolygon, double max_area)$/;"	f
SafeSmearBorder	.\XESCore\MeshAlgs.cpp	/^void SafeSmearBorder(CDT& mesh, CDT::Vertex_handle vert, int layer)$/;"	f
Save	.\WEDCore\WED_Document.cpp	/^void	WED_Document::Save(void)$/;"	f	class:WED_Document
SaveIniSectionMap	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static bool SaveIniSectionMap(const char * inFileName, const IniSectionMap& inMap)$/;"	f	file:
SaveToDB	.\WEDCore\WED_Archive.cpp	/^void	WED_Archive::SaveToDB(sqlite3 * db)$/;"	f	class:WED_Archive
SaveToXML	.\WEDCore\WED_Archive.cpp	/^void			WED_Archive::SaveToXML(WED_XMLElement * parent)$/;"	f	class:WED_Archive
Scalar	.\Utils\XCull.h	/^	typedef typename Traits::Scalar		Scalar;$/;"	t	class:XCull
Scalar	.\XESTools\MapBuckets.h	/^	typedef	double					Scalar;$/;"	t	class:MapHalfedgeBucketTraits
Scalar	.\XESTools\MapBuckets.h	/^	typedef	double				Scalar;$/;"	t	class:MapFaceBucketTraits
Scalar	.\XESTools\MapBuckets.h	/^	typedef	double				Scalar;$/;"	t	class:MapVertexBucketTraits
ScaleToObj	.\XPTools\ViewObj.cpp	/^void		XObjWin::ScaleToObj(void)$/;"	f	class:XObjWin
ScanEnv	.\XPTools\EnvScan.cpp	/^bool	ScanEnv(const char * inPath, const char * inFileName)$/;"	f
ScanlineMaxError	.\XESCore\GreedyMesh.cpp	/^inline float ScanlineMaxError($/;"	f
SceneryMap	.\XPTools\AddObjects.cpp	/^typedef	map<string, SceneryNode *>	SceneryMap;$/;"	t	file:
SceneryNode	.\XPTools\AddObjects.cpp	/^class	SceneryNode {$/;"	c	file:
ScriptError	.\Installer\InstallerScript.cpp	/^ void	ScriptError($/;"	f
ScrollH	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::ScrollH(float xOffset)$/;"	f	class:GUI_SimpleScroller
ScrollH	.\GUI\GUI_Table.cpp	/^void	GUI_Table::ScrollH(float xOffset)$/;"	f	class:GUI_Table
ScrollH	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::ScrollH(float hOffset)$/;"	f	class:GUI_TextField
ScrollH	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::ScrollH(double lon)$/;"	f	class:RF_MapZoomer
ScrollH	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::ScrollH(float xOffset)$/;"	f	class:WED_MapZoomerNew
ScrollReveal	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::ScrollReveal($/;"	f	class:RF_MapZoomer
ScrollTo	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::ScrollTo($/;"	f	class:GUI_TextField
ScrollToCB	.\OGLE\ogle.cpp	/^void			OGLE::ScrollToCB($/;"	f	class:OGLE
ScrollTo_f	.\OGLE\ogle.h	/^	void			(* ScrollTo_f)($/;"	m	struct:OGLE_Callbacks
ScrollV	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::ScrollV(float yOffset)$/;"	f	class:GUI_SimpleScroller
ScrollV	.\GUI\GUI_Table.cpp	/^void	GUI_Table::ScrollV(float yOffset)$/;"	f	class:GUI_Table
ScrollV	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::ScrollV(float vOffset)$/;"	f	class:GUI_TextField
ScrollV	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::ScrollV(double lat)$/;"	f	class:RF_MapZoomer
ScrollV	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::ScrollV(float yOffset)$/;"	f	class:WED_MapZoomerNew
ScrollWheel	.\GUI\GUI_Pane.h	/^	virtual	int			ScrollWheel(int x, int y, int dist, int axis) { return 0; }$/;"	f	class:GUI_Pane
ScrollWheel	.\GUI\GUI_ScrollerPane.cpp	/^int		GUI_ScrollerPane::ScrollWheel(int x, int y, int dist, int axis)$/;"	f	class:GUI_ScrollerPane
ScrollWheel	.\GUI\GUI_TextField.cpp	/^int			GUI_TextField::ScrollWheel(int x, int y, int dist, int axis)$/;"	f	class:GUI_TextField
ScrollWheel	.\RenderFarmUI\RF_MapView.cpp	/^int		RF_MapView::ScrollWheel(int x, int y, int direction, int axis)$/;"	f	class:RF_MapView
ScrollWheel	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^int		WED_LibraryPreviewPane::ScrollWheel(int x, int y, int dist, int axis)$/;"	f	class:WED_LibraryPreviewPane
ScrollWheel	.\WEDMap\WED_Map.cpp	/^int			WED_Map::ScrollWheel(int x, int y, int dist, int axis)$/;"	f	class:WED_Map
ScrollWheel	.\WEDTCE\WED_TCE.cpp	/^int			WED_TCE::ScrollWheel(int x, int y, int dist, int axis)$/;"	f	class:WED_TCE
ScrolledVertCanvas_hack	.\AC3DPlugins\XPlaneSupport.tcl	/^proc ScrolledVertCanvas_hack { c width height region } {$/;"	p
SeedQueue	.\XESCore\TensorRoads.cpp	/^typedef list<TensorSeed>		SeedQueue;$/;"	t	file:
Segment2	.\Utils\CompGeomDefs2.h	/^	Segment2() : p1(), p2() { }$/;"	f	struct:Segment2
Segment2	.\Utils\CompGeomDefs2.h	/^	Segment2(const Point2& ip1, const Point2& ip2) : p1(ip1), p2(ip2) { }$/;"	f	struct:Segment2
Segment2	.\Utils\CompGeomDefs2.h	/^	Segment2(const Point2& p, const Vector2& v) : p1(p), p2(p.x_ + v.dx, p.y_ + v.dy) { }$/;"	f	struct:Segment2
Segment2	.\Utils\CompGeomDefs2.h	/^	Segment2(const Segment2& rhs) : p1(rhs.p1), p2(rhs.p2) { }$/;"	f	struct:Segment2
Segment2	.\Utils\CompGeomDefs2.h	/^struct	Segment2 {$/;"	s
Segment2p	.\WEDCore\WED_GISUtils.h	/^	Segment2p() : param(0) { }$/;"	f	struct:Segment2p
Segment2p	.\WEDCore\WED_GISUtils.h	/^	Segment2p(const Point2& ip1, const Point2& ip2, int p) : Segment2(ip1, ip2), param(p) { }$/;"	f	struct:Segment2p
Segment2p	.\WEDCore\WED_GISUtils.h	/^	Segment2p(const Segment2& rhs, int p) : Segment2(rhs), param(p) { }$/;"	f	struct:Segment2p
Segment2p	.\WEDCore\WED_GISUtils.h	/^	Segment2p(const Segment2p& rhs) : Segment2(rhs), param(rhs.param) { }$/;"	f	struct:Segment2p
Segment2p	.\WEDCore\WED_GISUtils.h	/^struct Segment2p : public Segment2 {$/;"	s
Segment3	.\Utils\CompGeomDefs3.h	/^	Segment3() : p1(), p2() { }$/;"	f	struct:Segment3
Segment3	.\Utils\CompGeomDefs3.h	/^	Segment3(const Point3& ip1, const Point3& ip2) : p1(ip1), p2(ip2) { }$/;"	f	struct:Segment3
Segment3	.\Utils\CompGeomDefs3.h	/^	Segment3(const Point3& p, const Vector3& v) : p1(p), p2(p.x + v.dx, p.y + v.dy, p.z + v.dz) { }$/;"	f	struct:Segment3
Segment3	.\Utils\CompGeomDefs3.h	/^	Segment3(const Segment3& rhs) : p1(rhs.p1), p2(rhs.p2) { }$/;"	f	struct:Segment3
Segment3	.\Utils\CompGeomDefs3.h	/^struct	Segment3 {$/;"	s
SegmentOutOfBounds	.\Tiger\TIGERRead.cpp	/^bool	SegmentOutOfBounds(const Point2& start, const Point2& end,$/;"	f
Segment_2	.\XESCore\CGALDefs.h	/^typedef FastKernel::Segment_2                           Segment_2;$/;"	t
Segment_2	.\XESCore\CGALTypes.h	/^typedef Kernel::Segment_2									Segment_2;$/;"	t
SelCmdHandleNotification	.\ObjEdit\OE_SelCmds.cpp	/^void	SelCmdHandleNotification(int inCatagory, int inMsg, void * inParam)$/;"	f
SelCmdHandler	.\ObjEdit\OE_SelCmds.cpp	/^void	SelCmdHandler(void * inMenuRef, void * inItemRef)$/;"	f
SelCmdUpdateItems	.\ObjEdit\OE_SelCmds.cpp	/^void	SelCmdUpdateItems(void)$/;"	f
Select	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::Select(ISelectable * iwho)$/;"	f	class:WED_Select
SelectAndParents	.\WEDProperties\WED_PropertyTable.cpp	/^static int SelectAndParents(ISelectable * what, void * ref)$/;"	f	file:
SelectDisclose	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::SelectDisclose($/;"	f	class:WED_AptTable
SelectDisclose	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::SelectDisclose($/;"	f	class:WED_ICAOTable
SelectDisclose	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::SelectDisclose($/;"	f	class:WED_VerTable
SelectDisclose	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::SelectDisclose($/;"	f	class:WED_LibraryListAdapter
SelectDisclose	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int		WED_ToolInfoAdapter::SelectDisclose($/;"	f	class:WED_ToolInfoAdapter
SelectDisclose	.\WEDProperties\WED_PropertyTable.cpp	/^int		WED_PropertyTable::SelectDisclose($/;"	f	class:WED_PropertyTable
SelectDisclose	.\WEDWindows\WED_FilterBar.h	/^	virtual	int		SelectDisclose($/;"	f	class:WED_FilterBar
SelectDisclose	.\WEDWindows\WED_PackageListAdapter.cpp	/^int		WED_PackageListAdapter::SelectDisclose($/;"	f	class:WED_PackageListAdapter
SelectGetExtent	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::SelectGetExtent($/;"	f	class:WED_AptTable
SelectGetExtent	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::SelectGetExtent($/;"	f	class:WED_ICAOTable
SelectGetExtent	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::SelectGetExtent($/;"	f	class:WED_VerTable
SelectGetExtent	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::SelectGetExtent($/;"	f	class:WED_LibraryListAdapter
SelectGetExtent	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int		WED_ToolInfoAdapter::SelectGetExtent($/;"	f	class:WED_ToolInfoAdapter
SelectGetExtent	.\WEDProperties\WED_PropertyTable.cpp	/^int		WED_PropertyTable::SelectGetExtent($/;"	f	class:WED_PropertyTable
SelectGetExtent	.\WEDWindows\WED_FilterBar.h	/^	virtual	int		SelectGetExtent($/;"	f	class:WED_FilterBar
SelectGetExtent	.\WEDWindows\WED_PackageListAdapter.cpp	/^int		WED_PackageListAdapter::SelectGetExtent($/;"	f	class:WED_PackageListAdapter
SelectGetLimits	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::SelectGetLimits($/;"	f	class:WED_AptTable
SelectGetLimits	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::SelectGetLimits($/;"	f	class:WED_ICAOTable
SelectGetLimits	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::SelectGetLimits($/;"	f	class:WED_VerTable
SelectGetLimits	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::SelectGetLimits($/;"	f	class:WED_LibraryListAdapter
SelectGetLimits	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int		WED_ToolInfoAdapter::SelectGetLimits($/;"	f	class:WED_ToolInfoAdapter
SelectGetLimits	.\WEDProperties\WED_PropertyTable.cpp	/^int		WED_PropertyTable::SelectGetLimits($/;"	f	class:WED_PropertyTable
SelectGetLimits	.\WEDWindows\WED_FilterBar.h	/^	virtual	int		SelectGetLimits($/;"	f	class:WED_FilterBar
SelectGetLimits	.\WEDWindows\WED_PackageListAdapter.cpp	/^int		WED_PackageListAdapter::SelectGetLimits($/;"	f	class:WED_PackageListAdapter
SelectHeaderCell	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::SelectHeaderCell($/;"	f	class:WED_AptTable
SelectHeaderCell	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::SelectHeaderCell($/;"	f	class:WED_ICAOTable
SelectHeaderCell	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::SelectHeaderCell($/;"	f	class:WED_VerTable
SelectHeaderCell	.\WEDLibrary\WED_LibraryListAdapter.h	/^	virtual	void	SelectHeaderCell($/;"	f	class:WED_LibraryListAdapter
SelectHeaderCell	.\WEDProperties\WED_PropertyTable.h	/^	virtual	void	SelectHeaderCell($/;"	f	class:WED_PropertyTable
SelectPackage	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::SelectPackage(int n)$/;"	f	class:WED_PackageListAdapter
SelectRange	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::SelectRange($/;"	f	class:WED_AptTable
SelectRange	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::SelectRange($/;"	f	class:WED_ICAOTable
SelectRange	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::SelectRange($/;"	f	class:WED_VerTable
SelectRange	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::SelectRange($/;"	f	class:WED_LibraryListAdapter
SelectRange	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::SelectRange($/;"	f	class:WED_ToolInfoAdapter
SelectRange	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::SelectRange($/;"	f	class:WED_PropertyTable
SelectRange	.\WEDWindows\WED_FilterBar.h	/^	virtual	void	SelectRange($/;"	f	class:WED_FilterBar
SelectRange	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::SelectRange($/;"	f	class:WED_PackageListAdapter
SelectionEnd	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::SelectionEnd(void)$/;"	f	class:WED_AptTable
SelectionEnd	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::SelectionEnd(void)$/;"	f	class:WED_ICAOTable
SelectionEnd	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::SelectionEnd(void)$/;"	f	class:WED_VerTable
SelectionEnd	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::SelectionEnd(void)$/;"	f	class:WED_LibraryListAdapter
SelectionEnd	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::SelectionEnd(void)$/;"	f	class:WED_ToolInfoAdapter
SelectionEnd	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::SelectionEnd(void)$/;"	f	class:WED_PropertyTable
SelectionEnd	.\WEDWindows\WED_FilterBar.h	/^	virtual	void	SelectionEnd(void) { }$/;"	f	class:WED_FilterBar
SelectionEnd	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::SelectionEnd(void)$/;"	f	class:WED_PackageListAdapter
SelectionStart	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::SelectionStart($/;"	f	class:WED_AptTable
SelectionStart	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::SelectionStart($/;"	f	class:WED_ICAOTable
SelectionStart	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::SelectionStart($/;"	f	class:WED_VerTable
SelectionStart	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::SelectionStart($/;"	f	class:WED_LibraryListAdapter
SelectionStart	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::SelectionStart($/;"	f	class:WED_ToolInfoAdapter
SelectionStart	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::SelectionStart($/;"	f	class:WED_PropertyTable
SelectionStart	.\WEDWindows\WED_FilterBar.h	/^	virtual void	SelectionStart($/;"	f	class:WED_FilterBar
SelectionStart	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::SelectionStart($/;"	f	class:WED_PackageListAdapter
SelfTestAll	.\XESTools\SelfTest.cpp	/^void SelfTestAll(void)$/;"	f
SelfType	.\lib_json\include\json\value.h	/^      typedef ValueConstIterator SelfType;$/;"	t	class:Json::ValueConstIterator
SelfType	.\lib_json\include\json\value.h	/^      typedef ValueIterator SelfType;$/;"	t	class:Json::ValueIterator
SelfType	.\lib_json\include\json\value.h	/^      typedef ValueIteratorBase SelfType;$/;"	t	class:Json::ValueIteratorBase
SendCamData	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void	WED_NWLinkAdapter::SendCamData()$/;"	f	class:WED_NWLinkAdapter
SendData	.\Network\HTTPClient.cpp	/^void			HTTPConnection::SendData(const char * p1, const char * p2)$/;"	f	class:HTTPConnection
SendData	.\WEDNetwork\WED_Connection.cpp	/^int 	WED_Connection::SendData( const char * inBuf, int inSize)$/;"	f	class:WED_Connection
SendData	.\WEDNetwork\WED_Server.cpp	/^int WED_Server::SendData(const char * inBuf ,int inSize)$/;"	f	class:WED_Server
SendData	.\WEDNetwork\WED_Server.cpp	/^int WED_Server::SendData(const char* hdr,int type,int id,const string& args )$/;"	f	class:WED_Server
SendData	.\WEDXPlugin\WED_XPluginClient.cpp	/^int WED_XPluginClient::SendData(const char * inBuf ,int inSize)$/;"	f	class:WED_XPluginClient
SendData	.\WEDXPlugin\WED_XPluginClient.cpp	/^int WED_XPluginClient::SendData(const char* hdr,int type,int id,const string& args )$/;"	f	class:WED_XPluginClient
ServiceImage	.\Network\Terraserver.cpp	/^void	AsyncConnectionPool::ServiceImage(HTTPRequest * req)$/;"	f	class:AsyncConnectionPool
ServiceLocator	.\Network\Terraserver.cpp	/^void	AsyncConnectionPool::ServiceLocator(HTTPRequest * req)$/;"	f	class:AsyncConnectionPool
SetAbout	.\WEDCore\WED_Application.cpp	/^void	WED_Application::SetAbout(GUI_Window * about_box)$/;"	f	class:WED_Application
SetAirportType	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::SetAirportType(int x) { airport_type = x; }$/;"	f	class:WED_Airport
SetAlt	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetAlt(double inAlt){mAlt = inAlt;}$/;"	f	class:WED_XPluginEntity
SetAnchor1	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::SetAnchor1(const Point2& a)	{ has_anchor1  = true; anchor1  = a; }$/;"	f	class:WED_MapToolNew
SetAnchor2	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::SetAnchor2(const Point2& a)	{ has_anchor2  = true; anchor2  = a; }$/;"	f	class:WED_MapToolNew
SetAngle	.\WEDEntities\WED_LightFixture.cpp	/^void	WED_LightFixture::SetAngle(double x)$/;"	f	class:WED_LightFixture
SetAppLights1	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetAppLights1(int x) { appl1 = x; }$/;"	f	class:WED_Runway
SetAppLights2	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetAppLights2(int x) { appl2 = x; }$/;"	f	class:WED_Runway
SetAspectRatio	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::SetAspectRatio(double a)$/;"	f	class:RF_MapZoomer
SetAttribute	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::SetAttribute(int attr)$/;"	f	class:XObjBuilder
SetAttribute1	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::SetAttribute1(int attr, float v)$/;"	f	class:XObjBuilder
SetAttribute1Named	.\Obj\XObjBuilder.cpp	/^void XObjBuilder::SetAttribute1Named(int attr, float v, const char * s)$/;"	f	class:XObjBuilder
SetAttribute2Named	.\Obj\XObjBuilder.cpp	/^void XObjBuilder::SetAttribute2Named(int attr, float v1, float v2, const char * s)$/;"	f	class:XObjBuilder
SetAttribute3	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::SetAttribute3(int attr, float v[3])$/;"	f	class:XObjBuilder
SetAttributeNamed	.\Obj\XObjBuilder.cpp	/^void XObjBuilder::SetAttributeNamed(int attr, const char * s)$/;"	f	class:XObjBuilder
SetAttributes	.\WEDEntities\WED_AirportNode.cpp	/^void	WED_AirportNode::SetAttributes(const set<int>& in_attrs)$/;"	f	class:WED_AirportNode
SetBezierLocation	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::SetBezierLocation  (GISLayer_t l, const BezierPoint2& p)$/;"	f	class:WED_GISPoint_Bezier
SetBkgkndImage	.\GUI\GUI_Packer.cpp	/^void		GUI_Packer::SetBkgkndImage(const char * image_res)$/;"	f	class:GUI_Packer
SetBlas1	.\WEDEntities\WED_Runway.cpp	/^void		WED_Runway::SetBlas1(double n)$/;"	f	class:WED_Runway
SetBlas2	.\WEDEntities\WED_Runway.cpp	/^void		WED_Runway::SetBlas2(double n)$/;"	f	class:WED_Runway
SetBounds	.\GUI\GUI_Packer.cpp	/^void		GUI_Packer::SetBounds(int inBounds[4])$/;"	f	class:GUI_Packer
SetBounds	.\GUI\GUI_Packer.cpp	/^void		GUI_Packer::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_Packer
SetBounds	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetBounds(int inBounds[4])$/;"	f	class:GUI_Pane
SetBounds	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_Pane
SetBounds	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::SetBounds(int inBounds[4])$/;"	f	class:GUI_ScrollerPane
SetBounds	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_ScrollerPane
SetBounds	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::SetBounds(int inBounds[4])$/;"	f	class:GUI_SimpleScroller
SetBounds	.\GUI\GUI_SimpleScroller.cpp	/^void	GUI_SimpleScroller::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_SimpleScroller
SetBounds	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::SetBounds(int inBounds[4])$/;"	f	class:GUI_Splitter
SetBounds	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_Splitter
SetBounds	.\GUI\GUI_Table.cpp	/^void		GUI_Table::SetBounds(int inBounds[4])$/;"	f	class:GUI_Table
SetBounds	.\GUI\GUI_Table.cpp	/^void		GUI_Table::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_Table
SetBounds	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetBounds(int inBounds[4])$/;"	f	class:GUI_TextField
SetBounds	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_TextField
SetBounds	.\GUI\GUI_Window.cpp	/^void		GUI_Window::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:GUI_Window
SetBounds	.\GUI\GUI_Window.cpp	/^void	GUI_Window::SetBounds(int inBounds[4])$/;"	f	class:GUI_Window
SetBounds	.\RenderFarmUI\RF_MapView.cpp	/^void		RF_MapView::SetBounds(int inBounds[4])$/;"	f	class:RF_MapView
SetBounds	.\WEDMap\WED_Map.cpp	/^void		WED_Map::SetBounds(int inBounds[4])$/;"	f	class:WED_Map
SetBounds	.\WEDMap\WED_Map.cpp	/^void		WED_Map::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:WED_Map
SetBounds	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::SetBounds(int inBounds[4])$/;"	f	class:WED_TCE
SetBounds	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::SetBounds(int x1, int y1, int x2, int y2)$/;"	f	class:WED_TCE
SetBuoys	.\WEDEntities\WED_Sealane.cpp	/^void	WED_Sealane::SetBuoys(int x)$/;"	f	class:WED_Sealane
SetCacheSize	.\DSF\tri_stripper_101\tri_stripper.h	/^inline void tri_stripper::SetCacheSize(const size_t CacheSize) {$/;"	f	class:triangle_stripper::tri_stripper
SetCamAlt	.\WEDNetwork\WED_NWLinkAdapter.h	/^                void    SetCamAlt(const float inAlt){mCamera.alt = inAlt;}$/;"	f	class:WED_NWLinkAdapter
SetCamHdg	.\WEDNetwork\WED_NWLinkAdapter.h	/^                void    SetCamHdg(const float inHdg){mCamera.heading= inHdg;}$/;"	f	class:WED_NWLinkAdapter
SetCamLat	.\WEDNetwork\WED_NWLinkAdapter.h	/^				void    SetCamLat(const double inLat){mCamera.lat = inLat;}$/;"	f	class:WED_NWLinkAdapter
SetCamLon	.\WEDNetwork\WED_NWLinkAdapter.h	/^				void    SetCamLon(const double inLon){mCamera.lon = inLon;}$/;"	f	class:WED_NWLinkAdapter
SetCamPit	.\WEDNetwork\WED_NWLinkAdapter.h	/^                void    SetCamPit(const float inPitch){mCamera.pitch = inPitch;}$/;"	f	class:WED_NWLinkAdapter
SetCanSelect	.\WEDMap\WED_HandleToolBase.cpp	/^void				WED_HandleToolBase::SetCanSelect(int can_select)$/;"	f	class:WED_HandleToolBase
SetCellHeight	.\GUI\GUI_SimpleTableGeometry.cpp	/^void		GUI_SimpleTableGeometry::SetCellHeight(int n, int h)$/;"	f	class:GUI_SimpleTableGeometry
SetCellHeight	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void		WED_ToolInfoAdapter::SetCellHeight(int n, int h)$/;"	f	class:WED_ToolInfoAdapter
SetCellHeight	.\WEDWindows\WED_PackageListAdapter.cpp	/^void		WED_PackageListAdapter::SetCellHeight(int n, int h)$/;"	f	class:WED_PackageListAdapter
SetCellWidth	.\GUI\GUI_SimpleTableGeometry.cpp	/^void		GUI_SimpleTableGeometry::SetCellWidth (int n, int w)$/;"	f	class:GUI_SimpleTableGeometry
SetCellWidth	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void		WED_ToolInfoAdapter::SetCellWidth (int n, int w)$/;"	f	class:WED_ToolInfoAdapter
SetCellWidth	.\WEDWindows\WED_PackageListAdapter.cpp	/^void		WED_PackageListAdapter::SetCellWidth (int n, int w)$/;"	f	class:WED_PackageListAdapter
SetCenterLights	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetCenterLights(int x) { center_lites = x; }$/;"	f	class:WED_Runway
SetClearSpecs	.\GUI\GUI_Window.cpp	/^void	GUI_Window::SetClearSpecs(bool inDoClearColor, bool inDoClearDepth, float inClearColor[4])$/;"	f	class:GUI_Window
SetClosed	.\WEDEntities\WED_AirportChain.cpp	/^void	WED_AirportChain::SetClosed(int closure)$/;"	f	class:WED_AirportChain
SetClosed	.\WEDEntities\WED_LinePlacement.cpp	/^void WED_LinePlacement::SetClosed(int h)$/;"	f	class:WED_LinePlacement
SetClosed	.\WEDEntities\WED_StringPlacement.cpp	/^void WED_StringPlacement::SetClosed(int h)$/;"	f	class:WED_StringPlacement
SetClosed	.\WEDProperties\WED_PropertyTable.cpp	/^void WED_PropertyTable::SetClosed(const set<int>& closed_list)$/;"	f	class:WED_PropertyTable
SetColor	.\RenderFarmUI\RF_DrawMap.cpp	/^inline void SetColor(GLubyte c[3], float r, float g, float b)$/;"	f
SetColorForFace	.\RenderFarmUI\RF_DrawMap.cpp	/^static	void	SetColorForFace(Pmwx::Face_const_handle f, GLubyte outColor[4])$/;"	f	file:
SetColorForHalfedge	.\RenderFarmUI\RF_DrawMap.cpp	/^static void	SetColorForHalfedge(Pmwx::Halfedge_const_handle i, GLubyte color[3])$/;"	f	file:
SetColors	.\GUI\GUI_Label.cpp	/^void		GUI_Label::SetColors(float text_color[4])$/;"	f	class:GUI_Label
SetColors	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetColors($/;"	f	class:GUI_TextField
SetColors	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::SetColors($/;"	f	class:GUI_TextTableHeader
SetColors	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SetColors($/;"	f	class:GUI_TextTableSide
SetColors	.\GUI\GUI_TextTable.cpp	/^void	GUI_TextTable::SetColors($/;"	f	class:GUI_TextTable
SetContent	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::SetContent(GUI_ScrollerPaneContent * inPane)$/;"	f	class:GUI_ScrollerPane
SetContent	.\GUI\GUI_Table.cpp	/^void		GUI_Table::SetContent(GUI_TableContent * inContent)$/;"	f	class:GUI_Table
SetContents	.\ObjEdit\OE_Scroller.cpp	/^void	OE_Scroller::SetContents($/;"	f	class:OE_Scroller
SetControlHandleHi	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::SetControlHandleHi (GISLayer_t l, const Point2& p)$/;"	f	class:WED_GISPoint_Bezier
SetControlHandleHi	.\WEDEntities\WED_TextureBezierNode.cpp	/^void	WED_TextureBezierNode::SetControlHandleHi (GISLayer_t layer,const Point2& p)$/;"	f	class:WED_TextureBezierNode
SetControlHandleLo	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::SetControlHandleLo (GISLayer_t l, const Point2& p)$/;"	f	class:WED_GISPoint_Bezier
SetControlHandleLo	.\WEDEntities\WED_TextureBezierNode.cpp	/^void	WED_TextureBezierNode::SetControlHandleLo (GISLayer_t layer,const Point2& p)$/;"	f	class:WED_TextureBezierNode
SetControlProvider	.\WEDMap\WED_HandleToolBase.cpp	/^void		WED_HandleToolBase::SetControlProvider(IControlHandles	* provider)$/;"	f	class:WED_HandleToolBase
SetCustomMSL	.\WEDEntities\WED_ObjPlacement.cpp	/^void		WED_ObjPlacement::SetCustomMSL(double in_msl)$/;"	f	class:WED_ObjPlacement
SetCustomWalls	.\WEDEntities\WED_FacadePlacement.cpp	/^void		WED_FacadePlacement::SetCustomWalls(bool has) $/;"	f	class:WED_FacadePlacement
SetData	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleDataObject::SetData				(FORMATETC *pformatetc, STGMEDIUM  *pmedium,BOOL fRelease)$/;"	f	class:GUI_SimpleDataObject
SetDefaultMSL	.\WEDEntities\WED_ObjPlacement.cpp	/^void		WED_ObjPlacement::SetDefaultMSL(void)$/;"	f	class:WED_ObjPlacement
SetDefaultState	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::SetDefaultState(void)$/;"	f	class:XObjBuilder
SetDegree	.\DSF\tri_stripper_101\tri_stripper.h	/^inline void tri_stripper::triangle_degree::SetDegree(const size_t Degree) {$/;"	f	class:triangle_stripper::tri_stripper::triangle_degree
SetDensity	.\WEDEntities\WED_ForestPlacement.cpp	/^void WED_ForestPlacement::SetDensity(double h)$/;"	f	class:WED_ForestPlacement
SetDescriptor	.\GUI\GUI_Label.cpp	/^void		GUI_Label::SetDescriptor(const string& inDesc)$/;"	f	class:GUI_Label
SetDescriptor	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetDescriptor(const string& inDesc)$/;"	f	class:GUI_Pane
SetDescriptor	.\GUI\GUI_PopupButton.cpp	/^void		GUI_PopupButton::SetDescriptor(const string& inDesc)$/;"	f	class:GUI_PopupButton
SetDescriptor	.\GUI\GUI_TabControl.cpp	/^void		GUI_TabControl::SetDescriptor(const string& inDesc)$/;"	f	class:GUI_TabControl
SetDescriptor	.\GUI\GUI_Window.cpp	/^void		GUI_Window::SetDescriptor(const string& inDesc)$/;"	f	class:GUI_Window
SetDirty	.\WEDCore\WED_Persistent.cpp	/^void			WED_Persistent::SetDirty(int dirty)$/;"	f	class:WED_Persistent
SetDisp1	.\WEDEntities\WED_Runway.cpp	/^void		WED_Runway::SetDisp1(double n)$/;"	f	class:WED_Runway
SetDisp2	.\WEDEntities\WED_Runway.cpp	/^void		WED_Runway::SetDisp2(double n)$/;"	f	class:WED_Runway
SetDistance	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::SetDistance(double d)		{ has_distance = true; distance = d; }$/;"	f	class:WED_MapToolNew
SetDrawAlways	.\WEDMap\WED_HandleToolBase.cpp	/^void				WED_HandleToolBase::SetDrawAlways(int can_draw_always)$/;"	f	class:WED_HandleToolBase
SetEdgeLights	.\WEDEntities\WED_Helipad.cpp	/^void		WED_Helipad::SetEdgeLights(int x)$/;"	f	class:WED_Helipad
SetEdgeLights	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetEdgeLights(int x) { edge_lites = x; }$/;"	f	class:WED_Runway
SetElevation	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::SetElevation(double x) { elevation = x; }$/;"	f	class:WED_Airport
SetEnables	.\RenderFarmUI\RF_Export.cpp	/^void SetEnables(XPWidgetID)$/;"	f
SetEquipment	.\WEDEntities\WED_RampPosition.cpp	/^void	WED_RampPosition::SetEquipment(const set<int>&	et)$/;"	f	class:WED_RampPosition
SetExclusions	.\WEDEntities\WED_ExclusionZone.cpp	/^void	WED_ExclusionZone::SetExclusions(const set<int>& in_exclusions)$/;"	f	class:WED_ExclusionZone
SetFakeFarClippingPlane	.\Utils\HLCamera.cpp	/^void		xcam_class::SetFakeFarClippingPlane(GLdouble fake_far)$/;"	f	class:xcam_class
SetFilePath	.\UI\XWin.lin.cpp	/^void XWin::SetFilePath(const char * inPath,bool modified)$/;"	f	class:XWin
SetFilePath	.\UI\XWin.win.cpp	/^void			XWin::SetFilePath(const char * inPath,bool modified)$/;"	f	class:XWin
SetFillMode	.\WEDEntities\WED_ForestPlacement.cpp	/^void		WED_ForestPlacement::SetFillMode(int mode)$/;"	f	class:WED_ForestPlacement
SetFilter	.\DSF\DSFLibWrite.cpp	/^void DSFFileWriterImp::SetFilter(int filter, void * ref)$/;"	f	class:DSFFileWriterImp
SetFilter	.\WEDImportExport\WED_AptTable.cpp	/^void	WED_AptTable::SetFilter($/;"	f	class:WED_AptTable
SetFilter	.\WEDImportExport\WED_DSFImport.cpp	/^	static void SetFilter(int filterId, void * inRef)$/;"	f	class:DSF_Importer
SetFilter	.\WEDImportExport\WED_ICAOTable.cpp	/^void	WED_ICAOTable::SetFilter($/;"	f	class:WED_ICAOTable
SetFilter	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::SetFilter($/;"	f	class:WED_VerTable
SetFilter	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::SetFilter(const string& f, int int_val)$/;"	f	class:WED_LibraryListAdapter
SetFilter_f	.\DSF\DSFLib.h	/^	void (* SetFilter_f)($/;"	m	struct:DSFCallbacks_t
SetFlowImage	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::SetFlowImage($/;"	f	class:RF_MapView
SetFont	.\GUI\GUI_Label.cpp	/^void		GUI_Label::SetFont(int font)$/;"	f	class:GUI_Label
SetFont	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetFont(int font)$/;"	f	class:GUI_TextField
SetFont	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::SetFont(int font)$/;"	f	class:GUI_TextTable
SetGLContext	.\UI\XWinGL.lin.cpp	/^void                    XWinGL::SetGLContext(void)$/;"	f	class:XWinGL
SetGLContext	.\UI\XWinGL.win.cpp	/^void			XWinGL::SetGLContext(void)$/;"	f	class:XWinGL
SetGen	.\Network\TerraServer.h	/^	void			SetGen(int g) { mGen = g; }$/;"	f	class:AsyncImage
SetGeometry	.\GUI\GUI_Table.cpp	/^void		GUI_Header::SetGeometry(GUI_TableGeometry * inGeometry)$/;"	f	class:GUI_Header
SetGeometry	.\GUI\GUI_Table.cpp	/^void		GUI_Side::SetGeometry(GUI_TableGeometry * inGeometry)$/;"	f	class:GUI_Side
SetGeometry	.\GUI\GUI_Table.cpp	/^void		GUI_Table::SetGeometry(GUI_TableGeometry * inGeometry)$/;"	f	class:GUI_Table
SetGeometry	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::SetGeometry(GUI_TableGeometry * geometry)$/;"	f	class:GUI_TextTable
SetGeometry	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::SetGeometry(GUI_TableGeometry * geometry)$/;"	f	class:GUI_TextTableHeader
SetGeometry	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SetGeometry(GUI_TableGeometry * geometry)$/;"	f	class:GUI_TextTableSide
SetHasATC	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::SetHasATC(int x) { has_atc= x; }$/;"	f	class:WED_Airport
SetHdg	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetHdg(double inHdg){mHdg = inHdg;}$/;"	f	class:WED_XPluginEntity
SetHeader	.\GUI\GUI_Table.cpp	/^void		GUI_Header::SetHeader(GUI_TableHeader * inHeader)$/;"	f	class:GUI_Header
SetHeading	.\WEDEntities\WED_GISPoint_Heading.cpp	/^void	WED_GISPoint_Heading::SetHeading(double h)$/;"	f	class:WED_GISPoint_Heading
SetHeading	.\WEDEntities\WED_PolygonPlacement.cpp	/^void WED_PolygonPlacement::SetHeading(double h)$/;"	f	class:WED_PolygonPlacement
SetHeading	.\WEDEntities\WED_Taxiway.cpp	/^void		WED_Taxiway::SetHeading(double h)$/;"	f	class:WED_Taxiway
SetHeading	.\WEDMap\WED_MapToolNew.cpp	/^void				WED_MapToolNew::SetHeading(double h)		{ has_heading  = true; heading  = h; }$/;"	f	class:WED_MapToolNew
SetHeight	.\WEDEntities\WED_AirportSign.cpp	/^void	WED_AirportSign::SetHeight(int h)$/;"	f	class:WED_AirportSign
SetHeight	.\WEDEntities\WED_FacadePlacement.cpp	/^void WED_FacadePlacement::SetHeight(double h)$/;"	f	class:WED_FacadePlacement
SetHeight	.\WEDEntities\WED_TowerViewpoint.cpp	/^void	WED_TowerViewpoint::SetHeight(double h)$/;"	f	class:WED_TowerViewpoint
SetHilite	.\GUI\GUI_Button.cpp	/^void		GUI_Button::SetHilite(int hilite)$/;"	f	class:GUI_Button
SetHotArrive	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::SetHotArrive(const set<int>& rwys)$/;"	f	class:WED_TaxiRoute
SetHotDepart	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::SetHotDepart(const set<int>& rwys)$/;"	f	class:WED_TaxiRoute
SetHotILS	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::SetHotILS(const set<int>& rwys)$/;"	f	class:WED_TaxiRoute
SetICAO	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::SetICAO(const string& x) { icao = x; }$/;"	f	class:WED_Airport
SetID	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetID(int id)$/;"	f	class:GUI_Pane
SetImage	.\GUI\GUI_ScrollerPane.cpp	/^void	GUI_ScrollerPane::SetImage(const char * image_res)$/;"	f	class:GUI_ScrollerPane
SetImage	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::SetImage(const char * image_res)$/;"	f	class:GUI_Splitter
SetImage	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::SetImage(const char * image, int alternations)$/;"	f	class:GUI_TextTable
SetImage	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::SetImage(const char * image)$/;"	f	class:GUI_TextTableHeader
SetImage	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SetImage(const char * image)$/;"	f	class:GUI_TextTableSide
SetImage	.\WEDEntities\WED_OverlayImage.cpp	/^void		WED_OverlayImage::SetImage(const string& image_file)$/;"	f	class:WED_OverlayImage
SetImage1	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::SetImage1(const char * image_res)$/;"	f	class:GUI_Splitter
SetImage2	.\GUI\GUI_Splitter.cpp	/^void		GUI_Splitter::SetImage2(const char * image_res)$/;"	f	class:GUI_Splitter
SetImplicitMultiline	.\GUI\GUI_Label.cpp	/^void		GUI_Label::SetImplicitMultiline(bool isImplicitMultiline)$/;"	f	class:GUI_Label
SetKeyAllowed	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetKeyAllowed(char key, bool allowed)$/;"	f	class:GUI_TextField
SetKeyMsg	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetKeyMsg(intptr_t msg, intptr_t param)$/;"	f	class:GUI_TextField
SetKind	.\WEDEntities\WED_AirportBeacon.cpp	/^void		WED_AirportBeacon::SetKind(int k)$/;"	f	class:WED_AirportBeacon
SetLat	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetLat(double inLat){mLat = inLat;}$/;"	f	class:WED_XPluginEntity
SetLayer	.\WEDEntities\WED_RoadEdge.cpp	/^void	WED_RoadEdge::SetLayer(int l)$/;"	f	class:WED_RoadEdge
SetLayerForChain	.\XESCore\NetPlacement.cpp	/^void		Net_JunctionInfo_t::SetLayerForChain(Net_ChainInfo_t * me, int l)$/;"	f	class:Net_JunctionInfo_t
SetLength	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::SetLength(double l)$/;"	f	class:WED_GISPoint_HeadingWidthLength
SetLightType	.\WEDEntities\WED_LightFixture.cpp	/^void	WED_LightFixture::SetLightType(int x)$/;"	f	class:WED_LightFixture
SetLit	.\WEDEntities\WED_Windsock.cpp	/^void	WED_Windsock::SetLit(int l)$/;"	f	class:WED_Windsock
SetLocation	.\WEDEntities\WED_GISPoint.cpp	/^void	WED_GISPoint::SetLocation(GISLayer_t l, const Point2& p)$/;"	f	class:WED_GISPoint
SetLocation	.\WEDEntities\WED_TextureBezierNode.cpp	/^void		WED_TextureBezierNode::SetLocation(GISLayer_t l,const Point2& st)$/;"	f	class:WED_TextureBezierNode
SetLocation	.\WEDEntities\WED_TextureNode.cpp	/^void		WED_TextureNode::SetLocation(GISLayer_t l, const Point2& st)$/;"	f	class:WED_TextureNode
SetLogicalHeight	.\GUI\GUI_TextField.cpp	/^void			GUI_TextField::SetLogicalHeight($/;"	f	class:GUI_TextField
SetLogicalHeightCB	.\OGLE\ogle.cpp	/^void			OGLE::SetLogicalHeightCB($/;"	f	class:OGLE
SetLogicalHeight_f	.\OGLE\ogle.h	/^	void			(* SetLogicalHeight_f)($/;"	m	struct:OGLE_Callbacks
SetLon	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetLon(double inLon){mLon = inLon;}$/;"	f	class:WED_XPluginEntity
SetMap	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::SetMap(WED_MapPane * amap, WED_LibraryPreviewPane * apreview)$/;"	f	class:WED_LibraryListAdapter
SetMapLogicalBounds	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::SetMapLogicalBounds($/;"	f	class:RF_MapZoomer
SetMapLogicalBounds	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::SetMapLogicalBounds($/;"	f	class:WED_MapZoomerNew
SetMapVisibleBounds	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::SetMapVisibleBounds($/;"	f	class:RF_MapZoomer
SetMargins	.\GUI\GUI_Label.cpp	/^void		GUI_Label::SetMargins(float l, float b, float r, float t)$/;"	f	class:GUI_Label
SetMargins	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetMargins(float l, float b, float r, float t)$/;"	f	class:GUI_TextField
SetMarkings	.\WEDEntities\WED_Helipad.cpp	/^void		WED_Helipad::SetMarkings(int x)$/;"	f	class:WED_Helipad
SetMarkings1	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetMarkings1(int x) { mark1 = x; }$/;"	f	class:WED_Runway
SetMarkings2	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetMarkings2(int x) { mark2 = x; }$/;"	f	class:WED_Runway
SetMax	.\GUI\GUI_Control.cpp	/^void	GUI_Control::SetMax(float inMax)$/;"	f	class:GUI_Control
SetMax	.\GUI\GUI_ScrollBar.cpp	/^void	GUI_ScrollBar::SetMax(float inMax)$/;"	f	class:GUI_ScrollBar
SetMin	.\GUI\GUI_Control.cpp	/^void	GUI_Control::SetMin(float inMin)$/;"	f	class:GUI_Control
SetMin	.\GUI\GUI_ScrollBar.cpp	/^void	GUI_ScrollBar::SetMin(float inMin)$/;"	f	class:GUI_ScrollBar
SetMinStripSize	.\DSF\tri_stripper_101\tri_stripper.h	/^inline void tri_stripper::SetMinStripSize(const size_t MinStripSize) {$/;"	f	class:triangle_stripper::tri_stripper
SetMsg	.\GUI\GUI_Control.cpp	/^void	GUI_Control::SetMsg(intptr_t m, intptr_t v)$/;"	f	class:GUI_Control
SetNWLinkAdapter	.\WEDCore\WED_Archive.cpp	/^void			WED_Archive::SetNWLinkAdapter(WED_NWLinkAdapter * inAdapter)$/;"	f	class:WED_Archive
SetName	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::SetName(const string& n)$/;"	f	class:WED_Thing
SetName	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetName(const string& inName){mName=inName;}$/;"	f	class:WED_XPluginEntity
SetNthProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::SetNthProperty(int n, const PropertyVal_t& val)$/;"	f	class:WED_PropertyHelper
SetNthProperty	.\WEDEntities\WED_GISLine_Width.cpp	/^void		WED_GISLine_Width::SetNthProperty(int n, const PropertyVal_t& val)$/;"	f	class:WED_GISLine_Width
SetNthProperty	.\WEDTCE\WED_TCEToolAdapter.cpp	/^void		WED_TCEToolAdapter::SetNthProperty(int n, const PropertyVal_t& val)$/;"	f	class:WED_TCEToolAdapter
SetNthPropertyValue	.\RenderFarmUI\RF_BezierTestTool.cpp	/^void	RF_BezierTestTool::SetNthPropertyValue(int n, double v)$/;"	f	class:RF_BezierTestTool
SetNthPropertyValue	.\RenderFarmUI\RF_CropTool.cpp	/^void	RF_CropTool::SetNthPropertyValue(int n, double v)$/;"	f	class:RF_CropTool
SetNthPropertyValue	.\RenderFarmUI\RF_ImageTool.cpp	/^void	RF_ImageTool::SetNthPropertyValue(int n, double v)$/;"	f	class:RF_ImageTool
SetNthPropertyValue	.\RenderFarmUI\RF_MeshTester.cpp	/^void	RF_MeshTester::SetNthPropertyValue(int, double) { }$/;"	f	class:RF_MeshTester
SetNthPropertyValue	.\RenderFarmUI\RF_SelectionTool.cpp	/^void	RF_SelectionTool::SetNthPropertyValue(int, double v)$/;"	f	class:RF_SelectionTool
SetNthPropertyValue	.\RenderFarmUI\RF_TerraTool.cpp	/^void	RF_TerraTool::SetNthPropertyValue(int, double v)$/;"	f	class:RF_TerraTool
SetNthPropertyValue	.\RenderFarmUI\RF_TopoTester.cpp	/^void	RF_TopoTester::SetNthPropertyValue(int, double) { }$/;"	f	class:RF_TopoTester
SetNthPropertyValue	.\RenderFarmUI\RF_TriTestTool.cpp	/^void	RF_TriTestTool::SetNthPropertyValue(int, double) { }$/;"	f	class:RF_TriTestTool
SetObjDensity	.\WEDMap\WED_PreviewLayer.cpp	/^void		WED_PreviewLayer::SetObjDensity(int d)$/;"	f	class:WED_PreviewLayer
SetOneway	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::SetOneway(int d)$/;"	f	class:WED_TaxiRoute
SetOpen	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::SetOpen(const string& r, int open)$/;"	f	class:WED_LibraryListAdapter
SetOpen	.\WEDProperties\WED_PropertyTable.cpp	/^void WED_PropertyTable::SetOpen(int id, int o)$/;"	f	class:WED_PropertyTable
SetPackage	.\WEDXPlugin\WED_XPluginMgr.h	/^        void    SetPackage(const string& inPackage){mPackage=inPackage;}$/;"	f	class:WED_XPluginMgr
SetPageSize	.\GUI\GUI_Control.cpp	/^void	GUI_Control::SetPageSize(float inPageSize)$/;"	f	class:GUI_Control
SetPageSize	.\GUI\GUI_ScrollBar.cpp	/^void	GUI_ScrollBar::SetPageSize(float inPageSize)$/;"	f	class:GUI_ScrollBar
SetParent	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetParent(GUI_Pane * inParent)$/;"	f	class:GUI_Pane
SetParent	.\WEDEntities\WED_Thing.cpp	/^void				WED_Thing::SetParent(WED_Thing * parent, int nth)$/;"	f	class:WED_Thing
SetParentTable	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::SetParentTable(GUI_Table * parent)$/;"	f	class:GUI_TextTable
SetPasswordChar	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetPasswordChar(char c)$/;"	f	class:GUI_TextField
SetPatternRunway	.\WEDEntities\WED_ATCFlow.cpp	/^void	WED_ATCFlow::SetPatternRunway(int r)$/;"	f	class:WED_ATCFlow
SetPavementTransparency	.\WEDMap\WED_PreviewLayer.cpp	/^void		WED_PreviewLayer::SetPavementTransparency(float alpha)$/;"	f	class:WED_PreviewLayer
SetPixelBounds	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::SetPixelBounds($/;"	f	class:RF_MapZoomer
SetPixelBounds	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::SetPixelBounds($/;"	f	class:WED_MapZoomerNew
SetPort	.\WEDXPlugin\WED_XPluginClient.h	/^				void	SetPort(unsigned short inPort){mPort=inPort;}$/;"	f	class:WED_XPluginClient
SetProbeRef	.\WEDXPlugin\WED_XPluginCamera.h	/^    void SetProbeRef(XPLMProbeRef inProbeRef){mProbeRef=inProbeRef;}$/;"	f	class:WED_XPluginCamera
SetProjector	.\ObjEdit\OE_ProjectionMgr.cpp	/^void		OE_ProjectionMgr::SetProjector(int p)$/;"	f	class:OE_ProjectionMgr
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropBoolText
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropDoubleText
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleTextMeters::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropDoubleTextMeters
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropFileText
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropIntEnum
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropIntEnumBitfield
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropIntEnumSet
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropIntEnumSetFilter
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropIntEnumSetUnion
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropIntText
SetProperty	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_PropStringText
SetProperty	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::SetProperty(const PropertyVal_t& val, WED_PropertyHelper * parent)$/;"	f	class:WED_TypeField
SetProvider	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::SetProvider(GUI_TextTableProvider * content)$/;"	f	class:GUI_TextTable
SetProvider	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableHeader::SetProvider(GUI_TextTableHeaderProvider * content)$/;"	f	class:GUI_TextTableHeader
SetProvider	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SetProvider(GUI_TextTableHeaderProvider * content)$/;"	f	class:GUI_TextTableSide
SetREIL1	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetREIL1(int x) { reil1 = x; }$/;"	f	class:WED_Runway
SetREIL2	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetREIL2(int x) { reil2 = x; }$/;"	f	class:WED_Runway
SetRange	.\DSF\DSFPointPool.cpp	/^void			DSF32BitPointPool::SetRange($/;"	f	class:DSF32BitPointPool
SetRange	.\DSF\DSFPointPool.cpp	/^void DSFContiguousPointPool::SetRange($/;"	f	class:DSFContiguousPointPool
SetRange	.\DSF\DSFPointPool.cpp	/^void DSFSharedPointPool::SetRange($/;"	f	class:DSFSharedPointPool
SetRange	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void			DSF32BitPointPool::SetRange($/;"	f	class:DSF32BitPointPool
SetRange	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void DSFContiguousPointPool::SetRange($/;"	f	class:DSFContiguousPointPool
SetRange	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void DSFSharedPointPool::SetRange($/;"	f	class:DSFSharedPointPool
SetReadPos	.\WEDCore\WED_Buffer.cpp	/^void WED_Buffer::SetReadPos(uintptr_t a, int b)$/;"	f	class:WED_Buffer
SetRealLinesShowing	.\WEDMap\WED_StructureLayer.cpp	/^void		WED_StructureLayer::SetRealLinesShowing(bool show)$/;"	f	class:WED_StructureLayer
SetReceiver	.\UI\XWin32DND.cpp	/^void	CDropTarget::SetReceiver(XWinFileReceiver * inReceiver, HWND inWindow)$/;"	f	class:CDropTarget
SetRemainingSigns	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetRemainingSigns(int x) { remaining_signs = x; }$/;"	f	class:WED_Runway
SetResPath	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetResPath(const string& inPath){mResPath=inPath;}$/;"	f	class:WED_XPluginEntity
SetResource	.\WEDEntities\WED_DrapedOrthophoto.cpp	/^void		WED_DrapedOrthophoto::SetResource(const string& r)$/;"	f	class:WED_DrapedOrthophoto
SetResource	.\WEDEntities\WED_FacadePlacement.cpp	/^void		WED_FacadePlacement::SetResource(const string& r)$/;"	f	class:WED_FacadePlacement
SetResource	.\WEDEntities\WED_ForestPlacement.cpp	/^void		WED_ForestPlacement::SetResource(const string& r)$/;"	f	class:WED_ForestPlacement
SetResource	.\WEDEntities\WED_LinePlacement.cpp	/^void		WED_LinePlacement::SetResource(const string& r)$/;"	f	class:WED_LinePlacement
SetResource	.\WEDEntities\WED_ObjPlacement.cpp	/^void		WED_ObjPlacement::SetResource(const string& r)$/;"	f	class:WED_ObjPlacement
SetResource	.\WEDEntities\WED_PolygonPlacement.cpp	/^void		WED_PolygonPlacement::SetResource(const string& r)$/;"	f	class:WED_PolygonPlacement
SetResource	.\WEDEntities\WED_StringPlacement.cpp	/^void		WED_StringPlacement::SetResource(const string& r)$/;"	f	class:WED_StringPlacement
SetResource	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^void WED_LibraryPreviewPane::SetResource(const string& r, int res_type)$/;"	f	class:WED_LibraryPreviewPane
SetResource	.\WEDMap\WED_CreatePointTool.cpp	/^void		WED_CreatePointTool::SetResource(const string& r)$/;"	f	class:WED_CreatePointTool
SetResource	.\WEDMap\WED_CreatePolygonTool.cpp	/^void		WED_CreatePolygonTool::SetResource(const string& r)$/;"	f	class:WED_CreatePolygonTool
SetResource	.\WEDMap\WED_MapPane.cpp	/^void WED_MapPane::SetResource(const string& r, int res_type)$/;"	f	class:WED_MapPane
SetRessource	.\WEDXPlugin\WED_XPluginObject.cpp	/^int  WED_XPluginObject::SetRessource(const string& inPath)$/;"	f	class:WED_XPluginObject
SetRoughness	.\WEDEntities\WED_Helipad.cpp	/^void		WED_Helipad::SetRoughness(double x)$/;"	f	class:WED_Helipad
SetRoughness	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetRoughness(double x) { roughness = x; }$/;"	f	class:WED_Runway
SetRoughness	.\WEDEntities\WED_Taxiway.cpp	/^void		WED_Taxiway::SetRoughness(double r)$/;"	f	class:WED_Taxiway
SetRunway	.\WEDEntities\WED_ATCRunwayUse.cpp	/^void	WED_ATCRunwayUse::SetRunway(int r)$/;"	f	class:WED_ATCRunwayUse
SetRunway	.\WEDEntities\WED_TaxiRoute.cpp	/^void		WED_TaxiRoute::SetRunway(int r)$/;"	f	class:WED_TaxiRoute
SetScale	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::SetScale($/;"	f	class:OE_Zoomer3d
SetSceneryID	.\WEDEntities\WED_Airport.cpp	/^void		WED_Airport::SetSceneryID(int x) { scenery_id = x; }$/;"	f	class:WED_Airport
SetSel	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void WED_LibraryListAdapter::SetSel(const string& s,const string& noPrefix)$/;"	f	class:WED_LibraryListAdapter
SetSelection	.\OGLE\ogle.cpp	/^void			OGLE::SetSelection($/;"	f	class:OGLE
SetShoulder	.\WEDEntities\WED_Helipad.cpp	/^void		WED_Helipad::SetShoulder(int x)$/;"	f	class:WED_Helipad
SetShoulder	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetShoulder(int x) { shoulder = x; }$/;"	f	class:WED_Runway
SetShowLevel	.\WEDEntities\WED_FacadePlacement.cpp	/^void		WED_FacadePlacement::SetShowLevel(int sl)$/;"	f	class:WED_FacadePlacement
SetShowLevel	.\WEDEntities\WED_ObjPlacement.cpp	/^void		WED_ObjPlacement::SetShowLevel(int sl)$/;"	f	class:WED_ObjPlacement
SetSide	.\GUI\GUI_Table.cpp	/^void		GUI_Side::SetSide(GUI_TableSide * inSide)$/;"	f	class:GUI_Side
SetSide	.\WEDEntities\WED_GISEdge.cpp	/^void		WED_GISEdge::SetSide(GISLayer_t layer, const Segment2& s)$/;"	f	class:WED_GISEdge
SetSideBezier	.\WEDEntities\WED_GISEdge.cpp	/^void		WED_GISEdge::SetSideBezier(GISLayer_t layer, const Bezier2& b)$/;"	f	class:WED_GISEdge
SetSpacing	.\WEDEntities\WED_StringPlacement.cpp	/^void			WED_StringPlacement::SetSpacing(double s)$/;"	f	class:WED_StringPlacement
SetSplit	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^void	WED_GISPoint_Bezier::SetSplit		   (bool split)$/;"	f	class:WED_GISPoint_Bezier
SetState	.\GUI\GUI_GraphState.h	/^	inline void	SetState(bool lit, int tex, bool fog, bool test, bool blend, bool read, bool write)$/;"	f	class:GUI_GraphState
SetSticky	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetSticky(float inSticky[4])$/;"	f	class:GUI_Pane
SetSticky	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::SetSticky(float x1, float y1, float x2, float y2)$/;"	f	class:GUI_Pane
SetStripID	.\DSF\tri_stripper_101\tri_stripper.h	/^inline void tri_stripper::triangle::SetStripID(const size_t StripID) {$/;"	f	class:triangle_stripper::tri_stripper::triangle
SetStyle	.\WEDEntities\WED_AirportSign.cpp	/^void	WED_AirportSign::SetStyle(int s)$/;"	f	class:WED_AirportSign
SetSubView	.\GUI\GUI_ChangeView.cpp	/^void	GUI_ChangeView::SetSubView(int who)$/;"	f	class:GUI_ChangeView
SetSubtype	.\WEDEntities\WED_RoadEdge.cpp	/^void	WED_RoadEdge::SetSubtype(int s)$/;"	f	class:WED_RoadEdge
SetSurface	.\WEDEntities\WED_Helipad.cpp	/^void		WED_Helipad::SetSurface(int x)$/;"	f	class:WED_Helipad
SetSurface	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetSurface(int x) { surface = x; }$/;"	f	class:WED_Runway
SetSurface	.\WEDEntities\WED_Taxiway.cpp	/^void		WED_Taxiway::SetSurface(int s)$/;"	f	class:WED_Taxiway
SetTDZL1	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetTDZL1(int x) { tdzl1 = x; }$/;"	f	class:WED_Runway
SetTDZL2	.\WEDEntities\WED_Runway.cpp	/^	void		WED_Runway::SetTDZL2(int x) { tdzl2 = x; }$/;"	f	class:WED_Runway
SetTab	.\GUI\GUI_TabPane.cpp	/^void			GUI_TabPane::SetTab(int n)$/;"	f	class:GUI_TabPane
SetTable	.\GUI\GUI_Table.cpp	/^void		GUI_Header::SetTable(GUI_Table * inTable)$/;"	f	class:GUI_Header
SetTable	.\GUI\GUI_Table.cpp	/^void		GUI_Side::SetTable(GUI_Table * inTable)$/;"	f	class:GUI_Side
SetTerrainForConstraints	.\XESCore\MeshAlgs.cpp	/^void	SetTerrainForConstraints(CDT& ioMesh, const DEMGeo& allPts)$/;"	f
SetTexRepeatParams	.\Obj\XObjBuilder.cpp	/^void	XObjBuilder::SetTexRepeatParams(float repeat_s, float repeat_t, float offset_s, float offset_t)$/;"	f	class:XObjBuilder
SetTexUnits	.\GUI\GUI_GraphState.cpp	/^void		GUI_GraphState::SetTexUnits(int count)$/;"	f	class:GUI_GraphState
SetTextColor	.\GUI\GUI_TabControl.cpp	/^void		GUI_TabControl::SetTextColor(float color[4])$/;"	f	class:GUI_TabControl
SetTextColor	.\GUI\GUI_TabPane.cpp	/^void			GUI_TabPane::SetTextColor(float color[4])$/;"	f	class:GUI_TabPane
SetTextFieldColors	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTable::SetTextFieldColors($/;"	f	class:GUI_TextTable
SetTiles	.\GUI\GUI_Button.cpp	/^void	GUI_Button::SetTiles($/;"	f	class:GUI_Button
SetTimerInterval	.\UI\XWin.lin.cpp	/^void XWin::SetTimerInterval(double seconds)$/;"	f	class:XWin
SetTimerInterval	.\UI\XWin.win.cpp	/^void			XWin::SetTimerInterval(double seconds)$/;"	f	class:XWin
SetTitle	.\UI\XWin.lin.cpp	/^void XWin::SetTitle(const char * inTitle)$/;"	f	class:XWin
SetTitle	.\UI\XWin.win.cpp	/^void			XWin::SetTitle(const char * inTitle)$/;"	f	class:XWin
SetToTerrain	.\WEDXPlugin\WED_XPluginEntity.h	/^    virtual void    SetToTerrain(bool inToTerrain){mSetToTerrain = inToTerrain;}$/;"	f	class:WED_XPluginEntity
SetTool	.\WEDMap\WED_Map.cpp	/^void		WED_Map::SetTool(WED_MapToolNew * tool)$/;"	f	class:WED_Map
SetTool	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::SetTool(IPropertyObject * tool)$/;"	f	class:WED_ToolInfoAdapter
SetTool	.\WEDTCE\WED_TCE.cpp	/^void		WED_TCE::SetTool(WED_TCEToolNew * tool)$/;"	f	class:WED_TCE
SetToolTips	.\GUI\GUI_ToolBar.cpp	/^void	GUI_ToolBar::SetToolTips(const vector<string>& in_tips)$/;"	f	class:GUI_ToolBar
SetType	.\WEDEntities\WED_RampPosition.cpp	/^void	WED_RampPosition::SetType(int	rt)$/;"	f	class:WED_RampPosition
SetUndo	.\WEDCore\WED_Archive.cpp	/^void WED_Archive::SetUndo(WED_UndoLayer * inUndo)$/;"	f	class:WED_Archive
SetUndoManager	.\WEDCore\WED_Archive.cpp	/^void			WED_Archive::SetUndoManager(WED_UndoMgr * mgr)$/;"	f	class:WED_Archive
SetVKAllowed	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetVKAllowed(int vk, bool allowed)$/;"	f	class:GUI_TextField
SetValue	.\GUI\GUI_Button.cpp	/^void		GUI_Button::SetValue(float inValue)$/;"	f	class:GUI_Button
SetValue	.\GUI\GUI_Control.cpp	/^void	GUI_Control::SetValue(float inValue)$/;"	f	class:GUI_Control
SetValue	.\GUI\GUI_PopupButton.cpp	/^void		GUI_PopupButton::SetValue(float inValue)$/;"	f	class:GUI_PopupButton
SetValue	.\GUI\GUI_ScrollBar.cpp	/^void	GUI_ScrollBar::SetValue(float inValue)$/;"	f	class:GUI_ScrollBar
SetValue	.\GUI\GUI_TabControl.cpp	/^void		GUI_TabControl::SetValue(float inValue)$/;"	f	class:GUI_TabControl
SetValue	.\GUI\GUI_ToolBar.cpp	/^void	GUI_ToolBar::SetValue(float inValue)$/;"	f	class:GUI_ToolBar
SetVerticesShowing	.\WEDMap\WED_StructureLayer.cpp	/^void		WED_StructureLayer::SetVerticesShowing(bool show)$/;"	f	class:WED_StructureLayer
SetVisible	.\UI\XWin.lin.cpp	/^void XWin::SetVisible(bool visible)$/;"	f	class:XWin
SetVisible	.\UI\XWin.win.cpp	/^void			XWin::SetVisible(bool visible)$/;"	f	class:XWin
SetWallType	.\WEDEntities\WED_FacadeNode.cpp	/^void	WED_FacadeNode::SetWallType(int wt)$/;"	f	class:WED_FacadeNode
SetWatershedToDominant	.\XESCore\DEMAlgs.cpp	/^static void	SetWatershedToDominant(DEMGeo& underlying, DEMGeo& ws, DEMGeo::address seed, address_fifo& fifo)$/;"	f	file:
SetWatershedsToDominant	.\XESCore\DEMAlgs.cpp	/^void	SetWatershedsToDominant(DEMGeo& underlying, DEMGeo& ws, const vector<DEMGeo::address>& io_sheds)$/;"	f
SetWidth	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::SetWidth(float width)$/;"	f	class:GUI_TextField
SetWidth	.\WEDEntities\WED_GISLine_Width.cpp	/^void	WED_GISLine_Width::SetWidth (double w)$/;"	f	class:WED_GISLine_Width
SetWidth	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^void	WED_GISPoint_HeadingWidthLength::SetWidth (double w)$/;"	f	class:WED_GISPoint_HeadingWidthLength
SetXPlaneFolder	.\WEDCore\WED_PackageMgr.cpp	/^void		WED_PackageMgr::SetXPlaneFolder(const string& root)$/;"	f	class:WED_PackageMgr
SetZoning	.\XESCore\MapDefs.h	/^	void		SetZoning(int z) { mParams[af_Zoning] = z; }$/;"	f	class:GIS_face_data
SetupDraped_f	.\Obj\ObjDraw.h	/^	void (* SetupDraped_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupFileCmds	.\ObjEdit\OE_FileCmds.cpp	/^void	SetupFileCmds(void)$/;"	f
SetupFrustum	.\Utils\HLCamera.cpp	/^void		xcam_class::SetupFrustum($/;"	f	class:xcam_class
SetupInternalRes	.\Installer\XResources.win.cpp	/^static	int	SetupInternalRes(void)$/;"	f	file:
SetupLight_f	.\Obj\ObjDraw.h	/^	void (* SetupLight_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupLine_f	.\Obj\ObjDraw.h	/^	void (* SetupLine_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupMatrices	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::SetupMatrices($/;"	f	class:OE_Zoomer3d
SetupMovie_f	.\Obj\ObjDraw.h	/^	void (* SetupMovie_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupNoDraped_f	.\Obj\ObjDraw.h	/^	void (* SetupNoDraped_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupNormalShading	.\RenderFarmUI\RF_MapView.cpp	/^void	SetupNormalShading(void)$/;"	f
SetupOrtho	.\Utils\HLCamera.cpp	/^void		xcam_class::SetupOrtho($/;"	f	class:xcam_class
SetupPanel_f	.\Obj\ObjDraw.h	/^	void (* SetupPanel_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupPerspective	.\Utils\HLCamera.cpp	/^void		xcam_class::SetupPerspective($/;"	f	class:xcam_class
SetupPoly_f	.\Obj\ObjDraw.h	/^	void (* SetupPoly_f)(void * ref);$/;"	m	struct:ObjDrawFuncs10_t
SetupRasterizerForDEM	.\XESCore\MapAlgs.cpp	/^int		SetupRasterizerForDEM(const Pmwx::Face_handle f, const DEMGeo& dem, PolyRasterizer<double>& rasterizer)$/;"	f
SetupRasterizerForDEM	.\XESCore\MapAlgs.cpp	/^int		SetupRasterizerForDEM(const set<Halfedge_handle>& inEdges, const DEMGeo& dem, PolyRasterizer<double>& rasterizer)$/;"	f
SetupRasterizerForMesh	.\XESTools\GISTool_ProcessingCmds.cpp	/^void SetupRasterizerForMesh(PolyRasterizer<double>& rasterizer, CDT& ioMesh, DEMGeo& dem)$/;"	f
SetupSelCmds	.\ObjEdit\OE_SelCmds.cpp	/^void	SetupSelCmds(void)$/;"	f
SetupTexCmds	.\ObjEdit\OE_TexCmds.cpp	/^void	SetupTexCmds(void)$/;"	f
SetupUTMMap	.\Utils\GISUtils.cpp	/^static	void	SetupUTMMap(int inZone)$/;"	f	file:
SetupWaterRasterizer	.\XESCore\MeshAlgs.cpp	/^void SetupWaterRasterizer(const Pmwx& map, const DEMGeo& orig, PolyRasterizer<double>& rasterizer, int terrain_wanted)$/;"	f
ShapeFileToBoolDem	.\XESCore\Hydro.cpp	/^bool	ShapeFileToBoolDem(const char * inShapeFile, DEMGeo& elev)$/;"	f
ShapeIO_H	.\RawImport\ShapeIO.h	25;"	d
ShapeLineImporter	.\RawImport\ShapeIO.cpp	/^static bool ShapeLineImporter(const vector<string>& inTokenLine, void * inRef)$/;"	f	file:
ShapedCurveToCurve	.\Utils\RoadNetUtils.cpp	/^static	void	ShapedCurveToCurve($/;"	f	file:
SharedSubPool	.\DSF\DSFPointPool.h	/^	struct	SharedSubPool {$/;"	s	class:DSFSharedPointPool
SharedSubPool	.\DSF\dsflib_013005\DSFPointPool.h	/^	struct	SharedSubPool {$/;"	s	class:DSFSharedPointPool
Show	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::Show(void)$/;"	f	class:GUI_Pane
Show	.\GUI\GUI_Window.cpp	/^void	GUI_Window::Show(void)$/;"	f	class:GUI_Window
Show	.\ObjEdit\OE_Pane.cpp	/^void	OE_Pane::Show(bool inVisible)$/;"	f	class:OE_Pane
Show	.\RenderFarmUI\RF_Pane.cpp	/^void	RF_Pane::Show(bool inVisible)$/;"	f	class:RF_Pane
ShowMessage	.\WEDWindows\WED_StartWindow.cpp	/^void	WED_StartWindow::ShowMessage(const string& msg)$/;"	f	class:WED_StartWindow
ShowProgressMessage	.\Utils\PlatformUtils.lin.cpp	/^void	ShowProgressMessage(const char * inMsg, float * inProgress)$/;"	f
Shuffle	.\WEDEntities\WED_GISChain.cpp	/^void WED_GISChain::Shuffle(GISLayer_t l)$/;"	f	class:WED_GISChain
Shuffle	.\WEDEntities\WED_GISEdge.cpp	/^void WED_GISEdge::Shuffle(GISLayer_t l)$/;"	f	class:WED_GISEdge
Shuffle	.\WEDEntities\WED_GISLine.cpp	/^void WED_GISLine::Shuffle(GISLayer_t l)$/;"	f	class:WED_GISLine
Shuffle	.\WEDEntities\WED_GISPolygon.cpp	/^void WED_GISPolygon::Shuffle(GISLayer_t l)$/;"	f	class:WED_GISPolygon
ShutdownNetworking	.\Network\PCSBSocket.lin.cpp	/^void PCSBSocket::ShutdownNetworking(bool inCloseDLL)$/;"	f	class:PCSBSocket
ShutdownNetworking	.\Network\PCSBSocket.win.cpp	/^void PCSBSocket::ShutdownNetworking(bool inCloseDLL)$/;"	f	class:PCSBSocket
SideDraw	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SideDraw	 (int cell_bounds[4], int cell_y, GUI_GraphState * inState			  )$/;"	f	class:GUI_TextTableSide
SideGetCursor	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTableSide::SideGetCursor(int cell_bounds[4], int cell_y, int mouse_x, int mouse_y)$/;"	f	class:GUI_TextTableSide
SideGetHelpTip	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTableSide::SideGetHelpTip(int cell_bounds[4], int cell_y, int mouse_x, int mouse_y, string& tip								  )$/;"	f	class:GUI_TextTableSide
SideMouseDown	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTableSide::SideMouseDown(int cell_bounds[4], int cell_y, int mouse_x, int mouse_y, int button, GUI_KeyFlags flags, int& want_lock)$/;"	f	class:GUI_TextTableSide
SideMouseDrag	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SideMouseDrag(int cell_bounds[4], int cell_y, int mouse_x, int mouse_y, int button)$/;"	f	class:GUI_TextTableSide
SideMouseUp	.\GUI\GUI_TextTable.cpp	/^void		GUI_TextTableSide::SideMouseUp  (int cell_bounds[4], int cell_y, int mouse_x, int mouse_y, int button)$/;"	f	class:GUI_TextTableSide
SideToPoints	.\WEDMap\WED_DrawUtils.cpp	/^void SideToPoints(IGISPointSequence * ps, int i, WED_MapZoomerNew * z,  vector<Point2>& pts)$/;"	f
SimplifyAirportAreasAndSplat	.\XESCore\Airports.cpp	/^void	SimplifyAirportAreasAndSplat(Pmwx& inDstMap, Polygon_set_2& in_area, bool do_simplify, set<Face_handle>& outDstFaces, apt_fill_mode inFillWater, Locator * loc)$/;"	f
SimplifyCoastlineFace	.\XESCore\Hydro.cpp	/^void	SimplifyCoastlineFace(Pmwx& ioMap, Face_handle face, vector<pair<Bbox2, vector<Point2> > >& cache)$/;"	f
SimplifyCoastlines	.\XESCore\Hydro.cpp	/^void	SimplifyCoastlines(Pmwx& ioMap, const Bbox2& bounds, ProgressFunc func)$/;"	f
SimplifyMap	.\XESCore\MapTopology.cpp	/^int SimplifyMap(Pmwx& ioMap, bool inKillRivers, ProgressFunc func)$/;"	f
SimplifyPointSequence	.\XESCore\MapBuffer.cpp	/^void	SimplifyPointSequence(Polygon_2& input_seq)$/;"	f
SimplifyPolygonMaxMove	.\XESCore\MapPolygon.cpp	/^void	SimplifyPolygonMaxMove(Polygon_set_2& ioPolygon, double max_err)$/;"	f
SimplifyWaterCCB	.\XESCore\Hydro.cpp	/^void	SimplifyWaterCCB(Pmwx& ioMap, Halfedge_handle edge, vector<pair<Bbox2, vector<Point2> > >&		cache)$/;"	f
Simplify_f	.\XESCore\MapPolygon.h	/^typedef bool   (* Simplify_f)(Halfedge_const_handle he1, Halfedge_const_handle he2);$/;"	t
Simplify_polylines_2	.\XESCore\MapAlgs.cpp	/^typedef CGAL::Simplify_polylines_2<FastKernel>		Simplify_polylines_2;$/;"	t	file:
Size	.\DSF\tri_stripper_101\tri_stripper.h	/^inline size_t tri_stripper::triangle_strip::Size() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_strip
Size	.\XESCore\MapDefs.h	/^	  typedef std::size_t											Size;$/;"	t	class:Polygon_set_2
Size	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Size                   Size;$/;"	t	class:PmwxFmt	file:
SizeOfPng	.\WEDWindows\WED_AboutBox.cpp	/^static int *	SizeOfPng(const char * png)$/;"	f	file:
SizeOfPng	.\WEDWindows\WED_StartWindow.cpp	/^static int *	SizeOfPng(const char * png)$/;"	f	file:
SizeShowAll	.\GUI\GUI_Table.cpp	/^void		GUI_Table::SizeShowAll(void)$/;"	f	class:GUI_Table
SizeToBitmap	.\GUI\GUI_ToolBar.cpp	/^void	GUI_ToolBar::SizeToBitmap(void)$/;"	f	class:GUI_ToolBar
Skip	.\GUI\GUI_Clipboard.cpp	/^STDMETHODIMP		GUI_SimpleEnumFORMATETC::Skip			(ULONG count)$/;"	f	class:GUI_SimpleEnumFORMATETC
Sleep	.\Installer\InstallerMakerMain.cpp	30;"	d	file:
SnapMovePoint	.\WEDMap\WED_VertexTool.cpp	/^void		WED_VertexTool::SnapMovePoint(Point2& io_pt, const Vector2& delta, IGISEntity * who)$/;"	f	class:WED_VertexTool
SnapToCols	.\ObjEdit\OE_TablePane.cpp	/^void	OE_TablePane::SnapToCols(void)$/;"	f	class:OE_TablePane
SnowLineInfo_t	.\XESCore\DEMAlgs.cpp	/^struct	SnowLineInfo_t {$/;"	s	file:
SortByLULayer	.\XESCore\DSFBuilder.cpp	/^struct SortByLULayer {$/;"	s	file:
SortChainByLength	.\DSF\DSFLibWrite.cpp	/^	struct	SortChainByLength {$/;"	s	class:DSFFileWriterImp	file:
SortChainByLength	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	struct	SortChainByLength {$/;"	s	class:DSFFileWriterImp	file:
SortMasters	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::SortMasters(void)$/;"	f	class:PolyRasterizer
SortSplits	.\WEDMap\WED_CreateEdgeTool.cpp	/^static void SortSplits(const Segment2& s, vector<Point2>& splits)$/;"	f	file:
SortSplits	.\WEDMap\WED_CreateEdgeTool.cpp	/^static void SortSplits(const Segment2& s, vector<pair<IGISPointSequence *, Point2 > >& splits)$/;"	f	file:
Span_Horizontal_CCW	.\Utils\CompGeomUtils.cpp	/^bool	Span_Horizontal_CCW(const Vector2& v1, const Vector2& v2)$/;"	f
Sphere3	.\Utils\CompGeomDefs3.h	/^	Sphere3() : c(), radius_squared(0.0) { }$/;"	f	struct:Sphere3
Sphere3	.\Utils\CompGeomDefs3.h	/^	Sphere3(const Point3& center, double radius) : c(center), radius_squared(radius * radius) { }$/;"	f	struct:Sphere3
Sphere3	.\Utils\CompGeomDefs3.h	/^	Sphere3(const Sphere3& rhs) : c(rhs.c), radius_squared(rhs.radius_squared) { }$/;"	f	struct:Sphere3
Sphere3	.\Utils\CompGeomDefs3.h	/^struct	Sphere3 {$/;"	s
SphereInView	.\Utils\HLCamera.h	/^inline bool		xcam_class::SphereInView(GLdouble x, GLdouble y, GLdouble z, GLdouble radius)$/;"	f	class:xcam_class
SplitByLine	.\WEDMap\WED_CreateEdgeTool.cpp	/^void WED_CreateEdgeTool::SplitByLine(WED_Thing * host, IGISEntity * ent, const char* filter, const Segment2& splitter, vector<pair<IGISPointSequence *, Point2> >& out_splits)$/;"	f	class:WED_CreateEdgeTool
SplitByPts	.\WEDMap\WED_CreateEdgeTool.cpp	/^void WED_CreateEdgeTool::SplitByPts(WED_Thing * host, IGISEntity * ent, const char * filter, const Segment2& splitter, vector<Point2>& out_splits, double dsq)$/;"	f	class:WED_CreateEdgeTool
SplitSide	.\WEDEntities\WED_GISChain.cpp	/^IGISPoint *	WED_GISChain::SplitSide   (const Point2& p, double dist)$/;"	f	class:WED_GISChain
SplitSide	.\WEDEntities\WED_GISEdge.cpp	/^IGISPoint *	WED_GISEdge::SplitSide   (const Point2& p, double dist)$/;"	f	class:WED_GISEdge
SplitSide	.\WEDEntities\WED_GISLine.cpp	/^IGISPoint *	WED_GISLine::SplitSide   (const Point2& p, double dist)$/;"	f	class:WED_GISLine
SpreadDEMValues	.\XESCore\DEMAlgs.cpp	/^void	SpreadDEMValues(DEMGeo& ioDem)$/;"	f
SpreadDEMValues	.\XESCore\DEMAlgs.cpp	/^void	SpreadDEMValues(DEMGeo& ioDem, int dist, int x1, int y1, int x2, int y2)$/;"	f
SpreadDEMValuesIterate	.\XESCore\DEMAlgs.cpp	/^bool	SpreadDEMValuesIterate(DEMGeo& ioDem)$/;"	f
SpreadDEMValuesTotal	.\XESCore\DEMAlgs.cpp	/^void	SpreadDEMValuesTotal(DEMGeo& ioDem)$/;"	f
SpreadsheetForObject	.\XESCore\SceneryPackages.cpp	/^bool	SpreadsheetForObject(const char * inObjFile, FILE * outDstLine)$/;"	f
Squarify	.\XPTools\GetImage.cpp	/^void	Squarify(int x1, int y1, int x2, int y2)$/;"	f
StAtomWriter	.\Utils\XChunkyFileUtils.cpp	/^StAtomWriter::StAtomWriter(FILE * inFile, uint32_t inID)$/;"	f	class:StAtomWriter
StAtomWriter	.\Utils\XChunkyFileUtils.h	/^struct	StAtomWriter {$/;"	s
StCloseAndKill	.\DSF\DSFLibWrite.cpp	/^	StCloseAndKill(FILE * f, const char * p) : f_(f), p_(p) { }$/;"	f	struct:StCloseAndKill
StCloseAndKill	.\DSF\DSFLibWrite.cpp	/^struct	StCloseAndKill {$/;"	s	file:
StElapsedTime	.\Utils\PerfUtils.h	/^	StElapsedTime(const char * inName): mName(inName)$/;"	f	class:StElapsedTime
StElapsedTime	.\Utils\PerfUtils.h	/^class	StElapsedTime {$/;"	c
StGlobalBlock	.\GUI\GUI_Clipboard.cpp	/^	 StGlobalBlock(int mem) { handle = GlobalAlloc(GMEM_MOVEABLE, mem); }$/;"	f	struct:StGlobalBlock
StGlobalBlock	.\GUI\GUI_Clipboard.cpp	/^struct	StGlobalBlock {$/;"	s	file:
StGlobalLock	.\GUI\GUI_Clipboard.cpp	/^	 StGlobalLock(HGLOBAL h) { handle = h; ptr = GlobalLock(handle); }$/;"	f	struct:StGlobalLock
StGlobalLock	.\GUI\GUI_Clipboard.cpp	/^struct	StGlobalLock {$/;"	s	file:
StMemFile	.\SDTS\SDTSReadTVP.cpp	/^	StMemFile(MFMemFile * mf) : mf_(mf) { }$/;"	f	struct:StMemFile
StMemFile	.\SDTS\SDTSReadTVP.cpp	/^struct	StMemFile {$/;"	s	file:
StMemFile	.\VPF\VPFImport.cpp	/^	StMemFile(const char * p) : f_(MemFile_Open(p))$/;"	f	struct:StMemFile
StMemFile	.\VPF\VPFImport.cpp	/^struct	StMemFile {$/;"	s	file:
StNukeWriter	.\XESCore\DSFBuilder.cpp	/^	StNukeWriter(void * writer) : writer_(writer) { }$/;"	f	struct:StNukeWriter
StNukeWriter	.\XESCore\DSFBuilder.cpp	/^struct	StNukeWriter {$/;"	s	file:
StOpenClipboard	.\GUI\GUI_Clipboard.cpp	/^	 StOpenClipboard() { is_open = OpenClipboard(NULL); }$/;"	f	struct:StOpenClipboard
StOpenClipboard	.\GUI\GUI_Clipboard.cpp	/^struct	StOpenClipboard {$/;"	s	file:
StProfile	.\Utils\PerfUtils.h	/^	StProfile(unsigned char * fname) : fname_(fname) { ProfilerSetStatus(1); };$/;"	f	struct:StProfile
StProfile	.\Utils\PerfUtils.h	/^struct	StProfile {$/;"	s
StProfileInit	.\Utils\PerfUtils.h	/^	StProfileInit() { ProfilerInit(collectDetailed, bestTimeBase, 1000, 300); }$/;"	f	struct:StProfileInit
StProfileInit	.\Utils\PerfUtils.h	/^struct StProfileInit {$/;"	s
StRestoreChunk	.\Utils\BWImage.h	/^	StRestoreChunk(char * inSrc, char * inDst, int width, int bot, int top, bool save)$/;"	f	struct:StRestoreChunk
StRestoreChunk	.\Utils\BWImage.h	/^struct	StRestoreChunk {$/;"	s
StTextFileScanner	.\Utils\XUtils.cpp	/^StTextFileScanner::StTextFileScanner(const char * file, bool skip) :$/;"	f	class:StTextFileScanner
StTextFileScanner	.\Utils\XUtils.h	/^class	StTextFileScanner {$/;"	c
StTiffMemFile	.\XESCore\DEMIO.cpp	/^	StTiffMemFile(const char * fname) { file = MemFile_Open(fname); offset = 0; }$/;"	f	struct:StTiffMemFile
StTiffMemFile	.\XESCore\DEMIO.cpp	/^struct	StTiffMemFile {$/;"	s	file:
Start	.\GUI\GUI_Timer.cpp	/^void GUI_Timer::Start(float seconds)$/;"	f	class:GUI_Timer
Start	.\Utils\PerfUtils.h	/^	inline	void Start(void)$/;"	f	class:PerfTimer
StartCommand	.\WEDCore\WED_Persistent.h	160;"	d
StartDrag	.\Utils\UIUtils.cpp	/^bool		DragHandleSet::StartDrag($/;"	f	class:DragHandleSet
StartElement	.\Network\XMLObject.cpp	/^void StartElement(void *userData, const char *name, const char **atts)$/;"	f
StartElement	.\WEDCore\WED_Archive.cpp	/^void		WED_Archive::StartElement($/;"	f	class:WED_Archive
StartElement	.\WEDCore\WED_Document.cpp	/^void		WED_Document::StartElement($/;"	f	class:WED_Document
StartElement	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::StartElement($/;"	f	class:WED_PropIntEnumSet
StartElement	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropertyHelper::StartElement($/;"	f	class:WED_PropertyHelper
StartElement	.\WEDEntities\WED_AirportChain.cpp	/^void		WED_AirportChain::StartElement($/;"	f	class:WED_AirportChain
StartElement	.\WEDEntities\WED_KeyObjects.cpp	/^void		WED_KeyObjects::StartElement($/;"	f	class:WED_KeyObjects
StartElement	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::StartElement($/;"	f	class:WED_Select
StartElement	.\WEDEntities\WED_Thing.cpp	/^void		WED_Thing::StartElement($/;"	f	class:WED_Thing
StartElementHandler	.\WEDCore\WED_XMLReader.cpp	/^void	WED_XMLReader::StartElementHandler(void *userData,$/;"	f	class:WED_XMLReader
StartElementHandler_Count	.\OneOffs\osm2shape.c	/^void StartElementHandler_Count(void *userData,$/;"	f
StartElementHandler_Count	.\OneOffs\osm_tile.c	/^void StartElementHandler_Count(void *userData,$/;"	f
StartElementHandler_IndexNodes	.\OneOffs\osm_tile.c	/^void StartElementHandler_IndexNodes(void *userData,$/;"	f
StartElementHandler_IndexRelations	.\OneOffs\osm_tile.c	/^void StartElementHandler_IndexRelations(void *userData,$/;"	f
StartElementHandler_IndexWays	.\OneOffs\osm_tile.c	/^void StartElementHandler_IndexWays(void *userData,$/;"	f
StartElementHandler_Output	.\OneOffs\osm_tile.c	/^void StartElementHandler_Output(void *userData,$/;"	f
StartElementHandler_ReadData	.\OneOffs\osm2shape.c	/^void StartElementHandler_ReadData(void *userData,$/;"	f
StartElementHandler_ReindexNodes	.\OneOffs\osm_tile.c	/^void StartElementHandler_ReindexNodes(void *userData,$/;"	f
StartElementHandler_ReindexWays	.\OneOffs\osm_tile.c	/^void StartElementHandler_ReindexWays(void *userData,$/;"	f
StartICAODownload	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::StartICAODownload()$/;"	f	class:WED_GatewayImportDialog
StartOperation	.\Interfaces\IOperation.h	40;"	d
StartOrder	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle_strip::start_order tri_stripper::triangle_strip::StartOrder() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_strip
StartRule	.\Utils\CoverageFinder.cpp	/^void	CoverageFinder::StartRule(void)$/;"	f	class:CoverageFinder
StartScanline	.\Utils\PolyRasterUtils.h	/^void		PolyRasterizer<Number>::StartScanline(Number y)$/;"	f	class:PolyRasterizer
StartScanline	.\Utils\PolyRasterUtils.h	/^void	BoxRasterizer<Number>::StartScanline(Number iy1, Number iy2)$/;"	f	class:BoxRasterizer
StartSpecificVersionDownload	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::StartSpecificVersionDownload(int id)$/;"	f	class:WED_GatewayImportDialog
StartTriPos	.\DSF\tri_stripper_101\tri_stripper.h	/^inline size_t tri_stripper::triangle_strip::StartTriPos() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_strip
StartVersionsDownload	.\WEDImportExport\WED_GatewayImport.cpp	/^bool WED_GatewayImportDialog::StartVersionsDownload()$/;"	f	class:WED_GatewayImportDialog
StartupNetworking	.\Network\PCSBSocket.lin.cpp	/^bool PCSBSocket::StartupNetworking(bool inInitDLL)$/;"	f	class:PCSBSocket
StartupNetworking	.\Network\PCSBSocket.win.cpp	/^bool PCSBSocket::StartupNetworking(bool inInitDLL)$/;"	f	class:PCSBSocket
StateChanged	.\WEDCore\WED_Persistent.cpp	/^void 			WED_Persistent::StateChanged(int change_kind)$/;"	f	class:WED_Persistent
StaticMessageFunc	.\ObjEdit\OE_Pane.cpp	/^int		OE_Pane::StaticMessageFunc($/;"	f	class:OE_Pane
StaticMessageFunc	.\RenderFarmUI\RF_Pane.cpp	/^int		RF_Pane::StaticMessageFunc($/;"	f	class:RF_Pane
StaticString	.\lib_json\include\json\value.h	/^      explicit StaticString( const char *czstring )$/;"	f	class:Json::StaticString
StaticString	.\lib_json\include\json\value.h	/^   class JSON_API StaticString$/;"	c	namespace:Json
Status	.\Network\PCSBSocket.h	/^         enum Status {$/;"	g	class:PCSBSocket
Stop	.\GUI\GUI_Timer.cpp	/^void GUI_Timer::Stop(void)$/;"	f	class:GUI_Timer
Stop	.\Utils\PerfUtils.h	/^	inline	void Stop(void)$/;"	f	class:PerfTimer
Storage	.\WEDCore\WED_Buffer.cpp	/^struct WED_Buffer::Storage {$/;"	s	class:WED_Buffer	file:
StrToKey	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static void StrToKey(IniSectionMap& inMap, const char * sec, const  char * key, string& v)$/;"	f	file:
StrandLength	.\XESCore\Hydro.cpp	/^double StrandLength(const LongStrand& s)$/;"	f
StringFromBlock	.\XESCore\BlockFill.cpp	/^int	StringFromBlock(Block_2::Face_const_handle in_face, vector<Polygon2>& out_ps, CoordTranslator2& translator)$/;"	f
StringFromCCB	.\XESCore\BlockFill.cpp	/^void	StringFromCCB(Block_2::Ccb_halfedge_const_circulator ccb, vector<Polygon2>& ps_use, vector<Polygon2>& ps_bad, CoordTranslator2& translator)$/;"	f
StringToElements	.\XPTools\TaxiMaker.cpp	/^void	StringToElements(const string& desc, vector<int>& outElements)$/;"	f
StringToUpper	.\Utils\XUtils.cpp	/^void	StringToUpper(string& s)$/;"	f
StringVectorCB	.\Utils\MemFileUtils.cpp	/^bool	StringVectorCB(const char * fname, bool dir, void * ref)$/;"	f
Strip	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::Strip(primitives_vector * out_pPrimitivesVector)$/;"	f	class:triangle_stripper::tri_stripper
StripFileName	.\Env\EnvParser.c	/^const char *	StripFileName(const char * inFilePath, char inSeparator)$/;"	f
StripID	.\DSF\tri_stripper_101\tri_stripper.h	/^inline size_t tri_stripper::triangle::StripID() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle
StripPath	.\Utils\XUtils.cpp	/^void		StripPath(string& ioPath)$/;"	f
StripPathCP	.\Utils\XUtils.cpp	/^void		StripPathCP(string& ioPath)$/;"	f
StripSoft	.\XESCore\DSFBuilder.cpp	/^bool StripSoft(string& n)$/;"	f
Stripify	.\DSF\tri_stripper_101\tri_stripper.cpp	/^void tri_stripper::Stripify()$/;"	f	class:triangle_stripper::tri_stripper
StyledStreamWriter	.\lib_json\include\json\writer.h	/^   class JSON_API StyledStreamWriter$/;"	c	namespace:Json
StyledStreamWriter	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::StyledStreamWriter( std::string indentation )$/;"	f	class:Json::StyledStreamWriter
StyledWriter	.\lib_json\include\json\writer.h	/^   class JSON_API StyledWriter: public Writer$/;"	c	namespace:Json
StyledWriter	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::StyledWriter()$/;"	f	class:Json::StyledWriter
SubBox	.\XESCore\Hydro.cpp	/^inline void SubBox(const Bbox2& src, float x1, float y1, float x2, float y2, Bbox2& dst)$/;"	f
SubBoxIdx	.\XESCore\Hydro.cpp	/^inline int SubBoxIdx(const Bbox2& lim, const Point2& p, int div)$/;"	f
SubclassFunc	.\GUI\GUI_Window.cpp	/^LRESULT CALLBACK GUI_Window::SubclassFunc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:GUI_Window
SubdivideConstraints	.\XESCore\MeshAlgs.cpp	/^void SubdivideConstraints(CDT& io_mesh, const DEMGeo& master, const DEMGeo& ideal_density)$/;"	f
Submit	.\WEDImportExport\WED_GatewayExport.cpp	/^void WED_GatewayExportDialog::Submit()$/;"	f	class:WED_GatewayExportDialog
SupportedTypes	.\Utils\BitmapUtils.h	/^enum SupportedTypes{$/;"	g
Swap	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::Swap(size_t a, size_t b) {$/;"	f	class:common_structures::heap_array
SwapBuffer	.\UI\XWinGL.lin.cpp	/^void                    XWinGL::SwapBuffer(void)$/;"	f	class:XWinGL
SwapBuffer	.\UI\XWinGL.win.cpp	/^void			XWinGL::SwapBuffer(void)$/;"	f	class:XWinGL
SwapValueTyped	.\Utils\XChunkyFileUtils.cpp	/^inline double	SwapValueTyped(double v	 ) { return (double  ) SWAP64(v); }$/;"	f
SwapValueTyped	.\Utils\XChunkyFileUtils.cpp	/^inline float	SwapValueTyped(float v	 ) { return (float   ) SWAP32(v); }$/;"	f
SwapValueTyped	.\Utils\XChunkyFileUtils.cpp	/^inline int16_t	SwapValueTyped(int16_t v ) { return (int16_t ) SWAP16(v); }$/;"	f
SwapValueTyped	.\Utils\XChunkyFileUtils.cpp	/^inline int32_t	SwapValueTyped(int32_t v ) { return (int32_t ) SWAP32(v); }$/;"	f
SwapValueTyped	.\Utils\XChunkyFileUtils.cpp	/^inline uint16_t	SwapValueTyped(uint16_t v) { return (uint16_t) SWAP16(v); }$/;"	f
SwapValueTyped	.\Utils\XChunkyFileUtils.cpp	/^inline uint32_t	SwapValueTyped(uint32_t v) { return (uint32_t) SWAP32(v); }$/;"	f
SwitchNode	.\XPTools\AddObjects.cpp	/^SwitchNode::SwitchNode(double inChance) : mChance(inChance)$/;"	f	class:SwitchNode
SwitchNode	.\XPTools\AddObjects.cpp	/^class	SwitchNode : public SceneryNode {$/;"	c	file:
Sync	.\WEDXPlugin\WED_XPluginMgr.cpp	/^void WED_XPluginMgr::Sync()$/;"	f	class:WED_XPluginMgr
SyncAttrs	.\Obj\XObjBuilder.cpp	/^void XObjBuilder::SyncAttrs(void)$/;"	f	class:XObjBuilder
SyncCache	.\WEDTCE\WED_TCEVertexTool.cpp	/^void		WED_TCEVertexTool::SyncCache(void) const$/;"	f	class:WED_TCEVertexTool
SyncRecurse	.\WEDTCE\WED_TCEVertexTool.cpp	/^void	WED_TCEVertexTool::SyncRecurse(IGISEntity * who, ISelection * sel) const$/;"	f	class:WED_TCEVertexTool
TAB_BASELINE	.\GUI\GUI_TabControl.cpp	32;"	d	file:
TAB_PADDING	.\GUI\GUI_TabControl.cpp	31;"	d	file:
TAG_COMMAND_PREFS	.\RenderFarmUI\RF_PrefsDialog.cpp	49;"	d	file:
TCE_CanHandleCommand	.\WEDTCE\WED_TCEPane.cpp	/^int		WED_TCEPane::TCE_CanHandleCommand(int command, string& ioName, int& ioCheck)$/;"	f	class:WED_TCEPane
TCE_HandleCommand	.\WEDTCE\WED_TCEPane.cpp	/^int		WED_TCEPane::TCE_HandleCommand(int command)$/;"	f	class:WED_TCEPane
TCE_KeyPress	.\WEDTCE\WED_TCEPane.cpp	/^int		WED_TCEPane::TCE_KeyPress(uint32_t inKey, int inVK, GUI_KeyFlags inFlags)$/;"	f	class:WED_TCEPane
TCL_APPEND_VALUE	.\AC3DPlugins\TclStubs.h	43;"	d
TCL_BREAK	.\AC3DPlugins\TclStubs.h	59;"	d
TCL_CONTINUE	.\AC3DPlugins\TclStubs.h	60;"	d
TCL_ERROR	.\AC3DPlugins\TclStubs.h	57;"	d
TCL_GLOBAL_ONLY	.\AC3DPlugins\TclStubs.h	41;"	d
TCL_INTERP_DESTROYED	.\AC3DPlugins\TclStubs.h	49;"	d
TCL_LEAVE_ERR_MSG	.\AC3DPlugins\TclStubs.h	50;"	d
TCL_LIST_ELEMENT	.\AC3DPlugins\TclStubs.h	44;"	d
TCL_NAMESPACE_ONLY	.\AC3DPlugins\TclStubs.h	42;"	d
TCL_OK	.\AC3DPlugins\TclStubs.h	56;"	d
TCL_PROC	.\AC3DPlugins\TclStubs.cpp	40;"	d	file:
TCL_PROC	.\AC3DPlugins\TclStubs.cpp	49;"	d	file:
TCL_PROC	.\AC3DPlugins\TclStubs.h	93;"	d
TCL_PROC	.\AC3DPlugins\TclStubs.h	97;"	d
TCL_PROCS	.\AC3DPlugins\TclStubs.h	76;"	d
TCL_RETURN	.\AC3DPlugins\TclStubs.h	58;"	d
TCL_TRACE_ARRAY	.\AC3DPlugins\TclStubs.h	51;"	d
TCL_TRACE_DESTROYED	.\AC3DPlugins\TclStubs.h	48;"	d
TCL_TRACE_OLD_STYLE	.\AC3DPlugins\TclStubs.h	52;"	d
TCL_TRACE_READS	.\AC3DPlugins\TclStubs.h	45;"	d
TCL_TRACE_RESULT_DYNAMIC	.\AC3DPlugins\TclStubs.h	53;"	d
TCL_TRACE_RESULT_OBJECT	.\AC3DPlugins\TclStubs.h	54;"	d
TCL_TRACE_UNSETS	.\AC3DPlugins\TclStubs.h	47;"	d
TCL_TRACE_WRITES	.\AC3DPlugins\TclStubs.h	46;"	d
TCL_UTILS_H	.\AC3DPlugins\tcl_utils.h	25;"	d
TCL_changed_f	.\AC3DPlugins\tcl_utils.h	/^typedef	void (* TCL_changed_f)(double value, void * ref, TCL_linked_vard * who);$/;"	t
TCL_changedv_f	.\AC3DPlugins\tcl_utils.h	/^typedef	void (* TCL_changedv_f)(double value, int n, void * ref, TCL_linked_vardv * who);$/;"	t
TCL_changei_f	.\AC3DPlugins\tcl_utils.h	/^typedef	void (* TCL_changei_f)(int value, void * ref, TCL_linked_vari * who);$/;"	t
TCL_changeiv_f	.\AC3DPlugins\tcl_utils.h	/^typedef	void (* TCL_changeiv_f)(int value, int n, void * ref, TCL_linked_variv * who);$/;"	t
TCL_changes_f	.\AC3DPlugins\tcl_utils.h	/^typedef	void (* TCL_changes_f)(const char * value, void * ref, TCL_linked_vars * who);$/;"	t
TCL_changesv_f	.\AC3DPlugins\tcl_utils.h	/^typedef	void (* TCL_changesv_f)(const char * value, int n, void * ref, TCL_linked_varsv * who);$/;"	t
TCL_init_stubs	.\AC3DPlugins\TclStubs.cpp	/^const char * TCL_init_stubs(void)$/;"	f
TCL_linked_vard	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vard::TCL_linked_vard(Tcl_Interp * iinterp, const char * tcl_name, TCL_changed_f change_cb, void * iref, double initial)$/;"	f	class:TCL_linked_vard
TCL_linked_vard	.\AC3DPlugins\tcl_utils.h	/^class	TCL_linked_vard {$/;"	c
TCL_linked_vardv	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vardv::TCL_linked_vardv(Tcl_Interp * interp, const char * tcl_name, int n, TCL_changedv_f change_cb, void * iref, double initial)$/;"	f	class:TCL_linked_vardv
TCL_linked_vardv	.\AC3DPlugins\tcl_utils.h	/^class	TCL_linked_vardv {$/;"	c
TCL_linked_vari	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vari::TCL_linked_vari(Tcl_Interp * iinterp, const char * tcl_name, TCL_changei_f change_cb, void * iref, int initial)$/;"	f	class:TCL_linked_vari
TCL_linked_vari	.\AC3DPlugins\tcl_utils.h	/^class	TCL_linked_vari {$/;"	c
TCL_linked_variv	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_variv::TCL_linked_variv(Tcl_Interp * interp, const char * tcl_name, int n, TCL_changeiv_f change_cb, void * iref, int initial)$/;"	f	class:TCL_linked_variv
TCL_linked_variv	.\AC3DPlugins\tcl_utils.h	/^class	TCL_linked_variv {$/;"	c
TCL_linked_vars	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vars::TCL_linked_vars(Tcl_Interp * iinterp, const char * tcl_name, TCL_changes_f change_cb, void * iref, const char * initial)$/;"	f	class:TCL_linked_vars
TCL_linked_vars	.\AC3DPlugins\tcl_utils.h	/^class	TCL_linked_vars {$/;"	c
TCL_linked_varsv	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_varsv::TCL_linked_varsv(Tcl_Interp * interp, const char * tcl_name, int n, TCL_changesv_f change_cb, void * iref, const char * initial)$/;"	f	class:TCL_linked_varsv
TCL_linked_varsv	.\AC3DPlugins\tcl_utils.h	/^class	TCL_linked_varsv {$/;"	c
TCL_stubs	.\AC3DPlugins\TclStubs.h	/^struct TCL_stubs {$/;"	s
TCoordToY	.\ObjEdit\OE_TexEdWindow.cpp	/^float		OE_TexEdPane::TCoordToY(float inY)$/;"	f	class:OE_TexEdPane
TDS	.\XESCore\MeshDefs.h	/^typedef	CGAL::Triangulation_data_structure_2<Vb, Fb>								TDS;$/;"	t
TERRAIN_FAR_BORDER_LOD	.\XESCore\DSFBuilder.cpp	70;"	d	file:
TERRAIN_FAR_BORDER_LOD	.\XESCore\DSFBuilder.cpp	72;"	d	file:
TERRAIN_FAR_LOD	.\XESCore\DSFBuilder.cpp	67;"	d	file:
TERRAIN_NEAR_BORDER_LOD	.\XESCore\DSFBuilder.cpp	68;"	d	file:
TERRAIN_NEAR_LOD	.\XESCore\DSFBuilder.cpp	66;"	d	file:
TERRASERVER_H	.\Network\TerraServer.h	24;"	d
TEST_AT_START	.\WEDImportExport\WED_GatewayImport.h	31;"	d
TEST_Bbox2	.\Utils\CompGeomDefs2_TEST.cpp	/^static void TEST_Bbox2(void)$/;"	f	file:
TEST_CompGeomDefs2	.\Utils\CompGeomDefs2_TEST.cpp	/^void	TEST_CompGeomDefs2(void)$/;"	f
TEST_Handler	.\Utils\AssertUtils.cpp	/^bool	TEST_Handler(const char * c, const char * f, int l)$/;"	f
TEST_Line2	.\Utils\CompGeomDefs2_TEST.cpp	/^static void TEST_Line2(void)$/;"	f	file:
TEST_MapDefs	.\XESTools\MapDefs_TEST.cpp	/^void TEST_MapDefs(void)$/;"	f
TEST_Point2	.\Utils\CompGeomDefs2_TEST.cpp	/^static void	TEST_Point2(void)$/;"	f	file:
TEST_Polygon2	.\Utils\CompGeomDefs2_TEST.cpp	/^static void TEST_Polygon2(void)$/;"	f	file:
TEST_RULE	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	97;"	d	file:
TEST_Run	.\Utils\AssertUtils.h	80;"	d
TEST_Segment2	.\Utils\CompGeomDefs2_TEST.cpp	/^static void TEST_Segment2(void)$/;"	f	file:
TEST_SetInteractive	.\Utils\AssertUtils.cpp	/^void	TEST_SetInteractive(bool interactive)$/;"	f
TEST_Vector2	.\Utils\CompGeomDefs2_TEST.cpp	/^static void TEST_Vector2(void)$/;"	f	file:
TEXUTILS_H	.\Utils\TexUtils.h	24;"	d
TEX_dds_caps2	.\Utils\BitmapUtils.cpp	/^struct TEX_dds_caps2 {$/;"	s	file:
TEX_dds_desc	.\Utils\BitmapUtils.cpp	/^struct TEX_dds_desc {$/;"	s	file:
TEX_dds_pixelformat	.\Utils\BitmapUtils.cpp	/^struct TEX_dds_pixelformat {$/;"	s	file:
TIFF	.\Utils\GISUtils.h	/^typedef	struct tiff TIFF;$/;"	t	typeref:struct:tiff
TIGERIMPORT_H	.\Tiger\TIGERImport.h	24;"	d
TIGERImport	.\Tiger\(TigerImport Backup.cpp).cpp	/^void	TIGERImport($/;"	f
TIGERImport	.\Tiger\TigerImport.cpp	/^void	TIGERImport($/;"	f
TIGERPROCESS_H	.\Tiger\TIGERProcess.h	24;"	d
TIGERREAD_H	.\Tiger\TIGERRead.h	24;"	d
TIGERTYPES_H	.\Tiger\TIGERTypes.h	24;"	d
TIGER_DEBUG_LEAVE_INFO	.\Tiger\TIGERRead.cpp	36;"	d	file:
TIGER_EliminateZeroLengthShapePoints	.\Tiger\TIGERRead.cpp	/^void	TIGER_EliminateZeroLengthShapePoints(void)$/;"	f
TIGER_LoadRT1	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_LoadRT1(const char * inFileName)$/;"	f
TIGER_LoadRT1	.\Tiger\TIGERRead.cpp	/^void	TIGER_LoadRT1(MFFileSet * inSet, int inFileNumber)$/;"	f
TIGER_LoadRT2	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_LoadRT2(const char * inFileName)$/;"	f
TIGER_LoadRT2	.\Tiger\TIGERRead.cpp	/^void	TIGER_LoadRT2(MFFileSet * inSet, int inFileNumber)$/;"	f
TIGER_LoadRT7	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_LoadRT7(const char * inFileName)$/;"	f
TIGER_LoadRT7	.\Tiger\TIGERRead.cpp	/^void	TIGER_LoadRT7(MFFileSet * inSet, int inFileNumber)$/;"	f
TIGER_LoadRT8	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_LoadRT8(const char * inFileName)$/;"	f
TIGER_LoadRT8	.\Tiger\TIGERRead.cpp	/^void	TIGER_LoadRT8(MFFileSet * inSet, int inFileNumber)$/;"	f
TIGER_LoadRTI	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_LoadRTI(const char * inFileName)$/;"	f
TIGER_LoadRTI	.\Tiger\TIGERRead.cpp	/^void	TIGER_LoadRTI(MFFileSet * inSet, int inFileNumber)$/;"	f
TIGER_LoadRTP	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_LoadRTP(const char * inFileName)$/;"	f
TIGER_LoadRTP	.\Tiger\TIGERRead.cpp	/^void	TIGER_LoadRTP(MFFileSet * inSet, int inFileNumber)$/;"	f
TIGER_PostProcess	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_PostProcess(void)$/;"	f
TIGER_PostProcess	.\Tiger\TIGERRead.cpp	/^void	TIGER_PostProcess(Pmwx& ioMap)$/;"	f
TIGER_RoughCull	.\Tiger\TIGERRead.cpp	/^void	TIGER_RoughCull(double inWest, double inSouth, double inEast, double inNorth)$/;"	f
TIGER_SanityCheckPerimeter	.\Tiger\(TIGERRead backup.cpp).cpp	/^void TIGER_SanityCheckPerimeter(PolygonInfo_t& poly, const char * id)$/;"	f
TIGER_SortPerimeter	.\Tiger\(TIGERRead backup.cpp).cpp	/^void	TIGER_SortPerimeter(PolygonInfo_t&	poly, const char * id)$/;"	f
TIMEOUT_SEC	.\Network\curl_http.cpp	/^const time_t TIMEOUT_SEC = (30);$/;"	v
TIMER	.\XESCore\DSFBuilder.cpp	49;"	d	file:
TIMER	.\XESCore\DSFBuilder.cpp	51;"	d	file:
TIMER	.\XESCore\MeshAlgs.cpp	122;"	d	file:
TIMER	.\XESCore\MeshAlgs.cpp	124;"	d	file:
TIMER	.\XESCore\TensorRoads.cpp	46;"	d	file:
TIMER	.\XESCore\TensorRoads.cpp	48;"	d	file:
TLID	.\Tiger\TIGERTypes.h	/^typedef	unsigned long	TLID;$/;"	t
TLIDSet	.\Tiger\TIGERTypes.h	/^typedef set<TLID>					TLIDSet;$/;"	t
TOKEN	.\XESCore\EnumSystem.cpp	27;"	d	file:
TOKEN	.\XESCore\EnumSystem.cpp	37;"	d	file:
TOKEN	.\XESCore\EnumSystem.h	32;"	d
TOKEN	.\XESCore\EnumSystem.h	42;"	d
TOO_SMALL_TO_CARE	.\XESCore\BlockFill.cpp	89;"	d	file:
TOO_SMALL_TO_GO_IN	.\WEDMap\WED_Map.cpp	51;"	d	file:
TRACE_SUBDIVIDE	.\XESCore\BlockFill.cpp	101;"	d	file:
TRACE_TOPO_INTEGRATE	.\XESCore\MapAlgs.cpp	58;"	d	file:
TRACKBALLSIZE	.\Utils\trackball.c	62;"	d	file:
TRIFAN_H	.\XESCore\TriFan.h	24;"	d
TRIVIAL_COPY	.\WEDCore\WED_Persistent.h	154;"	d
TRI_COCK	.\Obj\ObjConvert.cpp	/^const int	TRI_COCK =	attr_Max+1;$/;"	v
TRI_DARKEN	.\RenderFarmUI\RF_MapView.cpp	82;"	d	file:
TRI_HARD	.\Obj\ObjConvert.cpp	/^const int	TRI_HARD =	attr_Max  ;$/;"	v
TRYFREE	.\Utils\unzip.c	51;"	d	file:
TRYFREE	.\Utils\zip.c	48;"	d	file:
TT_establish_font	.\GUI\GUI_Fonts.cpp	/^inline void TT_establish_font(tt_t c){$/;"	f
TT_font_info	.\GUI\GUI_Fonts.cpp	/^TT_font_info::TT_font_info()$/;"	f	class:TT_font_info
TT_font_info	.\GUI\GUI_Fonts.cpp	/^class	TT_font_info {$/;"	c	file:
TT_reset_font	.\GUI\GUI_Fonts.cpp	/^inline void TT_reset_font(tt_t c){$/;"	f
TXT_MAP_continue	.\Obj\XObjReadWrite.cpp	/^inline xint TXT_MAP_continue(const xbyt* c,const xbyt* c_max)$/;"	f
TXT_MAP_eoln	.\Obj\XObjReadWrite.cpp	/^inline xint  TXT_MAP_eoln(const xbyt* c)$/;"	f
TXT_MAP_finish_line	.\Obj\XObjReadWrite.cpp	/^inline void  TXT_MAP_finish_line(xbyt*& c, const xbyt* c_max)$/;"	f
TXT_MAP_flt_scan	.\Obj\XObjReadWrite.cpp	/^inline xflt TXT_MAP_flt_scan(xbyt*& c,const xbyt* c_max, bool go_next_line)$/;"	f
TXT_MAP_has_word	.\Obj\XObjReadWrite.cpp	/^inline xint TXT_MAP_has_word(xbyt*& c,const xbyt* c_max)$/;"	f
TXT_MAP_int_scan	.\Obj\XObjReadWrite.cpp	/^inline xint TXT_MAP_int_scan(xbyt*& c,const xbyt* c_max, bool go_next_line)$/;"	f
TXT_MAP_space	.\Obj\XObjReadWrite.cpp	/^inline xint  TXT_MAP_space(const xbyt* c)$/;"	f
TXT_MAP_str_match_space	.\Obj\XObjReadWrite.cpp	/^inline xint TXT_MAP_str_match_space(xbyt*& c,const xbyt* c_max,const char* input, bool eol_ok)$/;"	f
TXT_MAP_str_scan_eoln	.\Obj\XObjReadWrite.cpp	/^inline void TXT_MAP_str_scan_eoln(xbyt*& c,const xbyt* c_max,string* input)$/;"	f
TXT_MAP_str_scan_space	.\Obj\XObjReadWrite.cpp	/^inline void TXT_MAP_str_scan_space(xbyt*& c,const xbyt* c_max,string* input)$/;"	f
TabAdvance	.\WEDImportExport\WED_AptTable.cpp	/^int		WED_AptTable::TabAdvance($/;"	f	class:WED_AptTable
TabAdvance	.\WEDImportExport\WED_ICAOTable.cpp	/^int		WED_ICAOTable::TabAdvance($/;"	f	class:WED_ICAOTable
TabAdvance	.\WEDImportExport\WED_VerTable.cpp	/^int		WED_VerTable::TabAdvance($/;"	f	class:WED_VerTable
TabAdvance	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^int		WED_LibraryListAdapter::TabAdvance($/;"	f	class:WED_LibraryListAdapter
TabAdvance	.\WEDMap\WED_ToolInfoAdapter.cpp	/^int		WED_ToolInfoAdapter::TabAdvance($/;"	f	class:WED_ToolInfoAdapter
TabAdvance	.\WEDProperties\WED_PropertyTable.cpp	/^int		WED_PropertyTable::TabAdvance($/;"	f	class:WED_PropertyTable
TabAdvance	.\WEDWindows\WED_FilterBar.h	/^	virtual	int		TabAdvance($/;"	f	class:WED_FilterBar
TabAdvance	.\WEDWindows\WED_PackageListAdapter.cpp	/^int		WED_PackageListAdapter::TabAdvance($/;"	f	class:WED_PackageListAdapter
TagOriginalBridges	.\XESCore\Hydro.cpp	/^void TagOriginalBridges(Pmwx& io_map)$/;"	f
TagPolygon	.\XESCore\MapBuffer.cpp	/^void	TagPolygon($/;"	f
TaggedPolygon_t	.\XESCore\MapBuffer.h	/^typedef vector<Curve_2>				TaggedPolygon_t;$/;"	t
TagunzFile__	.\Utils\unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	s
TagzipFile__	.\Utils\zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	s
TakeFocus	.\GUI\GUI_Commander.cpp	/^int				GUI_Commander::TakeFocus(void)$/;"	f	class:GUI_Commander
TakeFromRefImage	.\XPTools\GetImage.cpp	/^void	TakeFromRefImage($/;"	f
TclStubs_H	.\AC3DPlugins\TclStubs.h	25;"	d
Tcl_DecrRefCount	.\AC3DPlugins\TclStubs.h	65;"	d
Tcl_ExitProc	.\AC3DPlugins\TclStubs.h	/^typedef void (Tcl_ExitProc) (ClientData clientData);$/;"	t
Tcl_IncrRefCount	.\AC3DPlugins\TclStubs.h	63;"	d
Tcl_IsShared	.\AC3DPlugins\TclStubs.h	67;"	d
Tcl_Obj	.\AC3DPlugins\TclStubs.h	/^struct Tcl_Obj {$/;"	s
Tcl_VarTraceProc	.\AC3DPlugins\TclStubs.h	/^typedef char *(Tcl_VarTraceProc) (ClientData clientData,$/;"	t
Tensor2Eigen	.\Utils\TensorUtils.h	/^inline Vector2		Tensor2Eigen(const Vector2& t)$/;"	f
TensorDDA	.\RenderFarmUI\RF_DEMGraphics.cpp	/^void TensorDDA($/;"	f
TensorForFace	.\XESCore\TensorRoads.cpp	/^void	TensorForFace($/;"	f
TensorRoads_H	.\XESCore\TensorRoads.h	25;"	d
TensorSeed	.\XESCore\TensorRoads.cpp	/^struct	TensorSeed {$/;"	s	file:
TensorUtils_H	.\Utils\TensorUtils.h	25;"	d
Tensor_Func	.\XESCore\TensorRoads.cpp	/^static Vector2	Tensor_Func(const Point2& p, void * ref)$/;"	f	file:
Tensor_info	.\XESCore\TensorRoads.cpp	/^struct Tensor_info {$/;"	s	file:
TerminateEdit	.\GUI\GUI_TextTable.cpp	/^int			GUI_TextTable::TerminateEdit(bool inSave, bool in_all, bool in_close)$/;"	f	class:GUI_TextTable
TerrainDefFromCustex	.\XPTools\Env2DSF.cpp	/^string	TerrainDefFromCustex(const string& inTex)$/;"	f
TerrainDefFromLandUse	.\XPTools\Env2DSF.cpp	/^string	TerrainDefFromLandUse(int inLanduse)$/;"	f
TerrainFunc_t	.\OneOffs\GenTerrain.c	/^typedef	void (* TerrainFunc_t)(const char * name, int vari);$/;"	t	file:
TerrainItem_t	.\OneOffs\GenTerrain.c	/^} TerrainItem_t;$/;"	t	typeref:struct:__anon62	file:
TerrainMatch	.\XESCore\MapDefs.h	/^	bool		TerrainMatch(const GIS_face_data& rhs) const { return mTerrainType == rhs.mTerrainType; }$/;"	f	class:GIS_face_data
TessBegin	.\WEDMap\WED_DrawUtils.cpp	/^static void CALLBACK TessBegin(GLenum mode)		{ glBegin(mode);				}$/;"	f	file:
TessEnd	.\WEDMap\WED_DrawUtils.cpp	/^static void CALLBACK TessEnd(void)				{ glEnd();						}$/;"	f	file:
TessVertex	.\WEDMap\WED_DrawUtils.cpp	/^static void CALLBACK TessVertex(const Point2 * p){																  glVertex2d(p->x(),p->y());	}$/;"	f	file:
TessVertexUV	.\WEDMap\WED_DrawUtils.cpp	/^static void CALLBACK TessVertexUV(const Point2 * p){ const Point2 * uv = p; ++uv; glTexCoord2f(uv->x(), uv->y()); glVertex2d(p->x(),p->y());	}$/;"	f	file:
TestCase	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestCase::TestCase()$/;"	f	class:JsonTest::TestCase
TestCase	.\lib_json\src\test_lib_json\jsontest.h	/^   class TestCase$/;"	c	namespace:JsonTest
TestCaseFactory	.\lib_json\src\test_lib_json\jsontest.h	/^   typedef TestCase *(*TestCaseFactory)();$/;"	t	namespace:JsonTest
TestResult	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::TestResult()$/;"	f	class:JsonTest::TestResult
TestResult	.\lib_json\src\test_lib_json\jsontest.h	/^   class TestResult$/;"	c	namespace:JsonTest
TexCmdHandleNotification	.\ObjEdit\OE_TexCmds.cpp	/^void	TexCmdHandleNotification(int inCatagory, int inMsg, void * inParam)$/;"	f
TexCmdHandler	.\ObjEdit\OE_TexCmds.cpp	/^void	TexCmdHandler(void * inMenuRef, void * inItemRef)$/;"	f
TexCmdUpdateItems	.\ObjEdit\OE_TexCmds.cpp	/^void	TexCmdUpdateItems(void)$/;"	f
TexCoordPointer_f	.\Obj\ObjDraw.h	/^	void (* TexCoordPointer_f)(int size, unsigned long type, long stride, const void * pointer, void * ref);$/;"	m	struct:ObjDrawFuncs10_t
TexCoord_f	.\Obj\ObjDraw.h	/^	void (* TexCoord_f)(const float * st, void * ref);$/;"	m	struct:ObjDrawFuncs10_t
TexInfo	.\GUI\GUI_Resources.cpp	/^struct	TexInfo {$/;"	s	file:
TexInfo	.\WEDCore\WED_TexMgr.h	/^	struct	TexInfo {$/;"	s	class:WED_TexMgr
TexInfo_t	.\ObjEdit\OE_TexMgr.cpp	/^struct	TexInfo_t {$/;"	s	file:
TexMap	.\WEDCore\WED_TexMgr.h	/^	typedef map<string,TexInfo *>	TexMap;$/;"	t	class:WED_TexMgr
TexProjTable	.\XESCore\DEMTables.h	/^typedef map<int,tex_proj_info>		TexProjTable;$/;"	t
TexRef	.\Interfaces\ITexMgr.h	/^typedef	void *	TexRef;$/;"	t
TexResourceTable	.\GUI\GUI_Resources.cpp	/^typedef hash_map<string, TexInfo>	TexResourceTable;$/;"	t	file:
Text2DSF	.\DSFTools\DSF2Text.cpp	/^bool Text2DSF(const char * inFileName, const char * inDSF)$/;"	f
Text2DSFWithWriter	.\DSFTools\DSF2Text.cpp	/^bool Text2DSFWithWriter(const char * inFileName, DSFCallbacks_t * cbs, void * writer)$/;"	f
Text2DSFWithWriterAny	.\DSFTools\DSF2Text.cpp	/^static bool Text2DSFWithWriterAny(const char * inFileName, const char * inDSF, DSFCallbacks_t * in_cbs, void * in_writer)$/;"	f	file:
TextScanner_Close	.\Utils\MemFileUtils.cpp	/^void			TextScanner_Close		(MFTextScanner * inScanner)$/;"	f
TextScanner_ExtractChar	.\Utils\MemFileUtils.cpp	/^char			TextScanner_ExtractChar(MFTextScanner * inScanner, int inBegin)$/;"	f
TextScanner_ExtractLong	.\Utils\MemFileUtils.cpp	/^long			TextScanner_ExtractLong(MFTextScanner * inScanner, int inBegin, int inEnd)$/;"	f
TextScanner_ExtractString	.\Utils\MemFileUtils.cpp	/^void			TextScanner_ExtractString(MFTextScanner * inScanner, int inBegin, int inEnd, string& outString, bool inTrim)$/;"	f
TextScanner_ExtractUnsignedLong	.\Utils\MemFileUtils.cpp	/^unsigned long	TextScanner_ExtractUnsignedLong(MFTextScanner * inScanner, int inBegin, int inEnd)$/;"	f
TextScanner_FormatScan	.\Utils\MemFileUtils.cpp	/^int				TextScanner_FormatScan(MFTextScanner * inScanner, const char * fmt, ...)$/;"	f
TextScanner_GetBegin	.\Utils\MemFileUtils.cpp	/^const char *	TextScanner_GetBegin	(MFTextScanner * inScanner)$/;"	f
TextScanner_GetEnd	.\Utils\MemFileUtils.cpp	/^const char *	TextScanner_GetEnd		(MFTextScanner * inScanner)$/;"	f
TextScanner_IsDone	.\Utils\MemFileUtils.cpp	/^bool			TextScanner_IsDone		(MFTextScanner * inScanner)$/;"	f
TextScanner_Next	.\Utils\MemFileUtils.cpp	/^void			TextScanner_Next		(MFTextScanner * s)$/;"	f
TextScanner_Open	.\Utils\MemFileUtils.cpp	/^MFTextScanner *	TextScanner_Open		(MFMemFile * inFile)$/;"	f
TextScanner_OpenMem	.\Utils\MemFileUtils.cpp	/^MFTextScanner *	TextScanner_OpenMem		(const char * inBegin, const char * inEnd)$/;"	f
TextScanner_TokenizeFunc_f	.\Utils\MemFileUtils.h	/^typedef	bool (* TextScanner_TokenizeFunc_f)(const char * inBegin, const char * inEnd, void * inRef);$/;"	t
TextScanner_TokenizeLine	.\Utils\MemFileUtils.cpp	/^void	TextScanner_TokenizeLine(MFTextScanner * inScanner, const char * inDelim, const char * inTerm, int inMax, TextScanner_TokenizeFunc_f inFunc, void * inRef)$/;"	f
TextureMap_t	.\UI\FontMgr.h	/^	typedef multimap<string, FontInfo_t*> TextureMap_t;$/;"	t	class:FontMgr
TextureTable	.\ObjEdit\OE_Globals.h	/^typedef vector<OE_Texture_t>		TextureTable;		\/\/ Master Textures$/;"	t
ThinLine	.\XESCore\TensorRoads.cpp	/^int ThinLine(list<Point2>& pts, double max_dist_move, double max_dist_seg)$/;"	f
TigerAreaInfo_t	.\Tiger\TIGERProcess.h	/^struct	TigerAreaInfo_t {$/;"	s
TigerMap	.\Tiger\TIGERProcess.h	/^typedef	map<long, FileList>		TigerMap;$/;"	t
Timer	.\GUI\GUI_Window.cpp	/^void		GUI_Window::Timer(void)$/;"	f	class:GUI_Window
Timer	.\UI\XGrinderApp.cpp	/^	virtual	void			Timer(void) { }$/;"	f	class:XGrinderWin
Timer	.\UI\XPWidgetWin.cpp	/^void			XPWidgetWin::Timer(void)$/;"	f	class:XPWidgetWin
Timer	.\XPTools\ViewObj.cpp	/^	virtual	void			Timer(void) { }$/;"	f	class:XObjWin
TimerCB	.\GUI\GUI_Timer.cpp	/^pascal void GUI_Timer::TimerCB(CFRunLoopTimerRef inTimer, void *inUserData)$/;"	f	class:GUI_Timer
TimerCB	.\GUI\GUI_Timer.cpp	/^void CALLBACK	GUI_Timer::TimerCB(HWND hwnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)$/;"	f	class:GUI_Timer
TimerCB	.\GUI\GUI_Timer.cpp	/^void GUI_Timer::TimerCB(void)$/;"	f	class:GUI_Timer
TimerFired	.\GUI\GUI_Destroyable.cpp	/^void GUI_DestroyableTask::TimerFired(void)$/;"	f	class:GUI_DestroyableTask
TimerFired	.\GUI\GUI_ScrollBar.cpp	/^void		GUI_ScrollBar::TimerFired(void)$/;"	f	class:GUI_ScrollBar
TimerFired	.\GUI\GUI_TextField.cpp	/^void		GUI_TextField::TimerFired(void)$/;"	f	class:GUI_TextField
TimerFired	.\RenderFarmUI\RF_Main.cpp	/^	virtual void TimerFired()$/;"	f	class:fifo_timer
TimerFired	.\RenderFarmUI\RF_MapView.cpp	/^void	RF_MapView::TimerFired(void)$/;"	f	class:RF_MapView
TimerFired	.\WEDImportExport\WED_GatewayExport.cpp	/^void WED_GatewayExportDialog::TimerFired()$/;"	f	class:WED_GatewayExportDialog
TimerFired	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_GatewayImportDialog::TimerFired()$/;"	f	class:WED_GatewayImportDialog
TimerFired	.\WEDMap\WED_TerraserverLayer.cpp	/^void	WED_TerraserverLayer::TimerFired(void)$/;"	f	class:WED_TerraserverLayer
TimerFired	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^void  	WED_NWLinkAdapter::TimerFired()$/;"	f	class:WED_NWLinkAdapter
TimerFired	.\WEDNetwork\WED_Server.cpp	/^void WED_Server::TimerFired()$/;"	f	class:WED_Server
TimerFired	.\WEDWindows\WED_AboutBox.cpp	/^void		WED_AboutBox::TimerFired(void)$/;"	f	class:WED_AboutBox
TimerMap	.\GUI\GUI_Timer.cpp	/^typedef map<UINT_PTR,GUI_Timer *>	TimerMap;$/;"	t	file:
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropBoolText
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropDoubleText
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropFileText
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropIntEnum
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropIntEnumBitfield
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropIntEnumSet
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropIntEnumSetFilter
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropIntEnumSetUnion
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropIntText
ToDB	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_PropStringText
ToDB	.\WEDEntities\WED_AirportChain.cpp	/^void			WED_AirportChain::ToDB(sqlite3 * db)$/;"	f	class:WED_AirportChain
ToDB	.\WEDEntities\WED_KeyObjects.cpp	/^void			WED_KeyObjects::ToDB(sqlite3 * db)$/;"	f	class:WED_KeyObjects
ToDB	.\WEDEntities\WED_Select.cpp	/^void			WED_Select::ToDB(sqlite3 * db)$/;"	f	class:WED_Select
ToDB	.\WEDEntities\WED_Thing.cpp	/^void			WED_Thing::ToDB(sqlite3 * db)$/;"	f	class:WED_Thing
ToDB	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::ToDB(sqlite3 * db, const char * id_col, const char * id_val)$/;"	f	class:WED_TypeField
ToGlobals	.\ObjEdit\OE_DataModel.cpp	/^void	UndoState_t::ToGlobals(void)$/;"	f	class:UndoState_t
ToPrefs	.\WEDMap\WED_MapPane.cpp	/^void			WED_MapPane::ToPrefs(IDocPrefs * prefs)$/;"	f	class:WED_MapPane
ToPrefs	.\WEDProperties\WED_PropertyPane.cpp	/^void	WED_PropertyPane::ToPrefs(IDocPrefs * prefs,int id)$/;"	f	class:WED_PropertyPane
ToPrefs	.\WEDTCE\WED_TCEPane.cpp	/^void			WED_TCEPane::ToPrefs(IDocPrefs * prefs)$/;"	f	class:WED_TCEPane
ToVec	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static	bool ToVec(const char * inBegin, const char * inEnd, void * inRef)$/;"	f	file:
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropBoolText::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropBoolText
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropDoubleText::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropDoubleText
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropFileText::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropFileText
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnum::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropIntEnum
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumBitfield::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropIntEnumBitfield
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSet::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropIntEnumSet
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetFilter::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropIntEnumSetFilter
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntEnumSetUnion::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropIntEnumSetUnion
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropIntText::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropIntText
ToXML	.\WEDCore\WED_PropertyHelper.cpp	/^void		WED_PropStringText::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_PropStringText
ToXML	.\WEDEntities\WED_Thing.cpp	/^void			WED_Thing::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_Thing
ToXML	.\WEDEntities\WED_Thing.cpp	/^void		WED_TypeField::ToXML(WED_XMLElement * parent)$/;"	f	class:WED_TypeField
Toggle	.\WEDEntities\WED_Select.cpp	/^void		WED_Select::Toggle(ISelectable * iwho)$/;"	f	class:WED_Select
ToggleDisclose	.\WEDImportExport\WED_AptTable.h	/^	virtual	void	ToggleDisclose($/;"	f	class:WED_AptTable
ToggleDisclose	.\WEDImportExport\WED_ICAOTable.h	/^	virtual	void	ToggleDisclose($/;"	f	class:WED_ICAOTable
ToggleDisclose	.\WEDImportExport\WED_VerTable.h	/^	virtual	void	ToggleDisclose($/;"	f	class:WED_VerTable
ToggleDisclose	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^void	WED_LibraryListAdapter::ToggleDisclose($/;"	f	class:WED_LibraryListAdapter
ToggleDisclose	.\WEDMap\WED_ToolInfoAdapter.cpp	/^void	WED_ToolInfoAdapter::ToggleDisclose($/;"	f	class:WED_ToolInfoAdapter
ToggleDisclose	.\WEDProperties\WED_PropertyTable.cpp	/^void	WED_PropertyTable::ToggleDisclose($/;"	f	class:WED_PropertyTable
ToggleDisclose	.\WEDWindows\WED_FilterBar.h	/^	virtual	void	ToggleDisclose($/;"	f	class:WED_FilterBar
ToggleDisclose	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::ToggleDisclose($/;"	f	class:WED_PackageListAdapter
ToggleEdgeInSet	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void ToggleEdgeInSet(Pmwx::Halfedge_handle f, set<Pmwx::Halfedge_handle> * s)$/;"	f	file:
ToggleFaceInSet	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void ToggleFaceInSet(Pmwx::Face_handle f, set<Pmwx::Face_handle> * s)$/;"	f	file:
ToggleOpen	.\WEDProperties\WED_PropertyTable.cpp	/^void WED_PropertyTable::ToggleOpen(int id)$/;"	f	class:WED_PropertyTable
ToggleVertexInSet	.\RenderFarmUI\RF_SelectionTool.cpp	/^static void ToggleVertexInSet(Pmwx::Vertex_handle f, set<Pmwx::Vertex_handle> * s)$/;"	f	file:
ToggleVisible	.\WEDMap\WED_MapLayer.cpp	/^void		WED_MapLayer::ToggleVisible(void)$/;"	f	class:WED_MapLayer
ToggleVisible	.\WEDMap\WED_TerraserverLayer.cpp	/^void		WED_TerraserverLayer::ToggleVisible(void) { WED_MapLayer::ToggleVisible(); if(IsVisible()) Start(0.1); else Stop(); }$/;"	f	class:WED_TerraserverLayer
Token	.\lib_json\include\json\reader.h	/^      class Token$/;"	c	class:Json::Reader
TokenConversionMap	.\XESCore\EnumSystem.h	/^typedef	vector<int>				TokenConversionMap;$/;"	t
TokenMap	.\XESCore\EnumSystem.h	/^typedef	vector<string>			TokenMap;$/;"	t
TokenReverseMap	.\XESCore\EnumSystem.h	/^typedef hash_map<string, int>	TokenReverseMap;$/;"	t
TokenType	.\lib_json\include\json\reader.h	/^      enum TokenType$/;"	g	class:Json::Reader
TokenizeColor	.\XESCore\ConfigSystem.cpp	/^bool				TokenizeColor(const string& s, RGBColor_t& c)$/;"	f
TokenizeEnum	.\XESCore\ConfigSystem.cpp	/^bool				TokenizeEnum(const string& token, int& slot, const char * errMsg)$/;"	f
TokenizeEnumSet	.\XESCore\ConfigSystem.cpp	/^bool				TokenizeEnumSet(const string& tokens, set<int>& slots)$/;"	f
TokenizeFloat	.\XESCore\ConfigSystem.cpp	/^float				TokenizeFloat(const string& s)$/;"	f
TokenizeFloatWithEnum	.\XESCore\ConfigSystem.cpp	/^float				TokenizeFloatWithEnum(const string& s)$/;"	f
TokenizeFunc	.\XESCore\ConfigSystem.cpp	/^bool TokenizeFunc(const char * s, const char * e, void * ref)$/;"	f
TokenizeInt	.\XESCore\ConfigSystem.cpp	/^int					TokenizeInt(const string& s)$/;"	f
TokenizeLine	.\XESCore\ConfigSystem.cpp	/^int				TokenizeLine(const vector<string>& tokens, const char * fmt, ...)$/;"	f
TokenizeString	.\VPF\VPFTable.cpp	/^void	TokenizeString(const string& inString, vector<string>& outTokens, char inSep)$/;"	f
TokenizeToVector	.\Utils\MemFileUtils.cpp	/^static 	bool TokenizeToVector(const char * inBegin, const char * inEnd, void * inRef)$/;"	f	file:
TopoMode	.\WEDEntities\WED_FacadePlacement.h	/^	enum TopoMode {$/;"	g	class:WED_FacadePlacement
Topology	.\SDTS\SDTSReadTVP.cpp	/^struct Topology {$/;"	s	file:
TrackClick	.\ObjEdit\OE_CubeDeformer.cpp	/^bool	OE_CubeDeformer::TrackClick($/;"	f	class:OE_CubeDeformer
TrackClick	.\ObjEdit\OE_ProjectionMgr.cpp	/^bool		OE_ProjectionMgr::TrackClick($/;"	f	class:OE_ProjectionMgr
TrackPopupCommands	.\UI\XWin.lin.cpp	/^int XWin::TrackPopupCommands(xmenu in_menu, int mouse_x, int mouse_y, int button, int current)$/;"	f	class:XWin
TrackPopupCommands	.\UI\XWin.win.cpp	/^int				XWin::TrackPopupCommands(xmenu in_menu, int mouse_x, int mouse_y, int button, int current)$/;"	f	class:XWin
Traits	.\Utils\QuadTree.h	/^	typedef			 __T					Traits;$/;"	t	class:QuadTree
Traits	.\Utils\XCull.h	/^	typedef __Traits					Traits;$/;"	t	class:XCull
TraitsBase	.\XESCore\MapDefs.h	/^typedef CGAL::Arr_segment_traits_2<FastKernel>										TraitsBase;$/;"	t
Traits_2	.\XESCore\MapDefs.h	/^	  typedef base::Traits_2                                        Traits_2;$/;"	t	class:Polygon_set_2
Traits_2	.\XESCore\MapDefs.h	/^typedef CGAL::Gps_segment_traits_2<FastKernel, Container_, Arr_seg_traits_>			Traits_2;$/;"	t
Transform	.\Utils\md5.c	/^static void Transform (UINT4 *buf, UINT4 *in)$/;"	f	file:
TransformTiffCorner	.\Utils\GISUtils.cpp	/^static	bool	TransformTiffCorner(GTIF * gtif, GTIFDefn * defn, double x, double y, double& outLon, double& outLat)$/;"	f	file:
TransformTiffCorner	.\XPTools\GetImage.cpp	/^static	bool	TransformTiffCorner(struct GTIF * gtif, GTIFDefn * defn, double x, double y, double& outLon, double& outLat)$/;"	f	file:
Translate	.\Utils\HLCamera.cpp	/^void		xcam_class::Translate(GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:xcam_class
TranslateBy2d	.\ObjEdit\OE_Zoomer3d.cpp	/^void		OE_Zoomer3d::TranslateBy2d($/;"	f	class:OE_Zoomer3d
TranslateDEM	.\XESCore\DEMIO.cpp	/^bool	TranslateDEM(DEMGeo& ioDEM, const char * inFileName)$/;"	f
TranslateDEMForward	.\XESCore\DEMIO.cpp	/^bool	TranslateDEMForward(DEMGeo& ioDem, const vector<int>& inForwardMap)$/;"	f
TranslateDEMReverse	.\XESCore\DEMIO.cpp	/^bool	TranslateDEMReverse(DEMGeo& ioDem, const hash_map<int, int>& inReverseMap)$/;"	f
TrapFocus	.\GUI\GUI_Pane.cpp	/^void		GUI_Pane::TrapFocus(void)$/;"	f	class:GUI_Pane
TrapNotify	.\GUI\GUI_Pane.h	/^	virtual	int			TrapNotify(int x, int y, int button) { return 0; }$/;"	f	class:GUI_Pane
TrapNotify	.\GUI\GUI_Table.cpp	/^int GUI_Table::TrapNotify(int x, int y, int button)$/;"	f	class:GUI_Table
TraverseEntity	.\WEDMap\WED_HandleToolBase.h	/^	virtual	EntityHandling_t	TraverseEntity(IGISEntity * ent, int pt_sel)  { return ent_Skip; }$/;"	f	class:WED_HandleToolBase
TraverseEntity	.\WEDMap\WED_MarqueeTool.h	/^	virtual	EntityHandling_t	TraverseEntity(IGISEntity * ent, int pt_sel) { return ent_AtomicOrContainer; }$/;"	f	class:WED_MarqueeTool
TraverseEntity	.\WEDMap\WED_VertexTool.cpp	/^WED_HandleToolBase::EntityHandling_t	WED_VertexTool::TraverseEntity(IGISEntity * ent, int pt_sel)$/;"	f	class:WED_VertexTool
TraverseEntity	.\WEDTCE\WED_TCEMarqueeTool.h	/^	virtual	EntityHandling_t	TraverseEntity(IGISEntity * ent, int pt_sel) { return ent_AtomicOrContainer; }$/;"	f	class:WED_TCEMarqueeTool
TriFanBuilder	.\XESCore\TriFan.cpp	/^TriFanBuilder::TriFanBuilder(CDT * inMesh) : mesh(inMesh)$/;"	f	class:TriFanBuilder
TriFanBuilder	.\XESCore\TriFan.h	/^class	TriFanBuilder {$/;"	c
TriFanQueue	.\XESCore\TriFan.h	/^typedef multimap<int, TriFan_t *>				TriFanQueue;		\/\/ Tri fans sorted by number of tris, best are last$/;"	t
TriFanTable	.\XESCore\TriFan.h	/^typedef multimap<CDT::Face_handle, TriFan_t *>	TriFanTable;		\/\/ Index from a face to each tri fan using it$/;"	t
TriFan_t	.\XESCore\TriFan.h	/^struct	TriFan_t {$/;"	s
TriPos	.\DSF\tri_stripper_101\tri_stripper.h	/^inline size_t tri_stripper::triangle_degree::TriPos() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_degree
TriPos	.\DSF\tri_stripper_101\tri_stripper.h	/^inline size_t tri_stripper::triangle_edge::TriPos() const {$/;"	f	class:triangle_stripper::tri_stripper::triangle_edge
TriPrimitive	.\DSF\DSFLibWrite.cpp	/^	struct	TriPrimitive {$/;"	s	class:DSFFileWriterImp	file:
TriPrimitive	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	struct	TriPrimitive {$/;"	s	class:DSFFileWriterImp	file:
TriPrimitiveVector	.\DSF\DSFLibWrite.cpp	/^	typedef vector<TriPrimitive>	TriPrimitiveVector;$/;"	t	class:DSFFileWriterImp	file:
TriPrimitiveVector	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	typedef vector<TriPrimitive>	TriPrimitiveVector;$/;"	t	class:DSFFileWriterImp	file:
TriStrip_t	.\XESCore\TriFan.h	/^struct TriStrip_t {$/;"	s
Triangle2	.\Utils\CompGeomDefs2.h	/^	Triangle2() { }$/;"	f	struct:Triangle2
Triangle2	.\Utils\CompGeomDefs2.h	/^	Triangle2(const Point2& ip1, const Point2& ip2, const Point2& ip3) : p1(ip1), p2(ip2), p3(ip3) {}$/;"	f	struct:Triangle2
Triangle2	.\Utils\CompGeomDefs2.h	/^struct	Triangle2 {$/;"	s
Triangle_2	.\XESCore\CGALDefs.h	/^typedef FastKernel::Triangle_2							Triangle_2;$/;"	t
Triangle_2	.\XESCore\CGALTypes.h	/^typedef Kernel::Triangle_2									Triangle_2;$/;"	t
Triangle_2	.\XESCore\MapHelpers.h	/^	typedef typename K::Triangle_2	Triangle_2;$/;"	t	struct:visit_pt_in_tri
TriangulateMesh	.\XESCore\MeshAlgs.cpp	/^void	TriangulateMesh(Pmwx& inMap, CDT& outMesh, DEMGeoMap& inDEMs, const char * mesh_folder, ProgressFunc prog)$/;"	f
Triangulation_conformer_any_2	.\XESCore\MeshConformer.h	/^  Triangulation_conformer_any_2(Tr& tr_)$/;"	f	class:CGAL::Triangulation_conformer_any_2
Triangulation_conformer_any_2	.\XESCore\MeshConformer.h	/^class Triangulation_conformer_any_2$/;"	c	namespace:CGAL
Trim	.\DSF\DSFPointPool.cpp	/^void				DSF32BitPointPool::Trim(void)$/;"	f	class:DSF32BitPointPool
Trim	.\DSF\DSFPointPool.cpp	/^void			DSFContiguousPointPool::Trim(void)$/;"	f	class:DSFContiguousPointPool
Trim	.\DSF\DSFPointPool.cpp	/^void			DSFSharedPointPool::Trim(void)$/;"	f	class:DSFSharedPointPool
TryClose	.\WEDCore\WED_Document.cpp	/^bool	WED_Document::TryClose(void)$/;"	f	class:WED_Document
TryClose	.\WEDCore\WED_Package.cpp	/^bool WED_Package::TryClose(void)$/;"	f	class:WED_Package
TryCloseAll	.\WEDCore\WED_Document.cpp	/^bool	WED_Document::TryCloseAll(void)$/;"	f	class:WED_Document
TryCloseAll	.\WEDCore\WED_Package.cpp	/^bool	WED_Package::TryCloseAll(void)$/;"	f	class:WED_Package
TryCoords	.\Network\Terraserver.cpp	/^void AsyncImage::TryCoords(void)$/;"	f	class:AsyncImage
TryImage	.\Network\Terraserver.cpp	/^void AsyncImage::TryImage()$/;"	f	class:AsyncImage
Type	.\lib_json\src\lib_json\json_batchallocator.h	/^   typedef AllocatedType Type;$/;"	t	class:Json::BatchAllocator
UINT4	.\Utils\md5.h	/^typedef uint32_t  UINT4;$/;"	t
UIToLogX	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double		RF_BezierTestTool::UIToLogX(double v) const$/;"	f	class:RF_BezierTestTool
UIToLogX	.\RenderFarmUI\RF_CropTool.cpp	/^double		RF_CropTool::UIToLogX(double v) const$/;"	f	class:RF_CropTool
UIToLogX	.\RenderFarmUI\RF_ImageTool.cpp	/^double		RF_ImageTool::UIToLogX(double v) const$/;"	f	class:RF_ImageTool
UIToLogY	.\RenderFarmUI\RF_BezierTestTool.cpp	/^double		RF_BezierTestTool::UIToLogY(double v) const$/;"	f	class:RF_BezierTestTool
UIToLogY	.\RenderFarmUI\RF_CropTool.cpp	/^double		RF_CropTool::UIToLogY(double v) const$/;"	f	class:RF_CropTool
UIToLogY	.\RenderFarmUI\RF_ImageTool.cpp	/^double		RF_ImageTool::UIToLogY(double v) const$/;"	f	class:RF_ImageTool
UIUTILS_H	.\Utils\UIUtils.h	24;"	d
UI_Measurement_t	.\WEDMap\WED_UIMeasurements.cpp	/^typedef map<string,int>	UI_Measurement_t;$/;"	t	file:
UI_TEX_FLAGS	.\GUI\GUI_DrawUtils.cpp	40;"	d	file:
UInt	.\lib_json\include\json\config.h	/^   typedef unsigned int UInt;$/;"	t	namespace:Json
UInt	.\lib_json\include\json\value.h	/^      typedef Json::UInt UInt;$/;"	t	class:Json::Value
UInt16	.\XESCore\SimpleIO.cpp	/^typedef	unsigned short UInt16;$/;"	t	file:
UInt32	.\XESCore\SimpleIO.cpp	/^typedef unsigned long UInt32;$/;"	t	file:
UInt64	.\XESCore\SimpleIO.cpp	/^typedef unsigned long long UInt64;$/;"	t	file:
UInt64	.\lib_json\include\json\config.h	/^   typedef unsigned __int64 UInt64;$/;"	t	namespace:Json
UInt64	.\lib_json\include\json\config.h	/^   typedef unsigned long long int UInt64;$/;"	t	namespace:Json
UInt64	.\lib_json\include\json\value.h	/^      typedef Json::UInt64 UInt64;$/;"	t	class:Json::Value
UIntToStringBuffer	.\lib_json\src\lib_json\json_tool.h	/^typedef char UIntToStringBuffer[uintToStringBufferSize];$/;"	t	namespace:Json
UNDEF	.\XESCore\BlockFill.cpp	/^const double UNDEF = -8192.0;$/;"	v
UNDO_DISCARD	.\WEDCore\WED_UndoLayer.h	33;"	d
UNROLL	.\Utils\XCull.h	204;"	d
UNZ_BADZIPFILE	.\Utils\unzip.h	67;"	d
UNZ_BUFSIZE	.\Utils\unzip.c	40;"	d	file:
UNZ_CRCERROR	.\Utils\unzip.h	69;"	d
UNZ_END_OF_LIST_OF_FILE	.\Utils\unzip.h	63;"	d
UNZ_EOF	.\Utils\unzip.h	65;"	d
UNZ_ERRNO	.\Utils\unzip.h	64;"	d
UNZ_INTERNALERROR	.\Utils\unzip.h	68;"	d
UNZ_MAXFILENAMEINZIP	.\Utils\unzip.c	44;"	d	file:
UNZ_OK	.\Utils\unzip.h	62;"	d
UNZ_PARAMERROR	.\Utils\unzip.h	66;"	d
URBAN_DENSE_KERN_SIZE	.\XESCore\DEMAlgs.cpp	77;"	d	file:
URBAN_RADIAL_KERN_SIZE	.\XESCore\DEMAlgs.cpp	78;"	d	file:
URBAN_TRANS_KERN_SIZE	.\XESCore\DEMAlgs.cpp	79;"	d	file:
USE_DEM_H	.\XESCore\DSFBuilder.cpp	96;"	d	file:
USE_DEM_N	.\XESCore\DSFBuilder.cpp	97;"	d	file:
USE_GEOJPEG2K	.\Obj\XDefs.h	86;"	d
USE_LANDMARK_NAMES	.\Tiger\TIGERTypes.h	29;"	d
USE_MEM_FILE	.\DSF\DSFLib_Print.cpp	24;"	d	file:
USE_MEM_FILE	.\DSF\dsflib_013005\DSFLib_Print.cpp	24;"	d	file:
USE_PVRTC	.\DSF\DSFPointPool.cpp	27;"	d	file:
USE_STREET_NAMES	.\Tiger\TIGERTypes.h	28;"	d
UTF16	.\GUI\GUI_Unicode.h	/^typedef	unsigned short		UTF16;													\/\/ We will use our normal string for UTF8.  We do not make a$/;"	t
UTF16_decode	.\GUI\GUI_Unicode.h	/^inline const UTF16 * UTF16_decode(const UTF16 * chars, UTF32& result)$/;"	f
UTF16_encode	.\GUI\GUI_Unicode.h	/^inline int		  UTF16_encode(UTF32 inChar, UTF16 outChars[2])$/;"	f
UTF32	.\GUI\GUI_Unicode.h	/^typedef unsigned int		UTF32;													\/\/ string for UTF32 because it is only used for 1 char at a time.$/;"	t
UTF8	.\GUI\GUI_Unicode.h	/^typedef	unsigned char		UTF8;													\/\/ Definitions for chars in each of the 3 encoding formats.$/;"	t
UTF8_InvalidRange	.\GUI\GUI_Unicode.h	/^inline const UTF8 *		UTF8_InvalidRange(const UTF8 * s, const UTF8 * e)$/;"	f
UTF8_IsValid	.\GUI\GUI_Unicode.h	/^inline bool			UTF8_IsValid(const UTF8 * s, const UTF8 * e)$/;"	f
UTF8_IsValid	.\GUI\GUI_Unicode.h	/^inline bool			UTF8_IsValid(const string& utf8_str)$/;"	f
UTF8_ValidRange	.\GUI\GUI_Unicode.h	/^inline const UTF8 *		UTF8_ValidRange(const UTF8 * s, const UTF8 * e)$/;"	f
UTF8_align	.\GUI\GUI_Unicode.h	/^inline UTF8 *	UTF8_align(		 UTF8 * string)$/;"	f
UTF8_align	.\GUI\GUI_Unicode.h	/^inline const UTF8 *	UTF8_align(const UTF8 * string)$/;"	f
UTF8_decode	.\GUI\GUI_Unicode.h	/^inline UTF32	UTF8_decode(const UTF8 * chars)$/;"	f
UTF8_encode	.\GUI\GUI_Unicode.h	/^inline int	UTF8_encode(UTF32 c, UTF8 buf[4])$/;"	f
UTF8_next	.\GUI\GUI_Unicode.h	/^inline UTF8 *	UTF8_next(		 UTF8 * string)$/;"	f
UTF8_next	.\GUI\GUI_Unicode.h	/^inline const UTF8 *	UTF8_next(const UTF8 * string)$/;"	f
UTF8_prev	.\GUI\GUI_Unicode.h	/^inline UTF8 *	UTF8_prev(		 UTF8 * string)$/;"	f
UTF8_prev	.\GUI\GUI_Unicode.h	/^inline const UTF8 *	UTF8_prev(const UTF8 * string)$/;"	f
UTL_http_encode_url	.\Network\curl_http.cpp	/^void	UTL_http_encode_url(string& io_url)$/;"	f
UTL_http_is_error_bad_net	.\Network\curl_http.cpp	/^bool	UTL_http_is_error_bad_net(int err)$/;"	f
UTL_interval	.\Utils\UTL_interval.h	/^UTL_interval<T>::UTL_interval()$/;"	f	class:UTL_interval
UTL_interval	.\Utils\UTL_interval.h	/^UTL_interval<T>::UTL_interval(T b, T e)$/;"	f	class:UTL_interval
UTL_interval	.\Utils\UTL_interval.h	/^UTL_interval<T>::UTL_interval(const UTL_interval<T>& rhs) : schedule(rhs.schedule)$/;"	f	class:UTL_interval
UTL_interval	.\Utils\UTL_interval.h	/^UTL_interval<T>::UTL_interval(const interval& x)$/;"	f	class:UTL_interval
UTL_interval	.\Utils\UTL_interval.h	/^class	UTL_interval {$/;"	c
UTL_interval_H	.\Utils\UTL_interval.h	25;"	d
UTL_interval_difference	.\Utils\UTL_interval.h	/^void UTL_interval_difference(UTL_interval<T>& out, const UTL_interval<T>& a, const UTL_interval<T>& b)$/;"	f
UTL_interval_intersection	.\Utils\UTL_interval.h	/^void UTL_interval_intersection(UTL_interval<T>& out, const UTL_interval<T>& a, const UTL_interval<T>& b)$/;"	f
UTL_interval_merge	.\Utils\UTL_interval.h	/^void UTL_interval_merge(UTL_interval<T>& out, const UTL_interval<T>& a, const UTL_interval<T>& b, F func)$/;"	f
UTL_interval_op_difference	.\Utils\UTL_interval.h	/^struct UTL_interval_op_difference { bool operator()(bool a, bool b) const { return a && !b; } };$/;"	s
UTL_interval_op_intersection	.\Utils\UTL_interval.h	/^struct UTL_interval_op_intersection { bool operator()(bool a, bool b) const { return a && b; } };$/;"	s
UTL_interval_op_symmetric_difference	.\Utils\UTL_interval.h	/^struct UTL_interval_op_symmetric_difference { bool operator()(bool a, bool b) const { return a ^ b; } };$/;"	s
UTL_interval_op_union	.\Utils\UTL_interval.h	/^struct UTL_interval_op_union { bool operator()(bool a, bool b) const { return a || b; } };$/;"	s
UTL_interval_symmetric_difference	.\Utils\UTL_interval.h	/^void UTL_interval_symmetric_difference(UTL_interval<T>& out, const UTL_interval<T>& a, const UTL_interval<T>& b)$/;"	f
UTL_interval_union	.\Utils\UTL_interval.h	/^void UTL_interval_union(UTL_interval<T>& out, const UTL_interval<T>& a, const UTL_interval<T>& b)$/;"	f
UTM	.\SDTS\SDTSReadTVP.cpp	/^	bool	UTM;			\/\/ Are we in UTM?  If so we need to go to geo.$/;"	m	struct:CoordTransform	file:
UTMToLonLat	.\Utils\GISUtils.cpp	/^void	UTMToLonLat(double x, double y, int zone, double * outLon, double * outLat)$/;"	f
UVMap_t	.\WEDCore\WED_GISUtils.h	/^typedef vector<Triangle2>		UVMap_t;$/;"	t
UV_MAPPER_H	.\AC3DPlugins\uv_mapper.h	25;"	d
Undo	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::Undo(void)$/;"	f	class:WED_UndoMgr
UndoCmdHandler	.\ObjEdit\OE_DataModel.cpp	/^static	void	UndoCmdHandler(void * inMenuRef, void * inItemRef)$/;"	f	file:
UndoCmdNotification	.\ObjEdit\OE_DataModel.cpp	/^static	void	UndoCmdNotification(int inCatagory, int inMsg, void * inParam)$/;"	f	file:
UndoCmdUpdateItems	.\ObjEdit\OE_DataModel.cpp	/^static	void	UndoCmdUpdateItems(void)$/;"	f	file:
UndoState_t	.\ObjEdit\OE_DataModel.cpp	/^struct	UndoState_t {$/;"	s	file:
UndoVector_t	.\ObjEdit\OE_DataModel.cpp	/^typedef	vector<UndoState_t>	UndoVector_t;$/;"	t	file:
UnlinkedFace_p	.\XESCore\Zoning.cpp	/^	UnlinkedFace_p(set<Face_handle> * universe) : universe_(universe) { }$/;"	f	struct:UnlinkedFace_p
UnlinkedFace_p	.\XESCore\Zoning.cpp	/^struct UnlinkedFace_p {$/;"	s	file:
UnloadFont	.\UI\FontMgr.cpp	/^void FontMgr::UnloadFont(FontHandle inFont)$/;"	f	class:FontMgr
UnlockPackage	.\WEDWindows\WED_PackageListAdapter.cpp	/^void	WED_PackageListAdapter::UnlockPackage(const string& name)$/;"	f	class:WED_PackageListAdapter
UnpadImage	.\Utils\TexUtils.cpp	/^void UnpadImage(ImageInfo * im)$/;"	f
UnregisterNotifiable	.\GUI\GUI_Commander.cpp	/^void		GUI_Commander::UnregisterNotifiable(GUI_Commander_Notifiable * notif)$/;"	f	class:GUI_Commander
UntagPolygon	.\XESCore\MapBuffer.cpp	/^void	UntagPolygon($/;"	f
UnzipBlock	.\Utils\XFileTwiddle.cpp	/^int	UnzipBlock(const char * inZipped, int inZippedSize, char * outRaw, int inRawSize)$/;"	f
Update	.\UI\XGrinderApp.cpp	/^void XGrinderWin::Update(XWin::XContext ctx)$/;"	f	class:XGrinderWin
Update	.\UI\XWin.lin.cpp	/^void XWin::Update(XContext ctx)$/;"	f	class:XWin
Update	.\UI\XWinGL.lin.cpp	/^void XWinGL::Update(XContext ctx)$/;"	f	class:XWinGL
Update	.\UI\XWinGL.win.cpp	/^void			XWinGL::Update(XContext ctx)$/;"	f	class:XWinGL
Update	.\WEDXPlugin\WED_XPluginCamera.cpp	/^void WED_XPluginCamera::Update(int inType,const vector<string>& inArgs)$/;"	f	class:WED_XPluginCamera
Update	.\WEDXPlugin\WED_XPluginObject.cpp	/^void WED_XPluginObject::Update(const vector<string>& inArgs)$/;"	f	class:WED_XPluginObject
UpdateCam	.\WEDXPlugin\WED_XPluginMgr.cpp	/^void WED_XPluginMgr::UpdateCam(int inType,const vector<string>& inArgs)$/;"	f	class:WED_XPluginMgr
UpdateNow	.\UI\XWin.lin.cpp	/^void XWin::UpdateNow(void)$/;"	f	class:XWin
UpdateNow	.\UI\XWin.win.cpp	/^void			XWin::UpdateNow(void)$/;"	f	class:XWin
UpdatePmwx	.\XESCore\MapAlgs.cpp	/^struct UpdatePmwx : public Visitor_base<Simplify_polylines_2>$/;"	s	file:
UpdatePoolState	.\DSF\DSFLibWrite.cpp	/^static void	UpdatePoolState(FILE * fi, int newType, int newPool, int newFilter, int& curType, int& curPool, int& curFilter)$/;"	f	file:
UpdatePoolState	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	UpdatePoolState(FILE * fi, int newType, int newPool, int& curType, int& curPool)$/;"	f
UpdateViewCmds	.\XPTools\ObjEdit.cpp	/^static	void	UpdateViewCmds(void)$/;"	f	file:
UpdateWaterWithMaskFile	.\XESCore\Hydro.cpp	/^void	UpdateWaterWithMaskFile(Pmwx& inMap, DEMGeoMap& dems, const char * maskFile, ProgressFunc inProg)$/;"	f
UpsampleDEM	.\XESCore\DEMAlgs.cpp	/^void	UpsampleDEM(const DEMGeo& ioDem, DEMGeo& bigger, int ratio)$/;"	f
UpsampleEnvironmentalParams	.\XESCore\DEMAlgs.cpp	/^void	UpsampleEnvironmentalParams(DEMGeoMap& ioDEMs, ProgressFunc inProg)$/;"	f
UpsampleFromParamLinear	.\XESCore\DEMAlgs.cpp	/^void	UpsampleFromParamLinear(DEMGeo& masterOrig, DEMGeo& masterDeriv, DEMGeo& slaveOrig, DEMGeo& slaveDeriv)$/;"	f
VECTOR2	.\Obj\XDefs.h	276;"	d
VERSIONMADEBY	.\Utils\zip.c	33;"	d	file:
VERSIONS_GET_SIZE_GUESS	.\WEDImportExport\WED_GatewayImport.cpp	81;"	d	file:
VERSION_FACE	.\XESCore\MapIO.cpp	331;"	d	file:
VERSION_GET_SIZE_GUESS	.\WEDImportExport\WED_GatewayImport.cpp	82;"	d	file:
VERSION_H	.\XPTools\version.h	2;"	d
VERSION_HALFEDGE	.\XESCore\MapIO.cpp	330;"	d	file:
VERSION_VERTEX	.\XESCore\MapIO.cpp	329;"	d	file:
VERTEX_NUM	.\XPTools\GetImage.cpp	/^inline	int	VERTEX_NUM(int x, int y) { return x + y * 151; }$/;"	f
VMAP_RELIEF_RANGE	.\XESCore\Hydro.cpp	69;"	d	file:
VMAP_TOO_STEEP	.\XESCore\Hydro.cpp	71;"	d	file:
VPFIMPORT_H	.\VPF\VPFImport.h	25;"	d
VPFImportTopo3	.\VPF\VPFImport.cpp	/^bool	VPFImportTopo3($/;"	f
VPFTABLE_H	.\VPF\VPFTable.h	24;"	d
VPFTableIterator	.\VPF\VPFTable.cpp	/^VPFTableIterator::VPFTableIterator(MFMemFile * inFile, const VPF_TableDef& inDef) :$/;"	f	class:VPFTableIterator
VPFTableIterator	.\VPF\VPFTable.h	/^class	VPFTableIterator {$/;"	c
VPF_ColumnDef	.\VPF\VPFTable.h	/^struct	VPF_ColumnDef {$/;"	s
VPF_Face	.\VPF\VPFImport.cpp	/^struct VPF_Face : public WTPM_Face {$/;"	s	file:
VPF_FaceRule_t	.\VPF\VPFImport.h	/^struct	VPF_FaceRule_t {$/;"	s
VPF_Line	.\VPF\VPFImport.cpp	/^struct VPF_Line : public WTPM_Line {$/;"	s	file:
VPF_LineRule_t	.\VPF\VPFImport.h	/^struct	VPF_LineRule_t {$/;"	s
VPF_Node	.\VPF\VPFImport.cpp	/^struct VPF_Node : public WTPM_Node {$/;"	s	file:
VPF_TableDef	.\VPF\VPFTable.h	/^struct	VPF_TableDef {$/;"	s
VPF_TripletKey	.\VPF\VPFTable.h	/^struct	VPF_TripletKey {$/;"	s
Validate	.\Utils\PolyRasterUtils.h	/^void	PolyRasterizer<Number>::Validate(void) const$/;"	f	class:PolyRasterizer
Validate	.\WEDCore\WED_Archive.cpp	/^void	WED_Archive::Validate(void)$/;"	f	class:WED_Archive
Validate	.\WEDCore\WED_Persistent.h	/^	virtual void			Validate(void) { }$/;"	f	class:WED_Persistent
Validate	.\WEDEntities\WED_GISEdge.cpp	/^void		WED_GISEdge::Validate(void)$/;"	f	class:WED_GISEdge
Validate	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::Validate(void)$/;"	f	class:WED_Thing
Validate	.\XESCore\TriFan.cpp	/^void				TriFanBuilder::Validate(void)$/;"	f	class:TriFanBuilder
Validate	.\XESCore\TriFan.cpp	/^void		TriFanBuilder::Validate(void)$/;"	f	class:TriFanBuilder
ValidateBasics	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::ValidateBasics(const parser_in_info & inStr, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
ValidateBuffer	.\XESCore\MapBuffer.cpp	/^void	ValidateBuffer($/;"	f
ValidateCurly	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::ValidateCurly(const parser_in_info & inStr, int position, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
ValidateNetworkTopology	.\XESCore\NetPlacement.cpp	/^void	ValidateNetworkTopology(Net_JunctionInfoSet& outJunctions, Net_ChainInfoSet& outChains)$/;"	f
ValidateRecursive	.\WEDCore\WED_Validate.cpp	/^static WED_Thing * ValidateRecursive(WED_Thing * who, WED_LibraryMgr * lib_mgr)$/;"	f	file:
Value	.\lib_json\include\json\value.h	/^   class JSON_API Value $/;"	c	namespace:Json
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( Int value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( Int64 value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( UInt value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( UInt64 value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( ValueType type )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( bool value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( const CppTL::ConstString &value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( const StaticString &value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( const Value &other )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( const char *beginValue, $/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( const char *value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( const std::string &value )$/;"	f	class:Json::Value
Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::Value( double value )$/;"	f	class:Json::Value
ValueArrayAllocator	.\lib_json\include\json\value.h	/^   class JSON_API ValueArrayAllocator$/;"	c	namespace:Json
ValueConstIterator	.\lib_json\include\json\value.h	/^   class ValueConstIterator : public ValueIteratorBase$/;"	c	namespace:Json
ValueHolder	.\lib_json\include\json\value.h	/^      union ValueHolder$/;"	u	class:Json::Value
ValueInternalArray	.\lib_json\include\json\value.h	/^   class JSON_API ValueInternalArray$/;"	c	namespace:Json
ValueInternalLink	.\lib_json\include\json\value.h	/^   class JSON_API ValueInternalLink$/;"	c	namespace:Json
ValueInternalMap	.\lib_json\include\json\value.h	/^   class JSON_API ValueInternalMap$/;"	c	namespace:Json
ValueIterator	.\lib_json\include\json\value.h	/^   class ValueIterator : public ValueIteratorBase$/;"	c	namespace:Json
ValueIteratorBase	.\lib_json\include\json\value.h	/^   class ValueIteratorBase$/;"	c	namespace:Json
ValueMapAllocator	.\lib_json\include\json\value.h	/^   class JSON_API ValueMapAllocator$/;"	c	namespace:Json
ValueTest	.\lib_json\src\test_lib_json\main.cpp	/^   ValueTest()$/;"	f	struct:ValueTest
ValueTest	.\lib_json\src\test_lib_json\main.cpp	/^struct ValueTest : JsonTest::TestCase$/;"	s	file:
ValueType	.\Utils\QuadTree.h	/^	typedef typename __T::ValueType			ValueType;$/;"	t	class:QuadTree
ValueType	.\lib_json\include\json\value.h	/^   enum ValueType$/;"	g	namespace:Json
Vb	.\XESCore\MeshDefs.h	/^typedef	CGAL::Triangulation_vertex_base_with_info_2<MeshVertexInfo, Traits_2>		Vb;$/;"	t
Vector2	.\Utils\CompGeomDefs2.h	/^	Vector2() : dx(0.0), dy(0.0) { }$/;"	f	struct:Vector2
Vector2	.\Utils\CompGeomDefs2.h	/^	Vector2(const Point2& p1, const Point2& p2) : dx(p2.x_ - p1.x_), dy(p2.y_ - p1.y_) { }$/;"	f	struct:Vector2
Vector2	.\Utils\CompGeomDefs2.h	/^	Vector2(const Vector2& rhs) : dx(rhs.dx), dy(rhs.dy) { }$/;"	f	struct:Vector2
Vector2	.\Utils\CompGeomDefs2.h	/^	Vector2(double ix, double iy) : dx(ix), dy(iy) { }$/;"	f	struct:Vector2
Vector2	.\Utils\CompGeomDefs2.h	/^	explicit Vector2(const Point2& rhs) : dx(rhs.x_), dy(rhs.y_) { }$/;"	f	struct:Vector2
Vector2	.\Utils\CompGeomDefs2.h	/^struct	Vector2 {$/;"	s
Vector3	.\Utils\CompGeomDefs3.h	/^	Vector3() : dx(0.0), dy(0.0), dz(0.0) { }$/;"	f	struct:Vector3
Vector3	.\Utils\CompGeomDefs3.h	/^	Vector3(const Point3& p1, const Point3& p2) : dx(p2.x - p1.x), dy(p2.y - p1.y), dz(p2.z - p1.z) { }$/;"	f	struct:Vector3
Vector3	.\Utils\CompGeomDefs3.h	/^	Vector3(const Vector3& rhs) : dx(rhs.dx), dy(rhs.dy), dz(rhs.dz) { }$/;"	f	struct:Vector3
Vector3	.\Utils\CompGeomDefs3.h	/^	Vector3(double ix, double iy, double iz) : dx(ix), dy(iy), dz(iz) { }$/;"	f	struct:Vector3
Vector3	.\Utils\CompGeomDefs3.h	/^	explicit Vector3(const Point3& rhs) : dx(rhs.x), dy(rhs.y), dz(rhs.z) { }$/;"	f	struct:Vector3
Vector3	.\Utils\CompGeomDefs3.h	/^struct	Vector3 {$/;"	s
VectorDegs2NorthHeading	.\Utils\GISUtils.cpp	/^double VectorDegs2NorthHeading(const Point2& ref, const Point2& p, const Vector2& dir)$/;"	f
VectorLLToMeters	.\Utils\GISUtils.cpp	/^Vector2 VectorLLToMeters(const Point2& ref, const Vector2& v)$/;"	f
VectorMeters2NorthHeading	.\Utils\GISUtils.cpp	/^double VectorMeters2NorthHeading(const Point2& ref, const Point2& p, const Vector2& dir)$/;"	f
VectorMetersToLL	.\Utils\GISUtils.cpp	/^Vector2 VectorMetersToLL(const Point2& ref, const Vector2& v)$/;"	f
Vector_2	.\XESCore\CGALDefs.h	/^typedef FastKernel::Vector_2                            Vector_2;$/;"	t
Vector_2	.\XESCore\CGALTypes.h	/^typedef Kernel::Vector_2									Vector_2;$/;"	t
Vector_3	.\XESCore\CGALDefs.h	/^typedef FastKernel::Vector_3                            Vector_3;$/;"	t
VerInfo_t	.\WEDImportExport\WED_VerTable.h	/^struct VerInfo_t$/;"	s
VerVector	.\WEDImportExport\WED_VerTable.h	/^typedef vector<VerInfo_t> VerVector;$/;"	t
VerVectorChanged	.\WEDImportExport\WED_VerTable.cpp	/^void	WED_VerTable::VerVectorChanged(void)$/;"	f	class:WED_VerTable
VerifySheds	.\XESCore\DEMAlgs.cpp	/^void VerifySheds(const DEMGeo& ws, vector<DEMGeo::address>& seeds)$/;"	f
Vertex606	.\Env\EnvDefs.h	/^} Vertex606;$/;"	t	typeref:struct:__anon17
Vertex610	.\Env\EnvDefs.h	/^} Vertex610;$/;"	t	typeref:struct:__anon18
VertexInfo	.\Env\Persistence.h	/^struct VertexInfo {$/;"	s
VertexMap	.\AC3DPlugins\uv_mapper.cpp	/^typedef map<Vertex*, uv_vertex_info_t*>		VertexMap;$/;"	t	file:
VertexQueue	.\XESCore\MeshDefs.h	/^typedef multimap<double, void *>							VertexQueue;$/;"	t
VertexTree	.\RenderFarmUI\RF_DrawMap.h	/^	typedef RTree2<Vertex_handle,16>	VertexTree;$/;"	t	struct:PmwxIndex_t
Vertex_const_handle	.\XESCore\MapDefs.h	/^typedef Arrangement_2::Vertex_const_handle                  Vertex_const_handle;$/;"	t
Vertex_const_handle	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Vertex_const_handle    Vertex_const_handle;$/;"	t	class:PmwxFmt	file:
Vertex_handle	.\XESCore\MapAlgs.cpp	/^	typedef typename PS::Vertex_handle Vertex_handle;$/;"	t	class:Visitor_base	file:
Vertex_handle	.\XESCore\MapDefs.h	/^typedef Arrangement_2::Vertex_handle                  Vertex_handle;$/;"	t
Vertex_handle	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::Vertex_handle          Vertex_handle;$/;"	t	class:PmwxFmt	file:
Vertex_handle	.\XESCore\MeshConformer.h	/^  typedef typename Tr::Vertex_handle Vertex_handle;$/;"	t	class:CGAL::Triangulation_conformer_any_2
Vertex_handle_A	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementA::Vertex_const_handle  Vertex_handle_A;$/;"	t	class:Arr_full_overlay_traits	file:
Vertex_handle_A	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementA::Vertex_const_handle  Vertex_handle_A;$/;"	t	class:Arr_replace_overlay_traits	file:
Vertex_handle_B	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementB::Vertex_const_handle  Vertex_handle_B;$/;"	t	class:Arr_full_overlay_traits	file:
Vertex_handle_B	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementB::Vertex_const_handle  Vertex_handle_B;$/;"	t	class:Arr_replace_overlay_traits	file:
Vertex_handle_R	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementR::Vertex_handle        Vertex_handle_R;$/;"	t	class:Arr_full_overlay_traits	file:
Vertex_handle_R	.\XESCore\MapOverlay.cpp	/^	typedef typename ArrangementR::Vertex_handle        Vertex_handle_R;$/;"	t	class:Arr_replace_overlay_traits	file:
Vertices_in_cluster_iterator	.\XESCore\MeshConformer.h	/^    Vertices_in_cluster_iterator;$/;"	t	class:CGAL::Triangulation_conformer_any_2
ViewCmdHandler	.\XPTools\ObjEdit.cpp	/^void	ViewCmdHandler(void * inMenuRef, void * inItemRef)$/;"	f
VisibleVector	.\ObjEdit\OE_Utils.h	/^typedef	vector<bool>			VisibleVector;$/;"	t
VisibleVector	.\Utils\XCull.h	/^	typedef	vector<bool>			VisibleVector;$/;"	t	class:XCull
Visit	.\XESCore\MapTopology.h	/^	void	Visit(Arr * targ)$/;"	f	class:MapBFSVisitor
VisitAdjacentFaces	.\XESCore\MapTopology.h	/^void	VisitAdjacentFaces(typename Arr::Face_handle face, Visitor& v)$/;"	f
VisitContiguousFaces	.\XESCore\MapTopology.h	/^void	VisitContiguousFaces(typename Arr::Face_handle face, Visitor& v)$/;"	f
VisitEdgesOfFace	.\XESCore\MapTopology.h	/^void	VisitEdgesOfFace(typename Arr::Face_handle face, Visitor& v)$/;"	f
Visitor_base	.\XESCore\MapAlgs.cpp	/^class Visitor_base {$/;"	c	file:
WANT_ATI	.\XPTools\DDSTool.cpp	32;"	d	file:
WANT_ATI	.\XPTools\DDSTool.cpp	35;"	d	file:
WANT_BINARY	.\OneOffs\gen_tiles.c	20;"	d	file:
WANT_NEW_BORDER_RULES	.\XESCore\Airports.cpp	52;"	d	file:
WANT_PVR	.\XPTools\DDSTool.cpp	31;"	d	file:
WANT_PVR	.\XPTools\DDSTool.cpp	34;"	d	file:
WANT_TERRASEVER	.\Obj\XDefs.h	75;"	d
WARN_IF_LESS_LEVEL	.\WEDCore\WED_UndoMgr.cpp	36;"	d	file:
WATER_SMOOTHER_ITERATIONS	.\XESCore\MeshAlgs.cpp	104;"	d	file:
WATER_SURF_DIM	.\XESCore\DEMAlgs.cpp	48;"	d	file:
WEDXPluginDrawObjCB	.\WEDXPlugin\WED_XPluginMgr.cpp	/^int	 WED_XPluginMgr::WEDXPluginDrawObjCB(XPLMDrawingPhase inPhase,int inIsBefore,void * inRefcon)$/;"	f	class:WED_XPluginMgr
WEDXPluginErrorCB	.\WEDXPlugin\WED_XPlugin.cpp	/^void WEDXPluginErrorCB(const char * msg)$/;"	f
WEDXPluginInitCB	.\WEDXPlugin\WED_XPlugin.cpp	/^float WEDXPluginInitCB(float elapsedMe, float elapsedSim, int counter, void * refcon)$/;"	f
WEDXPluginItem	.\WEDXPlugin\WED_XPlugin.cpp	/^int	 		WEDXPluginItem;$/;"	v
WEDXPluginLoopCB	.\WEDXPlugin\WED_XPluginClient.cpp	/^float WED_XPluginClient::WEDXPluginLoopCB(float elapsedMe, float elapsedSim, int counter, void * refcon)$/;"	f	class:WED_XPluginClient
WEDXPluginMenuHandler	.\WEDXPlugin\WED_XPlugin.cpp	/^void WEDXPluginMenuHandler(void * mRef, void * iRef)$/;"	f
WEDXPluginMenuId	.\WEDXPlugin\WED_XPlugin.cpp	/^XPLMMenuID	WEDXPluginMenuId;$/;"	v
WEDXPluginVersNumber	.\WEDXPlugin\WED_XPlugin.cpp	/^char WEDXPluginVersNumber[] = "v0.1d2 (development version)";$/;"	v
WEDXPluginWindow	.\WEDXPlugin\WED_XPlugin.cpp	/^XPLMWindowID WEDXPluginWindow;$/;"	v
WEDXPluginWindowCursor	.\WEDXPlugin\WED_XPlugin.cpp	/^XPLMCursorStatus WEDXPluginWindowCursor(XPLMWindowID inWindowID,$/;"	f
WEDXPluginWindowDraw	.\WEDXPlugin\WED_XPlugin.cpp	/^void	WEDXPluginWindowDraw(XPLMWindowID inWindowID, void * inRefcon)$/;"	f
WEDXPluginWindowKey	.\WEDXPlugin\WED_XPlugin.cpp	/^void WEDXPluginWindowKey(XPLMWindowID inWindowID, char inKey, XPLMKeyFlags inFlags, char vkey, void * inRefcon, int losingFocus)$/;"	f
WEDXPluginWindowMouse	.\WEDXPlugin\WED_XPlugin.cpp	/^int	WEDXPluginWindowMouse(XPLMWindowID inWindowID, int x, int y, XPLMMouseStatus isDown, void * inRefcon)$/;"	f
WEDXPluginWindowMouseWheel	.\WEDXPlugin\WED_XPlugin.cpp	/^int	WEDXPluginWindowMouseWheel(XPLMWindowID inWindowID,$/;"	f
WEDXPluginXHostID	.\WEDXPlugin\WED_XPlugin.cpp	/^XPLMHostApplicationID WEDXPluginXHostID;$/;"	v
WEDXPluginXPLMVers	.\WEDXPlugin\WED_XPlugin.cpp	/^int WEDXPluginXPLMVers;$/;"	v
WEDXPluginXPlaneVers	.\WEDXPlugin\WED_XPlugin.cpp	/^int WEDXPluginXPlaneVers;$/;"	v
WED_AIRPORTBEACON_H	.\WEDEntities\WED_AirportBeacon.h	25;"	d
WED_AIRPORTBOUNDARY_H	.\WEDEntities\WED_AirportBoundary.h	25;"	d
WED_AIRPORTCHAIN_H	.\WEDEntities\WED_AirportChain.h	25;"	d
WED_AIRPORTNODE_H	.\WEDEntities\WED_AirportNode.h	25;"	d
WED_AIRPORTSIGN_H	.\WEDEntities\WED_AirportSign.h	25;"	d
WED_AIRPORT_H	.\WEDEntities\WED_Airport.h	25;"	d
WED_APPLICATION_H	.\WEDCore\WED_Application.h	25;"	d
WED_ARCHIVE_H	.\WEDCore\WED_Archive.h	25;"	d
WED_ASSERT_H	.\WEDCore\WED_Assert.h	25;"	d
WED_ATCFlow	.\WEDEntities\WED_ATCFlow.cpp	/^WED_ATCFlow::WED_ATCFlow(WED_Archive * a, int i) : $/;"	f	class:WED_ATCFlow
WED_ATCFlow	.\WEDEntities\WED_ATCFlow.h	/^class WED_ATCFlow : public WED_Thing {$/;"	c
WED_ATCFlow_H	.\WEDEntities\WED_ATCFlow.h	25;"	d
WED_ATCFrequency	.\WEDEntities\WED_ATCFrequency.cpp	/^WED_ATCFrequency::WED_ATCFrequency(WED_Archive * a, int i) : WED_Thing(a, i),$/;"	f	class:WED_ATCFrequency
WED_ATCFrequency	.\WEDEntities\WED_ATCFrequency.h	/^class WED_ATCFrequency : public WED_Thing {$/;"	c
WED_ATCFrequency_H	.\WEDEntities\WED_ATCFrequency.h	25;"	d
WED_ATCRunwayUse	.\WEDEntities\WED_ATCRunwayUse.cpp	/^WED_ATCRunwayUse::WED_ATCRunwayUse(WED_Archive * a, int i) :$/;"	f	class:WED_ATCRunwayUse
WED_ATCRunwayUse	.\WEDEntities\WED_ATCRunwayUse.h	/^class WED_ATCRunwayUse : public WED_Thing {$/;"	c
WED_ATCRunwayUse_H	.\WEDEntities\WED_ATCRunwayUse.h	25;"	d
WED_ATCTimeRule	.\WEDEntities\WED_ATCTimeRule.cpp	/^WED_ATCTimeRule::WED_ATCTimeRule(WED_Archive * a, int id) : WED_Thing(a,id),$/;"	f	class:WED_ATCTimeRule
WED_ATCTimeRule	.\WEDEntities\WED_ATCTimeRule.h	/^class WED_ATCTimeRule : public WED_Thing {$/;"	c
WED_ATCTimeRule_H	.\WEDEntities\WED_ATCTimeRule.h	25;"	d
WED_ATCWindRule	.\WEDEntities\WED_ATCWindRule.cpp	/^WED_ATCWindRule::WED_ATCWindRule(WED_Archive * a, int id) : WED_Thing(a,id),$/;"	f	class:WED_ATCWindRule
WED_ATCWindRule	.\WEDEntities\WED_ATCWindRule.h	/^class WED_ATCWindRule : public WED_Thing {$/;"	c
WED_ATCWindRule_H	.\WEDEntities\WED_ATCWindRule.h	25;"	d
WED_AboutBox	.\WEDWindows\WED_AboutBox.cpp	/^WED_AboutBox::WED_AboutBox(GUI_Commander * cmdr) : GUI_Window("About WED", xwin_style_movable | xwin_style_centered, SizeOfPng("about.png"), cmdr)$/;"	f	class:WED_AboutBox
WED_AboutBox	.\WEDWindows\WED_AboutBox.h	/^class WED_AboutBox : public GUI_Window, public GUI_Timer {$/;"	c
WED_AboutBox_H	.\WEDWindows\WED_AboutBox.h	25;"	d
WED_Airport	.\WEDEntities\WED_Airport.cpp	/^WED_Airport::WED_Airport(WED_Archive * a, int i) : WED_GISComposite(a,i),$/;"	f	class:WED_Airport
WED_Airport	.\WEDEntities\WED_Airport.h	/^class	WED_Airport : public WED_GISComposite {$/;"	c
WED_AirportBeacon	.\WEDEntities\WED_AirportBeacon.cpp	/^WED_AirportBeacon::WED_AirportBeacon(WED_Archive * a, int i) : WED_GISPoint(a,i),$/;"	f	class:WED_AirportBeacon
WED_AirportBeacon	.\WEDEntities\WED_AirportBeacon.h	/^class	WED_AirportBeacon : public WED_GISPoint {$/;"	c
WED_AirportBoundary	.\WEDEntities\WED_AirportBoundary.cpp	/^WED_AirportBoundary::WED_AirportBoundary(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_AirportBoundary
WED_AirportBoundary	.\WEDEntities\WED_AirportBoundary.h	/^class	WED_AirportBoundary : public WED_GISPolygon {$/;"	c
WED_AirportChain	.\WEDEntities\WED_AirportChain.cpp	/^WED_AirportChain::WED_AirportChain(WED_Archive * a, int i) : WED_GISChain(a,i),$/;"	f	class:WED_AirportChain
WED_AirportChain	.\WEDEntities\WED_AirportChain.h	/^class	WED_AirportChain : public WED_GISChain {$/;"	c
WED_AirportNode	.\WEDEntities\WED_AirportNode.cpp	/^WED_AirportNode::WED_AirportNode(WED_Archive * a, int i) : WED_GISPoint_Bezier(a,i),$/;"	f	class:WED_AirportNode
WED_AirportNode	.\WEDEntities\WED_AirportNode.h	/^class	WED_AirportNode : public WED_GISPoint_Bezier {$/;"	c
WED_AirportSign	.\WEDEntities\WED_AirportSign.cpp	/^WED_AirportSign::WED_AirportSign(WED_Archive * a, int i) : WED_GISPoint_Heading(a,i),$/;"	f	class:WED_AirportSign
WED_AirportSign	.\WEDEntities\WED_AirportSign.h	/^class WED_AirportSign : public WED_GISPoint_Heading {$/;"	c
WED_Application	.\WEDCore\WED_Application.cpp	/^WED_Application::WED_Application(int& argc, char* argv[]) : GUI_Application(argc, argv),$/;"	f	class:WED_Application
WED_Application	.\WEDCore\WED_Application.h	/^class	WED_Application : public GUI_Application {$/;"	c
WED_AptExport	.\WEDImportExport\WED_AptIE.cpp	/^void	WED_AptExport($/;"	f
WED_AptIE_H	.\WEDImportExport\WED_AptIE.h	25;"	d
WED_AptImport	.\WEDImportExport\WED_AptIE.cpp	/^void	WED_AptImport($/;"	f
WED_AptImportDialog	.\WEDImportExport\WED_AptImportDialog.cpp	/^WED_AptImportDialog::WED_AptImportDialog($/;"	f	class:WED_AptImportDialog
WED_AptImportDialog	.\WEDImportExport\WED_AptImportDialog.h	/^class WED_AptImportDialog : public GUI_Window, public GUI_Listener, public GUI_Destroyable {$/;"	c
WED_AptImportDialog_H	.\WEDImportExport\WED_AptImportDialog.h	25;"	d
WED_AptTable	.\WEDImportExport\WED_AptTable.cpp	/^WED_AptTable::WED_AptTable($/;"	f	class:WED_AptTable
WED_AptTable	.\WEDImportExport\WED_AptTable.h	/^class	WED_AptTable :	public GUI_TextTableProvider, $/;"	c
WED_AptTable_H	.\WEDImportExport\WED_AptTable.h	25;"	d
WED_Archive	.\WEDCore\WED_Archive.cpp	/^WED_Archive::WED_Archive(IResolver * r) : mResolver(r), mDying(false), mUndo(NULL), mUndoMgr(NULL),$/;"	f	class:WED_Archive
WED_Archive	.\WEDCore\WED_Archive.h	/^class	WED_Archive : public GUI_Broadcaster, public WED_XMLHandler {$/;"	c
WED_AssertHandler_f	.\WEDCore\WED_Assert.cpp	/^void WED_AssertHandler_f(const char * condition, const char * file, int line)$/;"	f
WED_AssertInit	.\WEDCore\WED_Assert.cpp	/^void	WED_AssertInit(void)$/;"	f
WED_BMP	.\Utils\BitmapUtils.h	/^	WED_BMP,			\/\/NewBitmap,FromFile            X			$/;"	e	enum:SupportedTypes
WED_BUFFER_ALLOC_SIZE	.\WEDCore\WED_Buffer.cpp	27;"	d	file:
WED_BUFFER_H	.\WEDCore\WED_Buffer.h	25;"	d
WED_BezierPolygonForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^void	WED_BezierPolygonForPointSequence(IGISPointSequence * in_seq, BezierPolygon2& out_pol, int orientation)$/;"	f
WED_BezierPolygonForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^void	WED_BezierPolygonForPointSequence(IGISPointSequence * in_seq, BezierPolygon2p& out_pol, int orientation)$/;"	f
WED_BezierPolygonWithHolesForPolygon	.\WEDCore\WED_GISUtils.cpp	/^void	WED_BezierPolygonWithHolesForPolygon(IGISPolygon * in_poly, vector<BezierPolygon2>& out_pol)$/;"	f
WED_BezierPolygonWithHolesForPolygon	.\WEDCore\WED_GISUtils.cpp	/^void	WED_BezierPolygonWithHolesForPolygon(IGISPolygon * in_poly, vector<BezierPolygon2p>& out_pol)$/;"	f
WED_BezierVectorForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^void	WED_BezierVectorForPointSequence(IGISPointSequence * in_seq, vector<Bezier2>& out_pol)$/;"	f
WED_BezierVectorForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^void	WED_BezierVectorForPointSequence(IGISPointSequence * in_seq, vector<Bezier2p>& out_pol)$/;"	f
WED_Buffer	.\WEDCore\WED_Buffer.cpp	/^WED_Buffer::WED_Buffer()$/;"	f	class:WED_Buffer
WED_Buffer	.\WEDCore\WED_Buffer.h	/^class	WED_Buffer : public IOReader, public IOWriter {$/;"	c
WED_CLIPPING_H	.\WEDCore\WED_Clipping.h	24;"	d
WED_CONNECTION_H	.\WEDNetwork\WED_Connection.h	25;"	d
WED_CREATEPOLYGONTOOL_H	.\WEDMap\WED_CreatePolygonTool.h	25;"	d
WED_CREATETOOLBASE_H	.\WEDMap\WED_CreateToolBase.h	25;"	d
WED_CalcDragAngle	.\WEDMap\WED_ToolUtils.cpp	/^double			WED_CalcDragAngle(const Point2& ctr, const Point2& handle, const Vector2& drag)$/;"	f
WED_CanClear	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanClear(IResolver * resolver)$/;"	f
WED_CanCrop	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanCrop(IResolver * resolver)$/;"	f
WED_CanDuplicate	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanDuplicate(IResolver * resolver)$/;"	f
WED_CanExportApt	.\WEDImportExport\WED_AptIE.cpp	/^int		WED_CanExportApt(IResolver * resolver)$/;"	f
WED_CanExportPack	.\WEDImportExport\WED_SceneryPackExport.cpp	/^int		WED_CanExportPack(IResolver * resolver)$/;"	f
WED_CanExportToGateway	.\WEDImportExport\WED_GatewayExport.cpp	/^int	WED_CanExportToGateway(IResolver * resolver)$/;"	f
WED_CanGroup	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanGroup(IResolver * inResolver)$/;"	f
WED_CanImportApt	.\WEDImportExport\WED_AptIE.cpp	/^int		WED_CanImportApt(IResolver * resolver)$/;"	f
WED_CanImportDSF	.\WEDImportExport\WED_DSFImport.cpp	/^int		WED_CanImportDSF(IResolver * resolver)$/;"	f
WED_CanImportFromGateway	.\WEDImportExport\WED_GatewayImport.cpp	/^int	WED_CanImportFromGateway(IResolver * resolver)$/;"	f
WED_CanMakeNewATCFlow	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMakeNewATCFlow(IResolver * inResolver)$/;"	f
WED_CanMakeNewATCFreq	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMakeNewATCFreq(IResolver * inResolver)$/;"	f
WED_CanMakeNewATCRunwayUse	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMakeNewATCRunwayUse(IResolver * inResolver)$/;"	f
WED_CanMakeNewATCTimeRule	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMakeNewATCTimeRule(IResolver * inResolver)$/;"	f
WED_CanMakeNewATCWindRule	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMakeNewATCWindRule(IResolver * inResolver)$/;"	f
WED_CanMakeNewAirport	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMakeNewAirport(IResolver * inResolver)$/;"	f
WED_CanMerge	.\WEDWindows\WED_GroupCommands.cpp	/^int	WED_CanMerge(IResolver * resolver)$/;"	f
WED_CanMoveSelectionTo	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanMoveSelectionTo(IResolver * resolver, WED_Thing * dest, int dest_slot)$/;"	f
WED_CanReorder	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanReorder(IResolver * resolver, int direction, int to_end)$/;"	f
WED_CanReverse	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanReverse(IResolver * resolver)$/;"	f
WED_CanRotate	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanRotate(IResolver * resolver)$/;"	f
WED_CanSelectAll	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSelectAll(IResolver * resolver)$/;"	f
WED_CanSelectChildren	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSelectChildren(IResolver * resolver)$/;"	f
WED_CanSelectNone	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSelectNone(IResolver * resolver)$/;"	f
WED_CanSelectParent	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSelectParent(IResolver * resolver)$/;"	f
WED_CanSelectPolygon	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSelectPolygon(IResolver * resolver)$/;"	f
WED_CanSelectVertices	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSelectVertices(IResolver * resolver)$/;"	f
WED_CanSetCurrentAirport	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSetCurrentAirport(IResolver * inResolver, string& io_cmd_name)$/;"	f
WED_CanSplit	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanSplit(IResolver * resolver)$/;"	f
WED_CanUngroup	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_CanUngroup(IResolver * inResolver)$/;"	f
WED_Color	.\WEDMap\WED_Colors.h	/^enum WED_Color {$/;"	g
WED_Color_RGBA	.\WEDMap\WED_Colors.cpp	/^float *		WED_Color_RGBA(WED_Color c)$/;"	f
WED_Color_RGBA_Alpha	.\WEDMap\WED_Colors.cpp	/^float *		WED_Color_RGBA_Alpha(WED_Color c, float alpha, float storage[4])$/;"	f
WED_Color_Surface	.\WEDMap\WED_Colors.cpp	/^float *		WED_Color_Surface	(int surface, float alpha, float storage[4])$/;"	f
WED_Colors_H	.\WEDMap\WED_Colors.h	25;"	d
WED_Connection	.\WEDNetwork\WED_Connection.cpp	/^WED_Connection::WED_Connection(PCSBSocket* inSocket) :$/;"	f	class:WED_Connection
WED_Connection	.\WEDNetwork\WED_Connection.h	/^class	WED_Connection {$/;"	c
WED_CreateBoxTool	.\WEDMap\WED_CreateBoxTool.cpp	/^WED_CreateBoxTool::WED_CreateBoxTool($/;"	f	class:WED_CreateBoxTool
WED_CreateBoxTool	.\WEDMap\WED_CreateBoxTool.h	/^class WED_CreateBoxTool : public WED_CreateToolBase {$/;"	c
WED_CreateBoxTool_H	.\WEDMap\WED_CreateBoxTool.h	25;"	d
WED_CreateEdgeTool	.\WEDMap\WED_CreateEdgeTool.cpp	/^WED_CreateEdgeTool::WED_CreateEdgeTool($/;"	f	class:WED_CreateEdgeTool
WED_CreateEdgeTool	.\WEDMap\WED_CreateEdgeTool.h	/^class WED_CreateEdgeTool : public WED_CreateToolBase {$/;"	c
WED_CreateEdgeTool_H	.\WEDMap\WED_CreateEdgeTool.h	25;"	d
WED_CreateLineTool	.\WEDMap\WED_CreateLineTool.cpp	/^WED_CreateLineTool::WED_CreateLineTool($/;"	f	class:WED_CreateLineTool
WED_CreateLineTool	.\WEDMap\WED_CreateLineTool.h	/^class WED_CreateLineTool : public WED_CreateToolBase {$/;"	c
WED_CreateLineTool_H	.\WEDMap\WED_CreateLineTool.h	25;"	d
WED_CreatePointTool	.\WEDMap\WED_CreatePointTool.cpp	/^WED_CreatePointTool::WED_CreatePointTool($/;"	f	class:WED_CreatePointTool
WED_CreatePointTool	.\WEDMap\WED_CreatePointTool.h	/^class WED_CreatePointTool : public WED_CreateToolBase {$/;"	c
WED_CreatePointTool_H	.\WEDMap\WED_CreatePointTool.h	25;"	d
WED_CreatePolygonTool	.\WEDMap\WED_CreatePolygonTool.cpp	/^WED_CreatePolygonTool::WED_CreatePolygonTool($/;"	f	class:WED_CreatePolygonTool
WED_CreatePolygonTool	.\WEDMap\WED_CreatePolygonTool.h	/^class	WED_CreatePolygonTool : public WED_CreateToolBase {$/;"	c
WED_CreateToolBase	.\WEDMap\WED_CreateToolBase.cpp	/^WED_CreateToolBase::WED_CreateToolBase($/;"	f	class:WED_CreateToolBase
WED_CreateToolBase	.\WEDMap\WED_CreateToolBase.h	/^class	WED_CreateToolBase : public WED_HandleToolBase, public virtual IControlHandles {$/;"	c
WED_DDS	.\Utils\BitmapUtils.h	/^	WED_DDS,			\/\/X								X				X$/;"	e	enum:SupportedTypes
WED_DOCUMENTWINDOW_H	.\WEDWindows\WED_DocumentWindow.h	25;"	d
WED_DOCUMENT_H	.\WEDCore\WED_Document.h	25;"	d
WED_DSFExport_H	.\WEDImportExport\WED_DSFExport.h	25;"	d
WED_DSFImport_H	.\WEDImportExport\WED_DSFImport.h	25;"	d
WED_DebugLayer	.\WEDMap\WED_DebugLayer.cpp	/^WED_DebugLayer::WED_DebugLayer(GUI_Pane * host, WED_MapZoomerNew * zoomer, IResolver * resolver) : $/;"	f	class:WED_DebugLayer
WED_DebugLayer	.\WEDMap\WED_DebugLayer.h	/^class WED_DebugLayer : public WED_MapLayer {$/;"	c
WED_DebugLayer_H	.\WEDMap\WED_DebugLayer.h	25;"	d
WED_DoClear	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoClear(IResolver * resolver)$/;"	f
WED_DoCrop	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoCrop(IResolver * resolver)$/;"	f
WED_DoDragSelection	.\WEDMap\WED_ToolUtils.cpp	/^GUI_DragOperation	WED_DoDragSelection($/;"	f
WED_DoDuplicate	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoDuplicate(IResolver * resolver, bool wrap_in_cmd)$/;"	f
WED_DoExportApt	.\WEDImportExport\WED_AptIE.cpp	/^void	WED_DoExportApt(IResolver * resolver)$/;"	f
WED_DoExportPack	.\WEDImportExport\WED_SceneryPackExport.cpp	/^void	WED_DoExportPack(IResolver * resolver)$/;"	f
WED_DoExportToGateway	.\WEDImportExport\WED_GatewayExport.cpp	/^void	WED_DoExportToGateway(IResolver * resolver)$/;"	f
WED_DoGroup	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoGroup(IResolver * inResolver)$/;"	f
WED_DoImportApt	.\WEDImportExport\WED_AptIE.cpp	/^void	WED_DoImportApt(WED_Document * resolver, WED_Archive * archive, WED_MapPane * pane)$/;"	f
WED_DoImportDSF	.\WEDImportExport\WED_DSFImport.cpp	/^void	WED_DoImportDSF(IResolver * resolver)$/;"	f
WED_DoImportDSFText	.\WEDImportExport\WED_DSFImport.cpp	/^void	WED_DoImportDSFText(IResolver * resolver)$/;"	f
WED_DoImportFromGateway	.\WEDImportExport\WED_GatewayImport.cpp	/^void WED_DoImportFromGateway(WED_Document * resolver, WED_MapPane * pane)$/;"	f
WED_DoImportText	.\WEDImportExport\WED_DSFImport.cpp	/^void WED_DoImportText(const char * path, WED_Thing * base)$/;"	f
WED_DoMakeNewATCFlow	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewATCFlow(IResolver * inResolver)$/;"	f
WED_DoMakeNewATCFreq	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewATCFreq(IResolver * inResolver)$/;"	f
WED_DoMakeNewATCRunwayUse	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewATCRunwayUse(IResolver * inResolver)$/;"	f
WED_DoMakeNewATCTimeRule	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewATCTimeRule(IResolver * inResolver)$/;"	f
WED_DoMakeNewATCWindRule	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewATCWindRule(IResolver * inResolver)$/;"	f
WED_DoMakeNewAirport	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewAirport(IResolver * inResolver)$/;"	f
WED_DoMakeNewOverlay	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMakeNewOverlay(IResolver * inResolver, WED_MapZoomerNew * zoomer)$/;"	f
WED_DoMerge	.\WEDWindows\WED_GroupCommands.cpp	/^void WED_DoMerge(IResolver * resolver)$/;"	f
WED_DoMoveSelectionTo	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoMoveSelectionTo(IResolver * resolver, WED_Thing * dest, int dest_slot)$/;"	f
WED_DoReorder	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoReorder (IResolver * resolver, int direction, int to_end)$/;"	f
WED_DoReverse	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoReverse(IResolver * resolver)$/;"	f
WED_DoRotate	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoRotate(IResolver * resolver)$/;"	f
WED_DoSelectAll	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectAll(IResolver * resolver)$/;"	f
WED_DoSelectChildren	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectChildren(IResolver * resolver)$/;"	f
WED_DoSelectCrossing	.\WEDWindows\WED_GroupCommands.cpp	/^bool WED_DoSelectCrossing(IResolver * resolver, WED_Thing * sub_tree)$/;"	f
WED_DoSelectDefaultObjects	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectDefaultObjects(IResolver * resolver)$/;"	f
WED_DoSelectDoubles	.\WEDWindows\WED_GroupCommands.cpp	/^bool WED_DoSelectDoubles(IResolver * resolver, WED_Thing * sub_tree)$/;"	f
WED_DoSelectLibraryObjects	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectLibraryObjects(IResolver * resolver)$/;"	f
WED_DoSelectLocalObjects	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectLocalObjects(IResolver * resolver)$/;"	f
WED_DoSelectMissingObjects	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectMissingObjects(IResolver * resolver)$/;"	f
WED_DoSelectNone	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectNone(IResolver * resolver)$/;"	f
WED_DoSelectParent	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectParent(IResolver * resolver)$/;"	f
WED_DoSelectPolygon	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectPolygon(IResolver * resolver)$/;"	f
WED_DoSelectThirdPartyObjects	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectThirdPartyObjects(IResolver * resolver)$/;"	f
WED_DoSelectVertices	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSelectVertices(IResolver * resolver)$/;"	f
WED_DoSelectZeroLength	.\WEDWindows\WED_GroupCommands.cpp	/^bool WED_DoSelectZeroLength(IResolver * resolver, WED_Thing * sub_tree)$/;"	f
WED_DoSetCurrentAirport	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSetCurrentAirport(IResolver * inResolver)$/;"	f
WED_DoSplit	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoSplit(IResolver * resolver)$/;"	f
WED_DoUngroup	.\WEDWindows\WED_GroupCommands.cpp	/^void	WED_DoUngroup(IResolver * inResolver)$/;"	f
WED_Document	.\WEDCore\WED_Document.cpp	/^WED_Document::WED_Document($/;"	f	class:WED_Document
WED_Document	.\WEDCore\WED_Document.h	/^class	WED_Document : public GUI_Broadcaster, public GUI_Destroyable, public virtual IResolver, public virtual ILibrarian, public IDocPrefs, public WED_XMLHandler, public WED_UndoFatalErrorHandler {$/;"	c
WED_DocumentWindow	.\WEDWindows\WED_DocumentWindow.cpp	/^WED_DocumentWindow::WED_DocumentWindow($/;"	f	class:WED_DocumentWindow
WED_DocumentWindow	.\WEDWindows\WED_DocumentWindow.h	/^class	WED_DocumentWindow : public GUI_Window, public GUI_Listener {$/;"	c
WED_DrapedOrthophoto	.\WEDEntities\WED_DrapedOrthophoto.cpp	/^WED_DrapedOrthophoto::WED_DrapedOrthophoto(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_DrapedOrthophoto
WED_DrapedOrthophoto	.\WEDEntities\WED_DrapedOrthophoto.h	/^class	WED_DrapedOrthophoto : public WED_GISPolygon {$/;"	c
WED_DrapedOrthophotoBoundary	.\WEDEntities\WED_DrapedOrthophotoBoundary.cpp	/^WED_DrapedOrthophotoBoundary::WED_DrapedOrthophotoBoundary(WED_Archive * a, int i) : WED_GISPolygon(a,i)$/;"	f	class:WED_DrapedOrthophotoBoundary
WED_DrapedOrthophotoBoundary	.\WEDEntities\WED_DrapedOrthophotoBoundary.h	/^class	WED_DrapedOrthophotoBoundary : public WED_GISPolygon {$/;"	c
WED_DrapedOrthophotoBoundary_H	.\WEDEntities\WED_DrapedOrthophotoBoundary.h	25;"	d
WED_DrapedOrthophoto_H	.\WEDEntities\WED_DrapedOrthophoto.h	25;"	d
WED_DrawUtils_H	.\WEDMap\WED_DrawUtils.h	25;"	d
WED_ENTITY_H	.\WEDEntities\WED_Entity.h	25;"	d
WED_ENUMSYSTEM_H	.\WEDCore\WED_EnumSystem.h	25;"	d
WED_ERRORS_H	.\WEDCore\WED_Errors.h	25;"	d
WED_Entity	.\WEDEntities\WED_Entity.cpp	/^WED_Entity::WED_Entity(WED_Archive * parent, int id) :$/;"	f	class:WED_Entity
WED_Entity	.\WEDEntities\WED_Entity.h	/^class	WED_Entity : public WED_Thing {$/;"	c
WED_ExclusionZone	.\WEDEntities\WED_ExclusionZone.cpp	/^WED_ExclusionZone::WED_ExclusionZone(WED_Archive * a, int i) : WED_GISBoundingBox(a,i),$/;"	f	class:WED_ExclusionZone
WED_ExclusionZone	.\WEDEntities\WED_ExclusionZone.h	/^class WED_ExclusionZone : public WED_GISBoundingBox {$/;"	c
WED_ExclusionZone_H	.\WEDEntities\WED_ExclusionZone.h	25;"	d
WED_ExportPackToPath	.\WEDImportExport\WED_SceneryPackExport.cpp	/^void	WED_ExportPackToPath(WED_Thing * root, IResolver * resolver, const string& in_path, set<WED_Thing *>& problem_children)$/;"	f
WED_Export_Target	.\WEDCore\WED_Globals.h	/^enum WED_Export_Target {$/;"	g
WED_FacadeNode	.\WEDEntities\WED_FacadeNode.cpp	/^WED_FacadeNode::WED_FacadeNode(WED_Archive * a, int i) : WED_GISPoint_Bezier(a,i)$/;"	f	class:WED_FacadeNode
WED_FacadeNode	.\WEDEntities\WED_FacadeNode.h	/^class WED_FacadeNode : public WED_GISPoint_Bezier {$/;"	c
WED_FacadeNode_H	.\WEDEntities\WED_FacadeNode.h	25;"	d
WED_FacadePlacement	.\WEDEntities\WED_FacadePlacement.cpp	/^WED_FacadePlacement::WED_FacadePlacement(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_FacadePlacement
WED_FacadePlacement	.\WEDEntities\WED_FacadePlacement.h	/^class	WED_FacadePlacement : public WED_GISPolygon {$/;"	c
WED_FacadePlacement_H	.\WEDEntities\WED_FacadePlacement.h	25;"	d
WED_FacadeRing	.\WEDEntities\WED_FacadeRing.cpp	/^WED_FacadeRing::WED_FacadeRing(WED_Archive * a, int i) : WED_GISChain(a,i)$/;"	f	class:WED_FacadeRing
WED_FacadeRing	.\WEDEntities\WED_FacadeRing.h	/^class WED_FacadeRing  : public WED_GISChain {$/;"	c
WED_FacadeRing_H	.\WEDEntities\WED_FacadeRing.h	25;"	d
WED_FastBuffer	.\WEDCore\WED_FastBuffer.cpp	/^WED_FastBuffer::WED_FastBuffer(WED_Buffer * source)$/;"	f	class:WED_FastBuffer
WED_FastBuffer	.\WEDCore\WED_FastBuffer.h	/^class	WED_FastBuffer : public IOReader, public IOWriter {$/;"	c
WED_FastBufferGroup	.\WEDCore\WED_FastBuffer.cpp	/^WED_FastBufferGroup::WED_FastBufferGroup()$/;"	f	class:WED_FastBufferGroup
WED_FastBufferGroup	.\WEDCore\WED_FastBuffer.h	/^class	WED_FastBufferGroup {$/;"	c
WED_FastBuffer_H	.\WEDCore\WED_FastBuffer.h	25;"	d
WED_FilterBar	.\WEDWindows\WED_FilterBar.cpp	/^WED_FilterBar::WED_FilterBar($/;"	f	class:WED_FilterBar
WED_FilterBar	.\WEDWindows\WED_FilterBar.h	/^class	WED_FilterBar : public GUI_Table, public GUI_TextTableProvider, public GUI_SimpleTableGeometry {$/;"	c
WED_FilterBar_H	.\WEDWindows\WED_FilterBar.h	25;"	d
WED_FindParent	.\WEDMap\WED_ToolUtils.cpp	/^WED_Thing *	WED_FindParent(ISelection * isel, WED_Thing * require_this, WED_Thing * backup_choice)$/;"	f
WED_ForestPlacement	.\WEDEntities\WED_ForestPlacement.cpp	/^WED_ForestPlacement::WED_ForestPlacement(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_ForestPlacement
WED_ForestPlacement	.\WEDEntities\WED_ForestPlacement.h	/^class	WED_ForestPlacement : public WED_GISPolygon {$/;"	c
WED_ForestPlacement_H	.\WEDEntities\WED_ForestPlacement.h	25;"	d
WED_ForestRing	.\WEDEntities\WED_ForestRing.cpp	/^WED_ForestRing::WED_ForestRing(WED_Archive * a, int i) : WED_GISChain(a,i)$/;"	f	class:WED_ForestRing
WED_ForestRing	.\WEDEntities\WED_ForestRing.h	/^class WED_ForestRing  : public WED_GISChain {$/;"	c
WED_ForestRing_H	.\WEDEntities\WED_ForestRing.h	25;"	d
WED_GISBoundingBox	.\WEDEntities\WED_GISBoundingBox.cpp	/^WED_GISBoundingBox::WED_GISBoundingBox(WED_Archive * a, int id) : WED_Entity(a, id)$/;"	f	class:WED_GISBoundingBox
WED_GISBoundingBox	.\WEDEntities\WED_GISBoundingBox.h	/^class WED_GISBoundingBox : public WED_Entity, public virtual IGISBoundingBox, public virtual IGISQuad {$/;"	c
WED_GISBoundingBox_H	.\WEDEntities\WED_GISBoundingBox.h	25;"	d
WED_GISCHAIN_H	.\WEDEntities\WED_GISChain.h	25;"	d
WED_GISCOMPOSITE_H	.\WEDEntities\WED_GISComposite.h	25;"	d
WED_GISChain	.\WEDEntities\WED_GISChain.cpp	/^WED_GISChain::WED_GISChain(WED_Archive * parent, int id) :$/;"	f	class:WED_GISChain
WED_GISChain	.\WEDEntities\WED_GISChain.h	/^class	WED_GISChain : public WED_Entity, public virtual IGISPointSequence, public virtual IGISComposite {$/;"	c
WED_GISComposite	.\WEDEntities\WED_GISComposite.cpp	/^WED_GISComposite::WED_GISComposite(WED_Archive * a, int i) : WED_Entity(a,i)$/;"	f	class:WED_GISComposite
WED_GISComposite	.\WEDEntities\WED_GISComposite.h	/^class	WED_GISComposite : public WED_Entity, public virtual IGISComposite {$/;"	c
WED_GISEdge	.\WEDEntities\WED_GISEdge.cpp	/^WED_GISEdge::WED_GISEdge(WED_Archive * parent, int id) : WED_Entity(parent, id),$/;"	f	class:WED_GISEdge
WED_GISEdge	.\WEDEntities\WED_GISEdge.h	/^class WED_GISEdge : public WED_Entity, public virtual IGISEdge {$/;"	c
WED_GISEdge_H	.\WEDEntities\WED_GISEdge.h	25;"	d
WED_GISLINE_H	.\WEDEntities\WED_GISLine.h	25;"	d
WED_GISLINE_WIDTH_H	.\WEDEntities\WED_GISLine_Width.h	25;"	d
WED_GISLine	.\WEDEntities\WED_GISLine.cpp	/^WED_GISLine::WED_GISLine(WED_Archive * parent, int id) :$/;"	f	class:WED_GISLine
WED_GISLine	.\WEDEntities\WED_GISLine.h	/^class	WED_GISLine : public WED_Entity, public virtual IGISLine {$/;"	c
WED_GISLine_Width	.\WEDEntities\WED_GISLine_Width.cpp	/^WED_GISLine_Width::WED_GISLine_Width(WED_Archive * parent, int id) :$/;"	f	class:WED_GISLine_Width
WED_GISLine_Width	.\WEDEntities\WED_GISLine_Width.h	/^class	WED_GISLine_Width : public WED_GISLine, public virtual IGISLine_Width{$/;"	c
WED_GISPOINT_BEZIER_H	.\WEDEntities\WED_GISPoint_Bezier.h	25;"	d
WED_GISPOINT_H	.\WEDEntities\WED_GISPoint.h	25;"	d
WED_GISPOINT_HEADINGWIDTHLENGTH_H	.\WEDEntities\WED_GISPoint_HeadingWidthLength.h	25;"	d
WED_GISPOINT_HEADING_H	.\WEDEntities\WED_GISPoint_Heading.h	25;"	d
WED_GISPOLYGON_H	.\WEDEntities\WED_GISPolygon.h	25;"	d
WED_GISPoint	.\WEDEntities\WED_GISPoint.cpp	/^WED_GISPoint::WED_GISPoint(WED_Archive * parent, int id) :$/;"	f	class:WED_GISPoint
WED_GISPoint	.\WEDEntities\WED_GISPoint.h	/^class	WED_GISPoint : public WED_Entity, public virtual IGISPoint {$/;"	c
WED_GISPoint_Bezier	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^WED_GISPoint_Bezier::WED_GISPoint_Bezier(WED_Archive * parent, int id) :$/;"	f	class:WED_GISPoint_Bezier
WED_GISPoint_Bezier	.\WEDEntities\WED_GISPoint_Bezier.h	/^class	WED_GISPoint_Bezier : public WED_GISPoint, public virtual IGISPoint_Bezier {$/;"	c
WED_GISPoint_Heading	.\WEDEntities\WED_GISPoint_Heading.cpp	/^WED_GISPoint_Heading::WED_GISPoint_Heading(WED_Archive * parent, int id) :$/;"	f	class:WED_GISPoint_Heading
WED_GISPoint_Heading	.\WEDEntities\WED_GISPoint_Heading.h	/^class	WED_GISPoint_Heading : public WED_GISPoint, public virtual IGISPoint_Heading {$/;"	c
WED_GISPoint_HeadingWidthLength	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^WED_GISPoint_HeadingWidthLength::WED_GISPoint_HeadingWidthLength(WED_Archive * parent, int id) :$/;"	f	class:WED_GISPoint_HeadingWidthLength
WED_GISPoint_HeadingWidthLength	.\WEDEntities\WED_GISPoint_HeadingWidthLength.h	/^class	WED_GISPoint_HeadingWidthLength : public WED_GISPoint_Heading, public virtual IGISPoint_WidthLength {$/;"	c
WED_GISPolygon	.\WEDEntities\WED_GISPolygon.cpp	/^WED_GISPolygon::WED_GISPolygon(WED_Archive * archive, int id) :$/;"	f	class:WED_GISPolygon
WED_GISPolygon	.\WEDEntities\WED_GISPolygon.h	/^class	WED_GISPolygon : public WED_Entity, public virtual IGISPolygon, public virtual IGISComposite {$/;"	c
WED_GISUTILS_H	.\WEDCore\WED_GISUtils.h	11;"	d
WED_GLOBALS_H	.\WEDCore\WED_Globals.h	24;"	d
WED_GROUP_H	.\WEDEntities\WED_Group.h	25;"	d
WED_GatewayExportDialog	.\WEDImportExport\WED_GatewayExport.cpp	/^WED_GatewayExportDialog::WED_GatewayExportDialog(WED_Airport * apt, IResolver * resolver) : $/;"	f	class:WED_GatewayExportDialog
WED_GatewayExportDialog	.\WEDImportExport\WED_GatewayExport.cpp	/^class	WED_GatewayExportDialog : public GUI_FormWindow, public GUI_Timer {$/;"	c	file:
WED_GatewayExport_H	.\WEDImportExport\WED_GatewayExport.h	25;"	d
WED_GatewayImportDialog	.\WEDImportExport\WED_GatewayImport.cpp	/^WED_GatewayImportDialog::WED_GatewayImportDialog(WED_Document * resolver, WED_MapPane * pane, GUI_Commander * cmdr) :$/;"	f	class:WED_GatewayImportDialog
WED_GatewayImportDialog	.\WEDImportExport\WED_GatewayImport.cpp	/^class WED_GatewayImportDialog : public GUI_Window, public GUI_Listener, public GUI_Timer, public GUI_Destroyable$/;"	c	file:
WED_GatewayImport_H	.\WEDImportExport\WED_GatewayImport.h	25;"	d
WED_GetAllRunwaysOneway	.\WEDMap\WED_ToolUtils.cpp	/^void			WED_GetAllRunwaysOneway(const WED_Airport * airport, set<int>& runways)$/;"	f
WED_GetAllRunwaysTwoway	.\WEDMap\WED_ToolUtils.cpp	/^void			WED_GetAllRunwaysTwoway(const WED_Airport * airport, set<int>& runways)$/;"	f
WED_GetCreateHost	.\WEDMap\WED_ToolUtils.cpp	/^WED_Thing * WED_GetCreateHost(IResolver * resolver, bool require_airport, int& idx)$/;"	f
WED_GetCurrentAirport	.\WEDMap\WED_ToolUtils.cpp	/^WED_Airport *		WED_GetCurrentAirport(IResolver * resolver)$/;"	f
WED_GetLibrarian	.\WEDMap\WED_ToolUtils.cpp	/^ILibrarian *	WED_GetLibrarian(IResolver * resolver)$/;"	f
WED_GetLibraryMgr	.\WEDMap\WED_ToolUtils.cpp	/^WED_LibraryMgr*WED_GetLibraryMgr(IResolver * resolver)$/;"	f
WED_GetParentAirport	.\WEDMap\WED_ToolUtils.cpp	/^const WED_Airport * WED_GetParentAirport(const WED_Thing * who)$/;"	f
WED_GetParentForClass	.\WEDMap\WED_ToolUtils.cpp	/^const char *	WED_GetParentForClass(const char * in_class)$/;"	f
WED_GetResourceMgr	.\WEDMap\WED_ToolUtils.cpp	/^WED_ResourceMgr*WED_GetResourceMgr(IResolver * resolver)$/;"	f
WED_GetSelect	.\WEDMap\WED_ToolUtils.cpp	/^ISelection *	WED_GetSelect(IResolver * resolver)$/;"	f
WED_GetSelectionInOrder	.\WEDMap\WED_ToolUtils.cpp	/^void	WED_GetSelectionInOrder(IResolver * resolver, vector<WED_Thing *>& out_sel)$/;"	f
WED_GetSelectionInOrderRecursive	.\WEDMap\WED_ToolUtils.cpp	/^static void	WED_GetSelectionInOrderRecursive(ISelection * sel, WED_Thing * who, vector<WED_Thing *>& out_sel)$/;"	f	file:
WED_GetSelectionRecursive	.\WEDMap\WED_ToolUtils.cpp	/^void			WED_GetSelectionRecursive(IResolver * resolver, set<WED_Thing *>& out_sel)$/;"	f
WED_GetSelectionRecursiveOne	.\WEDMap\WED_ToolUtils.cpp	/^static int			WED_GetSelectionRecursiveOne(ISelectable * what, void * container)$/;"	f	file:
WED_GetTexMgr	.\WEDMap\WED_ToolUtils.cpp	/^ITexMgr *		WED_GetTexMgr(IResolver * resolver)$/;"	f
WED_GetWorld	.\WEDMap\WED_ToolUtils.cpp	/^WED_Thing *	WED_GetWorld(IResolver * resolver)$/;"	f
WED_Group	.\WEDEntities\WED_Group.cpp	/^WED_Group::WED_Group(WED_Archive * a, int i) : WED_GISComposite(a,i)$/;"	f	class:WED_Group
WED_Group	.\WEDEntities\WED_Group.h	/^class	WED_Group : public WED_GISComposite {$/;"	c
WED_GroupCommands_H	.\WEDWindows\WED_GroupCommands.h	25;"	d
WED_HANDLETOOLBASE_H	.\WEDMap\WED_HandleToolBase.h	25;"	d
WED_HELIPAD_H	.\WEDEntities\WED_Helipad.h	25;"	d
WED_HandleToolBase	.\WEDMap\WED_HandleToolBase.cpp	/^WED_HandleToolBase::WED_HandleToolBase($/;"	f	class:WED_HandleToolBase
WED_HandleToolBase	.\WEDMap\WED_HandleToolBase.h	/^class	WED_HandleToolBase : public WED_MapToolNew, GUI_Commander_Notifiable {$/;"	c
WED_HasBezierPol	.\WEDCore\WED_GISUtils.cpp	/^int WED_HasBezierPol(IGISPolygon * pol)$/;"	f
WED_HasBezierSeq	.\WEDCore\WED_GISUtils.cpp	/^int WED_HasBezierSeq(IGISPointSequence * ring)$/;"	f
WED_HasSingleSelectionOfType	.\WEDMap\WED_ToolUtils.cpp	/^WED_Thing *		WED_HasSingleSelectionOfType(IResolver * resolver, const char * in_class)$/;"	f
WED_Helipad	.\WEDEntities\WED_Helipad.cpp	/^WED_Helipad::WED_Helipad(WED_Archive * a, int i) : WED_GISPoint_HeadingWidthLength(a,i),$/;"	f	class:WED_Helipad
WED_Helipad	.\WEDEntities\WED_Helipad.h	/^class	WED_Helipad : public WED_GISPoint_HeadingWidthLength {$/;"	c
WED_ICAOTable	.\WEDImportExport\WED_ICAOTable.cpp	/^WED_ICAOTable::WED_ICAOTable($/;"	f	class:WED_ICAOTable
WED_ICAOTable	.\WEDImportExport\WED_ICAOTable.h	/^class	WED_ICAOTable :	public GUI_TextTableProvider, $/;"	c
WED_ICAOTable_H	.\WEDImportExport\WED_ICAOTable.h	25;"	d
WED_ImportOneAptFile	.\WEDImportExport\WED_AptIE.cpp	/^void	WED_ImportOneAptFile($/;"	f
WED_IsDragSelection	.\WEDMap\WED_ToolUtils.cpp	/^bool				WED_IsDragSelection($/;"	f
WED_IsFolder	.\WEDMap\WED_ToolUtils.cpp	/^bool WED_IsFolder(WED_Thing * what)$/;"	f
WED_IsIconic	.\WEDMap\WED_ToolUtils.cpp	/^bool			WED_IsIconic(IGISEntity * what)$/;"	f
WED_IsSelectionNested	.\WEDMap\WED_ToolUtils.cpp	/^bool			WED_IsSelectionNested(IResolver * resolver)$/;"	f
WED_JP2K	.\Utils\BitmapUtils.h	/^	WED_JP2K,			\/\/X												X$/;"	e	enum:SupportedTypes
WED_JPEG	.\Utils\BitmapUtils.h	/^	WED_JPEG,			\/\/FromJPEG,FromJPEGData$/;"	e	enum:SupportedTypes
WED_KEYOBJECTS_H	.\WEDEntities\WED_KeyObjects.h	25;"	d
WED_KeyObjects	.\WEDEntities\WED_KeyObjects.cpp	/^WED_KeyObjects::WED_KeyObjects(WED_Archive * a, int id) : WED_Thing(a,id)$/;"	f	class:WED_KeyObjects
WED_KeyObjects	.\WEDEntities\WED_KeyObjects.h	/^class	WED_KeyObjects : public WED_Thing, public virtual IDirectoryEdit {$/;"	c
WED_LAST_MSG	.\WEDCore\WED_Messages.h	/^	,WED_LAST_MSG,$/;"	e	enum:__anon113
WED_LIGHTFIXTURE_H	.\WEDEntities\WED_LightFixture.h	25;"	d
WED_LibraryListAdapter	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^WED_LibraryListAdapter::WED_LibraryListAdapter(WED_LibraryMgr * who) :$/;"	f	class:WED_LibraryListAdapter
WED_LibraryListAdapter	.\WEDLibrary\WED_LibraryListAdapter.h	/^class WED_LibraryListAdapter : public GUI_TextTableProvider, public GUI_SimpleTableGeometry, public GUI_TextTableHeaderProvider, public GUI_Broadcaster, public GUI_Listener {$/;"	c
WED_LibraryListAdapter_H	.\WEDLibrary\WED_LibraryListAdapter.h	25;"	d
WED_LibraryMgr	.\WEDCore\WED_LibraryMgr.cpp	/^WED_LibraryMgr::WED_LibraryMgr(const string& ilocal_package) : local_package(ilocal_package)$/;"	f	class:WED_LibraryMgr
WED_LibraryMgr	.\WEDCore\WED_LibraryMgr.h	/^class WED_LibraryMgr : public GUI_Broadcaster, public GUI_Listener, public virtual IBase {$/;"	c
WED_LibraryMgr_H	.\WEDCore\WED_LibraryMgr.h	25;"	d
WED_LibraryPane	.\WEDLibrary\WED_LibraryPane.cpp	/^WED_LibraryPane::WED_LibraryPane(GUI_Commander * commander, WED_LibraryMgr * mgr) :$/;"	f	class:WED_LibraryPane
WED_LibraryPane	.\WEDLibrary\WED_LibraryPane.h	/^class WED_LibraryPane : public GUI_Packer, public GUI_Commander, public GUI_Listener {$/;"	c
WED_LibraryPane_H	.\WEDLibrary\WED_LibraryPane.h	25;"	d
WED_LibraryPreviewPane	.\WEDLibrary\WED_LibraryPreviewPane.cpp	/^WED_LibraryPreviewPane::WED_LibraryPreviewPane(WED_ResourceMgr * res_mgr, ITexMgr * tex_mgr) : mResMgr(res_mgr), mTexMgr(tex_mgr),mZoom(1.0),mPsi(0.0f),mThe(0.0f)$/;"	f	class:WED_LibraryPreviewPane
WED_LibraryPreviewPane	.\WEDLibrary\WED_LibraryPreviewPane.h	/^class WED_LibraryPreviewPane : public GUI_Pane {$/;"	c
WED_LibraryPreviewPane_H	.\WEDLibrary\WED_LibraryPreviewPane.h	25;"	d
WED_LightFixture	.\WEDEntities\WED_LightFixture.cpp	/^WED_LightFixture::WED_LightFixture(WED_Archive * a, int i) : WED_GISPoint_Heading(a, i),$/;"	f	class:WED_LightFixture
WED_LightFixture	.\WEDEntities\WED_LightFixture.h	/^class WED_LightFixture : public WED_GISPoint_Heading {$/;"	c
WED_LinePlacement	.\WEDEntities\WED_LinePlacement.cpp	/^WED_LinePlacement::WED_LinePlacement(WED_Archive * a, int i) : WED_GISChain(a,i),$/;"	f	class:WED_LinePlacement
WED_LinePlacement	.\WEDEntities\WED_LinePlacement.h	/^class WED_LinePlacement : public WED_GISChain {$/;"	c
WED_LinePlacement_H	.\WEDEntities\WED_LinePlacement.h	25;"	d
WED_LookupRunwayRecursive	.\WEDMap\WED_ToolUtils.cpp	/^static void WED_LookupRunwayRecursive(const WED_Thing * thing, set<int>& runways, int domain)$/;"	f	file:
WED_MAPBKGND_H	.\WEDMap\WED_MapBkgnd.h	25;"	d
WED_MAPLAYER_H	.\WEDMap\WED_MapLayer.h	25;"	d
WED_MAPPANE_H	.\WEDMap\WED_MapPane.h	25;"	d
WED_MAPTOOLNEW_H	.\WEDMap\WED_MapToolNew.h	25;"	d
WED_MAPZOOMERNEW_H	.\WEDMap\WED_MapZoomerNew.h	24;"	d
WED_MAP_H	.\WEDMap\WED_Map.h	25;"	d
WED_MARQUEETOOL_H	.\WEDMap\WED_MarqueeTool.h	25;"	d
WED_MENUS_H	.\WEDWindows\WED_Menus.h	25;"	d
WED_MESSAGES_H	.\WEDCore\WED_Messages.h	25;"	d
WED_MakeMenus	.\WEDWindows\WED_Menus.cpp	/^void WED_MakeMenus(GUI_Application * inApp)$/;"	f
WED_MakeOrthos	.\WEDCore\WED_Orthophoto.cpp	/^void	WED_MakeOrthos(IResolver * in_Resolver, WED_MapZoomerNew * zoomer)$/;"	f
WED_MakeRouting	.\WEDCore\WED_Routing.cpp	/^void WED_MakeRouting(IResolver * in_resolver)$/;"	f
WED_MakeUVMap	.\WEDCore\WED_GISUtils.cpp	/^bool	WED_MakeUVMap($/;"	f
WED_MakeUVMap	.\WEDCore\WED_GISUtils.cpp	/^static void	WED_MakeUVMap(const vector<vector<uv_vert> >& poly, UVMap_t& uvmap)$/;"	f	file:
WED_Map	.\WEDMap\WED_Map.cpp	/^WED_Map::WED_Map(IResolver * in_resolver) :$/;"	f	class:WED_Map
WED_Map	.\WEDMap\WED_Map.h	/^class	WED_Map : public GUI_Pane, public WED_MapZoomerNew, public GUI_Listener {$/;"	c
WED_MapBkgnd	.\WEDMap\WED_MapBkgnd.cpp	/^WED_MapBkgnd::WED_MapBkgnd(GUI_Pane * h, WED_MapZoomerNew * zoomer, IResolver * i) : WED_MapLayer(h, zoomer, i)$/;"	f	class:WED_MapBkgnd
WED_MapBkgnd	.\WEDMap\WED_MapBkgnd.h	/^class	WED_MapBkgnd : public WED_MapLayer {$/;"	c
WED_MapLayer	.\WEDMap\WED_MapLayer.cpp	/^WED_MapLayer::WED_MapLayer(GUI_Pane * h, WED_MapZoomerNew * z, IResolver * i) : mZoomer(z), mResolver(i), mHost(h)$/;"	f	class:WED_MapLayer
WED_MapLayer	.\WEDMap\WED_MapLayer.h	/^class	WED_MapLayer {$/;"	c
WED_MapPane	.\WEDMap\WED_MapPane.cpp	/^WED_MapPane::WED_MapPane(GUI_Commander * cmdr, double map_bounds[4], IResolver * resolver, WED_Archive * archive, WED_LibraryListAdapter * library) : mResolver(resolver)$/;"	f	class:WED_MapPane
WED_MapPane	.\WEDMap\WED_MapPane.h	/^class	WED_MapPane : public GUI_Packer, GUI_Listener {$/;"	c
WED_MapPoint	.\WEDCore\WED_GISUtils.cpp	/^void WED_MapPoint(const UVMap_t&	in_map, const Point2& ll, Point2& uv)$/;"	f
WED_MapPolygon	.\WEDCore\WED_GISUtils.cpp	/^void	WED_MapPolygon(const UVMap_t&	in_map, const Polygon2& ll, Polygon2& uv)$/;"	f
WED_MapPolygonWithHoles	.\WEDCore\WED_GISUtils.cpp	/^void	WED_MapPolygonWithHoles(const UVMap_t&	in_map, const vector<Polygon2>& ll, vector<Polygon2>& uv)$/;"	f
WED_MapToolNew	.\WEDMap\WED_MapToolNew.cpp	/^WED_MapToolNew::WED_MapToolNew(const char * tname, GUI_Pane * h, WED_MapZoomerNew * z, IResolver * i) : WED_MapLayer(h, z, i), tool_name(tname)$/;"	f	class:WED_MapToolNew
WED_MapToolNew	.\WEDMap\WED_MapToolNew.h	/^class	WED_MapToolNew : public WED_MapLayer, public WED_PropertyHelper {$/;"	c
WED_MapZoomerNew	.\WEDMap\WED_MapZoomerNew.cpp	/^WED_MapZoomerNew::WED_MapZoomerNew()$/;"	f	class:WED_MapZoomerNew
WED_MapZoomerNew	.\WEDMap\WED_MapZoomerNew.h	/^class	WED_MapZoomerNew : public GUI_ScrollerPaneContent {$/;"	c
WED_MarqueeTool	.\WEDMap\WED_MarqueeTool.cpp	/^WED_MarqueeTool::WED_MarqueeTool($/;"	f	class:WED_MarqueeTool
WED_MarqueeTool	.\WEDMap\WED_MarqueeTool.h	/^class	WED_MarqueeTool : public WED_HandleToolBase, public virtual IControlHandles {$/;"	c
WED_MergePoints	.\WEDCore\WED_GISUtils.cpp	/^bool	WED_MergePoints(const vector<IGISEntity *>& in_points)$/;"	f
WED_NWCamera_t	.\WEDNetwork\WED_NWLinkAdapter.h	/^    WED_NWCamera_t():$/;"	f	struct:WED_NWCamera_t
WED_NWCamera_t	.\WEDNetwork\WED_NWLinkAdapter.h	/^struct WED_NWCamera_t$/;"	s
WED_NWDEFS_H_INCLUDED	.\WEDNetwork\WED_NWDefs.h	25;"	d
WED_NWINFOLAYER_H	.\WEDNetwork\WED_NWInfoLayer.h	25;"	d
WED_NWInfoLayer	.\WEDNetwork\WED_NWInfoLayer.cpp	/^WED_NWInfoLayer::WED_NWInfoLayer(GUI_Pane * h, WED_MapZoomerNew * zoomer, IResolver * resolver,WED_NWLinkAdapter * nwlink) :$/;"	f	class:WED_NWInfoLayer
WED_NWInfoLayer	.\WEDNetwork\WED_NWInfoLayer.h	/^class	WED_NWInfoLayer : public GUI_Listener, public WED_MapLayer {$/;"	c
WED_NWLINKADAPTER_H	.\WEDNetwork\WED_NWLinkAdapter.h	25;"	d
WED_NWLinkAdapter	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^WED_NWLinkAdapter::WED_NWLinkAdapter(WED_Server * inServer,WED_Archive * inArchive) :$/;"	f	class:WED_NWLinkAdapter
WED_NWLinkAdapter	.\WEDNetwork\WED_NWLinkAdapter.h	/^class	WED_NWLinkAdapter :public GUI_Broadcaster,public GUI_Listener,public GUI_Timer  {$/;"	c
WED_NWP_ADD	.\WEDNetwork\WED_NWDefs.h	100;"	d
WED_NWP_CAM	.\WEDNetwork\WED_NWDefs.h	86;"	d
WED_NWP_CHG	.\WEDNetwork\WED_NWDefs.h	106;"	d
WED_NWP_CMD	.\WEDNetwork\WED_NWDefs.h	60;"	d
WED_NWP_CON	.\WEDNetwork\WED_NWDefs.h	43;"	d
WED_NWP_DEL	.\WEDNetwork\WED_NWDefs.h	112;"	d
WED_NWP_GET	.\WEDNetwork\WED_NWDefs.h	114;"	d
WED_NWP_MSG	.\WEDNetwork\WED_NWDefs.h	74;"	d
WED_NWP_SEL	.\WEDNetwork\WED_NWDefs.h	127;"	d
WED_NoLongerViable	.\WEDWindows\WED_GroupCommands.cpp	/^static bool WED_NoLongerViable(WED_Thing * t, bool strict)$/;"	f	file:
WED_OBJPLACEMENT_H	.\WEDEntities\WED_ObjPlacement.h	25;"	d
WED_ObjPlacement	.\WEDEntities\WED_ObjPlacement.cpp	/^WED_ObjPlacement::WED_ObjPlacement(WED_Archive * a, int i) : $/;"	f	class:WED_ObjPlacement
WED_ObjPlacement	.\WEDEntities\WED_ObjPlacement.h	/^class	WED_ObjPlacement : public WED_GISPoint_Heading {$/;"	c
WED_Orthophoto_h	.\WEDCore\WED_Orthophoto.h	11;"	d
WED_OverlayImage	.\WEDEntities\WED_OverlayImage.cpp	/^WED_OverlayImage::WED_OverlayImage(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_OverlayImage
WED_OverlayImage	.\WEDEntities\WED_OverlayImage.h	/^class WED_OverlayImage : public WED_GISPolygon, public virtual IGISQuad {$/;"	c
WED_OverlayImage_H	.\WEDEntities\WED_OverlayImage.h	25;"	d
WED_PACKAGESTATUSPANE_H	.\WEDWindows\WED_PackageStatusPane.h	25;"	d
WED_PACKAGEWINDOW_H	.\WEDWindows\WED_PackageWindow.h	25;"	d
WED_PACKAGE_H	.\WEDCore\WED_Package.h	25;"	d
WED_PERSISTENT	.\WEDCore\WED_Persistent.h	25;"	d
WED_PNG	.\Utils\BitmapUtils.h	/^	WED_PNG,			\/\/X								X				X$/;"	e	enum:SupportedTypes
WED_PRIVATE_MSG_BASE	.\WEDCore\WED_Messages.h	/^	WED_PRIVATE_MSG_BASE = WED_LAST_MSG + 1000$/;"	e	enum:__anon113
WED_PROPERTIES_H	.\WEDCore\WED_Properties.h	25;"	d
WED_PROPERTYHELPER_H	.\WEDCore\WED_PropertyHelper.h	25;"	d
WED_PROPERTYPANE_H	.\WEDProperties\WED_PropertyPane.h	25;"	d
WED_PROPERTYTABLE_H	.\WEDProperties\WED_PropertyTable.h	25;"	d
WED_Package	.\WEDCore\WED_Package.cpp	/^WED_Package::WED_Package(const char * inPath, bool inCreate)$/;"	f	class:WED_Package
WED_Package	.\WEDCore\WED_Package.h	/^class	WED_Package : public GUI_Broadcaster, public GUI_Listener{$/;"	c
WED_PackageListAdapter	.\WEDWindows\WED_PackageListAdapter.cpp	/^WED_PackageListAdapter::WED_PackageListAdapter(GUI_Commander * cmd_target) : mSel(-1), mCmdTarget(cmd_target)$/;"	f	class:WED_PackageListAdapter
WED_PackageListAdapter	.\WEDWindows\WED_PackageListAdapter.h	/^class WED_PackageListAdapter : public GUI_TextTableProvider, public GUI_TableGeometry, public GUI_Broadcaster, public GUI_Listener {$/;"	c
WED_PackageListAdapter_H	.\WEDWindows\WED_PackageListAdapter.h	25;"	d
WED_PackageMgr	.\WEDCore\WED_PackageMgr.cpp	/^WED_PackageMgr::WED_PackageMgr(const char *		in_xplane_folder)$/;"	f	class:WED_PackageMgr
WED_PackageMgr	.\WEDCore\WED_PackageMgr.h	/^class WED_PackageMgr : public GUI_Broadcaster {$/;"	c
WED_PackageMgr_H	.\WEDCore\WED_PackageMgr.h	25;"	d
WED_PackageStatusPane	.\WEDWindows\WED_PackageStatusPane.cpp	/^WED_PackageStatusPane::WED_PackageStatusPane(WED_Package * inPackage,GUI_Commander * doc_super) :$/;"	f	class:WED_PackageStatusPane
WED_PackageStatusPane	.\WEDWindows\WED_PackageStatusPane.h	/^class	WED_PackageStatusPane : public GUI_Pane {$/;"	c
WED_PackageWindow	.\WEDWindows\WED_PackageWindow.cpp	/^WED_PackageWindow::WED_PackageWindow($/;"	f	class:WED_PackageWindow
WED_PackageWindow	.\WEDWindows\WED_PackageWindow.h	/^class	WED_PackageWindow : public GUI_Window, public GUI_Listener {$/;"	c
WED_Persistent	.\WEDCore\WED_Persistent.cpp	/^WED_Persistent::WED_Persistent(WED_Archive * parent)$/;"	f	class:WED_Persistent
WED_Persistent	.\WEDCore\WED_Persistent.cpp	/^WED_Persistent::WED_Persistent(WED_Archive * parent, int id) :$/;"	f	class:WED_Persistent
WED_Persistent	.\WEDCore\WED_Persistent.h	/^class	WED_Persistent : public virtual ISelectable {$/;"	c
WED_PolygonForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^bool WED_PolygonForPointSequence(IGISPointSequence * ps, Polygon2& p, int wanted_orientation)$/;"	f
WED_PolygonForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^bool WED_PolygonForPointSequence(IGISPointSequence * ps, Polygon2p& p, int wanted_orientation)$/;"	f
WED_PolygonPlacement	.\WEDEntities\WED_PolygonPlacement.cpp	/^WED_PolygonPlacement::WED_PolygonPlacement(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_PolygonPlacement
WED_PolygonPlacement	.\WEDEntities\WED_PolygonPlacement.h	/^class	WED_PolygonPlacement : public WED_GISPolygon {$/;"	c
WED_PolygonPlacement_H	.\WEDEntities\WED_PolygonPlacement.h	25;"	d
WED_PolygonWithHolesForPolygon	.\WEDCore\WED_GISUtils.cpp	/^bool	WED_PolygonWithHolesForPolygon(IGISPolygon * in_poly, vector<Polygon2>& out_pol)$/;"	f
WED_PolygonWithHolesForPolygon	.\WEDCore\WED_GISUtils.cpp	/^bool	WED_PolygonWithHolesForPolygon(IGISPolygon * in_poly, vector<Polygon2p>& out_pol)$/;"	f
WED_PreviewItem	.\WEDMap\WED_PreviewLayer.h	/^	WED_PreviewItem(int l) : layer(l) { }$/;"	f	struct:WED_PreviewItem
WED_PreviewItem	.\WEDMap\WED_PreviewLayer.h	/^struct	WED_PreviewItem {$/;"	s
WED_PreviewLayer	.\WEDMap\WED_PreviewLayer.cpp	/^WED_PreviewLayer::WED_PreviewLayer(GUI_Pane * host, WED_MapZoomerNew * zoomer, IResolver * resolver) : $/;"	f	class:WED_PreviewLayer
WED_PreviewLayer	.\WEDMap\WED_PreviewLayer.h	/^class WED_PreviewLayer  : public WED_MapLayer {$/;"	c
WED_PreviewLayer_H	.\WEDMap\WED_PreviewLayer.h	25;"	d
WED_PropBoolText	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropBoolText(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, int initial)  : WED_PropertyItem(parent, title, sql_col,xml_col), value(initial) { }$/;"	f	class:WED_PropBoolText
WED_PropBoolText	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropBoolText : public WED_PropertyItem {$/;"	c
WED_PropDoubleText	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropDoubleText(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, double initial, int digits, int decimals)  : WED_PropertyItem(parent, title, sql_col,xml_col), mDigits(digits), mDecimals(decimals), value(initial) { }$/;"	f	class:WED_PropDoubleText
WED_PropDoubleText	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropDoubleText : public WED_PropertyItem {$/;"	c
WED_PropDoubleTextMeters	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropDoubleTextMeters(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, double initial, int digits, int decimals)  : WED_PropDoubleText(parent, title, sql_col,xml_col, initial, digits, decimals) { }$/;"	f	class:WED_PropDoubleTextMeters
WED_PropDoubleTextMeters	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropDoubleTextMeters : public WED_PropDoubleText {$/;"	c
WED_PropFileText	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropFileText(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, const string& initial)  : WED_PropertyItem(parent, title, sql_col,xml_col), value(initial) { }$/;"	f	class:WED_PropFileText
WED_PropFileText	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropFileText : public WED_PropertyItem {$/;"	c
WED_PropIntEnum	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnum(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, int idomain, int initial)  : WED_PropertyItem(parent, title, sql_col,xml_col), value(initial), domain(idomain) { }$/;"	f	class:WED_PropIntEnum
WED_PropIntEnum	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropIntEnum : public WED_PropertyItem {$/;"	c
WED_PropIntEnumBitfield	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumBitfield(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, int idomain, int be_none)  : WED_PropertyItem(parent, title, sql_col,xml_col), domain(idomain), can_be_none(be_none) { }$/;"	f	class:WED_PropIntEnumBitfield
WED_PropIntEnumBitfield	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropIntEnumBitfield : public WED_PropertyItem {$/;"	c
WED_PropIntEnumSet	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumSet(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, int idomain, int iexclusive)  : WED_PropertyItem(parent, title, sql_col,xml_col), domain(idomain), exclusive(iexclusive) { }$/;"	f	class:WED_PropIntEnumSet
WED_PropIntEnumSet	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropIntEnumSet : public WED_PropertyItem, public WED_XMLHandler {$/;"	c
WED_PropIntEnumSetFilter	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumSetFilter(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, const char * ihost, int iminv, int imaxv, int iexclusive)  : WED_PropertyItem(parent, title, sql_col,xml_col), host(ihost), minv(iminv), maxv(imaxv), exclusive(iexclusive) { }$/;"	f	class:WED_PropIntEnumSetFilter
WED_PropIntEnumSetFilter	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropIntEnumSetFilter : public WED_PropertyItem {$/;"	c
WED_PropIntEnumSetUnion	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumSetUnion(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, const char * ihost, int iexclusive)  : WED_PropertyItem(parent, title, sql_col,xml_col), host(ihost), exclusive(iexclusive) { }$/;"	f	class:WED_PropIntEnumSetUnion
WED_PropIntEnumSetUnion	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropIntEnumSetUnion : public WED_PropertyItem {$/;"	c
WED_PropIntText	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntText(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, int initial, int digits)  : WED_PropertyItem(parent, title, sql_col,xml_col), value(initial), mDigits(digits) { }$/;"	f	class:WED_PropIntText
WED_PropIntText	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropIntText : public WED_PropertyItem {$/;"	c
WED_PropStringText	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropStringText(WED_PropertyHelper * parent, const char * title, SQL_Name sql_col, XML_Name xml_col, const string& initial)  : WED_PropertyItem(parent, title, sql_col,xml_col), value(initial) { }$/;"	f	class:WED_PropStringText
WED_PropStringText	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropStringText : public WED_PropertyItem {$/;"	c
WED_Properties	.\WEDCore\WED_Properties.cpp	/^WED_Properties::WED_Properties(sqlite3 * db)	:$/;"	f	class:WED_Properties
WED_Properties	.\WEDCore\WED_Properties.h	/^class	WED_Properties {$/;"	c
WED_PropertyHelper	.\WEDCore\WED_PropertyHelper.h	/^class WED_PropertyHelper : public WED_XMLHandler, public IPropertyObject {$/;"	c
WED_PropertyItem	.\WEDCore\WED_PropertyHelper.cpp	/^WED_PropertyItem::WED_PropertyItem(WED_PropertyHelper * pops, const char * title, SQL_Name sql_col, XML_Name xml_col) : mTitle(title), mSQLColumn(sql_col), mXMLColumn(xml_col), mParent(pops)$/;"	f	class:WED_PropertyItem
WED_PropertyItem	.\WEDCore\WED_PropertyHelper.h	/^class	WED_PropertyItem {$/;"	c
WED_PropertyPane	.\WEDProperties\WED_PropertyPane.cpp	/^WED_PropertyPane::WED_PropertyPane($/;"	f	class:WED_PropertyPane
WED_PropertyPane	.\WEDProperties\WED_PropertyPane.h	/^class	WED_PropertyPane : public GUI_Packer, public GUI_Commander {$/;"	c
WED_PropertyTable	.\WEDProperties\WED_PropertyTable.cpp	/^WED_PropertyTable::WED_PropertyTable($/;"	f	class:WED_PropertyTable
WED_PropertyTable	.\WEDProperties\WED_PropertyTable.h	/^class	WED_PropertyTable : public GUI_TextTableProvider, public GUI_SimpleTableGeometry, public GUI_Listener, public GUI_TextTableHeaderProvider, public GUI_Broadcaster {$/;"	c
WED_PropertyTableHeader	.\WEDProperties\WED_PropertyTable.h	/^class	WED_PropertyTableHeader : public GUI_TextTableHeaderProvider {$/;"	c
WED_RAMPPOSITION_H	.\WEDEntities\WED_RampPosition.h	25;"	d
WED_ROOT_H	.\WEDEntities\WED_Root.h	25;"	d
WED_RUNWAY_H	.\WEDEntities\WED_Runway.h	25;"	d
WED_RampPosition	.\WEDEntities\WED_RampPosition.cpp	/^WED_RampPosition::WED_RampPosition(WED_Archive * a, int i) : WED_GISPoint_Heading(a,i),$/;"	f	class:WED_RampPosition
WED_RampPosition	.\WEDEntities\WED_RampPosition.h	/^class	WED_RampPosition : public WED_GISPoint_Heading {$/;"	c
WED_RecursiveDelete	.\WEDWindows\WED_GroupCommands.cpp	/^static void WED_RecursiveDelete(set<WED_Thing *>& who)$/;"	f	file:
WED_RegisterDND	.\WEDMap\WED_ToolUtils.cpp	/^void				WED_RegisterDND(void)$/;"	f
WED_Repair	.\WEDWindows\WED_GroupCommands.cpp	/^int		WED_Repair(IResolver * resolver)$/;"	f
WED_ReportExceptionUI	.\WEDCore\WED_Errors.cpp	/^void			WED_ReportExceptionUI(const exception& what, const char * fmt, ...)$/;"	f
WED_ResourceMgr	.\WEDCore\WED_ResourceMgr.cpp	/^WED_ResourceMgr::WED_ResourceMgr(WED_LibraryMgr * in_library) : mLibrary(in_library)$/;"	f	class:WED_ResourceMgr
WED_ResourceMgr	.\WEDCore\WED_ResourceMgr.h	/^class WED_ResourceMgr : public GUI_Broadcaster, public GUI_Listener, public virtual IBase {$/;"	c
WED_ResourceMgr_H	.\WEDCore\WED_ResourceMgr.h	25;"	d
WED_Ring	.\WEDEntities\WED_Ring.cpp	/^WED_Ring::WED_Ring(WED_Archive * a, int i) : WED_GISChain(a,i)$/;"	f	class:WED_Ring
WED_Ring	.\WEDEntities\WED_Ring.h	/^class WED_Ring  : public WED_GISChain {$/;"	c
WED_Ring_H	.\WEDEntities\WED_Ring.h	25;"	d
WED_RoadEdge	.\WEDEntities\WED_RoadEdge.cpp	/^WED_RoadEdge::WED_RoadEdge(WED_Archive * a, int i) : WED_GISEdge(a,i),$/;"	f	class:WED_RoadEdge
WED_RoadEdge	.\WEDEntities\WED_RoadEdge.h	/^class WED_RoadEdge : public WED_GISEdge {$/;"	c
WED_RoadEdge_H	.\WEDEntities\WED_RoadEdge.h	25;"	d
WED_Root	.\WEDEntities\WED_Root.cpp	/^WED_Root::WED_Root(WED_Archive * a, int i) : WED_Thing(a, i)$/;"	f	class:WED_Root
WED_Root	.\WEDEntities\WED_Root.h	/^class WED_Root : public WED_Thing {$/;"	c
WED_Routing_H	.\WEDCore\WED_Routing.h	25;"	d
WED_Runway	.\WEDEntities\WED_Runway.cpp	/^WED_Runway::WED_Runway(WED_Archive * a, int i) : WED_GISLine_Width(a,i),$/;"	f	class:WED_Runway
WED_Runway	.\WEDEntities\WED_Runway.h	/^class	WED_Runway : public WED_GISLine_Width {$/;"	c
WED_RunwayNode	.\WEDEntities\WED_RunwayNode.cpp	/^WED_RunwayNode::WED_RunwayNode(WED_Archive * a, int i) : WED_GISPoint(a,i)$/;"	f	class:WED_RunwayNode
WED_RunwayNode	.\WEDEntities\WED_RunwayNode.h	/^class WED_RunwayNode : public WED_GISPoint {$/;"	c
WED_RunwayNode_H	.\WEDEntities\WED_RunwayNode.h	25;"	d
WED_SEALANE_H	.\WEDEntities\WED_Sealane.h	25;"	d
WED_SELECT_H	.\WEDEntities\WED_Select.h	25;"	d
WED_SERVER_H	.\WEDNetwork\WED_Server.h	25;"	d
WED_STRUCTURELAYER_H	.\WEDMap\WED_StructureLayer.h	2;"	d
WED_SceneryPackExport_H	.\WEDImportExport\WED_SceneryPackExport.h	25;"	d
WED_Sealane	.\WEDEntities\WED_Sealane.cpp	/^WED_Sealane::WED_Sealane(WED_Archive * a, int i) : WED_GISLine_Width(a,i),$/;"	f	class:WED_Sealane
WED_Sealane	.\WEDEntities\WED_Sealane.h	/^class	WED_Sealane : public WED_GISLine_Width {$/;"	c
WED_Select	.\WEDEntities\WED_Select.cpp	/^WED_Select::WED_Select(WED_Archive * parent, int id) :$/;"	f	class:WED_Select
WED_Select	.\WEDEntities\WED_Select.h	/^class	WED_Select : public WED_Thing, public virtual ISelection, public GUI_Broadcaster {$/;"	c
WED_Server	.\WEDNetwork\WED_Server.cpp	/^WED_Server::WED_Server(const string& inPkgName,unsigned short inPort):$/;"	f	class:WED_Server
WED_Server	.\WEDNetwork\WED_Server.h	/^class	WED_Server : public GUI_Broadcaster ,public GUI_Timer {$/;"	c
WED_SetAnyAirport	.\WEDMap\WED_ToolUtils.cpp	/^void			WED_SetAnyAirport(IResolver * resolver)$/;"	f
WED_SetCurrentAirport	.\WEDMap\WED_ToolUtils.cpp	/^void			WED_SetCurrentAirport(IResolver * resolver, WED_Airport * airport)$/;"	f
WED_Sign_Parser	.\WEDCore\WED_Sign_Parser.cpp	/^WED_Sign_Parser::WED_Sign_Parser(void)$/;"	f	class:WED_Sign_Parser
WED_Sign_Parser	.\WEDCore\WED_Sign_Parser.cpp	/^class WED_Sign_Parser$/;"	c	file:
WED_SimpleBezierBoundaryNode	.\WEDEntities\WED_SimpleBezierBoundaryNode.cpp	/^WED_SimpleBezierBoundaryNode::WED_SimpleBezierBoundaryNode(WED_Archive * a, int i) : WED_GISPoint_Bezier(a,i)$/;"	f	class:WED_SimpleBezierBoundaryNode
WED_SimpleBezierBoundaryNode	.\WEDEntities\WED_SimpleBezierBoundaryNode.h	/^class WED_SimpleBezierBoundaryNode : public WED_GISPoint_Bezier {$/;"	c
WED_SimpleBezierBoundaryNode_H	.\WEDEntities\WED_SimpleBezierBoundaryNode.h	25;"	d
WED_SimpleBoundaryNode	.\WEDEntities\WED_SimpleBoundaryNode.cpp	/^WED_SimpleBoundaryNode::WED_SimpleBoundaryNode(WED_Archive * a, int i) : WED_GISPoint(a,i)$/;"	f	class:WED_SimpleBoundaryNode
WED_SimpleBoundaryNode	.\WEDEntities\WED_SimpleBoundaryNode.h	/^class WED_SimpleBoundaryNode : public WED_GISPoint {$/;"	c
WED_SimpleBoundaryNode_H	.\WEDEntities\WED_SimpleBoundaryNode.h	25;"	d
WED_SplitEdgeIfNeeded	.\WEDCore\WED_GISUtils.cpp	/^bool WED_SplitEdgeIfNeeded(WED_Thing * pt, const string& in_cross_name)$/;"	f
WED_StartWindow	.\WEDWindows\WED_StartWindow.cpp	/^WED_StartWindow::WED_StartWindow(GUI_Commander * cmder) : GUI_Window("WED", xwin_style_centered|xwin_style_resizable, kDefaultBounds, cmder)$/;"	f	class:WED_StartWindow
WED_StartWindow	.\WEDWindows\WED_StartWindow.h	/^class WED_StartWindow : public GUI_Window, public GUI_Listener  {$/;"	c
WED_StartWindow_H	.\WEDWindows\WED_StartWindow.h	25;"	d
WED_StringForOSError	.\WEDCore\WED_Errors.cpp	/^const char *	WED_StringForOSError(int code)$/;"	f
WED_StringPlacement	.\WEDEntities\WED_StringPlacement.cpp	/^WED_StringPlacement::WED_StringPlacement(WED_Archive * a, int i) : WED_GISChain(a,i),$/;"	f	class:WED_StringPlacement
WED_StringPlacement	.\WEDEntities\WED_StringPlacement.h	/^class WED_StringPlacement : public WED_GISChain {$/;"	c
WED_StringPlacement_H	.\WEDEntities\WED_StringPlacement.h	25;"	d
WED_StructureLayer	.\WEDMap\WED_StructureLayer.cpp	/^WED_StructureLayer::WED_StructureLayer(GUI_Pane * h, WED_MapZoomerNew * zoomer, IResolver * resolver) :$/;"	f	class:WED_StructureLayer
WED_StructureLayer	.\WEDMap\WED_StructureLayer.h	/^class	WED_StructureLayer : public WED_MapLayer {$/;"	c
WED_TAXIWAY_H	.\WEDEntities\WED_Taxiway.h	25;"	d
WED_TCE	.\WEDTCE\WED_TCE.cpp	/^WED_TCE::WED_TCE(IResolver * in_resolver) :$/;"	f	class:WED_TCE
WED_TCE	.\WEDTCE\WED_TCE.h	/^class WED_TCE : public GUI_Pane, public WED_MapZoomerNew, public GUI_Listener {$/;"	c
WED_TCEDebugLayer	.\WEDCore\WED_TCEDebugLayer.cpp	/^WED_TCEDebugLayer::WED_TCEDebugLayer(GUI_Pane * host, WED_MapZoomerNew * zoomer, IResolver * resolver) : $/;"	f	class:WED_TCEDebugLayer
WED_TCEDebugLayer	.\WEDCore\WED_TCEDebugLayer.h	/^class WED_TCEDebugLayer : public WED_TCELayer {$/;"	c
WED_TCEDebugLayer_H	.\WEDCore\WED_TCEDebugLayer.h	25;"	d
WED_TCELayer	.\WEDTCE\WED_TCELayer.cpp	/^WED_TCELayer::WED_TCELayer(GUI_Pane * h, WED_MapZoomerNew * z, IResolver * i) : mZoomer(z), mResolver(i), mHost(h)$/;"	f	class:WED_TCELayer
WED_TCELayer	.\WEDTCE\WED_TCELayer.h	/^class WED_TCELayer {$/;"	c
WED_TCELayer_H	.\WEDTCE\WED_TCELayer.h	25;"	d
WED_TCEMarqueeTool	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^WED_TCEMarqueeTool::WED_TCEMarqueeTool($/;"	f	class:WED_TCEMarqueeTool
WED_TCEMarqueeTool	.\WEDTCE\WED_TCEMarqueeTool.h	/^class	WED_TCEMarqueeTool : public WED_HandleToolBase, public virtual IControlHandles {$/;"	c
WED_TCEMarqueeTool_H	.\WEDTCE\WED_TCEMarqueeTool.h	25;"	d
WED_TCEPane	.\WEDTCE\WED_TCEPane.cpp	/^WED_TCEPane::WED_TCEPane(GUI_Commander * cmdr, IResolver * resolver, WED_Archive * archive) : GUI_Commander(cmdr), mResolver(resolver)$/;"	f	class:WED_TCEPane
WED_TCEPane	.\WEDTCE\WED_TCEPane.h	/^class WED_TCEPane  : public GUI_Packer, GUI_Listener, public GUI_Commander {$/;"	c
WED_TCEPane_H	.\WEDTCE\WED_TCEPane.h	25;"	d
WED_TCEToolAdapter	.\WEDTCE\WED_TCEToolAdapter.cpp	/^WED_TCEToolAdapter::WED_TCEToolAdapter(const char * tool_name, GUI_Pane * host, WED_MapZoomerNew * zoomer, IResolver * resolver, WED_MapToolNew * ibrains) :$/;"	f	class:WED_TCEToolAdapter
WED_TCEToolAdapter	.\WEDTCE\WED_TCEToolAdapter.h	/^class WED_TCEToolAdapter : public WED_TCEToolNew {$/;"	c
WED_TCEToolAdapter_H	.\WEDTCE\WED_TCEToolAdapter.h	21;"	d
WED_TCEToolNew	.\WEDTCE\WED_TCEToolNew.cpp	/^WED_TCEToolNew::WED_TCEToolNew(const char * tname, GUI_Pane * h, WED_MapZoomerNew * z, IResolver * i) : WED_TCELayer(h, z, i), tool_name(tname)$/;"	f	class:WED_TCEToolNew
WED_TCEToolNew	.\WEDTCE\WED_TCEToolNew.h	/^class WED_TCEToolNew: public WED_TCELayer, public IPropertyObject {$/;"	c
WED_TCEToolNew_H	.\WEDTCE\WED_TCEToolNew.h	25;"	d
WED_TCEVertexTool	.\WEDTCE\WED_TCEVertexTool.cpp	/^WED_TCEVertexTool::WED_TCEVertexTool($/;"	f	class:WED_TCEVertexTool
WED_TCEVertexTool	.\WEDTCE\WED_TCEVertexTool.h	/^class WED_TCEVertexTool : public WED_HandleToolBase, public IControlHandles {$/;"	c
WED_TCEVertexTool_H	.\WEDTCE\WED_TCEVertexTool.h	7;"	d
WED_TCE_H	.\WEDTCE\WED_TCE.h	25;"	d
WED_TERRASERVER_LAYER_H	.\WEDMap\WED_TerraserverLayer.h	25;"	d
WED_THING_H	.\WEDEntities\WED_Thing.h	25;"	d
WED_TIF	.\Utils\BitmapUtils.h	/^	WED_TIF				\/\/X												X$/;"	e	enum:SupportedTypes
WED_TOOLINFOADAPTER_H	.\WEDMap\WED_ToolInfoAdapter.h	25;"	d
WED_TOOLUTILS_H	.\WEDMap\WED_ToolUtils.h	25;"	d
WED_TOWERVIEWPOINT_H	.\WEDEntities\WED_TowerViewpoint.h	25;"	d
WED_TO_UV_poly	.\WEDCore\WED_GISUtils.cpp	/^static bool WED_TO_UV_poly(IGISPolygon * pp, vector<vector<uv_vert> >& out_vert)$/;"	f	file:
WED_TO_UV_ps	.\WEDCore\WED_GISUtils.cpp	/^static bool WED_TO_UV_ps(IGISPointSequence * ps, vector<uv_vert>& out_vert)$/;"	f	file:
WED_TaxiRoute	.\WEDEntities\WED_TaxiRoute.cpp	/^WED_TaxiRoute::WED_TaxiRoute(WED_Archive * a, int i) : WED_GISEdge(a,i),$/;"	f	class:WED_TaxiRoute
WED_TaxiRoute	.\WEDEntities\WED_TaxiRoute.h	/^class WED_TaxiRoute : public WED_GISEdge {$/;"	c
WED_TaxiRouteNode	.\WEDEntities\WED_TaxiRouteNode.cpp	/^WED_TaxiRouteNode::WED_TaxiRouteNode(WED_Archive * a, int i) : WED_GISPoint(a,i)$/;"	f	class:WED_TaxiRouteNode
WED_TaxiRouteNode	.\WEDEntities\WED_TaxiRouteNode.h	/^class WED_TaxiRouteNode : public WED_GISPoint {$/;"	c
WED_TaxiRouteNode_H	.\WEDEntities\WED_TaxiRouteNode.h	24;"	d
WED_TaxiRoute_H	.\WEDEntities\WED_TaxiRoute.h	25;"	d
WED_Taxiway	.\WEDEntities\WED_Taxiway.cpp	/^WED_Taxiway::WED_Taxiway(WED_Archive * a, int i) : WED_GISPolygon(a,i),$/;"	f	class:WED_Taxiway
WED_Taxiway	.\WEDEntities\WED_Taxiway.h	/^class	WED_Taxiway : public WED_GISPolygon {$/;"	c
WED_TerraserverLayer	.\WEDMap\WED_TerraserverLayer.cpp	/^WED_TerraserverLayer::WED_TerraserverLayer(GUI_Pane * h, WED_MapZoomerNew * zoomer, IResolver * resolver) : WED_MapLayer(h, zoomer, resolver)$/;"	f	class:WED_TerraserverLayer
WED_TerraserverLayer	.\WEDMap\WED_TerraserverLayer.h	/^class	WED_TerraserverLayer : public WED_MapLayer, public GUI_Timer {$/;"	c
WED_TexMgr	.\WEDCore\WED_TexMgr.cpp	/^WED_TexMgr::WED_TexMgr(const string& package) : mPackage(package)$/;"	f	class:WED_TexMgr
WED_TexMgr	.\WEDCore\WED_TexMgr.h	/^class WED_TexMgr : public virtual ITexMgr {$/;"	c
WED_TexMgr_H	.\WEDCore\WED_TexMgr.h	25;"	d
WED_TextureBezierNode	.\WEDEntities\WED_TextureBezierNode.cpp	/^WED_TextureBezierNode::WED_TextureBezierNode(WED_Archive * a, int i) : WED_GISPoint_Bezier(a,i),$/;"	f	class:WED_TextureBezierNode
WED_TextureBezierNode	.\WEDEntities\WED_TextureBezierNode.h	/^class WED_TextureBezierNode : public WED_GISPoint_Bezier {$/;"	c
WED_TextureBezierNode_H	.\WEDEntities\WED_TextureBezierNode.h	25;"	d
WED_TextureNode	.\WEDEntities\WED_TextureNode.cpp	/^WED_TextureNode::WED_TextureNode(WED_Archive * a, int i) : WED_GISPoint(a,i),$/;"	f	class:WED_TextureNode
WED_TextureNode	.\WEDEntities\WED_TextureNode.h	/^class WED_TextureNode : public WED_GISPoint {$/;"	c
WED_TextureNode_H	.\WEDEntities\WED_TextureNode.h	25;"	d
WED_Thing	.\WEDEntities\WED_Thing.cpp	/^WED_Thing::WED_Thing(WED_Archive * parent, int id) :$/;"	f	class:WED_Thing
WED_Thing	.\WEDEntities\WED_Thing.h	/^class	WED_Thing :	public			WED_Persistent, $/;"	c
WED_ThrowMessage	.\WEDCore\WED_Errors.h	32;"	d
WED_ThrowMessageIf	.\WEDCore\WED_Errors.h	35;"	d
WED_ThrowOSErr	.\WEDCore\WED_Errors.h	29;"	d
WED_ThrowPrintf	.\WEDCore\WED_Errors.h	38;"	d
WED_ToolInfoAdapter	.\WEDMap\WED_ToolInfoAdapter.cpp	/^WED_ToolInfoAdapter::WED_ToolInfoAdapter(int height) : mTool(NULL), mRowHeight(height)$/;"	f	class:WED_ToolInfoAdapter
WED_ToolInfoAdapter	.\WEDMap\WED_ToolInfoAdapter.h	/^class	WED_ToolInfoAdapter : public GUI_TextTableProvider, public GUI_TableGeometry, public GUI_Broadcaster {$/;"	c
WED_TowerViewpoint	.\WEDEntities\WED_TowerViewpoint.cpp	/^WED_TowerViewpoint::WED_TowerViewpoint(WED_Archive * a, int i) : WED_GISPoint(a,i),$/;"	f	class:WED_TowerViewpoint
WED_TowerViewpoint	.\WEDEntities\WED_TowerViewpoint.h	/^class	WED_TowerViewpoint : public WED_GISPoint {$/;"	c
WED_TypeField	.\WEDEntities\WED_Thing.cpp	/^WED_TypeField::WED_TypeField(WED_Thing * t) : WED_PropertyItem(t, "Class", SQL_Name("",""),XML_Name("","")), val(t)$/;"	f	class:WED_TypeField
WED_TypeField	.\WEDEntities\WED_Thing.h	/^class WED_TypeField : public WED_PropertyItem {$/;"	c
WED_UIDEFS_H	.\WEDWindows\WED_UIDefs.h	25;"	d
WED_UIMeasurement	.\WEDMap\WED_UIMeasurements.cpp	/^int		WED_UIMeasurement(const char * measurement)$/;"	f
WED_UIMeasurements_H	.\WEDMap\WED_UIMeasurements.h	25;"	d
WED_UNDOLAYER_H	.\WEDCore\WED_UndoLayer.h	25;"	d
WED_UNDOMGR_H	.\WEDCore\WED_UndoMgr.h	25;"	d
WED_URL_GATEWAY_API	.\WEDCore\WED_Url.h	35;"	d
WED_URL_HELP_SCENERY	.\WEDCore\WED_Url.h	31;"	d
WED_URL_MANUAL	.\WEDCore\WED_Url.h	30;"	d
WED_URL_UPLOAD_OK	.\WEDCore\WED_Url.h	32;"	d
WED_UndoFatalErrorHandler	.\WEDCore\WED_UndoMgr.h	/^class	WED_UndoFatalErrorHandler {$/;"	c
WED_UndoLayer	.\WEDCore\WED_UndoLayer.cpp	/^WED_UndoLayer::WED_UndoLayer(WED_Archive * inArchive, const string& inName, const char * inFile, int inLine) :$/;"	f	class:WED_UndoLayer
WED_UndoLayer	.\WEDCore\WED_UndoLayer.h	/^class	WED_UndoLayer {$/;"	c
WED_UndoMgr	.\WEDCore\WED_UndoMgr.cpp	/^WED_UndoMgr::WED_UndoMgr(WED_Archive * inArchive, WED_UndoFatalErrorHandler * panic_handler) : mCommand(NULL), mArchive(inArchive), mPanicHandler(panic_handler)$/;"	f	class:WED_UndoMgr
WED_UndoMgr	.\WEDCore\WED_UndoMgr.h	/^class	WED_UndoMgr : public GUI_MemoryHog {$/;"	c
WED_Url_H	.\WEDCore\WED_Url.h	25;"	d
WED_VERSION	.\WEDCore\WED_Version.h	31;"	d
WED_VERSION_BIN	.\WEDCore\WED_Version.h	34;"	d
WED_VERSION_NUMERIC	.\WEDCore\WED_Version.h	37;"	d
WED_VERSION_RES	.\WEDCore\WED_Version.h	33;"	d
WED_VERSION_STRING	.\WEDCore\WED_Version.h	32;"	d
WED_VERTEXTOOL_H	.\WEDMap\WED_VertexTool.h	25;"	d
WED_ValidateApt	.\WEDCore\WED_Validate.cpp	/^bool	WED_ValidateApt(IResolver * resolver, WED_Thing * wrl)$/;"	f
WED_Validate_h	.\WEDCore\WED_Validate.h	25;"	d
WED_VectorForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^bool	WED_VectorForPointSequence(IGISPointSequence * in_seq, vector<Segment2>& out_pol)$/;"	f
WED_VectorForPointSequence	.\WEDCore\WED_GISUtils.cpp	/^bool	WED_VectorForPointSequence(IGISPointSequence * in_seq, vector<Segment2p>& out_pol)$/;"	f
WED_VerTable	.\WEDImportExport\WED_VerTable.cpp	/^WED_VerTable::WED_VerTable($/;"	f	class:WED_VerTable
WED_VerTable	.\WEDImportExport\WED_VerTable.h	/^class	WED_VerTable :	public GUI_TextTableProvider, $/;"	c
WED_VerTable_H	.\WEDImportExport\WED_VerTable.h	25;"	d
WED_Version_H	.\WEDCore\WED_Version.h	25;"	d
WED_VertexTool	.\WEDMap\WED_VertexTool.cpp	/^WED_VertexTool::WED_VertexTool($/;"	f	class:WED_VertexTool
WED_VertexTool	.\WEDMap\WED_VertexTool.h	/^class	WED_VertexTool : public WED_HandleToolBase, public virtual IControlHandles {$/;"	c
WED_WINDSOCK_H	.\WEDEntities\WED_Windsock.h	25;"	d
WED_Windsock	.\WEDEntities\WED_Windsock.cpp	/^WED_Windsock::WED_Windsock(WED_Archive * a, int i) : WED_GISPoint(a,i),$/;"	f	class:WED_Windsock
WED_Windsock	.\WEDEntities\WED_Windsock.h	/^class	WED_Windsock : public WED_GISPoint {$/;"	c
WED_WorldMapLayer	.\WEDMap\WED_WorldMapLayer.cpp	/^WED_WorldMapLayer::WED_WorldMapLayer(GUI_Pane * host, WED_MapZoomerNew * zoomer, IResolver * resolver) :$/;"	f	class:WED_WorldMapLayer
WED_WorldMapLayer	.\WEDMap\WED_WorldMapLayer.h	/^class WED_WorldMapLayer : public WED_MapLayer {$/;"	c
WED_WorldMapLayer_H	.\WEDMap\WED_WorldMapLayer.h	25;"	d
WED_XMLElement	.\WEDCore\WED_XMLWriter.cpp	/^WED_XMLElement::WED_XMLElement($/;"	f	class:WED_XMLElement
WED_XMLElement	.\WEDCore\WED_XMLWriter.h	/^class	WED_XMLElement {$/;"	c
WED_XMLHandler	.\WEDCore\WED_XMLReader.h	/^class WED_XMLHandler {$/;"	c
WED_XMLReader	.\WEDCore\WED_XMLReader.cpp	/^WED_XMLReader::WED_XMLReader()$/;"	f	class:WED_XMLReader
WED_XMLReader	.\WEDCore\WED_XMLReader.h	/^class WED_XMLReader {$/;"	c
WED_XMLReader_H	.\WEDCore\WED_XMLReader.h	25;"	d
WED_XMLWriter_H	.\WEDCore\WED_XMLWriter.h	25;"	d
WED_XPLUGINCAMERA_H	.\WEDXPlugin\WED_XPluginCamera.h	24;"	d
WED_XPLUGINCLIENT_H	.\WEDXPlugin\WED_XPluginClient.h	25;"	d
WED_XPLUGINENTITY_H	.\WEDXPlugin\WED_XPluginEntity.h	25;"	d
WED_XPLUGINMGR_H	.\WEDXPlugin\WED_XPluginMgr.h	25;"	d
WED_XPLUGINOBJECT_H	.\WEDXPlugin\WED_XPluginObject.h	25;"	d
WED_XPluginCamera	.\WEDXPlugin\WED_XPluginCamera.cpp	/^WED_XPluginCamera::WED_XPluginCamera(WED_XPluginMgr * inRef):$/;"	f	class:WED_XPluginCamera
WED_XPluginCamera	.\WEDXPlugin\WED_XPluginCamera.h	/^class WED_XPluginCamera$/;"	c
WED_XPluginClient	.\WEDXPlugin\WED_XPluginClient.cpp	/^WED_XPluginClient::WED_XPluginClient(WED_XPluginMgr* inMgr):$/;"	f	class:WED_XPluginClient
WED_XPluginClient	.\WEDXPlugin\WED_XPluginClient.h	/^class	WED_XPluginClient  {$/;"	c
WED_XPluginEntity	.\WEDXPlugin\WED_XPluginEntity.cpp	/^WED_XPluginEntity::WED_XPluginEntity(int inType,XPLMProbeRef inProbeRef,WED_XPluginMgr * inRef):$/;"	f	class:WED_XPluginEntity
WED_XPluginEntity	.\WEDXPlugin\WED_XPluginEntity.h	/^class WED_XPluginEntity$/;"	c
WED_XPluginMgr	.\WEDXPlugin\WED_XPluginMgr.cpp	/^WED_XPluginMgr::WED_XPluginMgr() : WED_XPluginClient(this),$/;"	f	class:WED_XPluginMgr
WED_XPluginMgr	.\WEDXPlugin\WED_XPluginMgr.h	/^class  WED_XPluginMgr : public WED_XPluginClient$/;"	c
WED_XPluginObject	.\WEDXPlugin\WED_XPluginObject.cpp	/^WED_XPluginObject::WED_XPluginObject(WED_XPluginMgr * inRef):$/;"	f	class:WED_XPluginObject
WED_XPluginObject	.\WEDXPlugin\WED_XPluginObject.h	/^class WED_XPluginObject : public WED_XPluginEntity$/;"	c
WED_XPluginStats_t	.\WEDXPlugin\WED_XPluginMgr.h	/^struct WED_XPluginStats_t$/;"	s
WED_generate_routes	.\WEDCore\WED_Routing.cpp	/^void WED_generate_routes($/;"	f
WED_route_edge_t	.\WEDCore\WED_Routing.h	/^struct WED_route_edge_t {$/;"	s
WED_route_node_t	.\WEDCore\WED_Routing.h	/^struct WED_route_node_t {$/;"	s
WED_route_t	.\WEDCore\WED_Routing.h	/^struct WED_route_t {$/;"	s
WIN32_LEAN_AND_MEAN	.\AC3DPlugins\x86_Win32 DLL.cpp	13;"	d	file:
WIN32_LEAN_AND_MEAN	.\lib_json\src\test_lib_json\jsontest.cpp	19;"	d	file:
WINDOWS_LEAN_AND_MEAN	.\Obj\XDefs.h	251;"	d
WITHNWLINK	.\Obj\XDefs.h	71;"	d
WORD_SIZE	.\Utils\BWImage.h	58;"	d
WORLD_POLY	.\Tiger\TIGERTypes.h	31;"	d
WRITER_BUFFER_PAD	.\XESCore\SimpleIO.h	118;"	d
WRITER_BUFFER_SIZE	.\XESCore\SimpleIO.h	117;"	d
WRITE_ERR	.\Env\EnvWrite.h	30;"	d
WSHED	.\XESCore\DEMAlgs.cpp	2096;"	d	file:
WTPM_CreateBackLinks	.\XESCore\WTPM.cpp	/^void	WTPM_CreateBackLinks($/;"	f
WTPM_DirectedLinePtr	.\XESCore\WTPM.h	/^typedef	pair<WTPM_LinePtr, bool>	WTPM_DirectedLinePtr;	\/\/ True means left halfedge$/;"	t
WTPM_DirectedLineVector	.\XESCore\WTPM.h	/^typedef	vector<WTPM_DirectedLinePtr>	WTPM_DirectedLineVector;$/;"	t
WTPM_ExportToMap	.\XESCore\WTPM.cpp	/^void	WTPM_ExportToMap($/;"	f
WTPM_Face	.\XESCore\WTPM.h	/^struct WTPM_Face {$/;"	s
WTPM_FacePtr	.\XESCore\WTPM.h	/^typedef	WTPM_Face *		WTPM_FacePtr;$/;"	t
WTPM_FaceVector	.\XESCore\WTPM.h	/^typedef	vector<WTPM_Face *>		WTPM_FaceVector;$/;"	t
WTPM_FindLeftMostEdgeInSet	.\XESCore\WTPM.cpp	/^WTPM_DirectedLinePtr			WTPM_FindLeftMostEdgeInSet(const set<WTPM_DirectedLinePtr>& inEdges)$/;"	f
WTPM_FindLineConnections	.\XESCore\WTPM.cpp	/^void	WTPM_FindLineConnections(const WTPM_LineVector& inLines)$/;"	f
WTPM_FindNextLine	.\XESCore\WTPM.cpp	/^WTPM_DirectedLinePtr		WTPM_FindNextLine(const WTPM_DirectedLinePtr& inLine)$/;"	f
WTPM_FindPolygonRings	.\XESCore\WTPM.cpp	/^void	WTPM_FindPolygonRings(const WTPM_FaceVector& inFaces)$/;"	f
WTPM_GetSpurVector	.\XESCore\WTPM.cpp	/^Vector2	WTPM_GetSpurVector(WTPM_DirectedLinePtr line)$/;"	f
WTPM_H	.\XESCore\WTPM.h	24;"	d
WTPM_Line	.\XESCore\WTPM.h	/^struct	WTPM_Line {$/;"	s
WTPM_LinePtr	.\XESCore\WTPM.h	/^typedef	WTPM_Line *		WTPM_LinePtr;$/;"	t
WTPM_LineVector	.\XESCore\WTPM.h	/^typedef	vector<WTPM_Line *>		WTPM_LineVector;$/;"	t
WTPM_LineVector	.\XESCore\WTPM.h	/^typedef	vector<WTPM_LinePtr>			WTPM_LineVector;$/;"	t
WTPM_Node	.\XESCore\WTPM.h	/^struct	WTPM_Node {$/;"	s
WTPM_NodePtr	.\XESCore\WTPM.h	/^typedef	WTPM_Node *		WTPM_NodePtr;$/;"	t
WTPM_NodeVector	.\XESCore\WTPM.h	/^typedef	vector<WTPM_Node *>		WTPM_NodeVector;$/;"	t
WTPM_RemoveRingFromSet	.\XESCore\WTPM.cpp	/^void		WTPM_RemoveRingFromSet(const WTPM_DirectedLinePtr& anEdge, set<WTPM_DirectedLinePtr>& inEdgeSet)$/;"	f
WTPM_RestoreTopology	.\XESCore\WTPM.cpp	/^void	WTPM_RestoreTopology($/;"	f
WTPM_SortLinesAroundPoints	.\XESCore\WTPM.cpp	/^void	WTPM_SortLinesAroundPoints(const WTPM_NodeVector& inNodes)$/;"	f
WaitForSockets	.\Network\PCSBSocket.win.cpp	/^int PCSBSocket::WaitForSockets(PCSBSocket** inSockets, int inCount, long inTimeout)$/;"	f	class:PCSBSocket
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropBoolText::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropBoolText
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropDoubleText::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropDoubleText
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropFileText::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropFileText
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntEnum::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropIntEnum
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntEnumBitfield::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropIntEnumBitfield
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntEnumSet::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropIntEnumSet
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntEnumSetFilter::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropIntEnumSetFilter
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntEnumSetUnion::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropIntEnumSetUnion
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntText::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropIntText
WantsAttribute	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropStringText::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_PropStringText
WantsAttribute	.\WEDEntities\WED_Thing.cpp	/^bool		WED_TypeField::WantsAttribute(const char * ele, const char * att_name, const char * att_value)$/;"	f	class:WED_TypeField
WantsElement	.\WEDCore\WED_PropertyHelper.cpp	/^bool		WED_PropIntEnumSet::WantsElement(WED_XMLReader * reader, const char * name)$/;"	f	class:WED_PropIntEnumSet
WantsElement	.\WEDCore\WED_PropertyHelper.h	/^	virtual	bool		WantsElement(WED_XMLReader * reader, const char * name) { return false; }$/;"	f	class:WED_PropertyItem
WaterCodeInfo_t	.\Tiger\TigerImport.cpp	/^struct	WaterCodeInfo_t {$/;"	s	file:
Watershed	.\XESCore\DEMAlgs.cpp	/^void	Watershed(DEMGeo& input, DEMGeo& output,vector<DEMGeo::address> * out_watersheds)$/;"	f
WidestRoadTypeForSegment	.\XESCore\BlockFill.cpp	/^static pair<int,bool>	WidestRoadTypeForSegment(Pmwx::Halfedge_const_handle he)$/;"	f	file:
WidthForSegment	.\XESCore\BlockFill.cpp	/^float WidthForSegment(const pair<int,bool>& seg_type)$/;"	f
WinEventHandler	.\UI\XWin.win.cpp	/^LRESULT CALLBACK XWin::WinEventHandler(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:XWin
WinMain	.\Installer\InstallerMain.cpp	/^int PASCAL WinMain(HINSTANCE hinst,HINSTANCE hprevinst,LPSTR cmdline,int windowstyle)$/;"	f
WinMain	.\Installer\InstallerMakerMain.cpp	/^int PASCAL WinMain(HINSTANCE hinst,HINSTANCE hprevinst,LPSTR cmdline,int windowstyle)$/;"	f
WinMain	.\RenderFarmUI\RF_Main.cpp	/^int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)$/;"	f
WinMain	.\UI\XGUIApp.cpp	/^int APIENTRY WinMain(HINSTANCE hInstance,$/;"	f
WinMain	.\UI\XGrinderApp.cpp	/^int APIENTRY WinMain(HINSTANCE hInstance,$/;"	f
WinMain	.\UI\XWidgetApp.cpp	/^int APIENTRY WinMain(HINSTANCE hInstance,$/;"	f
WinMain	.\WEDCore\WED_AppMain.cpp	/^int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)$/;"	f
WindingFromFile	.\XESCore\AptAlgs.cpp	/^void	WindingFromFile(vector<Polygon2>& w, const char * filename)$/;"	f
WindingToFile	.\XESCore\AptAlgs.cpp	/^void	WindingToFile(const vector<Polygon2>& w, const char * filename)$/;"	f
WithinBox	.\WEDEntities\WED_GISBoundingBox.cpp	/^bool			WED_GISBoundingBox::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISBoundingBox
WithinBox	.\WEDEntities\WED_GISChain.cpp	/^bool			WED_GISChain::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISChain
WithinBox	.\WEDEntities\WED_GISComposite.cpp	/^bool			WED_GISComposite::WithinBox		(GISLayer_t l, const Bbox2&  bounds) const$/;"	f	class:WED_GISComposite
WithinBox	.\WEDEntities\WED_GISEdge.cpp	/^bool			WED_GISEdge::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISEdge
WithinBox	.\WEDEntities\WED_GISLine.cpp	/^bool			WED_GISLine::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISLine
WithinBox	.\WEDEntities\WED_GISLine_Width.cpp	/^bool			WED_GISLine_Width::WithinBox		(GISLayer_t l,  const Bbox2&  bounds) const$/;"	f	class:WED_GISLine_Width
WithinBox	.\WEDEntities\WED_GISPoint.cpp	/^bool				WED_GISPoint::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISPoint
WithinBox	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^bool			WED_GISPoint_HeadingWidthLength::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISPoint_HeadingWidthLength
WithinBox	.\WEDEntities\WED_GISPolygon.cpp	/^bool				WED_GISPolygon::WithinBox		(GISLayer_t l,const Bbox2&  bounds) const$/;"	f	class:WED_GISPolygon
WordBreak	.\GUI\GUI_TextField.cpp	/^const char *	GUI_TextField::WordBreak($/;"	f	class:GUI_TextField
WordBreakCB	.\OGLE\ogle.cpp	/^const char *	OGLE::WordBreakCB($/;"	f	class:OGLE
WordBreak_f	.\OGLE\ogle.h	/^	const char *	(* WordBreak_f)($/;"	m	struct:OGLE_Callbacks
WorldToLocal	.\WEDXPlugin\WED_XPluginEntity.cpp	/^void WED_XPluginEntity::WorldToLocal(float * outX,float * outY,float * outZ,WED_XPluginEntity* inEntity)$/;"	f	class:WED_XPluginEntity
WriteAirportElevations	.\RawImport\AptElev.cpp	/^bool	WriteAirportElevations(const char * demdir, const char * outdir)$/;"	f
WriteAptFile	.\XESCore\AptIO.cpp	/^bool	WriteAptFile(const char * inFileName, const AptVector& inApts, int version)$/;"	f
WriteAptFileOpen	.\XESCore\AptIO.cpp	/^bool	WriteAptFileOpen(FILE * fi, const AptVector& inApts, int version)$/;"	f
WriteAptFileProcs	.\XESCore\AptIO.cpp	/^bool	WriteAptFileProcs(int (* fprintf)(void * fi, const char * fmt, ...), void * fi, const AptVector& inApts, int version)$/;"	f
WriteAreaFeature	.\XESCore\MapIO.cpp	/^void WriteAreaFeature(IOWriter& inWriter, const GISAreaFeature_t& i)$/;"	f
WriteBitmapToDDS	.\Utils\BitmapUtils.cpp	/^int	WriteBitmapToDDS(struct ImageInfo& ioImage, int dxt, const char * file_name, int use_win_gamma)$/;"	f
WriteBitmapToFile	.\Utils\BitmapUtils.cpp	/^int		WriteBitmapToFile(const struct ImageInfo * inImage, const char * inFilePath)$/;"	f
WriteBitmapToPNG	.\Utils\BitmapUtils.cpp	/^int		WriteBitmapToPNG(const struct ImageInfo * inImage, const char * inFilePath, char * inPalette, int inPaletteLen, float target_gamma)$/;"	f
WriteBonesToFile	.\Utils\XCarBoneUtils.cpp	/^bool	WriteBonesToFile(const char * inFileName, XCarBones& outBones)$/;"	f
WriteBulk	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::WriteBulk(const char * inBuf, int inLength, bool inZip)$/;"	f	class:WED_Buffer
WriteBulk	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::WriteBulk(const char * inBuf, int inLength, bool inZip)$/;"	f	class:WED_FastBuffer
WriteBulk	.\XESCore\SimpleIO.cpp	/^void	FileWriter::WriteBulk(const char * inBuf, int inLength, bool inZip)$/;"	f	class:FileWriter
WriteBulk	.\XESCore\SimpleIO.cpp	/^void	ZipFileWriter::WriteBulk(const char * inBuf, int inLength, bool inZip)$/;"	f	class:ZipFileWriter
WriteBulk	.\XESCore\SimpleIO.h	/^	inline void	WriteBulk(const char * inBuf, int inLength, bool inZip)$/;"	f	class:WriterBuffer
WriteCoordinate	.\XESCore\MapIO.cpp	/^void WriteCoordinate(IOWriter& inWriter, const NT& c)$/;"	f
WriteDEM	.\XESCore\DEMIO.cpp	/^void	WriteDEM(DEMGeo& inMap, IOWriter * inWriter)$/;"	f
WriteData	.\Network\PCSBSocket.lin.cpp	/^long PCSBSocket::WriteData(const void* inBuf,long inLength)$/;"	f	class:PCSBSocket
WriteData	.\Network\PCSBSocket.win.cpp	/^long PCSBSocket::WriteData(const void* inBuf,long inLength)$/;"	f	class:PCSBSocket
WriteData	.\Network\PCSBSocketUDP.lin.cpp	/^long PCSBSocketUDP::WriteData($/;"	f	class:PCSBSocketUDP
WriteData	.\Network\PCSBSocketUDP.win.cpp	/^long PCSBSocketUDP::WriteData($/;"	f	class:PCSBSocketUDP
WriteDegFile	.\RawImport\FAA_Obs.cpp	/^bool	WriteDegFile(const char * inFile, int lon, int lat)$/;"	f
WriteDouble	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::WriteDouble(double v)$/;"	f	class:WED_Buffer
WriteDouble	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::WriteDouble(double x)$/;"	f	class:WED_FastBuffer
WriteDouble	.\XESCore\SimpleIO.cpp	/^void	FileWriter::WriteDouble(double x)$/;"	f	class:FileWriter
WriteDouble	.\XESCore\SimpleIO.cpp	/^void	ZipFileWriter::WriteDouble(double x)$/;"	f	class:ZipFileWriter
WriteDouble	.\XESCore\SimpleIO.h	/^	inline void	WriteDouble(double x)$/;"	f	class:WriterBuffer
WriteDoublePref	.\WEDCore\WED_Document.cpp	/^void		WED_Document::WriteDoublePref(const char * in_key, double in_value)$/;"	f	class:WED_Document
WriteEnumsAtomToFile	.\XESCore\EnumSystem.cpp	/^void	WriteEnumsAtomToFile(FILE * inFile, const TokenMap& inTokens, int atomCode)$/;"	f
WriteFloat	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::WriteFloat(float v)$/;"	f	class:WED_Buffer
WriteFloat	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::WriteFloat(float x)$/;"	f	class:WED_FastBuffer
WriteFloat	.\XESCore\SimpleIO.cpp	/^void	FileWriter::WriteFloat(float x)$/;"	f	class:FileWriter
WriteFloat	.\XESCore\SimpleIO.cpp	/^void	ZipFileWriter::WriteFloat(float x)$/;"	f	class:ZipFileWriter
WriteFloat	.\XESCore\SimpleIO.h	/^	inline void	WriteFloat(float x)$/;"	f	class:WriterBuffer
WriteFloat32	.\Utils\XChunkyFileUtils.cpp	/^void			WriteFloat32(FILE * fi, float			v)$/;"	f
WriteFloat64	.\Utils\XChunkyFileUtils.cpp	/^void			WriteFloat64(FILE * fi, double			v)$/;"	f
WriteFloatHGT	.\XESCore\DEMIO.cpp	/^bool	WriteFloatHGT(const DEMGeo& inMap, const char * inFileName)$/;"	f
WriteGeoTiff	.\XESCore\DEMIO.cpp	/^bool	WriteGeoTiff(DEMGeo& inMap, const char * inFileName)$/;"	f
WriteGlobalPrefs	.\WEDCore\WED_Document.cpp	/^void	WED_Document::WriteGlobalPrefs(void)$/;"	f	class:WED_Document
WriteInt	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::WriteInt(int v)$/;"	f	class:WED_Buffer
WriteInt	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::WriteInt(int x)$/;"	f	class:WED_FastBuffer
WriteInt	.\XESCore\SimpleIO.cpp	/^void	FileWriter::WriteInt(int x)$/;"	f	class:FileWriter
WriteInt	.\XESCore\SimpleIO.cpp	/^void	ZipFileWriter::WriteInt(int x)$/;"	f	class:ZipFileWriter
WriteInt	.\XESCore\SimpleIO.h	/^	inline void	WriteInt(int x)$/;"	f	class:WriterBuffer
WriteIntPref	.\WEDCore\WED_Document.cpp	/^void		WED_Document::WriteIntPref(const char * in_key, int in_value)$/;"	f	class:WED_Document
WriteIntSetPref	.\WEDCore\WED_Document.cpp	/^void		WED_Document::WriteIntSetPref(const char * in_key, const set<int>& in_value)$/;"	f	class:WED_Document
WriteInternal	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::WriteInternal(const char * p, unsigned long l)$/;"	f	class:WED_Buffer
WriteMap	.\XESCore\MapIO.cpp	/^void	WriteMap(FILE * fi, const Pmwx& inMap, ProgressFunc inProgress, int atomID)$/;"	f
WriteMesh	.\XESCore\MeshIO.cpp	/^void WriteMesh(FILE * fi, CDT& mesh, int inAtomID, ProgressFunc func)$/;"	f
WriteNetworkSegment	.\XESCore\MapIO.cpp	/^void WriteNetworkSegment(IOWriter& inWriter, const GISNetworkSegment_t& i)$/;"	f
WriteNormalWithHeight	.\XESCore\DEMIO.cpp	/^bool	WriteNormalWithHeight(const string& out_file, const DEMGeo& elev, const DEMGeo& nx, const DEMGeo& ny, const DEMGeo& nz)$/;"	f
WriteObj3DS	.\XPTools\ConvertObj3DS.cpp	/^bool	WriteObj3DS(const char * inFilePath, const XObj& inObj, bool inReversePoly)$/;"	f
WriteObjDXF	.\XPTools\ConvertObjDXF.cpp	/^bool	WriteObjDXF(const char * inFilePath, const XObj& inObj, bool inReversePoly)$/;"	f
WriteObjPlacement	.\XESCore\MapIO.cpp	/^void	WriteObjPlacement(IOWriter& inWriter, const GISObjPlacement_t& i)$/;"	f
WriteParamMap	.\XESCore\MapIO.cpp	/^void WriteParamMap				(IOWriter& inWriter, const GISParamMap& m)$/;"	f
WritePlanarNumericAtom	.\Utils\XChunkyFileUtils.cpp	/^void	WritePlanarNumericAtom($/;"	f
WritePlanarNumericAtomDouble	.\Utils\XChunkyFileUtils.cpp	/^void	WritePlanarNumericAtomDouble($/;"	f
WritePlanarNumericAtomFloat	.\Utils\XChunkyFileUtils.cpp	/^void	WritePlanarNumericAtomFloat($/;"	f
WritePlanarNumericAtomInt	.\Utils\XChunkyFileUtils.cpp	/^void	WritePlanarNumericAtomInt($/;"	f
WritePlanarNumericAtomShort	.\Utils\XChunkyFileUtils.cpp	/^void	WritePlanarNumericAtomShort($/;"	f
WritePoint	.\XESCore\MapIO.cpp	/^void WritePoint(IOWriter& inWriter, const Point_2& p)$/;"	f
WritePointFeature	.\XESCore\MapIO.cpp	/^void WritePointFeature(IOWriter& inWriter, const GISPointFeature_t& i)$/;"	f
WritePolyObjPlacement	.\XESCore\MapIO.cpp	/^void WritePolyObjPlacement(IOWriter& inWriter, const GISPolyObjPlacement_t& i)$/;"	f
WritePolygonFeature	.\XESCore\MapIO.cpp	/^void WritePolygonFeature(IOWriter& inWriter, const GISPolygonFeature_t& i)$/;"	f
WritePoolAtoms	.\DSF\DSFPointPool.cpp	/^int				DSF32BitPointPool::WritePoolAtoms(FILE * fi, int32_t id)$/;"	f	class:DSF32BitPointPool
WritePoolAtoms	.\DSF\DSFPointPool.cpp	/^int			DSFContiguousPointPool::WritePoolAtoms(FILE * fi, int32_t id)$/;"	f	class:DSFContiguousPointPool
WritePoolAtoms	.\DSF\DSFPointPool.cpp	/^int			DSFSharedPointPool::WritePoolAtoms(FILE * fi, int32_t id)$/;"	f	class:DSFSharedPointPool
WritePoolAtoms	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int				DSF32BitPointPool::WritePoolAtoms(FILE * fi, int id)$/;"	f	class:DSF32BitPointPool
WritePoolAtoms	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int			DSFContiguousPointPool::WritePoolAtoms(FILE * fi, int id)$/;"	f	class:DSFContiguousPointPool
WritePoolAtoms	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int			DSFSharedPointPool::WritePoolAtoms(FILE * fi, int id)$/;"	f	class:DSFSharedPointPool
WritePropsTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropertyHelper::WritePropsTo(IOWriter * writer)$/;"	f	class:WED_PropertyHelper
WriteRawHGT	.\XESCore\DEMIO.cpp	/^bool	WriteRawHGT(const DEMGeo& dem, const char * inFileName, bool want_zip)$/;"	f
WriteSInt16	.\Utils\XChunkyFileUtils.cpp	/^void			WriteSInt16 (FILE * fi, 		int16_t	v)$/;"	f
WriteSInt32	.\Utils\XChunkyFileUtils.cpp	/^void			WriteSInt32 (FILE * fi, 		 int32_t	v)$/;"	f
WriteSInt8	.\Utils\XChunkyFileUtils.cpp	/^void			WriteSInt8  (FILE * fi, 		 int8_t	v)$/;"	f
WriteScaleAtoms	.\DSF\DSFPointPool.cpp	/^int				DSF32BitPointPool::WriteScaleAtoms(FILE * fi, int32_t id)$/;"	f	class:DSF32BitPointPool
WriteScaleAtoms	.\DSF\DSFPointPool.cpp	/^int			DSFContiguousPointPool::WriteScaleAtoms(FILE * fi, int32_t id)$/;"	f	class:DSFContiguousPointPool
WriteScaleAtoms	.\DSF\DSFPointPool.cpp	/^int			DSFSharedPointPool::WriteScaleAtoms(FILE * fi, int32_t id)$/;"	f	class:DSFSharedPointPool
WriteScaleAtoms	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int				DSF32BitPointPool::WriteScaleAtoms(FILE * fi, int id)$/;"	f	class:DSF32BitPointPool
WriteScaleAtoms	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int			DSFContiguousPointPool::WriteScaleAtoms(FILE * fi, int id)$/;"	f	class:DSFContiguousPointPool
WriteScaleAtoms	.\DSF\dsflib_013005\DSFPointPool.cpp	/^int			DSFSharedPointPool::WriteScaleAtoms(FILE * fi, int id)$/;"	f	class:DSFSharedPointPool
WriteShapefile	.\RawImport\ShapeIO.cpp	/^bool	WriteShapefile($/;"	f
WriteShort	.\WEDCore\WED_Buffer.cpp	/^void	WED_Buffer::WriteShort(short v)$/;"	f	class:WED_Buffer
WriteShort	.\WEDCore\WED_FastBuffer.cpp	/^void	WED_FastBuffer::WriteShort(short x)$/;"	f	class:WED_FastBuffer
WriteShort	.\XESCore\SimpleIO.cpp	/^void	FileWriter::WriteShort(short x)$/;"	f	class:FileWriter
WriteShort	.\XESCore\SimpleIO.cpp	/^void	ZipFileWriter::WriteShort(short x)$/;"	f	class:ZipFileWriter
WriteShort	.\XESCore\SimpleIO.h	/^	inline void	WriteShort(short x)$/;"	f	class:WriterBuffer
WriteStringPref	.\WEDCore\WED_Document.cpp	/^void		WED_Document::WriteStringPref(const char * in_key, const string& in_value)$/;"	f	class:WED_Document
WriteStringTable	.\DSF\DSFLibWrite.cpp	/^static void	WriteStringTable(FILE * fi, const vector<string>& v)$/;"	f	file:
WriteStringTable	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void	WriteStringTable(FILE * fi, const vector<string>& v)$/;"	f
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropBoolText::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropBoolText
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropDoubleText::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropDoubleText
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropFileText::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropFileText
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnum::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropIntEnum
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumBitfield::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropIntEnumBitfield
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumSet::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropIntEnumSet
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumSetFilter::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropIntEnumSetFilter
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntEnumSetUnion::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropIntEnumSetUnion
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropIntText::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropIntText
WriteTo	.\WEDCore\WED_PropertyHelper.cpp	/^void 		WED_PropStringText::WriteTo(IOWriter * writer)$/;"	f	class:WED_PropStringText
WriteTo	.\WEDEntities\WED_AirportChain.cpp	/^void 			WED_AirportChain::WriteTo(IOWriter * writer)$/;"	f	class:WED_AirportChain
WriteTo	.\WEDEntities\WED_KeyObjects.cpp	/^void 			WED_KeyObjects::WriteTo(IOWriter * writer)$/;"	f	class:WED_KeyObjects
WriteTo	.\WEDEntities\WED_Select.cpp	/^void 			WED_Select::WriteTo(IOWriter * writer)$/;"	f	class:WED_Select
WriteTo	.\WEDEntities\WED_Thing.cpp	/^void 			WED_Thing::WriteTo(IOWriter * writer)$/;"	f	class:WED_Thing
WriteTo	.\WEDEntities\WED_Thing.cpp	/^void 		WED_TypeField::WriteTo(IOWriter * writer)$/;"	f	class:WED_TypeField
WriteToFile	.\DSF\DSFLibWrite.cpp	/^void DSFFileWriterImp::WriteToFile(const char * inPath)$/;"	f	class:DSFFileWriterImp
WriteToFile	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^void DSFFileWriterImp::WriteToFile(const char * inPath)$/;"	f	class:DSFFileWriterImp
WriteToRaw	.\XPTools\DDSTool.cpp	/^static int WriteToRaw(const ImageInfo& info, const char * outf, int s_raw_16_bit, bool isPvr, int mip_count)$/;"	f	file:
WriteUInt16	.\Utils\XChunkyFileUtils.cpp	/^void			WriteUInt16 (FILE * fi, uint16_t	v)$/;"	f
WriteUInt32	.\Utils\XChunkyFileUtils.cpp	/^void			WriteUInt32 (FILE * fi, uint32_t	v)$/;"	f
WriteUInt8	.\Utils\XChunkyFileUtils.cpp	/^void			WriteUInt8  (FILE * fi, uint8_t	v)$/;"	f
WriteUncompressedToDDS	.\Utils\BitmapUtils.cpp	/^int	WriteUncompressedToDDS(struct ImageInfo& ioImage, const char * file_name, int use_win_gamma)$/;"	f
WriteVector	.\XESCore\MapIO.cpp	/^void WriteVector(IOWriter& writer, const T& v, F func)$/;"	f
WriteXESFile	.\XESCore\XESIO.cpp	/^void	WriteXESFile($/;"	f
WriteXML	.\WEDCore\WED_Document.cpp	/^void		WED_Document::WriteXML(FILE * xml_file)$/;"	f	class:WED_Document
Writer	.\lib_json\include\json\writer.h	/^   class JSON_API Writer$/;"	c	namespace:Json
WriterBuffer	.\XESCore\SimpleIO.h	/^	WriterBuffer(IOWriter * inWriter, PlatformType platform = platform_LittleEndian)$/;"	f	class:WriterBuffer
WriterBuffer	.\XESCore\SimpleIO.h	/^class	WriterBuffer {$/;"	c
X	.\XESTools\MapBuckets.h	/^	static	Scalar	X(const Point2& p) { return (p.x); }$/;"	f	class:MapFaceBucketTraits
X	.\XESTools\MapBuckets.h	/^	static	Scalar	X(const Point2& p) { return (p.x); }$/;"	f	class:MapHalfedgeBucketTraits
X	.\XESTools\MapBuckets.h	/^	static	Scalar	X(const Point2& p) { return (p.x); }$/;"	f	class:MapVertexBucketTraits
XAtom	.\Utils\XChunkyFileUtils.h	/^struct	XAtom : public XSpan {$/;"	s
XAtomContainer	.\Utils\XChunkyFileUtils.h	/^struct	XAtomContainer : public XSpan {$/;"	s
XAtomHeader_t	.\Utils\XChunkyFileUtils.h	/^struct	XAtomHeader_t {$/;"	s
XAtomPackedData	.\Utils\XChunkyFileUtils.h	/^struct	XAtomPackedData : public XAtom {$/;"	s
XAtomPlanerNumericTable	.\Utils\XChunkyFileUtils.h	/^struct	XAtomPlanerNumericTable : public XAtom {$/;"	s
XAtomStringTable	.\Utils\XChunkyFileUtils.h	/^struct	XAtomStringTable : public XAtom {$/;"	s
XCARBONEUTILS_H	.\Utils\XCarBoneUtils.h	24;"	d
XCHUNKYFILEUTILS_H	.\Utils\XChunkyFileUtils.h	24;"	d
XCULL_H	.\Utils\XCull.h	24;"	d
XCULL_INLINE_H	.\Utils\XCull_inline.h	24;"	d
XCarBone	.\Utils\XCarBoneUtils.h	/^struct	XCarBone {$/;"	s
XCarBones	.\Utils\XCarBoneUtils.h	/^struct	XCarBones {$/;"	s
XContext	.\UI\XWin.h	/^		typedef	void *	XContext;$/;"	t	class:XWin
XContext	.\UI\XWin.h	/^		typedef HDC		XContext;$/;"	t	class:XWin
XContext	.\UI\XWin.h	/^        typedef void*	XContext;$/;"	t	class:XWin
XCoordToS	.\ObjEdit\OE_TexEdWindow.cpp	/^float		OE_TexEdPane::XCoordToS(float inX)$/;"	f	class:OE_TexEdPane
XCull	.\Utils\XCull.h	/^class XCull {$/;"	c
XCull	.\Utils\XCull_inline.h	/^XCull<__Traits>::XCull()$/;"	f	class:XCull
XCull	.\Utils\XCull_inline.h	/^XCull<__Traits>::XCull(unsigned int 	inLayers)$/;"	f	class:XCull
XDEFS_H	.\Obj\XDefs.h	24;"	d
XESCONSTANTS_H	.\XESCore\XESConstants.h	24;"	d
XESINIT_H	.\XESCore\XESInit.h	24;"	d
XESIO_H	.\XESCore\XESIO.h	24;"	d
XESInit	.\XESCore\XESInit.cpp	/^void	XESInit(bool want_forests)$/;"	f
XFILETWIDDLE_H	.\Utils\XFileTwiddle.h	24;"	d
XGRINDERAPP_H	.\UI\XGrinderApp.h	24;"	d
XGRINDERSHELL_H	.\XPTools\XGrinderShell.h	26;"	d
XGUIAPP_H	.\UI\XGUIApp.h	24;"	d
XGrindCanQuit	.\XPTools\ObjEdit.cpp	/^bool	XGrindCanQuit(void)$/;"	f
XGrindDone	.\RenderFarmUI\RF_Main.cpp	/^void	XGrindDone(void)$/;"	f
XGrindDone	.\XPTools\ObjEdit.cpp	/^void XGrindDone(void)$/;"	f
XGrindDragLeave	.\RenderFarmUI\RF_Main.cpp	/^void	XGrindDragLeave(void)$/;"	f
XGrindDragLeave	.\XPTools\ObjEdit.cpp	/^void	XGrindDragLeave(void)$/;"	f
XGrindDragOver	.\RenderFarmUI\RF_Main.cpp	/^void	XGrindDragOver(int x, int y)$/;"	f
XGrindDragOver	.\XPTools\ObjEdit.cpp	/^void	XGrindDragOver(int x, int y)$/;"	f
XGrindDragStart	.\RenderFarmUI\RF_Main.cpp	/^void	XGrindDragStart(int x, int y)$/;"	f
XGrindDragStart	.\XPTools\ObjEdit.cpp	/^void	XGrindDragStart(int x, int y)$/;"	f
XGrindFile	.\DSFTools\DSF2TextGUI.cpp	/^void	XGrindFile(const char * inFileName)$/;"	f
XGrindFile	.\DSFTools\ENV2OverlayGUI.cpp	/^void	XGrindFile(const char * inFileName)$/;"	f
XGrindFile	.\XPTools\ConvertObj.cpp	/^void	XGrindFile(const char * inConvertFlag, const char * inSrcFile, const char * inDstFile)$/;"	f
XGrindFile	.\XPTools\Env2CSV.cpp	/^void	XGrindFile(const char * inFileName)$/;"	f
XGrindFile	.\XPTools\TaxiMaker.cpp	/^void	XGrindFile(const char * inFileName)$/;"	f
XGrindFiles	.\DSFTools\DSF2TextGUI.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\DSFTools\ENV2OverlayGUI.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\RenderFarmUI\RF_Main.cpp	/^void	XGrindFiles(const vector<string>& fileList, int x, int y)$/;"	f
XGrindFiles	.\XPTools\AddObjects.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\XPTools\Env2CSV.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\XPTools\GetImage.cpp	/^void	XGrindFiles(const vector<string>& inFiles)$/;"	f
XGrindFiles	.\XPTools\ObjEdit.cpp	/^void	XGrindFiles(const vector<string>& fileList, int x, int y)$/;"	f
XGrindFiles	.\XPTools\TaxiMaker.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\XPTools\TigerTool.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\XPTools\ViewObj.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindFiles	.\XPTools\XGrinderShell.cpp	/^void	XGrindFiles(const vector<string>& files)$/;"	f
XGrindInit	.\DSFTools\DSF2TextGUI.cpp	/^void	XGrindInit(string& t)$/;"	f
XGrindInit	.\DSFTools\ENV2OverlayGUI.cpp	/^void	XGrindInit(string& t)$/;"	f
XGrindInit	.\RenderFarmUI\RF_Main.cpp	/^void	XGrindInit(void)$/;"	f
XGrindInit	.\XPTools\AddObjects.cpp	/^void	XGrindInit(string& outString)$/;"	f
XGrindInit	.\XPTools\Env2CSV.cpp	/^void	XGrindInit(string& t)$/;"	f
XGrindInit	.\XPTools\GetImage.cpp	/^void	XGrindInit(string& outName)$/;"	f
XGrindInit	.\XPTools\ObjEdit.cpp	/^void	XGrindInit(string& outName)$/;"	f
XGrindInit	.\XPTools\TaxiMaker.cpp	/^void	XGrindInit(string& outTitle)$/;"	f
XGrindInit	.\XPTools\TigerTool.cpp	/^void	XGrindInit(string& t)$/;"	f
XGrindInit	.\XPTools\ViewObj.cpp	/^void	XGrindInit(void)$/;"	f
XGrindInit	.\XPTools\XGrinderShell.cpp	/^void	XGrindInit(string& t)$/;"	f
XGrinderMenuPick	.\DSFTools\DSF2TextGUI.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderMenuPick	.\DSFTools\ENV2OverlayGUI.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderMenuPick	.\XPTools\AddObjects.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderMenuPick	.\XPTools\Env2CSV.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderMenuPick	.\XPTools\GetImage.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderMenuPick	.\XPTools\TaxiMaker.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderMenuPick	.\XPTools\XGrinderShell.cpp	/^int	XGrinderMenuPick(xmenu menu, int item)$/;"	f
XGrinderWin	.\UI\XGrinderApp.cpp	/^XGrinderWin::XGrinderWin() : XWin(1, gTitle.c_str(),$/;"	f	class:XGrinderWin
XGrinderWin	.\UI\XGrinderApp.cpp	/^class	XGrinderWin : public XWin {$/;"	c	file:
XGrinder_AddMenu	.\UI\XGrinderApp.cpp	/^xmenu	XGrinder_AddMenu(const char * title, const char ** items)$/;"	f
XGrinder_Quit	.\UI\XGUIApp.cpp	/^void	XGrinder_Quit(void)$/;"	f
XGrinder_Quit	.\UI\XGrinderApp.cpp	/^void	XGrinder_Quit(void)$/;"	f
XGrinder_Quit	.\UI\XWidgetApp.cpp	/^void	XGrinder_Quit(void)$/;"	f
XGrinder_SetTitle	.\UI\XWidgetApp.cpp	/^void XGrinder_SetTitle(const char * t)$/;"	f
XGrinder_SetWindowTitle	.\UI\XGrinderApp.cpp	/^void	XGrinder_SetWindowTitle(const char * title)$/;"	f
XGrinder_ShowMessage	.\UI\XGrinderApp.cpp	/^void	XGrinder_ShowMessage(const char * fmt, ...)$/;"	f
XMD_H	.\Utils\BitmapUtils.cpp	176;"	d	file:
XMLObject	.\Network\XMLObject.cpp	/^XMLObject::XMLObject(const std::string& inTag) : mTag(inTag)$/;"	f	class:XMLObject
XMLObject	.\Network\XMLObject.h	/^class	XMLObject {$/;"	c
XML_Name	.\WEDCore\WED_PropertyHelper.h	/^struct XML_Name : public pair<const char *, const char *> { XML_Name(const char * a, const char * b) : pair<const char *, const char *>(a,b) { } };$/;"	f	struct:XML_Name
XML_Name	.\WEDCore\WED_PropertyHelper.h	/^struct XML_Name : public pair<const char *, const char *> { XML_Name(const char * a, const char * b) : pair<const char *, const char *>(a,b) { } };$/;"	s
XOBJBUILDER_H	.\Obj\XObjBuilder.h	25;"	d
XOBJDEFS_H	.\Obj\XObjDefs.h	24;"	d
XOBJREADWRITE_H	.\Obj\XObjReadWrite.h	24;"	d
XObj	.\Obj\XObjDefs.h	/^struct	XObj {$/;"	s
XObj8	.\Obj\XObjDefs.h	/^struct	XObj8 {$/;"	s
XObj8Read	.\Obj\XObjReadWrite.cpp	/^bool	XObj8Read(const char * inFile, XObj8& outObj)$/;"	f
XObj8Write	.\Obj\XObjReadWrite.cpp	/^bool	XObj8Write(const char * inFile, const XObj8& outObj)$/;"	f
XObjAnim8	.\Obj\XObjDefs.h	/^struct	XObjAnim8 {$/;"	s
XObjBuilder	.\Obj\XObjBuilder.cpp	/^XObjBuilder::XObjBuilder(XObj8 * inObj) : obj(inObj), lod(NULL)$/;"	f	class:XObjBuilder
XObjBuilder	.\Obj\XObjBuilder.h	/^ class	XObjBuilder {$/;"	c
XObjCmd	.\Obj\XObjDefs.h	/^struct XObjCmd {$/;"	s
XObjCmd8	.\Obj\XObjDefs.h	/^struct	XObjCmd8 {$/;"	s
XObjKey	.\Obj\XObjDefs.h	/^struct XObjKey {$/;"	s
XObjLOD8	.\Obj\XObjDefs.h	/^struct	XObjLOD8 {$/;"	s
XObjManip8	.\Obj\XObjDefs.h	/^struct XObjManip8 {$/;"	s
XObjPanelRegion8	.\Obj\XObjDefs.h	/^struct XObjPanelRegion8 {$/;"	s
XObjRead	.\Obj\XObjReadWrite.cpp	/^bool	XObjRead(const char * inFile, XObj& outObj)$/;"	f
XObjWin	.\XPTools\ViewObj.cpp	/^XObjWin::XObjWin(const char * inFileName) : XWinGL(1, inFileName ? inFileName : "Drag Obj Here",$/;"	f	class:XObjWin
XObjWin	.\XPTools\ViewObj.cpp	/^class	XObjWin : public XWinGL {$/;"	c	file:
XObjWrite	.\Obj\XObjReadWrite.cpp	/^bool	XObjWrite(const char * inFile, const XObj& inObj)$/;"	f
XObjWriteEmbedded	.\Obj\XObjWriteEmbedded.cpp	/^bool	XObjWriteEmbedded(const char * inFile, const XObj8& inObj)$/;"	f
XObjWriteEmbedded_h	.\Obj\XObjWriteEmbedded.h	11;"	d
XPDM_LoadObjectCB	.\WEDXPlugin\WED_XPluginObject.cpp	/^void WED_XPluginObject::XPDM_LoadObjectCB(const char* inPath,void * inRef)$/;"	f	class:WED_XPluginObject
XPLMMouseStatus	.\ObjEdit\OE_Zoomer3d.h	/^typedef int XPLMMouseStatus;$/;"	t
XPLMMouseStatus	.\RenderFarmUI\RF_MapTool.h	/^enum XPLMMouseStatus {$/;"	g
XPOPUP_H	.\UI\XPopup.h	2;"	d
XPT_PACKAGE_VER	.\XPTools\version.h	8;"	d
XPWIDGETWIN_H	.\UI\XPWidgetWin.h	24;"	d
XPWidgetWin	.\UI\XPWidgetWin.cpp	/^XPWidgetWin::XPWidgetWin() :$/;"	f	class:XPWidgetWin
XPWidgetWin	.\UI\XPWidgetWin.h	/^class	XPWidgetWin : public XWinGL {$/;"	c
XPixelToLon	.\RenderFarmUI\RF_MapZoomer.cpp	/^double	RF_MapZoomer::XPixelToLon(double x)$/;"	f	class:RF_MapZoomer
XPixelToLon	.\WEDMap\WED_MapZoomerNew.cpp	/^double	WED_MapZoomerNew::XPixelToLon(double x)$/;"	f	class:WED_MapZoomerNew
XPluginDisable	.\WEDXPlugin\WED_XPlugin.cpp	/^PLUGIN_API void XPluginDisable(void)$/;"	f
XPluginEnable	.\WEDXPlugin\WED_XPlugin.cpp	/^PLUGIN_API int XPluginEnable(void)$/;"	f
XPluginReceiveMessage	.\WEDXPlugin\WED_XPlugin.cpp	/^PLUGIN_API void XPluginReceiveMessage(XPLMPluginID inFrom, long inMsg, void * inParam)$/;"	f
XPluginStart	.\WEDXPlugin\WED_XPlugin.cpp	/^PLUGIN_API int XPluginStart(char *	outName,char *	outSig,char *outDesc)$/;"	f
XPluginStop	.\WEDXPlugin\WED_XPlugin.cpp	/^PLUGIN_API void XPluginStop(void)$/;"	f
XPointPool	.\Utils\XUtils.cpp	/^XPointPool::XPointPool()$/;"	f	class:XPointPool
XPointPool	.\Utils\XUtils.h	/^class	XPointPool {$/;"	c
XPointPoolImp	.\Utils\XUtils.cpp	/^struct	XPointPool::XPointPoolImp {$/;"	s	class:XPointPool	file:
XPopup	.\UI\XPopup.h	/^class XPopup$/;"	c
XPopup	.\UI\XPopup.lin.cpp	/^XPopup::XPopup()$/;"	f	class:XPopup
XRES_AddResource	.\Installer\XResources.win.cpp	/^int		XRES_AddResource(void * inFile, char * inPtr, int inSize)$/;"	f
XRES_BeginSettingResources	.\Installer\XResources.win.cpp	/^void *	XRES_BeginSettingResources(const char * inFilePath)$/;"	f
XRES_CountResources	.\Installer\XResources.win.cpp	/^int		XRES_CountResources()$/;"	f
XRES_EndSettingResources	.\Installer\XResources.win.cpp	/^int		XRES_EndSettingResources(void * inFile)$/;"	f
XRES_GetResourceData	.\Installer\XResources.win.cpp	/^int		XRES_GetResourceData(char ** outPtr, int * outSize)$/;"	f
XSpan	.\Utils\XChunkyFileUtils.cpp	/^XSpan::XSpan() :$/;"	f	class:XSpan
XSpan	.\Utils\XChunkyFileUtils.h	/^struct	XSpan {$/;"	s
XUTILS_EXCLUDE_MAC_CRAP	.\AC3DPlugins\XPExporterMac_xcode.h	28;"	d
XUTILS_EXCLUDE_MAC_CRAP	.\Tiger\(TIGERRead backup.cpp).cpp	25;"	d	file:
XUTILS_H	.\Utils\XUtils.h	24;"	d
XWIDGETAPP_H	.\UI\XWidgetApp.h	24;"	d
XWINGL_H	.\UI\XWinGL.h	24;"	d
XWIN_H	.\UI\XWin.h	24;"	d
XWin	.\UI\XWin.h	/^class	XWin$/;"	c
XWin	.\UI\XWin.lin.cpp	/^XWin::XWin($/;"	f	class:XWin
XWin	.\UI\XWin.lin.cpp	/^XWin::XWin(int default_dnd, QWidget *parent) : QMainWindow(parent), mInited(false)$/;"	f	class:XWin
XWin	.\UI\XWin.win.cpp	/^XWin::XWin($/;"	f	class:XWin
XWin	.\UI\XWin.win.cpp	/^XWin::XWin(int default_dnd)$/;"	f	class:XWin
XWinFileReceiver	.\UI\XWin32DND.h	/^class	XWinFileReceiver {$/;"	c
XWinGL	.\UI\XWinGL.h	/^class	XWinGL : public XWin$/;"	c
XWinGL	.\UI\XWinGL.lin.cpp	/^XWinGL::XWinGL(int default_dnd, XWinGL* inShare, QWidget* parent) : XWin(default_dnd, parent), mInited(false)$/;"	f	class:XWinGL
XWinGL	.\UI\XWinGL.lin.cpp	/^XWinGL::XWinGL(int default_dnd, const char * inTitle, int inAttributes, int inX, int inY, int inWidth, int inHeight, XWinGL * inShare, QWidget* parent) : XWin(default_dnd, inTitle, inAttributes, inX, inY, inWidth, inHeight, parent), mInited(false)$/;"	f	class:XWinGL
XWinGL	.\UI\XWinGL.win.cpp	/^XWinGL::XWinGL(int default_dnd, XWinGL * inShare) :$/;"	f	class:XWinGL
XWinGL	.\UI\XWinGL.win.cpp	/^XWinGL::XWinGL(int default_dnd, const char * inTitle, int inAttributes, int inX, int inY, int inWidth, int inHeight, XWinGL * inShare) :$/;"	f	class:XWinGL
XYZ	.\Utils\ObjUtils.cpp	/^	XYZ$/;"	e	enum:__anon94	file:
XYz	.\Utils\ObjUtils.cpp	/^	XYz,$/;"	e	enum:__anon94	file:
X_SCALE	.\GUI\GUI_Fonts.cpp	51;"	d	file:
X_monotone_curve_2	.\XESCore\MapDefs.h	/^typedef Traits_2::X_monotone_curve_2            X_monotone_curve_2;$/;"	t
X_monotone_curve_2	.\XESCore\MapIO.cpp	/^	typedef Arrangement_2::X_monotone_curve_2     X_monotone_curve_2;$/;"	t	class:PmwxFmt	file:
XyZ	.\Utils\ObjUtils.cpp	/^	XyZ,$/;"	e	enum:__anon94	file:
Xyz	.\Utils\ObjUtils.cpp	/^	Xyz,$/;"	e	enum:__anon94	file:
Y	.\XESTools\MapBuckets.h	/^	static	Scalar	Y(const Point2& p) { return (p.y); }$/;"	f	class:MapFaceBucketTraits
Y	.\XESTools\MapBuckets.h	/^	static	Scalar	Y(const Point2& p) { return (p.y); }$/;"	f	class:MapHalfedgeBucketTraits
Y	.\XESTools\MapBuckets.h	/^	static	Scalar	Y(const Point2& p) { return (p.y); }$/;"	f	class:MapVertexBucketTraits
YCoordToT	.\ObjEdit\OE_TexEdWindow.cpp	/^float		OE_TexEdPane::YCoordToT(float inY)$/;"	f	class:OE_TexEdPane
YPixelToLat	.\RenderFarmUI\RF_MapZoomer.cpp	/^double	RF_MapZoomer::YPixelToLat(double y)$/;"	f	class:RF_MapZoomer
YPixelToLat	.\WEDMap\WED_MapZoomerNew.cpp	/^double	WED_MapZoomerNew::YPixelToLat(double y)$/;"	f	class:WED_MapZoomerNew
Y_SCALE	.\GUI\GUI_Fonts.cpp	52;"	d	file:
ZIP_ERRNO	.\Utils\zip.h	66;"	d
ZIP_INTERNALERROR	.\Utils\zip.h	68;"	d
ZIP_OK	.\Utils\zip.h	65;"	d
ZIP_PARAMERROR	.\Utils\zip.h	67;"	d
ZLIBUTILS_H	.\Utils\ZLIBUtils.h	24;"	d
ZONING_H	.\XESCore\Zoning.h	25;"	d
Z_BUFSIZE	.\Utils\zip.c	37;"	d	file:
Z_MAXFILENAMEINZIP	.\Utils\zip.c	41;"	d	file:
ZapBorders	.\XESCore\MeshAlgs.cpp	/^inline void ZapBorders(CDT::Vertex_handle v)$/;"	f
ZeroFixd	.\VPF\VPFTable.cpp	/^inline void ZeroFixd(double& v)$/;"	f
ZeroFixf	.\VPF\VPFTable.cpp	/^inline void ZeroFixf(float& v)$/;"	f
ZipBlock	.\Utils\XFileTwiddle.cpp	/^int	ZipBlock(const char * inRaw, int inSize,$/;"	f
ZipFileWriter	.\XESCore\SimpleIO.cpp	/^ZipFileWriter::ZipFileWriter(const char * inFileName, const char * inEntryName, PlatformType platform)$/;"	f	class:ZipFileWriter
ZipFileWriter	.\XESCore\SimpleIO.h	/^class	ZipFileWriter : public IOWriter {$/;"	c
ZoneManMadeAreas	.\XESCore\Zoning.cpp	/^void	ZoneManMadeAreas($/;"	f
ZoneOneFace	.\XESCore\Zoning.cpp	/^static void ZoneOneFace($/;"	f	file:
ZonePromoteTable	.\XESCore\NetTables.h	/^typedef hash_map<int, ZoningPromote>			ZonePromoteTable;$/;"	t
ZoningInfoTable	.\XESCore\Zoning.h	/^typedef map<int, ZoningInfo_t>	ZoningInfoTable;$/;"	t
ZoningInfo_t	.\XESCore\Zoning.h	/^struct ZoningInfo_t {$/;"	s
ZoningPromote	.\XESCore\NetTables.h	/^struct	ZoningPromote {$/;"	s
ZoningRuleTable	.\XESCore\Zoning.h	/^typedef vector<ZoningRule_t>	ZoningRuleTable;$/;"	t
ZoningRule_t	.\XESCore\Zoning.h	/^struct ZoningRule_t {$/;"	s
ZoomAround	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::ZoomAround($/;"	f	class:RF_MapZoomer
ZoomAround	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::ZoomAround($/;"	f	class:WED_MapZoomerNew
ZoomAroundPoint	.\ObjEdit\OE_Zoomer3d.cpp	/^void	OE_Zoomer3d::ZoomAroundPoint($/;"	f	class:OE_Zoomer3d
ZoomShowAll	.\RenderFarmUI\RF_MapZoomer.cpp	/^void	RF_MapZoomer::ZoomShowAll(void)$/;"	f	class:RF_MapZoomer
ZoomShowAll	.\WEDMap\WED_MapPane.cpp	/^void	WED_MapPane::ZoomShowAll(void)$/;"	f	class:WED_MapPane
ZoomShowAll	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::ZoomShowAll(void)$/;"	f	class:WED_MapZoomerNew
ZoomShowAll	.\WEDTCE\WED_TCEPane.cpp	/^void	WED_TCEPane::ZoomShowAll(void)$/;"	f	class:WED_TCEPane
ZoomShowArea	.\WEDMap\WED_MapZoomerNew.cpp	/^void	WED_MapZoomerNew::ZoomShowArea($/;"	f	class:WED_MapZoomerNew
ZoomShowSel	.\WEDMap\WED_MapPane.cpp	/^void WED_MapPane::ZoomShowSel(void)$/;"	f	class:WED_MapPane
_BitmapUtils_h_	.\Utils\BitmapUtils.h	24;"	d
_CRT_SECURE_NO_WARNINGS	.\lib_json\src\test_lib_json\jsontest.cpp	6;"	d	file:
_EndianUtils_h_	.\Utils\EndianUtils.h	24;"	d
_EnvDefs_h_	.\Env\EnvDefs.h	24;"	d
_EnvParser_h_	.\Env\EnvParser.h	24;"	d
_EnvWrite_h_	.\Env\EnvWrite.h	24;"	d
_Fonts_h_	.\UI\FontMgr.h	24;"	d
_GNU_SOURCE	.\linuxinit\initializer.cpp	2;"	d	file:
_GSHHS	.\RawImport\gshhs.h	51;"	d
_Interpolation_h_	.\Utils\Interpolation.h	24;"	d
_MSL_THROW	.\Obj\XDefs.h	214;"	d
_MSL_THROW	.\Obj\XDefs.h	230;"	d
_MSL_THROW	.\Utils\AssertUtils.cpp	31;"	d	file:
_MSL_THROW	.\WEDCore\WED_Errors.h	/^	wed_error_exception() _MSL_THROW ;$/;"	m	class:wed_error_exception
_MSL_THROW	.\WEDCore\WED_Errors.h	/^	wed_error_exception(const char * file, int line, const char * fmt, ...) _MSL_THROW ;$/;"	m	class:wed_error_exception
_MSL_THROW	.\WEDCore\WED_Errors.h	/^	wed_error_exception(const char * inMessage, const char * file, int line) _MSL_THROW ;$/;"	m	class:wed_error_exception
_MSL_THROW	.\WEDCore\WED_Errors.h	/^	wed_error_exception(const wed_error_exception& rhs) _MSL_THROW ;$/;"	m	class:wed_error_exception
_MSL_THROW	.\WEDCore\WED_Errors.h	/^	wed_error_exception(int os_error_code, const char * file, int line) _MSL_THROW ;$/;"	m	class:wed_error_exception
_MSL_THROW	.\WEDCore\WED_Errors.h	/^    virtual const char* what () const _MSL_THROW;$/;"	m	class:wed_error_exception
_MSL_THROW	.\WEDCore\WED_Errors.h	42;"	d
_NET_WM_STATE_ADD	.\UI\XWin.h	/^  _NET_WM_STATE_ADD,$/;"	e	enum:__anon85
_NET_WM_STATE_REMOVE	.\UI\XWin.h	/^  _NET_WM_STATE_REMOVE,$/;"	e	enum:__anon85
_NET_WM_STATE_TOGGLE	.\UI\XWin.h	/^  _NET_WM_STATE_TOGGLE$/;"	e	enum:__anon85
_PCSBSocket_UDP_h_	.\Network\PCSBSocketUDP.h	25;"	d
_PCSBSocket_h_	.\Network\PCSBSocket.h	24;"	d
_PM_Traits	.\XESCore\CGALTypes.h	/^class	_PM_Traits : public CGAL::Arr_segment_traits_2<Kernel> {$/;"	c
_POINT	.\RawImport\gshhs.h	/^struct	_POINT {	\/* Each lon, lat pair is stored in micro-degrees in 4-byte integer format *\/$/;"	s
_POSIX_SOURCE	.\RawImport\gshhs.h	53;"	d
_Persistence_h_	.\Env\Persistence.h	24;"	d
_PlatformUtils_h_	.\Utils\PlatformUtils.h	24;"	d
_R	.\WEDCore\WED_AppMain.cpp	103;"	d	file:
_R	.\WEDCore\WED_AppMain.cpp	108;"	d	file:
_R	.\WEDCore\WED_AppMain.cpp	187;"	d	file:
_R	.\WEDCore\WED_AppMain.cpp	192;"	d	file:
_TCL	.\AC3DPlugins\TclStubs.h	38;"	d
_TRUNCATE	.\GUI\GUI_Window.cpp	53;"	d	file:
_VERBUF_SIZE	.\XPTools\version.h	25;"	d
_XMLObject_h_	.\Network\XMLObject.h	24;"	d
_XWIN32DND_H_	.\UI\XWin32DND.h	24;"	d
__ASSERTMACROS__	.\Obj\XDefs.h	257;"	d
__AssertHandler	.\Utils\AssertUtils.cpp	/^void __AssertHandler(const char * c, const char * f, int l)$/;"	f
__DEBUGGING__	.\GUI\GUI_Window.cpp	33;"	d	file:
__DEBUGGING__	.\WEDCore\WED_AppMain.cpp	24;"	d	file:
__DebugAssertHandler	.\Utils\AssertUtils.cpp	/^void __DebugAssertHandler(const char * c, const char * f, int l)$/;"	f
__Dummy	.\Interfaces\IBase.h	/^	virtual void			__Dummy(void) { }$/;"	f	class:IBase
__INTEL__	.\Utils\BitmapUtils.cpp	179;"	d	file:
__MATRIX_H__	.\Utils\MatrixUtils.h	29;"	d
__SAFE_CAST	.\Interfaces\IBase.h	/^inline T * __SAFE_CAST(IBase * inf)$/;"	f
__StartCommand	.\WEDCore\WED_Archive.cpp	/^void			WED_Archive::__StartCommand(const string& inName, const char * file, int line)$/;"	f	class:WED_Archive
__StartCommand	.\WEDCore\WED_Persistent.cpp	/^void		WED_Persistent::__StartCommand(const string& inName, const char * inFile, int inLine)$/;"	f	class:WED_Persistent
__StartCommand	.\WEDCore\WED_UndoMgr.cpp	/^void	WED_UndoMgr::__StartCommand(const string& inName, const char * file, int line)$/;"	f	class:WED_UndoMgr
__StartOperation	.\WEDEntities\WED_Thing.cpp	/^void	WED_Thing::__StartOperation(const char * op_name, const char * inFile, int inLine)$/;"	f	class:WED_Thing
__X86_WIN32_DLL_H__	.\AC3DPlugins\x86_Win32 DLL.h	25;"	d
__boolean_op_func	.\Utils\PolyRasterUtils.h	465;"	d
__boolean_op_func	.\Utils\PolyRasterUtils.h	521;"	d
__dev_vector	.\Obj\XDefs.h	/^					__dev_vector(InputIterator first, InputIterator last,const Allocator& a = Allocator()) : base_type(first,last, a){}$/;"	f	class:std::__dev_vector
__dev_vector	.\Obj\XDefs.h	/^					__dev_vector(const __dev_vector& x													 ) : base_type(x			){}$/;"	f	class:std::__dev_vector
__dev_vector	.\Obj\XDefs.h	/^				explicit __dev_vector(									const Allocator& a = Allocator()) : base_type(		  a	){}$/;"	f	class:std::__dev_vector
__dev_vector	.\Obj\XDefs.h	/^				explicit __dev_vector(size_type n, const T& value = T(),const Allocator& a = Allocator()) : base_type(n,value,a	){}$/;"	f	class:std::__dev_vector
__dev_vector	.\Obj\XDefs.h	/^		class __dev_vector : public vector<T, Allocator>$/;"	c	namespace:std
__func__	.\Obj\XDefs.h	237;"	d
__gl_error_check	.\Utils\GLDebugMacros.cpp	/^void __gl_error_check(const char * file, int line)$/;"	f
__gnu_cxx	.\Obj\XDefs.h	/^		namespace __gnu_cxx {$/;"	n
__gverbuf	.\XPTools\version.h	/^static char __gverbuf[_VERBUF_SIZE];$/;"	v
__i386__	.\RawImport\ShapeIO.cpp	39;"	d	file:
__i386__	.\RawImport\ShapeIO.cpp	44;"	d	file:
__i386__defined	.\RawImport\ShapeIO.cpp	40;"	d	file:
__i386__defined	.\RawImport\ShapeIO.cpp	45;"	d	file:
__stdcall	.\Utils\ObjUtilsGL.cpp	51;"	d	file:
_basename	.\linuxinit\initializer.cpp	/^char* _basename(const char* o)$/;"	f
_clean_ptr	.\Utils\RTree2.h	/^template <typename T>	T * _clean_ptr(T * v)	{	return reinterpret_cast<T*>(reinterpret_cast<uintptr_t>(v) & lsb_mask);}$/;"	f
_clear_lsb	.\Utils\RTree2.h	/^template <typename T>	T * _clear_lsb(T * v)	{	return reinterpret_cast<T*>(reinterpret_cast<uintptr_t>(v) & lsb_mask);}$/;"	f
_cmp_tri_degree_gt	.\DSF\tri_stripper_101\tri_stripper.h	/^	struct _cmp_tri_degree_gt$/;"	s	class:triangle_stripper::tri_stripper
_cmp_tri_interface_lt	.\DSF\tri_stripper_101\tri_stripper.h	/^	struct _cmp_tri_interface_lt$/;"	s	class:triangle_stripper::tri_stripper
_drawself	.\UI\XPopup.lin.cpp	/^void XPopup::_drawself()$/;"	f	class:XPopup
_event_loop	.\UI\XPopup.lin.cpp	/^void XPopup::_event_loop()$/;"	f	class:XPopup
_find_stale_files	.\linuxinit\initializer.cpp	/^_find_stale_files(const struct dirent* e)$/;"	f	file:
_get_lsb	.\Utils\RTree2.h	/^template <typename T>	bool _get_lsb(T * v)	{	return reinterpret_cast<T*>(reinterpret_cast<uintptr_t>(v) & lsb_bit);}$/;"	f
_handle_signal	.\linuxinit\initializer.cpp	/^void Initializer::_handle_signal(int signal, siginfo_t* info, void* context)$/;"	f	class:Initializer
_hide	.\UI\XPopup.lin.cpp	/^void XPopup::_hide()$/;"	f	class:XPopup
_init_opengl	.\UI\XPopup.lin.cpp	/^void XPopup::_init_opengl(int w, int h)$/;"	f	class:XPopup
_move_to_mousepointer	.\UI\XPopup.lin.cpp	/^void XPopup::_move_to_mousepointer()$/;"	f	class:XPopup
_mytype	.\DSF\tri_stripper_101\graph_array.h	/^	typedef graph_array<nodetype, arctype> _mytype;$/;"	t	class:common_structures::graph_array
_resize	.\UI\XPopup.lin.cpp	/^void XPopup::_resize(int w, int h)$/;"	f	class:XPopup
_set_lsb	.\Utils\RTree2.h	/^template <typename T>	T * _set_lsb(T * v)		{	return reinterpret_cast<T*>(reinterpret_cast<uintptr_t>(v) | lsb_bit);}$/;"	f
_strdup	.\linuxinit\initializer.cpp	/^char* _strdup(const char* o)$/;"	f
_unlink_stale_files	.\linuxinit\initializer.cpp	/^_unlink_stale_files(void)$/;"	f	file:
_unz_H	.\Utils\unzip.h	42;"	d
_zip_H	.\Utils\zip.h	46;"	d
a	.\OneOffs\gen_roads10.h	/^	float	a[4];$/;"	m	struct:perlin_params
a	.\Utils\CompGeomDefs2.h	/^	double	a;$/;"	m	struct:Line2
a	.\Utils\SQLUtils.h	/^	A		a;$/;"	m	struct:sql_row1
a	.\Utils\SQLUtils.h	/^	A		a;$/;"	m	struct:sql_row2
a	.\Utils\SQLUtils.h	/^	A		a;$/;"	m	struct:sql_row3
a	.\Utils\SQLUtils.h	/^	A		a;$/;"	m	struct:sql_row4
a	.\Utils\SQLUtils.h	/^	A		a;$/;"	m	struct:sql_row5
a	.\WEDMap\WED_CreateEdgeTool.cpp	/^	Point2	a;$/;"	m	struct:sort_by_seg_rat	file:
a_time	.\XESCore\BlockFill.cpp	/^		double	a_time;$/;"	m	struct:reg_info_t	file:
a_tri	.\AC3DPlugins\uv_mapper.cpp	/^struct	a_tri {$/;"	s	file:
abs_average	.\ObjEdit\OE_CubeDeformer.cpp	/^inline	void	abs_average(double& a, double& b)$/;"	f
ac3d_callbacks	.\AC3DPlugins\dsf_export.cpp	/^static DSFCallbacks_t ac3d_callbacks = {$/;"	v	file:
accept	.\OneOffs\gen_roads.cpp	/^	virtual void accept(road_elem * e) { add(e); }$/;"	f	class:road_composite
accept	.\OneOffs\gen_roads.cpp	/^	virtual void accept(road_elem * e) { parent = e; }$/;"	f	class:road_underside
accept	.\OneOffs\gen_roads.cpp	/^	virtual void accept(road_elem * ie) { e = ie; }$/;"	f	class:road
accept	.\OneOffs\gen_roads.cpp	/^	virtual void accept(road_elem * ie) { e = ie; }$/;"	f	class:road_pylons
accum	.\Obj\XObjWriteEmbedded.cpp	/^	T *		accum(T v) { return (T *) accum_mem(&v,sizeof(T)); }$/;"	f	struct:mem_block
accum	.\WEDImportExport\WED_AptIE.cpp	/^inline	void	accum(AptPolygon_t& poly, int code, const Point2& pt, const Point2& ctrl, const set<int>& attrs)$/;"	f
accum_attribute	.\OneOffs\osm2shape.c	/^static void accum_attribute(const char * key, int len)$/;"	f	file:
accum_box	.\WEDMap\WED_MapPane.cpp	/^static int accum_box(ISelectable * who, void * ref)$/;"	f	file:
accum_ccb	.\RawImport\ShapeIO.cpp	/^static int accum_ccb($/;"	f	file:
accum_chain	.\DSF\DSFLibWrite.cpp	/^	ChainSpec *					accum_chain;$/;"	m	class:DSFFileWriterImp	file:
accum_chain	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	ChainSpec *					accum_chain;$/;"	m	class:DSFFileWriterImp	file:
accum_exclusion	.\WEDImportExport\WED_DSFExport.cpp	/^	void accum_exclusion(const string& key, const string& value)$/;"	f	struct:DSF_ResourceTable
accum_filter	.\WEDImportExport\WED_DSFExport.cpp	/^	int accum_filter(const string& icao_filter)$/;"	f	struct:DSF_ResourceTable
accum_mem	.\Obj\XObjWriteEmbedded.cpp	/^	void *	accum_mem(void * mem, int len)$/;"	f	struct:mem_block
accum_obj	.\WEDImportExport\WED_DSFExport.cpp	/^	int accum_obj(const string& f, int show_level)$/;"	f	struct:DSF_ResourceTable
accum_patch	.\DSF\DSFLibWrite.cpp	/^	PatchSpec *					accum_patch;$/;"	m	class:DSFFileWriterImp	file:
accum_patch	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	PatchSpec *					accum_patch;$/;"	m	class:DSFFileWriterImp	file:
accum_patch_pool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSFSharedPointPool *		accum_patch_pool;$/;"	m	class:DSFFileWriterImp	file:
accum_pol	.\WEDImportExport\WED_DSFExport.cpp	/^	int accum_pol(const string& f, int show_level)$/;"	f	struct:DSF_ResourceTable
accum_poly	.\DSF\DSFLibWrite.cpp	/^	PolygonSpec *				accum_poly;$/;"	m	class:DSFFileWriterImp	file:
accum_poly	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	PolygonSpec *				accum_poly;$/;"	m	class:DSFFileWriterImp	file:
accum_poly_winding	.\DSF\DSFLibWrite.cpp	/^	DSFTupleVectorVector		accum_poly_winding;$/;"	m	class:DSFFileWriterImp	file:
accum_poly_winding	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSFTupleVectorVector		accum_poly_winding;$/;"	m	class:DSFFileWriterImp	file:
accum_primitive	.\DSF\DSFLibWrite.cpp	/^	TriPrimitive *				accum_primitive;$/;"	m	class:DSFFileWriterImp	file:
accum_primitive	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	TriPrimitive *				accum_primitive;$/;"	m	class:DSFFileWriterImp	file:
accum_str	.\Obj\XObjWriteEmbedded.cpp	/^int accum_str(vector<string>& strs, const string& ns)$/;"	f
accum_unviable_recursive	.\WEDWindows\WED_GroupCommands.cpp	/^static void accum_unviable_recursive(WED_Thing * who, set<WED_Thing *>& unviable)$/;"	f	file:
accumulate	.\Obj\ObjPointPool.cpp	/^int		ObjPointPool::accumulate(const float pt[])$/;"	f	class:ObjPointPool
accumulate	.\Utils\XUtils.cpp	/^	int		accumulate(const float xyz[3], const float st[2])$/;"	f	struct:XPointPool::XPointPoolImp
accumulate	.\Utils\XUtils.cpp	/^int		XPointPool::accumulate(const float xyz[3], const float st[2])$/;"	f	class:XPointPool
act_x	.\WEDCore\WED_TexMgr.h	/^		int			act_x;$/;"	m	struct:WED_TexMgr::TexInfo
act_y	.\WEDCore\WED_TexMgr.h	/^		int			act_y;$/;"	m	struct:WED_TexMgr::TexInfo
active_seg_dead	.\Utils\PolyRasterUtils.h	/^		active_seg_dead(Number n) : current_scan_y(n) { }$/;"	f	struct:PolyRasterizer::active_seg_dead
active_seg_dead	.\Utils\PolyRasterUtils.h	/^	struct active_seg_dead {$/;"	s	struct:PolyRasterizer
active_side	.\OGLE\ogle.cpp	/^	int						active_side;$/;"	m	struct:OGLE_Rec	file:
actives	.\Utils\PolyRasterUtils.h	/^	vector<ActiveSeg>			actives;$/;"	m	struct:PolyRasterizer
add	.\OneOffs\gen_roads.cpp	/^	void add(road_elem * e) { parts.push_back(e); }$/;"	f	class:road_composite
add	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::add( TestCaseFactory factory )$/;"	f	class:JsonTest::Runner
addChildValues_	.\lib_json\include\json\writer.h	/^      bool addChildValues_;$/;"	m	class:Json::StyledStreamWriter
addChildValues_	.\lib_json\include\json\writer.h	/^      bool addChildValues_;$/;"	m	class:Json::StyledWriter
addComment	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::addComment( Location begin, $/;"	f	class:Json::Reader
addError	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::addError( const std::string &message, $/;"	f	class:Json::Reader
addErrorAndRecover	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::addErrorAndRecover( const std::string &message, $/;"	f	class:Json::Reader
addFailure	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::addFailure( const char *file, unsigned int line,$/;"	f	class:JsonTest::TestResult
addFailureInfo	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::addFailureInfo( const char *file, unsigned int line,$/;"	f	class:JsonTest::TestResult
addMatrices	.\Utils\MatrixUtils.cpp	/^addMatrices(GLdouble dst[16], GLdouble a[16], GLdouble b[16])$/;"	f
addPathInArg	.\lib_json\src\lib_json\json_value.cpp	/^Path::addPathInArg( const std::string &path, $/;"	f	class:Json::Path
addToLastFailure	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::addToLastFailure( const std::string &message )$/;"	f	class:JsonTest::TestResult
add_attr_c_str	.\WEDCore\WED_XMLWriter.cpp	/^void					WED_XMLElement::add_attr_c_str(const char * name, const char * str)$/;"	f	class:WED_XMLElement
add_attr_double	.\WEDCore\WED_XMLWriter.cpp	/^void					WED_XMLElement::add_attr_double(const char * name, double value, int dec)$/;"	f	class:WED_XMLElement
add_attr_int	.\WEDCore\WED_XMLWriter.cpp	/^void					WED_XMLElement::add_attr_int(const char * name, int value)$/;"	f	class:WED_XMLElement
add_attr_stl_str	.\WEDCore\WED_XMLWriter.cpp	/^void					WED_XMLElement::add_attr_stl_str(const char * name, const string& str)$/;"	f	class:WED_XMLElement
add_car	.\OneOffs\gen_roads.cpp	/^	void add_car(int r, int p, int s, float d, int t) {$/;"	f	class:road_deck
add_data_in_datablock	.\Utils\zip.c	/^local int add_data_in_datablock($/;"	f
add_keyframe	.\AC3DPlugins\obj_anim.cpp	/^static void add_keyframe(int argc, char * argv[])$/;"	f	file:
add_missing_water	.\XESCore\Hydro2.cpp	/^void add_missing_water($/;"	f
add_obj_left	.\OneOffs\gen_roads10.h	/^		void add_obj_left(const char * name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	struct:road_map::range_ref
add_obj_left	.\OneOffs\gen_roads10.h	/^		void add_obj_left(const char ** name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	struct:road_map::range_ref
add_obj_left	.\OneOffs\gen_roads10.h	/^	void add_obj_left(const char * name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	class:road
add_obj_left	.\OneOffs\gen_roads10.h	/^	void add_obj_left(const char ** name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	class:road
add_obj_right	.\OneOffs\gen_roads10.h	/^		void add_obj_right(const char * name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	struct:road_map::range_ref
add_obj_right	.\OneOffs\gen_roads10.h	/^		void add_obj_right(const char ** name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	struct:road_map::range_ref
add_obj_right	.\OneOffs\gen_roads10.h	/^	void add_obj_right(const char * name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	class:road
add_obj_right	.\OneOffs\gen_roads10.h	/^	void add_obj_right(const char ** name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f	class:road
add_one_split	.\XESCore\BlockFill.cpp	/^void add_one_split(double x, double y, map<double,pair<double,double> >& times)$/;"	f
add_or_find_sub_element	.\WEDCore\WED_XMLWriter.cpp	/^WED_XMLElement *		WED_XMLElement::add_or_find_sub_element(const char * name)$/;"	f	class:WED_XMLElement
add_pol_ring	.\WEDCore\WED_Orthophoto.cpp	/^static void add_pol_ring(WED_OverlayImage * image, const Polygon2& loc, const Polygon2& uv, WED_Thing * parent, bool is_outer)$/;"	f	file:
add_quats	.\Utils\trackball.c	/^add_quats(float q1[4], float q2[4], float dest[4])$/;"	f
add_sub_element	.\WEDCore\WED_XMLWriter.cpp	/^WED_XMLElement *		WED_XMLElement::add_sub_element(const char * name)$/;"	f	class:WED_XMLElement
add_sub_panel	.\AC3DPlugins\obj_panel.cpp	/^void	add_sub_panel(int l, int b, int r, int t)$/;"	f
add_traffic	.\OneOffs\gen_roads10.h	/^		void add_traffic(traffic * car, shader * shad, float pixel, float speed, float density, int rev=0)$/;"	f	struct:road_map::range_ref
add_traffic	.\OneOffs\gen_roads10.h	/^	void add_traffic(traffic * car, shader * shad, float pixel, float speed, float density, int rev=0)$/;"	f	class:road
add_tri_to_obj	.\AC3DPlugins\ac_utils.cpp	/^void add_tri_to_obj(ACObject * obj, Vertex * v1, Vertex * v2, Vertex * v3)$/;"	f
address	.\XESCore\DEMDefs.h	/^	typedef DEMGeo::address address;$/;"	t	struct:address_fifo
address	.\XESCore\DEMDefs.h	/^	typedef int				address;$/;"	t	struct:DEMGeo
address	.\linuxinit\initializer.h	/^	void* address;$/;"	m	struct:file_match
address_begin	.\XESCore\DEMDefs.h	/^inline DEMGeo::address DEMGeo::address_begin(void) const$/;"	f	class:DEMGeo
address_end	.\XESCore\DEMDefs.h	/^inline DEMGeo::address DEMGeo::address_end(void) const$/;"	f	class:DEMGeo
address_fifo	.\XESCore\DEMDefs.h	/^	address_fifo(int capacity) { inp_ = outp_ = size_ = 0; data_.resize(capacity); }$/;"	f	struct:address_fifo
address_fifo	.\XESCore\DEMDefs.h	/^struct address_fifo {$/;"	s
adjust_properties	.\RawImport\ShapeIO.cpp	/^	virtual	void	adjust_properties(Pmwx::Halfedge_handle edge, Prop_t& io_properties)$/;"	f	class:toggle_properties_visitor
adjust_properties	.\XESCore\BlockAlgs.cpp	/^	virtual	void	adjust_properties(Block_2::Halfedge_handle edge, Prop_t& io_properties)$/;"	f	class:apply_properties_visitor
adjust_table	.\OneOffs\make_fill_rules.c	/^void adjust_table(float table[64],float widths[8])$/;"	f
advance	.\GUI\GUI_Laftfont.h	/^	float		advance;$/;"	m	struct:gl_glyph
advance	.\UI\FontMgr.cpp	/^	int		advance[256];		\/\/ Distance between the right side of this glyph and the beginning of the next.$/;"	m	struct:FontInfo_t	file:
advance	.\XESCore\BezierApprox.cpp	/^	void advance(void)$/;"	f	struct:bezier_approx_seq	file:
advance_x	.\GUI\GUI_Fonts.cpp	/^	float	advance_x;			\/\/ How much do we move to the right after this char.  The char's width, not the same as bitmap width.$/;"	m	struct:OGL_char_info	file:
after_create_edge	.\VPF\VPFImport.cpp	/^	virtual void after_create_edge(Halfedge_handle he)$/;"	f	class:RememberHalfedge
after_create_edge	.\XESCore\MapHelpers.h	/^	virtual void after_create_edge (typename Arr::Halfedge_handle e)$/;"	f	class:edge_collector_t
after_modify_edge	.\XESCore\MapHelpers.h	/^	virtual void after_modify_edge (typename Arr::Halfedge_handle e)$/;"	f	class:edge_collector_t
after_split_edge	.\VPF\VPFImport.cpp	/^	virtual void after_split_edge(Halfedge_handle e1, Halfedge_handle e2)$/;"	f	class:RememberHalfedge
after_split_edge	.\XESCore\MapHelpers.h	/^	virtual void after_split_edge(typename Arr::Halfedge_handle e1, typename Arr::Halfedge_handle e2)$/;"	f	class:data_preserver_t
after_split_edge	.\XESCore\MapHelpers.h	/^	virtual void after_split_edge(typename Arr::Halfedge_handle e1, typename Arr::Halfedge_handle e2)$/;"	f	class:edge_collector_t
after_split_face	.\XESCore\MapHelpers.h	/^	virtual void after_split_face (typename Arr::Face_handle f,$/;"	f	class:data_preserver_t
ag_output_object	.\AC3DPlugins\obj8_export.cpp	/^void ag_output_object(FILE * fi, ACObject * obj)$/;"	f
ag_output_polygon	.\AC3DPlugins\obj8_export.cpp	/^void ag_output_polygon(FILE * fi, Surface *s)$/;"	f
against_road	.\XESCore\BlockFill.cpp	/^static bool against_road(Block_2::Halfedge_const_handle h)$/;"	f	file:
agb	.\OneOffs\make_fill_rules.c	/^	int		agb;$/;"	m	struct:depth_info_t	file:
agb_id	.\XESCore\Zoning.h	/^	int			agb_id;$/;"	m	struct:FillRule_t
agb_min_width	.\XESCore\Zoning.h	/^	float		agb_min_width;							\/\/ Min width for an ABG - just use facades if smaller than this.	$/;"	m	struct:FillRule_t
agb_slop_depth	.\XESCore\Zoning.h	/^	float		agb_slop_depth;$/;"	m	struct:FillRule_t
agb_slop_width	.\XESCore\Zoning.h	/^	float		agb_slop_width;							\/\/ $/;"	m	struct:FillRule_t
agl	.\RawImport\FAA_Obs.h	/^	float		agl;$/;"	m	struct:FAAObs_t
agp_t	.\WEDCore\WED_ResourceMgr.h	/^struct agp_t {$/;"	s
agri_style	.\XESCore\DEMTables.h	/^	int				agri_style;$/;"	m	struct:NaturalTerrainRule_t
ags_id	.\XESCore\Zoning.h	/^	int			ags_id;$/;"	m	struct:FillRule_t
airport_type	.\WEDEntities\WED_Airport.h	/^	WED_PropIntEnum				airport_type;$/;"	m	class:WED_Airport
align	.\Obj\XObjWriteEmbedded.cpp	/^	void align(int gran, unsigned char fill)$/;"	f	struct:mem_block
align_Center	.\GUI\GUI_Fonts.h	/^	align_Center,$/;"	e	enum:__anon24
align_Left	.\GUI\GUI_Fonts.h	/^	align_Left = 0,$/;"	e	enum:__anon24
align_Right	.\GUI\GUI_Fonts.h	/^	align_Right$/;"	e	enum:__anon24
aligned_block	.\XESCore\DEMDefs.cpp	/^inline int		aligned_block(int x, int y, int x1, int x2, int y1, int y2, int& x_loc, int& y_loc, int max_power)$/;"	f
all	.\OneOffs\gen_roads10.h	/^	static vector<published_road *>	all;$/;"	m	class:published_road
all	.\OneOffs\gen_roads10.h	/^	static vector<shader*> all;$/;"	m	class:shader
all	.\OneOffs\gen_roads10.h	/^	static vector<traffic*>	all;$/;"	m	class:traffic
all	.\OneOffs\gen_roads10.h	/^	static vector<virtual_table*> all;$/;"	m	class:virtual_table
all	.\OneOffs\gen_roads10.h	/^vector<published_road *> published_road::all;$/;"	m	class:published_road
all	.\OneOffs\gen_roads10.h	/^vector<shader *> shader::all;$/;"	m	class:shader
all	.\OneOffs\gen_roads10.h	/^vector<traffic*> traffic::all;$/;"	m	class:traffic
all	.\OneOffs\gen_roads10.h	/^vector<virtual_table*> virtual_table::all;$/;"	m	class:virtual_table
all	.\lib_json\src\lib_json\json_reader.cpp	/^Features::all()$/;"	f	class:Json::Features
all_match	.\XESCore\Zoning.cpp	/^inline bool all_match(const set<int>& lhs, const set<int>& rhs)$/;"	f
allocate	.\lib_json\src\lib_json\json_batchallocator.h	/^   AllocatedType *allocate()$/;"	f	class:Json::BatchAllocator
allocateBatch	.\lib_json\src\lib_json\json_batchallocator.h	/^   static BatchInfo *allocateBatch( unsigned int objectsPerPage )$/;"	f	class:Json::BatchAllocator
allocate_new_datablock	.\Utils\zip.c	/^local linkedlist_datablock_internal* allocate_new_datablock()$/;"	f
allowComments_	.\lib_json\include\json\features.h	/^      bool allowComments_;$/;"	m	class:Json::Features
allow_from_point	.\Tiger\(TigerImport Backup.cpp).cpp	/^	int					allow_from_point;$/;"	m	struct:AreaInfo_t	file:
alpha	.\RenderFarmUI\RF_Export.cpp	/^	int			alpha;$/;"	m	struct:RF_ExportState_t	file:
alt	.\WEDNetwork\WED_NWLinkAdapter.h	/^    double  alt;$/;"	m	struct:WED_NWCamera_t
altitude	.\Env\EnvDefs.h	/^	float	altitude;$/;"	m	struct:__anon17
altitude	.\Env\EnvDefs.h	/^	short	altitude;$/;"	m	struct:__anon18
anchor1	.\WEDMap\WED_MapToolNew.h	/^	bool		has_anchor1;		Point2	anchor1;$/;"	m	class:WED_MapToolNew
anchor2	.\WEDMap\WED_MapToolNew.h	/^	bool		has_anchor2;		Point2	anchor2;$/;"	m	class:WED_MapToolNew
ang_max	.\XESCore\Zoning.h	/^	float		ang_min,		ang_max;				\/\/ Angle turn range.  Left turns are positive.$/;"	m	struct:ZoningRule_t
ang_max	.\XESCore\Zoning.h	/^	float		ang_min,ang_max;						\/\/ Angle turn range.  Left turns are positive.$/;"	m	struct:FillRule_t
ang_min	.\XESCore\Zoning.h	/^	float		ang_min,		ang_max;				\/\/ Angle turn range.  Left turns are positive.$/;"	m	struct:ZoningRule_t
ang_min	.\XESCore\Zoning.h	/^	float		ang_min,ang_max;						\/\/ Angle turn range.  Left turns are positive.$/;"	m	struct:FillRule_t
angle	.\WEDEntities\WED_LightFixture.h	/^	WED_PropDoubleText	angle;$/;"	m	class:WED_LightFixture
angle	.\XESCore\AptDefs.h	/^	float		angle;$/;"	m	struct:AptLight_t
anim_Begin	.\Obj\XObjDefs.h	/^	anim_Begin,$/;"	e	enum:__anon42
anim_End	.\Obj\XObjDefs.h	/^	anim_End,$/;"	e	enum:__anon42
anim_Hide	.\Obj\XObjDefs.h	/^	anim_Hide,					\/\/ only v1 and v2 are used$/;"	e	enum:__anon42
anim_Rotate	.\Obj\XObjDefs.h	/^	anim_Rotate,$/;"	e	enum:__anon42
anim_Show	.\Obj\XObjDefs.h	/^	anim_Show,$/;"	e	enum:__anon42
anim_Translate	.\Obj\XObjDefs.h	/^	anim_Translate,$/;"	e	enum:__anon42
anim_add_any	.\AC3DPlugins\obj_anim.cpp	/^static void anim_add_any($/;"	f	file:
anim_add_hide	.\AC3DPlugins\obj_anim.cpp	/^void anim_add_hide($/;"	f
anim_add_rotate	.\AC3DPlugins\obj_anim.cpp	/^void anim_add_rotate($/;"	f
anim_add_show	.\AC3DPlugins\obj_anim.cpp	/^void anim_add_show($/;"	f
anim_add_static	.\AC3DPlugins\obj_anim.cpp	/^void anim_add_static($/;"	f
anim_add_translate	.\AC3DPlugins\obj_anim.cpp	/^void anim_add_translate($/;"	f
anim_angle_vars	.\AC3DPlugins\obj_editor.cpp	/^TCL_linked_vardv * anim_angle_vars[NUM_KEYFRAMES] = { 0 };$/;"	v
anim_exit_cb	.\AC3DPlugins\obj_anim.cpp	/^static void anim_exit_cb(void * data)$/;"	f	file:
anim_hide	.\AC3DPlugins\obj_model.h	/^	anim_hide = 5$/;"	e	enum:__anon2
anim_none	.\AC3DPlugins\obj_model.h	/^	anim_none = 0,$/;"	e	enum:__anon2
anim_post_func	.\AC3DPlugins\obj_anim.cpp	/^static void anim_post_func(ACObject * ob, Boolean is_primary_render)$/;"	f	file:
anim_pre_func	.\AC3DPlugins\obj_anim.cpp	/^static void anim_pre_func(ACObject * ob, Boolean is_primary_render)$/;"	f	file:
anim_rotate	.\AC3DPlugins\obj_model.h	/^	anim_rotate = 1,$/;"	e	enum:__anon2
anim_show	.\AC3DPlugins\obj_model.h	/^	anim_show = 4,$/;"	e	enum:__anon2
anim_static	.\AC3DPlugins\obj_model.h	/^	anim_static = 3,$/;"	e	enum:__anon2
anim_trans	.\AC3DPlugins\obj_model.h	/^	anim_trans = 2,$/;"	e	enum:__anon2
anim_trans_nth	.\AC3DPlugins\obj_anim.cpp	/^float *	anim_trans_nth(ACObject * obj, int n, float buf[3])$/;"	f
anim_trans_nth_relative	.\AC3DPlugins\obj_anim.cpp	/^float *	anim_trans_nth_relative(ACObject * obj, int n, float buf[3])$/;"	f
anim_type_var	.\AC3DPlugins\obj_editor.cpp	/^TCL_linked_varsv * anim_type_var = NULL;$/;"	v
anim_value_vars	.\AC3DPlugins\obj_editor.cpp	/^TCL_linked_vardv * anim_value_vars[NUM_KEYFRAMES] = { 0 };$/;"	v
animate	.\XPTools\ViewObj.cpp	/^	bool	animate;$/;"	m	struct:ObjViewInfo_t	file:
animation	.\Obj\XObjDefs.h	/^	vector<XObjAnim8>		animation;$/;"	m	struct:XObj8
animation_type	.\Utils\XCarBoneUtils.h	/^	int				animation_type;	\/\/ Enum for the sim param animation follows$/;"	m	struct:XCarBone
antenna	.\XESCore\BlockDefs.h	/^	bool			antenna;		\/\/ Is the side whose SOURCE is this pt an antenna?$/;"	m	struct:block_pt
any_match	.\XESCore\Zoning.cpp	/^inline bool any_match(const set<int>& lhs, const set<int>& rhs)$/;"	f
app	.\GUI\GUI_Application.h	/^	GUI_Application* app;$/;"	m	class:GUI_QtAction
app	.\GUI\GUI_Application.h	/^	GUI_Application* app;$/;"	m	class:GUI_QtMenu
app_callbacks	.\UI\ObjCUtils.h	/^	struct app_callbacks {$/;"	s
app_light_code	.\XESCore\AptDefs.h	/^	int			app_light_code[2];$/;"	m	struct:AptRunway_t
app_lites_code1	.\XESCore\AptDefs.h	/^	int			app_lites_code1;$/;"	m	struct:AptPavement_t
app_lites_code2	.\XESCore\AptDefs.h	/^	int			app_lites_code2;$/;"	m	struct:AptPavement_t
append	.\Obj\ObjPointPool.cpp	/^int		ObjPointPool::append(const float pt[])$/;"	f	class:ObjPointPool
append	.\lib_json\src\lib_json\json_value.cpp	/^Value::append( const Value &value )$/;"	f	class:Json::Value
append_parser_out_info	.\WEDCore\WED_Sign_Parser.cpp	/^void WED_Sign_Parser::append_parser_out_info(const string & inGlyph, int position, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
append_rgb	.\Obj\ObjConvert.cpp	/^static int append_rgb(ObjPointPool * pool, const vec_rgb& rgb)$/;"	f	file:
append_st	.\Obj\ObjConvert.cpp	/^static int append_st(ObjPointPool * pool, const vec_tex& st)$/;"	f	file:
appl1	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum				appl1;$/;"	m	class:WED_Runway
appl2	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum				appl2;$/;"	m	class:WED_Runway
applyMatrixVec	.\Utils\MatrixUtils.cpp	/^applyMatrixVec(GLdouble vec[4], GLdouble m[16])$/;"	f
applyRotation	.\Utils\MatrixUtils.cpp	/^void applyRotation( GLdouble m[16], GLdouble angle, GLdouble x, GLdouble y, GLdouble z )$/;"	f
applyTranslation	.\Utils\MatrixUtils.cpp	/^extern	void applyTranslation( GLdouble m[16], GLdouble x, GLdouble y, GLdouble z )$/;"	f
apply_combos_to_roads	.\XESCore\NetAlgs.cpp	/^void	apply_combos_to_roads(Pmwx::Vertex_handle v, const vector<Pmwx::Halfedge_handle>& hes, const vector<int>& levels)$/;"	f
apply_fill_rules	.\XESCore\BlockFill.cpp	/^bool	apply_fill_rules($/;"	f
apply_filter	.\WEDCore\WED_Clipping.cpp	/^void apply_filter(T& container, F filter)$/;"	f
apply_levels	.\XESCore\NetAlgs.cpp	/^void	apply_levels(int num_hes, int num_levels, int code, vector<int>& levels)$/;"	f
apply_lighting	.\AC3DPlugins\bitmap_match.cpp	/^int apply_lighting($/;"	f
apply_properties_visitor	.\XESCore\BlockAlgs.cpp	/^class apply_properties_visitor : public MapBFSVisitor<set<int>, Block_2 > {$/;"	c	file:
apply_split	.\WEDCore\WED_Clipping.cpp	/^void apply_split(T& container, F filter)$/;"	f
apply_type_change_forward	.\XESCore\NetAlgs.cpp	/^Pmwx::Vertex_handle apply_type_change_forward(Pmwx::Halfedge_handle he, int new_type, bool debug)$/;"	f
apply_type_change_reverse	.\XESCore\NetAlgs.cpp	/^Pmwx::Vertex_handle apply_type_change_reverse(Pmwx::Halfedge_handle he, int new_type, bool debug)$/;"	f
apply_y_rules	.\XESCore\NetAlgs.cpp	/^void apply_y_rules(Pmwx::Halfedge_handle trunk, Pmwx::Halfedge_handle left, Pmwx::Halfedge_handle right, set<Pmwx::Vertex_handle>& changed)$/;"	f
approx	.\XESCore\BezierApprox.cpp	/^	Point2c						approx[4];$/;"	m	struct:possible_approx_t	file:
approx	.\XESCore\BezierApprox.cpp	/^	Point2c					approx[4];		\/\/ Four bezier nodes approximate the curve$/;"	m	struct:approx_t	file:
approx_he_len	.\XESCore\NetHelpers.h	/^inline double approx_he_len(Pmwx::Halfedge_handle he)$/;"	f
approx_t	.\XESCore\BezierApprox.cpp	/^struct	approx_t {$/;"	s	file:
approximate_bezier_epsi	.\Utils\CompGeomDefs2.h	/^void approximate_bezier_epsi(const Bezier2& b, double err, __output_iterator output, double t_start, double t_middle, double t_end)$/;"	f
approximate_bezier_epsi_2	.\Utils\CompGeomDefs2.h	/^void approximate_bezier_epsi_2(const Bezier2& b, const Bezier2& b2, double err, __output_iterator output, __output_iterator output2, double t_start, double t_middle, double t_end)$/;"	f
approximate_bezier_sequence_epsi	.\Utils\CompGeomDefs2.h	/^void approximate_bezier_sequence_epsi($/;"	f
apt_airport	.\XESCore\AptDefs.h	/^	apt_airport 		= 1,$/;"	e	enum:__anon127
apt_app_ALSFI	.\XESCore\AptDefs.h	/^	apt_app_ALSFI,$/;"	e	enum:__anon127
apt_app_ALSFII	.\XESCore\AptDefs.h	/^	apt_app_ALSFII,$/;"	e	enum:__anon127
apt_app_ALSFII_810	.\XESCore\AptDefs.h	/^	apt_app_ALSFII_810,$/;"	e	enum:__anon127
apt_app_ALSFI_810	.\XESCore\AptDefs.h	/^	apt_app_ALSFI_810,$/;"	e	enum:__anon127
apt_app_CALVERTI	.\XESCore\AptDefs.h	/^	apt_app_CALVERTI,$/;"	e	enum:__anon127
apt_app_CALVERTII	.\XESCore\AptDefs.h	/^	apt_app_CALVERTII,$/;"	e	enum:__anon127
apt_app_CALVERTII_810	.\XESCore\AptDefs.h	/^	apt_app_CALVERTII_810,$/;"	e	enum:__anon127
apt_app_CALVERTI_810	.\XESCore\AptDefs.h	/^	apt_app_CALVERTI_810,$/;"	e	enum:__anon127
apt_app_MALS	.\XESCore\AptDefs.h	/^	apt_app_MALS,$/;"	e	enum:__anon127
apt_app_MALSF	.\XESCore\AptDefs.h	/^	apt_app_MALSF,$/;"	e	enum:__anon127
apt_app_MALSR	.\XESCore\AptDefs.h	/^	apt_app_MALSR,$/;"	e	enum:__anon127
apt_app_ODALS	.\XESCore\AptDefs.h	/^	apt_app_ODALS,$/;"	e	enum:__anon127
apt_app_ODALS_810	.\XESCore\AptDefs.h	/^	apt_app_ODALS_810,$/;"	e	enum:__anon127
apt_app_RAIL	.\XESCore\AptDefs.h	/^	apt_app_RAIL,$/;"	e	enum:__anon127
apt_app_SALS	.\XESCore\AptDefs.h	/^	apt_app_SALS,$/;"	e	enum:__anon127
apt_app_SALSF_810	.\XESCore\AptDefs.h	/^	apt_app_SALSF_810,$/;"	e	enum:__anon127
apt_app_SSALF	.\XESCore\AptDefs.h	/^	apt_app_SSALF,$/;"	e	enum:__anon127
apt_app_SSALR	.\XESCore\AptDefs.h	/^	apt_app_SSALR,$/;"	e	enum:__anon127
apt_app_SSALS_810	.\XESCore\AptDefs.h	/^	apt_app_SSALS_810,$/;"	e	enum:__anon127
apt_app_fwd	.\XESCore\AptIO.cpp	/^inline int apt_app_fwd(int code)$/;"	f
apt_app_none	.\XESCore\AptDefs.h	/^	apt_app_none = 0,$/;"	e	enum:__anon127
apt_app_none_810	.\XESCore\AptDefs.h	/^	apt_app_none_810 = 1,$/;"	e	enum:__anon127
apt_beacon	.\XESCore\AptDefs.h	/^	apt_beacon 			= 18,$/;"	e	enum:__anon127
apt_beacon_airport	.\XESCore\AptDefs.h	/^	apt_beacon_airport,$/;"	e	enum:__anon127
apt_beacon_heliport	.\XESCore\AptDefs.h	/^	apt_beacon_heliport,$/;"	e	enum:__anon127
apt_beacon_military	.\XESCore\AptDefs.h	/^	apt_beacon_military,$/;"	e	enum:__anon127
apt_beacon_none	.\XESCore\AptDefs.h	/^	apt_beacon_none = 0,$/;"	e	enum:__anon127
apt_beacon_seaport	.\XESCore\AptDefs.h	/^	apt_beacon_seaport,$/;"	e	enum:__anon127
apt_boundary	.\XESCore\AptDefs.h	/^	apt_boundary 		= 130,$/;"	e	enum:__anon127
apt_code_is_curve	.\XESCore\AptDefs.h	/^inline bool apt_code_is_curve(int code) { return code == apt_lin_crv || code == apt_rng_crv || code == apt_end_crv; }$/;"	f
apt_code_is_end	.\XESCore\AptDefs.h	/^inline bool apt_code_is_end(int code) { return code == apt_end_seg || code == apt_end_crv; }$/;"	f
apt_code_is_ring	.\XESCore\AptDefs.h	/^inline bool apt_code_is_ring(int code) { return code == apt_rng_seg || code == apt_rng_crv; }$/;"	f
apt_code_is_term	.\XESCore\AptDefs.h	/^inline bool apt_code_is_term(int code) { return apt_code_is_end(code) || apt_code_is_ring(code); }$/;"	f
apt_done	.\XESCore\AptDefs.h	/^	apt_done 			= 99,$/;"	e	enum:__anon127
apt_edge_CLL_810	.\XESCore\AptDefs.h	/^	apt_edge_CLL_810,$/;"	e	enum:__anon127
apt_edge_HIRL	.\XESCore\AptDefs.h	/^	apt_edge_HIRL,$/;"	e	enum:__anon127
apt_edge_LIRL	.\XESCore\AptDefs.h	/^	apt_edge_LIRL,$/;"	e	enum:__anon127
apt_edge_MIRL	.\XESCore\AptDefs.h	/^	apt_edge_MIRL,$/;"	e	enum:__anon127
apt_edge_MIRL_810	.\XESCore\AptDefs.h	/^	apt_edge_MIRL_810,$/;"	e	enum:__anon127
apt_edge_REIL_810	.\XESCore\AptDefs.h	/^	apt_edge_REIL_810,$/;"	e	enum:__anon127
apt_edge_TDZL_810	.\XESCore\AptDefs.h	/^	apt_edge_TDZL_810,$/;"	e	enum:__anon127
apt_edge_none	.\XESCore\AptDefs.h	/^	apt_edge_none = 0,$/;"	e	enum:__anon127
apt_edge_none_810	.\XESCore\AptDefs.h	/^	apt_edge_none_810 = 1,$/;"	e	enum:__anon127
apt_edge_taxiway_810	.\XESCore\AptDefs.h	/^	apt_edge_taxiway_810,$/;"	e	enum:__anon127
apt_end_crv	.\XESCore\AptDefs.h	/^	apt_end_crv 		= 116,$/;"	e	enum:__anon127
apt_end_seg	.\XESCore\AptDefs.h	/^	apt_end_seg		 	= 115,$/;"	e	enum:__anon127
apt_fill_mode	.\XESCore\Airports.cpp	/^enum apt_fill_mode {$/;"	g	file:
apt_flow_ceil	.\XESCore\AptDefs.h	/^	apt_flow_ceil		= 1002,			\/\/ 1002 <metar icao> <ceiling minimum>$/;"	e	enum:__anon127
apt_flow_def	.\XESCore\AptDefs.h	/^	apt_flow_def		= 1000,			\/\/ 1000 <traffic flow name, must be unique to the ICAO airport>$/;"	e	enum:__anon127
apt_flow_pattern	.\XESCore\AptDefs.h	/^	apt_flow_pattern	= 1101,$/;"	e	enum:__anon127
apt_flow_rwy_rule	.\XESCore\AptDefs.h	/^	apt_flow_rwy_rule	= 1100,$/;"	e	enum:__anon127
apt_flow_time	.\XESCore\AptDefs.h	/^	apt_flow_time		= 1004,			\/\/ 1004 <zulu time start> <zulu time end>$/;"	e	enum:__anon127
apt_flow_vis	.\XESCore\AptDefs.h	/^	apt_flow_vis		= 1003,			\/\/ 1003 <metar icao> <vis minimum>$/;"	e	enum:__anon127
apt_flow_wind	.\XESCore\AptDefs.h	/^	apt_flow_wind		= 1001,			\/\/ 1001 <metar icao> <wind dir min> <wind dir max> <wind max speed>$/;"	e	enum:__anon127
apt_free_chain	.\XESCore\AptDefs.h	/^	apt_free_chain		= 120,$/;"	e	enum:__anon127
apt_freq_app	.\XESCore\AptDefs.h	/^	apt_freq_app 		= 55,$/;"	e	enum:__anon127
apt_freq_awos	.\XESCore\AptDefs.h	/^	apt_freq_awos 		= 50,$/;"	e	enum:__anon127
apt_freq_ctaf	.\XESCore\AptDefs.h	/^	apt_freq_ctaf 		= 51,$/;"	e	enum:__anon127
apt_freq_del	.\XESCore\AptDefs.h	/^	apt_freq_del 		= 52,$/;"	e	enum:__anon127
apt_freq_dep	.\XESCore\AptDefs.h	/^	apt_freq_dep 		= 56,$/;"	e	enum:__anon127
apt_freq_gnd	.\XESCore\AptDefs.h	/^	apt_freq_gnd 		= 53,$/;"	e	enum:__anon127
apt_freq_twr	.\XESCore\AptDefs.h	/^	apt_freq_twr 		= 54,$/;"	e	enum:__anon127
apt_gls_none_810	.\XESCore\AptDefs.h	/^	apt_gls_none_810 = 1,$/;"	e	enum:__anon127
apt_gls_papi20_810	.\XESCore\AptDefs.h	/^	apt_gls_papi20_810,$/;"	e	enum:__anon127
apt_gls_papi_20	.\XESCore\AptDefs.h	/^	apt_gls_papi_20,$/;"	e	enum:__anon127
apt_gls_papi_810	.\XESCore\AptDefs.h	/^	apt_gls_papi_810,$/;"	e	enum:__anon127
apt_gls_papi_left	.\XESCore\AptDefs.h	/^	apt_gls_papi_left,$/;"	e	enum:__anon127
apt_gls_papi_right	.\XESCore\AptDefs.h	/^	apt_gls_papi_right,$/;"	e	enum:__anon127
apt_gls_vasi	.\XESCore\AptDefs.h	/^	apt_gls_vasi			= 1,$/;"	e	enum:__anon127
apt_gls_vasi_810	.\XESCore\AptDefs.h	/^	apt_gls_vasi_810,$/;"	e	enum:__anon127
apt_gls_vasi_tricolor	.\XESCore\AptDefs.h	/^	apt_gls_vasi_tricolor,$/;"	e	enum:__anon127
apt_gls_wigwag	.\XESCore\AptDefs.h	/^	apt_gls_wigwag,$/;"	e	enum:__anon127
apt_heli_edge_none	.\XESCore\AptDefs.h	/^	apt_heli_edge_none = 0,$/;"	e	enum:__anon127
apt_heli_edge_yellow	.\XESCore\AptDefs.h	/^	apt_heli_edge_yellow,$/;"	e	enum:__anon127
apt_heli_new	.\XESCore\AptDefs.h	/^	apt_heli_new 		= 102,$/;"	e	enum:__anon127
apt_heliport	.\XESCore\AptDefs.h	/^	apt_heliport 		= 17,$/;"	e	enum:__anon127
apt_light_bounary	.\XESCore\AptDefs.h	/^	apt_light_bounary,$/;"	e	enum:__anon127
apt_light_hold_short	.\XESCore\AptDefs.h	/^	apt_light_hold_short,$/;"	e	enum:__anon127
apt_light_hold_short_centerline	.\XESCore\AptDefs.h	/^	apt_light_hold_short_centerline,$/;"	e	enum:__anon127
apt_light_hold_short_flash	.\XESCore\AptDefs.h	/^	apt_light_hold_short_flash,$/;"	e	enum:__anon127
apt_light_taxi_centerline	.\XESCore\AptDefs.h	/^	apt_light_taxi_centerline = 101,$/;"	e	enum:__anon127
apt_light_taxi_edge	.\XESCore\AptDefs.h	/^	apt_light_taxi_edge,$/;"	e	enum:__anon127
apt_lin_crv	.\XESCore\AptDefs.h	/^	apt_lin_crv 		= 112,$/;"	e	enum:__anon127
apt_lin_seg	.\XESCore\AptDefs.h	/^	apt_lin_seg 		= 111,$/;"	e	enum:__anon127
apt_line_Bbroken_yellow	.\XESCore\AptDefs.h	/^	apt_line_Bbroken_yellow,$/;"	e	enum:__anon127
apt_line_Bdouble_solid_yellow	.\XESCore\AptDefs.h	/^	apt_line_Bdouble_solid_yellow,$/;"	e	enum:__anon127
apt_line_Bils_center	.\XESCore\AptDefs.h	/^	apt_line_Bils_center,$/;"	e	enum:__anon127
apt_line_Bils_hold	.\XESCore\AptDefs.h	/^	apt_line_Bils_hold,$/;"	e	enum:__anon127
apt_line_Bother_hold	.\XESCore\AptDefs.h	/^	apt_line_Bother_hold,$/;"	e	enum:__anon127
apt_line_Brunway_hold	.\XESCore\AptDefs.h	/^	apt_line_Brunway_hold,$/;"	e	enum:__anon127
apt_line_Bsolid_yellow	.\XESCore\AptDefs.h	/^	apt_line_Bsolid_yellow = 51,$/;"	e	enum:__anon127
apt_line_Bwide_broken_yellow	.\XESCore\AptDefs.h	/^	apt_line_Bwide_broken_yellow,$/;"	e	enum:__anon127
apt_line_Bwide_double_broken_yellow	.\XESCore\AptDefs.h	/^	apt_line_Bwide_double_broken_yellow,$/;"	e	enum:__anon127
apt_line_broken_white	.\XESCore\AptDefs.h	/^	apt_line_broken_white,$/;"	e	enum:__anon127
apt_line_broken_yellow	.\XESCore\AptDefs.h	/^	apt_line_broken_yellow,$/;"	e	enum:__anon127
apt_line_chequered_white	.\XESCore\AptDefs.h	/^	apt_line_chequered_white,$/;"	e	enum:__anon127
apt_line_double_solid_yellow	.\XESCore\AptDefs.h	/^	apt_line_double_solid_yellow,$/;"	e	enum:__anon127
apt_line_ils_center	.\XESCore\AptDefs.h	/^	apt_line_ils_center,$/;"	e	enum:__anon127
apt_line_ils_hold	.\XESCore\AptDefs.h	/^	apt_line_ils_hold,$/;"	e	enum:__anon127
apt_line_none	.\XESCore\AptDefs.h	/^	apt_line_none = 0,$/;"	e	enum:__anon127
apt_line_other_hold	.\XESCore\AptDefs.h	/^	apt_line_other_hold,$/;"	e	enum:__anon127
apt_line_runway_hold	.\XESCore\AptDefs.h	/^	apt_line_runway_hold,$/;"	e	enum:__anon127
apt_line_solid_white	.\XESCore\AptDefs.h	/^	apt_line_solid_white = 20,$/;"	e	enum:__anon127
apt_line_solid_yellow	.\XESCore\AptDefs.h	/^	apt_line_solid_yellow,$/;"	e	enum:__anon127
apt_line_wide_broken_yellow	.\XESCore\AptDefs.h	/^	apt_line_wide_broken_yellow,$/;"	e	enum:__anon127
apt_line_wide_double_broken_yellow	.\XESCore\AptDefs.h	/^	apt_line_wide_double_broken_yellow,$/;"	e	enum:__anon127
apt_make_cut_map	.\XESCore\AptAlgs.cpp	/^void apt_make_cut_map(Polygon_set_2& in_area, Pmwx& out_map, double cut_x, double cut_y)$/;"	f
apt_make_map_from_polygons	.\XESCore\AptAlgs.cpp	/^void apt_make_map_from_polygons($/;"	f
apt_mark_heli_default	.\XESCore\AptDefs.h	/^	apt_mark_heli_default = 0,	\/\/ 850 only$/;"	e	enum:__anon127
apt_mark_non_precision	.\XESCore\AptDefs.h	/^	apt_mark_non_precision,$/;"	e	enum:__anon127
apt_mark_non_precision_UK	.\XESCore\AptDefs.h	/^	apt_mark_non_precision_UK,	\/\/ 850 only$/;"	e	enum:__anon127
apt_mark_none	.\XESCore\AptDefs.h	/^	apt_mark_none = 0,$/;"	e	enum:__anon127
apt_mark_precision	.\XESCore\AptDefs.h	/^	apt_mark_precision,$/;"	e	enum:__anon127
apt_mark_precision_UK	.\XESCore\AptDefs.h	/^	apt_mark_precision_UK,$/;"	e	enum:__anon127
apt_mark_visual	.\XESCore\AptDefs.h	/^	apt_mark_visual,$/;"	e	enum:__anon127
apt_papi	.\XESCore\AptDefs.h	/^	apt_papi 			= 21,$/;"	e	enum:__anon127
apt_pattern_left	.\XESCore\AptDefs.h	/^	apt_pattern_left = 1,$/;"	e	enum:__anon127
apt_pattern_right	.\XESCore\AptDefs.h	/^	apt_pattern_right = 2,$/;"	e	enum:__anon127
apt_reil_none	.\XESCore\AptDefs.h	/^	apt_reil_none = 0,$/;"	e	enum:__anon127
apt_reil_omni	.\XESCore\AptDefs.h	/^	apt_reil_omni,$/;"	e	enum:__anon127
apt_reil_uni	.\XESCore\AptDefs.h	/^	apt_reil_uni,$/;"	e	enum:__anon127
apt_rng_crv	.\XESCore\AptDefs.h	/^	apt_rng_crv 		= 114,$/;"	e	enum:__anon127
apt_rng_seg	.\XESCore\AptDefs.h	/^	apt_rng_seg 		= 113,$/;"	e	enum:__anon127
apt_rwy_new	.\XESCore\AptDefs.h	/^	apt_rwy_new 		= 100,			\/\/ These replace the old type 10 record.$/;"	e	enum:__anon127
apt_rwy_old	.\XESCore\AptDefs.h	/^	apt_rwy_old 		= 10,			\/\/ Legacy runway\/taxiway record from 810 and earlier.$/;"	e	enum:__anon127
apt_sea_new	.\XESCore\AptDefs.h	/^	apt_sea_new 		= 101,$/;"	e	enum:__anon127
apt_seaport	.\XESCore\AptDefs.h	/^	apt_seaport 		= 16,$/;"	e	enum:__anon127
apt_shoulder_asphalt	.\XESCore\AptDefs.h	/^	apt_shoulder_asphalt,$/;"	e	enum:__anon127
apt_shoulder_concrete	.\XESCore\AptDefs.h	/^	apt_shoulder_concrete,$/;"	e	enum:__anon127
apt_shoulder_none	.\XESCore\AptDefs.h	/^	apt_shoulder_none = 0,$/;"	e	enum:__anon127
apt_sign	.\XESCore\AptDefs.h	/^	apt_sign 			= 20,$/;"	e	enum:__anon127
apt_sign_large	.\XESCore\AptDefs.h	/^	apt_sign_large,$/;"	e	enum:__anon127
apt_sign_large_distance	.\XESCore\AptDefs.h	/^	apt_sign_large_distance,$/;"	e	enum:__anon127
apt_sign_medium	.\XESCore\AptDefs.h	/^	apt_sign_medium,$/;"	e	enum:__anon127
apt_sign_small	.\XESCore\AptDefs.h	/^	apt_sign_small = 1,$/;"	e	enum:__anon127
apt_sign_small_distance	.\XESCore\AptDefs.h	/^	apt_sign_small_distance,$/;"	e	enum:__anon127
apt_sign_style_default	.\XESCore\AptDefs.h	/^	apt_sign_style_default = 0,$/;"	e	enum:__anon127
apt_startup_loc	.\XESCore\AptDefs.h	/^	apt_startup_loc 	= 15,$/;"	e	enum:__anon127
apt_startup_loc_new	.\XESCore\AptDefs.h	/^	apt_startup_loc_new	= 1300,			\/\/ 1300 lat lon heading misc|gate|tie_down|hangar traffic name$/;"	e	enum:__anon127
apt_surf_asphalt	.\XESCore\AptDefs.h	/^	apt_surf_asphalt,$/;"	e	enum:__anon127
apt_surf_asphalt_heli	.\XESCore\AptDefs.h	/^	apt_surf_asphalt_heli,			\/\/ these are 810 only$/;"	e	enum:__anon127
apt_surf_asphalt_line	.\XESCore\AptDefs.h	/^	apt_surf_asphalt_line,$/;"	e	enum:__anon127
apt_surf_concrete	.\XESCore\AptDefs.h	/^	apt_surf_concrete,$/;"	e	enum:__anon127
apt_surf_concrete_heli	.\XESCore\AptDefs.h	/^	apt_surf_concrete_heli,$/;"	e	enum:__anon127
apt_surf_concrete_line	.\XESCore\AptDefs.h	/^	apt_surf_concrete_line,$/;"	e	enum:__anon127
apt_surf_dirt	.\XESCore\AptDefs.h	/^	apt_surf_dirt,$/;"	e	enum:__anon127
apt_surf_dirt_heli	.\XESCore\AptDefs.h	/^	apt_surf_dirt_heli,$/;"	e	enum:__anon127
apt_surf_dry_lake	.\XESCore\AptDefs.h	/^	apt_surf_dry_lake,				\/\/ all versions$/;"	e	enum:__anon127
apt_surf_fwd	.\XESCore\AptIO.cpp	/^inline int	apt_surf_fwd(int code)$/;"	f
apt_surf_grass	.\XESCore\AptDefs.h	/^	apt_surf_grass,$/;"	e	enum:__anon127
apt_surf_grass_heli	.\XESCore\AptDefs.h	/^	apt_surf_grass_heli,$/;"	e	enum:__anon127
apt_surf_gravel	.\XESCore\AptDefs.h	/^	apt_surf_gravel,$/;"	e	enum:__anon127
apt_surf_ice	.\XESCore\AptDefs.h	/^	apt_surf_ice,					\/\/ 850 only$/;"	e	enum:__anon127
apt_surf_none	.\XESCore\AptDefs.h	/^	apt_surf_none		= 0,$/;"	e	enum:__anon127
apt_surf_transparent	.\XESCore\AptDefs.h	/^	apt_surf_transparent,$/;"	e	enum:__anon127
apt_surf_water	.\XESCore\AptDefs.h	/^	apt_surf_water,$/;"	e	enum:__anon127
apt_taxi_active	.\XESCore\AptDefs.h	/^	apt_taxi_active		= 1204,			\/\/ 1204 type|flags runway,list$/;"	e	enum:__anon127
apt_taxi_edge	.\XESCore\AptDefs.h	/^	apt_taxi_edge		= 1202,			\/\/ 1202 <src> <dst> <flags> <id> <name>$/;"	e	enum:__anon127
apt_taxi_header	.\XESCore\AptDefs.h	/^	apt_taxi_header		= 1200,			\/\/ 1200 <name>$/;"	e	enum:__anon127
apt_taxi_new	.\XESCore\AptDefs.h	/^	apt_taxi_new 		= 110,$/;"	e	enum:__anon127
apt_taxi_node	.\XESCore\AptDefs.h	/^	apt_taxi_node		= 1201,			\/\/ 1201 <lat> <lon> <type> <id> <name>$/;"	e	enum:__anon127
apt_taxi_shape	.\XESCore\AptDefs.h	/^	apt_taxi_shape		= 1203,			\/\/ 1203 <lat> <lon>$/;"	e	enum:__anon127
apt_tower_loc	.\XESCore\AptDefs.h	/^	apt_tower_loc 		= 14,$/;"	e	enum:__anon127
apt_windsock	.\XESCore\AptDefs.h	/^	apt_windsock 		= 19,$/;"	e	enum:__anon127
apts_	.\WEDImportExport\WED_AptTable.cpp	/^	const AptVector * apts_;$/;"	m	struct:sort_by_apt	file:
apts_	.\WEDImportExport\WED_ICAOTable.cpp	/^	const AptVector * apts_;$/;"	m	struct:sort_by_apt	file:
arc	.\DSF\tri_stripper_101\graph_array.h	/^		arc(const node_iterator & Initial, const node_iterator & Terminal)$/;"	f	class:common_structures::graph_array::arc
arc	.\DSF\tri_stripper_101\graph_array.h	/^		arc(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem)$/;"	f	class:common_structures::graph_array::arc
arc	.\DSF\tri_stripper_101\graph_array.h	/^	class arc$/;"	c	class:common_structures::graph_array
arch_heights	.\OneOffs\make_fill_rules.c	/^float arch_heights[8] =		{	24,		24,		24,		32,		999,	999,	999,	999 };$/;"	v
archive	.\WEDImportExport\WED_DSFImport.cpp	/^	WED_Archive *		archive;$/;"	m	class:DSF_Importer	file:
area	.\RawImport\gshhs.h	/^	int area;			\/* Area of polygon in 1\/10 km^2 *\/$/;"	m	struct:GSHHS
area	.\Utils\CompGeomDefs2.h	/^	double		area() const { return max(p2.x_ - p1.x_,0.0) * max(p2.y_ - p1.y_,0.0); }$/;"	f	struct:Bbox2
area	.\Utils\CompGeomDefs2.h	/^inline	double	Polygon2::area(void) const$/;"	f	class:Polygon2
area	.\XESCore\AptDefs.h	/^	AptPolygon_t			area;$/;"	m	struct:AptBoundary_t
area	.\XESCore\AptDefs.h	/^	AptPolygon_t			area;$/;"	m	struct:AptMarking_t
area	.\XESCore\AptDefs.h	/^	AptPolygon_t			area;$/;"	m	struct:AptTaxiway_t
area	.\XESCore\Zoning.cpp	/^	float					area;$/;"	m	struct:FaceNode_t	file:
area_feature	.\VPF\VPFImport.h	/^	int					area_feature;	\/\/ Area feature to add$/;"	m	struct:VPF_FaceRule_t
area_features	.\VPF\VPFImport.cpp	/^	set<int>	area_features;$/;"	m	struct:VPF_Face	file:
args_	.\lib_json\include\json\value.h	/^      Args args_;$/;"	m	class:Json::Path
arr_vertex_pt_extractor	.\XESCore\MapHelpers.h	/^struct arr_vertex_pt_extractor {$/;"	s
arrangement_simplifier	.\XESCore\MapHelpers.h	/^class	arrangement_simplifier {$/;"	c
array1_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value array1_;$/;"	m	struct:ValueTest	file:
arrayMode_Lgt	.\Obj\ObjDraw.cpp	/^	arrayMode_Lgt$/;"	e	enum:__anon39	file:
arrayMode_Lin	.\Obj\ObjDraw.cpp	/^	arrayMode_Lin,$/;"	e	enum:__anon39	file:
arrayMode_Non	.\Obj\ObjDraw.cpp	/^	arrayMode_Non,$/;"	e	enum:__anon39	file:
arrayMode_Tri	.\Obj\ObjDraw.cpp	/^	arrayMode_Tri,$/;"	e	enum:__anon39	file:
arrayValue	.\lib_json\include\json\value.h	/^      arrayValue,    \/\/\/< array value (ordered list)$/;"	e	enum:Json::ValueType
array_	.\lib_json\include\json\value.h	/^         ValueInternalArray *array_;$/;"	m	struct:Json::ValueInternalArray::IteratorState
array_	.\lib_json\include\json\value.h	/^         ValueInternalArray *array_;$/;"	m	union:Json::Value::ValueHolder
array_	.\lib_json\include\json\value.h	/^         ValueInternalArray::IteratorState array_;$/;"	m	union:Json::ValueIteratorBase::__anon34
artistComments	.\WEDImportExport\WED_VerTable.h	/^	string artistComments;$/;"	m	struct:VerInfo_t
asBool	.\lib_json\src\lib_json\json_value.cpp	/^Value::asBool() const$/;"	f	class:Json::Value
asCString	.\lib_json\src\lib_json\json_value.cpp	/^Value::asCString() const$/;"	f	class:Json::Value
asConstString	.\lib_json\src\lib_json\json_value.cpp	/^Value::asConstString() const$/;"	f	class:Json::Value
asDouble	.\lib_json\src\lib_json\json_value.cpp	/^Value::asDouble() const$/;"	f	class:Json::Value
asFloat	.\lib_json\src\lib_json\json_value.cpp	/^Value::asFloat() const$/;"	f	class:Json::Value
asInt	.\lib_json\src\lib_json\json_value.cpp	/^Value::asInt() const$/;"	f	class:Json::Value
asInt64	.\lib_json\src\lib_json\json_value.cpp	/^Value::asInt64() const$/;"	f	class:Json::Value
asLargestInt	.\lib_json\src\lib_json\json_value.cpp	/^Value::asLargestInt() const$/;"	f	class:Json::Value
asLargestUInt	.\lib_json\src\lib_json\json_value.cpp	/^Value::asLargestUInt() const$/;"	f	class:Json::Value
asString	.\lib_json\src\lib_json\json_value.cpp	/^Value::asString() const$/;"	f	class:Json::Value
asUInt	.\lib_json\src\lib_json\json_value.cpp	/^Value::asUInt() const$/;"	f	class:Json::Value
asUInt64	.\lib_json\src\lib_json\json_value.cpp	/^Value::asUInt64() const$/;"	f	class:Json::Value
as_segment	.\Utils\CompGeomDefs2.h	/^	Segment2	as_segment(void) const { return Segment2(p1,p2); }$/;"	f	struct:Bezier2
as_segment	.\WEDCore\WED_GISUtils.h	/^	Segment2p	as_segment(void) const { return Segment2p(p1,p2, param); }$/;"	f	struct:Bezier2p
asphalt	.\OneOffs\gen_roads10.h	/^	asphalt$/;"	e	enum:surface_type
assemble_dsf_pt	.\WEDImportExport\WED_DSFExport.cpp	/^void assemble_dsf_pt(double c[8], const Point2& pt, const Point2 * bez, UVMap_t * uv, const Bbox2& bounds)$/;"	f
assemble_dsf_pt_param	.\WEDImportExport\WED_DSFExport.cpp	/^void assemble_dsf_pt_param(double c[8], const Point2& pt, int pt_param, const Point2 * bez, const Bbox2& bounds)$/;"	f
assert_fail_exception	.\Utils\AssertUtils.cpp	/^class assert_fail_exception : public exception {$/;"	c	file:
assertions	.\Utils\QuadTree.h	/^put in some assertions, etc.$/;"	v
atc	.\XESCore\AptDefs.h	/^	AptATCFreqVector	atc;$/;"	m	struct:AptInfo_t
atc_op_all	.\XESCore\AptDefs.h	/^	atc_op_all = (atc_op_arrivals | atc_op_departures),$/;"	e	enum:__anon127
atc_op_arrivals	.\XESCore\AptDefs.h	/^	atc_op_arrivals = 1,$/;"	e	enum:__anon127
atc_op_departures	.\XESCore\AptDefs.h	/^	atc_op_departures = 2,$/;"	e	enum:__anon127
atc_ramp_gate	.\XESCore\AptDefs.h	/^	atc_ramp_gate = 1,$/;"	e	enum:__anon127
atc_ramp_hangar	.\XESCore\AptDefs.h	/^	atc_ramp_hangar = 3$/;"	e	enum:__anon127
atc_ramp_misc	.\XESCore\AptDefs.h	/^	atc_ramp_misc = 0,$/;"	e	enum:__anon127
atc_ramp_tie_down	.\XESCore\AptDefs.h	/^	atc_ramp_tie_down = 2,$/;"	e	enum:__anon127
atc_traffic_all	.\XESCore\AptDefs.h	/^	atc_traffic_all = (atc_traffic_heavies|atc_traffic_jets|atc_traffic_turbos|atc_traffic_props|atc_traffic_helis),$/;"	e	enum:__anon127
atc_traffic_heavies	.\XESCore\AptDefs.h	/^	atc_traffic_heavies = 1,$/;"	e	enum:__anon127
atc_traffic_helis	.\XESCore\AptDefs.h	/^	atc_traffic_helis = 16,$/;"	e	enum:__anon127
atc_traffic_jets	.\XESCore\AptDefs.h	/^	atc_traffic_jets = 2,$/;"	e	enum:__anon127
atc_traffic_props	.\XESCore\AptDefs.h	/^	atc_traffic_props = 8,$/;"	e	enum:__anon127
atc_traffic_turbos	.\XESCore\AptDefs.h	/^	atc_traffic_turbos = 4,$/;"	e	enum:__anon127
atc_type	.\XESCore\AptDefs.h	/^	int			atc_type;$/;"	m	struct:AptATCFreq_t
atomic_load	.\Network\curl_http.cpp	/^int atomic_load(volatile int * a) { return *a; }$/;"	f
atomic_store	.\Network\curl_http.cpp	/^void atomic_store(volatile int * a, int v) { *a = v; }$/;"	f
att_info_t	.\OneOffs\osm2shape.c	/^} att_info_t;$/;"	t	typeref:struct:tag_att_info	file:
attr	.\Obj\XObjBuilder.h	/^		int			attr;$/;"	m	struct:XObjBuilder::manip_data
attr_Ambient_RGB	.\Obj\XObjDefs.h	/^	attr_Ambient_RGB,$/;"	e	enum:__anon42
attr_Blend	.\Obj\XObjDefs.h	/^	attr_Blend,$/;"	e	enum:__anon42
attr_Cull	.\Obj\XObjDefs.h	/^	attr_Cull,$/;"	e	enum:__anon42
attr_Depth	.\Obj\XObjDefs.h	/^	attr_Depth,$/;"	e	enum:__anon42
attr_Diffuse_RGB	.\Obj\XObjDefs.h	/^	attr_Diffuse_RGB,$/;"	e	enum:__anon42
attr_Draped	.\Obj\XObjDefs.h	/^	attr_Draped,$/;"	e	enum:__anon42
attr_Draw_Disable	.\Obj\XObjDefs.h	/^	attr_Draw_Disable,$/;"	e	enum:__anon42
attr_Draw_Enable	.\Obj\XObjDefs.h	/^	attr_Draw_Enable,$/;"	e	enum:__anon42
attr_Emission_RGB	.\Obj\XObjDefs.h	/^	attr_Emission_RGB,$/;"	e	enum:__anon42
attr_Hard	.\Obj\XObjDefs.h	/^	attr_Hard,$/;"	e	enum:__anon42
attr_Hard_Deck	.\Obj\XObjDefs.h	/^	attr_Hard_Deck,$/;"	e	enum:__anon42
attr_LOD	.\Obj\XObjDefs.h	/^	attr_LOD,$/;"	e	enum:__anon42
attr_Layer_Group	.\Obj\XObjDefs.h	/^	attr_Layer_Group,			\/\/ name has group name, param[0] has offset$/;"	e	enum:__anon42
attr_Light_Level	.\Obj\XObjDefs.h	/^	attr_Light_Level,$/;"	e	enum:__anon42
attr_Light_Level_Reset	.\Obj\XObjDefs.h	/^	attr_Light_Level_Reset,$/;"	e	enum:__anon42
attr_Manip_Command	.\Obj\XObjDefs.h	/^	attr_Manip_Command,$/;"	e	enum:__anon42
attr_Manip_Command_Axis	.\Obj\XObjDefs.h	/^	attr_Manip_Command_Axis,$/;"	e	enum:__anon42
attr_Manip_Delta	.\Obj\XObjDefs.h	/^	attr_Manip_Delta,$/;"	e	enum:__anon42
attr_Manip_Drag_2d	.\Obj\XObjDefs.h	/^	attr_Manip_Drag_2d,$/;"	e	enum:__anon42
attr_Manip_Drag_Axis	.\Obj\XObjDefs.h	/^	attr_Manip_Drag_Axis,$/;"	e	enum:__anon42
attr_Manip_None	.\Obj\XObjDefs.h	/^	attr_Manip_None,$/;"	e	enum:__anon42
attr_Manip_Noop	.\Obj\XObjDefs.h	/^	attr_Manip_Noop,$/;"	e	enum:__anon42
attr_Manip_Push	.\Obj\XObjDefs.h	/^	attr_Manip_Push,$/;"	e	enum:__anon42
attr_Manip_Radio	.\Obj\XObjDefs.h	/^	attr_Manip_Radio,$/;"	e	enum:__anon42
attr_Manip_Toggle	.\Obj\XObjDefs.h	/^	attr_Manip_Toggle,$/;"	e	enum:__anon42
attr_Manip_Wrap	.\Obj\XObjDefs.h	/^	attr_Manip_Wrap,$/;"	e	enum:__anon42
attr_Max	.\Obj\XObjDefs.h	/^	attr_Max$/;"	e	enum:__anon42
attr_NoCull	.\Obj\XObjDefs.h	/^	attr_NoCull,$/;"	e	enum:__anon42
attr_NoDraped	.\Obj\XObjDefs.h	/^	attr_NoDraped,$/;"	e	enum:__anon42
attr_No_Blend	.\Obj\XObjDefs.h	/^	attr_No_Blend,$/;"	e	enum:__anon42
attr_No_Depth	.\Obj\XObjDefs.h	/^	attr_No_Depth,$/;"	e	enum:__anon42
attr_No_Hard	.\Obj\XObjDefs.h	/^	attr_No_Hard,$/;"	e	enum:__anon42
attr_No_Solid_Wall	.\Obj\XObjDefs.h	/^	attr_No_Solid_Wall,$/;"	e	enum:__anon42
attr_Offset	.\Obj\XObjDefs.h	/^	attr_Offset,$/;"	e	enum:__anon42
attr_Reset	.\Obj\XObjDefs.h	/^	attr_Reset,$/;"	e	enum:__anon42
attr_Shade_Flat	.\Obj\XObjDefs.h	/^	attr_Shade_Flat,$/;"	e	enum:__anon42
attr_Shade_Smooth	.\Obj\XObjDefs.h	/^	attr_Shade_Smooth,$/;"	e	enum:__anon42
attr_Shiny_Rat	.\Obj\XObjDefs.h	/^	attr_Shiny_Rat,$/;"	e	enum:__anon42
attr_Solid_Wall	.\Obj\XObjDefs.h	/^	attr_Solid_Wall,$/;"	e	enum:__anon42
attr_Specular_RGB	.\Obj\XObjDefs.h	/^	attr_Specular_RGB,$/;"	e	enum:__anon42
attr_Tex_Cockpit	.\Obj\XObjDefs.h	/^	attr_Tex_Cockpit,$/;"	e	enum:__anon42
attr_Tex_Cockpit_Subregion	.\Obj\XObjDefs.h	/^	attr_Tex_Cockpit_Subregion,$/;"	e	enum:__anon42
attr_Tex_Normal	.\Obj\XObjDefs.h	/^	attr_Tex_Normal,$/;"	e	enum:__anon42
attr_begin	.\Obj\XObjWriteEmbedded.cpp	/^	attr_begin=4,$/;"	e	enum:__anon43	file:
attr_column	.\VPF\VPFImport.h	/^	const char *		attr_column;	\/\/ Name of the column with the enum$/;"	m	struct:VPF_LineRule_t
attr_column	.\VPF\VPFImport.h	/^	const char *		attr_column;$/;"	m	struct:VPF_FaceRule_t
attr_end	.\Obj\XObjWriteEmbedded.cpp	/^	attr_end=5,$/;"	e	enum:__anon43	file:
attr_hide	.\Obj\XObjWriteEmbedded.cpp	/^	attr_hide=10,				\/\/ float v1, v2, dref$/;"	e	enum:__anon43	file:
attr_light_bulk	.\Obj\XObjWriteEmbedded.cpp	/^	attr_light_bulk=12,			\/\/ uchar light idx ushort count, float [xyz] x count$/;"	e	enum:__anon43	file:
attr_light_named	.\Obj\XObjWriteEmbedded.cpp	/^	attr_light_named=11,		\/\/ uchar light idx float x, y, z$/;"	e	enum:__anon43	file:
attr_lod	.\Obj\XObjWriteEmbedded.cpp	/^	attr_lod=2,					\/\/ float near, float far, ushort: bytes to skip$/;"	e	enum:__anon43	file:
attr_poly_offset	.\Obj\XObjWriteEmbedded.cpp	/^	attr_poly_offset=3,			\/\/ char offset$/;"	e	enum:__anon43	file:
attr_rotate	.\Obj\XObjWriteEmbedded.cpp	/^	attr_rotate=8,				\/\/ float ax, ay, az, r1, r2, v1, v2, dref$/;"	e	enum:__anon43	file:
attr_show	.\Obj\XObjWriteEmbedded.cpp	/^	attr_show=9,				\/\/ float v1, v2, dref$/;"	e	enum:__anon43	file:
attr_translate	.\Obj\XObjWriteEmbedded.cpp	/^	attr_translate=7,			\/\/ float x1, y1, z1, x2, y2, z2, v1, v2, dref$/;"	e	enum:__anon43	file:
attr_translate_static	.\Obj\XObjWriteEmbedded.cpp	/^	attr_translate_static=6,	\/\/ float x, y, z$/;"	e	enum:__anon43	file:
attribute_type	.\XESCore\AptAlgs.h	/^	typedef	set<int>			attribute_type;$/;"	t	struct:AptPolygonIterator
attributes	.\Obj\XObjDefs.h	/^	vector<float>	attributes;$/;"	m	struct:XObjCmd
attributes	.\XESCore\AptDefs.h	/^	set<int>	attributes;$/;"	m	struct:AptLinearSegment_t
attrs	.\WEDCore\WED_XMLWriter.h	/^		map<string,string>						attrs;$/;"	m	class:WED_XMLElement
attrs	.\WEDEntities\WED_AirportNode.h	/^	WED_PropIntEnumSet			attrs;$/;"	m	class:WED_AirportNode
atts	.\OneOffs\osm2shape.c	/^	char ** atts;$/;"	m	struct:__anon64	file:
autogen_mode	.\XESCore\DEMTables.h	/^	int				autogen_mode;$/;"	m	struct:NaturalTerrainInfo_t
avail_in_this_block	.\Utils\zip.c	/^  uLong  avail_in_this_block;$/;"	m	struct:linkedlist_datablock_internal_s	file:
axis	.\Obj\XObjDefs.h	/^	float					axis[3];	\/\/ Used for rotations$/;"	m	struct:XObjAnim8
axis	.\Obj\XObjDefs.h	/^	float					axis[3];$/;"	m	struct:XObjManip8
axis_Y	.\XPTools\ConvertObj.cpp	/^	axis_Y,$/;"	e	enum:__anon138	file:
axis_Z	.\XPTools\ConvertObj.cpp	/^	axis_Z,$/;"	e	enum:__anon138	file:
axis_for_rotation	.\AC3DPlugins\obj_anim.cpp	/^float *	axis_for_rotation(ACObject * obj, float buf[3])$/;"	f
axis_to_quat	.\Utils\trackball.c	/^axis_to_quat(float a[3], float phi, float q[4])$/;"	f
b	.\OneOffs\gen_roads10.h	/^	base							b;$/;"	m	class:road_map
b	.\Utils\CompGeomDefs2.h	/^	double	b;$/;"	m	struct:Line2
b	.\Utils\SQLUtils.h	/^	B		b;$/;"	m	struct:sql_row2
b	.\Utils\SQLUtils.h	/^	B		b;$/;"	m	struct:sql_row3
b	.\Utils\SQLUtils.h	/^	B		b;$/;"	m	struct:sql_row4
b	.\Utils\SQLUtils.h	/^	B		b;$/;"	m	struct:sql_row5
b	.\XESCore\BezierApprox.cpp	/^	Bezier2		b;$/;"	m	struct:bezier_approx_seq	file:
back	.\WEDCore\WED_Sign_Parser.h	/^	vector<parser_glyph_info> back;$/;"	m	struct:parser_finished_sign
back_link_iterator	.\Utils\STLUtils.h	/^	typedef typename back_link_type::iterator		back_link_iterator;$/;"	t	class:pqueue
back_link_type	.\Utils\STLUtils.h	/^	typedef map<value_type, map_iterator>			back_link_type;$/;"	t	class:pqueue
back_link_value_type	.\Utils\STLUtils.h	/^	typedef typename back_link_type::value_type		back_link_value_type;$/;"	t	class:pqueue
back_links_	.\Utils\STLUtils.h	/^	back_link_type	back_links_;$/;"	m	class:pqueue
back_name	.\Utils\RoadNetUtils.cpp	/^	string			back_name;$/;"	m	struct:CapRecord_t	file:
backside	.\XPTools\ViewObj.cpp	/^	bool	backside;$/;"	m	struct:ObjViewInfo_t	file:
bad_match	.\WEDImportExport\WED_DSFExport.cpp	/^bool bad_match(const T& s1, const T& s2)$/;"	f
bake_static_transitions	.\AC3DPlugins\obj_anim.cpp	/^void bake_static_transitions(ACObject * object)$/;"	f
base	.\OneOffs\gen_roads10.h	/^	typedef multimap<int,road>		base;$/;"	t	class:road_map
base	.\Utils\MemIStreamBuf.h	/^	typedef basic_streambuf<charT, traits> base;$/;"	t	class:std::basic_memstreambuf
base	.\XESCore\MapDefs.h	/^	typedef	CGAL::General_polygon_set_2<Traits_2, Dcel >	base;$/;"	t	class:Polygon_set_2
base	.\XESCore\MapHelpers.h	/^	typedef	data_preserver_t<Arr> base;$/;"	t	class:edge_collector_t
base	.\XESCore\MapHelpers.h	/^	typedef	typename CGAL::Arr_observer<Arr> base;$/;"	t	class:data_preserver_t
base	.\XESCore\MeshAlgs.cpp	/^	int						base;			\/\/ For debugging$/;"	m	struct:mesh_match_edge_t	file:
base	.\linuxinit\initializer.h	/^	void* base;$/;"	m	struct:file_match
base_name	.\DSFTools\DSF2Text.cpp	/^string			base_name;$/;"	v
base_res	.\XESCore\DEMTables.h	/^	Point2			base_res;$/;"	m	struct:NaturalTerrainInfo_t
base_tex	.\WEDCore\WED_ResourceMgr.h	/^	string			base_tex;$/;"	m	struct:agp_t
base_tex	.\WEDCore\WED_ResourceMgr.h	/^	string		base_tex; \/\/Relative path$/;"	m	struct:pol_info_t
base_tex	.\XESCore\DEMTables.h	/^	string			base_tex;$/;"	m	struct:NaturalTerrainInfo_t
base_type	.\Obj\XDefs.h	/^				typedef vector<T,Allocator>					base_type;$/;"	t	class:std::__dev_vector
basename	.\linuxinit\initializer.cpp	30;"	d	file:
basename	.\linuxinit\initializer.cpp	7;"	d	file:
basic_memstreambuf	.\Utils\MemIStreamBuf.h	/^	explicit basic_memstreambuf(const char_type * inBegin, const char_type * inEnd) {$/;"	f	class:std::basic_memstreambuf
basic_memstreambuf	.\Utils\MemIStreamBuf.h	/^class basic_memstreambuf$/;"	c	namespace:std
batches_	.\lib_json\src\lib_json\json_batchallocator.h	/^   BatchInfo *batches_;$/;"	m	class:Json::BatchAllocator
bathymetric_interp	.\Utils\CompGeomDefs2.h	/^	bool	bathymetric_interp(const Point2& p, double& v1, double& v2, double& v3) const {$/;"	f	struct:Triangle2
bbox_for_any	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any(const T& e, Bbox2& b)$/;"	f
bbox_for_any	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any<Bezier2>(const Bezier2& e, Bbox2& b)$/;"	f
bbox_for_any	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any<Bezier2p>(const Bezier2p& e, Bbox2& b)$/;"	f
bbox_for_any	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any<BezierPoint2>(const BezierPoint2& e, Bbox2& b)$/;"	f
bbox_for_any	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any<Segment2>(const Segment2& e, Bbox2& b)$/;"	f
bbox_for_any_vector	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any_vector(const vector<T>& e, Bbox2& b)$/;"	f
bbox_for_any_vector2	.\WEDCore\WED_Clipping.cpp	/^void bbox_for_any_vector2(const vector<T>& e, Bbox2& b)$/;"	f
bbox_for_ll	.\OneOffs\osm_tile.c	/^bbox_t bbox_for_ll(double lon, double lat)$/;"	f
bbox_t	.\OneOffs\osm_tile.c	/^typedef unsigned int		bbox_t;$/;"	t	file:
bbox_union	.\OneOffs\osm_tile.c	/^bbox_t bbox_union(bbox_t b1, bbox_t b2)$/;"	f
beacon	.\XESCore\AptDefs.h	/^	AptBeacon_t			beacon;$/;"	m	struct:AptInfo_t
beacon_kind	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			beacon_kind;$/;"	m	class:WED_CreatePointTool
begin	.\DSF\DSFPointPool.h	/^	inline const double * begin() const 	{ return mData; 	}$/;"	f	class:DSFTuple
begin	.\DSF\DSFPointPool.h	/^	inline double * begin() 				{ return mData; 	}$/;"	f	class:DSFTuple
begin	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline const double * begin() const { return mData; }$/;"	f	class:DSFTuple
begin	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline double * begin() { return mData; }$/;"	f	class:DSFTuple
begin	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::const_node_iterator graph_array<nodetype, arctype>::begin() const {$/;"	f	class:common_structures::graph_array
begin	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::node_iterator graph_array<nodetype, arctype>::begin() {$/;"	f	class:common_structures::graph_array
begin	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned char *		begin;$/;"	m	struct:mem_block	file:
begin	.\OneOffs\gen_roads10.h	/^	iterator begin() { return b.begin(); }$/;"	f	class:road_map
begin	.\Utils\MemFileUtils.h	/^	const char *	begin;$/;"	m	struct:MFScanner
begin	.\Utils\SQLUtils.cpp	/^void sql_command::begin(void)$/;"	f	class:sql_command
begin	.\Utils\STLUtils.h	/^	typename T::const_iterator		begin;$/;"	m	struct:const_sequence_for_container
begin	.\Utils\STLUtils.h	/^	typename T::iterator				begin;$/;"	m	struct:sequence_for_container
begin	.\Utils\UTL_interval.h	/^typename UTL_interval<T>::const_iterator	UTL_interval<T>::begin() const$/;"	f	class:UTL_interval
begin	.\Utils\XChunkyFileUtils.h	/^	char *	begin;$/;"	m	struct:XSpan
begin	.\XESCore\BezierApprox.cpp	/^	Iter begin;$/;"	m	struct:seq_for_container	file:
begin	.\XESCore\DEMDefs.h	/^	const_iterator	begin(void) const { return mData; }$/;"	f	struct:DEMGeo
begin	.\XESCore\DEMDefs.h	/^	iterator		begin(void) { return mData; }$/;"	f	struct:DEMGeo
begin	.\lib_json\src\lib_json\json_value.cpp	/^Value::begin() const$/;"	f	class:Json::Value
begin	.\lib_json\src\lib_json\json_value.cpp	/^Value::begin()$/;"	f	class:Json::Value
begin_	.\lib_json\include\json\reader.h	/^      Location begin_;$/;"	m	class:Json::Reader
begin_pos	.\Utils\zip.c	/^    uLong begin_pos;            \/* position of the beginning of the zipfile *\/$/;"	m	struct:__anon105	file:
ben2cgal	.\XESCore\CGALDefs.h	/^inline P	ben2cgal(const Point2& p) { return P(p.x(),p.y()); }$/;"	f
ben2cgal	.\XESCore\MapPolygon.cpp	/^void	ben2cgal(const Polygon2& ben, Polygon_2& cgal)$/;"	f
ben2cgal	.\XESCore\MapPolygon.cpp	/^void	ben2cgal(const vector<Polygon2>& ben, Polygon_with_holes_2& cgal)$/;"	f
best	.\XESCore\DEMDefs.cpp	/^	int		best;$/;"	m	struct:HistoHelper	file:
best_bezier_approx	.\XESCore\BezierApprox.cpp	/^double best_bezier_approx($/;"	f
best_side_for_agb	.\XESCore\BlockFill.cpp	/^Block_2::Halfedge_handle best_side_for_agb(Block_2::Ccb_halfedge_circulator circ, const Vector2& major, unsigned short& param)$/;"	f
best_side_for_facade	.\XESCore\BlockFill.cpp	/^Block_2::Halfedge_handle best_side_for_facade(Block_2::Ccb_halfedge_circulator circ, const Vector2& major)$/;"	f
better_next_seg	.\WEDCore\WED_Clipping.cpp	/^bool better_next_seg(const C& prev, const C& best_so_far, const C& new_candidate)$/;"	f
better_tri	.\AC3DPlugins\uv_mapper.cpp	/^static int	better_tri(const a_tri& tri, const cgd::Line3& l, double& best_dist, cgd::Point3& x_pt)$/;"	f	file:
bez_list	.\XESCore\BezierApprox.cpp	/^typedef list<Point2c>	bez_list;$/;"	t	file:
bezier_approx_seq	.\XESCore\BezierApprox.cpp	/^	bezier_approx_seq(__Seq in_seq, bool in_want_last) : t(0.0), want_last(in_want_last), s(in_seq), done(false)$/;"	f	struct:bezier_approx_seq
bezier_approx_seq	.\XESCore\BezierApprox.cpp	/^struct bezier_approx_seq {$/;"	s	file:
bezier_interp	.\Utils\MathUtils.h	/^inline float bezier_interp(float p0, float p1, float p2, float p3, float t)$/;"	f
bezier_multi_simplify	.\XESCore\BezierApprox.cpp	/^void bezier_multi_simplify($/;"	f
bezier_multi_simplify_straight_ok	.\XESCore\BezierApprox.cpp	/^void bezier_multi_simplify_straight_ok($/;"	f
bfs_process_ccb	.\XESCore\MapTopology.h	/^	void bfs_process_ccb(typename Arr::Ccb_halfedge_circulator ccb, const Properties& props, face_queue& q)$/;"	f	class:MapBFSVisitor
bfs_scan	.\XESCore\MapTopology.h	/^	void bfs_scan(face_queue& q)$/;"	f	class:MapBFSVisitor
bheight	.\GUI\GUI_Laftfont.h	/^	int		bheight;$/;"	m	struct:gl_glyph
bias_x	.\OneOffs\gen_roads10.h	/^	float bias_x, bias_y;$/;"	m	class:shader
bias_y	.\OneOffs\gen_roads10.h	/^	float bias_x, bias_y;$/;"	m	class:shader
bitCount	.\Utils\BitmapUtils.cpp	/^	short			bitCount;$/;"	m	struct:BMPImageDesc	file:
bitmap_match	.\AC3DPlugins\bitmap_match.cpp	/^int	bitmap_match($/;"	f
bitmap_subcopy	.\AC3DPlugins\bitmap_match.cpp	/^void bitmap_subcopy($/;"	f
blas1	.\WEDEntities\WED_Runway.h	/^	WED_PropDoubleTextMeters	blas1;$/;"	m	class:WED_Runway
blas2	.\WEDEntities\WED_Runway.h	/^	WED_PropDoubleTextMeters	blas2;$/;"	m	class:WED_Runway
blas_mtr	.\XESCore\AptDefs.h	/^	float		blas_mtr[2];$/;"	m	struct:AptRunway_t
blast1_ft	.\XESCore\AptDefs.h	/^	int			blast1_ft;	\/\/ Length of blast-pads in feet.$/;"	m	struct:AptPavement_t
blast2_ft	.\XESCore\AptDefs.h	/^	int			blast2_ft;$/;"	m	struct:AptPavement_t
bldg_max	.\XESCore\Zoning.h	/^	float		bldg_min,		bldg_max;				\/\/ Maximum building height (0 if none)$/;"	m	struct:ZoningRule_t
bldg_min	.\XESCore\Zoning.h	/^	float		bldg_min,		bldg_max;				\/\/ Maximum building height (0 if none)$/;"	m	struct:ZoningRule_t
bldg_width_for_height_depth	.\OneOffs\make_fill_rules.c	/^float bldg_width_for_height_depth(int height_idx, int depth)$/;"	f
blend_enable_var	.\AC3DPlugins\obj_editor.cpp	/^TCL_linked_variv * blend_enable_var = NULL;$/;"	v
blend_func	.\Utils\QuiltUtils.h	/^inline unsigned long blend_func(const unsigned long * c1, const unsigned long * c2)$/;"	f
blend_level_var	.\AC3DPlugins\obj_editor.cpp	/^TCL_linked_vardv * blend_level_var = NULL;$/;"	v
blending	.\XESCore\MeshAlgs.cpp	/^	hash_map<int, float>	blending;		\/\/ List of borders and blends in master$/;"	m	struct:mesh_match_vertex_t	file:
block_chance_30	.\OneOffs\make_fill_rules.c	/^float block_chance_30[64]=	{ 	10,		21,		30,		20,		10,		5,		3,		1,	$/;"	v
block_chance_60	.\OneOffs\make_fill_rules.c	/^float block_chance_60[64]=	{	0,		21,		30,		30,		10,		5,		3,		1,$/;"	v
block_dir	.\XESCore\BlockFill.cpp	/^		int		block_dir;	\/\/ Which way we have to go to widen.  If the block widens to the right, 1, to the left, 0, or -1 otherwise.$/;"	m	struct:reg_info_t	file:
block_err_max	.\XESCore\Zoning.h	/^	float		block_err_max;							\/\/ Maximum acceptable block error$/;"	m	struct:FillRule_t
block_err_max	.\XESCore\Zoning.h	/^	float		block_err_max;							\/\/ Maximum acceptable block error$/;"	m	struct:ZoningRule_t
block_height_for_zoning	.\OneOffs\make_fill_rules.c	/^int block_height_for_zoning(int zone_height_idx)$/;"	f
block_height_table	.\OneOffs\make_fill_rules.c	/^float block_height_table[64]={	100,	0,		0,		0,		0,		0,		0,		0,	\/\/ 0-10$/;"	v
block_heights	.\OneOffs\make_fill_rules.c	/^float block_heights[8] =	{	10,		16,		24,		32,		40,		80,		120,	999 };$/;"	v
block_max	.\OneOffs\make_fill_rules.c	/^	int		block_max;$/;"	m	struct:depth_info_t	file:
block_min	.\OneOffs\make_fill_rules.c	/^	int		block_min;$/;"	m	struct:depth_info_t	file:
block_pt	.\XESCore\BlockDefs.h	/^struct block_pt {$/;"	s
block_pt_compare	.\XESCore\BlockFill.cpp	/^struct block_pt_compare {$/;"	s	file:
block_pt_err	.\XESCore\BlockFill.cpp	/^struct block_pt_err {$/;"	s	file:
block_pt_locked	.\XESCore\BlockFill.cpp	/^struct block_pt_locked {$/;"	s	file:
block_pts_from_ccb	.\XESCore\BlockFill.cpp	/^bool block_pts_from_ccb($/;"	f
block_width_60	.\OneOffs\make_fill_rules.c	/^float block_width_60[8] =	{ 	7.5,	15,		22.5, 	30,		45,		60,		75,		90 };		$/;"	v
block_widths	.\OneOffs\make_fill_rules.c	/^float block_widths[8]	=	{	7.5,	15,		22.5, 	30,		45,		60,		75,		90 };		$/;"	v
bodyID	.\Env\Persistence.h	/^	short		bodyID;$/;"	m	struct:VertexInfo
bones	.\Utils\XCarBoneUtils.h	/^	vector<XCarBone>	bones;		\/\/ A table of our bones$/;"	m	struct:XCarBones
bool_	.\lib_json\include\json\value.h	/^         bool bool_;$/;"	m	union:Json::Value::ValueHolder
bool_partial	.\GUI\GUI_TextTable.h	/^	int						bool_partial;	\/\/ for checks - if we are on but our parent is off...$/;"	m	struct:GUI_CellContent
bool_val	.\GUI\GUI_TextTable.h	/^	GUI_BoolIcon			bool_val;		\/\/ for get only - to pick check type!$/;"	m	struct:GUI_CellContent
booleanValue	.\lib_json\include\json\value.h	/^      booleanValue,  \/\/\/< bool value$/;"	e	enum:Json::ValueType
border	.\Tiger\TIGERTypes.h	/^	TLIDSet						border;		\/\/ NOTE: this only exists to allow us to do rough$/;"	m	struct:PolygonInfo_t
border	.\Utils\RLERegion.cpp	/^void	RLERegion::border(RLERegion& outBorder)$/;"	f	class:RLERegion
border_blend	.\XESCore\MeshDefs.h	/^	hash_map<int, float>	border_blend;			\/\/ blend level for a border of this layer at this triangle!$/;"	m	struct:MeshVertexInfo
border_find_edge_tris	.\XESCore\MeshAlgs.cpp	/^static void border_find_edge_tris(CDT& ioMesh, mesh_match_t& ioBorder)$/;"	f	file:
border_match	.\XESCore\MeshAlgs.h	/^	int		border_match;$/;"	m	struct:MeshPrefs_t
border_tex	.\XESCore\DEMTables.h	/^	string			border_tex;			$/;"	m	struct:NaturalTerrainInfo_t
borders	.\XESCore\MeshAlgs.cpp	/^	set<int>				borders;		\/\/ For debugging$/;"	m	struct:mesh_match_edge_t	file:
bot_side	.\XESCore\BlockFill.cpp	/^		int		bot_side;$/;"	m	struct:reg_info_t	file:
bot_slope	.\XESCore\BlockFill.cpp	/^		double	bot_slope;	\/\/ b over a - CANNOT be NaN because time range must have a-time > 0$/;"	m	struct:reg_info_t	file:
bot_type	.\XESCore\BlockFill.cpp	/^		int		bot_type;$/;"	m	struct:reg_info_t	file:
bottom	.\Obj\XObjDefs.h	/^	int						bottom;$/;"	m	struct:XObjPanelRegion8
bottom	.\Utils\RLERegion.h	/^	int		bottom(void) const { return y1_; }$/;"	f	class:RLERegion
bottom_left	.\Utils\CompGeomDefs2.h	/^	Point2		bottom_left (void) const { return Point2(p1.x(),p1.y()); }$/;"	f	struct:Bbox2
bottom_right	.\Utils\CompGeomDefs2.h	/^	Point2		bottom_right(void) const { return Point2(p2.x(),p1.y()); }$/;"	f	struct:Bbox2
bottom_side	.\Utils\CompGeomDefs2.h	/^	Segment2	bottom_side (void) const { return Segment2(bottom_left(), bottom_right()); }$/;"	f	struct:Bbox2
boundaries	.\XESCore\AptDefs.h	/^	AptBoundaryVector	boundaries;$/;"	m	struct:AptInfo_t
bounding_sphere	.\Obj\XObjWriteEmbedded.cpp	/^inline void	bounding_sphere($/;"	f
bounds	.\Utils\CompGeomDefs2.h	/^inline Bbox2 Polygon2::bounds(void) const$/;"	f	class:Polygon2
bounds	.\Utils\CompGeomDefs2.h	/^inline void	Bezier2::bounds(Bbox2& bounds) const$/;"	f	class:Bezier2
bounds	.\Utils\PolyRasterUtils.h	/^	Number						bounds[4];$/;"	m	struct:PolyRasterizer
bounds	.\Utils\RTree2.h	/^		Bbox2		bounds;$/;"	m	struct:RTree2::leaf
bounds	.\Utils\RTree2.h	/^		Bbox2		bounds;$/;"	m	struct:RTree2::node
bounds	.\XESCore\AptDefs.h	/^	Bbox2				bounds;$/;"	m	struct:AptInfo_t
bounds	.\XESCore\TensorRoads.cpp	/^	Bbox2			bounds;$/;"	m	struct:Tensor_info	file:
bounds	.\XESCore\Zoning.cpp	/^	Bbox2					bounds;$/;"	m	struct:FaceNode_t	file:
bounds_fast	.\Utils\CompGeomDefs2.h	/^inline void Bezier2::bounds_fast(Bbox2& bounds) const$/;"	f	class:Bezier2
brains	.\WEDTCE\WED_TCEToolAdapter.h	/^	WED_MapToolNew * brains;$/;"	m	class:WED_TCEToolAdapter
bridge	.\OneOffs\gen_roads.cpp	/^	int				bridge;$/;"	m	class:road	file:
bridge_offset	.\OneOffs\gen_roads.cpp	/^int		bridge_offset = 0;$/;"	v
bsd_close	.\Utils\MemFileUtils.cpp	117;"	d	file:
bsd_fstat	.\Utils\MemFileUtils.cpp	121;"	d	file:
bsd_lseek	.\Utils\MemFileUtils.cpp	118;"	d	file:
bsd_mmap	.\Utils\MemFileUtils.cpp	119;"	d	file:
bsd_munmap	.\Utils\MemFileUtils.cpp	120;"	d	file:
bsd_open	.\Utils\MemFileUtils.cpp	116;"	d	file:
btn_Check	.\GUI\GUI_Button.h	/^	btn_Check,		\/\/ Toggles itself on a click between 0 and 1.$/;"	e	enum:GUI_ButtonType
btn_Push	.\GUI\GUI_Button.h	/^	btn_Push,		\/\/ Push: hilites while mouse down and in, resets val to 0 on a click.$/;"	e	enum:GUI_ButtonType
btn_Radio	.\GUI\GUI_Button.h	/^	btn_Radio		\/\/ Sets itself to 1, sets radio friends to 0.$/;"	e	enum:GUI_ButtonType
btn_Web	.\GUI\GUI_Button.h	/^	btn_Web,		\/\/ Hilites when mouse-over...you need to dehilite when in the parent window -- radio-friends dehilite each other.  On click, resets val to 0$/;"	e	enum:GUI_ButtonType
bucket	.\RawImport\AptElev.cpp	/^static int	bucket(int p)$/;"	f	file:
bucket	.\XESTools\GISTool copy.cpp	/^int	bucket(int p)$/;"	f
bucketIndex_	.\lib_json\include\json\value.h	/^         BucketIndex bucketIndex_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
bucketsSize_	.\lib_json\include\json\value.h	/^      BucketIndex bucketsSize_;$/;"	m	class:Json::ValueInternalMap
buckets_	.\lib_json\include\json\value.h	/^      ValueInternalLink *buckets_;$/;"	m	class:Json::ValueInternalMap
buddy	.\XESCore\MeshAlgs.cpp	/^	CDT::Face_handle		buddy;			\/\/ Tri in our mesh that corresponds$/;"	m	struct:mesh_match_edge_t	file:
buddy	.\XESCore\MeshAlgs.cpp	/^	CDT::Vertex_handle		buddy;			\/\/ Vertex on slave that is matched to it$/;"	m	struct:mesh_match_vertex_t	file:
buf	.\Installer\BuildInstaller.cpp	/^char	buf[4096];$/;"	v
buf	.\Installer\InstallerRun.cpp	/^static char	buf[4096];$/;"	v	file:
buf	.\SDTS\SDTSRead.cpp	/^	memstreambuf					buf;$/;"	m	struct:SDTSModuleIterator::SDTSModuleIteratorImp	file:
buf	.\Utils\BitmapUtils.cpp	/^	jmp_buf					buf;$/;"	m	struct:__anon88	file:
buf	.\Utils\md5.h	/^	UINT4 buf[4]; 							\/* scratch buffer *\/$/;"	m	struct:__anon91
buffer	.\Utils\BitmapUtils.cpp	/^	JOCTET * 	buffer;				\/\/ Buffer start and size$/;"	m	struct:__anon87	file:
buffer	.\Utils\MemFileUtils.cpp	/^  char               buffer[BLOCKSIZE];$/;"	m	union:tar_buffer	file:
buffer	.\WEDCore\WED_UndoLayer.h	/^		WED_FastBuffer *	buffer;$/;"	m	struct:WED_UndoLayer::ObjInfo
buffer_	.\lib_json\src\lib_json\json_batchallocator.h	/^      AllocatedType buffer_[objectPerAllocation];$/;"	m	struct:Json::BatchAllocator::BatchInfo
buffered_data	.\Utils\zip.c	/^    Byte buffered_data[Z_BUFSIZE];\/* buffer contain compressed data to be writ*\/$/;"	m	struct:__anon104	file:
buildFrustumMatrix	.\Utils\MatrixUtils.cpp	/^buildFrustumMatrix(GLdouble m[16],$/;"	f
buildLookAtMatrix	.\Utils\MatrixUtils.cpp	/^buildLookAtMatrix(GLdouble m[16],$/;"	f
buildOrthoMatrix	.\Utils\MatrixUtils.cpp	/^buildOrthoMatrix( GLdouble m[16],$/;"	f
buildPerspectiveMatrix	.\Utils\MatrixUtils.cpp	/^buildPerspectiveMatrix(GLdouble m[16],$/;"	f
buildRotation	.\Utils\MatrixUtils.cpp	/^buildRotation( GLdouble	m[16],$/;"	f
build_3d_forests	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		build_3d_forests;$/;"	m	struct:ProcessingPrefs_t
build_convex_polygon	.\XESCore\BlockAlgs.cpp	/^bool	build_convex_polygon($/;"	f
build_curves	.\XESCore\BlockFill.cpp	/^int	candy_bar::build_curves(vector<BLOCK_face_data>& parts, const Vector2& va, const Vector2& vb, vector<Block_2::X_monotone_curve_2>& curves)$/;"	f	class:candy_bar
build_key_table	.\AC3DPlugins\obj_anim.cpp	/^static void build_key_table(ACObject * ob, vector<XObjKey>& table, int * root)$/;"	f	file:
build_listbox_cmnd	.\AC3DPlugins\XPlaneSupport.tcl	/^proc build_listbox_cmnd { listbox scrollbar textvar } {$/;"	p
build_listbox_dref	.\AC3DPlugins\XPlaneSupport.tcl	/^proc build_listbox_dref { listbox scrollbar textvar } {$/;"	p
build_rotmatrix	.\Utils\trackball.c	/^build_rotmatrix(float m[4][4], float q[4])$/;"	f
build_water_surface_dem	.\XESCore\Hydro2.cpp	/^void	build_water_surface_dem(CDT& io_mesh, const DEMGeo& in_elev, DEMGeo& out_water, DEMGeo& io_bath)$/;"	f
building_percent	.\XESCore\NetTables.h	/^	float		building_percent;$/;"	m	struct:NetRepInfo
buoys	.\WEDEntities\WED_Sealane.h	/^	WED_PropBoolText		buoys;$/;"	m	class:WED_Sealane
bwidth	.\GUI\GUI_Laftfont.h	/^	int		bwidth;$/;"	m	struct:gl_glyph
byte_before_the_zipfile	.\Utils\unzip.c	/^	uLong byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:__anon101	file:
byte_before_the_zipfile	.\Utils\unzip.c	/^	uLong byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:__anon102	file:
byte_height	.\RenderFarmUI\RF_Import.cpp	/^	int			byte_height;$/;"	m	struct:RF_ImportState_t	file:
byte_off	.\RenderFarmUI\RF_Import.cpp	/^	int			byte_off;$/;"	m	struct:RF_ImportState_t	file:
byte_width	.\RenderFarmUI\RF_Import.cpp	/^	int			byte_width;$/;"	m	struct:RF_ImportState_t	file:
bytes_per_pixel	.\DSF\DSFDefs.h	/^	uint8_t		bytes_per_pixel;	$/;"	m	struct:DSFRasterHeader_t
bz_tess	.\XESCore\Airports.cpp	/^int	bz_tess(const Bezier2& b)$/;"	f
c	.\Utils\CompGeomDefs2.h	/^	double	c;$/;"	m	struct:Line2
c	.\Utils\CompGeomDefs3.h	/^	Point3	c;$/;"	m	struct:Sphere3
c	.\Utils\SQLUtils.h	/^	C		c;$/;"	m	struct:sql_row3
c	.\Utils\SQLUtils.h	/^	C		c;$/;"	m	struct:sql_row4
c	.\Utils\SQLUtils.h	/^	C		c;$/;"	m	struct:sql_row5
c	.\Utils\STLUtils.h	/^	int			c;		\/\/ count from current pull$/;"	m	struct:split_seq
c	.\XESCore\BezierApprox.h	/^	int		c;$/;"	m	struct:Point2c
c1	.\Utils\CompGeomDefs2.h	/^	Point2	c1;$/;"	m	struct:Bezier2
c1	.\Utils\CompGeomDefs3.h	/^	Point3	c1;$/;"	m	class:Bezier3
c2	.\Utils\CompGeomDefs2.h	/^	Point2	c2;$/;"	m	struct:Bezier2
c2	.\Utils\CompGeomDefs3.h	/^	Point3	c2;$/;"	m	class:Bezier3
c_	.\RenderFarmUI\RF_Assert.h	/^	const char * c_;$/;"	m	class:rf_assert_fail_exception
c_	.\Utils\AssertUtils.cpp	/^	const char * c_;$/;"	m	class:assert_fail_exception	file:
c_	.\WEDCore\WED_Assert.h	/^	const char * c_;$/;"	m	class:wed_assert_fail_exception
c_	.\WEDCore\WED_Clipping.cpp	/^	C&	c_;$/;"	m	struct:construct_segment	file:
c_str	.\lib_json\include\json\value.h	/^      const char *c_str() const$/;"	f	class:Json::StaticString
c_str	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::c_str() const$/;"	f	class:Json::Value::CZString
cache	.\Utils\UTL_interval.h	/^	value_type									cache;$/;"	m	class:UTL_interval::const_iterator
cache_All	.\WEDEntities\WED_Entity.h	/^	cache_All = 3$/;"	e	enum:__anon115
cache_Spatial	.\WEDEntities\WED_Entity.h	/^	cache_Spatial = 1,$/;"	e	enum:__anon115
cache_Topological	.\WEDEntities\WED_Entity.h	/^	cache_Topological = 2,$/;"	e	enum:__anon115
cache_reset	.\XESCore\MeshDefs.cpp	/^void CDT::cache_reset(void)$/;"	f	class:CDT
cache_simulator	.\DSF\tri_stripper_101\cache_simulator.h	/^class cache_simulator$/;"	c	namespace:triangle_stripper
cache_simulator	.\DSF\tri_stripper_101\cache_simulator.h	/^inline cache_simulator::cache_simulator() : m_NbHits(0) { }$/;"	f	class:triangle_stripper::cache_simulator
cache_valid_	.\WEDEntities\WED_Entity.h	/^	mutable int				cache_valid_;$/;"	m	class:WED_Entity
calc_best_dependencies	.\AC3DPlugins\uv_mapper.cpp	/^static void		calc_best_dependencies(VertexMap& map, const cgd::Plane3& proj_plane)$/;"	f	file:
calc_err	.\XESCore\MapPolygon.cpp	/^static double calc_err(Halfedge_handle h, float max_err)$/;"	f	file:
calc_form_bounds	.\GUI\GUI_FormWindow.cpp	/^static const int * calc_form_bounds(int b[4], int w, int h)$/;"	f	file:
calc_four_cuts	.\Utils\QuiltUtils.h	/^void calc_four_cuts($/;"	f
calc_intersections	.\OneOffs\shape2xon.cpp	/^void calc_intersections(vector<seg_t>& segs, vector<pt_t>& xons)$/;"	f
calc_normal	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::calc_normal(DEMGeo& outX, DEMGeo& outY, DEMGeo& outZ, ProgressFunc inProg) const$/;"	f	class:DEMGeo
calc_overlay_error	.\Utils\QuiltUtils.h	/^ErrorMetric calc_overlay_error($/;"	f
calc_quilt_horizontal	.\Utils\QuiltUtils.h	/^void calc_quilt_horizontal($/;"	f
calc_quilt_vertical	.\Utils\QuiltUtils.h	/^void calc_quilt_vertical($/;"	f
calc_remove_error	.\XESCore\MeshSimplify.cpp	/^double MeshSimplify::calc_remove_error(CDT::Vertex_handle p, CDT::Vertex_handle q, CDT::Vertex_handle r)$/;"	f	class:MeshSimplify
calc_slope	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::calc_slope(DEMGeo& outSlope, DEMGeo& outHeading, ProgressFunc inProg) const$/;"	f	class:DEMGeo
calc_total_error	.\Utils\QuiltUtils.h	/^ErrorMetric calc_total_error($/;"	f
calc_total_error_rgn	.\Utils\QuiltUtils.h	/^ErrorMetric calc_total_error_rgn($/;"	f
calc_water_area	.\XESTools\GISTool_MiscCmds.cpp	/^static double calc_water_area(void)$/;"	f	file:
callback	.\AC3DPlugins\tcl_utils.cpp	/^void TCL_linked_vardv::callback(double value, void * iref, TCL_linked_vard * who)$/;"	f	class:TCL_linked_vardv
callback	.\AC3DPlugins\tcl_utils.cpp	/^void TCL_linked_variv::callback(int value, void * iref, TCL_linked_vari * who)$/;"	f	class:TCL_linked_variv
callback	.\AC3DPlugins\tcl_utils.cpp	/^void TCL_linked_varsv::callback(const char * value, void * iref, TCL_linked_vars * who)$/;"	f	class:TCL_linked_varsv
callbacks	.\OGLE\ogle.cpp	/^	OGLE_Callbacks 			callbacks;$/;"	m	struct:OGLE_Rec	file:
can_be_none	.\WEDCore\WED_PropertyHelper.h	/^	int			can_be_none;$/;"	m	class:WED_PropIntEnumBitfield
can_disclose	.\GUI\GUI_TextTable.h	/^	int						can_disclose;$/;"	m	struct:GUI_CellContent
can_drag	.\GUI\GUI_TextTable.h	/^	int						can_drag;$/;"	m	struct:GUI_CellContent
can_edit	.\GUI\GUI_TextTable.h	/^	int						can_edit;$/;"	m	struct:GUI_CellContent
can_edit	.\Interfaces\IPropertyObject.h	/^	int				can_edit;$/;"	m	struct:PropertyInfo_t
can_insert	.\XESCore\MapHelpers.h	/^bool			can_insert($/;"	f
can_optimize_with	.\OneOffs\gen_roads10.h	/^	bool	can_optimize_with(const road_segment& rhs) const$/;"	f	struct:road_segment
can_possibly_merge	.\XESCore\MapHelpers.h	/^bool			can_possibly_merge($/;"	f
can_quit	.\UI\ObjCUtils.h	/^		int  (*		can_quit)(void * info);				\/\/ Return 1 to allow quit, 0 to abort quitting.$/;"	m	struct:app_callbacks
can_remove_locked	.\XESCore\MeshSimplify.cpp	/^bool MeshSimplify::can_remove_locked(CDT::Vertex_handle q, CDT::Vertex_handle& p, CDT::Vertex_handle& r)$/;"	f	class:MeshSimplify
can_remove_topo	.\XESCore\MeshSimplify.cpp	/^bool	 MeshSimplify::can_remove_topo(CDT::Vertex_handle p, CDT::Vertex_handle q, CDT::Vertex_handle r)$/;"	f	class:MeshSimplify
can_resize	.\GUI\GUI_TextTable.h	/^	int						can_resize;$/;"	m	struct:GUI_HeaderContent
can_select	.\GUI\GUI_TextTable.h	/^	int						can_select;$/;"	m	struct:GUI_CellContent
can_select	.\GUI\GUI_TextTable.h	/^	int						can_select;$/;"	m	struct:GUI_HeaderContent
candy_bar	.\XESCore\BlockFill.cpp	/^candy_bar::candy_bar(int b_divs, double b_cuts[], double a_min, double a_max)$/;"	f	class:candy_bar
candy_bar	.\XESCore\BlockFill.cpp	/^class candy_bar {$/;"	c	file:
canonical_path	.\XESCore\SceneryPackages.cpp	/^static void canonical_path(string& iopath)$/;"	f	file:
cap_edge_h	.\WEDCore\WED_Clipping.cpp	/^bool	cap_edge_h(const C& in_segs, F make_curve, double y, int dir)$/;"	f
cap_edge_v	.\WEDCore\WED_Clipping.cpp	/^bool	cap_edge_v(const C& in_segs, F make_curve, double x, int dir)$/;"	f
capacity	.\WEDCore\WED_Buffer.cpp	/^	int				capacity;		\/\/ max number of bytes not including header$/;"	m	struct:WED_Buffer::Storage	file:
car	.\OneOffs\gen_roads10.h	/^	traffic *		car;$/;"	m	struct:traffic_lane
car_lane	.\OneOffs\gen_roads.cpp	/^struct	car_lane {$/;"	s	file:
card_dir_str	.\RenderFarmUI\RF_SelectionTool.cpp	/^const char * card_dir_str(Pmwx::Halfedge_handle e)$/;"	f
cars	.\OneOffs\gen_roads.cpp	/^	vector<car_lane>	cars;$/;"	m	class:road_deck	file:
cat_DIM	.\XESCore\BlockFill.cpp	/^	cat_DIM$/;"	e	enum:face_cat	file:
cat_flat	.\XESCore\BlockFill.cpp	/^	cat_flat,$/;"	e	enum:face_cat	file:
cat_forest	.\XESCore\BlockFill.cpp	/^	cat_forest,$/;"	e	enum:face_cat	file:
cat_oob	.\XESCore\BlockFill.cpp	/^	cat_oob,$/;"	e	enum:face_cat	file:
cat_urban	.\XESCore\BlockFill.cpp	/^	cat_urban = 0,$/;"	e	enum:face_cat	file:
catagory_Object	.\ObjEdit\OE_Msgs.h	/^	catagory_Object,$/;"	e	enum:__anon48
catagory_Projection	.\ObjEdit\OE_Msgs.h	/^	catagory_Projection$/;"	e	enum:__anon48
catagory_Texture	.\ObjEdit\OE_Msgs.h	/^	catagory_Texture,$/;"	e	enum:__anon48
categorize_vertex	.\XESCore\BlockFill.cpp	/^static face_cat categorize_vertex(CDT& mesh, CDT::Face_handle f, int n, Bbox2& bounds, float max_slope)$/;"	f	file:
category	.\XESCore\Zoning.h	/^	int			category;								\/\/ $/;"	m	struct:LandClassInfo_t
category	.\XPTools\TaxiMaker.cpp	/^	int						category;	\/\/ What kind of element are we?$/;"	m	struct:taxi_element_t	file:
cb	.\AC3DPlugins\tcl_utils.h	/^	TCL_changed_f	cb;$/;"	m	class:TCL_linked_vard
cb	.\AC3DPlugins\tcl_utils.h	/^	TCL_changedv_f					cb;$/;"	m	class:TCL_linked_vardv
cb	.\AC3DPlugins\tcl_utils.h	/^	TCL_changei_f	cb;$/;"	m	class:TCL_linked_vari
cb	.\AC3DPlugins\tcl_utils.h	/^	TCL_changeiv_f					cb;$/;"	m	class:TCL_linked_variv
cb	.\AC3DPlugins\tcl_utils.h	/^	TCL_changes_f	cb;$/;"	m	class:TCL_linked_vars
cb	.\AC3DPlugins\tcl_utils.h	/^	TCL_changesv_f					cb;$/;"	m	class:TCL_linked_varsv
cb64	.\WEDImportExport\WED_GatewayExport.cpp	/^static const char cb64[]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v	file:
cbrt	.\Utils\CompGeomDefs2.h	/^	inline double cbrt(double x) { return pow(x, 1.0\/3.0); }$/;"	f
ccb	.\Utils\Skeleton.cpp	/^	SK_Edge *			ccb;$/;"	m	struct:SK_Polygon	file:
cd64	.\WEDImportExport\WED_GatewayExport.cpp	/^static const char cd64[]="|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\\\\]^_`abcdefghijklmnopq";$/;"	v	file:
ceiling_ft	.\XESCore\AptDefs.h	/^	int							ceiling_ft;$/;"	m	struct:AptFlow_t
cenid_polyid	.\Tiger\TIGERTypes.h	/^	vector<CENID_POLYID>	cenid_polyid;$/;"	m	struct:LandmarkInfo_t
center	.\XESCore\BlockDefs.h	/^	Point2	center;$/;"	m	struct:BLOCK_face_data
center	.\XESCore\TriFan.h	/^	CDT::Vertex_handle				center;		\/\/ Our center$/;"	m	struct:TriFan_t
center_for_rotation	.\AC3DPlugins\obj_anim.cpp	/^float * center_for_rotation(ACObject * obj, float buf[3])$/;"	f
center_for_rotation_negative	.\AC3DPlugins\obj_anim.cpp	/^float * center_for_rotation_negative(ACObject * obj, float buf[3])$/;"	f
center_lites	.\WEDEntities\WED_Runway.h	/^	WED_PropBoolText		center_lites;$/;"	m	class:WED_Runway
center_marker	.\OneOffs\gen_roads10.h	/^	float center_marker() { return guts.markers[0].x; }$/;"	f	class:published_road
central_dir	.\Utils\zip.c	/^    linkedlist_data central_dir;\/* datablock with central dir in construction*\/$/;"	m	struct:__anon105	file:
central_header	.\Utils\zip.c	/^    char* central_header;       \/* central header data for the current file *\/$/;"	m	struct:__anon104	file:
central_pos	.\Utils\unzip.c	/^	uLong central_pos;          \/* position of the beginning of the central dir*\/$/;"	m	struct:__anon102	file:
centroid	.\Utils\CompGeomDefs2.h	/^	Point2		centroid(void) const { return Point2((p1.x_ + p2.x_) * 0.5,(p1.y_+p2.y_) * 0.5); }$/;"	f	struct:Bbox2
centroid	.\Utils\CompGeomDefs2.h	/^inline Point2		Polygon2::centroid(void) const$/;"	f	class:Polygon2
cfcc	.\Tiger\(TigerImport Backup.cpp).cpp	/^	const char *		cfcc;$/;"	m	struct:AreaInfo_t	file:
cfcc	.\Tiger\(TigerImport Backup.cpp).cpp	/^	const char *		cfcc;$/;"	m	struct:RoadInfo_t	file:
cfcc	.\Tiger\TIGERTypes.h	/^	CFCC			cfcc;			\/\/ Census feature classifcation code$/;"	m	struct:ChainInfo_t
cfcc	.\Tiger\TIGERTypes.h	/^	CFCC			cfcc;$/;"	m	struct:LandmarkInfo_t
cfcc	.\Tiger\TigerImport.cpp	/^	string				cfcc;$/;"	m	struct:RoadInfo_t	file:
cgal2ben	.\WEDCore\WED_Orthophoto.cpp	/^static void	cgal2ben(const Polygon_2& cgal, Polygon2& ben)$/;"	f	file:
cgal2ben	.\WEDCore\WED_Orthophoto.cpp	/^static void	cgal2ben(const Polygon_with_holes_2& cgal, vector<Polygon2>& ben)$/;"	f	file:
cgal2ben	.\XESCore\CGALDefs.h	/^inline Point2	cgal2ben(const P& p) { return Point2(CGAL::to_double(p.x()),CGAL::to_double(p.y())); }$/;"	f
cgal2ben	.\XESCore\CGALDefs.h	/^inline Segment2	cgal2ben(const Segment_2& s) { return Segment2(cgal2ben(s.source()),cgal2ben(s.target())); }$/;"	f
cgal2ben	.\XESCore\MapPolygon.cpp	/^void	cgal2ben(const Polygon_2& cgal, Polygon2& ben)$/;"	f
cgal2ben	.\XESCore\MapPolygon.cpp	/^void	cgal2ben(const Polygon_with_holes_2& cgal, vector<Polygon2>& ben)$/;"	f
cgal_failure	.\RenderFarmUI\RF_Main.cpp	/^void	cgal_failure(const char* a, const char* b, const char* c, int d, const char* e)$/;"	f
cgal_warning	.\RenderFarmUI\RF_Main.cpp	/^void	cgal_warning(const char* a, const char* b, const char* c, int d, const char* e)$/;"	f
cgd	.\AC3DPlugins\uv_mapper.cpp	/^namespace cgd {$/;"	n	file:
chainSpecs	.\DSF\DSFLibWrite.cpp	/^	ChainSpecVector				chainSpecs;$/;"	m	class:DSFFileWriterImp	file:
chainSpecs	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	ChainSpecVector				chainSpecs;$/;"	m	class:DSFFileWriterImp	file:
chainSpecsIndex	.\DSF\DSFLibWrite.cpp	/^	ChainSpecIndex				chainSpecsIndex;$/;"	m	class:DSFFileWriterImp	file:
chainSpecsIndex	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	ChainSpecIndex				chainSpecsIndex;$/;"	m	class:DSFFileWriterImp	file:
chains	.\XESCore\NetPlacement.h	/^	Net_ChainInfoSet				chains;$/;"	m	struct:Net_JunctionInfo_t
changed	.\WEDNetwork\WED_NWLinkAdapter.h	/^    int     changed;$/;"	m	struct:WED_NWCamera_t
channels	.\Utils\BitmapUtils.h	/^	short			channels;$/;"	m	struct:ImageInfo
char_bot_y	.\UI\FontMgr.cpp	/^	int		char_bot_y[256];	\/\/ Enter the bottom pixel location of the character$/;"	m	struct:FontInfo_t	file:
char_left_x	.\UI\FontMgr.cpp	/^	int		char_left_x[256];	\/\/ Enter the start pixel location of the character$/;"	m	struct:FontInfo_t	file:
char_map	.\GUI\GUI_Fonts.cpp	/^	OGL_char_map		char_map;$/;"	m	class:TT_font_info	file:
char_right_x	.\UI\FontMgr.cpp	/^	int		char_right_x[256];	\/\/ Enter the end pixel location of the character$/;"	m	struct:FontInfo_t	file:
char_top_y	.\UI\FontMgr.cpp	/^	int		char_top_y[256];	\/\/ Enter the top pixel location of the character$/;"	m	struct:FontInfo_t	file:
char_type	.\Utils\MemIStreamBuf.h	/^	typedef charT                     char_type;$/;"	t	class:std::basic_memstreambuf
charcode	.\GUI\GUI_Laftfont.h	/^	long long	charcode;$/;"	m	struct:gl_glyph
chars	.\OneOffs\gen_tiles.c	/^char chars[36] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";$/;"	v
check	.\RenderFarmUI\RF_MapView.cpp	23;"	d	file:
check	.\XESCore\DSFBuilder.cpp	/^	void check(double c[3], char m) {$/;"	f	struct:road_coords_checker
checkConstMemberCount	.\lib_json\src\test_lib_json\main.cpp	/^ValueTest::checkConstMemberCount( const Json::Value &value, unsigned int expectedCount )$/;"	f	class:ValueTest
checkEqual	.\lib_json\src\test_lib_json\jsontest.h	/^   checkEqual( TestResult &result, const T &expected, const T &actual, $/;"	f	namespace:JsonTest
checkIs	.\lib_json\src\test_lib_json\main.cpp	/^ValueTest::checkIs( const Json::Value &value, const IsCheck &check )$/;"	f	class:ValueTest
checkIsEqual	.\lib_json\src\test_lib_json\main.cpp	/^ValueTest::checkIsEqual( const Json::Value &x, const Json::Value &y )$/;"	f	class:ValueTest
checkIsLess	.\lib_json\src\test_lib_json\main.cpp	/^ValueTest::checkIsLess( const Json::Value &x, const Json::Value &y )$/;"	f	class:ValueTest
checkMemberCount	.\lib_json\src\test_lib_json\main.cpp	/^ValueTest::checkMemberCount( Json::Value &value, unsigned int expectedCount )$/;"	f	class:ValueTest
checkStringEqual	.\lib_json\src\test_lib_json\jsontest.cpp	/^checkStringEqual( TestResult &result, $/;"	f	namespace:JsonTest
check_block_visitor	.\XESCore\BlockAlgs.cpp	/^class check_block_visitor {$/;"	c	file:
check_color	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::check_color(const string & inGlyph, int position, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
check_junction_highways	.\XESCore\NetAlgs.cpp	/^void check_junction_highways(Pmwx::Vertex_handle v, set<Pmwx::Vertex_handle>& changed)$/;"	f
check_multi_glyph	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::check_multi_glyph(const string & inGlyph, int position, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
check_rule	.\XESCore\Zoning.cpp	/^inline bool	check_rule(T minv, T maxv, T actv)$/;"	f
check_single_glyph	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::check_single_glyph(const char inGlyph, int position, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
check_split_zone_visitor	.\XESCore\MapHelpers.h	/^class check_split_zone_visitor {$/;"	c
checked	.\GUI\GUI_Defs.h	/^	int				checked;		\/\/ Checked$/;"	m	struct:GUI_MenuItem_t
checked	.\GUI\GUI_Window.cpp	/^		int		checked;$/;"	m	struct:CmdEval_t	file:
childValues_	.\lib_json\include\json\writer.h	/^      ChildValues childValues_;$/;"	m	class:Json::StyledStreamWriter
childValues_	.\lib_json\include\json\writer.h	/^      ChildValues childValues_;$/;"	m	class:Json::StyledWriter
child_cache	.\Utils\XCarBoneUtils.h	/^	vector<int>		child_cache;	\/\/ Table index # of our children, a cache for speed$/;"	m	struct:XCarBone
child_id	.\WEDEntities\WED_Thing.h	/^	vector<int>		child_id;$/;"	m	class:WED_Thing
children	.\Utils\QuadTree.h	/^		Node *		children[__N];$/;"	m	struct:QuadTree::Node
children	.\Utils\Skeleton.cpp	/^	set<SK_Polygon *>	children;$/;"	m	struct:SK_Polygon	file:
children	.\WEDCore\WED_XMLWriter.h	/^		vector<WED_XMLElement *>				children;$/;"	m	class:WED_XMLElement
chksum	.\Utils\MemFileUtils.cpp	/^  char chksum[8];		\/* 148 *\/$/;"	m	struct:tar_header	file:
choices	.\WEDEntities\WED_KeyObjects.h	/^		map<string,int>		choices;$/;"	m	class:WED_KeyObjects
choices	.\XESCore\DEMDefs.cpp	/^	int		choices;$/;"	m	struct:HistoHelper	file:
ci	.\Utils\zip.c	/^    curfile_info ci;            \/* info on the file curretly writing *\/$/;"	m	struct:__anon105	file:
circle_to_search	.\XESCore\MapHelpers.h	/^void	circle_to_search(const typename Traits::Point_2& a,const typename Traits::Point_2& b,const typename Traits::Point_2& c,typename Traits::Circle_2& circ)$/;"	f
circular	.\XESCore\TriFan.h	/^	bool							circular;	\/\/ True if this is circular - makes it easier to remove tris$/;"	m	struct:TriFan_t
circulator_distance_to	.\Utils\STLUtils.h	/^int circulator_distance_to(Circulator circ, Circulator ent)$/;"	f
clamp	.\Utils\CompGeomDefs2.h	/^	Point2		clamp(const Point2& p) const { return Point2($/;"	f	struct:Bbox2
cld_min_ft	.\WEDEntities\WED_ATCFlow.h	/^	WED_PropDoubleText			cld_min_ft;$/;"	m	class:WED_ATCFlow
clean_anim	.\AC3DPlugins\XPlaneSupport.tcl	/^proc clean_anim {} {$/;"	p
clean_block	.\XESCore\BlockAlgs.cpp	/^void clean_block(Block_2& block)$/;"	f
clean_rpath	.\WEDCore\WED_LibraryMgr.cpp	/^static void clean_rpath(string& s)$/;"	f	file:
clean_vpath	.\WEDCore\WED_LibraryMgr.cpp	/^static void clean_vpath(string& s)$/;"	f	file:
cleanup	.\AC3DPlugins\uv_mapper.cpp	/^static void		cleanup(VertexMap& map, BackMap& back, int apply_st)$/;"	f	file:
clear	.\DSF\tri_stripper_101\cache_simulator.h	/^inline void cache_simulator::clear() {$/;"	f	class:triangle_stripper::cache_simulator
clear	.\DSF\tri_stripper_101\graph_array.h	/^inline void graph_array<nodetype, arctype>::clear() {$/;"	f	class:common_structures::graph_array
clear	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::clear() {$/;"	f	class:common_structures::heap_array
clear	.\GUI\GUI_Fonts.cpp	/^void TT_font_info::clear(const string& inPath, float inSize)$/;"	f	class:TT_font_info
clear	.\Obj\ObjPointPool.cpp	/^void	ObjPointPool::clear(int depth)$/;"	f	class:ObjPointPool
clear	.\Utils\RLERegion.cpp	/^void	RLERegion::clear(void)$/;"	f	class:RLERegion
clear	.\Utils\RTree2.h	/^	void	clear() { if(root) delete root; root = NULL; }$/;"	f	class:RTree2
clear	.\Utils\UTL_interval.h	/^void	UTL_interval<T>::clear(void)$/;"	f	class:UTL_interval
clear	.\Utils\XUtils.cpp	/^	void	clear()$/;"	f	struct:XPointPool::XPointPoolImp
clear	.\Utils\XUtils.cpp	/^void	XPointPool::clear()$/;"	f	class:XPointPool
clear	.\Utils\point_index.h	/^void		spatial_index_2<Traits>::clear()$/;"	f	class:spatial_index_2
clear	.\WEDXPlugin\WED_XPluginMgr.h	/^    void clear()$/;"	f	struct:WED_XPluginStats_t
clear	.\XESCore\MeshDefs.cpp	/^void CDT::clear(void)$/;"	f	class:CDT
clear	.\XESCore\Zoning.cpp	/^void		FaceGraph_t::clear(void)$/;"	f	class:FaceGraph_t
clear	.\lib_json\src\lib_json\json_value.cpp	/^Value::clear()$/;"	f	class:Json::Value
clear_from	.\XESCore\DEMDefs.cpp	/^void DEMGeo::clear_from(const DEMGeo& x)$/;"	f	class:DEMGeo
clear_from	.\XESCore\DEMDefs.cpp	/^void DEMGeo::clear_from(const DEMGeo& x, float v)$/;"	f	class:DEMGeo
clear_with_bounds	.\XESCore\DEMGrid.cpp	/^void	DEMGrid::clear_with_bounds(double west, double south, double east, double north, int post)$/;"	f	class:DEMGrid
click_back	.\WEDImportExport\WED_GatewayImport.cpp	/^	click_back$/;"	e	enum:imp_dialog_msg	file:
click_next	.\WEDImportExport\WED_GatewayImport.cpp	/^	click_next,$/;"	e	enum:imp_dialog_msg	file:
cliff_angle1	.\XESCore\DEMTables.h	/^	float			cliff_angle1;$/;"	m	struct:CliffInfo_t
cliff_angle2	.\XESCore\DEMTables.h	/^	float			cliff_angle2;	$/;"	m	struct:CliffInfo_t
cliff_info	.\XESCore\DEMTables.h	/^	CliffInfo_t		cliff_info;$/;"	m	struct:NaturalTerrainInfo_t
cliff_res	.\XESCore\DEMTables.h	/^	Point2			cliff_res;$/;"	m	struct:CliffInfo_t
cliff_tex	.\XESCore\DEMTables.h	/^	string			cliff_tex;$/;"	m	struct:CliffInfo_t
clim_style	.\XESCore\DEMTables.h	/^	int				clim_style;$/;"	m	struct:NaturalTerrainRule_t
clip_any	.\WEDCore\WED_Clipping.cpp	/^bool clip_any(SC& io_segs, const clipping_line& l, bool cap)$/;"	f
clip_general_polygon	.\WEDCore\WED_Clipping.cpp	/^bool clip_general_polygon(const vector<GP>& in_pwh, vector<vector<GP> >& out_pwh_list, const Bbox2& box)$/;"	f
clip_polygon	.\WEDCore\WED_Clipping.cpp	/^bool	clip_polygon(const vector<BezierPolygon2>& in_pwh, vector<vector<BezierPolygon2> >& out_pwh_list, const Bbox2& box)$/;"	f
clip_polygon	.\WEDCore\WED_Clipping.cpp	/^bool	clip_polygon(const vector<BezierPolygon2p>& in_pwh, vector<vector<BezierPolygon2p> >& out_pwh_list, const Bbox2& box)$/;"	f
clip_polygon	.\WEDCore\WED_Clipping.cpp	/^bool clip_polygon(const vector<Polygon2>& in_pwh, vector<vector<Polygon2> >& out_pwh_list, const Bbox2& box)$/;"	f
clip_polygon	.\WEDCore\WED_Clipping.cpp	/^bool clip_polygon(const vector<Polygon2p>& in_pwh, vector<vector<Polygon2p> >& out_pwh_list, const Bbox2& box)$/;"	f
clip_pwh	.\WEDCore\WED_Clipping.cpp	/^bool clip_pwh(const vector<GP>& pwh, vector<vector<GP> >& out_pwh_list, const clipping_line& l)$/;"	f
clip_pwh_list	.\WEDCore\WED_Clipping.cpp	/^bool clip_pwh_list(const vector<vector<GP> >& pwh_list, vector<vector<GP> >& out_pwh_list, const clipping_line& l)$/;"	f
clip_segments	.\WEDCore\WED_Clipping.cpp	/^void	clip_segments(vector<Bezier2>& out_segs, const Bbox2& box)$/;"	f
clip_segments	.\WEDCore\WED_Clipping.cpp	/^void	clip_segments(vector<Bezier2p>& out_segs, const Bbox2& box)$/;"	f
clip_segments	.\WEDCore\WED_Clipping.cpp	/^void	clip_segments(vector<Segment2>& out_segs, const Bbox2& box)$/;"	f
clip_segments	.\WEDCore\WED_Clipping.cpp	/^void	clip_segments(vector<Segment2p>& out_segs, const Bbox2& box)$/;"	f
clip_to	.\Utils\CompGeomDefs2.h	/^inline bool	Segment2::clip_to(const Bbox2& bbox)$/;"	f	class:Segment2
clip_to	.\Utils\CompGeomDefs2.h	/^inline bool	Segment2::clip_to(const Segment2& l)$/;"	f	class:Segment2
clipping_line	.\WEDCore\WED_Clipping.cpp	/^	clipping_line(bool v, double c, int d) : is_vertical(v), coord(c), dir(d) { }$/;"	f	struct:clipping_line
clipping_line	.\WEDCore\WED_Clipping.cpp	/^struct clipping_line {$/;"	s	file:
close	.\WEDImportExport\WED_GatewayImport.cpp	/^ int close() $/;"	f	class:RAII_file
closeEvent	.\UI\XWin.lin.cpp	/^void XWin::closeEvent(QCloseEvent* e)$/;"	f	class:XWin
close_Cancel	.\Utils\PlatformUtils.h	/^	close_Cancel$/;"	e	enum:__anon96
close_Discard	.\Utils\PlatformUtils.h	/^	close_Discard,$/;"	e	enum:__anon96
close_Save	.\Utils\PlatformUtils.h	/^	close_Save,$/;"	e	enum:__anon96
closed	.\WEDEntities\WED_AirportChain.h	/^	int		closed;$/;"	m	class:WED_AirportChain
closed	.\WEDEntities\WED_LinePlacement.h	/^	WED_PropBoolText		closed;$/;"	m	class:WED_LinePlacement
closed	.\WEDEntities\WED_StringPlacement.h	/^	WED_PropBoolText		closed;$/;"	m	class:WED_StringPlacement
closer_180	.\Utils\MathUtils.h	/^inline float closer_180   (const float nowval,const float termval,const float ratnew  )$/;"	f
closer_360	.\Utils\MathUtils.h	/^inline float closer_360   (const float nowval,const float termval,const float ratnew  )$/;"	f
closer_assymp	.\Utils\MathUtils.h	/^inline float closer_assymp(const float nowval,const float termval,const float speedrat){return nowval*(1.0f-speedrat)+termval*speedrat;}$/;"	f
closer_linear	.\Utils\MathUtils.h	/^inline float closer_linear(const float nowval,const float termval,const float maxrate ){return nowval+fltlim(termval-nowval,-maxrate,maxrate);}$/;"	f
clusters	.\XESCore\MeshConformer.h	/^  Mesh_2::Clusters<Tr> clusters;$/;"	m	class:CGAL::Triangulation_conformer_any_2
clusters_vertices_begin	.\XESCore\MeshConformer.h	/^  Cluster_vertices_iterator clusters_vertices_begin() const$/;"	f	class:CGAL::Triangulation_conformer_any_2
clusters_vertices_end	.\XESCore\MeshConformer.h	/^  Cluster_vertices_iterator clusters_vertices_end() const$/;"	f	class:CGAL::Triangulation_conformer_any_2
cmd	.\GUI\GUI_Commander.h	/^				int				cmd;$/;"	m	struct:GUI_Commander::deferred_cmd_or_key
cmd	.\GUI\GUI_Defs.h	/^	int				cmd;			\/\/ Command enum for this menu item$/;"	m	struct:GUI_MenuItem_t
cmd	.\ObjEdit\OE_DataModel.cpp	/^	string			cmd;$/;"	m	struct:UndoState_t	file:
cmd	.\Obj\XObjDefs.h	/^	int						cmd;$/;"	m	struct:XObjCmd8
cmd	.\XESTools\GISTool_Utils.cpp	/^	GISTool_Command_f		cmd;$/;"	m	struct:GISTool_CmdInfo_t	file:
cmd	.\XESTools\GISTool_Utils.h	/^	GISTool_Command_f	cmd;$/;"	m	struct:GISTool_RegCmd_t
cmdID	.\Obj\XObjDefs.h	/^	int				cmdID;		\/\/ What command are we?$/;"	m	struct:XObjCmd
cmdName	.\RenderFarmUI\RF_MapView.cpp	/^	const char *	cmdName;$/;"	m	struct:DEMViewInfo_t	file:
cmdType	.\Obj\XObjDefs.h	/^	int				cmdType;	\/\/ Are we a line, poly or attribute?$/;"	m	struct:XObjCmd
cmd_id	.\Obj\XObjDefs.h	/^	int				cmd_id;$/;"	m	struct:cmd_info
cmd_info	.\Obj\XObjDefs.h	/^struct	cmd_info {$/;"	s
cmd_nop	.\Obj\XObjWriteEmbedded.cpp	/^	cmd_nop=0,					\/\/ Used to pad alignment.$/;"	e	enum:__anon43	file:
cmd_stop	.\Obj\XObjWriteEmbedded.cpp	/^	cmd_stop=13$/;"	e	enum:__anon43	file:
cmd_string	.\XPTools\XGrinderShell.cpp	/^	string					cmd_string;$/;"	m	struct:conversion_info	file:
cmd_type	.\Obj\XObjDefs.h	/^	int				cmd_type;$/;"	m	struct:cmd_info
cmdname	.\XESTools\GISTool_Utils.h	/^	const char *		cmdname;$/;"	m	struct:GISTool_RegCmd_t
cmds	.\Obj\XObjDefs.h	/^	vector<XObjCmd8>		cmds;$/;"	m	struct:XObjLOD8
cmds	.\Obj\XObjDefs.h	/^	vector<XObjCmd>	cmds;$/;"	m	struct:XObj
cockpit	.\Obj\XObjBuilder.h	/^ 	int			cockpit;			int		o_cockpit;$/;"	m	class:XObjBuilder
code	.\XESCore\AptDefs.h	/^	int			code;$/;"	m	struct:AptLinearSegment_t
codePointToUTF8	.\lib_json\src\lib_json\json_tool.h	/^codePointToUTF8(unsigned int cp)$/;"	f	namespace:Json
col_	.\XESCore\MapTopology.h	/^	CollectionType *		col_;$/;"	m	struct:CollectionVisitor
col_Bottom	.\ObjEdit\OE_PatchList.cpp	/^	col_Bottom,$/;"	e	enum:__anon52	file:
col_Count	.\ObjEdit\OE_PatchList.cpp	/^	col_Count$/;"	e	enum:__anon52	file:
col_Left	.\ObjEdit\OE_PatchList.cpp	/^	col_Left,$/;"	e	enum:__anon52	file:
col_Name	.\ObjEdit\OE_PatchList.cpp	/^	col_Name,$/;"	e	enum:__anon52	file:
col_Pic	.\ObjEdit\OE_PatchList.cpp	/^	col_Pic = 0,$/;"	e	enum:__anon52	file:
col_Right	.\ObjEdit\OE_PatchList.cpp	/^	col_Right,$/;"	e	enum:__anon52	file:
col_Top	.\ObjEdit\OE_PatchList.cpp	/^	col_Top,$/;"	e	enum:__anon52	file:
col_name	.\RawImport\ShapeIO.cpp	/^	string				col_name;			\/\/ this is the name of the col in the shape file.$/;"	m	struct:import_column_t	file:
collectComments_	.\lib_json\include\json\reader.h	/^      bool collectComments_;$/;"	m	class:Json::Reader
collect_contig	.\XESCore\NetHelpers.h	/^inline double collect_contig(Pmwx::Halfedge_handle root, list<Pmwx::Halfedge_handle>& flow)$/;"	f
collect_splits	.\WEDWindows\WED_GroupCommands.cpp	/^static int	collect_splits(ISelectable * base, void * ref)$/;"	f	file:
collinear	.\Utils\CompGeomDefs2.h	/^	bool	collinear(const Point2& p) const { return (a * p.x_ + b * p.y_ + c) == 0; }$/;"	f	struct:Line2
collinear	.\Utils\CompGeomDefs2.h	/^	bool	collinear(const Point2& p) const { return Vector2(p1, p2).no_turn(Vector2(p1, p)); }$/;"	f	struct:Segment2
collinear	.\Utils\CompGeomDefs2.h	/^inline bool	collinear(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
collinear_has_on	.\Utils\CompGeomDefs2.h	/^inline bool	Segment2::collinear_has_on(const Point2& p) const$/;"	f	class:Segment2
collinear_has_on	.\Utils\CompGeomDefs3.h	/^inline bool	Segment3::collinear_has_on(const Point3& p) const$/;"	f	class:Segment3
color	.\RenderFarmUI\RF_Export.cpp	/^	int			color;$/;"	m	struct:RF_ExportState_t	file:
color	.\XESCore\Zoning.cpp	/^	int						color;$/;"	m	struct:FaceNode_t	file:
color	.\XESCore\Zoning.h	/^	int			color;$/;"	m	struct:LandFillRule_t
color_code	.\XESCore\AptDefs.h	/^	int			color_code;$/;"	m	struct:AptBeacon_t
colors	.\WEDMap\WED_Colors.cpp	/^vector<float>	colors;$/;"	v
colorsImportant	.\Utils\BitmapUtils.cpp	/^	long			colorsImportant;$/;"	m	struct:BMPImageDesc	file:
colorsUsed	.\Utils\BitmapUtils.cpp	/^	long			colorsUsed;$/;"	m	struct:BMPImageDesc	file:
cols	.\WEDWindows\WED_FilterBar.cpp	/^static int cols[2] = { 100, 100 };$/;"	v	file:
columns	.\RawImport\ShapeIO.cpp	/^	vector<string>		columns;$/;"	m	struct:shape_pattern_t	file:
columns	.\VPF\VPFTable.h	/^	vector<VPF_ColumnDef>	columns;$/;"	m	struct:VPF_TableDef
combo	.\WEDMap\WED_StructureLayer.cpp	/^inline int combo(int n, int k) { return factorial(n) \/ (factorial(k) * factorial(n - k)); }$/;"	f
commentAfter	.\lib_json\include\json\value.h	/^      commentAfter,             \/\/\/< a comment on the line after a value (only make sense for root value)$/;"	e	enum:Json::CommentPlacement
commentAfterOnSameLine	.\lib_json\include\json\value.h	/^      commentAfterOnSameLine,   \/\/\/< a comment just after a value on the same line$/;"	e	enum:Json::CommentPlacement
commentBefore	.\lib_json\include\json\value.h	/^      commentBefore = 0,        \/\/\/< a comment placed on the line before a value$/;"	e	enum:Json::CommentPlacement
comment_	.\lib_json\include\json\value.h	/^         char *comment_;$/;"	m	struct:Json::Value::CommentInfo
commentsBefore_	.\lib_json\include\json\reader.h	/^      std::string commentsBefore_;$/;"	m	class:Json::Reader
comments_	.\lib_json\include\json\value.h	/^      CommentInfo *comments_;$/;"	m	class:Json::Value
common_structures	.\DSF\tri_stripper_101\graph_array.h	/^namespace common_structures {$/;"	n
common_structures	.\DSF\tri_stripper_101\heap_array.h	/^namespace common_structures {$/;"	n
comp_res	.\XESCore\DEMTables.h	/^	Point2			comp_res;	$/;"	m	struct:NaturalTerrainInfo_t
compare	.\lib_json\src\lib_json\json_value.cpp	/^Value::compare( const Value &other ) const$/;"	f	class:Json::Value
compare_active_segs	.\Utils\PolyRasterUtils.h	/^	struct compare_active_segs {$/;"	s	struct:PolyRasterizer
compare_before_after	.\Obj\ObjConvert.cpp	/^void compare_before_after(const vector<INDEX_T>& b, const vector<INDEX_T>& a)$/;"	f
compare_key	.\AC3DPlugins\obj_anim.cpp	/^struct compare_key {$/;"	s	file:
compare_key	.\Obj\ObjDraw.cpp	/^struct compare_key {$/;"	s	file:
compare_second	.\WEDMap\WED_CreateEdgeTool.cpp	/^struct compare_second {$/;"	s	file:
compare_str_no_case	.\WEDCore\WED_LibraryMgr.h	/^	struct compare_str_no_case {$/;"	s	class:WED_LibraryMgr
compo_tex	.\XESCore\DEMTables.h	/^	string			compo_tex;		\/\/\/ ALL modes that can have a second texture jam it here.$/;"	m	struct:NaturalTerrainInfo_t
composite_params	.\XESCore\DEMTables.h	/^	float			composite_params[6];$/;"	m	struct:NaturalTerrainInfo_t
compress_one_file	.\Utils\FileUtils.cpp	/^static int compress_one_file(zipFile archive, const string& src, const string& dst)$/;"	f	file:
compress_recursive	.\Utils\FileUtils.cpp	/^static int compress_recursive(zipFile archive, const string& dir, const string& prefix)$/;"	f	file:
compressed_size	.\Utils\unzip.h	/^    uLong compressed_size;      \/* compressed size                 4 bytes *\/$/;"	m	struct:unz_file_info_s
compressionType	.\Utils\BitmapUtils.cpp	/^	long			compressionType;$/;"	m	struct:BMPImageDesc	file:
compression_method	.\Utils\unzip.c	/^	uLong compression_method;   \/* compression method (0==store) *\/$/;"	m	struct:__anon101	file:
compression_method	.\Utils\unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:unz_file_info_s
connected	.\AC3DPlugins\uv_mapper.cpp	/^	set<uv_vertex_info_t *>			connected;		\/\/ Everyone connecting to me$/;"	m	struct:uv_vertex_info_t	file:
connected	.\XESCore\Zoning.cpp	/^bool			FaceGraph_t::connected(FaceNode_t * f1, FaceNode_t * f2)$/;"	f	class:FaceGraph_t
connected_vertices	.\XESCore\MapAlgs.cpp	/^bool	connected_vertices(Pmwx::Vertex_handle v1, Pmwx::Vertex_handle v2)$/;"	f
const_iterator	.\Utils\UTL_interval.h	/^	const_iterator(const self& x) : src(x.src), n(x.n) { }$/;"	f	class:UTL_interval::const_iterator
const_iterator	.\Utils\UTL_interval.h	/^	const_iterator(const vector<T> * ptr, int i) : src(ptr), n(i) { }$/;"	f	class:UTL_interval::const_iterator
const_iterator	.\Utils\UTL_interval.h	/^class UTL_interval<T>::const_iterator {$/;"	c	class:UTL_interval
const_iterator	.\XESCore\DEMDefs.h	/^	typedef	const float *	const_iterator;$/;"	t	struct:DEMGeo
const_iterator	.\lib_json\include\json\value.h	/^      typedef ValueConstIterator const_iterator;$/;"	t	class:Json::Value
const_node_iterator	.\DSF\tri_stripper_101\graph_array.h	/^	typedef typename std::vector<node>::const_iterator			const_node_iterator;$/;"	t	class:common_structures::graph_array
const_node_reverse_iterator	.\DSF\tri_stripper_101\graph_array.h	/^	typedef typename std::vector<node>::const_reverse_iterator	const_node_reverse_iterator;$/;"	t	class:common_structures::graph_array
const_out_arc_iterator	.\DSF\tri_stripper_101\graph_array.h	/^	typedef typename std::list<arc>::const_iterator		const_out_arc_iterator;$/;"	t	class:common_structures::graph_array
const_reference	.\Obj\XDefs.h	/^				typedef typename base_type::const_reference	const_reference;$/;"	t	class:std::__dev_vector
const_sequence_for_container	.\Utils\STLUtils.h	/^	const_sequence_for_container(const T& c) : begin(c.begin()), end(c.end()) { }$/;"	f	struct:const_sequence_for_container
const_sequence_for_container	.\Utils\STLUtils.h	/^struct const_sequence_for_container {$/;"	s
const_side_iterator	.\Utils\CompGeomDefs2.h	/^		const_side_iterator(const Polygon2 * p, int n) : p_(p), n_(n) { }$/;"	f	struct:Polygon2::const_side_iterator
const_side_iterator	.\Utils\CompGeomDefs2.h	/^	struct const_side_iterator : public std::iterator<forward_iterator_tag, Segment2> {$/;"	s	struct:Polygon2
construct_segment	.\WEDCore\WED_Clipping.cpp	/^	construct_segment(C& c) : c_(c) {}$/;"	f	struct:construct_segment
construct_segment	.\WEDCore\WED_Clipping.cpp	/^struct construct_segment {$/;"	s	file:
construct_segment	.\WEDCore\WED_Clipping.cpp	/^struct construct_segment<C, Bezier2> {$/;"	s	file:
construct_segment	.\WEDCore\WED_Clipping.cpp	/^struct construct_segment<C, Bezier2p> {$/;"	s	file:
consume_features	.\XESCore\Zoning.h	/^	set<int>	consume_features;						\/\/ These features get consumed by the act of zoning.$/;"	m	struct:ZoningRule_t
container	.\Utils\STLUtils.h	/^	Container* container;$/;"	m	class:set_erase_iterator
container	.\Utils\STLUtils.h	/^	Container* container;$/;"	m	class:set_insert_iterator
container_type	.\Utils\STLUtils.h	/^	typedef Container container_type;$/;"	t	class:set_erase_iterator
container_type	.\Utils\STLUtils.h	/^	typedef Container container_type;$/;"	t	class:set_insert_iterator
containing_face	.\XESCore\MapAlgs.cpp	/^Pmwx::Face_handle containing_face(Pmwx::Ccb_halfedge_circulator circ)$/;"	f
contains	.\Utils\CompGeomDefs2.h	/^inline	bool		Bbox2::contains(const Bbox2& rhs) const$/;"	f	class:Bbox2
contains	.\Utils\CompGeomDefs2.h	/^inline	bool		Bbox2::contains(const Point2& p) const$/;"	f	class:Bbox2
contains	.\Utils\CompGeomDefs2.h	/^inline	bool		Bbox2::contains(const Segment2& s) const$/;"	f	class:Bbox2
contains	.\Utils\CompGeomDefs3.h	/^	bool	contains(const Point3& p) const { return Vector3(c, p).squared_length() <= radius_squared; }$/;"	f	struct:Sphere3
contains	.\Utils\UTL_interval.h	/^bool	UTL_interval<T>::contains(T b, T e) const$/;"	f	class:UTL_interval
contains	.\Utils\UTL_interval.h	/^bool	UTL_interval<T>::contains(T t) const$/;"	f	class:UTL_interval
contains	.\Utils\point_index.h	/^bool		spatial_index_2<Traits>::contains(const Point_2& p)$/;"	f	class:spatial_index_2
containsControlCharacter	.\lib_json\src\lib_json\json_writer.cpp	/^static bool containsControlCharacter( const char* str )$/;"	f	namespace:Json
containsNewLine	.\lib_json\src\lib_json\json_reader.cpp	/^containsNewLine( Reader::Location begin, $/;"	f	namespace:Json
content_type	.\GUI\GUI_TextTable.h	/^	GUI_CellContentType		content_type;$/;"	m	struct:GUI_CellContent
context	.\UI\XPopup.h	/^	GLXContext	context;$/;"	m	struct:xwindow
contiguous	.\DSF\DSFLibWrite.cpp	/^		bool					contiguous;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
contiguous	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool					contiguous;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
conversion_info	.\XPTools\XGrinderShell.cpp	/^struct conversion_info {$/;"	s	file:
conversion_menu	.\XPTools\XGrinderShell.cpp	/^static xmenu							conversion_menu;$/;"	v	file:
conversions	.\XPTools\XGrinderShell.cpp	/^static vector<conversion_info*>			conversions;$/;"	v	file:
convert_7	.\AC3DPlugins\obj8_export.cpp	/^	convert_7,$/;"	e	enum:convert_choice	file:
convert_choice	.\AC3DPlugins\obj8_export.cpp	/^enum convert_choice {$/;"	g	file:
convert_e	.\AC3DPlugins\obj8_export.cpp	/^	convert_e$/;"	e	enum:convert_choice	file:
convert_none	.\AC3DPlugins\obj8_export.cpp	/^	convert_none,$/;"	e	enum:convert_choice	file:
convert_polygon_cleanup	.\XESCore\AptAlgs.cpp	/^static void convert_polygon_cleanup(const Polygon2& input, vector<Polygon_2>& output)$/;"	f	file:
convert_rel_ptrs	.\OneOffs\osm2shape.c	/^void convert_rel_ptrs(int idx)$/;"	f
convert_way_ptrs	.\OneOffs\osm2shape.c	/^void convert_way_ptrs(int idx)$/;"	f
convex	.\Utils\CompGeomDefs2.h	/^inline bool Polygon2::convex(void) const$/;"	f	class:Polygon2
convex_quad	.\XESCore\MapAlgs.cpp	/^bool	convex_quad(const Point_2& p1, const Point_2& p2, const Point_2& p3, const Point_2& p4)$/;"	f
cookie	.\DSF\DSFDefs.h	/^	char	cookie[8];$/;"	m	struct:DSFHeader_t
cookie	.\DSF\dsflib_013005\DSFDefs.h	/^	char	cookie[8];$/;"	m	struct:DSFHeader_t
cookie	.\XESCore\DEMIO.cpp	/^	char			cookie[3];					\/\/ Must be 'UHL'$/;"	m	struct:DTED_UHL_t	file:
coord	.\WEDCore\WED_Clipping.cpp	/^	double	coord;$/;"	m	struct:clipping_line	file:
coordinates	.\XESCore\DEMDefs.h	/^	typedef	pair<int,int>	coordinates;$/;"	t	struct:DEMGeo
coords	.\XESCore\DEMDefs.h	/^		DEMGeo::coordinates		coords;$/;"	m	struct:DEMGeo::neighbor_iterator
copyMatrix	.\Utils\MatrixUtils.cpp	/^copyMatrix(GLdouble dst[16], GLdouble src[16])$/;"	f
copy_cut_edges	.\Utils\QuiltUtils.h	/^void copy_cut_edges($/;"	f
copy_cut_horizontal	.\Utils\QuiltUtils.h	/^void copy_cut_horizontal($/;"	f
copy_cut_vertical	.\Utils\QuiltUtils.h	/^void copy_cut_vertical($/;"	f
copy_from_scanline	.\XESCore\DEMIO.cpp	/^void copy_from_scanline($/;"	f
copy_geo_from	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::copy_geo_from(const DEMGeo& rhs)$/;"	f	class:DEMGeo
copy_geo_from	.\XESCore\DEMDefs.cpp	/^void	DEMMask::copy_geo_from(const DEMGeo& rhs)$/;"	f	class:DEMMask
copy_geo_from	.\XESCore\DEMDefs.cpp	/^void	DEMMask::copy_geo_from(const DEMMask& rhs)$/;"	f	class:DEMMask
copy_int	.\OneOffs\osm2shape.c	/^static int * copy_int(const int * src, int count)$/;"	f	file:
copy_kernel_h	.\XESCore\DEMAlgs.cpp	/^static void copy_kernel_h(const DEMGeo& src, DEMGeo& dst, float k[], int width)$/;"	f	file:
copy_kernel_v	.\XESCore\DEMAlgs.cpp	/^static void copy_kernel_v(const DEMGeo& src, DEMGeo& dst, float k[], int width)$/;"	f	file:
copy_mip_with_filter	.\Utils\BitmapUtils.cpp	/^static void copy_mip_with_filter(const ImageInfo& src, ImageInfo& dst,int level, unsigned char (* filter)(unsigned char src[], int count, int channel, int level))$/;"	f	file:
copy_nearest_splat	.\XESCore\Hydro2.cpp	/^static void copy_nearest_splat(DEMGeo& src, DEMGeo& dst, int lu)$/;"	f	file:
copy_rotate	.\Utils\QuiltUtils.h	/^void copy_rotate($/;"	f
copy_scanline	.\XESCore\DEMIO.cpp	/^void copy_scanline($/;"	f
copy_str	.\OneOffs\osm2shape.c	/^static char ** copy_str(char ** src, int count)$/;"	f	file:
copy_string_vector	.\OneOffs\gen_roads10.h	/^void	copy_string_vector(const char ** i, vector<string>& o)$/;"	f
copy_tile	.\XESCore\DEMIO.cpp	/^void copy_tile($/;"	f
corners	.\XESCore\DEMTables.h	/^	Point2	corners[4];$/;"	m	struct:tex_proj_info
cos_scale	.\AC3DPlugins\dsf_export.cpp	/^static	double				cos_scale;$/;"	v	file:
cosdeg	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^inline double cosdeg(double deg)$/;"	f
cosdeg	.\XESCore\DEMTables.cpp	/^inline double cosdeg(double deg)$/;"	f
could_intersect	.\Utils\CompGeomDefs2.h	/^inline bool Segment2::could_intersect(const Segment2& rhs) const$/;"	f	class:Segment2
count	.\Obj\ObjPointPool.cpp	/^int		ObjPointPool::count(void) const$/;"	f	class:ObjPointPool
count	.\Utils\RTree2.h	/^		int			count;$/;"	m	struct:RTree2::leaf
count	.\Utils\STLUtils.h	/^	int				count(const value_type& v) const$/;"	f	class:pqueue
count	.\Utils\XUtils.cpp	/^	int		count(void)$/;"	f	struct:XPointPool::XPointPoolImp
count	.\Utils\XUtils.cpp	/^int		XPointPool::count(void)$/;"	f	class:XPointPool
count	.\XESCore\MapHelpers.h	/^	int count;$/;"	m	struct:visit_pt_in_tri
count	.\XESCore\Zoning.cpp	/^	int				count;		\/\/ Number of edges$/;"	m	struct:EdgeNode_t	file:
count_circulator	.\Utils\STLUtils.h	/^int count_circulator(Circulator circ)$/;"	f
count_net	.\DSFTools\DSF2Text.cpp	/^static int count_net = 0;$/;"	v	file:
count_obj	.\DSFTools\DSF2Text.cpp	/^static int count_obj = 0;$/;"	v	file:
count_paths_to	.\XESCore\MapHelpers.h	/^int count_paths_to(typename Arr::Vertex_handle v1, typename Arr::Vertex_handle v2)$/;"	f
count_pol	.\DSFTools\DSF2Text.cpp	/^static int count_pol = 0;$/;"	v	file:
count_strs	.\WEDProperties\WED_PropertyTable.cpp	/^inline int count_strs(const char ** p) { if (!p) return 0; int n = 0; while(*p) ++p, ++n; return n; }$/;"	f
count_ter	.\DSFTools\DSF2Text.cpp	/^static int count_ter = 0;$/;"	v	file:
counts	.\XESCore\DEMDefs.cpp	/^	int		counts[HIST_MAX];$/;"	m	struct:HistoHelper	file:
coverage	.\VPF\vpf_notes.c	/^a coverage, e.g. if trans is top 2 (network), then ALL$/;"	v
crc	.\Utils\unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:unz_file_info_s
crc32	.\Utils\unzip.c	/^	uLong crc32;                \/* crc32 of all data uncompressed *\/$/;"	m	struct:__anon101	file:
crc32	.\Utils\zip.c	/^    uLong crc32;$/;"	m	struct:__anon104	file:
crc32_wait	.\Utils\unzip.c	/^	uLong crc32_wait;           \/* crc32 we must obtain after decompress all *\/$/;"	m	struct:__anon101	file:
crease_angle_cos	.\XESCore\NetTables.h	/^	float		crease_angle_cos;$/;"	m	struct:NetRepInfo
create_Beacon	.\WEDMap\WED_CreatePointTool.h	/^	create_Beacon = 0,$/;"	e	enum:CreatePoint_t
create_Boundary	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Boundary,$/;"	e	enum:CreateTool_t
create_Exclusion	.\WEDMap\WED_CreateBoxTool.h	/^	create_Exclusion = 0$/;"	e	enum:CreateBox_t
create_Facade	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Facade,$/;"	e	enum:CreateTool_t
create_Forest	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Forest,$/;"	e	enum:CreateTool_t
create_HNDL	.\WEDImportExport\WED_GatewayImport.cpp	/^	void create_HNDL( const string& inURL,$/;"	f	class:RAII_CURL_HNDL
create_Helipad	.\WEDMap\WED_CreatePointTool.h	/^	create_Helipad,$/;"	e	enum:CreatePoint_t
create_Hole	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Hole,$/;"	e	enum:CreateTool_t
create_Lights	.\WEDMap\WED_CreatePointTool.h	/^	create_Lights,$/;"	e	enum:CreatePoint_t
create_Line	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Line,$/;"	e	enum:CreateTool_t
create_Marks	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Marks,$/;"	e	enum:CreateTool_t
create_Object	.\WEDMap\WED_CreatePointTool.h	/^	create_Object$/;"	e	enum:CreatePoint_t
create_Polygon	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Polygon$/;"	e	enum:CreateTool_t
create_RampStart	.\WEDMap\WED_CreatePointTool.h	/^	create_RampStart,$/;"	e	enum:CreatePoint_t
create_Road	.\WEDMap\WED_CreateEdgeTool.h	/^	create_Road$/;"	e	enum:CreateEdge_t
create_Runway	.\WEDMap\WED_CreateLineTool.h	/^	create_Runway = 0,$/;"	e	enum:CreateLine_t
create_Sealane	.\WEDMap\WED_CreateLineTool.h	/^	create_Sealane$/;"	e	enum:CreateLine_t
create_Sign	.\WEDMap\WED_CreatePointTool.h	/^	create_Sign,$/;"	e	enum:CreatePoint_t
create_String	.\WEDMap\WED_CreatePolygonTool.h	/^	create_String,$/;"	e	enum:CreateTool_t
create_Taxi	.\WEDMap\WED_CreatePolygonTool.h	/^	create_Taxi = 0,$/;"	e	enum:CreateTool_t
create_TaxiRoute	.\WEDMap\WED_CreateEdgeTool.h	/^	create_TaxiRoute = 0,$/;"	e	enum:CreateEdge_t
create_TowerViewpoint	.\WEDMap\WED_CreatePointTool.h	/^	create_TowerViewpoint,$/;"	e	enum:CreatePoint_t
create_Windsock	.\WEDMap\WED_CreatePointTool.h	/^	create_Windsock,$/;"	e	enum:CreatePoint_t
create_block	.\XESCore\BlockAlgs.cpp	/^void	create_block($/;"	f
create_edge	.\XESCore\MapOverlay.cpp	/^	virtual void create_edge (Face_handle_A f1, Halfedge_handle_B e2, Halfedge_handle_R e) const$/;"	f	class:Arr_full_overlay_traits
create_edge	.\XESCore\MapOverlay.cpp	/^	virtual void create_edge (Face_handle_A f1, Halfedge_handle_B e2, Halfedge_handle_R e) const$/;"	f	class:Arr_replace_overlay_traits
create_edge	.\XESCore\MapOverlay.cpp	/^	virtual void create_edge (Halfedge_handle_A e1, Face_handle_B f2, Halfedge_handle_R e) const$/;"	f	class:Arr_full_overlay_traits
create_edge	.\XESCore\MapOverlay.cpp	/^	virtual void create_edge (Halfedge_handle_A e1, Face_handle_B f2, Halfedge_handle_R e) const$/;"	f	class:Arr_replace_overlay_traits
create_edge	.\XESCore\MapOverlay.cpp	/^	virtual void create_edge (Halfedge_handle_A e1, Halfedge_handle_B e2, Halfedge_handle_R e) const$/;"	f	class:Arr_full_overlay_traits
create_edge	.\XESCore\MapOverlay.cpp	/^	virtual void create_edge (Halfedge_handle_A e1, Halfedge_handle_B e2, Halfedge_handle_R e) const$/;"	f	class:Arr_replace_overlay_traits
create_face	.\XESCore\BlockFill.cpp	/^  virtual void create_face ($/;"	f	class:overlay_forests
create_face	.\XESCore\MapOverlay.cpp	/^	virtual void create_face (Face_handle_A f1, Face_handle_B f2, Face_handle_R f) const$/;"	f	class:Arr_full_overlay_traits
create_face	.\XESCore\MapOverlay.cpp	/^	virtual void create_face (Face_handle_A f1, Face_handle_B f2, Face_handle_R f) const$/;"	f	class:Arr_replace_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Face_handle_A f1, Vertex_handle_B v2, Vertex_handle_R v) const$/;"	f	class:Arr_full_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Face_handle_A f1, Vertex_handle_B v2, Vertex_handle_R v) const$/;"	f	class:Arr_replace_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Halfedge_handle_A \/* e1 *\/, Halfedge_handle_B \/* e2 *\/, Vertex_handle_R \/* v *\/) const$/;"	f	class:Arr_full_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Halfedge_handle_A e1, Halfedge_handle_B e2, Vertex_handle_R v) const$/;"	f	class:Arr_replace_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Halfedge_handle_A e1, Vertex_handle_B v2, Vertex_handle_R v) const$/;"	f	class:Arr_full_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Halfedge_handle_A e1, Vertex_handle_B v2, Vertex_handle_R v) const$/;"	f	class:Arr_replace_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Vertex_handle_A v1, Face_handle_B f2, Vertex_handle_R v) const$/;"	f	class:Arr_full_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Vertex_handle_A v1, Face_handle_B f2, Vertex_handle_R v) const$/;"	f	class:Arr_replace_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Vertex_handle_A v1, Halfedge_handle_B e2, Vertex_handle_R v) const$/;"	f	class:Arr_full_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Vertex_handle_A v1, Halfedge_handle_B e2, Vertex_handle_R v) const$/;"	f	class:Arr_replace_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Vertex_handle_A v1, Vertex_handle_B v2, Vertex_handle_R v) const$/;"	f	class:Arr_full_overlay_traits
create_vertex	.\XESCore\MapOverlay.cpp	/^	virtual void create_vertex (Vertex_handle_A v1, Vertex_handle_B v2, Vertex_handle_R v) const$/;"	f	class:Arr_replace_overlay_traits
cross	.\Utils\CompGeomDefs3.h	/^inline	Vector3	Vector3::cross (const Vector3& v) const$/;"	f	class:Vector3
cross	.\Utils\Skeleton.cpp	/^	Point3				cross;$/;"	m	struct:SK_Event	file:
crud_ok	.\XESCore\Zoning.h	/^	int			crud_ok;								\/\/ We can live with "stuff" in our zone that we haven't consumed.$/;"	m	struct:ZoningRule_t
cstr_	.\lib_json\include\json\value.h	/^         const char *cstr_;$/;"	m	class:Json::Value::CZString
ctr	.\XESCore\MapHelpers.h	/^	int ctr;$/;"	m	class:edge_collector_t
ctrl	.\XESCore\AptDefs.h	/^	Point2		ctrl;$/;"	m	struct:AptLinearSegment_t
ctrl_for_pt	.\XESCore\Airports.cpp	/^inline Point2	ctrl_for_pt(const AptLinearSegment_t * lin)$/;"	f
ctrl_lat_hi	.\WEDEntities\WED_GISEdge.h	/^		WED_PropDoubleText		ctrl_lat_hi;$/;"	m	class:WED_GISEdge
ctrl_lat_hi	.\WEDEntities\WED_GISPoint_Bezier.h	/^		WED_PropDoubleText		ctrl_lat_hi;$/;"	m	class:WED_GISPoint_Bezier
ctrl_lat_lo	.\WEDEntities\WED_GISEdge.h	/^		WED_PropDoubleText		ctrl_lat_lo;			\/\/ NOTE: THESE ARE STORED AS DELTAS!!!$/;"	m	class:WED_GISEdge
ctrl_lat_lo	.\WEDEntities\WED_GISPoint_Bezier.h	/^		WED_PropDoubleText		ctrl_lat_lo;			\/\/ NOTE: THESE ARE STORED AS DELTAS!!!$/;"	m	class:WED_GISPoint_Bezier
ctrl_lon_hi	.\WEDEntities\WED_GISEdge.h	/^		WED_PropDoubleText		ctrl_lon_hi;$/;"	m	class:WED_GISEdge
ctrl_lon_hi	.\WEDEntities\WED_GISPoint_Bezier.h	/^		WED_PropDoubleText		ctrl_lon_hi;$/;"	m	class:WED_GISPoint_Bezier
ctrl_lon_lo	.\WEDEntities\WED_GISEdge.h	/^		WED_PropDoubleText		ctrl_lon_lo;$/;"	m	class:WED_GISEdge
ctrl_lon_lo	.\WEDEntities\WED_GISPoint_Bezier.h	/^		WED_PropDoubleText		ctrl_lon_lo;$/;"	m	class:WED_GISPoint_Bezier
cubic_formula	.\Utils\CompGeomDefs2.h	/^inline int cubic_formula(double a, double b, double c, double d, double roots[3])$/;"	f
cull	.\Utils\QuadTree.h	/^		CullType	cull;$/;"	m	struct:QuadTree::Node
cull_ShowAll	.\ObjEdit\OE_DrawObj.h	/^	cull_ShowAll,			\/\/ Show everything$/;"	e	enum:__anon46
cull_ShowAllWarn	.\ObjEdit\OE_DrawObj.h	/^	cull_ShowAllWarn,		\/\/ Show everything but draw hidden surfaces in red!$/;"	e	enum:__anon46
cull_ShowVisible	.\ObjEdit\OE_DrawObj.h	/^	cull_ShowVisible = 0,	\/\/ Show only polygons that are visible in x-plane$/;"	e	enum:__anon46
cull_agp	.\WEDMap\WED_PreviewLayer.cpp	/^bool cull_agp(WED_MapZoomerNew * zoomer, agp_t * agp, const Point2& ll, double heading)$/;"	f
cull_obj	.\WEDMap\WED_PreviewLayer.cpp	/^bool cull_obj(WED_MapZoomerNew * zoomer, XObj8 * obj, const Point2& ll, double heading)$/;"	f
cull_tile	.\WEDMap\WED_PreviewLayer.cpp	/^static bool cull_tile(WED_MapZoomerNew * zoomer, double x1, double z1, double x2, double z2, const Point2& ll, double heading)$/;"	f	file:
cull_xyzr	.\Obj\XObjWriteEmbedded.cpp	/^	float			cull_xyzr[4];$/;"	m	struct:embed_props_t	file:
cur	.\Utils\MemFileUtils.h	/^	const char *	cur;$/;"	m	struct:MFScanner
curColor	.\WEDCore\WED_Sign_Parser.cpp	/^	parser_color_t curColor;$/;"	m	class:WED_Sign_Parser	file:
cur_file_info	.\Utils\unzip.c	/^	unz_file_info cur_file_info; \/* public info about the current file in zip*\/$/;"	m	struct:__anon102	file:
cur_file_info_internal	.\Utils\unzip.c	/^	unz_file_info_internal cur_file_info_internal; \/* private info about it*\/$/;"	m	struct:__anon102	file:
cur_filter	.\WEDImportExport\WED_DSFExport.cpp	/^	int							cur_filter;$/;"	m	struct:DSF_ResourceTable	file:
cur_new	.\Installer\BuildInstaller.cpp	/^	string	cur_new;$/;"	m	struct:InstallerStat	file:
cur_old	.\Installer\BuildInstaller.cpp	/^	string	cur_old;$/;"	m	struct:InstallerStat	file:
cur_rel_id	.\OneOffs\osm_tile.c	/^static	int cur_rel_id = -1;$/;"	v	file:
cur_row	.\Utils\RLERegion.h	/^	int			cur_row(void) const { return y_ + region_.y1_; }$/;"	f	class:RLERegionScanner
cur_row_max	.\GUI\GUI_Fonts.cpp	/^	int					cur_row_max;		\/\/ tallest bitmap jammed in the current row$/;"	m	class:TT_font_info	file:
cur_row_x	.\GUI\GUI_Fonts.cpp	/^	int					cur_row_x;			\/\/ Coords where we will insert the next item.$/;"	m	class:TT_font_info	file:
cur_row_y	.\GUI\GUI_Fonts.cpp	/^	int					cur_row_y;$/;"	m	class:TT_font_info	file:
cur_run_start	.\Utils\RLERegion.h	/^	int			cur_run_start(void) const { return x_ + region_.x1_; }$/;"	f	class:RLERegionScanner
cur_run_stop	.\Utils\RLERegion.h	/^	int			cur_run_stop (void) const { return x_ + region_.x1_ + region_.runs_[y_][r_]; }$/;"	f	class:RLERegionScanner
cur_scale	.\OneOffs\gen_roads.cpp	/^float	cur_scale = 0;$/;"	v
cur_tex	.\OneOffs\gen_roads.cpp	/^int		cur_tex=0;$/;"	v
cur_way_id	.\OneOffs\osm_tile.c	/^static	int	cur_way_id = -1;$/;"	v	file:
curfile_info	.\Utils\zip.c	/^} curfile_info;$/;"	t	typeref:struct:__anon104	file:
curl_handle	.\WEDImportExport\WED_GatewayImport.cpp	/^	curl_http_get_file * curl_handle;$/;"	m	class:RAII_CURL_HNDL	file:
curl_http_H	.\Network\curl_http.h	7;"	d
curl_http_get_file	.\Network\curl_http.cpp	/^curl_http_get_file::curl_http_get_file($/;"	f	class:curl_http_get_file
curl_http_get_file	.\Network\curl_http.h	/^class	curl_http_get_file {$/;"	c
currentBatch_	.\lib_json\src\lib_json\json_batchallocator.h	/^   BatchInfo *currentBatch_;$/;"	m	class:Json::BatchAllocator
currentItemIndex_	.\lib_json\include\json\value.h	/^         unsigned int currentItemIndex_;$/;"	m	struct:Json::ValueInternalArray::IteratorState
currentPageIndex_	.\lib_json\include\json\value.h	/^         Value **currentPageIndex_;$/;"	m	struct:Json::ValueInternalArray::IteratorState
currentValue	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::currentValue()$/;"	f	class:Json::Reader
current_	.\lib_json\include\json\reader.h	/^      Location current_;$/;"	m	class:Json::Reader
current_	.\lib_json\include\json\value.h	/^      Value::ObjectValues::iterator current_;$/;"	m	class:Json::ValueIteratorBase
current_active_index	.\Utils\PolyRasterUtils.h	/^	int			current_active_index;	\/\/ The starting polyline for the current scanline for GetRange$/;"	m	struct:PolyRasterizer
current_file_ok	.\Utils\unzip.c	/^	uLong current_file_ok;      \/* flag about the usability of the current file*\/$/;"	m	struct:__anon102	file:
current_scan_y	.\Utils\PolyRasterUtils.h	/^		Number current_scan_y;$/;"	m	struct:PolyRasterizer::active_seg_dead
current_scan_y	.\Utils\PolyRasterUtils.h	/^	Number		current_scan_y;			\/\/ The current scan Y pos.$/;"	m	struct:PolyRasterizer
cursor	.\Obj\XObjDefs.h	/^	string					cursor;$/;"	m	struct:XObjManip8
curve_limit	.\XESCore\NetTables.h	/^	float		curve_limit;	\/\/ Expressed as a DOT product (Cosine) - 0 means no limit, 1.0 means straight!$/;"	m	struct:BridgeInfo
curved	.\DSF\DSFLibWrite.cpp	/^		bool					curved;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
curved	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool					curved;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
curves_compare_y_at_x	.\XESCore\CGALTypes.h	/^  CGAL::Comparison_result curves_compare_y_at_x(const X_monotone_curve_2 & cv1,$/;"	f	class:_PM_Traits
curves_compare_y_at_x_left	.\XESCore\CGALTypes.h	/^  CGAL::Comparison_result curves_compare_y_at_x_left(const X_monotone_curve_2 & cv1,$/;"	f	class:_PM_Traits
curves_compare_y_at_x_right	.\XESCore\CGALTypes.h	/^ CGAL::Comparison_result curves_compare_y_at_x_right(const X_monotone_curve_2 & cv1,$/;"	f	class:_PM_Traits
custom	.\Env\Persistence.h	/^	int			custom;$/;"	m	struct:VertexInfo
custom	.\Obj\XObjWriteEmbedded.cpp	/^	int				custom;$/;"	m	struct:named_light_info_t	file:
custom_package_names	.\WEDCore\WED_PackageMgr.h	/^	vector<string>	custom_package_names;$/;"	m	class:WED_PackageMgr
custom_ter	.\XESCore\DEMTables.h	/^	int				custom_ter;$/;"	m	struct:NaturalTerrainInfo_t
cut	.\OneOffs\gen_roads10.h	/^	float	cut;$/;"	m	struct:vert_props
cut	.\OneOffs\gen_roads10.h	/^	float cut() {$/;"	f	class:published_road
cut_for_image	.\WEDCore\WED_Orthophoto.cpp	/^static int cut_for_image(WED_Thing * ent, const Polygon_set_2& area, WED_Thing * wrl, WED_ResourceMgr * rmgr)$/;"	f	file:
cv	.\XESCore\BlockAlgs.cpp	/^	Block_2::X_monotone_curve_2	cv;$/;"	m	class:check_block_visitor	file:
cv	.\XESCore\MapHelpers.h	/^	X_monotone_curve_2			cv;$/;"	m	class:check_split_zone_visitor
d	.\Utils\SQLUtils.h	/^	D		d;$/;"	m	struct:sql_row4
d	.\Utils\SQLUtils.h	/^	D		d;$/;"	m	struct:sql_row5
d	.\WEDWindows\WED_StartWindow.cpp	/^	WED_Document *			d;$/;"	m	struct:open_doc_t	file:
d_	.\XESCore\DEMAlgs.cpp	/^	const DEMGeo& d_;$/;"	m	struct:sort_pixel_by_height	file:
data	.\Obj\XObjBuilder.h	/^		XObjManip8	data;$/;"	m	struct:XObjBuilder::manip_data
data	.\Utils\BitmapUtils.h	/^	unsigned char *	data;$/;"	m	struct:ImageInfo
data	.\Utils\zip.c	/^  unsigned char data[SIZEDATA_INDATABLOCK];$/;"	m	struct:linkedlist_datablock_internal_s	file:
data	.\WEDCore\WED_Buffer.cpp	/^	char			data[0];		\/\/ effective location of first byte.$/;"	m	struct:WED_Buffer::Storage	file:
dataOffset	.\Utils\BitmapUtils.cpp	/^	long			dataOffset;$/;"	m	struct:BMPHeader	file:
dataOffset	.\XPTools\DDSTool.cpp	/^		unsigned int dataOffset;  \/\/ From start of header\/file$/;"	m	struct:ATC_Header_Texture_TAG	file:
dataStruct	.\Network\PCSBSocket.h	/^		ConnectionData	dataStruct;$/;"	m	class:PCSBSocket
dataStruct	.\Network\PCSBSocket.h	/^		ConnectionData 	dataStruct;$/;"	m	class:PCSBSocket
dataType	.\VPF\VPFTable.h	/^	char		dataType;$/;"	m	struct:VPF_ColumnDef
data_	.\XESCore\DEMDefs.h	/^	vector<address> data_;$/;"	m	struct:address_fifo
data_preserver_t	.\XESCore\MapHelpers.h	/^	data_preserver_t() : base() { }$/;"	f	class:data_preserver_t
data_preserver_t	.\XESCore\MapHelpers.h	/^	data_preserver_t(Arr& a) : base(a) { }$/;"	f	class:data_preserver_t
data_preserver_t	.\XESCore\MapHelpers.h	/^class	data_preserver_t : public CGAL::Arr_observer<Arr> {$/;"	c
dataref	.\AC3DPlugins\obj_update.cpp	/^	string dataref;$/;"	m	struct:update_anim_op	file:
dataref	.\Obj\XObjDefs.h	/^	string					dataref;$/;"	m	struct:XObjAnim8
dataref	.\Obj\XObjWriteEmbedded.cpp	/^	const char *	dataref;$/;"	m	struct:named_light_info_t	file:
dataref1	.\Obj\XObjDefs.h	/^	string					dataref1;				\/\/ Commands for, cmd manips!$/;"	m	struct:XObjManip8
dataref2	.\Obj\XObjDefs.h	/^	string					dataref2;$/;"	m	struct:XObjManip8
dataref_info	.\AC3DPlugins\obj_anim.cpp	/^struct dataref_info {$/;"	s	file:
dateAccepted	.\WEDImportExport\WED_VerTable.h	/^	string dateAccepted;$/;"	m	struct:VerInfo_t
dateApproved	.\WEDImportExport\WED_VerTable.h	/^	string dateApproved;$/;"	m	struct:VerInfo_t
dateUploaded	.\WEDImportExport\WED_VerTable.h	/^	string dateUploaded;$/;"	m	struct:VerInfo_t
date_cmpr_result_t	.\Utils\FileUtils.h	/^enum date_cmpr_result_t$/;"	g
db	.\Utils\SQLUtils.h	/^	sqlite3	*	db;$/;"	m	class:sql_db
dbf_id	.\OneOffs\osm2shape.c	/^	int						dbf_id;$/;"	m	struct:tag_att_info	file:
dbf_id	.\RawImport\ShapeIO.cpp	/^	int					dbf_id;$/;"	m	struct:import_column_t	file:
dbf_id	.\RawImport\ShapeIO.cpp	/^	vector<int>			dbf_id;$/;"	m	struct:shape_pattern_t	file:
dcr_error	.\Utils\FileUtils.h	/^	dcr_error = -2$/;"	e	enum:date_cmpr_result_t
dcr_firstIsNew	.\Utils\FileUtils.h	/^	dcr_firstIsNew = -1,$/;"	e	enum:date_cmpr_result_t
dcr_same	.\Utils\FileUtils.h	/^	dcr_same = 0,$/;"	e	enum:date_cmpr_result_t
dcr_secondIsNew	.\Utils\FileUtils.h	/^	dcr_secondIsNew = 1,$/;"	e	enum:date_cmpr_result_t
ddpfPixelFormat	.\Utils\BitmapUtils.cpp	/^	TEX_dds_pixelformat	ddpfPixelFormat;        \/\/ pixel format description of the surface$/;"	m	struct:TEX_dds_desc	file:
ddsCaps	.\Utils\BitmapUtils.cpp	/^    TEX_dds_caps2       ddsCaps;                \/\/ direct draw surface capabilities			DDSCAPS_TEXTURE, DDSCAPS_MIPMAP, DDSCAPS_COMPLEX		TEXTURE, LINEARSIZE, COMPLEX, MIPMAP, FOURCC)$/;"	m	struct:TEX_dds_desc	file:
ddsHeight_Pxls	.\WEDCore\WED_ResourceMgr.h	/^	int			ddsHeight_Pxls;$/;"	m	struct:pol_info_t
dead	.\XESCore\MapOverlay.cpp	/^	vector<Halfedge_handle_R> *		dead;$/;"	m	class:Arr_replace_overlay_traits	file:
debug	.\RawImport\AptElev.h	/^	string	debug;$/;"	m	struct:RwyInfo
debug_er	.\XESCore\MeshDefs.h	/^	float			debug_er;	$/;"	m	struct:MeshFaceInfo
debug_he_dir	.\XESCore\MapAlgs.cpp	/^void debug_he_dir(Halfedge_handle he, Pmwx * pmwx)$/;"	f
debug_heading	.\XESCore\MeshDefs.h	/^	float			debug_heading;$/;"	m	struct:MeshFaceInfo
debug_it	.\WEDImportExport\WED_DSFImport.cpp	/^static void debug_it(const vector<BezierPoint2>& pts)$/;"	f	file:
debug_lock_traits	.\XESTools\GISTool_VectorCmds.cpp	/^struct debug_lock_traits {$/;"	s	file:
debug_lu	.\XESCore\MeshDefs.h	/^	float			debug_lu[5];$/;"	m	struct:MeshFaceInfo
debug_mesh_bezier	.\XESTools\GISTool_Globals.cpp	/^void	debug_mesh_bezier(const Point2& p1, const Point2& p2, const Point2& p3, const Point2& p4, float r1, float g1, float b1, float r2, float g2, float b2)$/;"	f
debug_mesh_bezier	.\XESTools\GISTool_Globals.cpp	/^void	debug_mesh_bezier(const Point2& p1, const Point2& p2, const Point2& p3, float r1, float g1, float b1, float r2, float g2, float b2)$/;"	f
debug_mesh_line	.\WEDCore\WED_Globals.cpp	/^void	debug_mesh_line(const Point2& p1, const Point2& p2, float r1, float g1, float b1, float r2, float g2, float b2)$/;"	f
debug_mesh_line	.\XESTools\GISTool_Globals.cpp	/^void	debug_mesh_line(const Point2& p1, const Point2& p2, float r1, float g1, float b1, float r2, float g2, float b2)$/;"	f
debug_mesh_point	.\WEDCore\WED_Globals.cpp	/^void	debug_mesh_point(const Point2& p1, float r1, float g1, float b1)$/;"	f
debug_mesh_point	.\XESTools\GISTool_Globals.cpp	/^void	debug_mesh_point(const Point2& p1, float r1, float g1, float b1)$/;"	f
debug_mesh_polygon	.\WEDCore\WED_Globals.cpp	/^void	debug_mesh_polygon(const Polygon2& p1, float r1, float g1, float b1)$/;"	f
debug_network	.\XESCore\NetAlgs.cpp	/^void	debug_network(Pmwx& io_map)$/;"	f
debug_poly_line	.\XESCore\MapAlgs.cpp	/^void debug_poly_line(const vector<Point_2>& pts,bool loop)$/;"	f
debug_re	.\XESCore\MeshDefs.h	/^	float			debug_re;$/;"	m	struct:MeshFaceInfo
debug_show_block	.\XESCore\BlockFill.cpp	/^static void	debug_show_block(Block_2& io_block, CoordTranslator2& t)$/;"	f	file:
debug_slope_dem	.\XESCore\MeshDefs.h	/^	float			debug_slope_dem;$/;"	m	struct:MeshFaceInfo
debug_slope_tri	.\XESCore\MeshDefs.h	/^	float			debug_slope_tri;$/;"	m	struct:MeshFaceInfo
debug_temp_range	.\XESCore\MeshDefs.h	/^	float			debug_temp_range;$/;"	m	struct:MeshFaceInfo
debug_terrain_orig	.\XESCore\MeshDefs.h	/^	int				debug_terrain_orig;$/;"	m	struct:MeshFaceInfo
dec_needed	.\Utils\MathUtils.h	/^inline int dec_needed(const float val){$/;"	f
decal	.\XESCore\DEMTables.h	/^	string			decal;$/;"	m	struct:NaturalTerrainInfo_t
decimals	.\Interfaces\IPropertyObject.h	/^	int				decimals;$/;"	m	struct:PropertyInfo_t
deck	.\Obj\XObjBuilder.h	/^	int			deck;				int		o_deck;$/;"	m	class:XObjBuilder
decode	.\Network\b64.c	/^void	decode (const char * startP, const char * endP, char * destP, char ** outP)$/;"	f
decodeDouble	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::decodeDouble( Token &token )$/;"	f	class:Json::Reader
decodeNumber	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::decodeNumber( Token &token )$/;"	f	class:Json::Reader
decodeString	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::decodeString( Token &token )$/;"	f	class:Json::Reader
decodeString	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::decodeString( Token &token, std::string &decoded )$/;"	f	class:Json::Reader
decodeUnicodeCodePoint	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::decodeUnicodeCodePoint( Token &token, $/;"	f	class:Json::Reader
decodeUnicodeEscapeSequence	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::decodeUnicodeEscapeSequence( Token &token, $/;"	f	class:Json::Reader
decode_bbox	.\OneOffs\osm_tile.c	/^int decode_bbox(bbox_t b, int bounds[4])$/;"	f
decompose_polygon	.\WEDCore\WED_Clipping.cpp	/^void	decompose_polygon(const Polygon2& in_poly,vector<Segment2>& out_poly)$/;"	f
decompose_polygon_with_holes	.\WEDCore\WED_Clipping.cpp	/^void	decompose_polygon_with_holes(const vector<Polygon2>& in_poly,vector<vector<Segment2> >& out_poly)$/;"	f
decorations	.\UI\XPopup.h	/^	unsigned long decorations;$/;"	m	struct:MwmHints
def_PointPool32Atom	.\DSF\DSFDefs.h	/^		def_PointPool32Atom			= 'PO32',	\/\/	Planar Numeric 16-bit$/;"	e	enum:__anon5
def_PointPool32Atom	.\DSF\dsflib_013005\DSFDefs.h	/^		def_PointPool32Atom			= 'PO32',	\/\/	Planar Numeric 16-bit$/;"	e	enum:__anon12
def_PointPoolAtom	.\DSF\DSFDefs.h	/^		def_PointPoolAtom			= 'POOL',	\/\/	Planar Numeric 16-bit$/;"	e	enum:__anon5
def_PointPoolAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		def_PointPoolAtom			= 'POOL',	\/\/	Planar Numeric 16-bit$/;"	e	enum:__anon12
def_PointScale32Atom	.\DSF\DSFDefs.h	/^		def_PointScale32Atom		= 'SC32',	\/\/	32-bit scaling values for point pools$/;"	e	enum:__anon5
def_PointScale32Atom	.\DSF\dsflib_013005\DSFDefs.h	/^		def_PointScale32Atom		= 'SC32',	\/\/	32-bit scaling values for point pools$/;"	e	enum:__anon12
def_PointScaleAtom	.\DSF\DSFDefs.h	/^		def_PointScaleAtom			= 'SCAL',	\/\/	32-bit scaling values for point pools$/;"	e	enum:__anon5
def_PointScaleAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		def_PointScaleAtom			= 'SCAL',	\/\/	32-bit scaling values for point pools$/;"	e	enum:__anon12
def_perlin	.\OneOffs\gen_roads10.h	/^perlin_params def_perlin = { 0 };$/;"	v
default_buildings	.\XESCore\AptDefs.h	/^	int					default_buildings;		\/\/ not used in 850$/;"	m	struct:AptInfo_t
default_lock_traits	.\XESCore\MapHelpers.h	/^struct default_lock_traits {$/;"	s
default_package_names	.\WEDCore\WED_PackageMgr.h	/^	vector<string>	default_package_names;$/;"	m	class:WED_PackageMgr
deferred_cmd_or_key	.\GUI\GUI_Commander.h	/^				deferred_cmd_or_key(int c) : cmd(c) { }$/;"	f	struct:GUI_Commander::deferred_cmd_or_key
deferred_cmd_or_key	.\GUI\GUI_Commander.h	/^				deferred_cmd_or_key(uint32_t k, int v, GUI_KeyFlags f) : cmd(0), key(k), vk(v), flags(f) { }$/;"	f	struct:GUI_Commander::deferred_cmd_or_key
deferred_cmd_or_key	.\GUI\GUI_Commander.h	/^			struct	deferred_cmd_or_key {$/;"	s	class:GUI_Commander
deferred_pool	.\XESCore\DSFBuilder.cpp	/^class	deferred_pool : public list<void *> {$/;"	c	file:
degree_with_predicate	.\XESCore\MapHelpers.h	/^int degree_with_predicate(typename Arr::Vertex_handle v)$/;"	f
delete_edge	.\XESCore\Zoning.cpp	/^void			FaceGraph_t::delete_edge(EdgeNode_t * e)$/;"	f	class:FaceGraph_t
delete_face	.\XESCore\Zoning.cpp	/^void			FaceGraph_t::delete_face(FaceNode_t * f)$/;"	f	class:FaceGraph_t
delete_keyframe	.\AC3DPlugins\obj_anim.cpp	/^static void delete_keyframe(int argc, char * argv[])$/;"	f	file:
dem	.\RenderFarmUI\RF_Export.cpp	/^	int			dem;$/;"	m	struct:RF_ExportState_t	file:
dem	.\RenderFarmUI\RF_Import.cpp	/^	int			dem;$/;"	m	struct:RF_ImportState_t	file:
dem	.\RenderFarmUI\RF_MapView.cpp	/^	int				dem;$/;"	m	struct:DEMViewInfo_t	file:
demFilter_Linear	.\XESCore\DEMAlgs.h	/^	demFilter_Linear,		\/\/ A radial linear ramp from center to edges r$/;"	e	enum:__anon130
demFilter_Spread	.\XESCore\DEMAlgs.h	/^	demFilter_Spread		\/\/ Simply spread the image out.$/;"	e	enum:__anon130
dem_Enum	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_Enum,$/;"	e	enum:__anon73
dem_Normals	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_Normals,$/;"	e	enum:__anon73
dem_Shaded	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_Shaded,$/;"	e	enum:__anon73
dem_Strata	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_Strata = -1000,$/;"	e	enum:__anon73
dem_StrataBiomass	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataBiomass,$/;"	e	enum:__anon73
dem_StrataDrainage	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataDrainage$/;"	e	enum:__anon73
dem_StrataElevationRange	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataElevationRange,$/;"	e	enum:__anon73
dem_StrataRainfallYearly	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataRainfallYearly,$/;"	e	enum:__anon73
dem_StrataRelativeElevation	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataRelativeElevation,$/;"	e	enum:__anon73
dem_StrataTemperature	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataTemperature,$/;"	e	enum:__anon73
dem_StrataTemperatureRange	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_StrataTemperatureRange,$/;"	e	enum:__anon73
dem_Zones	.\RenderFarmUI\RF_DEMGraphics.h	/^	dem_Zones,		\/\/ Random colors designed to show integral differences.$/;"	e	enum:__anon73
dem_copy_buffer_one	.\XESCore\DEMDefs.cpp	/^void dem_copy_buffer_one(const DEMGeo& orig_src, DEMGeo& io_dst, float null_value)$/;"	f
dem_coverage_nearest	.\XESCore\DEMDefs.cpp	/^void		dem_coverage_nearest(const DEMGeo& d, double lon1, double lat1, double lon2, double lat2, int bounds[4])$/;"	f
dem_erode	.\XESCore\DEMDefs.cpp	/^void		dem_erode(DEMGeo& dem, int steps, float null_value)$/;"	f
dem_get	.\XESCore\TensorRoads.cpp	/^inline int	dem_get(const DEMGeo& d, int x, int y)$/;"	f
dem_names	.\DSFTools\DSF2Text.cpp	/^list<string>	dem_names;$/;"	v
dem_want_Area	.\XESCore\DEMIO.h	/^	dem_want_Area,	\/\/ Use area-pixel sampling!$/;"	e	enum:__anon131
dem_want_File	.\XESCore\DEMIO.h	/^	dem_want_File	\/\/ Use whatever the file has.$/;"	e	enum:__anon131
dem_want_Post	.\XESCore\DEMIO.h	/^	dem_want_Post,	\/\/ Use pixel=post sampling$/;"	e	enum:__anon131
density	.\OneOffs\gen_roads.cpp	/^	float	density;$/;"	m	struct:car_lane	file:
density	.\OneOffs\gen_roads10.h	/^	float			density;$/;"	m	struct:traffic_lane
density	.\WEDEntities\WED_ForestPlacement.h	/^	WED_PropDoubleText		density;$/;"	m	class:WED_ForestPlacement
density_amp	.\XESCore\TensorRoads.h	/^	float		density_amp;$/;"	m	struct:RoadPrefs_t
density_factor	.\XESCore\NetTables.h	/^	float		density_factor;$/;"	m	struct:NetFeatureInfo
dep_freq	.\XESCore\AptDefs.h	/^	int				dep_freq;$/;"	m	struct:AptRunwayRule_t
dep_frq	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropDoubleText		dep_frq;$/;"	m	class:WED_ATCRunwayUse
dep_heading_hi	.\XESCore\AptDefs.h	/^	int				dep_heading_hi;		\/\/ This filters the use of the runway by where we are going, to keep traffic from crossing in-air.$/;"	m	struct:AptRunwayRule_t
dep_heading_lo	.\XESCore\AptDefs.h	/^	int				dep_heading_lo;		\/\/ lo == hi if "any" is okay.$/;"	m	struct:AptRunwayRule_t
dep_heading_max	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntText			dep_heading_max;		\/\/ Without this, tower might hose the TRACON.  min==max -> any dep gate is okay.$/;"	m	class:WED_ATCRunwayUse
dep_heading_min	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntText			dep_heading_min;		\/\/ This is the range of departure gates that we'd want to use this runway for.$/;"	m	class:WED_ATCRunwayUse
depth	.\DSF\DSFLibWrite.cpp	/^		int						depth;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
depth	.\DSF\DSFLibWrite.cpp	/^		int					depth;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
depth	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						depth;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
depth	.\OneOffs\GenTerrain.c	/^	int 	depth;$/;"	m	struct:__anon60	file:
depth_ant	.\XESCore\Zoning.h	/^	float	depth_ant;$/;"	m	struct:PointRule_t
depth_free	.\XESCore\Zoning.h	/^	float	depth_free;$/;"	m	struct:PointRule_t
depth_industrial	.\OneOffs\make_fill_rules.c	/^struct depth_info_t depth_industrial [] = { $/;"	v	typeref:struct:depth_info_t
depth_info_t	.\OneOffs\make_fill_rules.c	/^struct depth_info_t {$/;"	s	file:
depth_max	.\XESCore\ObjTables.h	/^	float	depth_max;$/;"	m	struct:RepInfo_t
depth_max	.\XESCore\Zoning.h	/^	float	depth_max;$/;"	m	struct:FacadeSpelling_t
depth_min	.\XESCore\ObjTables.h	/^	float	depth_min;$/;"	m	struct:RepInfo_t
depth_min	.\XESCore\Zoning.h	/^	float	depth_min;$/;"	m	struct:FacadeSpelling_t
depth_rd	.\XESCore\Zoning.h	/^	float	depth_rd;$/;"	m	struct:PointRule_t
depth_residential	.\OneOffs\make_fill_rules.c	/^struct depth_info_t depth_residential [] =  {$/;"	v	typeref:struct:depth_info_t
depth_unused	.\XESCore\Zoning.h	/^	float		depth_unused;							\/\/ This is the MAX depth of the particular building, which also names the art asset.$/;"	m	struct:FacadeChoice_t
depths	.\DSF\DSFLib_TestGen.cpp	/^int	depths[16] = {$/;"	v
depths	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^int	depths[16] = {$/;"	v
dequote	.\GUI\GUI_Prefs.cpp	/^void	dequote(string& s)$/;"	f
derez	.\XESCore\DEMDefs.cpp	/^void DEMGeo::derez(int r)$/;"	f	class:DEMGeo
derez_nearest	.\XESCore\DEMDefs.cpp	/^void DEMGeo::derez_nearest(DEMGeo& smaller)$/;"	f	class:DEMGeo
derez_nearest	.\XESCore\DEMDefs.cpp	/^void DEMGeo::derez_nearest(void)$/;"	f	class:DEMGeo
derivative	.\Utils\CompGeomDefs2.h	/^inline Vector2 Bezier2::derivative(double t) const$/;"	f	class:Bezier2
desc	.\VPF\VPFTable.h	/^	string					desc;$/;"	m	struct:VPF_TableDef
desc	.\WEDCore\WED_EnumSystem.cpp	/^	string	desc;$/;"	m	struct:enum_Info	file:
descTableName	.\VPF\VPFTable.h	/^	string		descTableName;$/;"	m	struct:VPF_ColumnDef
description	.\VPF\VPFTable.h	/^	string		description;$/;"	m	struct:VPF_ColumnDef
desens_partial	.\Utils\FileUtils.cpp	/^static int desens_partial(DIR * dir, char * io_file)$/;"	f	file:
devmajor	.\Utils\MemFileUtils.cpp	/^  char devmajor[8];		\/* 329 *\/$/;"	m	struct:tar_header	file:
devminor	.\Utils\MemFileUtils.cpp	/^  char devminor[8];		\/* 337 *\/$/;"	m	struct:tar_header	file:
dfile	.\OneOffs\osm2shape.c	/^static DBFHandle dfile = NULL;$/;"	v	file:
die	.\OneOffs\osm2shape.c	/^void die(const char * fmt, ...)$/;"	f
die	.\OneOffs\osm_tile.c	/^void die(const char * fmt, ...)$/;"	f
die_err	.\MeshTool\MeshTool_Create.cpp	/^static void die_err(const char * msg, ...)$/;"	f	file:
die_parse	.\MeshTool\MeshTool.cpp	/^static void die_parse(const char * msg, ...)$/;"	f	file:
die_parse2	.\MeshTool\MeshTool.cpp	/^static void die_parse2(const char * msg, va_list va)$/;"	f	file:
die_usage	.\OneOffs\osm_tile.c	/^static void die_usage(void)$/;"	f	file:
difference_type	.\lib_json\include\json\value.h	/^      typedef int difference_type;$/;"	t	class:Json::ValueConstIterator
difference_type	.\lib_json\include\json\value.h	/^      typedef int difference_type;$/;"	t	class:Json::ValueIterator
difference_type	.\lib_json\include\json\value.h	/^      typedef int difference_type;$/;"	t	class:Json::ValueIteratorBase
diffuse	.\Obj\XObjBuilder.h	/^	float		diffuse[3];			float	o_diffuse[3];$/;"	m	class:XObjBuilder
digest	.\Utils\XFileTwiddle.h	/^	unsigned char digest[16];$/;"	m	struct:MD5_Sig
digest	.\Utils\md5.h	/^	unsigned char digest[16]; 				\/* actual digest after MD5Final call *\/$/;"	m	struct:__anon91
digits	.\Interfaces\IPropertyObject.h	/^	int				digits;$/;"	m	struct:PropertyInfo_t
dir	.\WEDCore\WED_Clipping.cpp	/^	int		dir;$/;"	m	struct:clipping_line	file:
dir_hi_degs_mag	.\XESCore\AptDefs.h	/^	int				dir_hi_degs_mag;$/;"	m	struct:AptWindRule_t
dir_lo_degs_mag	.\XESCore\AptDefs.h	/^	int				dir_lo_degs_mag;$/;"	m	struct:AptWindRule_t
dir_x	.\XESCore\DEMToVector.cpp	/^static int	dir_x[8] = { 0, -1, -1, -1, 0, 1, 1, 1 };$/;"	v	file:
dir_y	.\XESCore\DEMToVector.cpp	/^static int	dir_y[8] = { 1, 1, 0, -1, -1, -1, 0, 1 };$/;"	v	file:
dirs_x	.\XESCore\Hydro.cpp	/^static int dirs_x[DIRS_COUNT] = { 0, 1, 0, -1 };$/;"	v	file:
dirs_x	.\XESCore\Hydro.cpp	/^static int dirs_x[DIRS_COUNT] = { 0, 1, 1, 1, 0, -1, -1, -1 };$/;"	v	file:
dirs_y	.\XESCore\Hydro.cpp	/^static int dirs_y[DIRS_COUNT] = { 1, 0, -1, 0 };$/;"	v	file:
dirs_y	.\XESCore\Hydro.cpp	/^static int dirs_y[DIRS_COUNT] = { 1, 1, 0, -1, -1, -1, 0, 1 };$/;"	v	file:
discon	.\XESCore\BlockDefs.h	/^	bool			discon;			\/\/ Discontinuity in road or edge type - requires a "hard cap" between this segment and the next one.$/;"	m	struct:block_pt
disk_num_start	.\Utils\unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:unz_file_info_s
disp1	.\WEDEntities\WED_Runway.h	/^	WED_PropDoubleTextMeters	disp1;$/;"	m	class:WED_Runway
disp1_ft	.\XESCore\AptDefs.h	/^	int			disp1_ft;$/;"	m	struct:AptPavement_t
disp2	.\WEDEntities\WED_Runway.h	/^	WED_PropDoubleTextMeters	disp2;$/;"	m	class:WED_Runway
disp2_ft	.\XESCore\AptDefs.h	/^	int			disp2_ft;$/;"	m	struct:AptPavement_t
disp_mtr	.\XESCore\AptDefs.h	/^	float		disp_mtr[2];$/;"	m	struct:AptRunway_t
display	.\UI\XPopup.h	/^	Display*	display;$/;"	m	struct:xwindow
displayheight	.\UI\XPopup.h	/^		unsigned int displayheight;$/;"	m	class:XPopup
displaywidth	.\UI\XPopup.h	/^		unsigned int displaywidth;$/;"	m	class:XPopup
dist	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double					dist;$/;"	m	struct:NearestEdgeToPt_t	file:
dist	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double				dist;$/;"	m	struct:NearestPFSToPt_t	file:
dist	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double				dist;$/;"	m	struct:NearestVertexToPt_t	file:
dist_from_line	.\XESCore\MeshAlgs.cpp	/^double dist_from_line(const Point_2& p, const Point_2& q, const Point_2& r)$/;"	f
distance	.\WEDMap\WED_MapToolNew.h	/^	bool		has_distance;		double	distance;$/;"	m	class:WED_MapToolNew
distance_denormaled	.\Utils\CompGeomDefs2.h	/^inline double Line2::distance_denormaled(const Point2& p) const$/;"	f	class:Line2
distance_denormaled	.\Utils\CompGeomDefs3.h	/^inline double Plane3::distance_denormaled(const Point3& p) const$/;"	f	class:Plane3
distance_markings	.\XESCore\AptDefs.h	/^	int			distance_markings;$/;"	m	struct:AptPavement_t
divide_heading	.\XESCore\AptIO.cpp	/^void divide_heading(int * lo, int * hi)$/;"	f
dl_rows	.\GUI\GUI_Laftfont.h	/^	int		dl_rows;$/;"	m	struct:gl_glyph
dl_width	.\GUI\GUI_Laftfont.h	/^	int		dl_width;$/;"	m	struct:gl_glyph
dm_altitude	.\WEDNetwork\WED_NWInfoLayer.h	/^        dm_altitude   ,$/;"	e	enum:WED_NWInfoLayer::drag_mode
dm_heading	.\WEDNetwork\WED_NWInfoLayer.h	/^        dm_heading    ,$/;"	e	enum:WED_NWInfoLayer::drag_mode
dm_none	.\WEDNetwork\WED_NWInfoLayer.h	/^        dm_none    = 0,$/;"	e	enum:WED_NWInfoLayer::drag_mode
dm_pitch	.\WEDNetwork\WED_NWInfoLayer.h	/^        dm_pitch      ,$/;"	e	enum:WED_NWInfoLayer::drag_mode
do_add_urban_roads	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_add_urban_roads;$/;"	m	struct:ProcessingPrefs_t
do_ag_save	.\AC3DPlugins\obj8_export.cpp	/^int do_ag_save(char * fname, ACObject * obj)$/;"	f
do_airports	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_airports;$/;"	m	struct:ProcessingPrefs_t
do_assign_landuse	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_assign_landuse;$/;"	m	struct:ProcessingPrefs_t
do_bake_selection	.\AC3DPlugins\obj_anim.cpp	/^static void do_bake_selection(void)$/;"	f	file:
do_build_roads	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_build_roads;$/;"	m	struct:ProcessingPrefs_t
do_bulk_export	.\AC3DPlugins\obj_tools.cpp	/^void do_bulk_export(void)$/;"	f
do_calc_lod	.\AC3DPlugins\obj_tools.cpp	/^void do_calc_lod(void)$/;"	f
do_calc_slope	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_calc_slope;$/;"	m	struct:ProcessingPrefs_t
do_change_tex	.\AC3DPlugins\obj_tools.cpp	/^void do_change_tex(void)$/;"	f
do_derive_dems	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_derive_dems;$/;"	m	struct:ProcessingPrefs_t
do_dsf_load	.\AC3DPlugins\dsf_export.cpp	/^ACObject *	do_dsf_load(char *filename)$/;"	f
do_dsf_save	.\AC3DPlugins\dsf_export.cpp	/^int 		do_dsf_save(char * fname, ACObject * obj)$/;"	f
do_help	.\OneOffs\osm2shape.c	/^static void do_help(void)$/;"	f	file:
do_hydro_correct	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_hydro_correct;$/;"	m	struct:ProcessingPrefs_t
do_hydro_simplify	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_hydro_simplify;$/;"	m	struct:ProcessingPrefs_t
do_import_dsf	.\WEDImportExport\WED_DSFImport.cpp	/^	int do_import_dsf(const char * file_name, WED_Thing * base)$/;"	f	class:DSF_Importer
do_import_txt	.\WEDImportExport\WED_DSFImport.cpp	/^	void do_import_txt(const char * file_name, WED_Thing * base)$/;"	f	class:DSF_Importer
do_make_onesided	.\AC3DPlugins\obj_tools.cpp	/^void do_make_onesided(void)$/;"	f
do_make_upnormal	.\AC3DPlugins\obj_tools.cpp	/^void do_make_upnormal(void)$/;"	f
do_named_group	.\AC3DPlugins\obj_tools.cpp	/^void do_named_group(char * str)$/;"	f
do_obj7_save_convert	.\AC3DPlugins\obj8_export.cpp	/^int 		do_obj7_save_convert(char * fname, ACObject * obj)$/;"	f
do_obj8_load	.\AC3DPlugins\obj8_import.cpp	/^ACObject *	do_obj8_load(char *filename)$/;"	f
do_obj8_save	.\AC3DPlugins\obj8_export.cpp	/^int 		do_obj8_save(char * fname, ACObject * obj)$/;"	f
do_obj8_save_common	.\AC3DPlugins\obj8_export.cpp	/^int do_obj8_save_common(char * fname, ACObject * obj, convert_choice convert, int do_prefix, int tex_id, int do_misc)$/;"	f
do_obj8_save_ex	.\AC3DPlugins\obj8_export.cpp	/^int 		do_obj8_save_ex(char * fname, ACObject * obj, int do_prefix, int tex_id, int do_misc)$/;"	f
do_obj8_update	.\AC3DPlugins\obj_update.cpp	/^static void do_obj8_update(void)$/;"	f	file:
do_obje_save	.\AC3DPlugins\obj8_export.cpp	/^int 		do_obje_save(char * fname, ACObject * obj)$/;"	f
do_optimize_selection	.\AC3DPlugins\obj_tools.cpp	/^void do_optimize_selection(float do_optimize)$/;"	f
do_optimize_with	.\OneOffs\gen_roads10.h	/^	void	do_optimize_with(const road_segment& rhs)$/;"	f	struct:road_segment
do_reload_all_texes	.\AC3DPlugins\obj_tools.cpp	/^void do_reload_all_texes(void)$/;"	f
do_rescale_tex	.\AC3DPlugins\obj_tools.cpp	/^void do_rescale_tex(const char * config)$/;"	f
do_resync_anim	.\AC3DPlugins\obj_anim.cpp	/^static void do_resync_anim(void)$/;"	f	file:
do_rotate	.\WEDCore\WED_ResourceMgr.cpp	/^inline void	do_rotate(int n, double& io_x, double& io_y)$/;"	f
do_sel_lights	.\AC3DPlugins\obj_tools.cpp	/^void do_sel_lights(void)$/;"	f
do_select_tex	.\AC3DPlugins\obj_tools.cpp	/^void do_select_tex(const char * config)$/;"	f
do_shoulders	.\WEDMap\WED_PreviewLayer.cpp	/^	int			 do_shoulders;$/;"	m	struct:preview_runway	file:
do_show_night	.\AC3DPlugins\obj_tools.cpp	/^void do_show_night(void)$/;"	f
do_show_transparent	.\AC3DPlugins\obj_tools.cpp	/^void do_show_transparent(void)$/;"	f
do_tex	.\OneOffs\gen_roads.cpp	/^void do_tex(tex_info * t)$/;"	f
do_tex_bridge	.\OneOffs\gen_roads.cpp	/^void do_tex_bridge(tex_info * t)$/;"	f
do_tex_export	.\AC3DPlugins\obj_tools.cpp	/^void do_tex_export(void)$/;"	f
do_tree_extrude	.\AC3DPlugins\obj_tools.cpp	/^void do_tree_extrude(void)$/;"	f
do_triangulate	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_triangulate;$/;"	m	struct:ProcessingPrefs_t
do_upsample_environment	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_upsample_environment;$/;"	m	struct:ProcessingPrefs_t
do_uv_copy	.\AC3DPlugins\uv_mapper.cpp	/^void do_uv_copy(void)$/;"	f
do_uv_map	.\AC3DPlugins\uv_mapper.cpp	/^void do_uv_map(void)$/;"	f
do_uv_paste	.\AC3DPlugins\uv_mapper.cpp	/^void do_uv_paste(void)$/;"	f
do_zoning	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		do_zoning;$/;"	m	struct:ProcessingPrefs_t
dob_sqr	.\Utils\MathUtils.h	/^inline double	dob_sqr		(const double in															){													return in*in;}$/;"	f
doblim	.\Utils\MathUtils.h	/^inline double doblim(const double in,const double min,const double max){$/;"	f
dobmax2	.\Utils\MathUtils.h	/^inline double	dobmax2		(const double x1,const double x2											){													return (x1>x2)?x1:x2;}$/;"	f
dobmin2	.\Utils\MathUtils.h	/^inline double	dobmin2		(const double x1,const double x2											){													return (x1<x2)?x1:x2;}$/;"	f
dobwrap	.\Utils\MathUtils.h	/^inline double dobwrap(double in,const double min,const double max){	\/\/ FLOATING POINT MUST NOT TAKE 0->359, cause that$/;"	f
document_	.\lib_json\include\json\reader.h	/^      std::string document_;$/;"	m	class:Json::Reader
document_	.\lib_json\include\json\writer.h	/^      std::ostream* document_;$/;"	m	class:Json::StyledStreamWriter
document_	.\lib_json\include\json\writer.h	/^      std::string document_;$/;"	m	class:Json::FastWriter
document_	.\lib_json\include\json\writer.h	/^      std::string document_;$/;"	m	class:Json::StyledWriter
domain	.\WEDCore\WED_EnumSystem.cpp	/^	int		domain;$/;"	m	struct:enum_Info	file:
domain	.\WEDCore\WED_PropertyHelper.h	/^	int			domain;$/;"	m	class:WED_PropIntEnum
domain	.\WEDCore\WED_PropertyHelper.h	/^	int			domain;$/;"	m	class:WED_PropIntEnumBitfield
domain	.\WEDCore\WED_PropertyHelper.h	/^	int			domain;$/;"	m	class:WED_PropIntEnumSet
domain_Info	.\WEDCore\WED_EnumSystem.cpp	/^struct domain_Info {$/;"	s	file:
dominant	.\XESCore\Hydro.cpp	/^inline Halfedge_handle	dominant(Halfedge_handle e) { return e->data().mDominant ? e : e->twin(); }$/;"	f
done	.\SDTS\SDTSRead.cpp	/^	bool	done(void) { return !(iter); }$/;"	f	struct:SDTSModuleIterator::SDTSModuleIteratorImp
done	.\Utils\RLERegion.cpp	/^	bool done(void) { return x1_ >= rgn1_.x2_ && x1_ >= rgn2_.x2_; }$/;"	f	class:RLERegionDualScanner
done	.\Utils\RLERegion.cpp	/^bool		RLERegionScanner::done(void) const$/;"	f	class:RLERegionScanner
done	.\Utils\XUtils.cpp	/^bool	StTextFileScanner::done()$/;"	f	class:StTextFileScanner
done	.\XESCore\BezierApprox.cpp	/^	bool		done;			\/\/ This indicates that we have already emitted the last real curve$/;"	m	struct:bezier_approx_seq	file:
done_OK	.\Network\curl_http.h	/^		done_OK			= 1,		\/\/ Sucessful download - buffer or dest file is now complete.$/;"	e	enum:curl_http_get_file::__anon36
done_error	.\Network\curl_http.h	/^		done_error		= 2			\/\/ Failure of some kind - err code available...$/;"	e	enum:curl_http_get_file::__anon36
dosDate	.\Utils\unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:unz_file_info_s
dosDate	.\Utils\zip.c	/^    uLong dosDate;$/;"	m	struct:__anon104	file:
dosDate	.\Utils\zip.h	/^    uLong       dosDate;       \/* if dos_date == 0, tmu_date is used      *\/$/;"	m	struct:__anon106
dot	.\Utils\CompGeomDefs2.h	/^	double	dot(const Vector2& v) const { return dx * v.dx + dy * v.dy; }$/;"	f	struct:Vector2
dot	.\Utils\CompGeomDefs3.h	/^	double	dot (const Vector3& v) const { return dx * v.dx + dy * v.dy + dz * v.dz; }$/;"	f	struct:Vector3
dot	.\XESCore\BlockDefs.h	/^	float			dot;$/;"	m	struct:block_pt
double_extrap	.\Utils\MathUtils.h	/^inline double double_extrap(const double x1,const double y1,const double x2,const double y2,const double x)$/;"	f
double_interp	.\Utils\MathUtils.h	/^inline double double_interp(const double x1,const double y1,const double x2,const double y2,const double x)$/;"	f
double_val	.\GUI\GUI_TextTable.h	/^	double					double_val;$/;"	m	struct:GUI_CellContent
double_val	.\Interfaces\IPropertyObject.h	/^	double		double_val;$/;"	m	struct:PropertyVal_t
douglas_peuker	.\Utils\douglas_peuker.h	/^void douglas_peuker($/;"	f
douglas_peuker_H	.\Utils\douglas_peuker.h	25;"	d
dragEnterEvent	.\GUI\GUI_Window.cpp	/^void GUI_Window::dragEnterEvent(QDragEnterEvent* e)$/;"	f	class:GUI_Window
dragEnterEvent	.\UI\XWin.lin.cpp	/^void XWin::dragEnterEvent(QDragEnterEvent* e)$/;"	f	class:XWin
dragLeaveEvent	.\GUI\GUI_Window.cpp	/^void GUI_Window::dragLeaveEvent(QDragLeaveEvent* e)$/;"	f	class:GUI_Window
dragLeaveEvent	.\UI\XWin.lin.cpp	/^void XWin::dragLeaveEvent(QDragLeaveEvent* e)$/;"	f	class:XWin
dragMoveEvent	.\GUI\GUI_Window.cpp	/^void GUI_Window::dragMoveEvent(QDragMoveEvent* e)$/;"	f	class:GUI_Window
dragMoveEvent	.\UI\XWin.lin.cpp	/^void XWin::dragMoveEvent(QDragMoveEvent* e)$/;"	f	class:XWin
drag_Create	.\WEDMap\WED_HandleToolBase.h	/^		drag_Create$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_Ent	.\WEDMap\WED_HandleToolBase.h	/^		drag_Ent,			\/\/ Control handles: We are dragging an entire entity.$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_Handles	.\WEDMap\WED_HandleToolBase.h	/^		drag_Handles,		\/\/ Control handles: We are dragging a single control handle$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_HigherOrInto	.\GUI\GUI_TextTable.h	/^		drag_HigherOrInto,$/;"	e	enum:GUI_TextTable::GUI_DragPart
drag_IntoOrHigher	.\GUI\GUI_TextTable.h	/^		drag_IntoOrHigher,$/;"	e	enum:GUI_TextTable::GUI_DragPart
drag_IntoOrLower	.\GUI\GUI_TextTable.h	/^		drag_IntoOrLower,$/;"	e	enum:GUI_TextTable::GUI_DragPart
drag_Links	.\WEDMap\WED_HandleToolBase.h	/^		drag_Links,			\/\/ Control handles: We are dragging a line\/link$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_LowerOrInto	.\GUI\GUI_TextTable.h	/^		drag_LowerOrInto,		\/\/ If the cell doesn't support reordering, we use "whole cell".$/;"	e	enum:GUI_TextTable::GUI_DragPart
drag_Move	.\WEDMap\WED_HandleToolBase.h	/^		drag_Move,			\/\/ we are moving the selection$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_None	.\WEDMap\WED_HandleToolBase.h	/^		drag_None,			\/\/ We are not dragging anything$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_Sel	.\WEDMap\WED_HandleToolBase.h	/^		drag_Sel,			\/\/ We are selecting things$/;"	e	enum:WED_HandleToolBase::DragType_t
drag_WholeCell	.\GUI\GUI_TextTable.h	/^		drag_WholeCell$/;"	e	enum:GUI_TextTable::GUI_DragPart
drag_mode	.\WEDNetwork\WED_NWInfoLayer.h	/^    enum drag_mode$/;"	g	class:WED_NWInfoLayer
drag_x	.\Utils\UIUtils.h	/^	int		drag_x;$/;"	m	struct:DragHandleInfo_t
drag_y	.\Utils\UIUtils.h	/^	int		drag_y;$/;"	m	struct:DragHandleInfo_t
draped	.\OneOffs\gen_roads10.h	/^	draped,$/;"	e	enum:grading_type
drawMode_Lgt	.\Obj\ObjDraw.cpp	/^	drawMode_Lgt,$/;"	e	enum:__anon38	file:
drawMode_Lin	.\Obj\ObjDraw.cpp	/^	drawMode_Lin,$/;"	e	enum:__anon38	file:
drawMode_Mov	.\Obj\ObjDraw.cpp	/^	drawMode_Mov$/;"	e	enum:__anon38	file:
drawMode_Non	.\Obj\ObjDraw.cpp	/^	drawMode_Non,$/;"	e	enum:__anon38	file:
drawMode_Pan	.\Obj\ObjDraw.cpp	/^	drawMode_Pan,$/;"	e	enum:__anon38	file:
drawMode_Tri	.\Obj\ObjDraw.cpp	/^	drawMode_Tri,$/;"	e	enum:__anon38	file:
draw_char	.\GUI\GUI_Fonts.cpp	/^float TT_font_info::draw_char(UTF32 inChar, float x, float y, float s)$/;"	f	class:TT_font_info
draw_disable	.\Obj\XObjBuilder.h	/^	int			draw_disable;		int		o_draw_disable;$/;"	m	class:XObjBuilder
draw_he	.\RenderFarmUI\RF_DrawMap.cpp	/^void draw_he(Halfedge_handle e)$/;"	f
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_facade
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_forest
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_helipad
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_object
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_ortho
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_pol
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_polygon
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_runway
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_sealane
draw_it	.\WEDMap\WED_PreviewLayer.cpp	/^	virtual void draw_it(WED_MapZoomerNew * zoomer, GUI_GraphState * g, float mPavementAlpha)$/;"	f	struct:preview_taxiway
draw_obj	.\XESCore\AptDefs.h	/^	int			draw_obj;		\/\/ not used in 850$/;"	m	struct:AptTowerPt_t
draw_obj_at_ll	.\WEDMap\WED_PreviewLayer.cpp	/^void draw_obj_at_ll(ITexMgr * tman, XObj8 * o, const Point2& loc, float r, GUI_GraphState * g, WED_MapZoomerNew * zoomer)$/;"	f
draw_obj_at_xyz	.\WEDMap\WED_PreviewLayer.cpp	/^void draw_obj_at_xyz(ITexMgr * tman, XObj8 * o, double x, double y, double z, float r, GUI_GraphState * g)$/;"	f
draw_tris	.\Obj\XObjWriteEmbedded.cpp	/^	draw_tris=1,				\/\/ unsigned short offset, unsigned short count$/;"	e	enum:__anon43	file:
dref_info	.\Obj\XObjWriteEmbedded.cpp	/^	void *			dref_info;$/;"	m	struct:embed_props_t	file:
droop	.\OneOffs\gen_roads10.h	/^	float			droop;$/;"	m	struct:wire
dropEvent	.\GUI\GUI_Window.cpp	/^void GUI_Window::dropEvent(QDropEvent* e)$/;"	f	class:GUI_Window
dropEvent	.\UI\XWin.lin.cpp	/^void XWin::dropEvent(QDropEvent* e)$/;"	f	class:XWin
drop_empty	.\OneOffs\osm2shape.c	/^static int drop_empty = 0;$/;"	v	file:
drp	.\WEDMap\WED_PreviewLayer.cpp	/^	int					drp;$/;"	m	struct:Obj_DrawStruct	file:
drp	.\XPTools\ViewObj.cpp	/^	GLenum		drp;$/;"	m	struct:ObjViewInfo_t	file:
dsfErrorMessages	.\DSF\DSFLib.cpp	/^const char *	dsfErrorMessages[] = {$/;"	v
dsfErrorMessages	.\DSF\dsflib_013005\DSFLib.cpp	/^char *	dsfErrorMessages[] = {$/;"	v
dsf_CmdAll	.\DSF\DSFLib.h	/^	dsf_CmdAll	   = 0xFF	\/* Return everything at once.					*\/$/;"	e	enum:__anon11
dsf_CmdAll	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdAll	   = 0x3F	\/* Return everything at once.					*\/$/;"	e	enum:__anon16
dsf_CmdDefs	.\DSF\DSFLib.h	/^	dsf_CmdDefs    = 0x02,	\/* Return definitions							*\/$/;"	e	enum:__anon11
dsf_CmdDefs	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdDefs    = 0x02,	\/* Return definitions							*\/$/;"	e	enum:__anon16
dsf_CmdObjects	.\DSF\DSFLib.h	/^	dsf_CmdObjects = 0x20,	\/* Return objects								*\/$/;"	e	enum:__anon11
dsf_CmdObjects	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdObjects = 0x20,	\/* Return objects								*\/$/;"	e	enum:__anon16
dsf_CmdPatches	.\DSF\DSFLib.h	/^	dsf_CmdPatches = 0x04,	\/* Return Patches and triangles					*\/$/;"	e	enum:__anon11
dsf_CmdPatches	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdPatches = 0x04,	\/* Return Patches and triangles					*\/$/;"	e	enum:__anon16
dsf_CmdPolys	.\DSF\DSFLib.h	/^	dsf_CmdPolys   = 0x10,	\/* Return polygons (facades, etc.)				*\/$/;"	e	enum:__anon11
dsf_CmdPolys	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdPolys   = 0x10,	\/* Return polygons (facades, etc.)				*\/$/;"	e	enum:__anon16
dsf_CmdProps	.\DSF\DSFLib.h	/^	dsf_CmdProps   = 0x01,	\/* Return properties.							*\/$/;"	e	enum:__anon11
dsf_CmdProps	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdProps   = 0x01,	\/* Return properties.							*\/$/;"	e	enum:__anon16
dsf_CmdRaster	.\DSF\DSFLib.h	/^	dsf_CmdRaster	=0x80,	\/* Raster data									*\/$/;"	e	enum:__anon11
dsf_CmdSign	.\DSF\DSFLib.h	/^	dsf_CmdSign	   = 0x40,	\/* Do MD5 signature of data						*\/$/;"	e	enum:__anon11
dsf_CmdVectors	.\DSF\DSFLib.h	/^	dsf_CmdVectors = 0x08,	\/* Return vector types							*\/$/;"	e	enum:__anon11
dsf_CmdVectors	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_CmdVectors = 0x08,	\/* Return vector types							*\/$/;"	e	enum:__anon16
dsf_Cmd_Comment16	.\DSF\DSFDefs.h	/^	dsf_Cmd_Comment16					= 33,$/;"	e	enum:__anon8
dsf_Cmd_Comment16	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Comment16					= 33,$/;"	e	enum:__anon14
dsf_Cmd_Comment32	.\DSF\DSFDefs.h	/^	dsf_Cmd_Comment32					= 34$/;"	e	enum:__anon8
dsf_Cmd_Comment32	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Comment32					= 34$/;"	e	enum:__anon14
dsf_Cmd_Comment8	.\DSF\DSFDefs.h	/^	dsf_Cmd_Comment8					= 32,$/;"	e	enum:__anon8
dsf_Cmd_Comment8	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Comment8					= 32,$/;"	e	enum:__anon14
dsf_Cmd_JunctionOffsetSelect	.\DSF\DSFDefs.h	/^	dsf_Cmd_JunctionOffsetSelect		= 2,$/;"	e	enum:__anon8
dsf_Cmd_JunctionOffsetSelect	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_JunctionOffsetSelect		= 2,$/;"	e	enum:__anon14
dsf_Cmd_NestedPolygon	.\DSF\DSFDefs.h	/^	dsf_Cmd_NestedPolygon				= 14,$/;"	e	enum:__anon8
dsf_Cmd_NestedPolygon	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_NestedPolygon				= 14,$/;"	e	enum:__anon14
dsf_Cmd_NestedPolygonRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_NestedPolygonRange			= 15,$/;"	e	enum:__anon8
dsf_Cmd_NestedPolygonRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_NestedPolygonRange			= 15,$/;"	e	enum:__anon14
dsf_Cmd_NetworkChain	.\DSF\DSFDefs.h	/^	dsf_Cmd_NetworkChain				= 9,$/;"	e	enum:__anon8
dsf_Cmd_NetworkChain	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_NetworkChain				= 9,$/;"	e	enum:__anon14
dsf_Cmd_NetworkChain32	.\DSF\DSFDefs.h	/^	dsf_Cmd_NetworkChain32				= 11,$/;"	e	enum:__anon8
dsf_Cmd_NetworkChain32	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_NetworkChain32				= 11,$/;"	e	enum:__anon14
dsf_Cmd_NetworkChainRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_NetworkChainRange			= 10,$/;"	e	enum:__anon8
dsf_Cmd_NetworkChainRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_NetworkChainRange			= 10,$/;"	e	enum:__anon14
dsf_Cmd_Object	.\DSF\DSFDefs.h	/^	dsf_Cmd_Object						= 7,$/;"	e	enum:__anon8
dsf_Cmd_Object	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Object						= 7,$/;"	e	enum:__anon14
dsf_Cmd_ObjectRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_ObjectRange					= 8,$/;"	e	enum:__anon8
dsf_Cmd_ObjectRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_ObjectRange					= 8,$/;"	e	enum:__anon14
dsf_Cmd_Polygon	.\DSF\DSFDefs.h	/^	dsf_Cmd_Polygon						= 12,$/;"	e	enum:__anon8
dsf_Cmd_Polygon	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Polygon						= 12,$/;"	e	enum:__anon14
dsf_Cmd_PolygonRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_PolygonRange				= 13,$/;"	e	enum:__anon8
dsf_Cmd_PolygonRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_PolygonRange				= 13,$/;"	e	enum:__anon14
dsf_Cmd_PoolSelect	.\DSF\DSFDefs.h	/^	dsf_Cmd_PoolSelect					= 1,$/;"	e	enum:__anon8
dsf_Cmd_PoolSelect	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_PoolSelect					= 1,$/;"	e	enum:__anon14
dsf_Cmd_Reserved	.\DSF\DSFDefs.h	/^	dsf_Cmd_Reserved					= 0,$/;"	e	enum:__anon8
dsf_Cmd_Reserved	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Reserved					= 0,$/;"	e	enum:__anon14
dsf_Cmd_SetDefinition16	.\DSF\DSFDefs.h	/^	dsf_Cmd_SetDefinition16				= 4,$/;"	e	enum:__anon8
dsf_Cmd_SetDefinition16	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_SetDefinition16				= 4,$/;"	e	enum:__anon14
dsf_Cmd_SetDefinition32	.\DSF\DSFDefs.h	/^	dsf_Cmd_SetDefinition32				= 5,$/;"	e	enum:__anon8
dsf_Cmd_SetDefinition32	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_SetDefinition32				= 5,$/;"	e	enum:__anon14
dsf_Cmd_SetDefinition8	.\DSF\DSFDefs.h	/^	dsf_Cmd_SetDefinition8				= 3,$/;"	e	enum:__anon8
dsf_Cmd_SetDefinition8	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_SetDefinition8				= 3,$/;"	e	enum:__anon14
dsf_Cmd_SetRoadSubtype8	.\DSF\DSFDefs.h	/^	dsf_Cmd_SetRoadSubtype8				= 6,$/;"	e	enum:__anon8
dsf_Cmd_SetRoadSubtype8	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_SetRoadSubtype8				= 6,$/;"	e	enum:__anon14
dsf_Cmd_TerrainPatch	.\DSF\DSFDefs.h	/^	dsf_Cmd_TerrainPatch				= 16,$/;"	e	enum:__anon8
dsf_Cmd_TerrainPatch	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TerrainPatch				= 16,$/;"	e	enum:__anon14
dsf_Cmd_TerrainPatchFlags	.\DSF\DSFDefs.h	/^	dsf_Cmd_TerrainPatchFlags			= 17,$/;"	e	enum:__anon8
dsf_Cmd_TerrainPatchFlags	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TerrainPatchFlags			= 17,$/;"	e	enum:__anon14
dsf_Cmd_TerrainPatchFlagsLOD	.\DSF\DSFDefs.h	/^	dsf_Cmd_TerrainPatchFlagsLOD		= 18,$/;"	e	enum:__anon8
dsf_Cmd_TerrainPatchFlagsLOD	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TerrainPatchFlagsLOD		= 18,$/;"	e	enum:__anon14
dsf_Cmd_Triangle	.\DSF\DSFDefs.h	/^	dsf_Cmd_Triangle					= 23,$/;"	e	enum:__anon8
dsf_Cmd_Triangle	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_Triangle					= 23,$/;"	e	enum:__anon14
dsf_Cmd_TriangleCrossPool	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleCrossPool			= 24,$/;"	e	enum:__anon8
dsf_Cmd_TriangleCrossPool	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleCrossPool			= 24,$/;"	e	enum:__anon14
dsf_Cmd_TriangleFan	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleFan					= 29,$/;"	e	enum:__anon8
dsf_Cmd_TriangleFan	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleFan					= 29,$/;"	e	enum:__anon14
dsf_Cmd_TriangleFanCrossPool	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleFanCrossPool		= 30,$/;"	e	enum:__anon8
dsf_Cmd_TriangleFanCrossPool	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleFanCrossPool		= 30,$/;"	e	enum:__anon14
dsf_Cmd_TriangleFanRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleFanRange			= 31,$/;"	e	enum:__anon8
dsf_Cmd_TriangleFanRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleFanRange			= 31,$/;"	e	enum:__anon14
dsf_Cmd_TriangleRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleRange				= 25,$/;"	e	enum:__anon8
dsf_Cmd_TriangleRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleRange				= 25,$/;"	e	enum:__anon14
dsf_Cmd_TriangleStrip	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleStrip				= 26,$/;"	e	enum:__anon8
dsf_Cmd_TriangleStrip	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleStrip				= 26,$/;"	e	enum:__anon14
dsf_Cmd_TriangleStripCrossPool	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleStripCrossPool		= 27,$/;"	e	enum:__anon8
dsf_Cmd_TriangleStripCrossPool	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleStripCrossPool		= 27,$/;"	e	enum:__anon14
dsf_Cmd_TriangleStripRange	.\DSF\DSFDefs.h	/^	dsf_Cmd_TriangleStripRange			= 28,$/;"	e	enum:__anon8
dsf_Cmd_TriangleStripRange	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Cmd_TriangleStripRange			= 28,$/;"	e	enum:__anon14
dsf_CommandsAtom	.\DSF\DSFDefs.h	/^	dsf_CommandsAtom				= 'CMDS',	\/\/	(command structure)$/;"	e	enum:__anon5
dsf_CommandsAtom	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_CommandsAtom				= 'CMDS'	\/\/	(command structure)$/;"	e	enum:__anon12
dsf_Comment_Filter	.\DSF\DSFDefs.h	/^	dsf_Comment_Filter					= 1$/;"	e	enum:__anon9
dsf_DefinitionsAtom	.\DSF\DSFDefs.h	/^	dsf_DefinitionsAtom				= 'DEFN',	\/\/	Atom of atoms$/;"	e	enum:__anon5
dsf_DefinitionsAtom	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_DefinitionsAtom				= 'DEFN',	\/\/	Atom of atoms$/;"	e	enum:__anon12
dsf_ErrBadChecksum	.\DSF\DSFLib.h	/^	dsf_ErrBadChecksum,					\/* MD5 signature is bad - indicates poorly made DSF?										*\/$/;"	e	enum:__anon10
dsf_ErrBadCommand	.\DSF\DSFLib.h	/^	dsf_ErrBadCommand,					\/* An unknown command index was encountered.  (Usually do to a corrupt command sequence.)   *\/$/;"	e	enum:__anon10
dsf_ErrBadCommand	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrBadCommand,					\/* An unknown command index was encountered.  (Usually do to a corrupt command sequence.)   *\/$/;"	e	enum:__anon15
dsf_ErrBadCookie	.\DSF\DSFLib.h	/^	dsf_ErrBadCookie,					\/* The DSF cookie at the file didn't match - probably not a DSF file!						*\/$/;"	e	enum:__anon10
dsf_ErrBadCookie	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrBadCookie,					\/* The DSF cookie at the file didn't match - probably not a DSF file!						*\/$/;"	e	enum:__anon15
dsf_ErrBadProperties	.\DSF\DSFLib.h	/^	dsf_ErrBadProperties,				\/* The properties atom is corrupted.														*\/$/;"	e	enum:__anon10
dsf_ErrBadProperties	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrBadProperties,				\/* The properties atom is corrupted.														*\/$/;"	e	enum:__anon15
dsf_ErrBadVersion	.\DSF\DSFLib.h	/^	dsf_ErrBadVersion,					\/* The DSF version is not compatible with this lib.											*\/$/;"	e	enum:__anon10
dsf_ErrBadVersion	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrBadVersion,					\/* The DSF version is not compatible with this lib.											*\/$/;"	e	enum:__anon15
dsf_ErrCanceled	.\DSF\DSFLib.h	/^	dsf_ErrCanceled						\/* Client code aborted in definitions CB *\/$/;"	e	enum:__anon10
dsf_ErrCouldNotOpenFile	.\DSF\DSFLib.h	/^	dsf_ErrCouldNotOpenFile,			\/* The requested file could not be opened.													*\/$/;"	e	enum:__anon10
dsf_ErrCouldNotOpenFile	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrCouldNotOpenFile,			\/* The requested file could not be opened.													*\/$/;"	e	enum:__anon15
dsf_ErrCouldNotReadFile	.\DSF\DSFLib.h	/^	dsf_ErrCouldNotReadFile,			\/* The file could not be read (an I\/O error).												*\/$/;"	e	enum:__anon10
dsf_ErrCouldNotReadFile	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrCouldNotReadFile,			\/* The file could not be read (an I\/O error).												*\/$/;"	e	enum:__anon15
dsf_ErrMisformattedCommandAtom	.\DSF\DSFLib.h	/^	dsf_ErrMisformattedCommandAtom,		\/* The commands atom is corrupted.															*\/$/;"	e	enum:__anon10
dsf_ErrMisformattedCommandAtom	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrMisformattedCommandAtom,		\/* The commands atom is corrupted.															*\/$/;"	e	enum:__anon15
dsf_ErrMisformattedScalingAtom	.\DSF\DSFLib.h	/^	dsf_ErrMisformattedScalingAtom,		\/* A scaling atom is corrupted.																*\/$/;"	e	enum:__anon10
dsf_ErrMisformattedScalingAtom	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrMisformattedScalingAtom,		\/* A scaling atom is corrupted.																*\/$/;"	e	enum:__anon15
dsf_ErrMissingAtom	.\DSF\DSFLib.h	/^	dsf_ErrMissingAtom,					\/* Required DSF atoms are missing.															*\/$/;"	e	enum:__anon10
dsf_ErrMissingAtom	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrMissingAtom,					\/* Required DSF atoms are missing.															*\/$/;"	e	enum:__anon15
dsf_ErrNoAtoms	.\DSF\DSFLib.h	/^	dsf_ErrNoAtoms,						\/* This file appears to not be atomic.														*\/$/;"	e	enum:__anon10
dsf_ErrNoAtoms	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrNoAtoms,						\/* This file appears to not be atomic.														*\/$/;"	e	enum:__anon15
dsf_ErrOK	.\DSF\DSFLib.h	/^	dsf_ErrOK = 0,						\/* Success																					*\/$/;"	e	enum:__anon10
dsf_ErrOK	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrOK = 0,						\/* Success																					*\/$/;"	e	enum:__anon15
dsf_ErrOutOfMemory	.\DSF\DSFLib.h	/^	dsf_ErrOutOfMemory,					\/* There was not enough memory to read the file.											*\/$/;"	e	enum:__anon10
dsf_ErrOutOfMemory	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrOutOfMemory,					\/* There was not enough memory to read the file.											*\/$/;"	e	enum:__anon15
dsf_ErrPoolOutOfRange	.\DSF\DSFLib.h	/^	dsf_ErrPoolOutOfRange,				\/* A bad DSF point pool was selected.  (Usually a semantically corrupt file.)				*\/$/;"	e	enum:__anon10
dsf_ErrPoolOutOfRange	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrPoolOutOfRange				\/* A bad DSF point pool was selected.  (Usually a semantically corrupt file.)				*\/$/;"	e	enum:__anon15
dsf_ErrUserCancel	.\DSF\DSFLib.h	/^	dsf_ErrUserCancel,					\/* The NextPass_f callback returned false to cancel reading the next pass.					*\/$/;"	e	enum:__anon10
dsf_ErrUserCancel	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_ErrUserCancel,					\/* The NextPass_f callback returned false to cancel reading the next pass.					*\/$/;"	e	enum:__anon15
dsf_Flag_Overlay	.\DSF\DSFDefs.h	/^	dsf_Flag_Overlay			= 1 << 1	\/* Overlays another patch, take Z-buffer precautions. *\/$/;"	e	enum:__anon7
dsf_Flag_Overlay	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Flag_Overlay			= 1 << 1	\/* Overlays another patch, take Z-buffer precautions. *\/$/;"	e	enum:__anon13
dsf_Flag_Physical	.\DSF\DSFDefs.h	/^	dsf_Flag_Physical			= 1 << 0,	\/* Use this patch in testing for ground.  			  *\/$/;"	e	enum:__anon7
dsf_Flag_Physical	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_Flag_Physical			= 1 << 0,	\/* Use this patch in testing for ground.  			  *\/$/;"	e	enum:__anon13
dsf_GeoDataAtom	.\DSF\DSFDefs.h	/^	dsf_GeoDataAtom					= 'GEOD',	\/\/	Atom of atoms$/;"	e	enum:__anon5
dsf_GeoDataAtom	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_GeoDataAtom					= 'GEOD',	\/\/	Atom of atoms$/;"	e	enum:__anon12
dsf_MetaDataAtom	.\DSF\DSFDefs.h	/^	dsf_MetaDataAtom				= 'HEAD',	\/\/	Atom of atoms$/;"	e	enum:__anon5
dsf_MetaDataAtom	.\DSF\dsflib_013005\DSFDefs.h	/^	dsf_MetaDataAtom				= 'HEAD',	\/\/	Atom of atoms$/;"	e	enum:__anon12
dsf_NetworkAtom	.\DSF\DSFDefs.h	/^		dsf_NetworkAtom				= 'NETW',	\/\/	String table$/;"	e	enum:__anon5
dsf_NetworkAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		dsf_NetworkAtom				= 'NETW',	\/\/	String table$/;"	e	enum:__anon12
dsf_ObjectsAtom	.\DSF\DSFDefs.h	/^		dsf_ObjectsAtom				= 'OBJT',	\/\/	String table$/;"	e	enum:__anon5
dsf_ObjectsAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		dsf_ObjectsAtom				= 'OBJT',	\/\/	String table$/;"	e	enum:__anon12
dsf_PolygonAtom	.\DSF\DSFDefs.h	/^		dsf_PolygonAtom				= 'POLY',	\/\/	String table$/;"	e	enum:__anon5
dsf_PolygonAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		dsf_PolygonAtom				= 'POLY',	\/\/	String table$/;"	e	enum:__anon12
dsf_PropertyAtom	.\DSF\DSFDefs.h	/^		dsf_PropertyAtom			= 'PROP',	\/\/	String table$/;"	e	enum:__anon5
dsf_PropertyAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		dsf_PropertyAtom			= 'PROP',	\/\/	String table$/;"	e	enum:__anon12
dsf_RasterContainerAtom	.\DSF\DSFDefs.h	/^	dsf_RasterContainerAtom			= 'DEMS',	\/\/	Atom of atoms$/;"	e	enum:__anon5
dsf_RasterDataAtom	.\DSF\DSFDefs.h	/^		dsf_RasterDataAtom			= 'DEMD'	\/\/	Raw Data$/;"	e	enum:__anon5
dsf_RasterInfoAtom	.\DSF\DSFDefs.h	/^		dsf_RasterInfoAtom			= 'DEMI',	\/\/	Raster header$/;"	e	enum:__anon5
dsf_RasterNameAtom	.\DSF\DSFDefs.h	/^		dsf_RasterNameAtom			= 'DEMN',	\/\/	String table$/;"	e	enum:__anon5
dsf_RasterVersion	.\DSF\DSFDefs.h	/^	dsf_RasterVersion							= 1$/;"	e	enum:__anon6
dsf_Raster_Area	.\DSF\DSFDefs.h	/^	dsf_Raster_Area								= 0,$/;"	e	enum:__anon6
dsf_Raster_Format_Float	.\DSF\DSFDefs.h	/^	dsf_Raster_Format_Float						= 0,			\/\/	4$/;"	e	enum:__anon6
dsf_Raster_Format_Int	.\DSF\DSFDefs.h	/^	dsf_Raster_Format_Int						= 1,			\/\/	1,2,4$/;"	e	enum:__anon6
dsf_Raster_Format_Mask	.\DSF\DSFDefs.h	/^	dsf_Raster_Format_Mask						= 3,$/;"	e	enum:__anon6
dsf_Raster_Format_Unsigned_Int	.\DSF\DSFDefs.h	/^	dsf_Raster_Format_Unsigned_Int				= 2,			\/\/	1,2,4$/;"	e	enum:__anon6
dsf_Raster_Format_Unsigned_Int_Normalized	.\DSF\DSFDefs.h	/^	dsf_Raster_Format_Unsigned_Int_Normalized	= 3,			\/\/	1,2,4$/;"	e	enum:__anon6
dsf_Raster_Post	.\DSF\DSFDefs.h	/^	dsf_Raster_Post								= 4,$/;"	e	enum:__anon6
dsf_TerrainTypesAtom	.\DSF\DSFDefs.h	/^		dsf_TerrainTypesAtom		= 'TERT',	\/\/	String table$/;"	e	enum:__anon5
dsf_TerrainTypesAtom	.\DSF\dsflib_013005\DSFDefs.h	/^		dsf_TerrainTypesAtom		= 'TERT',	\/\/	String table$/;"	e	enum:__anon12
dsf_Tri	.\DSF\DSFLib.h	/^	dsf_Tri,				\/* DSF Triangle - three vertices form one triangle.							*\/$/;"	e	enum:__anon11
dsf_Tri	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_Tri,				\/* DSF Triangle - three vertices form one triangle.							*\/$/;"	e	enum:__anon16
dsf_TriFan	.\DSF\DSFLib.h	/^	dsf_TriFan,				\/* DSF Triangle Fan - N+2 vertices form N triangles (like OpenGL.)			*\/$/;"	e	enum:__anon11
dsf_TriFan	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_TriFan,				\/* DSF Triangle Fan - N+2 vertices form N triangles (like OpenGL.)			*\/$/;"	e	enum:__anon16
dsf_TriStrip	.\DSF\DSFLib.h	/^	dsf_TriStrip,			\/* DSF Triangle Strip - N+2 vertices form N triangles (like OpenGL.)		*\/$/;"	e	enum:__anon11
dsf_TriStrip	.\DSF\dsflib_013005\DSFLib.h	/^	dsf_TriStrip,			\/* DSF Triangle Strip - N+2 vertices form N triangles (like OpenGL.)		*\/$/;"	e	enum:__anon16
dsf_fill_area	.\WEDEntities\WED_ForestPlacement.h	/^	dsf_fill_area = 0,$/;"	e	enum:__anon116
dsf_fill_line	.\WEDEntities\WED_ForestPlacement.h	/^	dsf_fill_line = 1,$/;"	e	enum:__anon116
dsf_fill_points	.\WEDEntities\WED_ForestPlacement.h	/^	dsf_fill_points = 2$/;"	e	enum:__anon116
dsf_print_depth	.\DSF\DSFLib_Print.cpp	/^static	int	dsf_print_depth = 0;$/;"	v	file:
dsf_print_depth	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int	dsf_print_depth = 0;$/;"	v	file:
dst	.\WEDCore\WED_Routing.h	/^	WED_route_node_t *			dst;$/;"	m	struct:WED_route_edge_t
dst	.\WEDCore\WED_Routing.h	/^	bool						dst;$/;"	m	struct:WED_route_node_t
dst	.\XESCore\AptDefs.h	/^	int							dst;$/;"	m	struct:AptRouteEdge_t
dummy	.\RenderFarmUI\RF_PrefsDialog.h	/^	int		dummy;$/;"	m	struct:RF_Prefs
dump	.\DSF\DSFPointPool.h	/^inline void DSFTuple::dump(void) const$/;"	f	class:DSFTuple
dump	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void DSFTuple::dump(void)$/;"	f	class:DSFTuple
dump	.\RenderFarmUI\RF_Main.cpp	/^void dump(Pmwx& m)$/;"	f
dump	.\XESCore\BlockFill.cpp	/^void	candy_bar::dump()$/;"	f	class:candy_bar
dump_atts	.\OneOffs\osm2shape.c	/^static void dump_atts(entity_t * ent)$/;"	f	file:
dump_forests_HELP	.\XESTools\GISTool_MiscCmds.cpp	510;"	d	file:
dump_shape_file	.\XESTools\GISTool_DumpCmds.cpp	/^static int dump_shape_file(const char * inFileName)$/;"	f	file:
dump_vec	.\Obj\ObjConvert.cpp	/^void dump_vec(const char * bl, const char * al, const vector<INDEX_T>& b, const vector<INDEX_T>& a)$/;"	f
dumphex	.\DSF\DSFPointPool.h	/^inline void DSFTuple::dumphex(void) const$/;"	f	class:DSFTuple
dumphex	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void DSFTuple::dumphex(void)$/;"	f	class:DSFTuple
dupe_bot_reg_type	.\XESCore\BlockFill.cpp	/^struct dupe_bot_reg_type {$/;"	s	file:
duplicate	.\lib_json\include\json\value.h	/^            duplicate,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateOnCopy	.\lib_json\include\json\value.h	/^            duplicateOnCopy$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateStringValue	.\lib_json\src\lib_json\json_value.cpp	/^duplicateStringValue( const char *value, $/;"	f	namespace:Json
dwAlphaBitMask	.\XPTools\DDSTool.cpp	/^        unsigned int dwAlphaBitMask;                                    \/*!< mask for alpha channel *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwBBitMask	.\Utils\BitmapUtils.cpp	/^	DWORD		dwBBitMask;             \/\/ mask for blue bits$/;"	m	struct:TEX_dds_pixelformat	file:
dwBBitMask	.\XPTools\DDSTool.cpp	/^        unsigned int dwBBitMask;                        \/*!< mask for blue bits *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwBitCount	.\XPTools\DDSTool.cpp	/^        unsigned int dwBitCount;                        \/*!< number of bits per pixel  *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwCaps	.\Utils\BitmapUtils.cpp	/^    DWORD       dwCaps;         \/\/ capabilities of surface wanted$/;"	m	struct:TEX_dds_caps2	file:
dwCaps2	.\Utils\BitmapUtils.cpp	/^    DWORD       dwCaps2;$/;"	m	struct:TEX_dds_caps2	file:
dwCaps3	.\Utils\BitmapUtils.cpp	/^    DWORD       dwCaps3;$/;"	m	struct:TEX_dds_caps2	file:
dwCaps4	.\Utils\BitmapUtils.cpp	/^    DWORD       dwCaps4;$/;"	m	struct:TEX_dds_caps2	file:
dwDepth	.\Utils\BitmapUtils.cpp	/^    DWORD               dwDepth;				\/\/ Vol texes-depth.$/;"	m	struct:TEX_dds_desc	file:
dwFlags	.\Utils\BitmapUtils.cpp	/^    DWORD               dwFlags;                \/\/ determines what fields are valid			(DDSD_CAPS, DDSD_PIXELFORMAT, DDSD_WIDTH, DDSD_HEIGHT.)$/;"	m	struct:TEX_dds_desc	file:
dwFlags	.\Utils\BitmapUtils.cpp	/^    DWORD       dwFlags;                \/\/ pixel format flags$/;"	m	struct:TEX_dds_pixelformat	file:
dwFourCC	.\Utils\BitmapUtils.cpp	/^    char        dwFourCC[4];               \/\/ (FOURCC code)		D X T 3 in memory string.$/;"	m	struct:TEX_dds_pixelformat	file:
dwGBitMask	.\Utils\BitmapUtils.cpp	/^	DWORD		dwGBitMask;             \/\/ mask for green bits$/;"	m	struct:TEX_dds_pixelformat	file:
dwGBitMask	.\XPTools\DDSTool.cpp	/^        unsigned int dwGBitMask;                        \/*!< mask for green bits *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwHeaderSize	.\XPTools\DDSTool.cpp	/^        unsigned int dwHeaderSize;                      \/*!< size of the structure *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwHeight	.\Utils\BitmapUtils.cpp	/^    DWORD               dwHeight;               \/\/ height of surface to be created$/;"	m	struct:TEX_dds_desc	file:
dwHeight	.\XPTools\DDSTool.cpp	/^        unsigned int dwHeight;                          \/*!< height of surface to be created *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwLinearSize	.\Utils\BitmapUtils.cpp	/^	DWORD				dwLinearSize;           \/\/ Formless late-allocated optimized surface size$/;"	m	struct:TEX_dds_desc	file:
dwMagic	.\Utils\BitmapUtils.cpp	/^	char				dwMagic[4];				\/\/ D D S <space> sequential string in memory.  This is not REALLY in the struct, but good enough for me.$/;"	m	struct:TEX_dds_desc	file:
dwMipMapCount	.\Utils\BitmapUtils.cpp	/^	DWORD				dwMipMapCount;          \/\/ number of mip-map levels requestde$/;"	m	struct:TEX_dds_desc	file:
dwMipMapCount	.\XPTools\DDSTool.cpp	/^        unsigned int dwMipMapCount;                     \/*!< number of mip-map levels requested *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwNumSurfs	.\XPTools\DDSTool.cpp	/^        unsigned int dwNumSurfs;                        \/*!< the number of surfaces present in the pvr *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwPVR	.\XPTools\DDSTool.cpp	/^        unsigned int dwPVR;                             \/*!< magic number identifying pvr file *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwRBitMask	.\Utils\BitmapUtils.cpp	/^	DWORD		dwRBitMask;             \/\/ mask for red bit$/;"	m	struct:TEX_dds_pixelformat	file:
dwRBitMask	.\XPTools\DDSTool.cpp	/^        unsigned int dwRBitMask;                        \/*!< mask for red bit *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwRGBAlphaBitMask	.\Utils\BitmapUtils.cpp	/^	DWORD		dwRGBAlphaBitMask;      \/\/ mask for alpha channel$/;"	m	struct:TEX_dds_pixelformat	file:
dwRGBBitCount	.\Utils\BitmapUtils.cpp	/^	DWORD		dwRGBBitCount;          \/\/ how many bits per pixel$/;"	m	struct:TEX_dds_pixelformat	file:
dwReserved1	.\Utils\BitmapUtils.cpp	/^	DWORD               dwReserved1[11];        \/\/$/;"	m	struct:TEX_dds_desc	file:
dwReserved2	.\Utils\BitmapUtils.cpp	/^    DWORD               dwReserved2;			\/\/$/;"	m	struct:TEX_dds_desc	file:
dwSize	.\Utils\BitmapUtils.cpp	/^    DWORD               dwSize;                 \/\/ size of the DDSURFACEDESC structure		(Must be 124)$/;"	m	struct:TEX_dds_desc	file:
dwSize	.\Utils\BitmapUtils.cpp	/^    DWORD       dwSize;                 \/\/ size of structure (must be 32)$/;"	m	struct:TEX_dds_pixelformat	file:
dwTextureDataSize	.\XPTools\DDSTool.cpp	/^        unsigned int dwTextureDataSize;                                 \/*!< Total size in bytes *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwWidth	.\Utils\BitmapUtils.cpp	/^    DWORD               dwWidth;                \/\/ width of input surface$/;"	m	struct:TEX_dds_desc	file:
dwWidth	.\XPTools\DDSTool.cpp	/^        unsigned int dwWidth;                           \/*!< width of input surface *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dwpfFlags	.\XPTools\DDSTool.cpp	/^        unsigned int dwpfFlags;                         \/*!< pixel format flags *\/$/;"	m	struct:PVR_Header_Texture_TAG	file:
dx	.\GUI\GUI_Fonts.cpp	/^	float	dx;					\/\/ How much do we move our char position to the left and up from the base line location to draw.$/;"	m	struct:OGL_char_info	file:
dx	.\UI\FontMgr.cpp	/^	int		dx[256];			\/\/ Horizontal glyph adjustment$/;"	m	struct:FontInfo_t	file:
dx	.\Utils\CompGeomDefs2.h	/^	double	dx;$/;"	m	struct:Vector2
dx	.\Utils\CompGeomDefs3.h	/^	double	dx;$/;"	m	struct:Vector3
dy	.\GUI\GUI_Fonts.cpp	/^	float	dy;					\/\/ (Obvious being the lower left corner of the bitmap on the baseline and left at the cursor pos.)$/;"	m	struct:OGL_char_info	file:
dy	.\UI\FontMgr.cpp	/^	int		dy[256];			\/\/ Vertical glyph adjustment$/;"	m	struct:FontInfo_t	file:
dy	.\Utils\CompGeomDefs2.h	/^	double	dy;$/;"	m	struct:Vector2
dy	.\Utils\CompGeomDefs3.h	/^	double	dy;$/;"	m	struct:Vector3
dz	.\Utils\CompGeomDefs3.h	/^	double	dz;$/;"	m	struct:Vector3
e	.\OneOffs\gen_roads.cpp	/^	road_elem * 	e;$/;"	m	class:road	file:
e	.\OneOffs\gen_roads.cpp	/^	road_elem * e;$/;"	m	class:road_pylons	file:
e	.\RenderFarmUI\RF_SelectionTool.cpp	/^	Pmwx::Halfedge_handle	e;$/;"	m	struct:NearestEdgeToPt_t	file:
e	.\Utils\SQLUtils.h	/^	E		e;$/;"	m	struct:sql_row5
e	.\XESCore\Hydro2.cpp	/^	double n,s,e,w;$/;"	m	struct:no_sharp_pt	file:
e1	.\Utils\Skeleton.cpp	/^	SK_Edge *			e1;$/;"	m	struct:SK_Event	file:
e2	.\Utils\Skeleton.cpp	/^	SK_Edge *			e2;$/;"	m	struct:SK_Event	file:
e3	.\Utils\Skeleton.cpp	/^	SK_Edge *			e3;		\/\/ If we are a reflex event this will be the edge.$/;"	m	struct:SK_Event	file:
east	.\RawImport\gshhs.h	/^	int west, east, south, north;	\/* min\/max extent in micro-degrees *\/$/;"	m	struct:GSHHS
east	.\RenderFarmUI\RF_Import.cpp	/^	float		east;$/;"	m	struct:RF_ImportState_t	file:
eat_output_message	.\Utils\BitmapUtils.cpp	/^eat_output_message (j_common_ptr cinfo)$/;"	f
edg_index	.\VPF\VPFImport.cpp	/^	int		edg_index;$/;"	m	struct:VPF_Node	file:
edg_index	.\VPF\VPFImport.cpp	/^	vector<int>	edg_index;$/;"	m	struct:VPF_Face	file:
edge_angle	.\XESCore\DSFBuilder.cpp	/^double edge_angle(const CDT::Edge& e1, const CDT::Edge& e2)$/;"	f
edge_collector_t	.\XESCore\MapHelpers.h	/^	edge_collector_t() : base() { }$/;"	f	class:edge_collector_t
edge_collector_t	.\XESCore\MapHelpers.h	/^	edge_collector_t(Arr& a) : base(a) { }$/;"	f	class:edge_collector_t
edge_collector_t	.\XESCore\MapHelpers.h	/^class edge_collector_t : public data_preserver_t<Arr> {$/;"	c
edge_contains_f	.\XESCore\Zoning.cpp	/^	edge_contains_f(FaceNode_t * f) : f_(f) { }$/;"	f	struct:edge_contains_f
edge_contains_f	.\XESCore\Zoning.cpp	/^struct edge_contains_f {$/;"	s	file:
edge_convex	.\XESCore\DSFBuilder.cpp	/^bool edge_convex(const CDT::Edge& e1, const CDT::Edge& e2)$/;"	f
edge_cost_func	.\XESCore\Zoning.cpp	/^float	edge_cost_func(EdgeNode_t * en)$/;"	f
edge_flags	.\XESCore\MeshDefs.h	/^	char			edge_flags[3];$/;"	m	struct:MeshFaceInfo
edge_for_road	.\XESCore\BlockFill.cpp	/^static EdgeRule_t * edge_for_road(const pair<int,bool>& road_type, int zoning, int variant, float height)$/;"	f	file:
edge_hash_map	.\XESCore\DSFBuilder.cpp	/^typedef hash_map<CDT::Edge, CDT::Edge, hash_edge> edge_hash_map;$/;"	t	file:
edge_hash_map	.\XESCore\DSFBuilder.cpp	/^typedef hash_map<CDT::Edge,CDT::Edge>	edge_hash_map;$/;"	t	file:
edge_info_map	.\XESCore\DSFBuilder.cpp	/^typedef hash_map<CDT::Edge, int, hash_edge> edge_info_map;$/;"	t	file:
edge_info_map	.\XESCore\DSFBuilder.cpp	/^typedef hash_map<CDT::Edge, int>			edge_info_map;$/;"	t	file:
edge_len	.\XESCore\DSFBuilder.cpp	/^double edge_len(const CDT::Edge& e)$/;"	f
edge_light_code	.\XESCore\AptDefs.h	/^	int			edge_light_code;$/;"	m	struct:AptHelipad_t
edge_light_code	.\XESCore\AptDefs.h	/^	int			edge_light_code;$/;"	m	struct:AptRunway_t
edge_lites	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum			edge_lites;$/;"	m	class:WED_Runway
edge_lites_code1	.\XESCore\AptDefs.h	/^	int			edge_lites_code1;$/;"	m	struct:AptPavement_t
edge_lites_code2	.\XESCore\AptDefs.h	/^	int			edge_lites_code2;$/;"	m	struct:AptPavement_t
edge_next	.\XESCore\DSFBuilder.cpp	/^CDT::Edge edge_next(const CDT::Edge& e)$/;"	f
edge_next_twin	.\XESCore\DSFBuilder.cpp	/^CDT::Edge edge_next_twin(const CDT::Edge& e)$/;"	f
edge_ok_for_ag	.\XESCore\BlockFill.cpp	/^bool edge_ok_for_ag(const Point2& i, const Point2& j, CoordTranslator2& c, const DEMGeo& idx)$/;"	f
edge_rule	.\XESCore\BlockDefs.h	/^	EdgeRule_t *	edge_rule;		\/\/ AG rule for side outgoing or null if no AG.$/;"	m	struct:block_pt
edge_twin	.\XESCore\DSFBuilder.cpp	/^CDT::Edge edge_twin(const CDT::Edge& e)$/;"	f
edge_twin_next	.\XESCore\DSFBuilder.cpp	/^CDT::Edge edge_twin_next(const CDT::Edge& e)$/;"	f
edge_type	.\XESCore\BlockDefs.h	/^	pair<int,bool>	edge_type;		\/\/ Edge type OUTGOING from this point.  Flag is true if reversed (twin is source)$/;"	m	struct:block_pt
edgelights	.\WEDEntities\WED_Helipad.h	/^	WED_PropIntEnum		edgelights;$/;"	m	class:WED_Helipad
edges	.\WEDCore\WED_Routing.h	/^	vector<WED_route_edge_t *>	edges;$/;"	m	struct:WED_route_node_t
edges	.\WEDCore\WED_Routing.h	/^	vector<WED_route_edge_t *>	edges;$/;"	m	struct:WED_route_t
edges	.\XESCore\AptDefs.h	/^	vector<AptRouteEdge_t>		edges;$/;"	m	struct:AptNetwork_t
edges	.\XESCore\MeshAlgs.cpp	/^	vector<mesh_match_edge_t>	edges;$/;"	m	struct:mesh_match_t	file:
edges	.\XESCore\Zoning.cpp	/^	EdgeNode_t *	edges;$/;"	m	struct:FaceGraph_t	file:
edges	.\XESCore\Zoning.cpp	/^	list<EdgeNode_t *>		edges;$/;"	m	struct:FaceNode_t	file:
edgesOpposite	.\XESCore\WTPM.h	/^	WTPM_LineVector			edgesOpposite;	\/\/ Have us as right poly$/;"	m	struct:WTPM_Face
edgesSame	.\XESCore\WTPM.h	/^	WTPM_LineVector			edgesSame;		\/\/ Have us as left poly$/;"	m	struct:WTPM_Face
edges_level_any	.\XESCore\MeshConformer.h	/^  Edges_level_any edges_level_any;$/;"	m	class:CGAL::Triangulation_conformer_any_2
edges_match	.\XESCore\BlockFill.cpp	/^static bool edges_match(Block_2::Halfedge_handle a, Block_2::Halfedge_handle b)$/;"	f	file:
editCmd_ClearArea	.\RenderFarmUI\RF_EditCommands.cpp	/^	editCmd_ClearArea,$/;"	e	enum:__anon74	file:
editCmd_Count	.\RenderFarmUI\RF_EditCommands.cpp	/^	editCmd_Count$/;"	e	enum:__anon74	file:
editCmd_InsertMap	.\RenderFarmUI\RF_EditCommands.cpp	/^	editCmd_InsertMap,$/;"	e	enum:__anon74	file:
editCmd_MakeWet	.\RenderFarmUI\RF_EditCommands.cpp	/^	editCmd_MakeWet,$/;"	e	enum:__anon74	file:
editCmd_SimplifyMap	.\RenderFarmUI\RF_EditCommands.cpp	/^	editCmd_SimplifyMap,$/;"	e	enum:__anon74	file:
editor_recursion	.\AC3DPlugins\obj_editor.cpp	/^static ACObject * editor_recursion = NULL;$/;"	v	file:
elem_count	.\Obj\XObjDefs.h	/^	int				elem_count;$/;"	m	struct:cmd_info
elementCount	.\VPF\VPFTable.h	/^	int			elementCount;$/;"	m	struct:VPF_ColumnDef
elev	.\XESCore\TensorRoads.cpp	/^	const DEMGeo *	elev;$/;"	m	struct:Tensor_info	file:
elev_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	elev_min;	float	elev_max;$/;"	m	struct:RF_WizardParams	file:
elev_max	.\XESCore\DEMTables.h	/^	float			elev_max;$/;"	m	struct:NaturalTerrainRule_t
elev_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	elev_min;	float	elev_max;$/;"	m	struct:RF_WizardParams	file:
elev_min	.\XESCore\DEMTables.h	/^	float			elev_min;$/;"	m	struct:NaturalTerrainRule_t
elev_range_max	.\XESCore\DEMTables.h	/^	float			elev_range_max;$/;"	m	struct:NaturalTerrainRule_t
elev_range_min	.\XESCore\DEMTables.h	/^	float			elev_range_min;$/;"	m	struct:NaturalTerrainRule_t
elevate_segments_to	.\XESCore\NetAlgs.cpp	/^static void elevate_segments_to(GISNetworkSegmentVector& v, double h)$/;"	f	file:
elevation	.\Env\Persistence.h	/^	double		elevation;$/;"	m	struct:VertexInfo
elevation	.\Env\Persistence.h	/^	double	elevation;$/;"	m	struct:ObjectInfo
elevation	.\WEDEntities\WED_Airport.h	/^	WED_PropDoubleTextMeters	elevation;$/;"	m	class:WED_Airport
elevation_ft	.\XESCore\AptDefs.h	/^	int					elevation_ft;$/;"	m	struct:AptInfo_t
elevation_weight	.\XESCore\TensorRoads.h	/^	float		elevation_weight;$/;"	m	struct:RoadPrefs_t
eliminate_isolated	.\XESCore\Hydro2.cpp	/^static void eliminate_isolated(DEMGeo& dem, int keep_v, int null_v, int min_size_pix)$/;"	f	file:
embed_props_t	.\Obj\XObjWriteEmbedded.cpp	/^struct	embed_props_t {$/;"	s	file:
emission	.\Obj\XObjBuilder.h	/^	float		emission[3];		float	o_emission[3];$/;"	m	class:XObjBuilder
emit	.\OneOffs\gen_roads.cpp	/^	virtual void	emit(FILE * fi, float r1, float r2,  float w, float d, tex_info * tex)$/;"	f	class:road_composite
emit	.\OneOffs\gen_roads.cpp	/^	virtual void	emit(FILE * fi, float r1, float r2, float w, float d, tex_info * t)$/;"	f	class:road_deck
emit	.\OneOffs\gen_roads.cpp	/^	virtual void	emit(FILE * fi, float r1, float r2, float w, float d, tex_info * t)$/;"	f	class:road_pylons
emit	.\OneOffs\gen_roads.cpp	/^	virtual void	emit(FILE * fi, float r1, float r2, float w, float d, tex_info * t)$/;"	f	class:road_underside
emit	.\OneOffs\gen_roads.cpp	/^	virtual void	emit(FILE * fi, float r1, float r2, float w,float d,tex_info * t) { }$/;"	f	class:road_spacer
emit	.\OneOffs\gen_roads.cpp	/^	virtual void	emit(FILE * fi, float r1, float r2, float w,float d,tex_info * t)$/;"	f	class:road_blade
emit	.\OneOffs\gen_roads.cpp	/^	void emit()$/;"	f	class:road
emit_pair	.\XESCore\BlockFill.cpp	/^void			candy_bar::emit_pair(vector<Block_2::X_monotone_curve_2>& curves, const Vector2& va, const Vector2& vb, int a1, int b1, int a2, int b2, int c1, int c2)$/;"	f	class:candy_bar
empty	.\DSF\tri_stripper_101\graph_array.h	/^inline bool graph_array<nodetype, arctype>::empty() const {$/;"	f	class:common_structures::graph_array
empty	.\DSF\tri_stripper_101\heap_array.h	/^inline bool heap_array<T, CmpT>::empty() const {$/;"	f	class:common_structures::heap_array
empty	.\Utils\RLERegion.cpp	/^bool	RLERegion::empty(void) const$/;"	f	class:RLERegion
empty	.\Utils\STLUtils.h	/^	bool			empty(void) const$/;"	f	class:pqueue
empty	.\Utils\UTL_interval.h	/^bool	UTL_interval<T>::empty(void) const$/;"	f	class:UTL_interval
empty	.\Utils\point_index.h	/^bool		spatial_index_2<Traits>::empty(void) const$/;"	f	class:spatial_index_2
empty	.\XESCore\DEMDefs.h	/^	bool empty(void) const { return size_ == 0; }$/;"	f	struct:address_fifo
empty	.\lib_json\src\lib_json\json_value.cpp	/^Value::empty() const$/;"	f	class:Json::Value
emptyArray_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value emptyArray_;$/;"	m	struct:ValueTest	file:
emptyObject_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value emptyObject_;$/;"	m	struct:ValueTest	file:
emptyString_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value emptyString_;$/;"	m	struct:ValueTest	file:
empty_begin	.\Utils\UTL_interval.h	/^typename UTL_interval<T>::const_iterator	UTL_interval<T>::empty_begin() const$/;"	f	class:UTL_interval
empty_end	.\Utils\UTL_interval.h	/^typename UTL_interval<T>::const_iterator	UTL_interval<T>::empty_end() const$/;"	f	class:UTL_interval
empty_node	.\Utils\QuadTree.h	/^bool QuadTree<__T, __N>::empty_node(Node * n)$/;"	f	class:QuadTree
enableYAMLCompatibility	.\lib_json\src\lib_json\json_writer.cpp	/^FastWriter::enableYAMLCompatibility()$/;"	f	class:Json::FastWriter
enabled	.\GUI\GUI_Window.cpp	/^		int		enabled;$/;"	m	struct:CmdEval_t	file:
enabled	.\WEDNetwork\WED_NWLinkAdapter.h	/^    int     enabled;$/;"	m	struct:WED_NWCamera_t
enabled	.\XPTools\XGrinderShell.cpp	/^	int						enabled;			\/\/ 1 if enabled, 0 if not.$/;"	m	struct:flag_item_info	file:
encode	.\DSF\DSFPointPool.h	/^inline bool DSFTuple::encode(const DSFTuple& offset, const DSFTuple& scale)$/;"	f	class:DSFTuple
encode	.\DSF\dsflib_013005\DSFPointPool.cpp	/^bool DSFTuple::encode(const DSFTuple& offset, const DSFTuple& scale)$/;"	f	class:DSFTuple
encode32	.\DSF\DSFPointPool.h	/^inline bool DSFTuple::encode32(const DSFTuple& offset, const DSFTuple& scale)$/;"	f	class:DSFTuple
encode32	.\DSF\dsflib_013005\DSFPointPool.cpp	/^bool DSFTuple::encode32(const DSFTuple& offset, const DSFTuple& scale)$/;"	f	class:DSFTuple
encode_ag_height	.\XESCore\BlockFill.cpp	/^inline void		encode_ag_height(unsigned short& param, float h)$/;"	f
encodeblock	.\WEDImportExport\WED_GatewayExport.cpp	/^static void encodeblock( unsigned char in[3], unsigned char out[4], int len )$/;"	f	file:
encodingTable	.\Network\b64.c	/^static char encodingTable [64] = {$/;"	v	file:
end	.\DSF\DSFPointPool.h	/^	inline const double * end() const 		{ return mData+mLen;}$/;"	f	class:DSFTuple
end	.\DSF\DSFPointPool.h	/^	inline double * end() 					{ return mData+mLen;}$/;"	f	class:DSFTuple
end	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline const double * end() const { return mData+mLen; }$/;"	f	class:DSFTuple
end	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline double * end() { return mData+mLen; }$/;"	f	class:DSFTuple
end	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::const_node_iterator graph_array<nodetype, arctype>::end() const {$/;"	f	class:common_structures::graph_array
end	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::node_iterator graph_array<nodetype, arctype>::end() {$/;"	f	class:common_structures::graph_array
end	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned char *		end;$/;"	m	struct:mem_block	file:
end	.\OneOffs\gen_roads10.h	/^	iterator end() { return b.end(); }$/;"	f	class:road_map
end	.\Tiger\TIGERTypes.h	/^	RawCoordKey		end;$/;"	m	struct:ChainInfo_t
end	.\Utils\MemFileUtils.h	/^	const char *	end;$/;"	m	struct:MFScanner
end	.\Utils\STLUtils.h	/^	typename T::const_iterator		end;$/;"	m	struct:const_sequence_for_container
end	.\Utils\STLUtils.h	/^	typename T::iterator				end;$/;"	m	struct:sequence_for_container
end	.\Utils\UTL_interval.h	/^typename UTL_interval<T>::const_iterator	UTL_interval<T>::end() const$/;"	f	class:UTL_interval
end	.\Utils\XChunkyFileUtils.h	/^	char *	end;$/;"	m	struct:XSpan
end	.\XESCore\BezierApprox.cpp	/^	Iter end;$/;"	m	struct:seq_for_container	file:
end	.\XESCore\DEMDefs.h	/^	const_iterator	end(void) const { return mData + mWidth * mHeight; }$/;"	f	struct:DEMGeo
end	.\XESCore\DEMDefs.h	/^	iterator		end(void) { return mData + mWidth * mHeight; }$/;"	f	struct:DEMGeo
end	.\XPTools\Env2DSF.cpp	/^	int		end;$/;"	m	struct:NetworkSeg_t	file:
end	.\lib_json\src\lib_json\json_value.cpp	/^Value::end() const$/;"	f	class:Json::Value
end	.\lib_json\src\lib_json\json_value.cpp	/^Value::end()$/;"	f	class:Json::Value
endNode	.\DSF\DSFLibWrite.cpp	/^		int						endNode;			\/\/ accumulating data.$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
endNode	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						endNode;			\/\/ accumulating data.$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
endNode	.\XESCore\WTPM.h	/^	WTPM_Node *				endNode;$/;"	m	struct:WTPM_Line
endNodeKey	.\SDTS\SDTSReadTVP.cpp	/^	ForeignKey				endNodeKey;$/;"	m	struct:LineRecord	file:
end_	.\lib_json\include\json\reader.h	/^         Location end_;$/;"	m	class:Json::Reader::Token
end_	.\lib_json\include\json\reader.h	/^      Location end_;$/;"	m	class:Json::Reader
end_	.\lib_json\src\lib_json\json_batchallocator.h	/^      AllocatedType *end_;$/;"	m	struct:Json::BatchAllocator::BatchInfo
end_cnd_index	.\VPF\VPFImport.cpp	/^	int		end_cnd_index;$/;"	m	struct:VPF_Line	file:
end_composite	.\OneOffs\gen_roads.cpp	/^void 	end_composite()	{	road_composite * c = dynamic_cast<road_composite*>(road_stack.back()); road_stack.pop_back(); get_top()->accept(c); }$/;"	f
end_junction	.\XESCore\NetPlacement.h	/^	Net_JunctionInfo_t *			end_junction;$/;"	m	struct:Net_ChainInfo_t
end_layer	.\XESCore\NetPlacement.h	/^	int								end_layer;					$/;"	m	struct:Net_ChainInfo_t
end_match	.\WEDImportExport\WED_DSFImport.cpp	/^inline bool end_match(const char * str, const char * suf)$/;"	f
end_mode	.\XPTools\TaxiMaker.cpp	/^	int						end_mode;	\/\/ Mode mode are we in after this?$/;"	m	struct:taxi_element_t	file:
end_node_pt	.\VPF\VPFImport.cpp	/^	Point2	end_node_pt;			\/\/ Copy it from the lines via this.$/;"	m	struct:VPF_Line	file:
end_p	.\GUI\GUI_Resources.cpp	/^	const char * end_p;$/;"	m	struct:res_struct	file:
end_time_zulu	.\WEDEntities\WED_ATCTimeRule.h	/^	WED_PropIntText		end_time_zulu;$/;"	m	class:WED_ATCTimeRule
end_zulu	.\XESCore\AptDefs.h	/^	int				end_zulu;$/;"	m	struct:AptTimeRule_t
endian	.\VPF\VPFTable.h	/^	PlatformType			endian;$/;"	m	struct:VPF_TableDef
ends	.\Utils\Skeleton.cpp	/^	Segment2		ends;				\/\/	Original end-points - we need this to negate invalid edits.$/;"	m	struct:SK_Edge	file:
ends	.\XESCore\AptDefs.h	/^	Segment2	ends;	\/\/ Endpoint locations$/;"	m	struct:AptPavement_t
ends	.\XESCore\AptDefs.h	/^	Segment2	ends;$/;"	m	struct:AptRunway_t
ends	.\XESCore\AptDefs.h	/^	Segment2	ends;$/;"	m	struct:AptSealane_t
ends_in_crlf	.\AC3DPlugins\obj_model.cpp	/^bool	ends_in_crlf(const string& x)$/;"	f
enqueue	.\XESCore\Zoning.cpp	/^void			FaceGraph_t::enqueue(EdgeNode_t * en, float (* cost_func)(EdgeNode_t * en))$/;"	f	class:FaceGraph_t
enquote	.\GUI\GUI_Prefs.cpp	/^void	enquote(string& s)$/;"	f
ent	.\OneOffs\osm2shape.c	/^	entity_t	ent;$/;"	m	struct:__anon65	file:
ent	.\OneOffs\osm2shape.c	/^	entity_t	ent;$/;"	m	struct:__anon66	file:
ent	.\OneOffs\osm2shape.c	/^	entity_t	ent;$/;"	m	struct:rel_info_tag	file:
ent_Atomic	.\WEDMap\WED_HandleToolBase.h	/^		ent_Atomic,					\/\/ Take or leave it as a whole.$/;"	e	enum:WED_HandleToolBase::EntityHandling_t
ent_AtomicOrContainer	.\WEDMap\WED_HandleToolBase.h	/^		ent_AtomicOrContainer		\/\/ Try whole obj.  If it fails, try kids.$/;"	e	enum:WED_HandleToolBase::EntityHandling_t
ent_Container	.\WEDMap\WED_HandleToolBase.h	/^		ent_Container,				\/\/ Iterate over kids.$/;"	e	enum:WED_HandleToolBase::EntityHandling_t
ent_Skip	.\WEDMap\WED_HandleToolBase.h	/^		ent_Skip,					\/\/ Skip it, don't look at kids.$/;"	e	enum:WED_HandleToolBase::EntityHandling_t
ent_compare	.\OneOffs\osm2shape.c	/^int ent_compare(const void * a, const void * b)$/;"	f
entity_t	.\OneOffs\osm2shape.c	/^} entity_t;$/;"	t	typeref:struct:__anon64	file:
enum_Info	.\WEDCore\WED_EnumSystem.cpp	/^struct enum_Info {$/;"	s	file:
enum_begin	.\WEDCore\WED_EnumSystem.cpp	/^	int	enum_begin;		\/\/ First enum$/;"	m	struct:domain_Info	file:
enum_end	.\WEDCore\WED_EnumSystem.cpp	/^	int enum_end;		\/\/ Last enum + 1$/;"	m	struct:domain_Info	file:
enum_map_t	.\WEDCore\WED_EnumSystem.h	/^typedef	map<int,int>	enum_map_t;$/;"	t
enum_sample_tri	.\XESCore\MeshAlgs.cpp	/^float enum_sample_tri(DEMGeo& d, double x0, double y0, double x1, double y1, double x2, double y2, double center_x, double center_y)$/;"	f
epsi	.\XESCore\DSFBuilder.cpp	270;"	d	file:
equal_keys	.\OneOffs\osm2shape.c	/^int equal_keys(const entity_t * a, const entity_t * b)$/;"	f
equip_strings	.\XESCore\AptIO.cpp	/^const char * equip_strings[] = { "heavy", "jets", "turboprops", "props", "helos", 0 };$/;"	v
equip_type	.\WEDEntities\WED_RampPosition.h	/^	WED_PropIntEnumBitfield	equip_type;$/;"	m	class:WED_RampPosition
equip_type	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnumBitfield	equip_type;$/;"	m	class:WED_CreatePointTool
equipment	.\XESCore\AptDefs.h	/^	int				equipment;$/;"	m	struct:AptRunwayRule_t
equipment	.\XESCore\AptDefs.h	/^	int			equipment;$/;"	m	struct:AptGate_t
erase	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::erase(size_t i) {$/;"	f	class:common_structures::heap_array
erase	.\Utils\STLUtils.h	/^	bool			erase(const value_type& v)$/;"	f	class:pqueue
erase_arc	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::out_arc_iterator graph_array<nodetype, arctype>::erase_arc(const out_arc_iterator & Pos) {$/;"	f	class:common_structures::graph_array
erase_arcs	.\DSF\tri_stripper_101\graph_array.h	/^inline void graph_array<nodetype, arctype>::erase_arcs() {$/;"	f	class:common_structures::graph_array
erase_arcs	.\DSF\tri_stripper_101\graph_array.h	/^inline void graph_array<nodetype, arctype>::erase_arcs(const node_iterator & Initial) {$/;"	f	class:common_structures::graph_array
erased	.\XPTools\Env2DSF.cpp	/^	bool	erased;$/;"	m	struct:NetworkSeg_t	file:
erng_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	erng_min;	float	erng_max;$/;"	m	struct:RF_WizardParams	file:
erng_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	erng_min;	float	erng_max;$/;"	m	struct:RF_WizardParams	file:
err	.\WEDCore\WED_XMLReader.h	/^	string					err;$/;"	m	class:WED_XMLReader
err	.\XESCore\BezierApprox.cpp	/^	double						err;$/;"	m	struct:possible_approx_t	file:
err_code	.\WEDCore\WED_Sign_Parser.h	/^	parser_error_t err_code;$/;"	m	struct:parser_error_info
err_f	.\MeshTool\MeshTool_Create.cpp	/^static MT_Error_f						err_f=NULL;$/;"	v	file:
err_f	.\XESCore\MeshSimplify.h	/^	mesh_error_f	err_f;$/;"	m	class:MeshSimplify
err_fi	.\DSFTools\DSFToolCmdLine.cpp	/^FILE * err_fi = stdout;$/;"	v
error	.\SDTS\SDTSRead.cpp	/^	bool	error(void) { return ifs.bad(); }$/;"	f	struct:SDTSModuleIterator::SDTSModuleIteratorImp
error_for_approx	.\XESCore\BezierApprox.cpp	/^double error_for_approx(PolyLineIndex& index, T s2_begin, T s2_end, double max_err)$/;"	f
error_for_approx	.\XESCore\BezierApprox.cpp	/^double error_for_approx(T1 s1_begin, T1 s1_end, T2 s2_begin, T2 s2_end)$/;"	f
error_func	.\Utils\QuiltUtils.h	/^inline unsigned long error_func(const unsigned long * c1, const unsigned long * c2)$/;"	f
errors	.\WEDCore\WED_Sign_Parser.h	/^	vector<parser_error_info> errors;$/;"	m	struct:parser_out_info
errors_	.\lib_json\include\json\reader.h	/^      Errors errors_;$/;"	m	class:Json::Reader
eval_face	.\XESCore\GreedyMesh.cpp	/^struct	eval_face {$/;"	s	file:
eval_panel_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc eval_panel_dialog {} {$/;"	p
evaluate_he	.\XESCore\Zoning.cpp	/^int evaluate_he(Pmwx::Halfedge_handle he)$/;"	f
events	.\Utils\Skeleton.cpp	/^	set<SK_Event *>	events;$/;"	m	struct:SK_Edge	file:
exclusions	.\WEDEntities\WED_ExclusionZone.h	/^	WED_PropIntEnumSet	exclusions;$/;"	m	class:WED_ExclusionZone
exclusions	.\WEDImportExport\WED_DSFExport.cpp	/^	map<int, vector<pair<string, string> > > exclusions;$/;"	m	struct:DSF_ResourceTable	file:
exclusive	.\Interfaces\IPropertyObject.h	/^	int				exclusive;$/;"	m	struct:PropertyInfo_t
exclusive	.\WEDCore\WED_PropertyHelper.h	/^	int						exclusive;$/;"	m	class:WED_PropIntEnumSetFilter
exclusive	.\WEDCore\WED_PropertyHelper.h	/^	int						exclusive;$/;"	m	class:WED_PropIntEnumSetUnion
exclusive	.\WEDCore\WED_PropertyHelper.h	/^	int			exclusive;$/;"	m	class:WED_PropIntEnumSet
exists	.\WEDCore\WED_Properties.cpp	/^int	WED_Properties::exists(const char * key)$/;"	f	class:WED_Properties
exp_bounds	.\OneOffs\osm_tile.c	/^static int exp_bounds[4] = { -180, -90, 179, 89 };$/;"	v	file:
exp_mode	.\OneOffs\osm2shape.c	/^static int exp_mode = MODE_WAYS;$/;"	v	file:
exp_mode	.\XPTools\DDSTool.cpp	/^static int exp_mode = pvr_2;$/;"	v	file:
expand	.\Utils\CompGeomDefs2.h	/^	void		expand(double v) { p1.x_ -= v; p1.y_ -= v; p2.x_ += v; p2.y_ += v; }$/;"	f	struct:Bbox2
expand	.\Utils\CompGeomDefs2.h	/^	void		expand(double vx, double vy) { p1.x_ -= vx; p1.y_ -= vy; p2.x_ += vx; p2.y_ += vy; }$/;"	f	struct:Bbox2
expectToken	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::expectToken( TokenType type, Token &token, const char *message )$/;"	f	class:Json::Reader
export_BMP	.\RenderFarmUI\RF_Export.cpp	/^	export_BMP,$/;"	e	enum:__anon75	file:
export_Div	.\RenderFarmUI\RF_Export.cpp	/^	export_Div,$/;"	e	enum:__anon75	file:
export_PNG	.\RenderFarmUI\RF_Export.cpp	/^	export_PNG=0,$/;"	e	enum:__anon75	file:
export_Raw16BE	.\RenderFarmUI\RF_Export.cpp	/^	export_Raw16BE,$/;"	e	enum:__anon75	file:
export_Raw16LE	.\RenderFarmUI\RF_Export.cpp	/^	export_Raw16LE,$/;"	e	enum:__anon75	file:
export_Raw32BE	.\RenderFarmUI\RF_Export.cpp	/^	export_Raw32BE,$/;"	e	enum:__anon75	file:
export_Raw32LE	.\RenderFarmUI\RF_Export.cpp	/^	export_Raw32LE,$/;"	e	enum:__anon75	file:
export_Raw8	.\RenderFarmUI\RF_Export.cpp	/^	export_Raw8,$/;"	e	enum:__anon75	file:
export_RawFloatBE	.\RenderFarmUI\RF_Export.cpp	/^	export_RawFloatBE$/;"	e	enum:__anon75	file:
export_RawFloatLE	.\RenderFarmUI\RF_Export.cpp	/^	export_RawFloatLE,$/;"	e	enum:__anon75	file:
export_roads	.\XESCore\DSFBuilder.h	/^	int	export_roads;$/;"	m	struct:DSFBuildPrefs_t
export_type	.\XESCore\NetPlacement.h	/^	int								export_type;				\/\/ The DSF sub-type x-plane sees$/;"	m	struct:Net_ChainInfo_t
export_type	.\XESCore\NetTables.h	/^	int			export_type;$/;"	m	struct:BridgeInfo
export_type_draped	.\XESCore\NetTables.h	/^	int			export_type_draped;$/;"	m	struct:NetRepInfo
export_value	.\WEDCore\WED_EnumSystem.cpp	/^	int		export_value;$/;"	m	struct:enum_Info	file:
expr_	.\lib_json\src\test_lib_json\jsontest.h	/^      const char *expr_;$/;"	m	struct:JsonTest::PredicateContext
expr_	.\lib_json\src\test_lib_json\jsontest.h	/^      std::string expr_;$/;"	m	class:JsonTest::Failure
ext	.\WEDCore\WED_Package.cpp	/^static const char * ext = NULL;$/;"	v	file:
extend_box	.\DSF\DSFLibWrite.cpp	/^static void extend_box(double box[4], double x, double y)$/;"	f	file:
extend_x	.\Utils\RLERegion.cpp	/^void	RLERegion::extend_x(int x1, int x2)$/;"	f	class:RLERegion
extend_y	.\Utils\RLERegion.cpp	/^void	RLERegion::extend_y(int y1, int y2)$/;"	f	class:RLERegion
extent	.\Utils\QuadTree.h	/^	KeyType		extent;$/;"	m	class:QuadTree
external_fa	.\Utils\unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:unz_file_info_s
external_fa	.\Utils\zip.h	/^    uLong       external_fa;    \/* external file attributes        4 bytes *\/$/;"	m	struct:__anon106
extra_	.\lib_json\include\json\reader.h	/^         Location extra_;$/;"	m	class:Json::Reader::ErrorInfo
extract_ccb	.\XESCore\BlockFill.cpp	/^void extract_ccb(Block_2::Ccb_halfedge_const_circulator circ, Polygon2& out_poly, Polygon2& out_poly_mtr, CoordTranslator2& translator)$/;"	f
extract_features	.\XESCore\BlockFill.cpp	/^void	extract_features($/;"	f
extrap	.\AC3DPlugins\obj_anim.cpp	/^inline float	extrap(float x1, float y1, float x2, float y2, float x)$/;"	f
extrap	.\Obj\ObjDraw.cpp	/^inline float	extrap(float x1, float y1, float x2, float y2, float x)$/;"	f
extrap	.\OneOffs\gen_roads.cpp	/^inline float extrap(float x1, float y1, float x2, float y2, float x)$/;"	f
extrap	.\Utils\MathUtils.h	/^inline float extrap(const float x1,const float y1,const float x2,const float y2,const float x)$/;"	f
f	.\Utils\STLUtils.h	/^	F			f;$/;"	m	struct:split_seq
f	.\Utils\STLUtils.h	/^	F	f;$/;"	m	struct:filtered_seq
f1	.\XESCore\Zoning.cpp	/^	FaceNode_t *	f1;$/;"	m	struct:EdgeNode_t	file:
f2	.\XESCore\Zoning.cpp	/^	FaceNode_t *	f2;$/;"	m	struct:EdgeNode_t	file:
f_	.\DSF\DSFLibWrite.cpp	/^	FILE * f_;$/;"	m	struct:StCloseAndKill	file:
f_	.\RenderFarmUI\RF_Assert.h	/^	const char * f_;$/;"	m	class:rf_assert_fail_exception
f_	.\Utils\AssertUtils.cpp	/^	const char * f_;$/;"	m	class:assert_fail_exception	file:
f_	.\VPF\VPFImport.cpp	/^	MFMemFile * f_;$/;"	m	struct:StMemFile	file:
f_	.\WEDCore\WED_Assert.h	/^	const char * f_;$/;"	m	class:wed_assert_fail_exception
f_	.\XESCore\Zoning.cpp	/^	FaceNode_t * f_;$/;"	m	struct:edge_contains_f	file:
fac	.\OneOffs\make_fill_rules.c	/^	int		fac;$/;"	m	struct:depth_info_t	file:
fac	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_FacadePlacement * fac;	$/;"	m	struct:preview_facade	file:
fac_depth_split	.\XESCore\Zoning.h	/^	int			fac_depth_split;						\/\/ How much to split the depth of facades.  0 for no facade$/;"	m	struct:FillRule_t
fac_extra	.\XESCore\Zoning.h	/^	float		fac_extra;$/;"	m	struct:FillRule_t
fac_id	.\XESCore\Zoning.h	/^	int			fac_id;									\/\/ Only used for whole-facade case$/;"	m	struct:FillRule_t
fac_id_ant	.\XESCore\Zoning.h	/^	int		fac_id_ant;$/;"	m	struct:PointRule_t
fac_id_back	.\XESCore\Zoning.h	/^	int			fac_id_back;$/;"	m	struct:FacadeChoice_t
fac_id_free	.\XESCore\Zoning.h	/^	int		fac_id_free;$/;"	m	struct:PointRule_t
fac_id_front	.\XESCore\Zoning.h	/^	int			fac_id_front;$/;"	m	struct:FacadeChoice_t
fac_id_rd	.\XESCore\Zoning.h	/^	int		fac_id_rd;$/;"	m	struct:PointRule_t
fac_info_t	.\WEDCore\WED_ResourceMgr.h	/^struct	fac_info_t {$/;"	s
fac_min_width_unused	.\XESCore\Zoning.h	/^	float		fac_min_width_unused;					\/\/ Range of width and steps for facade art assets..$/;"	m	struct:FillRule_t
facade_schedule	.\OneOffs\make_fill_rules.c	/^int facade_schedule[] = { 25, 30, 35, 40, 45, 50, 80, 9999, 0 };$/;"	v
face	.\GUI\GUI_Fonts.cpp	/^	FT_Face				face;$/;"	m	class:TT_font_info	file:
face_cat	.\XESCore\BlockFill.cpp	/^enum face_cat {$/;"	g	file:
face_for_curve	.\XESCore\MapPolygon.cpp	/^static Face_handle	face_for_curve($/;"	f	file:
face_for_vertices	.\XESCore\MapHelpers.h	/^typename Arr::Face_handle face_for_vertices(typename Arr::Vertex_handle v1, typename Arr::Vertex_handle v2, const set<typename Arr::Vertex_handle>& wrong_ways)$/;"	f
face_queue	.\XESCore\MapTopology.h	/^	typedef list<prop_pair>											face_queue;$/;"	t	class:MapBFSVisitor
faces	.\ObjEdit\oenotes.c	/^Hidden Faces, Locked faces, unselectable$/;"	v
faces	.\RenderFarmUI\RF_DrawMap.h	/^	FaceTree		faces;$/;"	m	struct:PmwxIndex_t
faces	.\XESCore\TriFan.h	/^	list<CDT::Face_handle>			faces;		\/\/ Our faces in traversal order$/;"	m	struct:TriFan_t
faces	.\XESCore\TriFan.h	/^	vector<CDT::Face_handle>		faces;$/;"	m	class:TriFanBuilder
faces	.\XESCore\Zoning.cpp	/^	FaceNode_t *	faces;$/;"	m	struct:FaceGraph_t	file:
facs	.\XESCore\Zoning.h	/^	vector<FacadeChoice_t>	facs;		\/\/ divs are in order first!$/;"	m	struct:FacadeSpelling_t
factorial	.\WEDMap\WED_StructureLayer.cpp	/^inline int factorial(int n)$/;"	f
fade_2_black_filter	.\XPTools\DDSTool.cpp	/^unsigned char fade_2_black_filter(unsigned char src[], int count, int channel, int level)$/;"	f
fade_filter	.\XPTools\DDSTool.cpp	/^unsigned char fade_filter(unsigned char src[], int count, int channel, int level)$/;"	f
fail	.\XPTools\GetImage.cpp	/^int good = 0, fail = 0;$/;"	v
fail_extraction	.\XESCore\BlockFill.cpp	/^void	fail_extraction(Pmwx::Face_handle dest_face, vector<Polygon2>& shape, CoordTranslator2 * trans, const char * fmt, ...)$/;"	f
failed	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::failed() const$/;"	f	class:JsonTest::TestResult
failure_	.\lib_json\src\test_lib_json\jsontest.h	/^      Failure *failure_;$/;"	m	struct:JsonTest::PredicateContext
failures_	.\lib_json\src\test_lib_json\jsontest.h	/^      Failures failures_;$/;"	m	class:JsonTest::TestResult
fake_both	.\XESTools\MiscFuncs.cpp	/^	fake_build, fake_tree, fake_both };$/;"	e	enum:__anon137	file:
fake_build	.\XESTools\MiscFuncs.cpp	/^	fake_build, fake_tree, fake_both };$/;"	e	enum:__anon137	file:
fake_tree	.\XESTools\MiscFuncs.cpp	/^	fake_build, fake_tree, fake_both };$/;"	e	enum:__anon137	file:
fallout	.\Utils\MathUtils.h	/^inline float fallout(const float in,const float lo,const float hi){$/;"	f
false_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value false_;$/;"	m	struct:ValueTest	file:
far	.\OneOffs\gen_roads10.h	/^	int		far;$/;"	m	struct:lod_range
farLOD	.\DSF\DSFLibWrite.cpp	/^		double					farLOD;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
farLOD	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		double					farLOD;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
fclose_cache_all	.\OneOffs\osm_tile.c	/^void fclose_cache_all(void)$/;"	f
feature	.\OneOffs\GenTerrain.c	/^	const char *	feature;$/;"	m	struct:__anon60	file:
feature	.\RawImport\ShapeIO.cpp	/^	int					feature;$/;"	m	struct:shape_import_data	file:
feature	.\RawImport\ShapeIO.cpp	/^	int					feature;$/;"	m	struct:shape_pattern_t	file:
feature	.\XESCore\BlockDefs.h	/^	int		feature;			\/\/ Road feature type for roads?$/;"	m	struct:BLOCK_face_data
feature	.\XESCore\MeshDefs.h	/^	int				feature;				\/\/ General terrain type for this triangle, e.g. terrain_Natural, terrain_Water$/;"	m	struct:MeshFaceInfo
feature	.\XESCore\NetTables.h	/^	int			feature;$/;"	m	struct:Feature2RepInfo
feature	.\XESCore\ObjTables.h	/^	int		feature;$/;"	m	struct:RepInfo_t
feature	.\XESCore\Zoning.h	/^	int		feature;$/;"	m	struct:PointRule_t
feature_map	.\RawImport\ShapeIO.cpp	/^	const vector<shape_import_data> *	feature_map;$/;"	m	class:toggle_properties_visitor	file:
feature_map	.\XESCore\BlockAlgs.cpp	/^	const vector<BLOCK_face_data> *	feature_map;$/;"	m	class:apply_properties_visitor	file:
feature_type	.\Tiger\TigerImport.cpp	/^	int					feature_type;$/;"	m	struct:FeatureInfo_t	file:
features	.\WEDImportExport\WED_VerTable.h	/^	vector<char> features;\/\/Currently there is a bug where the chars representing the letters turns them into their ASCII numbers '2'->50, this is a TODO$/;"	m	struct:VerInfo_t
features_	.\lib_json\include\json\reader.h	/^      Features features_;$/;"	m	class:Json::Reader
fetch_all_cmnds	.\AC3DPlugins\XPlaneSupport.tcl	/^proc fetch_all_cmnds {} {$/;"	p
fetch_all_datarefs	.\AC3DPlugins\XPlaneSupport.tcl	/^proc fetch_all_datarefs {} {$/;"	p
fetch_att_d	.\OneOffs\osm2shape.c	/^static double fetch_att_d(const char * key, const char ** att, double def)$/;"	f	file:
fetch_att_i	.\OneOffs\osm2shape.c	/^static int fetch_att_i(const char * key, const char ** att, int def)$/;"	f	file:
fetch_att_s	.\OneOffs\osm2shape.c	/^static const char * fetch_att_s(const char * key, const char ** att)$/;"	f	file:
fetch_border	.\XESCore\MeshAlgs.cpp	/^void	fetch_border(CDT& ioMesh, const Point_2& origin, map<double, CDT::Vertex_handle>& outPts, int side_num)$/;"	f
fi	.\WEDImportExport\WED_AptIE.cpp	/^	FILE *			fi;$/;"	m	struct:LazyLog_t	file:
fi_escape	.\WEDCore\WED_XMLWriter.cpp	/^inline void fi_escape(const char * str, FILE * fi)$/;"	f
fi_indent	.\WEDCore\WED_XMLWriter.cpp	/^inline void fi_indent(int n, FILE * fi) { while(n--) fputc(' ', fi); }$/;"	f
field_type	.\GUI\GUI_FormWindow.h	/^	enum field_type {$/;"	g	class:GUI_FormWindow
fifo	.\RenderFarmUI\RF_Main.cpp	/^static int fifo = NULL;$/;"	v	file:
fifo_timer	.\RenderFarmUI\RF_Main.cpp	/^class	fifo_timer : public GUI_Timer {$/;"	c	file:
fil_id	.\XESCore\Zoning.h	/^	int			fil_id;									\/\/ Facade for fill-use only.$/;"	m	struct:FillRule_t
file	.\GUI\GUI_Fonts.cpp	/^	GUI_Resource		file;$/;"	m	class:TT_font_info	file:
file	.\Utils\GISUtils.cpp	/^	jas_aux_buffer_t *		file;$/;"	m	struct:MemJASGeoFile	file:
file	.\Utils\XChunkyFileUtils.cpp	/^		FILE *		file;$/;"	m	class:FlatEncoder	file:
file	.\Utils\XChunkyFileUtils.cpp	/^		FILE *		file;$/;"	m	class:RLEEncoder	file:
file	.\Utils\unzip.c	/^	FILE* file;                 \/* io structore of the zipfile *\/$/;"	m	struct:__anon101	file:
file	.\Utils\unzip.c	/^	FILE* file;                 \/* io structore of the zipfile *\/$/;"	m	struct:__anon102	file:
file	.\WEDCore\WED_XMLWriter.h	/^		FILE *									file;$/;"	m	class:WED_XMLElement
file	.\XESCore\DEMIO.cpp	/^	MFMemFile *		file;$/;"	m	struct:StTiffMemFile	file:
file	.\linuxinit\initializer.h	/^	const char* file;$/;"	m	struct:file_match
fileCmd_Save	.\ObjEdit\OE_FileCmds.cpp	/^	fileCmd_Save,$/;"	e	enum:__anon47	file:
fileName	.\ObjEdit\OE_TexMgr.cpp	/^	string	fileName;$/;"	m	struct:TexInfo_t	file:
fileSize	.\Utils\BitmapUtils.cpp	/^	long			fileSize;$/;"	m	struct:BMPHeader	file:
file_	.\lib_json\src\test_lib_json\jsontest.h	/^      const char *file_;$/;"	m	class:JsonTest::Failure
file_	.\lib_json\src\test_lib_json\jsontest.h	/^      const char *file_;$/;"	m	struct:JsonTest::PredicateContext
file_CreateOK	.\Installer\InstallerProcs.h	/^	file_CreateOK,				\/\/ A file needs to be created and it is safe to do so.$/;"	e	enum:__anon30
file_CreateUnexpected	.\Installer\InstallerProcs.h	/^	file_CreateUnexpected,		\/\/ A file needs to be created - there is something in the way!$/;"	e	enum:__anon30
file_CreatedAlready	.\Installer\InstallerProcs.h	/^	file_CreatedAlready,		\/\/ A file that we thought we'd have to create is already there.$/;"	e	enum:__anon30
file_DeleteAlready	.\Installer\InstallerProcs.h	/^	file_DeleteAlready			\/\/ A file needs to be deleted but already has been.$/;"	e	enum:__anon30
file_DeleteOK	.\Installer\InstallerProcs.h	/^	file_DeleteOK,				\/\/ A file needs to be deleted.$/;"	e	enum:__anon30
file_DeleteUnexpected	.\Installer\InstallerProcs.h	/^	file_DeleteUnexpected,		\/\/ A file needs to be deleted but has been modified.$/;"	e	enum:__anon30
file_MatchesAlready	.\Installer\InstallerProcs.h	/^	file_MatchesAlready,		\/\/ A file that needs to be updated already has been.$/;"	e	enum:__anon30
file_MatchesMissing	.\Installer\InstallerProcs.h	/^	file_MatchesMissing,		\/\/ A file needs to be updated - the old file has been deleted.$/;"	e	enum:__anon30
file_MatchesOK	.\Installer\InstallerProcs.h	/^	file_MatchesOK,				\/\/ A needs to be updated.$/;"	e	enum:__anon30
file_MatchesUnexpected	.\Installer\InstallerProcs.h	/^	file_MatchesUnexpected,		\/\/ A file needs to be updated but the old file has been modified.$/;"	e	enum:__anon30
file_cb	.\XPTools\XGrinderShell.cpp	/^static bool file_cb(const char * fileName, bool isDir, unsigned long long modTime, void * ref)$/;"	f	file:
file_in_zip_read_info_s	.\Utils\unzip.c	/^} file_in_zip_read_info_s;$/;"	t	typeref:struct:__anon101	file:
file_match	.\linuxinit\initializer.h	/^typedef struct file_match$/;"	s
file_match	.\linuxinit\initializer.h	/^} file_match;$/;"	t	typeref:struct:file_match
file_table	.\OneOffs\osm_tile.c	/^gzFile *	file_table[MAX_FILES_EVER] = { 0 };$/;"	v
file_to_uu64	.\WEDImportExport\WED_GatewayExport.cpp	/^static int file_to_uu64(const string& path, string& enc)$/;"	f	file:
filezip	.\Utils\zip.c	/^    FILE * filezip;$/;"	m	struct:__anon105	file:
fill	.\OneOffs\GenTerrain.c	/^	int		fill;$/;"	m	struct:__anon60	file:
fill	.\XESCore\ObjTables.h	/^	int		fill;$/;"	m	struct:RepInfo_t
fill_area	.\XESCore\Zoning.h	/^	int			fill_area;								\/\/ Use rules to put AG in interior areas$/;"	m	struct:ZoningInfo_t
fill_dirt2apt	.\XESCore\Airports.cpp	/^	fill_dirt2apt		\/\/ widest - if there is land, declare it part of the airport, but only if already ry.$/;"	e	enum:apt_fill_mode	file:
fill_edge	.\XESCore\Zoning.h	/^	int			fill_edge;								\/\/ Use rules to put AG along edges.$/;"	m	struct:ZoningInfo_t
fill_for_zoning	.\XESCore\Zoning.cpp	/^bool fill_for_zoning(const set<int>& z)$/;"	f
fill_mode	.\WEDEntities\WED_ForestPlacement.h	/^	WED_PropIntEnum			fill_mode;$/;"	m	class:WED_ForestPlacement
fill_nearest	.\XESCore\DEMDefs.cpp	/^void DEMGeo::fill_nearest(void)$/;"	f	class:DEMGeo
fill_nukeroads	.\XESCore\Airports.cpp	/^	fill_nukeroads,		\/\/ Hard splat of roads underneath pavement...only for when user made the boundaries.$/;"	e	enum:apt_fill_mode	file:
fill_points	.\XESCore\Zoning.h	/^	int			fill_points;$/;"	m	struct:ZoningInfo_t
fill_veg	.\XESCore\Zoning.h	/^	int			fill_veg;								\/\/ Use rules to put forests into remaining area$/;"	m	struct:ZoningInfo_t
fill_water2apt	.\XESCore\Airports.cpp	/^	fill_water2apt,		\/\/ Water becomes airport - tightest radius - ensure airport under runways.$/;"	e	enum:apt_fill_mode	file:
fill_water2dirt	.\XESCore\Airports.cpp	/^	fill_water2dirt,	\/\/ Slightly wider...make sure we have buffer around water.  Area in this but not above becomes embankment.$/;"	e	enum:apt_fill_mode	file:
filled_in_this_block	.\Utils\zip.c	/^  uLong  filled_in_this_block;$/;"	m	struct:linkedlist_datablock_internal_s	file:
filter	.\DSF\DSFLibWrite.cpp	/^		int						filter;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
filter	.\DSF\DSFLibWrite.cpp	/^		int						filter;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
filter	.\DSF\DSFLibWrite.cpp	/^		int					filter;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
filter_changed	.\WEDImportExport\WED_GatewayImport.cpp	/^	filter_changed,$/;"	e	enum:imp_dialog_msg	file:
filter_idx	.\WEDImportExport\WED_DSFExport.cpp	/^	map<string, int>			filter_idx;$/;"	m	struct:DSF_ResourceTable	file:
filter_match	.\Utils\STLUtils.h	/^bool filter_match(const String& haystack, InputIterator begin, InputIterator end)$/;"	f
filter_self	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::filter_self(int dim, float * k)$/;"	f	class:DEMGeo
filter_self_normalize	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::filter_self_normalize(int dim, float * k)$/;"	f	class:DEMGeo
filtered_seq	.\Utils\STLUtils.h	/^	filtered_seq(const S& seq, const F& filter=F()) : s(seq), f(filter) { while(s() && !f(*s)) ++s; }$/;"	f	struct:filtered_seq
filtered_seq	.\Utils\STLUtils.h	/^	filtered_seq(const self& rhs) : s(rhs.s), f(rhs.f) { }$/;"	f	struct:filtered_seq
filtered_seq	.\Utils\STLUtils.h	/^struct filtered_seq {$/;"	s
filters	.\WEDImportExport\WED_DSFExport.cpp	/^	vector<string>				filters;$/;"	m	struct:DSF_ResourceTable	file:
final_items	.\XPTools\HackFixTextures.cpp	/^int	final_items[16] = {$/;"	v
find	.\Utils\QuadTree.h	/^typename QuadTree<__T, __N>::Node * QuadTree<__T, __N>::find(ValueType * v)$/;"	f	class:QuadTree
find_airport_by_icao_recursive	.\WEDImportExport\WED_DSFImport.cpp	/^static WED_Thing * find_airport_by_icao_recursive(const string& icao, WED_Thing * who)$/;"	f	file:
find_all_objects	.\AC3DPlugins\ac_utils.cpp	/^void	find_all_objects(ACObject * root, vector<ACObject *>& output)$/;"	f
find_all_selected_objects	.\AC3DPlugins\ac_utils.cpp	/^void	find_all_selected_objects(vector<ACObject *>& output)$/;"	f
find_all_selected_objects_flat	.\AC3DPlugins\ac_utils.cpp	/^void	find_all_selected_objects_flat(vector<ACObject *>& output)$/;"	f
find_all_selected_objects_parents	.\AC3DPlugins\ac_utils.cpp	/^void	find_all_selected_objects_parents(vector<ACObject *>& output)$/;"	f
find_all_selected_objects_stable	.\AC3DPlugins\ac_utils.cpp	/^void	find_all_selected_objects_stable(vector<ACObject *>& output)$/;"	f
find_b_interval	.\XESCore\BlockFill.cpp	/^double find_b_interval(time_region::interval& range, const vector<Segment2>& segs, double b_range[4])$/;"	f
find_best_neighbor	.\XESCore\DEMAlgs.cpp	/^static float find_best_neighbor(DEMGeo& ws, DEMGeo::address seed, int old_id, int new_id, int max_size)$/;"	f	file:
find_by_id	.\OneOffs\gen_roads10.h	/^	static published_road * find_by_id(int id)$/;"	f	class:published_road
find_contiguous_beziers	.\WEDImportExport\WED_DSFExport.cpp	/^__Iterator find_contiguous_beziers(__Iterator b, __Iterator e)$/;"	f
find_first_bot_type	.\XESCore\BlockFill.cpp	/^inline int find_first_bot_type(const vector<reg_info_t>& r, int t)$/;"	f
find_first_of_c	.\AC3DPlugins\obj_model.cpp	/^int find_first_of_c(const char * s, const char * charset)$/;"	f
find_last_bot_type	.\XESCore\BlockFill.cpp	/^inline int find_last_bot_type(const vector<reg_info_t>& r, int t)$/;"	f
find_major_axis	.\XESCore\BlockAlgs.cpp	/^void find_major_axis(vector<block_pt>&	pts,$/;"	f
find_most_locked_pt	.\XESCore\BlockFill.cpp	/^int find_most_locked_pt(vector<block_pt>& pts, bool skip_first)$/;"	f
find_node	.\OneOffs\osm2shape.c	/^node_info_t * find_node(int id)$/;"	f
find_node	.\Utils\QuadTree.h	/^typename QuadTree<__T, __N>::Node * QuadTree<__T, __N>::find_node(Node * node, const KeyType& bounds, ValueType * v, const KeyType& k)$/;"	f	class:QuadTree
find_rel	.\OneOffs\osm2shape.c	/^rel_info_t * find_rel(int id)$/;"	f
find_single_selected_object	.\AC3DPlugins\ac_utils.cpp	/^ACObject *	find_single_selected_object(void)$/;"	f
find_single_selected_surface	.\AC3DPlugins\ac_utils.cpp	/^Surface *	find_single_selected_surface(void)$/;"	f
find_st_for_tri	.\AC3DPlugins\uv_mapper.cpp	/^static void	find_st_for_tri(const a_tri& tri, const cgd::Point3& p, cgd::Point2& st)$/;"	f	file:
find_tri_in	.\Obj\ObjConvert.cpp	/^bool find_tri_in(int p1, int p2, int p3, const vector<INDEX_T>& tl)$/;"	f
find_way	.\OneOffs\osm2shape.c	/^way_info_t * find_way(int id)$/;"	f
finder	.\DSF\tri_stripper_101\heap_array.h	/^	typedef std::vector<size_t> finder;$/;"	t	class:common_structures::heap_array
first_block	.\Utils\zip.c	/^    linkedlist_datablock_internal* first_block;$/;"	m	struct:linkedlist_data_s	file:
first_on	.\Utils\RLERegion.cpp	/^	bool first_on(void) { return r1_ < run1_->size() && (r1_ % 2); }$/;"	f	class:RLERegionDualScanner
fix_near_vertical	.\XESCore\BlockFill.cpp	/^static void fix_near_vertical(Polygon2& p)$/;"	f	file:
flag	.\OneOffs\osm2shape.c	/^	int flag;$/;"	m	struct:__anon64	file:
flag	.\Utils\unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:unz_file_info_s
flag	.\Utils\zip.c	/^    uLong flag;                 \/* flag of the file currently writing *\/$/;"	m	struct:__anon104	file:
flag	.\XESCore\MeshDefs.h	/^	int				flag;					\/\/ General purpose, useful for..um...algorithms.$/;"	m	struct:MeshFaceInfo
flag	.\XPTools\XGrinderShell.cpp	/^	string					flag;				\/\/ empty for dividers$/;"	m	struct:flag_item_info	file:
flagAvailable	.\lib_json\include\json\value.h	/^         flagAvailable = 0,$/;"	e	enum:Json::ValueInternalLink::InternalFlags
flagUsed	.\lib_json\include\json\value.h	/^         flagUsed = 1$/;"	e	enum:Json::ValueInternalLink::InternalFlags
flag_Feature	.\XESCore\MeshDefs.h	/^		flag_Feature = 1$/;"	e	enum:MeshFaceInfo::__anon135
flag_item_info	.\XPTools\XGrinderShell.cpp	/^struct flag_item_info {$/;"	s	file:
flag_menu_info	.\XPTools\XGrinderShell.cpp	/^struct flag_menu_info {$/;"	s	file:
flag_menus	.\XPTools\XGrinderShell.cpp	/^static vector<flag_menu_info>			flag_menus;$/;"	v	file:
flags	.\DSF\DSFDefs.h	/^	uint16_t	flags;$/;"	m	struct:DSFRasterHeader_t
flags	.\DSF\DSFLibWrite.cpp	/^		unsigned char			flags;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
flags	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		unsigned char			flags;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
flags	.\GUI\GUI_Commander.h	/^				GUI_KeyFlags	flags;$/;"	m	struct:GUI_Commander::deferred_cmd_or_key
flags	.\GUI\GUI_Defs.h	/^	GUI_KeyFlags	flags;			\/\/ Modifier Flags$/;"	m	struct:GUI_MenuItem_t
flags	.\UI\XPopup.h	/^	unsigned long flags;$/;"	m	struct:MwmHints
flags	.\XPTools\DDSTool.cpp	/^		unsigned int flags;$/;"	m	struct:ATC_Header_Texture_TAG	file:
flat	.\Obj\XObjBuilder.h	/^ 	int			flat;				int		o_flat;$/;"	m	class:XObjBuilder
flatten_general_polygon_with_holes	.\WEDCore\WED_Clipping.cpp	/^void flatten_general_polygon_with_holes(C1& src, C2& dst)$/;"	f
flip_x	.\RenderFarmUI\RF_Export.cpp	/^	int			flip_x;$/;"	m	struct:RF_ExportState_t	file:
flip_x	.\RenderFarmUI\RF_Import.cpp	/^	int			flip_x;$/;"	m	struct:RF_ImportState_t	file:
flip_y	.\RenderFarmUI\RF_Export.cpp	/^	int			flip_y;$/;"	m	struct:RF_ExportState_t	file:
flip_y	.\RenderFarmUI\RF_Import.cpp	/^	int			flip_y;$/;"	m	struct:RF_ImportState_t	file:
float_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value float_;$/;"	m	struct:ValueTest	file:
float_between_iterator	.\XESCore\DEMTables.cpp	/^	float_between_iterator(const set_type& s) : s_(s), i_(s.begin()), h_(false)$/;"	f	struct:float_between_iterator
float_between_iterator	.\XESCore\DEMTables.cpp	/^struct float_between_iterator {$/;"	s	file:
float_clock	.\XPTools\ViewObj.cpp	/^inline float float_clock(void)$/;"	f
flood_fill_shed	.\XESCore\DEMAlgs.cpp	/^static void flood_fill_shed(DEMGeo& ws, DEMGeo::address seed, float old_id, float new_id, int shed_size)$/;"	f	file:
flows	.\XESCore\AptDefs.h	/^	AptFlowVector		flows;$/;"	m	struct:AptInfo_t
flt_abs	.\Utils\MathUtils.h	/^inline float flt_abs	(const float in){return (in>=0.0f)?in:-in;}		\/\/ TYPICAL case: fabs() takes 6.3% of the CPU time, according to profiling!$/;"	f
fltbox	.\Utils\MathUtils.h	/^inline int fltbox (const float x ,const float y ,const float x1,const float y1,const float x2,const float y2){$/;"	f
fltlim	.\OneOffs\gen_roads10.h	/^inline float fltlim(const float in,const float min,const float max){$/;"	f
fltlim	.\Utils\MathUtils.h	/^inline float fltlim(const float in,const float min,const float max){$/;"	f
fltmax2	.\OneOffs\gen_roads10.h	/^inline float fltmax2		(const float x1,const float x2											){													return (x1>x2)?x1:x2;}$/;"	f
fltmax2	.\Utils\MathUtils.h	/^inline float	fltmax2		(const float x1,const float x2												){													return (x1>x2)?x1:x2;}$/;"	f
fltmax3	.\Utils\MathUtils.h	/^inline float	fltmax3		(const float x1,const float x2,const float x3								){float x5=(x1>x2)?x1:x2;							return (x3>x5)?x3:x5;}$/;"	f
fltmax4	.\Utils\MathUtils.h	/^inline float	fltmax4		(const float x1,const float x2,const float x3,const float x4				){float x5=(x1>x2)?x1:x2;	float x6=(x3>x4)?x3:x4;	return (x5>x6)?x5:x6;}$/;"	f
fltmax5	.\Utils\MathUtils.h	/^inline float	fltmax5		(const float x1,const float x2,const float x3,const float x4,const float x5	){float x6=fltmax3(x1,x2,x3);float x7=fltmax2(x4,x5);	return (x6>x7)?x6:x7;}$/;"	f
fltmax6	.\Utils\MathUtils.h	/^inline float	fltmax6		(const float x1,const float x2,const float x3,const float x4,const float x5,const float x6){return fltmax2(fltmax3(x1,x2,x3),fltmax3(x4,x5,x6));}$/;"	f
fltmin2	.\OneOffs\gen_roads10.h	/^inline float fltmin2		(const float x1,const float x2											){													return (x1<x2)?x1:x2;}$/;"	f
fltmin2	.\Utils\MathUtils.h	/^inline float	fltmin2		(const float x1,const float x2												){													return (x1<x2)?x1:x2;}$/;"	f
fltmin3	.\Utils\MathUtils.h	/^inline float	fltmin3		(const float x1,const float x2,const float x3								){float x4=(x1<x2)?x1:x2;							return (x3<x4)?x3:x4;}$/;"	f
fltmin4	.\Utils\MathUtils.h	/^inline float	fltmin4		(const float x1,const float x2,const float x3,const float x4				){float x5=(x1<x2)?x1:x2;	float x6=(x3<x4)?x3:x4;	return (x5<x6)?x5:x6;}$/;"	f
fltmin5	.\Utils\MathUtils.h	/^inline float	fltmin5		(const float x1,const float x2,const float x3,const float x4,const float x5	){float x6=fltmin3(x1,x2,x3);float x7=fltmin2(x4,x5);	return (x6<x7)?x6:x7;}$/;"	f
fltmin6	.\Utils\MathUtils.h	/^inline float	fltmin6		(const float x1,const float x2,const float x3,const float x4,const float x5,const float x6){return fltmin2(fltmin3(x1,x2,x3),fltmin3(x4,x5,x6));}$/;"	f
fltnear	.\Utils\MathUtils.h	/^inline float	fltnear		(      float in,const float nearest											){in\/=nearest;	in=intround(in);					return in*nearest;}$/;"	f
fltrange	.\Utils\MathUtils.h	/^inline int fltrange(const float x ,const float x1,const float x2){$/;"	f
fltwrap	.\Utils\MathUtils.h	/^inline float fltwrap(float in,const float min,const float max){	\/\/ FLOATING POINT MUST NOT TAKE 0->359, cause that$/;"	f
flush	.\WEDCore\WED_XMLWriter.cpp	/^void WED_XMLElement::flush()$/;"	f	class:WED_XMLElement
flush_from	.\WEDCore\WED_XMLWriter.cpp	/^void WED_XMLElement::flush_from(WED_XMLElement * who)$/;"	f	class:WED_XMLElement
flushed	.\WEDCore\WED_XMLWriter.h	/^		bool									flushed;$/;"	m	class:WED_XMLElement
fname	.\MeshTool\MeshTool.cpp	/^static const char * fname;$/;"	v	file:
fname_	.\Utils\PerfUtils.h	/^	unsigned char * fname_;$/;"	m	struct:StProfile
focusInEvent	.\UI\XWin.lin.cpp	/^void XWin::focusInEvent(QFocusEvent* e)$/;"	f	class:XWin
focusOutEvent	.\UI\XWin.lin.cpp	/^void XWin::focusOutEvent(QFocusEvent* e)$/;"	f	class:XWin
font_Max	.\GUI\GUI_Fonts.h	/^	font_Max,$/;"	e	enum:__anon24
font_UI_Basic	.\GUI\GUI_Fonts.h	/^	font_UI_Basic = 0,$/;"	e	enum:__anon24
font_UI_Small	.\GUI\GUI_Fonts.h	/^	font_UI_Small,$/;"	e	enum:__anon24
fopen_cached	.\OneOffs\osm_tile.c	/^gzFile * fopen_cached(const char * fname, int hash)$/;"	f
force_bail	.\Installer\BuildInstaller.cpp	/^static bool	force_bail = false;$/;"	v	file:
forest_avg_max	.\XESCore\Zoning.h	/^	float		forest_avg_min,	forest_avg_max;			\/\/ Average forest level$/;"	m	struct:ZoningRule_t
forest_avg_min	.\XESCore\Zoning.h	/^	float		forest_avg_min,	forest_avg_max;			\/\/ Average forest level$/;"	m	struct:ZoningRule_t
forest_type	.\XESCore\ForestTables.h	/^	int			forest_type;$/;"	m	struct:ForestRule_t
form_bounds_default	.\GUI\GUI_FormWindow.cpp	/^static int form_bounds_default[4] = { 0, 0, 500, 50 };$/;"	v	file:
format	.\RenderFarmUI\RF_Export.cpp	/^	int			format;$/;"	m	struct:RF_ExportState_t	file:
format	.\RenderFarmUI\RF_Import.cpp	/^	int			format;$/;"	m	struct:RF_ImportState_t	file:
format_string	.\RenderFarmUI\RF_MapView.cpp	/^	const char *	format_string;$/;"	m	struct:DEMViewInfo_t	file:
found	.\RenderFarmUI\RF_SelectionTool.cpp	/^	bool					found;$/;"	m	struct:NearestEdgeToPt_t	file:
found	.\RenderFarmUI\RF_SelectionTool.cpp	/^	bool				found;$/;"	m	struct:NearestPFSToPt_t	file:
found	.\RenderFarmUI\RF_SelectionTool.cpp	/^	bool				found;$/;"	m	struct:NearestVertexToPt_t	file:
found_face	.\XESCore\MapHelpers.h	/^	typename Arr::Face_handle	found_face;$/;"	m	class:check_split_zone_visitor
found_overlap	.\XESCore\BlockAlgs.cpp	/^	Result found_overlap (const Block_2::X_monotone_curve_2& cv,$/;"	f	class:check_block_visitor
found_overlap	.\XESCore\MapHelpers.h	/^	Result found_overlap (const X_monotone_curve_2& cv,$/;"	f	class:check_split_zone_visitor
found_subcurve	.\XESCore\BlockAlgs.cpp	/^	Result found_subcurve (const Block_2::X_monotone_curve_2& partial,$/;"	f	class:check_block_visitor
found_subcurve	.\XESCore\MapHelpers.h	/^	Result found_subcurve (const X_monotone_curve_2& partial,$/;"	f	class:check_split_zone_visitor
fract_part	.\Utils\RoadNetUtils.cpp	/^inline	double fract_part(double x) { return x - ((double) ((int) x)); }$/;"	f
freeHead_	.\lib_json\src\lib_json\json_batchallocator.h	/^   AllocatedType *freeHead_;$/;"	m	class:Json::BatchAllocator
free_datablock	.\Utils\zip.c	/^local void free_datablock($/;"	f
free_file_ptr	.\OneOffs\osm_tile.c	/^static int free_file_ptr = 0;$/;"	v	file:
free_linkedlist	.\Utils\zip.c	/^local void free_linkedlist($/;"	f
free_list	.\Utils\QuadTree.h	/^	Node *		free_list;$/;"	m	class:QuadTree
freq	.\RawImport\FAA_Obs.h	/^	string		freq;$/;"	m	struct:FAAObs_t
freq	.\WEDEntities\WED_ATCFrequency.h	/^	WED_PropDoubleText	freq;$/;"	m	class:WED_ATCFrequency
freq	.\XESCore\AptDefs.h	/^	int			freq;$/;"	m	struct:AptATCFreq_t
freq_type	.\WEDEntities\WED_ATCFrequency.h	/^	WED_PropIntEnum		freq_type;$/;"	m	class:WED_ATCFrequency
from_metric	.\XESCore\NetPlacement.cpp	/^static void from_metric($/;"	f	file:
front	.\WEDCore\WED_Sign_Parser.h	/^	vector<parser_glyph_info> front;$/;"	m	struct:parser_finished_sign
front_name	.\Utils\RoadNetUtils.cpp	/^	string			front_name;$/;"	m	struct:CapRecord_t	file:
front_priority	.\Utils\STLUtils.h	/^	priority_type		front_priority() const$/;"	f	class:pqueue
front_value	.\Utils\STLUtils.h	/^	value_type			front_value() const$/;"	f	class:pqueue
frq	.\OneOffs\gen_roads10.h	/^	float	frq[2];$/;"	m	struct:obj_placement
fsign	.\AC3DPlugins\obj_editor.cpp	/^inline float fsign(float x) { if (x > 0.0) return 1.0; if (x < 0.0) return -1.0; return 0.0; }$/;"	f
fst	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_ForestPlacement * fst;	$/;"	m	struct:preview_forest	file:
ft_big	.\GUI\GUI_FormWindow.h	/^		ft_big,$/;"	e	enum:GUI_FormWindow::field_type
ft_multi_line	.\GUI\GUI_FormWindow.h	/^		ft_multi_line,$/;"	e	enum:GUI_FormWindow::field_type
ft_password	.\GUI\GUI_FormWindow.h	/^		ft_password $/;"	e	enum:GUI_FormWindow::field_type
ft_single_line	.\GUI\GUI_FormWindow.h	/^		ft_single_line,$/;"	e	enum:GUI_FormWindow::field_type
full	.\WEDCore\WED_LibraryMgr.cpp	/^	string	full;$/;"	m	struct:local_scan_t	file:
functions	.\UI\XPopup.h	/^	unsigned long functions;$/;"	m	struct:MwmHints
g	.\WEDMap\WED_PreviewLayer.cpp	/^	GUI_GraphState *	g;$/;"	m	struct:Obj_DrawStruct	file:
gAccel	.\GUI\GUI_Application.cpp	/^HACCEL			gAccel = NULL;$/;"	v
gAccel	.\UI\XWidgetApp.cpp	/^HACCEL		gAccel = NULL;$/;"	v
gAccelTable	.\GUI\GUI_Application.cpp	/^vector<ACCEL>	gAccelTable;$/;"	v
gAccelTable	.\UI\XWidgetApp.cpp	/^vector<ACCEL>	gAccelTable;$/;"	v
gAccum	.\RenderFarmUI\RF_DrawMap.cpp	/^vector<const float*> *	gAccum;$/;"	v
gAdded	.\XESTools\MapDefs_TEST.cpp	/^static int gAdded = 0;$/;"	v	file:
gAliases	.\XPTools\AddObjects.cpp	/^AliasMap					gAliases;$/;"	v
gApplication	.\GUI\GUI_Application.cpp	/^GUI_Application *	gApplication = NULL;$/;"	v
gAptIndex	.\XESTools\GISTool_Globals.cpp	/^AptIndex				gAptIndex;$/;"	v
gApts	.\XESTools\GISTool_Globals.cpp	/^AptVector			gApts;$/;"	v
gAssertBuf	.\RenderFarmUI\RF_Assert.cpp	/^static char gAssertBuf[65536];$/;"	v	file:
gAssertBuf	.\WEDCore\WED_Assert.cpp	/^static char gAssertBuf[65536];$/;"	v	file:
gAxis	.\XPTools\ConvertObj.cpp	/^static	int	gAxis = axis_Z;$/;"	v	file:
gBackward	.\OneOffs\gen_roads.cpp	/^static int gBackward = 0;$/;"	v	file:
gBadObjects	.\AC3DPlugins\obj8_export.cpp	/^static List *	gBadObjects;$/;"	v	file:
gBadPanelManip	.\AC3DPlugins\obj8_export.cpp	/^static bool		gBadPanelManip;$/;"	v	file:
gBadSurfaces	.\AC3DPlugins\obj8_export.cpp	/^static List *	gBadSurfaces;$/;"	v	file:
gBeachIndex	.\XESCore\DEMTables.cpp	/^BeachIndex						gBeachIndex;$/;"	v
gBeachInfoTable	.\XESCore\DEMTables.cpp	/^BeachInfoTable					gBeachInfoTable;$/;"	v
gBlock	.\Installer\XResources.win.cpp	/^static	char * gBlock = NULL;$/;"	v	file:
gBridgeInfo	.\XESCore\NetTables.cpp	/^BridgeInfoTable					gBridgeInfo;$/;"	v
gCamDist	.\ObjEdit\OE_Preview.cpp	/^const	float	gCamDist = 200;$/;"	v
gCamDist	.\XPTools\ViewObj.cpp	/^float	gCamDist = 200;$/;"	v
gCenterH	.\XPTools\ConvertObj.cpp	/^static	int	gCenterH = 0;$/;"	v	file:
gChains	.\Tiger\(TIGERRead backup.cpp).cpp	/^ChainInfoMap		gChains;$/;"	v
gChains	.\Tiger\TIGERRead.cpp	/^ChainInfoMap		gChains;$/;"	v
gChangeFuncs	.\AC3DPlugins\obj_model.cpp	/^static set<OBJ_change_f> gChangeFuncs;$/;"	v	file:
gChangeRules	.\XESCore\NetTables.cpp	/^ChangeRuleTable					gChangeRules;$/;"	v
gCmdCount	.\Obj\XObjDefs.cpp	/^int gCmdCount = sizeof(gCmds) \/ sizeof(gCmds[0]);$/;"	v
gCmds	.\Obj\XObjDefs.cpp	/^cmd_info	gCmds[] = {$/;"	v
gColorBands	.\XESCore\DEMTables.cpp	/^ColorBandTable				gColorBands;$/;"	v
gCount	.\Installer\XResources.win.cpp	/^static	int	gCount = 0;$/;"	v	file:
gCount	.\RenderFarmUI\RF_DrawMap.cpp	/^int						gCount;$/;"	v
gCountry	.\OneOffs\GenTerrain.c	/^int 	gCountry;$/;"	v
gCountryNames	.\OneOffs\GenTerrain.c	/^const char * gCountryNames[2] = { "WORLD", "US" };$/;"	v
gCountryPrefix	.\OneOffs\GenTerrain.c	/^const char * gCountryPrefix[2] = { "\/lib\/global8\/", "\/lib\/global8\/us\/" };$/;"	v
gCtr	.\OneOffs\GenTerrain.c	/^int gCtr = 0;$/;"	v
gCurMessage	.\UI\XGrinderApp.cpp	/^static	char			gCurMessage[1024] = { 0 };$/;"	v	file:
gCurTexture	.\XPTools\ObjEdit.cpp	/^int				gCurTexture = -1;$/;"	v
gDMS	.\WEDMap\WED_Map.cpp	/^int	gDMS = 0;$/;"	v
gDSFBuildPrefs	.\XESCore\DSFBuilder.cpp	/^DSFBuildPrefs_t	gDSFBuildPrefs = { 1 };$/;"	v
gDayTextures	.\ObjEdit\OE_TexMgr.cpp	/^map<string, TexInfo_t >		gDayTextures;$/;"	v
gDayTextures	.\XPTools\ViewObj.cpp	/^map<string, pair<string, GLenum> >		gDayTextures;$/;"	v
gDefn	.\XPTools\Env2DSF.cpp	/^short	gDefn[150][200][4];				\/\/ quad X, quad Y, layer #							Definition index for this layer or -1 if unused$/;"	v
gDem	.\XESTools\GISTool_Globals.cpp	/^DEMGeoMap			gDem;$/;"	v
gDemPrefs	.\XESCore\DEMAlgs.cpp	/^DEMPrefs_t	gDemPrefs = { 3, 0.5, 1.0 };$/;"	v
gDirty	.\RenderFarmUI\RF_Globals.cpp	/^bool				gDirty = false;$/;"	v
gEdgeRules	.\XESCore\Zoning.cpp	/^EdgeRuleTable				gEdgeRules;$/;"	v
gEdgeSelection	.\RenderFarmUI\RF_Selection.cpp	/^set<Pmwx::Halfedge_handle>	gEdgeSelection;$/;"	v
gEnumColors	.\XESCore\DEMTables.cpp	/^EnumColorTable				gEnumColors;$/;"	v
gEnumDEMs	.\XESCore\DEMTables.cpp	/^set<int>					gEnumDEMs;$/;"	v
gErrBadCockpit	.\AC3DPlugins\obj8_export.cpp	/^static bool		gErrBadCockpit;$/;"	v	file:
gErrBadHard	.\AC3DPlugins\obj8_export.cpp	/^static bool		gErrBadHard;$/;"	v	file:
gErrDoubleTex	.\AC3DPlugins\obj8_export.cpp	/^static bool		gErrDoubleTex;$/;"	v	file:
gErrMissingTex	.\AC3DPlugins\obj8_export.cpp	/^static int		gErrMissingTex;$/;"	v	file:
gExportTarget	.\WEDCore\WED_Globals.cpp	/^WED_Export_Target gExportTarget = wet_xplane_1000;$/;"	v
gFAAObs	.\RawImport\FAA_Obs.cpp	/^FAAObsTable		gFAAObs;$/;"	v
gFacadeSpellings	.\XESCore\Zoning.cpp	/^FacadeSpellingTable			gFacadeSpellings;$/;"	v
gFaceSelection	.\RenderFarmUI\RF_Selection.cpp	/^set<Pmwx::Face_handle>		gFaceSelection;$/;"	v
gFailure	.\RenderFarmUI\RF_Main.cpp	/^CGAL::Failure_function	gFailure = NULL;$/;"	v
gFeature2Rep	.\XESCore\NetTables.cpp	/^Feature2RepInfoTable			gFeature2Rep;$/;"	v
gFeatures	.\XESCore\ObjTables.cpp	/^FeatureInfoTable				gFeatures;$/;"	v
gFileCount	.\Installer\BuildInstaller.cpp	/^static int	gFileCount;$/;"	v	file:
gFileName	.\XPTools\ObjEdit.cpp	/^string			gFileName,gFilePath;$/;"	v
gFilePath	.\RenderFarmUI\RF_Globals.cpp	/^string				gFilePath;$/;"	v
gFilePath	.\XPTools\ObjEdit.cpp	/^string			gFileName,gFilePath;$/;"	v
gFillRules	.\XESCore\Zoning.cpp	/^FillRuleTable				gFillRules;$/;"	v
gFirst	.\RenderFarmUI\RF_DrawMap.cpp	/^const float*			gFirst;$/;"	v
gFlipX	.\XPTools\ConvertObj.cpp	/^static	int	gFlipX = 0;$/;"	v	file:
gFlipY	.\XPTools\ConvertObj.cpp	/^static	int	gFlipY = 0;$/;"	v	file:
gFlipZ	.\XPTools\ConvertObj.cpp	/^static	int	gFlipZ = 0;$/;"	v	file:
gForestInfo	.\XESCore\ForestTables.cpp	/^ForestInfoMap gForestInfo;$/;"	v
gForestRules	.\XESCore\ForestTables.cpp	/^ForestRuleVector	gForestRules;$/;"	v
gForkRules	.\XESCore\NetTables.cpp	/^ForkRuleTable					gForkRules;$/;"	v
gFuncs	.\OneOffs\GenTerrain.c	/^TerrainFunc_t	gFuncs[spec_Max] = {$/;"	v
gHasCombine	.\XPTools\ViewObj.cpp	/^static	bool	gHasCombine = false;$/;"	v	file:
gHasEnvAdd	.\XPTools\ViewObj.cpp	/^static	bool	gHasEnvAdd = false;$/;"	v	file:
gHasMultitexture	.\XPTools\ViewObj.cpp	/^static	bool	gHasMultitexture = false;$/;"	v	file:
gHasTexNow	.\AC3DPlugins\obj8_export.cpp	/^static int		gHasTexNow;$/;"	v	file:
gHiddenSurfaces	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gHiddenSurfaces;$/;"	v	file:
gIdentity	.\Utils\MatrixUtils.cpp	/^static GLdouble gIdentity[16] = {$/;"	v	file:
gInstance	.\RenderFarmUI\RF_Main.cpp	/^HINSTANCE gInstance;$/;"	v
gInstance	.\UI\XGUIApp.cpp	/^HINSTANCE	gInstance = NULL;$/;"	v
gInstance	.\UI\XGrinderApp.cpp	/^HINSTANCE	gInstance = NULL;$/;"	v
gInstance	.\UI\XWidgetApp.cpp	/^HINSTANCE	gInstance = NULL;$/;"	v
gInstance	.\WEDCore\WED_AppMain.cpp	/^HINSTANCE gInstance = NULL;$/;"	v
gIsFeet	.\WEDCore\WED_PropertyHelper.cpp	/^int gIsFeet = 0;$/;"	v
gLandClassInfo	.\XESCore\Zoning.cpp	/^LandClassInfoTable			gLandClassInfo;$/;"	v
gLandFillRules	.\XESCore\Zoning.cpp	/^LandFillRuleTable			gLandFillRules;$/;"	v
gLandUseTransTable	.\XESCore\DEMTables.cpp	/^LandUseTransTable				gLandUseTransTable;$/;"	v
gLandmarks	.\Tiger\(TIGERRead backup.cpp).cpp	/^LandmarkInfoMap		gLandmarks;$/;"	v
gLandmarks	.\Tiger\TIGERRead.cpp	/^LandmarkInfoMap		gLandmarks;$/;"	v
gLanduseTransFile	.\XESCore\DEMTables.cpp	/^string	gLanduseTransFile;$/;"	v
gLast	.\XESTools\MapDefs_TEST.cpp	/^static GISHalfedge * gLast = NULL;$/;"	v	file:
gLat_NE	.\XPTools\AddObjects.cpp	/^double	gLat_SW;	double	gLat_NW;	double	gLat_SE;	double	gLat_NE;$/;"	v
gLat_NW	.\XPTools\AddObjects.cpp	/^double	gLat_SW;	double	gLat_NW;	double	gLat_SE;	double	gLat_NE;$/;"	v
gLat_SE	.\XPTools\AddObjects.cpp	/^double	gLat_SW;	double	gLat_NW;	double	gLat_SE;	double	gLat_NE;$/;"	v
gLat_SW	.\XPTools\AddObjects.cpp	/^double	gLat_SW;	double	gLat_NW;	double	gLat_SE;	double	gLat_NE;$/;"	v
gLevelCrossings	.\XESCore\NetTables.cpp	/^LevelCrossingTable				gLevelCrossings;$/;"	v
gLevelOfDetail	.\XPTools\ObjEdit.cpp	/^int				gLevelOfDetail;	\/\/ Cur LOD$/;"	v
gLines	.\Env\Persistence.cpp	/^std::vector<PathInfo>			gLines;$/;"	v
gLon_NE	.\XPTools\AddObjects.cpp	/^double	gLon_SW;	double	gLon_NW;	double	gLon_SE;	double	gLon_NE;$/;"	v
gLon_NW	.\XPTools\AddObjects.cpp	/^double	gLon_SW;	double	gLon_NW;	double	gLon_SE;	double	gLon_NE;$/;"	v
gLon_SE	.\XPTools\AddObjects.cpp	/^double	gLon_SW;	double	gLon_NW;	double	gLon_SE;	double	gLon_NE;$/;"	v
gLon_SW	.\XPTools\AddObjects.cpp	/^double	gLon_SW;	double	gLon_NW;	double	gLon_SE;	double	gLon_NE;$/;"	v
gMap	.\XESTools\GISTool_Globals.cpp	/^Pmwx				gMap;$/;"	v
gMapEast	.\XESTools\GISTool_Globals.cpp	/^int					gMapEast  =  180;$/;"	v
gMapIndex	.\XESTools\GISTool_Globals.cpp	/^PmwxIndex_t			gMapIndex;$/;"	v
gMapNorth	.\XESTools\GISTool_Globals.cpp	/^int					gMapNorth =  90;$/;"	v
gMapSouth	.\XESTools\GISTool_Globals.cpp	/^int					gMapSouth = -90;$/;"	v
gMapView	.\RenderFarmUI\RF_MapView.cpp	/^RF_MapView *		gMapView = NULL;$/;"	v
gMapWest	.\XESTools\GISTool_Globals.cpp	/^int					gMapWest  = -180;$/;"	v
gMask	.\XESTools\GISTool_DemCmds.cpp	/^static DEMGeo	gMem, gMask;$/;"	v	file:
gMasterScale	.\XPTools\TaxiMaker.cpp	/^float	gMasterScale = 0.6;		\/\/ Size of one square panel$/;"	v
gMatchBorders	.\XESCore\MeshAlgs.cpp	/^static mesh_match_t gMatchBorders[4];$/;"	v	file:
gMem	.\XESTools\GISTool_DemCmds.cpp	/^static DEMGeo	gMem, gMask;$/;"	v	file:
gMenuMap	.\UI\XWin.win.cpp	/^MenuMap	gMenuMap;$/;"	v
gMeshBeziers	.\XESTools\GISTool_Globals.cpp	/^vector<pair<Bezier2,pair<Point3, Point3> > >		gMeshBeziers;$/;"	v
gMeshIndex	.\XPTools\Env2DSF.cpp	/^unsigned int		gMeshIndex[151][201];			\/\/ vertex X, vertex Y$/;"	v
gMeshLines	.\WEDCore\WED_Globals.cpp	/^vector<pair<Point2,Point3> >		gMeshLines;$/;"	v
gMeshLines	.\XESTools\GISTool copy.cpp	/^vector<Point2>		gMeshLines;$/;"	v
gMeshLines	.\XESTools\GISTool_Globals.cpp	/^vector<pair<Point2,Point3> >		gMeshLines;$/;"	v
gMeshMulti	.\XPTools\Env2DSF.cpp	/^char	gMeshMulti[150][200][4];		\/\/ quad X, quad Y, layer #							Is this layer multitextured?$/;"	v
gMeshPoints	.\WEDCore\WED_Globals.cpp	/^vector<pair<Point2,Point3> >		gMeshPoints;$/;"	v
gMeshPoints	.\XESTools\GISTool copy.cpp	/^vector<Point2>		gMeshPoints;$/;"	v
gMeshPoints	.\XESTools\GISTool_Globals.cpp	/^vector<pair<Point2,Point3> >		gMeshPoints;$/;"	v
gMeshPolygons	.\WEDCore\WED_Globals.cpp	/^vector<pair<Polygon2,Point3> >		gMeshPolygons;$/;"	v
gMeshPrefs	.\XESCore\MeshAlgs.cpp	/^MeshPrefs_t gMeshPrefs = {		\/*iphone*\/$/;"	v
gMeshST1	.\XPTools\Env2DSF.cpp	/^float	gMeshST1[150][200][4][4][2];	\/\/ quad X, quad Y, layer #, vertex #, ST index		S&T tex coords of this layer$/;"	v
gMeshST2	.\XPTools\Env2DSF.cpp	/^float	gMeshST2[150][200][4][4][2];	\/\/ quad X, quad Y, layer #, vertex #, ST index		S&T mask coords of this layer$/;"	v
gMeshXYZ	.\XPTools\Env2DSF.cpp	/^float	gMeshXYZ[151][201][3];			\/\/ quad X, quad Y, coord (XYZ) index				Coordinates of the vertices$/;"	v
gMode	.\RenderFarmUI\RF_DrawMap.cpp	/^int						gMode;$/;"	v
gModuleHandle	.\GUI\GUI_Resources.cpp	/^static void* gModuleHandle = 0;$/;"	v	file:
gNaturalTerrainFile	.\XESCore\DEMTables.cpp	/^string	gNaturalTerrainFile;$/;"	v
gNaturalTerrainInfo	.\XESCore\DEMTables.cpp	/^NaturalTerrainInfoMap			gNaturalTerrainInfo;$/;"	v
gNaturalTerrainRules	.\XESCore\DEMTables.cpp	/^NaturalTerrainRuleVector		gNaturalTerrainRules;$/;"	v
gNetFeatures	.\XESCore\NetTables.cpp	/^NetFeatureInfoTable				gNetFeatures;$/;"	v
gNetReps	.\XESCore\NetTables.cpp	/^NetRepInfoTable					gNetReps;$/;"	v
gNightTextures	.\ObjEdit\OE_TexMgr.cpp	/^map<string, TexInfo_t >		gNightTextures;$/;"	v
gNodes	.\Tiger\TIGERRead.cpp	/^NodeInfoMap			gNodes;$/;"	v
gObjLibPrefix	.\XESCore\ObjTables.cpp	/^string							gObjLibPrefix;$/;"	v
gObjPlacementFile	.\XESCore\ObjTables.cpp	/^string							gObjPlacementFile;$/;"	v
gObjectLOD	.\XPTools\ObjEdit.cpp	/^LODTable		gObjectLOD;$/;"	v
gObjects	.\Env\Persistence.cpp	/^std::vector<ObjectInfo>			gObjects;$/;"	v
gObjects	.\XPTools\ObjEdit.cpp	/^ObjectTable		gObjects;$/;"	v
gObjs	.\OneOffs\GenTerrain.c	/^const char * gObjs[10000];$/;"	v
gObsNames	.\RawImport\FAA_Obs.cpp	/^const char *	gObsNames [] = {$/;"	v
gOffTexX	.\AC3DPlugins\obj8_export.cpp	/^static float	gOffTexX = 0.0;$/;"	v	file:
gOffTexY	.\AC3DPlugins\obj8_export.cpp	/^static float	gOffTexY = 0.0;$/;"	v	file:
gOnce	.\OneOffs\GenTerrain.c	/^int		gOnce;$/;"	v
gOptimize	.\XPTools\ConvertObj.cpp	/^static int	gOptimize = 0;$/;"	v	file:
gPackageMgr	.\WEDCore\WED_PackageMgr.cpp	/^WED_PackageMgr * gPackageMgr = NULL;$/;"	v
gPassNum	.\Tiger\(TIGERRead backup.cpp).cpp	/^static	int	gPassNum = 0;$/;"	v	file:
gPassNum	.\Tiger\TIGERRead.cpp	/^static	int	gPassNum = 0;$/;"	v	file:
gPatchEd	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gPatchEd;$/;"	v	file:
gPatches	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gPatches;$/;"	v	file:
gPointFeatureSelection	.\RenderFarmUI\RF_Selection.cpp	/^set<PointFeatureSelection>	gPointFeatureSelection;$/;"	v
gPointRules	.\XESCore\Zoning.cpp	/^PointRuleTable				gPointRules;$/;"	v
gPoleHeight	.\XPTools\TaxiMaker.cpp	/^float	gPoleHeight = 0.3;		\/\/ Height off the ground$/;"	v
gPoleRadius	.\XPTools\TaxiMaker.cpp	/^float	gPoleRadius = 0.04;		\/\/ Radius of poles$/;"	v
gPoly	.\XPTools\ConvertObj.cpp	/^static	int	gPoly = poly_CCW;$/;"	v	file:
gPolygons	.\Tiger\(TIGERRead backup.cpp).cpp	/^PolygonInfoMap		gPolygons;$/;"	v
gPolygons	.\Tiger\TIGERRead.cpp	/^PolygonInfoMap		gPolygons;$/;"	v
gPrev	.\RenderFarmUI\RF_DrawMap.cpp	/^const float*			gPrev;$/;"	v
gPrevPrev	.\RenderFarmUI\RF_DrawMap.cpp	/^const float*			gPrevPrev;$/;"	v
gPreview	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gPreview;$/;"	v	file:
gProcessingCmdPrefs	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^ProcessingPrefs_t	gProcessingCmdPrefs = {$/;"	v
gProgress	.\XESTools\GISTool_Globals.cpp	/^ProgressFunc		gProgress = ConsoleProgressFunc;$/;"	v
gProjEd	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gProjEd;$/;"	v	file:
gProjPrev	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gProjPrev;$/;"	v	file:
gProjSetup	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gProjSetup;$/;"	v	file:
gProjectionMgr	.\XPTools\ObjEdit.cpp	/^OE_ProjectionMgr *	gProjectionMgr = NULL;$/;"	v
gPromotedZoningSet	.\XESCore\NetTables.cpp	/^set<int>						gPromotedZoningSet;$/;"	v
gRandomRats	.\Utils\perlin.cpp	/^float gRandomRats	[RAN_RAT_DIM];	\/\/ seed random numbers$/;"	v
gRebuildStep	.\XPTools\ObjEdit.cpp	/^int				gRebuildStep = -1;$/;"	v
gReceiver	.\XPTools\ViewObj.cpp	/^XObjWin *	gReceiver = NULL;$/;"	v
gRefImage	.\XPTools\GetImage.cpp	/^ImageInfo * gRefImage = NULL;$/;"	v
gRefNE_Lat	.\XPTools\GetImage.cpp	/^double		gRefNE_Lat = 0.0;$/;"	v
gRefNE_Lon	.\XPTools\GetImage.cpp	/^double		gRefNE_Lon = 0.0;$/;"	v
gRefNW_Lat	.\XPTools\GetImage.cpp	/^double		gRefNW_Lat = 0.0;$/;"	v
gRefNW_Lon	.\XPTools\GetImage.cpp	/^double		gRefNW_Lon = 0.0;$/;"	v
gRefSE_Lat	.\XPTools\GetImage.cpp	/^double		gRefSE_Lat = 0.0;$/;"	v
gRefSE_Lon	.\XPTools\GetImage.cpp	/^double		gRefSE_Lon = 0.0;$/;"	v
gRefSW_Lat	.\XPTools\GetImage.cpp	/^double		gRefSW_Lat = 0.0;$/;"	v
gRefSW_Lon	.\XPTools\GetImage.cpp	/^double		gRefSW_Lon = 0.0;$/;"	v
gRegionalizations	.\XESCore\DEMTables.cpp	/^RegionalizationVector			gRegionalizations;$/;"	v
gRepFeatureIndex	.\XESCore\ObjTables.cpp	/^RepFeatureIndex					gRepFeatureIndex;$/;"	v
gRepTable	.\XESCore\ObjTables.cpp	/^RepTable						gRepTable;$/;"	v
gRepTableTerrainIndex	.\XESCore\ObjTables.cpp	/^RepTableTerrainIndex			gRepTableTerrainIndex;$/;"	v
gRepTexX	.\AC3DPlugins\obj8_export.cpp	/^static float	gRepTexX = 1.0;$/;"	v	file:
gRepTexY	.\AC3DPlugins\obj8_export.cpp	/^static float	gRepTexY = 1.0;$/;"	v	file:
gRepUsage	.\XESCore\ObjTables.cpp	/^RepUsageTable					gRepUsage;$/;"	v
gRepUsageTotal	.\XESCore\ObjTables.cpp	/^int								gRepUsageTotal = 0;$/;"	v
gReplacementClimate	.\XESCore\DEMTables.cpp	/^string	gReplacementClimate;$/;"	v
gReplacementRoads	.\XESCore\DEMTables.cpp	/^string 	gReplacementRoads;$/;"	v
gReverse	.\XESCore\EnumSystem.cpp	/^TokenReverseMap	gReverse;$/;"	v
gRiverVectors	.\Env\Persistence.cpp	/^std::vector<PathInfo>			gRiverVectors;$/;"	v
gRoadPrefs	.\XESCore\TensorRoads.cpp	/^RoadPrefs_t gRoadPrefs = { 10.0, 50000.0, 0.8, 1.0 };$/;"	v
gRoads	.\Env\Persistence.cpp	/^std::vector<PathInfo>			gRoads;$/;"	v
gRotation	.\XPTools\AddObjects.cpp	/^double	gRotation;$/;"	v
gRwyInfoMap	.\RawImport\AptElev.cpp	/^RwyInfoMap	gRwyInfoMap;$/;"	v
gST1Index	.\XPTools\Env2DSF.cpp	/^unsigned int		gST1Index[150][200][4][4];		\/\/ quad X, quad Y, layer #, vertex #$/;"	v
gST2Index	.\XPTools\Env2DSF.cpp	/^unsigned int		gST2Index[150][200][4][4];		\/\/ quad X, quad Y, layer #, vertex #$/;"	v
gSave	.\XPTools\ConvertObj.cpp	/^static	int	gSave = save_OBJ8;$/;"	v	file:
gSaveMode	.\XPTools\GetImage.cpp	/^int	gSaveMode = save_BMP;$/;"	v
gSceneryMap	.\XPTools\AddObjects.cpp	/^SceneryMap					gSceneryMap;$/;"	v
gSelection	.\XPTools\ObjEdit.cpp	/^set<int>		gSelection;$/;"	v
gSelectionMode	.\RenderFarmUI\RF_Selection.cpp	/^int							gSelectionMode = rf_Select_Face;$/;"	v
gSettingsM	.\XPTools\GetImage.cpp	/^xmenu	gSettingsM = NULL;$/;"	v
gStopPt	.\RenderFarmUI\RF_SelectionTool.cpp	/^static int gStopPt = -1;$/;"	v	file:
gStopTime	.\XPTools\ViewObj.cpp	/^static float gStopTime = 0.0;$/;"	v	file:
gSubregionOOBErr	.\AC3DPlugins\obj8_export.cpp	/^static bool		gSubregionOOBErr;$/;"	v	file:
gTaxiways	.\Env\Persistence.cpp	/^std::vector<PathInfo>			gTaxiways;$/;"	v
gTexEd	.\XPTools\ObjEdit.cpp	/^static	OE_Pane *	gTexEd;$/;"	v	file:
gTexName	.\AC3DPlugins\obj8_export.cpp	/^static string	gTexName;$/;"	v	file:
gTexProj	.\XESCore\DEMTables.cpp	/^TexProjTable					gTexProj;$/;"	v
gTextureName	.\XPTools\TaxiMaker.cpp	/^string	gTextureName = "taxiways:taxi2";$/;"	v
gTextures	.\Env\Persistence.cpp	/^std::vector<std::string>		gTextures;$/;"	v
gTextures	.\XPTools\ObjEdit.cpp	/^TextureTable	gTextures;$/;"	v
gTiming	.\XESTools\GISTool_Globals.cpp	/^bool				gTiming = false;$/;"	v
gTitle	.\UI\XGrinderApp.cpp	/^static	string			gTitle = "XGrinder";$/;"	v	file:
gTokens	.\XESCore\EnumSystem.cpp	/^TokenMap		gTokens;$/;"	v
gTrails	.\Env\Persistence.cpp	/^std::vector<PathInfo>			gTrails;$/;"	v
gTrains	.\Env\Persistence.cpp	/^std::vector<PathInfo>			gTrains;$/;"	v
gTriangulationHi	.\XESTools\GISTool_Globals.cpp	/^CDT					gTriangulationHi;$/;"	v
gTwinRules	.\XESCore\NetTables.cpp	/^map<int,int>					gTwinRules;$/;"	v
gUnits	.\XPTools\ConvertObj.cpp	/^static	int	gUnits = unit_Meters;$/;"	v	file:
gUseMaterials	.\XPTools\TaxiMaker.cpp	/^int		gUseMaterials = 0;		\/\/ Do we use materials to make taxiways light up?$/;"	v
gVerbose	.\XESTools\GISTool_Globals.cpp	/^bool				gVerbose = true;$/;"	v
gVertexSelection	.\RenderFarmUI\RF_Selection.cpp	/^set<Pmwx::Vertex_handle>	gVertexSelection;$/;"	v
gVertices	.\Env\Persistence.cpp	/^std::vector<VertexInfo>			gVertices;$/;"	v
gViewMenu	.\XPTools\ObjEdit.cpp	/^static	XPLMMenuID	gViewMenu;$/;"	v	file:
gWEDXPluginMgr	.\WEDXPlugin\WED_XPlugin.cpp	/^WED_XPluginMgr *	gWEDXPluginMgr	= NULL;$/;"	v
gWTPMErrors	.\XESCore\WTPM.cpp	/^int	gWTPMErrors = 0;$/;"	v
gWedPrefs	.\RenderFarmUI\RF_PrefsDialog.cpp	/^RF_Prefs	gWedPrefs = { 0 };$/;"	v
gWidgetWin	.\UI\XPWidgetWin.cpp	/^XPWidgetWin* gWidgetWin = NULL;$/;"	v
gWidthBottom	.\XPTools\TaxiMaker.cpp	/^float	gWidthBottom = 0.08;	\/\/ Thickness at sign bottom$/;"	v
gWidthTop	.\XPTools\TaxiMaker.cpp	/^float	gWidthTop = 0.04;		\/\/ Thickness at sign top$/;"	v
gWin	.\UI\XGrinderApp.cpp	/^static	XGrinderWin * 	gWin = NULL;$/;"	v	file:
gX_E	.\XPTools\AddObjects.cpp	/^double	gY_S, gY_N, gX_W, gX_E;$/;"	v
gX_W	.\XPTools\AddObjects.cpp	/^double	gY_S, gY_N, gX_W, gX_E;$/;"	v
gY_N	.\XPTools\AddObjects.cpp	/^double	gY_S, gY_N, gX_W, gX_E;$/;"	v
gY_S	.\XPTools\AddObjects.cpp	/^double	gY_S, gY_N, gX_W, gX_E;$/;"	v
gZonePromote	.\XESCore\NetTables.cpp	/^ZonePromoteTable				gZonePromote;$/;"	v
gZoningInfo	.\XESCore\Zoning.cpp	/^ZoningInfoTable				gZoningInfo;$/;"	v
gZoningRules	.\XESCore\Zoning.cpp	/^ZoningRuleTable				gZoningRules;$/;"	v
gZoomer	.\XPTools\ObjEdit.cpp	/^OE_Zoomer3d		gZoomer;$/;"	v
g_anim_enabled	.\AC3DPlugins\obj_anim.cpp	/^static int							g_anim_enabled = 0;$/;"	v	file:
g_anim_inited	.\AC3DPlugins\obj_anim.cpp	/^static int							g_anim_inited = 0;$/;"	v	file:
g_atts	.\OneOffs\osm2shape.c	/^static att_info_t *		g_atts = NULL;$/;"	v	file:
g_buf	.\OneOffs\osm2shape.c	/^static char			g_buf[1024*1024*16];$/;"	v	file:
g_buf	.\OneOffs\osm_tile.c	/^static char			g_buf[1024*1024*16];$/;"	v	file:
g_color_face_use_supr_tint	.\RenderFarmUI\RF_DrawMap.cpp	/^int g_color_face_use_supr_tint = 0;$/;"	v
g_color_face_with_appr	.\RenderFarmUI\RF_DrawMap.cpp	/^int g_color_face_with_appr = 0;$/;"	v
g_color_face_with_supr	.\RenderFarmUI\RF_DrawMap.cpp	/^int g_color_face_with_supr = 0;$/;"	v
g_color_face_with_terr	.\RenderFarmUI\RF_DrawMap.cpp	/^int g_color_face_with_terr = 1;$/;"	v
g_color_face_with_zone	.\RenderFarmUI\RF_DrawMap.cpp	/^int g_color_face_with_zone = 0;$/;"	v
g_datarefs	.\AC3DPlugins\obj_anim.cpp	/^static map<string, dataref_info>	g_datarefs;$/;"	v	file:
g_dropped_pts	.\WEDImportExport\WED_DSFExport.cpp	/^static bool g_dropped_pts = false;$/;"	v	file:
g_file	.\OneOffs\osm2shape.c	/^static gzFile		g_file=NULL;$/;"	v	file:
g_file	.\OneOffs\osm_tile.c	/^static gzFile		g_file=NULL;$/;"	v	file:
g_list_invis	.\AC3DPlugins\obj_anim.cpp	/^static int							g_list_invis = 0;$/;"	v	file:
g_me	.\XPTools\XGrinderShell.cpp	/^static char * g_me = NULL;$/;"	v	file:
g_nodes	.\OneOffs\osm2shape.c	/^static node_info_t * g_nodes = NULL;$/;"	v	file:
g_nodes	.\OneOffs\osm_tile.c	/^static bbox_t *		g_nodes = NULL;$/;"	v	file:
g_num_atts	.\OneOffs\osm2shape.c	/^static int				g_num_atts = 0;$/;"	v	file:
g_parser	.\OneOffs\osm2shape.c	/^static XML_Parser   g_parser=NULL;$/;"	v	file:
g_parser	.\OneOffs\osm_tile.c	/^static XML_Parser   g_parser=NULL;$/;"	v	file:
g_previous	.\AC3DPlugins\obj_anim.cpp	/^static map<string, float>			g_previous;$/;"	v	file:
g_qmid_prefix	.\MeshTool\MeshTool_Create.cpp	/^static string				g_qmid_prefix;$/;"	v	file:
g_rels	.\OneOffs\osm2shape.c	/^static rel_info_t * g_rels = NULL;$/;"	v	file:
g_rels	.\OneOffs\osm_tile.c	/^static bbox_t *		g_rels = NULL;$/;"	v	file:
g_tcl_mapping	.\AC3DPlugins\obj_anim.cpp	/^static map<string, string>			g_tcl_mapping;$/;"	v	file:
g_temp_node_refs	.\OneOffs\osm2shape.c	/^static int * g_temp_node_refs = NULL;$/;"	v	file:
g_temp_node_role	.\OneOffs\osm2shape.c	/^static char ** g_temp_node_role = NULL;$/;"	v	file:
g_temp_rel_refs	.\OneOffs\osm2shape.c	/^static int * g_temp_rel_refs = NULL;$/;"	v	file:
g_temp_rel_role	.\OneOffs\osm2shape.c	/^static char ** g_temp_rel_role = NULL;$/;"	v	file:
g_temp_way_refs	.\OneOffs\osm2shape.c	/^static int * g_temp_way_refs = NULL;$/;"	v	file:
g_temp_way_role	.\OneOffs\osm2shape.c	/^static char ** g_temp_way_role = NULL;$/;"	v	file:
g_tris	.\AC3DPlugins\uv_mapper.cpp	/^static	vector<a_tri>	g_tris;$/;"	v	file:
g_ways	.\OneOffs\osm2shape.c	/^static way_info_t * g_ways = NULL;$/;"	v	file:
g_ways	.\OneOffs\osm_tile.c	/^static bbox_t *		g_ways = NULL;$/;"	v	file:
gates	.\XESCore\AptDefs.h	/^	AptGateVector		gates;					\/\/ shared structures$/;"	m	struct:AptInfo_t
gateway_bounds_default	.\WEDImportExport\WED_GatewayExport.cpp	/^static int gateway_bounds_default[4] = { 0, 0, 500, 500 };$/;"	v	file:
gather_datarefs	.\AC3DPlugins\obj_anim.cpp	/^void	gather_datarefs(ACObject * obj)$/;"	f
gen_cache_key	.\XESCore\MeshDefs.cpp	/^int	CDT::gen_cache_key(void)$/;"	f	class:CDT
generate_bezier	.\XESCore\NetPlacement.cpp	/^void generate_bezier($/;"	f
gentle_crop	.\WEDImportExport\WED_DSFExport.cpp	/^static void gentle_crop(Point2& p, const Bbox2& bounds, bool& hard_crop)$/;"	f	file:
geo_len	.\Obj\XObjWriteEmbedded.cpp	/^	int		geo_len;$/;"	m	struct:master_header_t	file:
geo_lights	.\Obj\XObjDefs.h	/^	ObjPointPool			geo_lights;$/;"	m	struct:XObj8
geo_lines	.\Obj\XObjDefs.h	/^	ObjPointPool			geo_lines;$/;"	m	struct:XObj8
geo_off	.\Obj\XObjWriteEmbedded.cpp	/^	int		geo_off;$/;"	m	struct:master_header_t	file:
geo_tri	.\Obj\XObjDefs.h	/^	ObjPointPool			geo_tri;$/;"	m	struct:XObj8
get	.\AC3DPlugins\tcl_utils.cpp	/^const char *		TCL_linked_vars::get(void) const$/;"	f	class:TCL_linked_vars
get	.\AC3DPlugins\tcl_utils.cpp	/^const char *		TCL_linked_varsv::get(int n) const$/;"	f	class:TCL_linked_varsv
get	.\AC3DPlugins\tcl_utils.cpp	/^double		TCL_linked_vard::get(void) const$/;"	f	class:TCL_linked_vard
get	.\AC3DPlugins\tcl_utils.cpp	/^double		TCL_linked_vardv::get(int n) const$/;"	f	class:TCL_linked_vardv
get	.\AC3DPlugins\tcl_utils.cpp	/^int		TCL_linked_vari::get(void) const$/;"	f	class:TCL_linked_vari
get	.\AC3DPlugins\tcl_utils.cpp	/^int		TCL_linked_variv::get(int n) const$/;"	f	class:TCL_linked_variv
get	.\Obj\ObjPointPool.cpp	/^const float *	ObjPointPool::get(int index) const$/;"	f	class:ObjPointPool
get	.\Obj\ObjPointPool.cpp	/^float *	ObjPointPool::get(int index)$/;"	f	class:ObjPointPool
get	.\SDTS\SDTSRead.cpp	/^	void	get(sc_Record& r) { iter.get(r); }$/;"	f	struct:SDTSModuleIterator::SDTSModuleIteratorImp
get	.\Utils\SQLUtils.cpp	/^sqlite3 * sql_db::get(void) { return db; }$/;"	f	class:sql_db
get	.\Utils\XUtils.cpp	/^	void	get(int i, float xyz[3], float st[2])$/;"	f	struct:XPointPool::XPointPoolImp
get	.\Utils\XUtils.cpp	/^string	StTextFileScanner::get()$/;"	f	class:StTextFileScanner
get	.\Utils\XUtils.cpp	/^void	XPointPool::get(int index, float xyz[3], float st[2])$/;"	f	class:XPointPool
get	.\XESCore\DEMDefs.h	/^inline bool	DEMMask::get(int x, int y) const$/;"	f	class:DEMMask
get	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get(int x, int y) const$/;"	f	class:DEMGeo
get	.\lib_json\src\lib_json\json_value.cpp	/^Value::get( ArrayIndex index, $/;"	f	class:Json::Value
get	.\lib_json\src\lib_json\json_value.cpp	/^Value::get( const CppTL::ConstString &key,$/;"	f	class:Json::Value
get	.\lib_json\src\lib_json\json_value.cpp	/^Value::get( const char *key, $/;"	f	class:Json::Value
get	.\lib_json\src\lib_json\json_value.cpp	/^Value::get( const std::string &key,$/;"	f	class:Json::Value
getAssertionNestingLevel	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::getAssertionNestingLevel() const$/;"	f	class:JsonTest::TestResult
getComment	.\lib_json\src\lib_json\json_value.cpp	/^Value::getComment( CommentPlacement placement ) const$/;"	f	class:Json::Value
getFile_Open	.\Utils\PlatformUtils.h	/^	getFile_Open,$/;"	e	enum:__anon95
getFile_OpenImages	.\Utils\PlatformUtils.h	/^	getFile_OpenImages \/\/Only allows supported image types to be chosen, windows only$/;"	e	enum:__anon95
getFile_PickFolder	.\Utils\PlatformUtils.h	/^	getFile_PickFolder,$/;"	e	enum:__anon95
getFile_Save	.\Utils\PlatformUtils.h	/^	getFile_Save,$/;"	e	enum:__anon95
getFormatedErrorMessages	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::getFormatedErrorMessages() const$/;"	f	class:Json::Reader
getFormattedErrorMessages	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::getFormattedErrorMessages() const$/;"	f	class:Json::Reader
getLocationLineAndColumn	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::getLocationLineAndColumn( Location location ) const$/;"	f	class:Json::Reader
getLocationLineAndColumn	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::getLocationLineAndColumn( Location location,$/;"	f	class:Json::Reader
getMemberNames	.\lib_json\src\lib_json\json_value.cpp	/^Value::getMemberNames() const$/;"	f	class:Json::Value
getNextChar	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::getNextChar()$/;"	f	class:Json::Reader
get_JSON_BUF	.\WEDImportExport\WED_GatewayImport.cpp	/^	const vector<char> & get_JSON_BUF() { return rawJSONBuf; }$/;"	f	class:RAII_CURL_HNDL
get_all_used_texes	.\AC3DPlugins\ac_utils.cpp	/^void	get_all_used_texes(ACObject * obj, set<int>& out_texes)$/;"	f
get_any_resource_for_thing	.\WEDWindows\WED_GroupCommands.cpp	/^static bool get_any_resource_for_thing(WED_Thing * thing, string& r)$/;"	f	file:
get_att	.\WEDCore\WED_XMLReader.h	/^inline const XML_Char * get_att(const char * name, const XML_Char ** atts)$/;"	f
get_bt	.\XESCore\BlockFill.cpp	/^pair<int,int>	candy_bar::get_bt(int a, int b)$/;"	f	class:candy_bar
get_ccb_area	.\XESCore\BlockFill.cpp	/^static double get_ccb_area(Block_2::Ccb_halfedge_circulator first)$/;"	f	file:
get_clamp	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_clamp(int x, int y) const$/;"	f	class:DEMGeo
get_common_parent	.\AC3DPlugins\ac_utils.cpp	/^ACObject *	get_common_parent(const vector<ACObject *>& objs)$/;"	f
get_curl_handle	.\WEDImportExport\WED_GatewayImport.cpp	/^	curl_http_get_file * const get_curl_handle() { return curl_handle; }$/;"	f	class:RAII_CURL_HNDL
get_dataref_value	.\AC3DPlugins\obj_anim.cpp	/^static float get_dataref_value(const char * dataref)$/;"	f	file:
get_dir	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_dir(int x, int y, int dx, int dy, int max, float blank, float& outDist) const$/;"	f	class:DEMGeo
get_edge_feature	.\XESCore\MeshDefs.h	/^	inline	bool get_edge_feature(int e) const { return edge_flags[e] & flag_Feature; }$/;"	f	struct:MeshFaceInfo
get_error	.\Network\curl_http.cpp	/^int	curl_http_get_file::get_error(void)$/;"	f	class:curl_http_get_file
get_error_data	.\Network\curl_http.cpp	/^void	curl_http_get_file::get_error_data(vector<char>& out_data)$/;"	f	class:curl_http_get_file
get_float_attr	.\OneOffs\osm_tile.c	/^float get_float_attr(const char * key, const XML_Char ** atts,float d)$/;"	f
get_he_feat_type	.\XESCore\NetHelpers.h	/^inline int get_he_feat_type(Pmwx::Halfedge_handle he)$/;"	f
get_he_is_bridge	.\XESCore\NetHelpers.h	/^inline int get_he_is_bridge(Pmwx::Halfedge_handle he)$/;"	f
get_he_is_bridge_xon	.\XESCore\NetHelpers.h	/^inline int get_he_is_bridge_xon(Pmwx::Halfedge_handle he)$/;"	f
get_he_is_on_ground	.\XESCore\NetHelpers.h	/^inline int get_he_is_on_ground(Pmwx::Halfedge_handle he)$/;"	f
get_he_level_at	.\XESCore\NetHelpers.h	/^inline double get_he_level_at(Pmwx::Halfedge_handle he, Pmwx::Vertex_handle v)$/;"	f
get_he_limited_access	.\XESCore\NetHelpers.h	/^inline int get_he_limited_access(Pmwx::Halfedge_handle he)$/;"	f
get_he_rep_type	.\XESCore\NetHelpers.h	/^inline int get_he_rep_type(Pmwx::Halfedge_handle he)$/;"	f
get_he_road_dir	.\XESCore\NetHelpers.h	/^inline Vector2 get_he_road_dir(Pmwx::Halfedge_handle he)$/;"	f
get_he_road_dot	.\XESCore\NetHelpers.h	/^inline double get_he_road_dot(Pmwx::Halfedge_handle h1,Pmwx::Halfedge_handle h2)$/;"	f
get_he_road_use	.\XESCore\NetHelpers.h	/^inline int get_he_road_use(Pmwx::Halfedge_handle he)$/;"	f
get_he_street	.\XESCore\NetHelpers.h	/^inline int get_he_street(Pmwx::Halfedge_handle he)$/;"	f
get_he_with_roads	.\XESCore\NetHelpers.h	/^inline Pmwx::Halfedge_handle get_he_with_roads(Pmwx::Halfedge_handle he)$/;"	f
get_image_data	.\AC3DPlugins\bitmap_match.cpp	/^static unsigned char * get_image_data(ACImage * im)$/;"	f	file:
get_initialized	.\XESCore\MeshConformer.h	/^  Initialization get_initialized() const { return initialized; }$/;"	f	class:CGAL::Triangulation_conformer_any_2
get_int_attr	.\OneOffs\osm_tile.c	/^int get_int_attr(const char * key, const XML_Char ** atts,int d)$/;"	f
get_keyframe_range	.\AC3DPlugins\obj_anim.cpp	/^int		get_keyframe_range			(ACObject * obj, float& lo, float& hi)$/;"	f
get_layer	.\WEDMap\WED_PreviewLayer.h	/^	virtual	int	 get_layer(void) { return layer; }$/;"	f	struct:WED_PreviewItem
get_left_semi	.\OneOffs\gen_roads10.h	/^	float get_left_semi() { return center_marker(); }$/;"	f	class:published_road
get_line	.\Installer\InstallerScript.cpp	/^char *	get_line(FILE * fi, char * buf, int max)$/;"	f
get_lineage	.\AC3DPlugins\ac_utils.cpp	/^void		get_lineage(ACObject * obj, vector<ACObject *>& ancestors)$/;"	f
get_lowest	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_lowest(int x, int y, int r) const$/;"	f	class:DEMGeo
get_lowest	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_lowest(int x, int y, int r, int& xo, int& yo) const$/;"	f	class:DEMGeo
get_lowest_heuristic	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_lowest_heuristic(int x, int y, int r) const$/;"	f	class:DEMGeo
get_lr	.\XESCore\BlockFill.cpp	/^pair<int,int>	candy_bar::get_lr(int a, int b)$/;"	f	class:candy_bar
get_max	.\Utils\UTL_interval.h	/^T		UTL_interval<T>::get_max(void) const { return schedule.back(); }$/;"	f	class:UTL_interval
get_median	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_median(double lon, double lat, double xstep, double ystep, int r) const$/;"	f	class:DEMGeo
get_min	.\Utils\UTL_interval.h	/^T		UTL_interval<T>::get_min(void) const { return schedule.front(); }$/;"	f	class:UTL_interval
get_minmax	.\Obj\ObjPointPool.cpp	/^void ObjPointPool::get_minmax(float minCoords[3], float maxCoords[3]) const$/;"	f	class:ObjPointPool
get_other	.\XESCore\NetPlacement.cpp	/^Net_ChainInfo_t * Net_JunctionInfo_t::get_other(Net_ChainInfo_t * me)$/;"	f	class:Net_JunctionInfo_t
get_pow2	.\GUI\GUI_Fonts.cpp	/^inline int get_pow2(int n)$/;"	f
get_progress	.\Network\curl_http.cpp	/^float		curl_http_get_file::get_progress(void)$/;"	f	class:curl_http_get_file
get_radial	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::get_radial(int x, int y, int max, float blank) const$/;"	f	class:DEMGeo
get_right_semi	.\OneOffs\gen_roads10.h	/^	float get_right_semi() { return width - center_marker(); }$/;"	f	class:published_road
get_row	.\Utils\SQLUtils.h	/^	int get_row(R& row)$/;"	f	class:sql_command
get_runway_parts	.\WEDEntities\WED_TaxiRoute.cpp	/^static void get_runway_parts(int rwy, set<int>& rwy_parts)$/;"	f	file:
get_sel_single_grp	.\AC3DPlugins\obj_editor.cpp	/^static ACObject * get_sel_single_grp(int n)$/;"	f	file:
get_sel_single_light	.\AC3DPlugins\obj_editor.cpp	/^static ACObject * get_sel_single_light(int n)$/;"	f	file:
get_sel_single_obj	.\AC3DPlugins\obj_editor.cpp	/^ACObject * get_sel_single_obj(int n)$/;"	f
get_selection_bounds	.\AC3DPlugins\ac_utils.cpp	/^int get_selection_bounds(float minv[3], float maxv[3])$/;"	f
get_str_attr	.\OneOffs\osm_tile.c	/^const char * get_str_attr(const char * key, const XML_Char ** atts)$/;"	f
get_sub_panel_b	.\AC3DPlugins\obj_panel.cpp	/^int		get_sub_panel_b(int r)$/;"	f
get_sub_panel_count	.\AC3DPlugins\obj_panel.cpp	/^int		get_sub_panel_count(void)$/;"	f
get_sub_panel_for_mesh	.\AC3DPlugins\obj_panel.cpp	/^int	get_sub_panel_for_mesh(ACObject * obj)$/;"	f
get_sub_panel_l	.\AC3DPlugins\obj_panel.cpp	/^int		get_sub_panel_l(int r)$/;"	f
get_sub_panel_r	.\AC3DPlugins\obj_panel.cpp	/^int		get_sub_panel_r(int r)$/;"	f
get_sub_panel_t	.\AC3DPlugins\obj_panel.cpp	/^int		get_sub_panel_t(int r)$/;"	f
get_terrain_name	.\XESCore\DSFBuilder.cpp	/^string		get_terrain_name(int composite)$/;"	f
get_top	.\OneOffs\gen_roads.cpp	/^road_container * get_top(void) { assert(!road_stack.empty()); return road_stack.back(); }$/;"	f
get_width	.\OneOffs\gen_roads.cpp	/^	virtual float	get_width() { return 0; }$/;"	f	class:road_blade
get_width	.\OneOffs\gen_roads.cpp	/^	virtual float	get_width() { return parent->get_width(); }$/;"	f	class:road_underside
get_width	.\OneOffs\gen_roads.cpp	/^	virtual float	get_width() { return pixel_to_meter(tex,fabs(s2-s1)); }$/;"	f	class:road_deck
get_width	.\OneOffs\gen_roads.cpp	/^	virtual float	get_width() { return w; }$/;"	f	class:road_spacer
get_width	.\OneOffs\gen_roads.cpp	/^	virtual float	get_width()$/;"	f	class:road_composite
get_width	.\OneOffs\gen_roads.cpp	/^	virtual float get_width() { return e->get_width(); }$/;"	f	class:road_pylons
getd	.\WEDCore\WED_Properties.cpp	/^double	WED_Properties::getd(const char * key)$/;"	f	class:WED_Properties
geti	.\WEDCore\WED_Properties.cpp	/^double	WED_Properties::geti(const char * key)$/;"	f	class:WED_Properties
getoct	.\Utils\MemFileUtils.cpp	/^static int getoct(char *p,int width)$/;"	f	file:
getqmenu	.\GUI\GUI_Application.cpp	/^QMenuBar* GUI_Application::getqmenu()$/;"	f	class:GUI_Application
gets	.\WEDCore\WED_Properties.cpp	/^string	WED_Properties::gets(const char * key)$/;"	f	class:WED_Properties
gi	.\Utils\unzip.c	/^	unz_global_info gi;       \/* public global information *\/$/;"	m	struct:__anon102	file:
gid	.\Utils\MemFileUtils.cpp	/^  char gid[8];			\/* 116 *\/$/;"	m	struct:tar_header	file:
gis_Area	.\Interfaces\IGIS.h	/^	gis_Area,$/;"	e	enum:GISClass_t
gis_BoundingBox	.\Interfaces\IGIS.h	/^		gis_BoundingBox,$/;"	e	enum:GISClass_t
gis_Chain	.\Interfaces\IGIS.h	/^		gis_Chain,$/;"	e	enum:GISClass_t
gis_Composite	.\Interfaces\IGIS.h	/^	gis_Composite$/;"	e	enum:GISClass_t
gis_Edge	.\Interfaces\IGIS.h	/^		gis_Edge,$/;"	e	enum:GISClass_t
gis_Geo	.\Interfaces\IGIS.h	/^	gis_Geo  ,$/;"	e	enum:GISLayer_t
gis_Line	.\Interfaces\IGIS.h	/^		gis_Line,$/;"	e	enum:GISClass_t
gis_Line_Width	.\Interfaces\IGIS.h	/^			gis_Line_Width,$/;"	e	enum:GISClass_t
gis_Param	.\Interfaces\IGIS.h	/^	gis_Param$/;"	e	enum:GISLayer_t
gis_Point	.\Interfaces\IGIS.h	/^	gis_Point,$/;"	e	enum:GISClass_t
gis_PointSequence	.\Interfaces\IGIS.h	/^	gis_PointSequence,$/;"	e	enum:GISClass_t
gis_Point_Bezier	.\Interfaces\IGIS.h	/^		gis_Point_Bezier,$/;"	e	enum:GISClass_t
gis_Point_Heading	.\Interfaces\IGIS.h	/^		gis_Point_Heading,$/;"	e	enum:GISClass_t
gis_Point_HeadingWidthLength	.\Interfaces\IGIS.h	/^			gis_Point_HeadingWidthLength,$/;"	e	enum:GISClass_t
gis_Polygon	.\Interfaces\IGIS.h	/^		gis_Polygon,$/;"	e	enum:GISClass_t
gis_Ring	.\Interfaces\IGIS.h	/^		gis_Ring,$/;"	e	enum:GISClass_t
gis_UV	.\Interfaces\IGIS.h	/^	gis_UV   ,$/;"	e	enum:GISLayer_t
glActiveTextureARB	.\UI\XWinGL.win.cpp	/^PFNGLACTIVETEXTUREARBPROC    		glActiveTextureARB	;$/;"	v
glBegin	.\Utils\GLDebugMacros.h	23;"	d
glBindTexture	.\Utils\GLDebugMacros.h	36;"	d
glClear	.\Utils\GLDebugMacros.h	40;"	d
glClearColor	.\Utils\GLDebugMacros.h	41;"	d
glClientActiveTextureARB	.\UI\XWinGL.win.cpp	/^PFNGLCLIENTACTIVETEXTUREARBPROC    	glClientActiveTextureARB	;$/;"	v
glCompressedTexImage2DARB	.\UI\XWinGL.win.cpp	/^PFNGLCOMPRESSEDTEXIMAGE2DARBPROC	glCompressedTexImage2DARB	;$/;"	v
glDisable	.\Utils\GLDebugMacros.h	38;"	d
glDrawArrays	.\Utils\GLDebugMacros.h	21;"	d
glDrawElements	.\Utils\GLDebugMacros.h	22;"	d
glEnable	.\Utils\GLDebugMacros.h	37;"	d
glEnd	.\Utils\GLDebugMacros.h	24;"	d
glMultiTexCoord2fARB	.\UI\XWinGL.win.cpp	/^PFNGLMULTITEXCOORD2FARBPROC  		glMultiTexCoord2fARB	;$/;"	v
glMultiTexCoord2fvARB	.\UI\XWinGL.win.cpp	/^PFNGLMULTITEXCOORD2FVARBPROC 		glMultiTexCoord2fvARB;$/;"	v
glPolygon2	.\WEDMap\WED_DrawUtils.cpp	/^void glPolygon2(const Point2 * pts, bool has_uv, const int * contours, int n)$/;"	f
glShape2v	.\WEDMap\WED_DrawUtils.h	/^inline void glShape2v(GLenum mode,  const Point2 * p, int n) { glBegin(mode); glVertex2v(p,n); glEnd(); }$/;"	f
glShapeOffset2v	.\WEDMap\WED_DrawUtils.h	/^inline void glShapeOffset2v(GLenum mode,  const Point2 * pts, int n, double offset)$/;"	f
glTexCoord2	.\WEDMap\WED_DrawUtils.h	/^inline void glTexCoord2(const Point2& p) { glTexCoord2d(p.x(),p.y()); }$/;"	f
glTexImage1D	.\Utils\GLDebugMacros.h	26;"	d
glTexImage2D	.\Utils\GLDebugMacros.h	27;"	d
glTexImage3D	.\Utils\GLDebugMacros.h	28;"	d
glTexParameterf	.\Utils\GLDebugMacros.h	29;"	d
glTexParameterfv	.\Utils\GLDebugMacros.h	30;"	d
glTexParameteri	.\Utils\GLDebugMacros.h	31;"	d
glTexSubImage1D	.\Utils\GLDebugMacros.h	32;"	d
glTexSubImage2D	.\Utils\GLDebugMacros.h	33;"	d
glTexSubImage3D	.\Utils\GLDebugMacros.h	34;"	d
glVertex2	.\WEDMap\WED_DrawUtils.h	/^inline void glVertex2(const Point2& p) { glVertex2d(p.x(),p.y()); }$/;"	f
glVertex2v	.\WEDMap\WED_DrawUtils.h	/^inline void	glVertex2v(const Point2 * p, int n) { while(n--) { glVertex2d(p->x(),p->y()); ++p; } }$/;"	f
glWidget	.\UI\XWinGL.h	/^class glWidget : public QGLWidget$/;"	c
glWidget	.\UI\XWinGL.lin.cpp	/^glWidget::glWidget(QWidget *parent, XWinGL* xwin, QGLWidget* share) : QGLWidget(parent, share)$/;"	f	class:glWidget
gl_glyph	.\GUI\GUI_Laftfont.h	/^struct gl_glyph$/;"	s
gl_info	.\Utils\TexUtils.cpp	/^static gl_info_t gl_info = { 0 };$/;"	v	file:
gl_info_t	.\Utils\TexUtils.cpp	/^struct  gl_info_t {$/;"	s	file:
gl_major_version	.\Utils\TexUtils.cpp	/^	int		gl_major_version;$/;"	m	struct:gl_info_t	file:
gl_minor_version	.\Utils\TexUtils.cpp	/^	int		gl_minor_version;$/;"	m	struct:gl_info_t	file:
gl_quad	.\GUI\GUI_DrawUtils.cpp	/^inline void gl_quad(int l, int b, int r, int t, float s1, float t1, float s2, float t2)$/;"	f
global_package_names	.\WEDCore\WED_PackageMgr.h	/^	vector<string>	global_package_names;$/;"	m	class:WED_PackageMgr
glyphBuf	.\WEDCore\WED_Sign_Parser.cpp	/^	string glyphBuf;$/;"	m	class:WED_Sign_Parser	file:
glyph_color	.\WEDCore\WED_Sign_Parser.h	/^	parser_color_t glyph_color;$/;"	m	struct:parser_glyph_info
glyph_m	.\GUI\GUI_Laftfont.h	/^		glyph_metric	*glyph_m;$/;"	m	class:GUI_Laftfont
glyph_metric	.\GUI\GUI_Laftfont.h	/^struct glyph_metric$/;"	s
glyph_name	.\WEDCore\WED_Sign_Parser.h	/^	parser_glyph_t glyph_name;$/;"	m	struct:parser_glyph_info
gname	.\Utils\MemFileUtils.cpp	/^  char gname[32];		\/* 297 *\/$/;"	m	struct:tar_header	file:
good	.\XPTools\GetImage.cpp	/^int good = 0, fail = 0;$/;"	v
grab_patch	.\Utils\QuiltUtils.cpp	/^const unsigned long *	grab_patch(const unsigned long * base, int dx, int dy, int w, int h, int tile_size)$/;"	f
grad	.\OneOffs\gen_roads10.h	/^	grading_type	grad;$/;"	m	struct:obj_placement
grad	.\OneOffs\gen_roads10.h	/^	grading_type	grad;$/;"	m	struct:road_segment
grad	.\OneOffs\gen_roads10.h	/^	grading_type	grad;$/;"	m	struct:traffic_lane
graded	.\OneOffs\gen_roads10.h	/^	graded$/;"	e	enum:grading_type
graded_from_draped	.\OneOffs\gen_roads10.h	/^road	graded_from_draped(map<shader *, shader *> shaders, const road& r)$/;"	f
gradient_x	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::gradient_x(int x, int y) const$/;"	f	class:DEMGeo
gradient_x_bilinear	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::gradient_x_bilinear(float x, float y) const$/;"	f	class:DEMGeo
gradient_y	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::gradient_y(int x, int y) const$/;"	f	class:DEMGeo
gradient_y_bilinear	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::gradient_y_bilinear(float x, float y) const$/;"	f	class:DEMGeo
grading_type	.\OneOffs\gen_roads10.h	/^enum grading_type {$/;"	g
graph_array	.\DSF\tri_stripper_101\graph_array.h	/^class graph_array$/;"	c	namespace:common_structures
graph_array	.\DSF\tri_stripper_101\graph_array.h	/^inline graph_array<nodetype, arctype>::graph_array() : m_NbArcs(0) { }$/;"	f	class:common_structures::graph_array
graph_array	.\DSF\tri_stripper_101\graph_array.h	/^inline graph_array<nodetype, arctype>::graph_array(const size_t NbNodes) : m_NbArcs(0), m_Nodes(NbNodes) { }$/;"	f	class:common_structures::graph_array
grass	.\OneOffs\gen_roads10.h	/^	grass,$/;"	e	enum:surface_type
gravel	.\OneOffs\gen_roads10.h	/^	gravel,$/;"	e	enum:surface_type
grdx	.\XESCore\TensorRoads.cpp	/^	const DEMGeo *	grdx;$/;"	m	struct:Tensor_info	file:
grdy	.\XESCore\TensorRoads.cpp	/^	const DEMGeo *	grdy;$/;"	m	struct:Tensor_info	file:
greater_x_then_y	.\Utils\CompGeomDefs2.h	/^struct greater_x_then_y {$/;"	s
greater_y_then_x	.\Utils\CompGeomDefs2.h	/^struct greater_y_then_x {$/;"	s
greater_y_then_x_then_z	.\Utils\CompGeomDefs3.h	/^struct greater_y_then_x_then_z {$/;"	s
greatest_abs_3	.\ObjEdit\OE_CubeDeformer.cpp	/^inline	double	greatest_abs_3(double a, double b, double c)$/;"	f
greenwich	.\RawImport\gshhs.h	/^	short int greenwich;		\/* Greenwich is 1 if Greenwich is crossed *\/$/;"	m	struct:GSHHS
grid	.\OneOffs\osm_tile.c	/^static int grid = 1;$/;"	v	file:
grind_file	.\XPTools\XGrinderShell.cpp	/^void	grind_file(const char * inFileName)$/;"	f
ground_road_access_for_he	.\XESCore\NetHelpers.h	/^inline bool		ground_road_access_for_he(Pmwx::Halfedge_handle he)$/;"	f
ground_train_access_for_he	.\XESCore\NetHelpers.h	/^inline bool		ground_train_access_for_he(Pmwx::Halfedge_handle he)$/;"	f
group	.\WEDCore\WED_ResourceMgr.h	/^	string		group;$/;"	m	struct:pol_info_t
group_AirportsBegin	.\WEDMap\WED_PreviewLayer.h	/^	group_AirportsBegin	= 60,			$/;"	e	enum:__anon122
group_AirportsEnd	.\WEDMap\WED_PreviewLayer.h	/^	group_AirportsEnd = 1930,$/;"	e	enum:__anon122
group_Beaches	.\WEDMap\WED_PreviewLayer.h	/^	group_Beaches	= 25,				$/;"	e	enum:__anon122
group_Footprints	.\WEDMap\WED_PreviewLayer.h	/^	group_Footprints	= 1940,			$/;"	e	enum:__anon122
group_LightObjects	.\WEDMap\WED_PreviewLayer.h	/^	group_LightObjects	= 1965,$/;"	e	enum:__anon122
group_Markings	.\WEDMap\WED_PreviewLayer.h	/^		group_Markings = 1920,			$/;"	e	enum:__anon122
group_Objects	.\WEDMap\WED_PreviewLayer.h	/^	group_Objects		= 1960,$/;"	e	enum:__anon122
group_Roads	.\WEDMap\WED_PreviewLayer.h	/^	group_Roads			= 1950,$/;"	e	enum:__anon122
group_RunwaysBegin	.\WEDMap\WED_PreviewLayer.h	/^		group_RunwaysBegin = 1100,		$/;"	e	enum:__anon122
group_RunwaysEnd	.\WEDMap\WED_PreviewLayer.h	/^		group_RunwaysEnd = 1900,		$/;"	e	enum:__anon122
group_ShouldersBegin	.\WEDMap\WED_PreviewLayer.h	/^		group_ShouldersBegin = 70,$/;"	e	enum:__anon122
group_ShouldersEnd	.\WEDMap\WED_PreviewLayer.h	/^		group_ShouldersEnd = 90,$/;"	e	enum:__anon122
group_TaxiwaysBegin	.\WEDMap\WED_PreviewLayer.h	/^		group_TaxiwaysBegin = 100,		$/;"	e	enum:__anon122
group_TaxiwaysEnd	.\WEDMap\WED_PreviewLayer.h	/^		group_TaxiwaysEnd = 1000,		$/;"	e	enum:__anon122
group_Terrain	.\WEDMap\WED_PreviewLayer.h	/^	group_Terrain	= 5,				$/;"	e	enum:__anon122
group_hi	.\WEDMap\WED_PreviewLayer.cpp	/^const struct { const char * name; int group_lo;  int group_hi; }	kGroupNames[] = {$/;"	m	struct:__anon121	file:
group_lo	.\WEDMap\WED_PreviewLayer.cpp	/^const struct { const char * name; int group_lo;  int group_hi; }	kGroupNames[] = {$/;"	m	struct:__anon121	file:
group_offset	.\WEDCore\WED_ResourceMgr.h	/^	int			group_offset;$/;"	m	struct:pol_info_t
grow_sphere	.\Obj\XObjWriteEmbedded.cpp	/^inline void grow_sphere(float cur[4], const float add[4])$/;"	f
guess_obj_axis	.\AC3DPlugins\obj_anim.cpp	/^static void guess_obj_axis(float f)$/;"	f	file:
gui_About	.\GUI\GUI_Menus.h	/^	gui_About = 1000,$/;"	e	enum:__anon26
gui_Bool_Check	.\GUI\GUI_TextTable.h	/^	gui_Bool_Check,$/;"	e	enum:GUI_BoolIcon
gui_Bool_Lock	.\GUI\GUI_TextTable.h	/^	gui_Bool_Lock,$/;"	e	enum:GUI_BoolIcon
gui_Bool_Visible	.\GUI\GUI_TextTable.h	/^	gui_Bool_Visible$/;"	e	enum:GUI_BoolIcon
gui_Cell_CheckBox	.\GUI\GUI_TextTable.h	/^	gui_Cell_CheckBox,			\/\/ int val				int val$/;"	e	enum:GUI_CellContentType
gui_Cell_Disclose	.\GUI\GUI_TextTable.h	/^	gui_Cell_Disclose,			\/\/ n\/a - this is used as an internal symbol for disclosure tris$/;"	e	enum:GUI_CellContentType
gui_Cell_Double	.\GUI\GUI_TextTable.h	/^	gui_Cell_Double,			\/\/ string&double val	double val$/;"	e	enum:GUI_CellContentType
gui_Cell_EditText	.\GUI\GUI_TextTable.h	/^	gui_Cell_EditText,			\/\/ string&string		string$/;"	e	enum:GUI_CellContentType
gui_Cell_Enum	.\GUI\GUI_TextTable.h	/^	gui_Cell_Enum,				\/\/ string&int			string&int$/;"	e	enum:GUI_CellContentType
gui_Cell_EnumSet	.\GUI\GUI_TextTable.h	/^	gui_Cell_EnumSet			\/\/ string val&int set	int set, int$/;"	e	enum:GUI_CellContentType
gui_Cell_FileText	.\GUI\GUI_TextTable.h	/^	gui_Cell_FileText,			\/\/ string&string		string$/;"	e	enum:GUI_CellContentType
gui_Cell_Integer	.\GUI\GUI_TextTable.h	/^	gui_Cell_Integer,			\/\/ string&int val		int val$/;"	e	enum:GUI_CellContentType
gui_Cell_None	.\GUI\GUI_TextTable.h	/^	gui_Cell_None,$/;"	e	enum:GUI_CellContentType
gui_Clear	.\GUI\GUI_Menus.h	/^	gui_Clear,$/;"	e	enum:__anon26
gui_ClipType_Invalid	.\GUI\GUI_Defs.h	216;"	d
gui_Clip_Text	.\GUI\GUI_Clipboard.cpp	/^	gui_Clip_Text = 0,$/;"	e	enum:__anon20	file:
gui_Close	.\GUI\GUI_Menus.h	/^	gui_Close,$/;"	e	enum:__anon26
gui_ControlFlag	.\GUI\GUI_Defs.h	/^     gui_ControlFlag                         = 4,$/;"	e	enum:__anon21
gui_Copy	.\GUI\GUI_Menus.h	/^	gui_Copy,$/;"	e	enum:__anon26
gui_Cursor_Arrow	.\GUI\GUI_Defs.h	/^	gui_Cursor_Arrow,$/;"	e	enum:__anon22
gui_Cursor_None	.\GUI\GUI_Defs.h	/^	gui_Cursor_None = 0,$/;"	e	enum:__anon22
gui_Cursor_Resize_H	.\GUI\GUI_Defs.h	/^	gui_Cursor_Resize_H,$/;"	e	enum:__anon22
gui_Cursor_Resize_V	.\GUI\GUI_Defs.h	/^	gui_Cursor_Resize_V$/;"	e	enum:__anon22
gui_Cut	.\GUI\GUI_Menus.h	/^	gui_Cut,$/;"	e	enum:__anon26
gui_DownFlag	.\GUI\GUI_Defs.h	/^     gui_DownFlag                            = 8,$/;"	e	enum:__anon21
gui_Drag_Copy	.\GUI\GUI_Defs.h	/^	gui_Drag_Copy	=	2,$/;"	e	enum:__anon23
gui_Drag_Move	.\GUI\GUI_Defs.h	/^	gui_Drag_Move	=	1,$/;"	e	enum:__anon23
gui_Drag_None	.\GUI\GUI_Defs.h	/^	gui_Drag_None	=	0,$/;"	e	enum:__anon23
gui_Duplicate	.\GUI\GUI_Menus.h	/^	gui_Duplicate,$/;"	e	enum:__anon26
gui_First_Private	.\GUI\GUI_Clipboard.cpp	/^	gui_First_Private$/;"	e	enum:__anon20	file:
gui_Insert_Bottom	.\GUI\GUI_TextTable.h	/^		gui_Insert_Bottom,$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Insert_Left	.\GUI\GUI_TextTable.h	/^		gui_Insert_Left,				\/\/ INsertions - BETWEEN cells, based on this position relative to the insert cell.$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Insert_Right	.\GUI\GUI_TextTable.h	/^		gui_Insert_Right,$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Insert_Top	.\GUI\GUI_TextTable.h	/^		gui_Insert_Top$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Key_Map	.\GUI\GUI_Window.cpp	/^const char	gui_Key_Map [256] = {$/;"	v
gui_New	.\GUI\GUI_Menus.h	/^	gui_New,$/;"	e	enum:__anon26
gui_Open	.\GUI\GUI_Menus.h	/^	gui_Open,$/;"	e	enum:__anon26
gui_OptionAltFlag	.\GUI\GUI_Defs.h	/^     gui_OptionAltFlag                       = 2,$/;"	e	enum:__anon21
gui_Pack_Bottom	.\GUI\GUI_Packer.h	/^	gui_Pack_Bottom,$/;"	e	enum:GUI_Packer_Side
gui_Pack_Center	.\GUI\GUI_Packer.h	/^	gui_Pack_Center$/;"	e	enum:GUI_Packer_Side
gui_Pack_Left	.\GUI\GUI_Packer.h	/^	gui_Pack_Left,$/;"	e	enum:GUI_Packer_Side
gui_Pack_Right	.\GUI\GUI_Packer.h	/^	gui_Pack_Right,$/;"	e	enum:GUI_Packer_Side
gui_Pack_Top	.\GUI\GUI_Packer.h	/^	gui_Pack_Top,$/;"	e	enum:GUI_Packer_Side
gui_Paste	.\GUI\GUI_Menus.h	/^	gui_Paste,$/;"	e	enum:__anon26
gui_Prefs	.\GUI\GUI_Menus.h	/^	gui_Prefs,$/;"	e	enum:__anon26
gui_Quit	.\GUI\GUI_Menus.h	/^	gui_Quit,$/;"	e	enum:__anon26
gui_Redo	.\GUI\GUI_Menus.h	/^	gui_Redo,$/;"	e	enum:__anon26
gui_Revert	.\GUI\GUI_Menus.h	/^	gui_Revert,$/;"	e	enum:__anon26
gui_Save	.\GUI\GUI_Menus.h	/^	gui_Save,$/;"	e	enum:__anon26
gui_SelectAll	.\GUI\GUI_Menus.h	/^	gui_SelectAll,$/;"	e	enum:__anon26
gui_SelectNone	.\GUI\GUI_Menus.h	/^	gui_SelectNone,$/;"	e	enum:__anon26
gui_ShiftFlag	.\GUI\GUI_Defs.h	/^     gui_ShiftFlag                           = 1,$/;"	e	enum:__anon21
gui_Split_Horizontal	.\GUI\GUI_Splitter.h	/^	gui_Split_Horizontal,$/;"	e	enum:__anon29
gui_Split_Vertical	.\GUI\GUI_Splitter.h	/^	gui_Split_Vertical$/;"	e	enum:__anon29
gui_Table_Cell	.\GUI\GUI_TextTable.h	/^		gui_Table_Cell,					\/\/ Just the cell! - INTO cell$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Table_Column	.\GUI\GUI_TextTable.h	/^		gui_Table_Column,				\/\/ Entire col at once - INTO cell$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Table_None	.\GUI\GUI_TextTable.h	/^		gui_Table_None,					\/\/ No drag$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Table_Row	.\GUI\GUI_TextTable.h	/^		gui_Table_Row,					\/\/ Entire row at once - INTO cell$/;"	e	enum:GUI_TextTable::GUI_DragTableDest
gui_Undo	.\GUI\GUI_Menus.h	/^	gui_Undo,$/;"	e	enum:__anon26
gui_UpFlag	.\GUI\GUI_Defs.h	/^     gui_UpFlag                              = 16$/;"	e	enum:__anon21
gui_form_cancel	.\GUI\GUI_FormWindow.cpp	/^	gui_form_cancel$/;"	e	enum:__anon25	file:
gui_form_ok	.\GUI\GUI_FormWindow.cpp	/^	gui_form_ok = GUI_APP_MESSAGES,$/;"	e	enum:__anon25	file:
guts	.\OneOffs\gen_roads10.h	/^	road	guts;$/;"	m	class:published_road
gw_comments	.\WEDImportExport\WED_GatewayExport.cpp	/^	gw_comments$/;"	e	enum:__anon120	file:
gw_icao	.\WEDImportExport\WED_GatewayExport.cpp	/^	gw_icao = 1,$/;"	e	enum:__anon120	file:
gw_password	.\WEDImportExport\WED_GatewayExport.cpp	/^	gw_password,$/;"	e	enum:__anon120	file:
gw_username	.\WEDImportExport\WED_GatewayExport.cpp	/^	gw_username,$/;"	e	enum:__anon120	file:
h	.\XPTools\TaxiMaker.cpp	/^	int						h;$/;"	m	struct:taxi_element_t	file:
h_	.\XESCore\DEMTables.cpp	/^	bool			h_;$/;"	m	struct:float_between_iterator	file:
hack_t	.\WEDWindows\WED_GroupCommands.cpp	/^typedef	pair<ISelection *, vector<WED_Thing *> * >	hack_t;$/;"	t	file:
halfedge_for_vertices	.\XESCore\MapHelpers.h	/^typename Arr::Halfedge_handle halfedge_for_vertices(typename Arr::Vertex_handle v1, typename Arr::Vertex_handle v2, const set<typename Arr::Vertex_handle>& wrong_ways)$/;"	f
halfedges	.\RenderFarmUI\RF_DrawMap.h	/^	HalfedgeTree 	halfedges;$/;"	m	struct:PmwxIndex_t
handle	.\GUI\GUI_Clipboard.cpp	/^	HGLOBAL handle;$/;"	m	struct:StGlobalBlock	file:
handle	.\GUI\GUI_Clipboard.cpp	/^	HGLOBAL handle;$/;"	m	struct:StGlobalLock	file:
handle_Arrow	.\Interfaces\IControlHandles.h	/^	handle_Arrow,		\/\/ Arrow with stem$/;"	e	enum:HandleType_t
handle_ArrowHead	.\Interfaces\IControlHandles.h	/^	handle_ArrowHead,	\/\/ Arrow head, no stem$/;"	e	enum:HandleType_t
handle_Bezier	.\Interfaces\IControlHandles.h	/^	handle_Bezier,		\/\/ Bezier control handle endpoint$/;"	e	enum:HandleType_t
handle_ClosePt	.\Interfaces\IControlHandles.h	/^	handle_ClosePt,		\/\/ Point to hit to close a loop$/;"	e	enum:HandleType_t
handle_Cross	.\Interfaces\IControlHandles.h	/^	handle_Cross,		\/\/ Cross for precise placement$/;"	e	enum:HandleType_t
handle_Icon	.\Interfaces\IControlHandles.h	/^	handle_Icon			\/\/ Hande is an icon - icon is drawn by someone else!$/;"	e	enum:HandleType_t
handle_None	.\Interfaces\IControlHandles.h	/^	handle_None,		\/\/ Draw nothing$/;"	e	enum:HandleType_t
handle_Rotate	.\Interfaces\IControlHandles.h	/^	handle_Rotate,		\/\/ Rotate with stem$/;"	e	enum:HandleType_t
handle_RotateHead	.\Interfaces\IControlHandles.h	/^	handle_RotateHead,	\/\/ Rotate head, no stem$/;"	e	enum:HandleType_t
handle_Square	.\Interfaces\IControlHandles.h	/^	handle_Square,		\/\/ Default square for marquee$/;"	e	enum:HandleType_t
handle_Vertex	.\Interfaces\IControlHandles.h	/^	handle_Vertex,		\/\/ Movable vertex (forms a bezier curve)$/;"	e	enum:HandleType_t
handle_VertexSharp	.\Interfaces\IControlHandles.h	/^	handle_VertexSharp,	\/\/ Movable vertex (no bezier curve)$/;"	e	enum:HandleType_t
handle_req_agp	.\WEDImportExport\WED_DSFImport.cpp	/^	void handle_req_agp(const char * str)$/;"	f	class:DSF_Importer
handle_req_fac	.\WEDImportExport\WED_DSFImport.cpp	/^	void handle_req_fac(const char * str)$/;"	f	class:DSF_Importer
handle_req_obj	.\WEDImportExport\WED_DSFImport.cpp	/^	void handle_req_obj(const char * str)$/;"	f	class:DSF_Importer
handlers	.\WEDCore\WED_XMLReader.h	/^	list<WED_XMLHandler *>	handlers;$/;"	m	class:WED_XMLReader
hard	.\Obj\XObjBuilder.h	/^ 	string		hard;				string	o_hard;$/;"	m	class:XObjBuilder
hard_verts	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned short	hard_verts;		\/\/ count of hard verticies$/;"	m	struct:embed_props_t	file:
hasComment	.\lib_json\src\lib_json\json_value.cpp	/^Value::hasComment( CommentPlacement placement ) const$/;"	f	class:Json::Value
hasCommentForValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::hasCommentForValue( const Value &value )$/;"	f	class:Json::StyledStreamWriter
hasCommentForValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::hasCommentForValue( const Value &value )$/;"	f	class:Json::StyledWriter
has_3d	.\WEDImportExport\WED_GatewayExport.cpp	/^static bool has_3d(WED_Airport * who) { return has_any_of_class(who, k_3d_classes); }$/;"	f	file:
has_anchor1	.\WEDMap\WED_MapToolNew.h	/^	bool		has_anchor1;		Point2	anchor1;$/;"	m	class:WED_MapToolNew
has_anchor2	.\WEDMap\WED_MapToolNew.h	/^	bool		has_anchor2;		Point2	anchor2;$/;"	m	class:WED_MapToolNew
has_any_of_class	.\WEDImportExport\WED_GatewayExport.cpp	/^static bool has_any_of_class(WED_Thing * who, const char ** classes)$/;"	f	file:
has_anything	.\OneOffs\osm2shape.c	/^	int			has_anything;		\/\/ This tracks whether we have any attributes other than type...even ones we dropped.  (The problem $/;"	m	struct:rel_info_tag	file:
has_atc	.\WEDEntities\WED_Airport.h	/^	WED_PropBoolText			has_atc;$/;"	m	class:WED_Airport
has_atc_flow	.\WEDImportExport\WED_GatewayExport.cpp	/^static bool has_atc_flow(WED_Airport * who)       { return has_any_of_class(who, k_atc_flow_class); }$/;"	f	file:
has_atc_taxi_route	.\WEDImportExport\WED_GatewayExport.cpp	/^static bool has_atc_taxi_route(WED_Airport * who) { return has_any_of_class(who, k_atc_taxi_route_class); }$/;"	f	file:
has_atc_twr	.\XESCore\AptDefs.h	/^	int					has_atc_twr;$/;"	m	struct:AptInfo_t
has_beach	.\XESCore\DSFBuilder.cpp	/^int	has_beach(const CDT::Edge& inEdge, const CDT& inMesh, int& kind)$/;"	f
has_buoys	.\XESCore\AptDefs.h	/^	int			has_buoys;$/;"	m	struct:AptSealane_t
has_centerline	.\XESCore\AptDefs.h	/^	int			has_centerline;$/;"	m	struct:AptRunway_t
has_complete	.\XESCore\MapHelpers.h	/^	bool						has_complete;$/;"	m	class:check_split_zone_visitor
has_distance	.\WEDMap\WED_MapToolNew.h	/^	bool		has_distance;		double	distance;$/;"	m	class:WED_MapToolNew
has_distance_remaining	.\XESCore\AptDefs.h	/^	int			has_distance_remaining;$/;"	m	struct:AptRunway_t
has_dsf	.\WEDImportExport\WED_GatewayExport.cpp	/^static bool has_dsf(WED_Airport * who) { return has_any_of_class(who, k_dsf_classes); }$/;"	f	file:
has_edge_clamp	.\Utils\TexUtils.cpp	/^	bool	has_edge_clamp;$/;"	m	struct:gl_info_t	file:
has_heading	.\WEDMap\WED_MapToolNew.h	/^	bool		has_heading;		double	heading;$/;"	m	class:WED_MapToolNew
has_hi	.\Utils\CompGeomDefs2.h	/^	bool		has_hi(void) const { return hi != pt; }$/;"	f	struct:BezierPoint2
has_lo	.\Utils\CompGeomDefs2.h	/^	bool		has_lo(void) const { return lo != pt; }$/;"	f	struct:BezierPoint2
has_mask	.\XESTools\GISTool_DemCmds.cpp	/^static bool has_mask = false;$/;"	v	file:
has_msl	.\WEDEntities\WED_ObjPlacement.h	/^	WED_PropBoolText		has_msl;$/;"	m	class:WED_ObjPlacement
has_no_xon	.\XESCore\MeshAlgs.cpp	/^inline bool has_no_xon(int tex1, int tex2)$/;"	f
has_non_pots	.\Utils\TexUtils.cpp	/^	bool	has_non_pots;$/;"	m	struct:gl_info_t	file:
has_overlap	.\XESCore\MapHelpers.h	/^	bool						has_overlap;$/;"	m	class:check_split_zone_visitor
has_split	.\XESCore\MapHelpers.h	/^	bool						has_split;$/;"	m	class:check_split_zone_visitor
has_tdzl	.\XESCore\AptDefs.h	/^	int			has_tdzl[2];$/;"	m	struct:AptRunway_t
has_tex_compression	.\Utils\TexUtils.cpp	/^	bool	has_tex_compression;$/;"	m	struct:gl_info_t	file:
has_uv	.\WEDMap\WED_PreviewLayer.cpp	/^	bool has_uv;$/;"	m	struct:preview_polygon	file:
hash	.\DSF\DSFPointPool.h	/^inline size_t DSFTuple::hash(void) const$/;"	f	class:DSFTuple
hash	.\Obj\XDefs.h	/^			struct hash<float>$/;"	s	namespace:__gnu_cxx
hash	.\Obj\XDefs.h	/^			struct hash<std::string>$/;"	s	namespace:__gnu_cxx
hash	.\OneOffs\osm_tile.c	/^int hash(int x, int y) { return (x + 181) + (y + 90) * 362; }$/;"	f
hash_depth	.\DSF\DSFLibWrite.cpp	/^		int					hash_depth;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
hash_fname	.\OneOffs\osm_tile.c	/^char * hash_fname(int x, int y, char * buf) { sprintf(buf,"%+03d%+04d.osm.gz",y,x); return buf; }$/;"	f
hash_ll	.\RawImport\AptElev.h	/^inline int hash_ll(int lon, int lat) {	return (lon+180) + 360 * (lat+90); }$/;"	f
hash_ll	.\XESCore\AptAlgs.cpp	/^inline int hash_ll(int lon, int lat) {	return (lon+180) + 360 * (lat+90); }$/;"	f
hash_value	.\DSF\DSFPointPool.h	/^size_t hash_value<DSFTuple>(const DSFTuple& _Keyval)$/;"	f
hash_value	.\XESCore\DSFBuilder.cpp	/^size_t hash_value<edge_wrapper>(const edge_wrapper& key)$/;"	f
hash_xy	.\RenderFarmUI\RF_TerraTool.cpp	/^inline long long hash_xy(int x, int y) { return ((long long) x << 32) + (long long) y; }$/;"	f
hash_xy	.\WEDMap\WED_TerraserverLayer.cpp	/^inline long long hash_xy(int x, int y) { return ((long long) x << 32) + (long long) y; }$/;"	f
hdr	.\linuxinit\initializer.h	/^	void* hdr;$/;"	m	struct:file_match
he_get_same_direction	.\XESCore\MapHelpers.h	/^inline He he_get_same_direction(He he)$/;"	f
he_has_any_roads	.\XESCore\NetHelpers.h	/^inline bool he_has_any_roads(Pmwx::Halfedge_handle he)$/;"	f
he_is_same_direction	.\XESCore\MapHelpers.h	/^inline bool	he_is_same_direction(He he)$/;"	f
he_is_same_direction_as	.\XESCore\MapHelpers.h	/^inline bool he_is_same_direction_as(He he, const Curve_2& c)$/;"	f
he_param	.\VPF\VPFImport.cpp	/^	int			he_param;$/;"	m	struct:VPF_Line	file:
he_param	.\VPF\VPFImport.h	/^	int					he_param;		\/\/ Param to add to the halfedge.$/;"	m	struct:VPF_LineRule_t
he_trans_flags	.\VPF\VPFImport.cpp	/^	int			he_trans_flags;$/;"	m	struct:VPF_Line	file:
he_trans_flags	.\VPF\VPFImport.h	/^	int					he_trans_flags;	\/\/ Transportation flags to add - the patterns of these decide the actual transportation to add.$/;"	m	struct:VPF_LineRule_t
header	.\Utils\MemFileUtils.cpp	/^  struct tar_header  header;$/;"	m	union:tar_buffer	typeref:struct:tar_buffer::tar_header	file:
heading	.\Env\EnvDefs.h	/^	float	heading;$/;"	m	struct:__anon19
heading	.\WEDEntities\WED_GISPoint_Heading.h	/^		WED_PropDoubleText		heading;$/;"	m	class:WED_GISPoint_Heading
heading	.\WEDEntities\WED_PolygonPlacement.h	/^	WED_PropDoubleText		heading;$/;"	m	class:WED_PolygonPlacement
heading	.\WEDEntities\WED_Taxiway.h	/^	WED_PropDoubleText		heading;$/;"	m	class:WED_Taxiway
heading	.\WEDMap\WED_MapToolNew.h	/^	bool		has_heading;		double	heading;$/;"	m	class:WED_MapToolNew
heading	.\WEDNetwork\WED_NWLinkAdapter.h	/^    float   heading;$/;"	m	struct:WED_NWCamera_t
heading	.\XESCore\AptDefs.h	/^	float					heading;$/;"	m	struct:AptTaxiway_t
heading	.\XESCore\AptDefs.h	/^	float		heading;$/;"	m	struct:AptGate_t
heading	.\XESCore\AptDefs.h	/^	float		heading;$/;"	m	struct:AptHelipad_t
heading	.\XESCore\AptDefs.h	/^	float		heading;$/;"	m	struct:AptLight_t
heading	.\XESCore\AptDefs.h	/^	float		heading;$/;"	m	struct:AptSign_t
heading	.\XESCore\BlockDefs.h	/^	double	heading;$/;"	m	struct:BLOCK_face_data
heading_hi	.\WEDEntities\WED_ATCWindRule.h	/^	WED_PropIntText				heading_hi;$/;"	m	class:WED_ATCWindRule
heading_lo	.\WEDEntities\WED_ATCWindRule.h	/^	WED_PropIntText				heading_lo;$/;"	m	class:WED_ATCWindRule
heap_array	.\DSF\tri_stripper_101\heap_array.h	/^	heap_array() : m_Locked(false) { }		\/\/ Post: ((size() == 0) && ! locked())$/;"	f	class:common_structures::heap_array
heap_array	.\DSF\tri_stripper_101\heap_array.h	/^class heap_array$/;"	c	namespace:common_structures
heap_is_locked	.\DSF\tri_stripper_101\heap_array.h	/^	struct heap_is_locked {	};$/;"	s	class:common_structures::heap_array
height	.\DSF\DSFDefs.h	/^	uint32_t	height;	$/;"	m	struct:DSFRasterHeader_t
height	.\GUI\GUI_Laftfont.h	/^	int	height;$/;"	m	struct:glyph_metric
height	.\ObjEdit\OE_TexMgr.cpp	/^	int		height;$/;"	m	struct:TexInfo_t	file:
height	.\Utils\BitmapUtils.h	/^	long			height;$/;"	m	struct:ImageInfo
height	.\Utils\RLERegion.h	/^	int		height(void) const { return y2_ - y1_; }$/;"	f	class:RLERegion
height	.\WEDEntities\WED_AirportSign.h	/^	WED_PropIntEnum		height;$/;"	m	class:WED_AirportSign
height	.\WEDEntities\WED_FacadePlacement.h	/^	WED_PropDoubleText		height;$/;"	m	class:WED_FacadePlacement
height	.\WEDEntities\WED_TowerViewpoint.h	/^	WED_PropDoubleTextMeters		height;$/;"	m	class:WED_TowerViewpoint
height	.\XESCore\BlockDefs.h	/^	float	height;				\/\/ facades only?$/;"	m	struct:BLOCK_face_data
height	.\XESCore\MeshAlgs.cpp	/^	double					height;			\/\/ Height in master$/;"	m	struct:mesh_match_vertex_t	file:
height	.\XESCore\MeshDefs.h	/^	double					height;					\/\/ Height of mesh at this vertex.$/;"	m	struct:MeshVertexInfo
height	.\XPTools\DDSTool.cpp	/^		unsigned int height;$/;"	m	struct:ATC_Header_Texture_TAG	file:
height1	.\OneOffs\GenTerrain.c	/^	int 	height1;$/;"	m	struct:__anon60	file:
height2	.\OneOffs\GenTerrain.c	/^	int 	height2;$/;"	m	struct:__anon60	file:
height_Meters	.\WEDCore\WED_ResourceMgr.h	/^	double		height_Meters;$/;"	m	struct:pol_info_t
height_ft	.\XESCore\AptDefs.h	/^	float		height_ft;$/;"	m	struct:AptTowerPt_t
height_max	.\OneOffs\make_fill_rules.c	/^int height_max[] = {	  999, 120, 80,  40,		32,		24,		16,		10, 0, 0		};$/;"	v
height_max	.\XESCore\ObjTables.h	/^	float	height_max;$/;"	m	struct:RepInfo_t
height_max	.\XESCore\Zoning.h	/^	float		height_max;$/;"	m	struct:EdgeRule_t
height_max	.\XESCore\Zoning.h	/^	float		height_max;$/;"	m	struct:FacadeChoice_t
height_max	.\XESCore\Zoning.h	/^	float	height_max;$/;"	m	struct:FacadeSpelling_t
height_max	.\XESCore\Zoning.h	/^	float	height_max;$/;"	m	struct:PointRule_t
height_min	.\XESCore\ObjTables.h	/^	float	height_min;$/;"	m	struct:RepInfo_t
height_min	.\XESCore\Zoning.h	/^	float		height_min;$/;"	m	struct:EdgeRule_t
height_min	.\XESCore\Zoning.h	/^	float		height_min;$/;"	m	struct:FacadeChoice_t
height_min	.\XESCore\Zoning.h	/^	float	height_min;$/;"	m	struct:FacadeSpelling_t
height_min	.\XESCore\Zoning.h	/^	float	height_min;$/;"	m	struct:PointRule_t
height_ratio	.\XESCore\NetTables.h	/^	float		height_ratio;$/;"	m	struct:BridgeInfo
heli	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_Helipad * heli;	$/;"	m	struct:preview_helipad	file:
heli_edgelights	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			heli_edgelights;$/;"	m	class:WED_CreatePointTool
heli_markings	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			heli_markings;$/;"	m	class:WED_CreatePointTool
heli_roughness	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropDoubleText		heli_roughness;$/;"	m	class:WED_CreatePointTool
heli_shoulder	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			heli_shoulder;$/;"	m	class:WED_CreatePointTool
heli_surface	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			heli_surface;$/;"	m	class:WED_CreatePointTool
helipads	.\XESCore\AptDefs.h	/^	AptHelipadVector	helipads;$/;"	m	struct:AptInfo_t
help_long	.\XESTools\GISTool_Utils.cpp	/^	string					help_long;$/;"	m	struct:GISTool_CmdInfo_t	file:
help_long	.\XESTools\GISTool_Utils.h	/^	const char *		help_long;$/;"	m	struct:GISTool_RegCmd_t
help_short	.\XESTools\GISTool_Utils.h	/^	const char *		help_short;$/;"	m	struct:GISTool_RegCmd_t
help_summary	.\XESTools\GISTool_Utils.cpp	/^	string					help_summary;$/;"	m	struct:GISTool_CmdInfo_t	file:
hex_digit	.\XESCore\ConfigSystem.cpp	/^inline	int	hex_digit(char c)$/;"	f
hi	.\Utils\CompGeomDefs2.h	/^	Point2		hi;$/;"	m	struct:BezierPoint2
hi_color	.\XESCore\DEMTables.h	/^	RGBColor_t		hi_color;$/;"	m	struct:DEMColorBand_t
hi_elev	.\RawImport\AptElev.h	/^	double	hi_elev;$/;"	m	struct:RwyInfo
hi_lat	.\RawImport\AptElev.h	/^	double	hi_lat;$/;"	m	struct:RwyInfo
hi_lon	.\RawImport\AptElev.h	/^	double	hi_lon;$/;"	m	struct:RwyInfo
hi_value	.\XESCore\DEMTables.h	/^	float			hi_value;$/;"	m	struct:DEMColorBand_t
hidden	.\WEDEntities\WED_Entity.h	/^	WED_PropBoolText			hidden;$/;"	m	class:WED_Entity
hideEvent	.\GUI\GUI_Application.cpp	/^void GUI_QtMenu::hideEvent( QHideEvent * e )$/;"	f	class:GUI_QtMenu
hide_tiles	.\WEDCore\WED_ResourceMgr.h	/^	int				hide_tiles;$/;"	m	struct:agp_t
highest_index	.\DSF\DSFLibWrite.cpp	/^		int						highest_index;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
highest_index	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						highest_index;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
highest_key	.\Utils\STLUtils.h	/^K highest_key(const map<K,V>& histo)$/;"	f
highest_n	.\OneOffs\osm_tile.c	/^static	int highest_n = 0;$/;"	v	file:
highest_r	.\OneOffs\osm_tile.c	/^static	int highest_r = 0;$/;"	v	file:
highest_w	.\OneOffs\osm_tile.c	/^static	int highest_w = 0;$/;"	v	file:
highway	.\OneOffs\gen_roads.cpp	/^tex_info	highway  = { "highway.dds"  , "highway_LIT.dds"	 , 3, 1, 30, 8.5, 1024 ,{0.6,0.6,0.6}};$/;"	v
hill_angle1	.\XESCore\DEMTables.h	/^	float			hill_angle1;$/;"	m	struct:CliffInfo_t
hill_angle2	.\XESCore\DEMTables.h	/^	float			hill_angle2;$/;"	m	struct:CliffInfo_t
hill_res	.\XESCore\DEMTables.h	/^	Point2			hill_res;$/;"	m	struct:CliffInfo_t
hill_tex	.\XESCore\DEMTables.h	/^	string			hill_tex;$/;"	m	struct:CliffInfo_t
hole_ok	.\XESCore\Zoning.h	/^	int			hole_ok;								\/\/ Is there a hole in the block?$/;"	m	struct:ZoningRule_t
holes	.\MeshTool\MeshTool_Create.cpp	/^static vector<Polygon_2>				holes;$/;"	v	file:
home_dir	.\linuxinit\initializer.cpp	/^const char* const Initializer::home_dir()$/;"	f	class:Initializer
horizontal_gap	.\OGLE\ogle.cpp	/^	float					horizontal_gap;	\/\/ -1.0 if no gap used$/;"	m	struct:OGLE_Rec	file:
host	.\WEDCore\WED_PropertyHelper.h	/^	const char *			host;$/;"	m	class:WED_PropIntEnumSetFilter
host	.\WEDCore\WED_PropertyHelper.h	/^	const char *			host;$/;"	m	class:WED_PropIntEnumSetUnion
hot_arrive	.\WEDEntities\WED_TaxiRoute.h	/^		WED_PropIntEnumSet		hot_arrive;$/;"	m	class:WED_TaxiRoute
hot_arrive	.\XESCore\AptDefs.h	/^	set<string>					hot_arrive;$/;"	m	struct:AptRouteEdge_t
hot_depart	.\WEDEntities\WED_TaxiRoute.h	/^		WED_PropIntEnumSet		hot_depart;$/;"	m	class:WED_TaxiRoute
hot_depart	.\XESCore\AptDefs.h	/^	set<string>					hot_depart;$/;"	m	struct:AptRouteEdge_t
hot_ils	.\WEDEntities\WED_TaxiRoute.h	/^		WED_PropIntEnumSet		hot_ils;		$/;"	m	class:WED_TaxiRoute
hot_ils	.\XESCore\AptDefs.h	/^	set<string>					hot_ils;$/;"	m	struct:AptRouteEdge_t
hpc_to_microseconds	.\Utils\PerfUtils.h	/^inline double hpc_to_microseconds(unsigned long long in_hpc_delta)$/;"	f
huge	.\Obj\XObjBuilder.cpp	/^static const float huge = 1.0e30;$/;"	v	file:
hwy_2lane_L	.\OneOffs\gen_roads.cpp	/^void hwy_2lane_L()		{	make_deck(106, 177, &highway, "asphalt");$/;"	f
hwy_2lane_R	.\OneOffs\gen_roads.cpp	/^void hwy_2lane_R()		{	make_deck(177, 106, &highway, "asphalt");$/;"	f
hwy_3lane_L	.\OneOffs\gen_roads.cpp	/^void hwy_3lane_L()		{	make_deck(0, 103, &highway, "asphalt");$/;"	f
hwy_3lane_R	.\OneOffs\gen_roads.cpp	/^void hwy_3lane_R()		{	make_deck(103, 0, &highway, "asphalt");$/;"	f
hwy_4oneway	.\OneOffs\gen_roads.cpp	/^void hwy_4oneway(void) { hwy_2lane_R(); }$/;"	f
hwy_4onewaytr	.\OneOffs\gen_roads.cpp	/^void hwy_4onewaytr(void) { hwy_trains(gBackward); hwy_2lane_R(); }$/;"	f
hwy_4unsep	.\OneOffs\gen_roads.cpp	/^void hwy_4unsep(void) { hwy_2lane_L(); hwy_median(); hwy_2lane_R(); }$/;"	f
hwy_4unseptr	.\OneOffs\gen_roads.cpp	/^void hwy_4unseptr(void) { hwy_2lane_L(); hwy_trains(0); hwy_2lane_R(); }$/;"	f
hwy_6oneway	.\OneOffs\gen_roads.cpp	/^void hwy_6oneway(void) { hwy_3lane_R(); }$/;"	f
hwy_6onewaytr	.\OneOffs\gen_roads.cpp	/^void hwy_6onewaytr(void) { hwy_trains(gBackward); hwy_3lane_R(); }$/;"	f
hwy_6unsep	.\OneOffs\gen_roads.cpp	/^void hwy_6unsep(void) { hwy_3lane_L(); hwy_median(); hwy_3lane_R(); }$/;"	f
hwy_6unseptr	.\OneOffs\gen_roads.cpp	/^void hwy_6unseptr(void) { hwy_3lane_L(); hwy_trains(0); hwy_3lane_R(); }$/;"	f
hwy_arc_e	.\OneOffs\gen_roads.cpp	/^void hwy_arc_e(int p) { hwy_arch_side(); end_composite(); underside_end(); if (p) pylons_end(); pylons_end(); }$/;"	f
hwy_arc_s	.\OneOffs\gen_roads.cpp	/^void hwy_arc_s(int p) { if (p) hwy_arch2_start(); else hwy_arch1_start(); hwy_underside_start(); start_composite(); hwy_arch_side(); }$/;"	f
hwy_arch1_start	.\OneOffs\gen_roads.cpp	/^void hwy_arch1_start() { pylons_start("secondary_oldpylon.obj", 0.5, 0, 30, 0, 0); }$/;"	f
hwy_arch2_start	.\OneOffs\gen_roads.cpp	/^void hwy_arch2_start() { 	pylons_start("secondary_oldpylon.obj", 0.0, 6, 30, 0, 0);$/;"	f
hwy_arch_side	.\OneOffs\gen_roads.cpp	/^void hwy_arch_side() 	{ 	make_blade(430,580,-8,1.2,&highway);  }$/;"	f
hwy_guard_rail	.\OneOffs\gen_roads.cpp	/^void hwy_guard_rail()	{	make_blade(177,189,0.5,0,&highway); }$/;"	f
hwy_median	.\OneOffs\gen_roads.cpp	/^void hwy_median()		{	make_deck(199,223, &highway, "gravel"); }$/;"	f
hwy_overpass_side	.\OneOffs\gen_roads.cpp	/^void hwy_overpass_side(){	make_blade(330,357,0.5,-1.5,&highway); }$/;"	f
hwy_ovr_e	.\OneOffs\gen_roads.cpp	/^void hwy_ovr_e(int p) { hwy_overpass_side(); end_composite(); underside_end(); if (p) pylons_end(); pylons_end(); }$/;"	f
hwy_ovr_s	.\OneOffs\gen_roads.cpp	/^void hwy_ovr_s(int p) { if (p) hwy_pylon2_start(); else hwy_pylon1_start(); hwy_underside_start(); start_composite(); hwy_overpass_side(); }$/;"	f
hwy_pylon1_start	.\OneOffs\gen_roads.cpp	/^void hwy_pylon1_start() { pylons_start("highway_pylon.obj", 0.5, 0, 120, 60, 0); }$/;"	f
hwy_pylon2_start	.\OneOffs\gen_roads.cpp	/^void hwy_pylon2_start() { 	pylons_start("highway_pylon.obj", 0.20, 0, 120, 60, 0);$/;"	f
hwy_reg_e	.\OneOffs\gen_roads.cpp	/^void hwy_reg_e(void) { hwy_guard_rail(); end_composite(); }$/;"	f
hwy_reg_s	.\OneOffs\gen_roads.cpp	/^void hwy_reg_s(void) { start_composite(); hwy_guard_rail(); }$/;"	f
hwy_start	.\OneOffs\gen_roads.cpp	/^void hwy_start(int b, int ow, int n, const char * na) { road_start(b, ow, n,na,&highway); }$/;"	f
hwy_sus_e	.\OneOffs\gen_roads.cpp	/^void hwy_sus_e(int p) { hwy_suspension_side(); end_composite(); underside_end(); pylons_end(); }$/;"	f
hwy_sus_s	.\OneOffs\gen_roads.cpp	/^void hwy_sus_s(int p) { hwy_susp_start(); hwy_underside_start(); start_composite(); hwy_suspension_side(); }$/;"	f
hwy_susp_start	.\OneOffs\gen_roads.cpp	/^void hwy_susp_start()   { pylons_start("highway_susp_twr.obj", 0.5, 0, 0, 0, 1);	}$/;"	f
hwy_suspension_side	.\OneOffs\gen_roads.cpp	/^void hwy_suspension_side(){	make_blade(877,933,1.5,-1.5,&highway); }$/;"	f
hwy_trains	.\OneOffs\gen_roads.cpp	/^void hwy_trains(int r)	{	make_deck(235, 313, &highway, "gravel");$/;"	f
hwy_underside_start	.\OneOffs\gen_roads.cpp	/^void hwy_underside_start()	{ underside_start(357,409,-1.5,&highway); }$/;"	f
i	.\Utils\STLUtils.h	/^	int			i;		\/\/ current index for push$/;"	m	struct:split_seq
i	.\Utils\md5.h	/^	UINT4 i[2]; 							\/* number of _bits_ handled mod 2^64 *\/$/;"	m	struct:__anon91
i	.\XESCore\AptAlgs.h	/^		AptPolygon_t::const_iterator	i;$/;"	m	struct:AptPolygonIterator
i_	.\XESCore\DEMTables.cpp	/^	iter_type		i_;$/;"	m	struct:float_between_iterator	file:
icao	.\WEDEntities\WED_ATCFlow.h	/^	WED_PropStringText			icao;$/;"	m	class:WED_ATCFlow
icao	.\WEDEntities\WED_ATCWindRule.h	/^	WED_PropStringText			icao;$/;"	m	class:WED_ATCWindRule
icao	.\WEDEntities\WED_Airport.h	/^	WED_PropStringText			icao;$/;"	m	class:WED_Airport
icao	.\WEDImportExport\WED_VerTable.h	/^	string icao;$/;"	m	struct:VerInfo_t
icao	.\XESCore\AptDefs.h	/^	string						icao;$/;"	m	struct:AptFlow_t
icao	.\XESCore\AptDefs.h	/^	string				icao;$/;"	m	struct:AptInfo_t
icao	.\XESCore\AptDefs.h	/^	string			icao;$/;"	m	struct:AptWindRule_t
icao	.\XESTools\GISTool_ObsCmds.cpp	/^	set<string>	icao;$/;"	m	struct:icao_matcher	file:
icao_matcher	.\XESTools\GISTool_ObsCmds.cpp	/^struct icao_matcher {$/;"	s	file:
id	.\DSF\DSFDefs.h	/^	int32_t		id;$/;"	m	struct:AtomHeader_t
id	.\DSF\dsflib_013005\DSFDefs.h	/^	int		id;$/;"	m	struct:AtomHeader_t
id	.\ObjEdit\OE_TexMgr.cpp	/^	GLenum	id;$/;"	m	struct:TexInfo_t	file:
id	.\OneOffs\gen_roads10.h	/^	int		id;$/;"	m	class:published_road
id	.\OneOffs\osm2shape.c	/^	int id;$/;"	m	struct:__anon64	file:
id	.\RawImport\gshhs.h	/^	int id;				\/* Unique polygon id number, starting at 0 *\/$/;"	m	struct:GSHHS
id	.\Utils\XChunkyFileUtils.h	/^	uint32_t	id;$/;"	m	struct:XAtomHeader_t
id	.\WEDCore\WED_UndoLayer.h	/^		int					id;$/;"	m	struct:WED_UndoLayer::ObjInfo
id	.\XESCore\AptDefs.h	/^	int							id;$/;"	m	struct:AptRouteNode_t
id	.\XESCore\AptDefs.h	/^	string		id;$/;"	m	struct:AptHelipad_t
id	.\XESCore\AptDefs.h	/^	string		id[2];$/;"	m	struct:AptRunway_t
id	.\XESCore\AptDefs.h	/^	string		id[2];$/;"	m	struct:AptSealane_t
id_	.\lib_json\src\test_lib_json\jsontest.h	/^      Id id_;$/;"	m	struct:JsonTest::PredicateContext
ident	.\WEDNetwork\WED_Connection.h	/^		int			ident;$/;"	m	class:WED_Connection
ident	.\WEDXPlugin\WED_XPluginClient.h	/^			int			ident;$/;"	m	class:WED_XPluginClient
idx	.\OneOffs\gen_roads10.h	/^	int						idx;$/;"	m	class:traffic
idx	.\OneOffs\gen_roads10.h	/^	int idx;$/;"	m	class:shader
idx_count	.\Obj\XObjDefs.h	/^	int						idx_count;$/;"	m	struct:XObjCmd8
idx_len	.\Obj\XObjWriteEmbedded.cpp	/^	int		idx_len;$/;"	m	struct:master_header_t	file:
idx_off	.\Obj\XObjWriteEmbedded.cpp	/^	int		idx_off;$/;"	m	struct:master_header_t	file:
idx_offset	.\Obj\XObjDefs.h	/^	int						idx_offset;$/;"	m	struct:XObjCmd8
ieee_float_shape_type	.\Obj\XObjBuilder.cpp	/^} ieee_float_shape_type;$/;"	t	typeref:union:__anon40	file:
ifs	.\SDTS\SDTSRead.cpp	/^	istream							ifs;$/;"	m	struct:SDTSModuleIterator::SDTSModuleIteratorImp	file:
imageHeight	.\Utils\BitmapUtils.cpp	/^	long			imageHeight;$/;"	m	struct:BMPImageDesc	file:
imageSize	.\Utils\BitmapUtils.cpp	/^	long			imageSize;$/;"	m	struct:BMPImageDesc	file:
imageWidth	.\Utils\BitmapUtils.cpp	/^	long			imageWidth;$/;"	m	struct:BMPImageDesc	file:
image_mem	.\GUI\GUI_Fonts.cpp	/^	unsigned char *		image_mem;$/;"	m	class:TT_font_info	file:
imp_dialog_choose_ICAO	.\WEDImportExport\WED_GatewayImport.cpp	/^imp_dialog_choose_ICAO,\/\/Let the user choose the aiport from the table. The required GET is done before hand$/;"	e	enum:imp_dialog_stages	file:
imp_dialog_choose_versions	.\WEDImportExport\WED_GatewayImport.cpp	/^imp_dialog_choose_versions,\/\/Let user pick scenery pack(s) to download. The required GET is done before hand$/;"	e	enum:imp_dialog_stages	file:
imp_dialog_download_ICAO	.\WEDImportExport\WED_GatewayImport.cpp	/^imp_dialog_download_ICAO,$/;"	e	enum:imp_dialog_stages	file:
imp_dialog_download_specific_version	.\WEDImportExport\WED_GatewayImport.cpp	/^imp_dialog_download_specific_version\/\/Download scenery pack, save the contents in the right place, import to WED$/;"	e	enum:imp_dialog_stages	file:
imp_dialog_download_versions	.\WEDImportExport\WED_GatewayImport.cpp	/^imp_dialog_download_versions,$/;"	e	enum:imp_dialog_stages	file:
imp_dialog_error	.\WEDImportExport\WED_GatewayImport.cpp	/^imp_dialog_error,\/\/for file and network errors$/;"	e	enum:imp_dialog_stages	file:
imp_dialog_msg	.\WEDImportExport\WED_GatewayImport.cpp	/^enum imp_dialog_msg$/;"	g	file:
imp_dialog_stages	.\WEDImportExport\WED_GatewayImport.cpp	/^enum imp_dialog_stages$/;"	g	file:
import_BMP	.\RenderFarmUI\RF_Import.cpp	/^	import_BMP,$/;"	e	enum:__anon76	file:
import_DTED	.\RenderFarmUI\RF_Import.cpp	/^	import_DTED,$/;"	e	enum:__anon76	file:
import_Div	.\RenderFarmUI\RF_Import.cpp	/^	import_Div,$/;"	e	enum:__anon76	file:
import_Div2	.\RenderFarmUI\RF_Import.cpp	/^	import_Div2,$/;"	e	enum:__anon76	file:
import_GeoTIFF	.\RenderFarmUI\RF_Import.cpp	/^	import_GeoTIFF,$/;"	e	enum:__anon76	file:
import_IDA	.\RenderFarmUI\RF_Import.cpp	/^	import_IDA,$/;"	e	enum:__anon76	file:
import_PNG	.\RenderFarmUI\RF_Import.cpp	/^	import_PNG=0,$/;"	e	enum:__anon76	file:
import_Raw16BE	.\RenderFarmUI\RF_Import.cpp	/^	import_Raw16BE,$/;"	e	enum:__anon76	file:
import_Raw16LE	.\RenderFarmUI\RF_Import.cpp	/^	import_Raw16LE,$/;"	e	enum:__anon76	file:
import_Raw32BE	.\RenderFarmUI\RF_Import.cpp	/^	import_Raw32BE,$/;"	e	enum:__anon76	file:
import_Raw32LE	.\RenderFarmUI\RF_Import.cpp	/^	import_Raw32LE,$/;"	e	enum:__anon76	file:
import_Raw8	.\RenderFarmUI\RF_Import.cpp	/^	import_Raw8,$/;"	e	enum:__anon76	file:
import_RawFloatBE	.\RenderFarmUI\RF_Import.cpp	/^	import_RawFloatBE$/;"	e	enum:__anon76	file:
import_RawFloatLE	.\RenderFarmUI\RF_Import.cpp	/^	import_RawFloatLE,$/;"	e	enum:__anon76	file:
import_TIFF	.\RenderFarmUI\RF_Import.cpp	/^	import_TIFF,$/;"	e	enum:__anon76	file:
import_USGSNatural	.\RenderFarmUI\RF_Import.cpp	/^	import_USGSNatural,$/;"	e	enum:__anon76	file:
import_bounds_default	.\WEDImportExport\WED_AptImportDialog.cpp	/^static int import_bounds_default[4] = { 0, 0, 500, 500 };$/;"	v	file:
import_bounds_default	.\WEDImportExport\WED_GatewayImport.cpp	/^	static int				import_bounds_default[4];$/;"	m	class:WED_GatewayImportDialog	file:
import_bounds_default	.\WEDImportExport\WED_GatewayImport.cpp	/^int WED_GatewayImportDialog::import_bounds_default[4] = { 0, 0, 750, 500 };$/;"	m	class:WED_GatewayImportDialog	file:
import_column_t	.\RawImport\ShapeIO.cpp	/^struct import_column_t {$/;"	s	file:
import_column_vector	.\RawImport\ShapeIO.cpp	/^typedef vector<import_column_t>	import_column_vector;$/;"	t	file:
in	.\Utils\md5.h	/^	unsigned char in[64]; 					\/* input buffer *\/$/;"	m	struct:__anon91
in	.\lib_json\src\lib_json\json_reader.cpp	/^in( Reader::Char c, Reader::Char c1, Reader::Char c2, Reader::Char c3, Reader::Char c4 )$/;"	f	namespace:Json
in	.\lib_json\src\lib_json\json_reader.cpp	/^in( Reader::Char c, Reader::Char c1, Reader::Char c2, Reader::Char c3, Reader::Char c4, Reader::Char c5 )$/;"	f	namespace:Json
in_comma_list	.\OneOffs\osm_tile.c	/^static int in_comma_list(const char * key, const char * list)$/;"	f	file:
in_opened_file_inzip	.\Utils\zip.c	/^    int  in_opened_file_inzip;  \/* 1 if a file in the zip is currently writ.*\/$/;"	m	struct:__anon105	file:
in_order	.\Utils\CompGeomDefs2.h	/^bool in_order(T& lhs, T& rhs)	\/\/ Assure lhs <= rhs$/;"	f
in_place_scaleX	.\Utils\BitmapUtils.cpp	/^static void	in_place_scaleX(int x, int y, unsigned char * src, unsigned char * dst, int channels)$/;"	f	file:
in_place_scaleXY	.\Utils\BitmapUtils.cpp	/^static void	in_place_scaleXY(int x, int y, unsigned char * src, unsigned char * dst, int channels)$/;"	f	file:
in_place_scaleY	.\Utils\BitmapUtils.cpp	/^static void	in_place_scaleY(int x, int y, unsigned char * src, unsigned char * dst, int channels)$/;"	f	file:
in_progress	.\Network\curl_http.h	/^		in_progress		= 0,		\/\/ In progress - use get_progress to see percent-DL$/;"	e	enum:curl_http_get_file::__anon36
in_range	.\DSF\DSFPointPool.h	/^inline bool DSFTuple::in_range(const DSFTuple& offset, const DSFTuple& scale) const$/;"	f	class:DSFTuple
in_range	.\DSF\dsflib_013005\DSFPointPool.cpp	/^bool DSFTuple::in_range(const DSFTuple& offset, const DSFTuple& scale) const$/;"	f	class:DSFTuple
in_range	.\XESCore\BlockFill.cpp	/^static bool in_range(CDT::Face_handle f, CoordTranslator2& t)$/;"	f	file:
inc	.\XESCore\DEMDefs.h	/^inline void	DEMGeo::neighbor_iterator<__dim>::inc(void)$/;"	f	class:DEMGeo::neighbor_iterator
increment	.\SDTS\SDTSRead.cpp	/^	void	increment(void) { ++iter; }$/;"	f	struct:SDTSModuleIterator::SDTSModuleIteratorImp
indent	.\WEDCore\WED_XMLWriter.h	/^		int										indent;$/;"	m	class:WED_XMLElement
indent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::indent()$/;"	f	class:Json::StyledStreamWriter
indent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::indent()$/;"	f	class:Json::StyledWriter
indentSize_	.\lib_json\include\json\writer.h	/^      int indentSize_;$/;"	m	class:Json::StyledWriter
indentString_	.\lib_json\include\json\writer.h	/^      std::string indentString_;$/;"	m	class:Json::StyledStreamWriter
indentString_	.\lib_json\include\json\writer.h	/^      std::string indentString_;$/;"	m	class:Json::StyledWriter
indentText	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::indentText( const std::string &text, $/;"	f	class:JsonTest::TestResult
indent_level	.\GUI\GUI_TextTable.h	/^	int						indent_level;$/;"	m	struct:GUI_CellContent
indent_str	.\OneOffs\osm_tile.c	/^const char * indent_str(int n)$/;"	f
indentation_	.\lib_json\include\json\writer.h	/^      std::string indentation_;$/;"	m	class:Json::StyledStreamWriter
index	.\DSF\tri_stripper_101\cache_simulator.h	/^	typedef unsigned int index;$/;"	t	class:triangle_stripper::cache_simulator
index	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef unsigned int index;$/;"	t	class:triangle_stripper::tri_stripper
index	.\Utils\XCarBoneUtils.h	/^	map<void *, int>	index;		\/\/ A reverse index for finding the entry for an ACObject$/;"	m	struct:XCarBones
index	.\Utils\XUtils.cpp	/^	map<string, int>	index;$/;"	m	struct:XPointPool::XPointPoolImp	file:
index	.\XESCore\NetPlacement.h	/^	int								index;$/;"	m	struct:Net_JunctionInfo_t
index	.\XESCore\TriFan.h	/^	TriFanTable					index;				\/\/ Index of who is using what tri fans$/;"	m	class:TriFanBuilder
index	.\XPTools\Env2DSF.cpp	/^	unsigned int	index;$/;"	m	struct:NetworkNode_t	file:
index	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::index() const$/;"	f	class:Json::Value::CZString
index3	.\XPTools\Env2DSF.cpp	/^	unsigned int	index3;$/;"	m	struct:NetworkNode_t	file:
index_	.\lib_json\include\json\value.h	/^         ArrayIndex index_;$/;"	m	class:Json::Value::CZString
index_	.\lib_json\include\json\value.h	/^      ArrayIndex index_;$/;"	m	class:Json::PathArgument
index_type	.\Obj\ObjPointPool.h	/^	typedef map<key_type, int, lex_compare_vector<float> >	index_type;$/;"	t	class:ObjPointPool
indices	.\DSF\DSFLibWrite.cpp	/^		DSFPointPoolLocVector	indices;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
indices	.\DSF\DSFLibWrite.cpp	/^		DSFPointPoolLocVector	indices;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
indices	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		DSFPointPoolLocVector	indices;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
indices	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		DSFPointPoolLocVector	indices;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
indices	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef std::vector<index> indices;$/;"	t	class:triangle_stripper::tri_stripper
indices	.\Obj\XObjDefs.h	/^	vector<int>				indices;$/;"	m	struct:XObj8
indices_cache	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef std::deque<index> indices_cache;$/;"	t	class:triangle_stripper::tri_stripper
indices_deque	.\DSF\tri_stripper_101\cache_simulator.h	/^	typedef std::deque<index> indices_deque;$/;"	t	class:triangle_stripper::cache_simulator
info	.\UI\ObjCUtils.h	/^		void *		info;$/;"	m	struct:app_callbacks
ini	.\WEDCore\WED_Routing.h	/^	bool						ini;$/;"	m	struct:WED_route_node_t
ini_heading_hi	.\XESCore\AptDefs.h	/^	int				ini_heading_hi;		$/;"	m	struct:AptRunwayRule_t
ini_heading_lo	.\XESCore\AptDefs.h	/^	int				ini_heading_lo;		\/\/ This is the range of initial headings the tower can issue.$/;"	m	struct:AptRunwayRule_t
init	.\XESCore\BlockAlgs.cpp	/^	void init (Block_2 *arr)$/;"	f	class:check_block_visitor
init	.\XESCore\MapHelpers.h	/^	void init (Arr *arr)$/;"	f	class:check_split_zone_visitor
initLists	.\GUI\GUI_Laftfont.cpp	/^void GUI_Laftfont::initLists(std::string &filename, unsigned short height)$/;"	f	class:GUI_Laftfont
init_any	.\XESCore\MeshConformer.h	/^  void init_any()$/;"	f	class:CGAL::Triangulation_conformer_any_2
init_block	.\XESCore\BlockFill.cpp	/^bool	init_block($/;"	f
init_clusters	.\XESCore\MeshConformer.h	/^  void init_clusters()$/;"	f	class:CGAL::Triangulation_conformer_any_2
init_gl_info	.\Utils\TexUtils.cpp	/^static void init_gl_info(gl_info_t * i)$/;"	f	file:
init_linkedlist	.\Utils\zip.c	/^local void init_linkedlist($/;"	f
init_mesh	.\XESCore\BlockFill.cpp	/^static void	init_mesh(CDT& mesh, CoordTranslator2& translator, vector<Block_2::X_monotone_curve_2>& curves, int cat_table[cat_DIM],float max_slope, int need_lu)$/;"	f	file:
init_point_features	.\XESCore\BlockFill.cpp	/^static void	init_point_features(const GISPointFeatureVector& feats, $/;"	f	file:
init_q	.\XESCore\MeshSimplify.cpp	/^void MeshSimplify::init_q(void)$/;"	f	class:MeshSimplify
init_random	.\Utils\perlin.cpp	/^static init_random_t	init_random;$/;"	v	file:
init_random_t	.\Utils\perlin.cpp	/^	init_random_t() {$/;"	f	struct:init_random_t
init_random_t	.\Utils\perlin.cpp	/^struct	init_random_t {$/;"	s	file:
init_road_ccb	.\XESCore\BlockFill.cpp	/^static void	init_road_ccb(int zoning, int variant,float height,  Pmwx::Ccb_halfedge_circulator he, CoordTranslator2& translator, $/;"	f	file:
init_subdivisions	.\XESCore\BlockFill.cpp	/^static int	init_subdivisions($/;"	f	file:
initial	.\DSF\tri_stripper_101\graph_array.h	/^		node_iterator initial() const					{ return m_Initial; }$/;"	f	class:common_structures::graph_array::arc
initial	.\XESCore\BlockAlgs.cpp	/^	Prop_t							initial;$/;"	m	class:apply_properties_visitor	file:
initializeGL	.\UI\XWinGL.lin.cpp	/^void glWidget::initializeGL(void)$/;"	f	class:glWidget
initialize_properties	.\RawImport\ShapeIO.cpp	/^	virtual	void	initialize_properties(Prop_t& io_properties)$/;"	f	class:toggle_properties_visitor
initialize_properties	.\XESCore\BlockAlgs.cpp	/^	virtual	void	initialize_properties(Prop_t& io_properties)$/;"	f	class:apply_properties_visitor
initialized	.\XESCore\MeshConformer.h	/^  Initialization initialized;$/;"	m	class:CGAL::Triangulation_conformer_any_2
innerRings	.\XESCore\WTPM.h	/^	WTPM_LineVector			innerRings;$/;"	m	struct:WTPM_Face
inp_	.\XESCore\DEMDefs.h	/^	size_t inp_;$/;"	m	struct:address_fifo
input	.\WEDCore\WED_Sign_Parser.h	/^	const string & input;$/;"	m	struct:parser_in_info
input	.\XESCore\MapHelpers.h	/^	typename Arr::X_monotone_curve_2	input;$/;"	m	class:edge_collector_t
input_extension	.\XPTools\XGrinderShell.cpp	/^	string					input_extension;$/;"	m	struct:conversion_info	file:
input_mode	.\UI\XPopup.h	/^	long input_mode;$/;"	m	struct:MwmHints
insert	.\DSF\DSFPointPool.h	/^inline void DSFTuple::insert(double * ptr, double v)$/;"	f	class:DSFTuple
insert	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void DSFTuple::insert(double * ptr, double v)$/;"	f	class:DSFTuple
insert	.\DSF\tri_stripper_101\graph_array.h	/^	out_arc_iterator insert(const node_iterator & Initial, const node_iterator & Terminal)							{ return insert_arc(Initial, Terminal); }$/;"	f	class:common_structures::graph_array
insert	.\DSF\tri_stripper_101\graph_array.h	/^	out_arc_iterator insert(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem)	{ return insert_arc(Initial, Terminal, Elem); }$/;"	f	class:common_structures::graph_array
insert	.\DSF\tri_stripper_101\graph_array.h	/^	out_arc_iterator insert(const nodeid & Initial, const nodeid & Terminal)										{ return insert_arc(Initial, Terminal); }$/;"	f	class:common_structures::graph_array
insert	.\DSF\tri_stripper_101\graph_array.h	/^	out_arc_iterator insert(const nodeid & Initial, const nodeid & Terminal, const arctype & Elem)					{ return insert_arc(Initial, Terminal, Elem); }$/;"	f	class:common_structures::graph_array
insert	.\Utils\QuadTree.h	/^typename QuadTree<__T, __N>::Node * QuadTree<__T, __N>::insert(ValueType * v, int max_depth)$/;"	f	class:QuadTree
insert	.\Utils\RTree2.h	/^void	RTree2<T,N>::insert(I begin, I end)$/;"	f	class:RTree2
insert	.\Utils\STLUtils.h	/^	map_iterator	insert(const priority_type& p, const value_type& v)$/;"	f	class:pqueue
insert	.\Utils\point_index.h	/^void		spatial_index_2<Traits>::insert(Iterator begin, Iterator end)$/;"	f	class:spatial_index_2
insert	.\Utils\point_index.h	/^void		spatial_index_2<Traits>::insert(Iterator begin, Iterator end, const Converter& converter)$/;"	f	class:spatial_index_2
insert	.\Utils\point_index.h	/^void		spatial_index_2<Traits>::insert(const Point_2& p)$/;"	f	class:spatial_index_2
insert_a_divide	.\XESCore\BlockFill.cpp	/^int	candy_bar::insert_a_divide(double a)$/;"	f	class:candy_bar
insert_arc	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::out_arc_iterator graph_array<nodetype, arctype>::insert_arc(const node_iterator & Initial, const node_iterator & Terminal) {$/;"	f	class:common_structures::graph_array
insert_arc	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::out_arc_iterator graph_array<nodetype, arctype>::insert_arc(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem) {$/;"	f	class:common_structures::graph_array
insert_arc	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::out_arc_iterator graph_array<nodetype, arctype>::insert_arc(const nodeid & Initial, const nodeid & Terminal) {$/;"	f	class:common_structures::graph_array
insert_arc	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::out_arc_iterator graph_array<nodetype, arctype>::insert_arc(const nodeid & Initial, const nodeid & Terminal, const arctype & Elem) {$/;"	f	class:common_structures::graph_array
insert_block	.\XESCore\BlockFill.cpp	/^void	candy_bar::insert_block(const BLOCK_face_data& d, int b_start, int b_end, double a_start, double a_end)$/;"	f	class:candy_bar
insert_collect_flips	.\XESCore\MeshDefs.cpp	/^CDT::Vertex_handle	CDT::insert_collect_flips(const Point& p, Face_handle hint, set<Face_handle>& all)$/;"	f	class:CDT
insert_err	.\XESCore\MeshDefs.h	/^	float			insert_err;$/;"	m	struct:MeshFaceInfo
insert_node	.\Utils\QuadTree.h	/^typename QuadTree<__T, __N>::Node * QuadTree<__T, __N>::insert_node(Node * node, const KeyType& bounds, ValueType * v, const CullType& c, const KeyType& k, int max_depth)$/;"	f	class:QuadTree
insert_poly_line	.\XESCore\MapAlgs.cpp	/^void insert_poly_line(Simplify_polylines_2& simplifier, const vector<Point_2>& pts, bool loop)$/;"	f
insert_pt	.\Utils\RLERegion.h	/^	void	insert_pt(int x, int y) { RLERegion tmp(x,y,x+1,y+1); (*this) += tmp; }$/;"	f	class:RLERegion
insert_range	.\Utils\RTree2.h	/^typename RTree2<T,N>::node *	RTree2<T,N>::insert_range(int level, typename vector<item_type>::iterator begin, typename vector<item_type>::iterator end)$/;"	f	class:RTree2
insert_x	.\XESCore\MeshDefs.h	/^	int				insert_x;$/;"	m	struct:MeshFaceInfo
insert_y	.\XESCore\MeshDefs.h	/^	int				insert_y;$/;"	m	struct:MeshFaceInfo
inset_width	.\Utils\Skeleton.cpp	/^	double			inset_width;		\/\/	Original inset width from input app$/;"	m	struct:SK_Edge	file:
inside	.\Utils\CompGeomDefs2.h	/^inline bool		Polygon2::inside(const Point2& inPoint) const$/;"	f	class:Polygon2
inside_ccw	.\Utils\CompGeomDefs2.h	/^	bool	inside_ccw(const Point2& p) const { return $/;"	f	struct:Triangle2
inside_convex	.\Utils\CompGeomDefs2.h	/^inline bool		Polygon2::inside_convex(const Point2& inPoint) const$/;"	f	class:Polygon2
inside_polygon_bez	.\Utils\CompGeomDefs2.h	/^bool inside_polygon_bez(__Iterator begin, __Iterator end, const Point2& inPoint)$/;"	f
inside_polygon_curve	.\WEDCore\WED_Clipping.cpp	/^struct inside_polygon_curve {$/;"	s	file:
inside_polygon_pt	.\Utils\CompGeomDefs2.h	/^bool inside_polygon_pt(__Iterator begin, __Iterator end, const Point2& inPoint)$/;"	f
inside_polygon_seg	.\Utils\CompGeomDefs2.h	/^bool inside_polygon_seg(__Iterator begin, __Iterator end, const Point2& inPoint)$/;"	f
installer	.\Installer\BuildInstaller.cpp	/^	void *	installer;$/;"	m	struct:InstallerStat	file:
intValue	.\lib_json\include\json\value.h	/^      intValue,      \/\/\/< signed integer value$/;"	e	enum:Json::ValueType
int_	.\lib_json\include\json\value.h	/^         LargestInt int_;$/;"	m	union:Json::Value::ValueHolder
int_abs	.\Utils\MathUtils.h	/^inline int int_abs	(const int in){return (in>=0   )?in:-in;}		\/\/ going to this proc instead takes 0.1%! 6.2% speed boost with no performance loss! BAM!$/;"	f
int_lim	.\OneOffs\osm_tile.c	/^int int_lim(int n, int min, int max) { if(n < min) return min; if (n > max) return max; return n; }$/;"	f
int_max	.\OneOffs\osm_tile.c	/^int int_max(int a,int b) { return a > b ? a : b; }$/;"	f
int_min	.\OneOffs\osm_tile.c	/^int int_min(int a,int b) { return a < b ? a : b; }$/;"	f
int_set_val	.\GUI\GUI_TextTable.h	/^	set<int>				int_set_val;$/;"	m	struct:GUI_CellContent
int_type	.\Utils\MemIStreamBuf.h	/^	typedef typename traits::int_type int_type;$/;"	t	class:std::basic_memstreambuf
int_val	.\GUI\GUI_TextTable.h	/^	int						int_val;$/;"	m	struct:GUI_CellContent
int_val	.\Interfaces\IPropertyObject.h	/^	int			int_val;$/;"	m	struct:PropertyVal_t
intbox	.\Utils\MathUtils.h	/^inline int intbox (const int x ,const int y ,const int x1,const int y1,const int x2,const int y2){$/;"	f
integer_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value integer_;$/;"	m	struct:ValueTest	file:
interior_overlap	.\Utils\CompGeomDefs2.h	/^inline	bool		Bbox2::interior_overlap(const Bbox2& rhs) const$/;"	f	class:Bbox2
internal_alloc	.\Utils\QuadTree.h	/^typename QuadTree<__T, __N>::Node * QuadTree<__T, __N>::internal_alloc(void)$/;"	f	class:QuadTree
internal_fa	.\Utils\unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:unz_file_info_s
internal_fa	.\Utils\zip.h	/^    uLong       internal_fa;    \/* internal file attributes        2 bytes *\/$/;"	m	struct:__anon106
internal_free	.\Utils\QuadTree.h	/^void QuadTree<__T, __N>::internal_free(Node * n)$/;"	f	class:QuadTree
interp	.\AC3DPlugins\tcl_utils.h	/^	Tcl_Interp *	interp;$/;"	m	class:TCL_linked_vard
interp	.\AC3DPlugins\tcl_utils.h	/^	Tcl_Interp *	interp;$/;"	m	class:TCL_linked_vari
interp	.\AC3DPlugins\tcl_utils.h	/^	Tcl_Interp *	interp;$/;"	m	class:TCL_linked_vars
interp	.\OneOffs\gen_roads10.h	/^inline float interp(const float x1,const float y1,const float x2,const float y2,const float x)$/;"	f
interp	.\Utils\MathUtils.h	/^inline float interp(	const float x1,const float y1,$/;"	f
interp	.\Utils\MathUtils.h	/^inline float interp(const float x1,const float y1,const float x2,const float y2,const float x)$/;"	f
interp	.\XPTools\AddObjects.cpp	/^inline	double interp(double i1, double i2, double i, double o1, double o2)$/;"	f
interp2	.\Utils\MathUtils.h	/^inline float interp2(const float rat_x,$/;"	f
interp360	.\Utils\MathUtils.h	/^inline float interp360(const float x1,const float y1,const float x2,const float y2,const float x)$/;"	f
interp_noise_1d	.\Utils\perlin.cpp	/^inline float interp_noise_1d(const float x,const int seed)$/;"	f
interp_noise_2d	.\Utils\perlin.cpp	/^float interp_noise_2d(const float x,const float y,const int seed)$/;"	f
interp_rat	.\Utils\perlin.cpp	/^inline float interp_rat	(const float a,const float b,const float rat )$/;"	f
interpolate	.\RenderFarmUI\RF_MapView.cpp	/^	bool			interpolate;$/;"	m	struct:DEMViewInfo_t	file:
intersect	.\OneOffs\shape2xon.cpp	/^	bool intersect(const seg_t& other, pt_t& p) const {$/;"	f	struct:seg_t
intersect	.\Utils\CompGeomDefs2.h	/^inline bool	Bezier2::intersect(const Bezier2& rhs, int d) const$/;"	f	class:Bezier2
intersect	.\Utils\CompGeomDefs2.h	/^inline bool	Segment2::intersect(const Segment2& rhs, Point2& p) const$/;"	f	class:Segment2
intersect	.\Utils\CompGeomDefs2.h	/^inline bool Line2::intersect(const Line2& l, Point2& p) const$/;"	f	class:Line2
intersect	.\Utils\CompGeomDefs3.h	/^inline	bool Plane3::intersect(const Plane3& pl, Line3& line) const$/;"	f	class:Plane3
intersect	.\Utils\CompGeomDefs3.h	/^inline bool	Plane3::intersect(const Line3& l, Point3& p) const$/;"	f	class:Plane3
intersect	.\Utils\CompGeomDefs3.h	/^inline bool	Plane3::intersect(const Plane3& p1, const Plane3& p2, Point3& p) const$/;"	f	class:Plane3
intersect	.\Utils\CompGeomDefs3.h	/^inline bool	Plane3::intersect(const Segment3& s, Point3& p) const$/;"	f	class:Plane3
interval	.\Utils\UTL_interval.h	/^	typedef pair<T,T>	interval;$/;"	t	class:UTL_interval
intervals	.\DSF\DSFLibWrite.cpp	/^		vector<int>			intervals;	\/\/ All but first are inclusive ends of ranges.$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
intervals	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		vector<int>			intervals;	\/\/ All but first are inclusive ends of ranges.$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
intlim	.\Utils\MathUtils.h	/^inline int intlim(const int in,const int min,const int max){$/;"	f
intmax2	.\Utils\MathUtils.h	/^inline int		intmax2		(const int x1,const int x2													){													return (x1>x2)?x1:x2;}$/;"	f
intmax3	.\Utils\MathUtils.h	/^inline int		intmax3		(const int x1,const int x2,const int x3										){int x5=(x1>x2)?x1:x2;								return (x3>x5)?x3:x5;}$/;"	f
intmax4	.\Utils\MathUtils.h	/^inline int		intmax4		(const int x1,const int x2,const int x3,const int x4						){int x5=(x1>x2)?x1:x2;	int x6=(x3>x4)?x3:x4;		return (x5>x6)?x5:x6;}$/;"	f
intmin2	.\Utils\MathUtils.h	/^inline int		intmin2		(const int x1,const int x2													){													return (x1<x2)?x1:x2;}$/;"	f
intmin3	.\Utils\MathUtils.h	/^inline int		intmin3		(const int x1,const int x2,const int x3										){int x4=(x1<x2)?x1:x2;								return (x3<x4)?x3:x4;}$/;"	f
intmin4	.\Utils\MathUtils.h	/^inline int		intmin4		(const int x1,const int x2,const int x3,const int x4						){int x5=(x1<x2)?x1:x2;	int x6=(x3<x4)?x3:x4;		return (x5<x6)?x5:x6;}$/;"	f
intnear	.\Utils\MathUtils.h	/^inline int		intnear		(const int in,const int nearest												){													return (int)fltnear((float)in,(float)nearest);}$/;"	f
intptr_t	.\AC3DPlugins\obj_editor.cpp	32;"	d	file:
intrange	.\Utils\MathUtils.h	/^inline int intrange(const int x ,const int x1,const int x2){$/;"	f
intround	.\Utils\MathUtils.h	/^inline int		intround	(const float in																){													return (in<0.0f)?(int)(in-0.5f):(int)(in+0.5f);}$/;"	f
intwrap	.\Utils\MathUtils.h	/^inline int intwrap(int in,const int min,const int max){	\/\/ we DON'T send 0 and 360. That is REDUNDANT AT DUE$/;"	f
invalidPath	.\lib_json\src\lib_json\json_value.cpp	/^Path::invalidPath( const std::string &path, $/;"	f	class:Json::Path
invert	.\RenderFarmUI\RF_Export.cpp	/^	int			invert;$/;"	m	struct:RF_ExportState_t	file:
invert	.\RenderFarmUI\RF_Import.cpp	/^	int			invert;$/;"	m	struct:RF_ImportState_t	file:
invertMatrix	.\Utils\MatrixUtils.cpp	/^invertMatrix(GLdouble *out, const GLdouble *m)$/;"	f
invert_sort_	.\WEDImportExport\WED_AptTable.cpp	/^	int invert_sort_;$/;"	m	struct:sort_by_apt	file:
invert_sort_	.\WEDImportExport\WED_ICAOTable.cpp	/^	int invert_sort_;$/;"	m	struct:sort_by_apt	file:
invert_sort_	.\WEDImportExport\WED_VerTable.cpp	/^	int invert_sort_;$/;"	m	struct:sort_by_ver	file:
isArray	.\lib_json\src\lib_json\json_value.cpp	/^Value::isArray() const$/;"	f	class:Json::Value
isArray_	.\lib_json\include\json\value.h	/^      bool isArray_;$/;"	m	class:Json::ValueIteratorBase
isArray_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isArray_;$/;"	m	struct:ValueTest::IsCheck	file:
isBool	.\lib_json\src\lib_json\json_value.cpp	/^Value::isBool() const$/;"	f	class:Json::Value
isBool_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isBool_;$/;"	m	struct:ValueTest::IsCheck	file:
isControlCharacter	.\lib_json\src\lib_json\json_tool.h	/^isControlCharacter(char ch)$/;"	f	namespace:Json
isConvertibleTo	.\lib_json\src\lib_json\json_value.cpp	/^Value::isConvertibleTo( ValueType other ) const$/;"	f	class:Json::Value
isDouble	.\lib_json\src\lib_json\json_value.cpp	/^Value::isDouble() const$/;"	f	class:Json::Value
isDouble_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isDouble_;$/;"	m	struct:ValueTest::IsCheck	file:
isInt	.\lib_json\src\lib_json\json_value.cpp	/^Value::isInt() const$/;"	f	class:Json::Value
isInt_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isInt_;$/;"	m	struct:ValueTest::IsCheck	file:
isIntegral	.\lib_json\src\lib_json\json_value.cpp	/^Value::isIntegral() const$/;"	f	class:Json::Value
isIntegral_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isIntegral_;$/;"	m	struct:ValueTest::IsCheck	file:
isItemAvailable	.\lib_json\include\json\value.h	/^      inline bool isItemAvailable() const$/;"	f	class:Json::Value
isMember	.\lib_json\src\lib_json\json_value.cpp	/^Value::isMember( const CppTL::ConstString &key ) const$/;"	f	class:Json::Value
isMember	.\lib_json\src\lib_json\json_value.cpp	/^Value::isMember( const char *key ) const$/;"	f	class:Json::Value
isMember	.\lib_json\src\lib_json\json_value.cpp	/^Value::isMember( const std::string &key ) const$/;"	f	class:Json::Value
isMemberNameStatic	.\lib_json\include\json\value.h	/^      inline bool isMemberNameStatic() const$/;"	f	class:Json::Value
isMultineArray	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::isMultineArray( const Value &value )$/;"	f	class:Json::StyledStreamWriter
isMultineArray	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::isMultineArray( const Value &value )$/;"	f	class:Json::StyledWriter
isNull	.\lib_json\src\lib_json\json_value.cpp	/^Value::isNull() const$/;"	f	class:Json::Value
isNull_	.\lib_json\include\json\value.h	/^      bool isNull_;$/;"	m	class:Json::ValueIteratorBase
isNull_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isNull_;$/;"	m	struct:ValueTest::IsCheck	file:
isNumeric	.\lib_json\src\lib_json\json_value.cpp	/^Value::isNumeric() const$/;"	f	class:Json::Value
isNumeric_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isNumeric_;$/;"	m	struct:ValueTest::IsCheck	file:
isObject	.\lib_json\src\lib_json\json_value.cpp	/^Value::isObject() const$/;"	f	class:Json::Value
isObject_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isObject_;$/;"	m	struct:ValueTest::IsCheck	file:
isRecommended	.\WEDImportExport\WED_VerTable.h	/^	bool isRecommended;$/;"	m	struct:VerInfo_t
isStaticString	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::isStaticString() const$/;"	f	class:Json::Value::CZString
isString	.\lib_json\src\lib_json\json_value.cpp	/^Value::isString() const$/;"	f	class:Json::Value
isString_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isString_;$/;"	m	struct:ValueTest::IsCheck	file:
isTopo	.\SDTS\SDTSReadTVP.cpp	/^	bool						isTopo;$/;"	m	struct:PointRecord	file:
isUInt	.\lib_json\src\lib_json\json_value.cpp	/^Value::isUInt() const$/;"	f	class:Json::Value
isUInt_	.\lib_json\src\test_lib_json\main.cpp	/^      bool isUInt_;$/;"	m	struct:ValueTest::IsCheck	file:
isValidIndex	.\lib_json\src\lib_json\json_value.cpp	/^Value::isValidIndex( ArrayIndex index ) const$/;"	f	class:Json::Value
isWorld	.\XESCore\WTPM.h	/^	bool					isWorld;$/;"	m	struct:WTPM_Face
is_backout_path	.\WEDImportExport\WED_DSFExport.cpp	/^static bool is_backout_path(const string& p)$/;"	f	file:
is_backup	.\WEDCore\WED_LibraryMgr.h	/^		bool		is_backup;$/;"	m	struct:WED_LibraryMgr::res_info_t
is_border	.\XESCore\Hydro.cpp	/^	is_border };$/;"	e	enum:__anon134	file:
is_border	.\XESCore\MeshAlgs.cpp	/^inline bool is_border(const CDT& inMesh, CDT::Face_handle f)$/;"	f
is_ccw	.\Utils\CompGeomDefs2.h	/^	bool	is_ccw(void) const { return Vector2(p1,p2).left_turn(Vector2(p2,p3)); }$/;"	f	struct:Triangle2
is_ccw	.\Utils\CompGeomDefs2.h	/^inline bool Polygon2::is_ccw(void) const$/;"	f	class:Polygon2
is_ccw_poly	.\OneOffs\osm2shape.c	/^int is_ccw_poly(double * x, double * y, int c)$/;"	f
is_ccw_polygon_pt	.\Utils\CompGeomDefs2.h	/^bool is_ccw_polygon_pt(__Iterator begin, __Iterator end)$/;"	f
is_ccw_polygon_seg	.\Utils\CompGeomDefs2.h	/^bool is_ccw_polygon_seg(__Iterator begin, __Iterator end)$/;"	f
is_coast	.\XESCore\DSFBuilder.cpp	/^int is_coast(const CDT::Edge& inEdge, const CDT& inMesh)$/;"	f
is_coast	.\XESCore\Hydro.cpp	/^	is_coast,$/;"	e	enum:__anon134	file:
is_coast	.\XESCore\MapAlgs.cpp	/^bool is_coast(Pmwx::Halfedge_handle h)$/;"	f
is_conforming_any	.\XESCore\MeshConformer.h	/^  bool is_conforming_any()$/;"	f	class:CGAL::Triangulation_conformer_any_2
is_conforming_done	.\XESCore\MeshConformer.h	/^  bool is_conforming_done()$/;"	f	class:CGAL::Triangulation_conformer_any_2
is_cross_pool	.\DSF\DSFLibWrite.cpp	/^		bool					is_cross_pool;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
is_cross_pool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool					is_cross_pool;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
is_curved	.\WEDImportExport\WED_AptIE.cpp	/^inline bool is_curved(int code) { return code == apt_lin_crv || code == apt_rng_crv ||  code == apt_end_crv; }$/;"	f
is_cw	.\Utils\CompGeomDefs2.h	/^	bool	is_cw (void) const { return Vector2(p1,p2).right_turn(Vector2(p2,p3)); }$/;"	f	struct:Triangle2
is_default	.\WEDCore\WED_LibraryMgr.h	/^		bool		is_default;$/;"	m	struct:WED_LibraryMgr::res_info_t
is_dir_sep	.\WEDImportExport\WED_DSFExport.cpp	/^static bool is_dir_sep(char c) { return c == '\/' || c == ':' || c == '\\\\'; }$/;"	f	file:
is_direct_parent	.\WEDCore\WED_LibraryMgr.cpp	/^static int is_direct_parent(const string& parent, const string& child)$/;"	f	file:
is_disclosed	.\GUI\GUI_TextTable.h	/^	int						is_disclosed;$/;"	m	struct:GUI_CellContent
is_done	.\Network\curl_http.cpp	/^bool	curl_http_get_file::is_done(void)$/;"	f	class:curl_http_get_file
is_empty	.\Utils\CompGeomDefs2.h	/^	bool		is_empty() const { return p1.x_ == p2.x_ || p1.y_ == p2.y_; }$/;"	f	struct:Bbox2
is_empty	.\Utils\CompGeomDefs2.h	/^	bool	is_empty(void) const { return p1 == p2; }$/;"	f	struct:Segment2
is_enum	.\RenderFarmUI\RF_MapView.cpp	/^	bool			is_enum;$/;"	m	struct:DEMViewInfo_t	file:
is_eol	.\GUI\GUI_Prefs.cpp	/^inline bool	is_eol(const char p) { return p == '\\r' || p == '\\n'; }$/;"	f
is_hex	.\XESCore\ConfigSystem.cpp	/^inline  bool is_hex(char c)$/;"	f
is_horizontal	.\Utils\CompGeomDefs2.h	/^	bool	is_horizontal(void) const { return p1.y_ == p2.y_; }$/;"	f	struct:Segment2
is_individual	.\Utils\XChunkyFileUtils.cpp	/^		bool		is_individual;$/;"	m	class:RLEEncoder	file:
is_individual	.\Utils\XChunkyFileUtils.cpp	/^	bool	is_individual;$/;"	m	class:RLEDecoder	file:
is_inner	.\OneOffs\osm2shape.c	/^int is_inner(int r, int w)$/;"	f
is_land	.\XESCore\Hydro.cpp	/^	is_land,$/;"	e	enum:__anon134	file:
is_leaf	.\OneOffs\osm_tile.c	/^static int	is_leaf = 0;$/;"	v	file:
is_left_turn	.\OneOffs\osm2shape.c	/^int is_left_turn(double x1, double y1, double x2, double y2, double x3, double y3)$/;"	f
is_level_graded	.\XESCore\NetHelpers.h	/^inline bool is_level_graded		(const vector<Pmwx::Halfedge_handle>& l)$/;"	f
is_level_highway	.\XESCore\NetHelpers.h	/^inline bool	is_level_highway     (const vector<Pmwx::Halfedge_handle>& l)$/;"	f
is_level_highway_y	.\XESCore\NetHelpers.h	/^inline bool	is_level_highway_y   (Pmwx::Vertex_handle j, const vector<Pmwx::Halfedge_handle>& l)$/;"	f
is_level_mixed	.\XESCore\NetHelpers.h	/^inline bool	is_level_mixed     (const vector<Pmwx::Halfedge_handle>& l)$/;"	f
is_lib	.\OneOffs\make_fill_rules.c	/^int is_lib = 0;$/;"	v
is_locked	.\RawImport\ShapeIO.cpp	/^	bool is_locked(Pmwx::Vertex_handle v) const {$/;"	f	struct:shape_lock_traits
is_locked	.\XESCore\BlockAlgs.cpp	/^	bool is_locked(Block_2::Vertex_handle v) const$/;"	f	struct:traits
is_locked	.\XESCore\Hydro2.cpp	/^	bool is_locked(typename Arr::Vertex_handle v) const { $/;"	f	struct:no_sharp_pt
is_locked	.\XESCore\MapHelpers.h	/^	bool is_locked(typename Arr::Vertex_handle v) const { return false; }$/;"	f	struct:default_lock_traits
is_locked	.\XESTools\GISTool_VectorCmds.cpp	/^	bool is_locked(Pmwx::Vertex_handle v) const { $/;"	f	struct:debug_lock_traits
is_loop	.\VPF\VPFImport.cpp	/^	bool	is_loop(void) const 			{ return start_cnd_index == end_cnd_index; }$/;"	f	struct:VPF_Line
is_multipolygon	.\OneOffs\osm2shape.c	/^int is_multipolygon(int r)$/;"	f
is_near	.\Utils\CompGeomDefs2.h	/^inline bool	Bezier2::is_near(const Point2& p, double d) const$/;"	f	class:Bezier2
is_near	.\Utils\CompGeomDefs2.h	/^inline bool	Segment2::is_near(const Point2& p, double distance) const$/;"	f	class:Segment2
is_net_fail	.\Network\curl_http.cpp	/^bool	curl_http_get_file::is_net_fail(void)$/;"	f	class:curl_http_get_file
is_node	.\OneOffs\osm2shape.c	/^static int is_node = 0;$/;"	v	file:
is_null	.\OneOffs\gen_roads10.h	/^	bool is_null(void) const { return a[0] == 0.0 && a[1] == 0.0 && a[2] == 0.0 && a[3] == 0.0; }$/;"	f	struct:perlin_params
is_null	.\Utils\CompGeomDefs2.h	/^	bool		is_null() const { return p1.x_ > p2.x_ || p1.y_ > p2.y_; }$/;"	f	struct:Bbox2
is_of_class	.\WEDImportExport\WED_GatewayExport.cpp	/^static bool is_of_class(WED_Thing * who, const char ** classes)$/;"	f	file:
is_ok	.\Network\curl_http.cpp	/^bool	curl_http_get_file::is_ok(void)$/;"	f	class:curl_http_get_file
is_oneway	.\XESCore\NetTables.h	/^	int			is_oneway;	$/;"	m	struct:NetRepInfo
is_oneway	.\XESCore\NetTables.h	/^	int			is_oneway;$/;"	m	struct:NetFeatureInfo
is_open	.\GUI\GUI_Clipboard.cpp	/^	bool is_open;$/;"	m	struct:StOpenClipboard	file:
is_panel_tex	.\AC3DPlugins\obj_panel.cpp	/^int		is_panel_tex(int tex_id)$/;"	f
is_parent_of	.\AC3DPlugins\ac_utils.cpp	/^int		is_parent_of(ACObject * parent, ACObject * child)$/;"	f
is_point	.\Utils\CompGeomDefs2.h	/^	bool		is_point() const { return p1 == p2; }$/;"	f	struct:Bbox2
is_range	.\DSF\DSFLibWrite.cpp	/^		bool					is_range;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
is_range	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool					is_range;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
is_rect	.\Utils\RLERegion.cpp	/^bool	RLERegion::is_rect(void) const$/;"	f	class:RLERegion
is_rel	.\OneOffs\osm2shape.c	/^static int is_rel = 0;$/;"	v	file:
is_reverse_x	.\XESCore\BezierApprox.cpp	/^bool is_reverse_x(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
is_reverse_y	.\XESCore\BezierApprox.cpp	/^bool is_reverse_y(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
is_road_adjacent	.\XESCore\BlockFill.cpp	/^bool is_road_adjacent(Block_2::Face_handle f)$/;"	f
is_run	.\Utils\XChunkyFileUtils.cpp	/^		bool		is_run;$/;"	m	class:RLEEncoder	file:
is_run	.\Utils\XChunkyFileUtils.cpp	/^	bool	is_run;$/;"	m	class:RLEDecoder	file:
is_same_terrain_c	.\RenderFarmUI\RF_Main.cpp	/^	is_same_terrain_c(Face_handle f) : variant_(f->data().GetParam(af_Variant,-1.0f)), terrain_(f->data().mTerrainType)  { }$/;"	f	struct:is_same_terrain_c
is_same_terrain_c	.\RenderFarmUI\RF_Main.cpp	/^struct is_same_terrain_c { $/;"	s	file:
is_same_terrain_p	.\RenderFarmUI\RF_Main.cpp	/^	is_same_terrain_p(Face_handle f) : terrain_(f->data().mTerrainType) { }$/;"	f	struct:is_same_terrain_p
is_same_terrain_p	.\RenderFarmUI\RF_Main.cpp	/^struct is_same_terrain_p { $/;"	s	file:
is_same_terrain_p	.\XESCore\Zoning.cpp	/^	is_same_terrain_p(int terrain) : terrain_(terrain) { }$/;"	f	struct:is_same_terrain_p
is_same_terrain_p	.\XESCore\Zoning.cpp	/^struct is_same_terrain_p {$/;"	s	file:
is_segment	.\Utils\CompGeomDefs2.h	/^	bool		is_segment(void) const { return p1 == c1 && p2 == c2; }$/;"	f	struct:Bezier2
is_selected	.\GUI\GUI_TextTable.h	/^	int						is_selected;$/;"	m	struct:GUI_CellContent
is_selected	.\GUI\GUI_TextTable.h	/^	int						is_selected;$/;"	m	struct:GUI_HeaderContent
is_simple	.\Utils\UTL_interval.h	/^bool	UTL_interval<T>::is_simple(void) const { return schedule.size() == 2; }$/;"	f	class:UTL_interval
is_spc	.\GUI\GUI_Prefs.cpp	/^inline bool	is_spc(const char p) { return p == '\\t' || p == ' '; }$/;"	f
is_split	.\Utils\CompGeomDefs2.h	/^	bool		is_split(void) const { return Vector2(lo,pt) != Vector2(pt,hi); }$/;"	f	struct:BezierPoint2
is_split	.\WEDEntities\WED_GISEdge.h	/^		WED_PropBoolText		is_split;$/;"	m	class:WED_GISEdge
is_split	.\WEDEntities\WED_GISPoint_Bezier.h	/^		WED_PropBoolText		is_split;$/;"	m	class:WED_GISPoint_Bezier
is_split	.\XESCore\BlockFill.cpp	/^		bool	is_split;$/;"	m	struct:reg_info_t	file:
is_strand	.\XESCore\MapAlgs.cpp	/^bool is_strand(Pmwx::Halfedge_handle h)$/;"	f
is_strip	.\DSF\DSFPointPool.cpp	/^bool is_strip(unsigned short * idx, int n)$/;"	f
is_subset	.\Utils\STLUtils.h	/^bool is_subset(const set<T>& sub, const set<T>& s)$/;"	f
is_vertical	.\Utils\CompGeomDefs2.h	/^	bool	is_vertical(void) const { return p1.x_ == p2.x_; }$/;"	f	struct:Segment2
is_vertical	.\WEDCore\WED_Clipping.cpp	/^	bool	is_vertical;$/;"	m	struct:clipping_line	file:
is_water	.\XESCore\Hydro.cpp	/^	is_water,$/;"	e	enum:__anon134	file:
is_way	.\OneOffs\osm2shape.c	/^static int is_way = 0;$/;"	v	file:
is_wet	.\Tiger\TigerImport.cpp	/^	int			is_wet;$/;"	m	struct:WaterCodeInfo_t	file:
iseoln	.\Utils\MemFileUtils.cpp	/^inline int iseoln(const char c) { return c == '\\n' || c == '\\r'; }$/;"	f
itemCount_	.\lib_json\include\json\value.h	/^      BucketIndex itemCount_;$/;"	m	class:Json::ValueInternalMap
itemIndex_	.\lib_json\include\json\value.h	/^         BucketIndex itemIndex_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
itemPerLink	.\lib_json\include\json\value.h	/^      enum { itemPerLink = 6 };  \/\/ sizeof(ValueInternalLink) = 128 on 32 bits architecture.$/;"	e	enum:Json::ValueInternalLink::__anon32
item_compare_x	.\Utils\RTree2.h	/^	struct	item_compare_x {$/;"	s	class:RTree2
item_compare_y	.\Utils\RTree2.h	/^	struct	item_compare_y {$/;"	s	class:RTree2
item_name	.\XPTools\XGrinderShell.cpp	/^	string					item_name;			\/\/ text of menu item$/;"	m	struct:flag_item_info	file:
item_type	.\Utils\RTree2.h	/^	typedef	pair<key_type,value_type>	item_type;$/;"	t	class:RTree2
items	.\Utils\QuadTree.h	/^		ValueType *	items;$/;"	m	struct:QuadTree::Node
items	.\Utils\RTree2.h	/^		item_type	items[N];$/;"	m	struct:RTree2::leaf
items	.\XPTools\XGrinderShell.cpp	/^	vector<flag_item_info>	items;$/;"	m	struct:flag_menu_info	file:
itemsPerPage	.\lib_json\include\json\value.h	/^      enum { itemsPerPage = 8 };    \/\/ should be a power of 2 for fast divide and modulo.$/;"	e	enum:Json::ValueInternalArray::__anon33
items_	.\Utils\STLUtils.h	/^	map_type		items_;$/;"	m	class:pqueue
items_	.\lib_json\include\json\value.h	/^      Value items_[itemPerLink];$/;"	m	class:Json::ValueInternalLink
iter	.\SDTS\SDTSRead.cpp	/^	sio_8211ForwardIterator			iter;$/;"	m	struct:SDTSModuleIterator::SDTSModuleIteratorImp	file:
iter_type	.\XESCore\DEMTables.cpp	/^	typedef set_type::const_iterator	iter_type;$/;"	t	struct:float_between_iterator	file:
iterate_cull	.\Utils\QuadTree.h	/^void			QuadTree<__T, __N>::iterate_cull($/;"	f	class:QuadTree
iterate_cull_node	.\Utils\QuadTree.h	/^void			QuadTree<__T, __N>::iterate_cull_node($/;"	f	class:QuadTree
iterate_do_merge	.\WEDWindows\WED_GroupCommands.cpp	/^static int iterate_do_merge(ISelectable * who, void * ref)$/;"	f	file:
iterator	.\OneOffs\gen_roads10.h	/^	typedef base::iterator			iterator;	$/;"	t	class:road_map
iterator	.\XESCore\DEMDefs.h	/^	typedef float *			iterator;$/;"	t	struct:DEMGeo
iterator	.\lib_json\include\json\value.h	/^      typedef ValueIterator iterator;$/;"	t	class:Json::Value
iterator_	.\lib_json\include\json\value.h	/^      } iterator_;$/;"	m	class:Json::ValueIteratorBase	typeref:union:Json::ValueIteratorBase::__anon34
ival	.\VPF\VPFImport.h	/^	int					ival;			\/\/ Matching int enum$/;"	m	struct:VPF_LineRule_t
ival	.\VPF\VPFImport.h	/^	int					ival;$/;"	m	struct:VPF_FaceRule_t
jpeg_throw_error	.\Utils\BitmapUtils.cpp	/^jpeg_throw_error (setjmp_err_mgr * err)$/;"	f
junction_types	.\Utils\RoadNetUtils.cpp	/^	vector<int>		junction_types;$/;"	m	struct:CapRecord_t	file:
kAirportMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kAirportMenu[] = {$/;"	v	file:
kAllowCurved	.\WEDMap\WED_CreatePolygonTool.cpp	/^static const int kAllowCurved[] = { 1, 1, 1, 1,    1, 0,  1, 1, 1 };$/;"	v	file:
kAppMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t	kAppMenu[] = {$/;"	v	file:
kApplyCtrlCtrX1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlCtrX1[9] = { 1.0, 1.0, 1.0, 0.0,-1.0,-1.0,-1.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrX1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlCtrX1[9] = { 1.0, 1.0, 1.0, 0.0,-1.0,-1.0,-1.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrX2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlCtrX2[9] = {-1.0,-1.0,-1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrX2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlCtrX2[9] = {-1.0,-1.0,-1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrY1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlCtrY1[9] = { 1.0, 0.0,-1.0,-1.0,-1.0, 0.0, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrY1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlCtrY1[9] = { 1.0, 0.0,-1.0,-1.0,-1.0, 0.0, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrY2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlCtrY2[9] = {-1.0, 0.0, 1.0, 1.0, 1.0, 0.0,-1.0,-1.0, 1.0 };$/;"	v	file:
kApplyCtrlCtrY2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlCtrY2[9] = {-1.0, 0.0, 1.0, 1.0, 1.0, 0.0,-1.0,-1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrX1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropCtrX1[9] = { 1.0, 1.0, 1.0,-0.5,-1.0,-1.0,-1.0, 0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrX1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropCtrX1[9] = { 1.0, 1.0, 1.0,-0.5,-1.0,-1.0,-1.0, 0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrX2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropCtrX2[9] = {-1.0,-1.0,-1.0, 0.5, 1.0, 1.0, 1.0,-0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrX2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropCtrX2[9] = {-1.0,-1.0,-1.0, 0.5, 1.0, 1.0, 1.0,-0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrY1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropCtrY1[9] = { 1.0, 0.5,-1.0,-1.0,-1.0,-0.5, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrY1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropCtrY1[9] = { 1.0, 0.5,-1.0,-1.0,-1.0,-0.5, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrY2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropCtrY2[9] = {-1.0,-0.5, 1.0, 1.0, 1.0, 0.5,-1.0,-1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropCtrY2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropCtrY2[9] = {-1.0,-0.5, 1.0, 1.0, 1.0, 0.5,-1.0,-1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropX1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropX1[9] = { 1.0, 1.0, 1.0,-0.5, 0.0, 0.0, 0.0, 0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropX1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropX1[9] = { 1.0, 1.0, 1.0,-0.5, 0.0, 0.0, 0.0, 0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropX2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropX2[9] = { 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0,-0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropX2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropX2[9] = { 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0,-0.5, 1.0 };$/;"	v	file:
kApplyCtrlPropY1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropY1[9] = { 1.0, 0.5, 0.0, 0.0, 0.0,-0.5, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropY1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropY1[9] = { 1.0, 0.5, 0.0, 0.0, 0.0,-0.5, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlPropY2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlPropY2[9] = { 0.0,-0.5, 1.0, 1.0, 1.0, 0.5, 0.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlPropY2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlPropY2[9] = { 0.0,-0.5, 1.0, 1.0, 1.0, 0.5, 0.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlX1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlX1[9] = { 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlX1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlX1[9] = { 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlX2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlX2[9] = { 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlX2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlX2[9] = { 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlY1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlY1[9] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlY1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlY1[9] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 };$/;"	v	file:
kApplyCtrlY2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyCtrlY2[9] = { 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0 };$/;"	v	file:
kApplyCtrlY2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyCtrlY2[9] = { 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0 };$/;"	v	file:
kApplyLinkX1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyLinkX1[8] = { 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };$/;"	v	file:
kApplyLinkX1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyLinkX1[8] = { 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };$/;"	v	file:
kApplyLinkX2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyLinkX2[8] = { 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0 };$/;"	v	file:
kApplyLinkX2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyLinkX2[8] = { 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0 };$/;"	v	file:
kApplyLinkY1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyLinkY1[8] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0 };$/;"	v	file:
kApplyLinkY1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyLinkY1[8] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0 };$/;"	v	file:
kApplyLinkY2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kApplyLinkY2[8] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 };$/;"	v	file:
kApplyLinkY2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kApplyLinkY2[8] = { 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 };$/;"	v	file:
kAptID	.\XESCore\XESIO.cpp	/^const	int	kAptID = 'aptD';$/;"	v
kAreaCodes	.\Tiger\(TigerImport Backup.cpp).cpp	/^const AreaInfo_t	kAreaCodes[] = {$/;"	v
kBtnNames	.\RenderFarmUI\RF_CropTool.cpp	/^static const char * kBtnNames[] = { "All", "Screen", "Clear", "Crop", "Delete", "Remove Oceans" };$/;"	v	file:
kBtnNames	.\RenderFarmUI\RF_ImageTool.cpp	/^static const char * kBtnNames[] = { "Open", "Show\/Hide", "Clear", "All", "Visible", "Fetch" };$/;"	v	file:
kCamDist	.\ObjEdit\OE_Zoomer3d.cpp	/^const	float	kCamDist = 500;$/;"	v
kCloseLoopDist	.\WEDMap\WED_CreateToolBase.cpp	/^const int kCloseLoopDist = 5;$/;"	v
kCmdKeys	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^static	const char	kCmdKeys [] = {$/;"	v	file:
kColRights	.\ObjEdit\OE_PatchList.cpp	/^const int	kColRights[] = {$/;"	v
kColorBands	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBands[][4] = {$/;"	v
kColorBandsBioMass	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBandsBioMass[][4] = {$/;"	v
kColorBandsDrainage	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBandsDrainage[][4] = {$/;"	v
kColorBandsElevationRange	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float kColorBandsElevationRange[][4] = {$/;"	v
kColorBandsRainfallYearly	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBandsRainfallYearly[][4] = {$/;"	v
kColorBandsRelativeElevation	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBandsRelativeElevation[][4] = {$/;"	v
kColorBandsTemperature	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBandsTemperature[][4] = {$/;"	v
kColorBandsTemperatureRange	.\RenderFarmUI\RF_DEMGraphics.cpp	/^float	kColorBandsTemperatureRange[][4] = {$/;"	v
kCompatibilityNetworkName	.\XPTools\Env2DSF.cpp	/^const	char *	kCompatibilityNetworkName = "XP6Network";$/;"	v
kCompatibilityProtoypeNames	.\XPTools\Env2DSF.cpp	/^const	char *	kCompatibilityProtoypeNames[] = {$/;"	v
kControlsX1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kControlsX1[9] = {	1.0, 1.0, 1.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.5 };$/;"	v	file:
kControlsX1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kControlsX1[9] = {	1.0, 1.0, 1.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.5 };$/;"	v	file:
kControlsX2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kControlsX2[9] = {	0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0, 0.5, 0.5 };$/;"	v	file:
kControlsX2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kControlsX2[9] = {	0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0, 0.5, 0.5 };$/;"	v	file:
kControlsY1	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kControlsY1[9] = {	1.0, 0.5, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 0.5 };$/;"	v	file:
kControlsY1	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kControlsY1[9] = {	1.0, 0.5, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 0.5 };$/;"	v	file:
kControlsY2	.\WEDMap\WED_MarqueeTool.cpp	/^static const double kControlsY2[9] = {	0.0, 0.5, 1.0, 1.0, 1.0, 0.5, 0.0, 0.0, 0.5 };$/;"	v	file:
kControlsY2	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static const double kControlsY2[9] = {	0.0, 0.5, 1.0, 1.0, 1.0, 0.5, 0.0, 0.0, 0.5 };$/;"	v	file:
kConvertLegacyObjTypes	.\RawImport\FAA_Obs.cpp	/^static	int	kConvertLegacyObjTypes[] = {$/;"	v	file:
kCornerBlend0	.\WEDMap\WED_VertexTool.cpp	/^const double kCornerBlend0[5] = { 0.5, 0.5, 0.25, 0.0, 0.0 };$/;"	v
kCornerBlend1	.\WEDMap\WED_VertexTool.cpp	/^const double kCornerBlend1[5] = { 0.0, 0.5, 0.25, 0.0, 0.5 };$/;"	v
kCornerBlend2	.\WEDMap\WED_VertexTool.cpp	/^const double kCornerBlend2[5] = { 0.0, 0.0, 0.25, 0.5, 0.5 };$/;"	v
kCornerBlend3	.\WEDMap\WED_VertexTool.cpp	/^const double kCornerBlend3[5] = { 0.5, 0.0, 0.25, 0.5, 0.0 };$/;"	v
kCreateCmds	.\WEDMap\WED_CreateBoxTool.cpp	/^static const char * kCreateCmds[] = {$/;"	v	file:
kCreateCmds	.\WEDMap\WED_CreateEdgeTool.cpp	/^static const char * kCreateCmds[] = { "Taxiway Route Line" };$/;"	v	file:
kCreateCmds	.\WEDMap\WED_CreateLineTool.cpp	/^static const char * kCreateCmds[] = {$/;"	v	file:
kCreateCmds	.\WEDMap\WED_CreatePointTool.cpp	/^static const char * kCreateCmds[] = {$/;"	v	file:
kCreateCmds	.\WEDMap\WED_CreatePolygonTool.cpp	/^static const char * kCreateCmds[] = { "Taxiway", "Boundary", "Marking", "Hole", "Facade", "Forest", "String", "Line", "Polygon" };$/;"	v	file:
kCurHandle	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	long	kCurHandle		= 1003;$/;"	v
kDEMs	.\RenderFarmUI\RF_MapView.cpp	/^static DEMViewInfo_t	kDEMs[] = {$/;"	v	file:
kDefCols	.\WEDImportExport\WED_AptTable.cpp	/^static int kDefCols[] = { 100, 100 };$/;"	v	file:
kDefCols	.\WEDImportExport\WED_ICAOTable.cpp	/^static int kDefCols[] = { 100, 100 };$/;"	v	file:
kDefCols	.\WEDImportExport\WED_VerTable.cpp	/^static int kDefCols[] = { 100, 100 };$/;"	v	file:
kDefCols	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^static int kDefCols[] = { 100, 100 };$/;"	v	file:
kDefaultBounds	.\WEDWindows\WED_StartWindow.cpp	/^static int kDefaultBounds[4] = { 50, 50, 850, 650 };$/;"	v	file:
kDefaultDocSize	.\WEDWindows\WED_DocumentWindow.cpp	/^int kDefaultDocSize[4] = { 0, 0, 1024, 768 };$/;"	v
kDefaultTokens	.\XESCore\EnumSystem.cpp	/^	const char * kDefaultTokens[] = {$/;"	v
kDeformInfo	.\ObjEdit\OE_CubeDeformer.cpp	/^const int	kDeformInfo[26][7] = {$/;"	v
kDemDirID	.\XESCore\XESIO.cpp	/^const	int	kDemDirID = 'DEMd';$/;"	v
kDisplayStrings	.\ObjEdit\OE_Preview.cpp	/^static	char *	kDisplayStrings[] = { "No Texture;Day;Night", "Wire Frame;Solid;Both", "No Back Faces;Show All;Show Hidden" };$/;"	v	file:
kDlgBottom	.\RenderFarmUI\RF_Progress.cpp	/^	kDlgBottom = 300,$/;"	e	enum:__anon82	file:
kDlgLeft	.\RenderFarmUI\RF_Progress.cpp	/^	kDlgLeft = 200,$/;"	e	enum:__anon82	file:
kDlgRight	.\RenderFarmUI\RF_Progress.cpp	/^	kDlgRight = 600,$/;"	e	enum:__anon82	file:
kDlgTop	.\RenderFarmUI\RF_Progress.cpp	/^	kDlgTop = 400,$/;"	e	enum:__anon82	file:
kDoubleClickDist	.\WEDMap\WED_CreateToolBase.cpp	/^const int kDoubleClickDist = 3;$/;"	v
kDoubleClickTime	.\WEDMap\WED_CreateToolBase.cpp	/^const float kDoubleClickTime = 0.2;$/;"	v
kEditCmdNames	.\RenderFarmUI\RF_EditCommands.cpp	/^const char *	kEditCmdNames[] = {$/;"	v
kEditMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t	kEditMenu[] = {$/;"	v	file:
kEndianSwapFloat	.\Env\EnvParser.c	/^const	char	kEndianSwapFloat [] = { 4, 0 };$/;"	v
kEndianSwapLatLonCode	.\Env\EnvParser.c	/^const	char	kEndianSwapLatLonCode [] = { 4, 0 };$/;"	v
kEndianSwapObstacleCode	.\Env\EnvParser.c	/^const	char	kEndianSwapObstacleCode [] = { 4, 0 };$/;"	v
kEndianSwapObstacleRemain	.\Env\EnvParser.c	/^const	char	kEndianSwapObstacleRemain [] = { 4, 4, 4, 0 };$/;"	v
kEndianSwapVersion	.\Env\EnvParser.c	/^const	char	kEndianSwapVersion [] = { 4, 0 };$/;"	v
kEndianSwapVertex606	.\Env\EnvParser.c	/^const	char	kEndianSwapVertex606 [] = { 4, 4, 4, 4, 0 };$/;"	v
kEndianSwapVertex610	.\Env\EnvParser.c	/^const	char	kEndianSwapVertex610 [] = { 4, -2, 4, 0 };	\/* Swap file to native *\/$/;"	v
kEndianSwapVertex610BE	.\Env\EnvParser.c	/^const	char	kEndianSwapVertex610BE [] = { -4, 2, 0 };	\/* Swap BE to native *\/$/;"	v
kEndianSwapVertex610BEWrite	.\Env\EnvWrite.c	/^const	char	kEndianSwapVertex610BEWrite [] = { -4, 2, 0 };	\/* Swap native to BE for elevation *\/$/;"	v
kEnvHeight	.\Env\EnvDefs.h	55;"	d
kEnvWidth	.\Env\EnvDefs.h	54;"	d
kExportTargetMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kExportTargetMenu[] = {$/;"	v	file:
kExtensions	.\RenderFarmUI\RF_Export.cpp	/^static const char * kExtensions[] = { ".png", ".bmp", "-", ".raw",".raw",".raw",".raw",".raw",".raw" };$/;"	v	file:
kFOV	.\ObjEdit\OE_Zoomer3d.cpp	/^const	float	kFOV = 30.0;$/;"	v
kFacs	.\DSF\DSFLib_TestGen.cpp	/^static char * kFacs[] = {$/;"	v	file:
kFacs	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^static char * kFacs[] = {$/;"	v	file:
kFar	.\ObjEdit\OE_Zoomer3d.cpp	/^const	float	kFar = 2000.0;$/;"	v
kFeatureCodes	.\Tiger\TigerImport.cpp	/^hash_map<string,FeatureInfo_t>	kFeatureCodes;$/;"	v
kFeatureTypes	.\RawImport\FAA_Obs.cpp	/^static	int		kFeatureTypes [] = {$/;"	v	file:
kFeetToMeters	.\XPTools\ConvertObj.cpp	36;"	d	file:
kFieldNames	.\RenderFarmUI\RF_CropTool.cpp	/^static const char * kFieldNames[] = { "West", "South", "East", "North" };$/;"	v	file:
kFieldNames	.\RenderFarmUI\RF_ImageTool.cpp	/^static const char * kFieldNames[] = { "SWLon", "SWLat", "SELon", "SELat", "NWLon", "NWLat", "NELon", "NELat" };$/;"	v	file:
kFileMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t	kFileMenu[] = {$/;"	v	file:
kFlipDouble	.\VPF\VPFTable.cpp	/^const char kFlipDouble[] = { 8, 0 };$/;"	v
kFlipFloat	.\VPF\VPFTable.cpp	/^const char kFlipFloat[] = { 4, 0 };$/;"	v
kFlipInt	.\VPF\VPFTable.cpp	/^const char kFlipInt[] = { 4, 0 };$/;"	v
kFlipShort	.\VPF\VPFTable.cpp	/^const char kFlipShort[] = { 2, 0 };$/;"	v
kFormatIntel	.\Env\EnvDefs.h	47;"	d
kFormatMac	.\Env\EnvDefs.h	46;"	d
kFuncs	.\WEDMap\WED_PreviewLayer.cpp	/^static ObjDrawFuncs10_t kFuncs  = { Obj_SetupPoly, Obj_SetupLine, Obj_SetupLight, Obj_SetupMovie, Obj_SetupPanel, Obj_TexCoord, Obj_TexCoordPointer, Obj_GetAnimParam, Obj_SetDraped, Obj_SetNoDraped };$/;"	v	file:
kGroupNames	.\WEDMap\WED_PreviewLayer.cpp	/^const struct { const char * name; int group_lo;  int group_hi; }	kGroupNames[] = {$/;"	v	typeref:struct:__anon121
kHScrollBarID	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	long	kHScrollBarID 	= 1000;$/;"	v
kHandleInfos	.\RenderFarmUI\RF_BezierTestTool.cpp	/^static const DragHandleInfo_t kHandleInfos[8] = {$/;"	v	file:
kHandleInfos	.\RenderFarmUI\RF_CropTool.cpp	/^static const DragHandleInfo_t kHandleInfos[8] = {$/;"	v	file:
kHandleInfos	.\RenderFarmUI\RF_ImageTool.cpp	/^static const DragHandleInfo_t kHandleInfos[4] = {$/;"	v	file:
kHandlePosFractions	.\ObjEdit\OE_TexEdWindow.cpp	/^const float	kHandlePosFractions[8][4] = {$/;"	v
kHandleRad	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	float	kHandleRad = 3.0;		\/\/ Handles are about 6 pixels around$/;"	v
kHandleSlopX	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	long	kHandleSlopX	= 1004;$/;"	v
kHandleSlopY	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	long	kHandleSlopY	= 1005;$/;"	v
kHandleToBoundsX	.\RenderFarmUI\RF_CropTool.cpp	/^static const	int	kHandleToBoundsX[8] = { 0, 4, 2, 0, 2, 0, 4, 2 };$/;"	v	file:
kHandleToBoundsY	.\RenderFarmUI\RF_CropTool.cpp	/^static const	int	kHandleToBoundsY[8] = { 1, 1, 1, 5, 5, 3, 3, 3$/;"	v	file:
kHandleWriteFlags	.\ObjEdit\(old)\OE_TexEd.cpp	/^int kHandleWriteFlags[9][4] = {$/;"	v
kHandleWriteFlags	.\ObjEdit\OE_TexEdWindow.cpp	/^const int kHandleWriteFlags[9][4] = {$/;"	v
kHelpMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kHelpMenu[] = {$/;"	v	file:
kINSET	.\XESTools\HackExport.cpp	/^const	double	kINSET = 90.0 \/ (6080.0 * 60.0);$/;"	v
kImageBlend0	.\WEDMap\WED_VertexTool.cpp	/^static double kImageBlend0[10] = { 1.0,	0.0, 0.0, 0.0, 0.5,	0.0, 0.0, 0.5,  0.55, -0.05 };$/;"	v	file:
kImageBlend1	.\WEDMap\WED_VertexTool.cpp	/^static double kImageBlend1[10] = { 0.0,	1.0, 0.0, 0.0, 0.5,	0.5, 0.0, 0.0, -0.05,  0.55 };$/;"	v	file:
kImageBlend2	.\WEDMap\WED_VertexTool.cpp	/^static double kImageBlend2[10] = { 0.0,	0.0, 1.0, 0.0, 0.0,	0.5, 0.5, 0.0, -0.05,  0.55 };$/;"	v	file:
kImageBlend3	.\WEDMap\WED_VertexTool.cpp	/^static double kImageBlend3[10] = { 0.0,	0.0, 0.0, 1.0, 0.0,	0.0, 0.5, 0.5,  0.55, -0.05 };$/;"	v	file:
kImportLayerTitles	.\RenderFarmUI\RF_Import.cpp	/^static	const char * kImportLayerTitles =$/;"	v	file:
kImportLayers	.\RenderFarmUI\RF_Import.cpp	/^static	int	kImportLayers[] = {$/;"	v	file:
kInchesToMeters	.\XPTools\ConvertObj.cpp	37;"	d	file:
kIsAirport	.\WEDMap\WED_CreateEdgeTool.cpp	/^static const int kIsAirport[] = { 1 };$/;"	v	file:
kIsAirport	.\WEDMap\WED_CreatePointTool.cpp	/^static int kIsAirport[]			= { 1, 1, 1, 1, 1, 1, 1, 0 };$/;"	v	file:
kIsAirport	.\WEDMap\WED_CreatePolygonTool.cpp	/^static const int kIsAirport[] = { 1, 1, 1,  0,     0, 0,  0, 0, 0 };$/;"	v	file:
kIsToolDirectional	.\WEDMap\WED_CreatePointTool.cpp	/^static int kIsToolDirectional[] = { 0, 1, 1, 1, 1, 0, 0, 1 };$/;"	v	file:
kLayerMasks	.\XPTools\Env2DSF.cpp	/^const	float	kLayerMasks[16][2] = {	\/\/ Bitmask, S&T index$/;"	v
kMainMapID	.\XESCore\MapIO.cpp	/^const int kMainMapID = 'MAP2';$/;"	v
kMapID	.\XESCore\XESIO.cpp	/^const	int	kMapID = 'MAP1';$/;"	v
kMargin	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	int		kMargin = 5;			\/\/ 5 pixel margin when zoomed out, so we can see handles, etc.$/;"	v
kMargin	.\ObjEdit\OE_TexEdWindow.cpp	/^const	float	kMargin = 20;$/;"	v
kMargin	.\XPTools\ObjEdit.cpp	123;"	d	file:
kMaxDegChangePerSample	.\RenderFarmUI\RF_SpecialCommands.cpp	51;"	d	file:
kMaxLODForTerrain	.\XPTools\Env2DSF.cpp	/^const double	kMaxLODForTerrain = 25.0 * 6080.0 \/ 3.2;	\/\/ 25 nm visibility max$/;"	v
kMaxScale	.\ObjEdit\OE_TexEdWindow.cpp	/^const float	kMaxScale = 16.0;$/;"	v
kMaxUndo	.\ObjEdit\OE_DataModel.cpp	29;"	d	file:
kMeshControlID	.\XESCore\MeshIO.cpp	/^const int kMeshControlID = 'mesh';$/;"	v
kMeshData1ID	.\XESCore\MeshIO.cpp	/^const int kMeshData1ID = 'dat1';$/;"	v
kMeshID	.\XESCore\XESIO.cpp	/^const	int	kMeshID = 'MSH1';$/;"	v
kMeshPatchSize	.\XPTools\Env2DSF.cpp	/^const int		kMeshPatchSize = 10;						\/\/ Number of quads per terrain section, must be divisor of 150 & 200$/;"	v
kMetersToFeet	.\XPTools\ConvertObj.cpp	38;"	d	file:
kMetersToInches	.\XPTools\ConvertObj.cpp	39;"	d	file:
kMinScale	.\ObjEdit\OE_TexEdWindow.cpp	/^const float	kMinScale = 1.0 \/ 4.0;$/;"	v
kMsgCancel	.\WEDImportExport\WED_AptImportDialog.cpp	/^	kMsgCancel$/;"	e	enum:__anon119	file:
kMsgImport	.\WEDImportExport\WED_AptImportDialog.cpp	/^	kMsgImport,$/;"	e	enum:__anon119	file:
kMsg_FilterChanged	.\WEDImportExport\WED_AptImportDialog.cpp	/^	kMsg_FilterChanged = WED_PRIVATE_MSG_BASE,$/;"	e	enum:__anon119	file:
kMyResourceID	.\Installer\XResources.win.cpp	/^int		kMyResourceID = 1001;$/;"	v
kNameField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kNameField 		= 1000;$/;"	v
kNear	.\ObjEdit\OE_Zoomer3d.cpp	/^const	float	kNear = 50.0;$/;"	v
kNetworkTypeRoad	.\XPTools\Env2DSF.cpp	/^const int	kNetworkTypeRoad = 0;$/;"	v
kNetworkTypeTrail	.\XPTools\Env2DSF.cpp	/^const int	kNetworkTypeTrail = 2;$/;"	v
kNetworkTypeTrain	.\XPTools\Env2DSF.cpp	/^const int	kNetworkTypeTrain = 1;$/;"	v
kNormal	.\XPTools\TaxiMaker.cpp	/^static taxi_element_t	kNormal[] = {$/;"	v	file:
kObjDensityMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kObjDensityMenu[] = {$/;"	v	file:
kObjectGranularity	.\XPTools\Env2DSF.cpp	/^int	kObjectGranularity	= 10;								\/\/ New object every 10 meters$/;"	v
kObjs	.\DSF\DSFLib_TestGen.cpp	/^static char *	kObjs[] = {$/;"	v	file:
kObjs	.\DSF\dsflib_013005\DSFLib_TestGen.cpp	/^static char *	kObjs[] = {$/;"	v	file:
kObstacleTypeCustom	.\Env\EnvDefs.h	40;"	d
kObstacleTypeStop	.\Env\EnvDefs.h	37;"	d
kOverscale	.\XESCore\MapAlgs.h	27;"	d
kPavementMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kPavementMenu[] = {$/;"	v	file:
kPerBField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPerBField 		= 1008;$/;"	v
kPerLField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPerLField 		= 1002;$/;"	v
kPerRField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPerRField 		= 1004;$/;"	v
kPerTField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPerTField 		= 1006;$/;"	v
kPixBField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPixBField 		= 1007;$/;"	v
kPixLField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPixLField 		= 1001;$/;"	v
kPixRField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPixRField 		= 1003;$/;"	v
kPixTField	.\ObjEdit\(old)\OE_TexInfo.cpp	/^const	long	kPixTField 		= 1005;$/;"	v
kPointClickSlop	.\RenderFarmUI\RF_SelectionTool.cpp	/^const	int kPointClickSlop = 4;$/;"	v
kPrgBottom	.\RenderFarmUI\RF_Progress.cpp	/^	kPrgBottom = 320,$/;"	e	enum:__anon82	file:
kPrgLeft	.\RenderFarmUI\RF_Progress.cpp	/^	kPrgLeft = 230,$/;"	e	enum:__anon82	file:
kPrgRight	.\RenderFarmUI\RF_Progress.cpp	/^	kPrgRight = 570,$/;"	e	enum:__anon82	file:
kPrgTop	.\RenderFarmUI\RF_Progress.cpp	/^	kPrgTop = 340,$/;"	e	enum:__anon82	file:
kProcCmdNames	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^const char *	kProcCmdNames [] = {$/;"	v
kQuadBlend0	.\WEDMap\WED_VertexTool.cpp	/^const double kQuadBlend0[9] = { 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.5, 0.25 };$/;"	v
kQuadBlend1	.\WEDMap\WED_VertexTool.cpp	/^const double kQuadBlend1[9] = { 0.0, 1.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.25 };$/;"	v
kQuadBlend2	.\WEDMap\WED_VertexTool.cpp	/^const double kQuadBlend2[9] = { 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.25 };$/;"	v
kQuadBlend3	.\WEDMap\WED_VertexTool.cpp	/^const double kQuadBlend3[9] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.5, 0.25 };$/;"	v
kQuadDeltaX	.\XPTools\Env2DSF.cpp	/^int	kQuadDeltaX[4] = { 0, 0, 1, 1 };$/;"	v
kQuadDeltaY	.\XPTools\Env2DSF.cpp	/^int kQuadDeltaY[4] = { 0, 1, 1, 0 };$/;"	v
kRequireClosed	.\WEDMap\WED_CreatePolygonTool.cpp	/^static const int kRequireClosed[] = { 1, 1, 0, 1,    1, 1, 0, 0, 1 };$/;"	v	file:
kRoadCodes	.\Tiger\(TigerImport Backup.cpp).cpp	/^const RoadInfo_t	kRoadCodes[] = {$/;"	v
kRoadCodes	.\Tiger\TigerImport.cpp	/^hash_map<string, RoadInfo_t>	kRoadCodes;$/;"	v
kRoadStop	.\Env\EnvDefs.h	43;"	d
kRobinToFeatures	.\RawImport\FAA_Obs.cpp	/^static	int	kRobinToFeatures[] = {$/;"	v	file:
kRowHeight	.\ObjEdit\OE_PatchList.cpp	/^const int kRowHeight = 32;$/;"	v
kRunwayBlend0	.\WEDMap\WED_VertexTool.cpp	/^const double kRunwayBlend0[4] = { 0.75,		0.0,	0.75,	0.0		};$/;"	v
kRunwayBlend1	.\WEDMap\WED_VertexTool.cpp	/^const double kRunwayBlend1[4] = { 0.0,		0.25,	0.0,	0.25	};$/;"	v
kRunwayBlend2	.\WEDMap\WED_VertexTool.cpp	/^const double kRunwayBlend2[4] = { 0.0,		0.75,	0.0,	0.75	};$/;"	v
kRunwayBlend3	.\WEDMap\WED_VertexTool.cpp	/^const double kRunwayBlend3[4] = { 0.25,		0.0,	0.25,	0.0		};$/;"	v
kRwyPropNames	.\WEDEntities\WED_GISLine_Width.cpp	/^const char * kRwyPropNames[rwy_prop_count] = {$/;"	v
kSBSIZE	.\GUI\GUI_ScrollerPane.cpp	/^const int	kSBSIZE = 16;$/;"	v
kSDTSErrMsgs	.\SDTS\SDTSReadTVP.cpp	/^const char *		kSDTSErrMsgs[] = {$/;"	v
kSPACING	.\XESTools\HackExport.cpp	/^const double	kSPACING = 100.0 \/ (6080.0 * 60.0);$/;"	v
kScrollBarID	.\ObjEdit\(old)\OE_TexList.cpp	/^const	long	kScrollBarID = 10001;$/;"	v
kScrollBarWidth	.\ObjEdit\OE_Scroller.cpp	/^const	int	kScrollBarWidth = 10;$/;"	v
kSelectMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kSelectMenu[] = {$/;"	v	file:
kSettingsItems	.\XPTools\GetImage.cpp	/^const char *	kSettingsItems[] = {$/;"	v
kShapeFileEpsi	.\XESTools\GISTool_VectorCmds.cpp	/^const double	kShapeFileEpsi = 0.1 \/ (DEG_TO_NM_LAT * NM_TO_MTR);$/;"	v
kSnowLineInfo	.\XESCore\DEMAlgs.cpp	/^static const SnowLineInfo_t kSnowLineInfo[] = {$/;"	v	file:
kSourceIndex	.\WEDMap\WED_VertexTool.cpp	/^const int kSourceIndex[5] = { 2, 2, 2, 2, 2 };$/;"	v
kSpecialItems	.\RenderFarmUI\RF_SpecialCommands.cpp	/^GUI_MenuItem_t	kSpecialItems[] = {$/;"	v
kStdLapseRate	.\XESCore\XESConstants.h	/^const float 	kStdLapseRate = -2.0 \/ 304.8;$/;"	v
kStepsX	.\XESCore\DEMDefs.h	/^const int kStepsX[8] = { -1,  0, 1, 0,  1, 1, -1, -1 };$/;"	v
kStepsY	.\XESCore\DEMDefs.h	/^const int kStepsY[8] = {  0, -1, 0, 1, -1, 1, -1,  1 };$/;"	v
kSwapEight	.\XESCore\SimpleIO.h	/^const char	kSwapEight[] =  { 8, 0 };$/;"	v
kSwapFour	.\XESCore\SimpleIO.h	/^const char	kSwapFour[] = { 4, 0 };$/;"	v
kSwapTwo	.\XESCore\SimpleIO.h	/^const char	kSwapTwo[] = { 2, 0 };$/;"	v
kTargetIndex	.\WEDMap\WED_VertexTool.cpp	/^const int kTargetIndex[5] = { 0, 1, 3, 4, 5 };$/;"	v
kTaxiGroupBreak	.\Env\EnvDefs.h	57;"	d
kTaxiGroupContinue	.\Env\EnvDefs.h	59;"	d
kTaxiGroupEnd	.\Env\EnvDefs.h	58;"	d
kTex1X	.\RenderFarmUI\RF_Progress.cpp	/^	kTex1X = 230,$/;"	e	enum:__anon82	file:
kTex1Y	.\RenderFarmUI\RF_Progress.cpp	/^	kTex1Y = 370,$/;"	e	enum:__anon82	file:
kTex2X	.\RenderFarmUI\RF_Progress.cpp	/^	kTex2X = 230,$/;"	e	enum:__anon82	file:
kTex2Y	.\RenderFarmUI\RF_Progress.cpp	/^	kTex2Y = 355$/;"	e	enum:__anon82	file:
kTexListItemHeight	.\ObjEdit\(old)\OE_TexList.cpp	/^const	int		kTexListItemHeight = 48;$/;"	v
kThemeNames	.\XPTools\GetImage.cpp	/^const char * kThemeNames[] = {$/;"	v
kTitles	.\ObjEdit\OE_Preview.cpp	/^static	char *	kTitles[] = { "Preview", "Selection", "Hidden Surfaces", "Projection Setup", "Projection Preview" };$/;"	v	file:
kTitles	.\RenderFarmUI\RF_Export.cpp	/^static const char * kTitles = "PNG;BMP;-;8-Bit Raw;16-Bit Raw (IBM);32-Bit Raw (IBM);Floating Point Raw(IBM);16-Bit Raw (Mac);32-Bit Raw (Mac);Floating Point Raw(Mac)";$/;"	v	file:
kTitles	.\RenderFarmUI\RF_Import.cpp	/^static const char * kTitles =$/;"	v	file:
kTokensID	.\XESCore\XESIO.cpp	/^const	int	kTokensID = 'TOKN';$/;"	v
kToolKeys	.\WEDMap\WED_MapPane.cpp	/^char	kToolKeys[] = {$/;"	v
kToolKeys	.\WEDTCE\WED_TCEPane.cpp	/^static char	kToolKeys[] = {$/;"	v	file:
kTypes	.\ObjEdit\OE_Preview.cpp	/^static	const char *	kTypes [] = {$/;"	v	file:
kVScrollBarID	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	long	kVScrollBarID 	= 1001;$/;"	v
kVersion606	.\Env\EnvDefs.h	31;"	d
kVersion610	.\Env\EnvDefs.h	32;"	d
kVersion631	.\Env\EnvDefs.h	33;"	d
kVersion650	.\Env\EnvDefs.h	34;"	d
kViewCmds	.\XPTools\ObjEdit.cpp	/^const char * kViewCmds[view_Count] = {$/;"	v
kViewItems	.\RenderFarmUI\RF_MapView.cpp	/^GUI_MenuItem_t	kViewItems[] = {$/;"	v
kViewMenu	.\WEDWindows\WED_Menus.cpp	/^static const GUI_MenuItem_t kViewMenu[] = {$/;"	v	file:
kWaterCodes	.\Tiger\TigerImport.cpp	/^hash_map<string, WaterCodeInfo_t>	kWaterCodes;$/;"	v
kZoomFactor	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	int		kZoomFactor = 16;		\/\/ Max zoom out is 16x smaller.  Makes 64x64 texture size at Max$/;"	v
kZoomID	.\ObjEdit\(old)\OE_TexEd.cpp	/^const	long	kZoomID 		= 1002;$/;"	v
k_3d_classes	.\WEDImportExport\WED_GatewayExport.cpp	/^const char * k_3d_classes[] = {$/;"	v
k_anim_names	.\AC3DPlugins\obj_editor.cpp	/^static const char * k_anim_names[6] = { "no animation", "rotate", "translate", "static", "show", "hide" };$/;"	v	file:
k_atc_flow_class	.\WEDImportExport\WED_GatewayExport.cpp	/^const char * k_atc_flow_class[] = { WED_ATCFlow::sClass, 0 };$/;"	v
k_atc_taxi_route_class	.\WEDImportExport\WED_GatewayExport.cpp	/^const char * k_atc_taxi_route_class[] = { WED_TaxiRoute::sClass, 0 };$/;"	v
k_dsf_classes	.\WEDImportExport\WED_GatewayExport.cpp	/^const char * k_dsf_classes[] = {$/;"	v
k_light_info	.\Obj\XObjWriteEmbedded.cpp	/^static named_light_info_t k_light_info[] = {$/;"	v	file:
kernelN	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::kernelN(int x, int y, int dim, float * kernel) const$/;"	f	class:DEMGeo
kernelN_Normalize	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::kernelN_Normalize(int x, int y, int dim, float * kernel) const$/;"	f	class:DEMGeo
kernelmaxN	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::kernelmaxN(int x, int y, int dim, float * kernel) const$/;"	f	class:DEMGeo
key	.\GUI\GUI_Commander.h	/^				uint32_t		key;$/;"	m	struct:GUI_Commander::deferred_cmd_or_key
key	.\GUI\GUI_Defs.h	/^	char			key;			\/\/ Menu Key - note that this is ASCII, not a vkey code$/;"	m	struct:GUI_MenuItem_t
key	.\Obj\XObjDefs.h	/^	float					key;$/;"	m	struct:XObjKey
key	.\OneOffs\gen_roads10.h	/^		int			key;$/;"	m	struct:road_map::range_ref
keyPressEvent	.\UI\XWin.lin.cpp	/^void XWin::keyPressEvent(QKeyEvent* e)$/;"	f	class:XWin
keyReleaseEvent	.\UI\XWin.lin.cpp	/^void XWin::keyReleaseEvent(QKeyEvent* e)$/;"	f	class:XWin
keyType	.\VPF\VPFTable.h	/^	char		keyType;$/;"	m	struct:VPF_ColumnDef
key_	.\lib_json\include\json\value.h	/^      std::string key_;$/;"	m	class:Json::PathArgument
key_extrap	.\AC3DPlugins\obj_anim.cpp	/^inline float	key_extrap(float input, const vector<XObjKey>& table, int n)$/;"	f
key_extrap	.\Obj\ObjDraw.cpp	/^inline float	key_extrap(float input, const vector<XObjKey>& table, int n)$/;"	f
key_type	.\Obj\ObjPointPool.h	/^	typedef	vector<float>									key_type;$/;"	t	class:ObjPointPool
key_type	.\Utils\RTree2.h	/^	typedef Bbox2						key_type;$/;"	t	class:RTree2
keyframes	.\Obj\XObjDefs.h	/^	vector<XObjKey>			keyframes;$/;"	m	struct:XObjAnim8
keys_	.\lib_json\include\json\value.h	/^      char *keys_[itemPerLink];$/;"	m	class:Json::ValueInternalLink
kill	.\Tiger\TIGERTypes.h	/^	bool						kill;		\/\/ Marker flag for culling$/;"	m	struct:PolygonInfo_t
kill	.\Tiger\TIGERTypes.h	/^	bool			kill;		\/\/ Marker flag for culling$/;"	m	struct:ChainInfo_t
kill_alpha	.\WEDCore\WED_ResourceMgr.h	/^	bool		kill_alpha;$/;"	m	struct:pol_info_t
kill_antennas	.\XESCore\Zoning.cpp	/^void kill_antennas(Pmwx& io_map, Pmwx::Face_handle f, float max_len)$/;"	f
kill_dataref	.\AC3DPlugins\XPlaneSupport.tcl	/^proc kill_dataref { dref } {$/;"	p
kill_pol_texture	.\WEDMap\WED_PreviewLayer.cpp	/^static void kill_pol_texture(void)$/;"	f	file:
kill_taxi_texture	.\WEDMap\WED_PreviewLayer.cpp	/^static void kill_taxi_texture(void)$/;"	f	file:
kill_way	.\OneOffs\osm2shape.c	/^void kill_way(int r, int w)$/;"	f
kill_zero_length_segment	.\WEDImportExport\WED_DSFExport.cpp	/^struct kill_zero_length_segment {$/;"	s	file:
kind	.\DSF\DSFPointPool.h	/^	int					kind;$/;"	m	struct:DSFPrimitive
kind	.\Env\Persistence.h	/^	long	kind;$/;"	m	struct:ObjectInfo
kind	.\OneOffs\GenTerrain.c	/^	int				kind;$/;"	m	struct:__anon62	file:
kind	.\RawImport\FAA_Obs.h	/^	int			kind;$/;"	m	struct:FAAObs_t
kind	.\WEDEntities\WED_AirportBeacon.h	/^	WED_PropIntEnum			kind;$/;"	m	class:WED_AirportBeacon
kind	.\XPTools\Env2DSF.cpp	/^	int		kind;$/;"	m	struct:NetworkSeg_t	file:
kindIndex	.\lib_json\include\json\value.h	/^         kindIndex,$/;"	e	enum:Json::PathArgument::Kind
kindKey	.\lib_json\include\json\value.h	/^         kindKey$/;"	e	enum:Json::PathArgument::Kind
kindNone	.\lib_json\include\json\value.h	/^         kindNone = 0,$/;"	e	enum:Json::PathArgument::Kind
kind_	.\lib_json\include\json\value.h	/^      Kind kind_;$/;"	m	class:Json::PathArgument
kind_code	.\XESCore\AptDefs.h	/^	int					kind_code;				\/\/ Enum$/;"	m	struct:AptInfo_t
kind_str	.\RawImport\FAA_Obs.h	/^	string		kind_str;$/;"	m	struct:FAAObs_t
l_	.\RenderFarmUI\RF_Assert.h	/^		  int    l_;$/;"	m	class:rf_assert_fail_exception
l_	.\RenderFarmUI\RF_Assert.h	/^		: c_(c), f_(f), l_(l) {}$/;"	f	class:rf_assert_fail_exception
l_	.\RenderFarmUI\RF_Assert.h	/^		: c_(x.c_), f_(x.f_), l_(x.l_) {}$/;"	f	class:rf_assert_fail_exception
l_	.\Utils\AssertUtils.cpp	/^		  int    l_;$/;"	m	class:assert_fail_exception	file:
l_	.\Utils\AssertUtils.cpp	/^		: c_(c), f_(f), l_(l) {}$/;"	f	class:assert_fail_exception
l_	.\Utils\AssertUtils.cpp	/^		: c_(x.c_), f_(x.f_), l_(x.l_) {}$/;"	f	class:assert_fail_exception
l_	.\WEDCore\WED_Assert.h	/^		  int    l_;$/;"	m	class:wed_assert_fail_exception
l_	.\WEDCore\WED_Assert.h	/^		: c_(c), f_(f), l_(l) {}$/;"	f	class:wed_assert_fail_exception
l_	.\WEDCore\WED_Assert.h	/^		: c_(x.c_), f_(x.f_), l_(x.l_) {}$/;"	f	class:wed_assert_fail_exception
lagrange_coef	.\WEDMap\WED_StructureLayer.cpp	/^inline double lagrange_coef(int n, int s)$/;"	f
lagrange_weight	.\WEDMap\WED_StructureLayer.cpp	/^inline double lagrange_weight(double t, int n, int s)$/;"	f
landUse	.\Env\Persistence.h	/^	short		landUse;$/;"	m	struct:VertexInfo
land_class	.\Tiger\(TigerImport Backup.cpp).cpp	/^	int					land_class;$/;"	m	struct:AreaInfo_t	file:
landuse	.\XESCore\DEMTables.h	/^	int				landuse;$/;"	m	struct:NaturalTerrainRule_t
landuse	.\XESCore\ForestTables.h	/^	int			landuse;$/;"	m	struct:ForestRule_t
lanes	.\OneOffs\gen_roads10.h	/^	vector<traffic_lane>		lanes;$/;"	m	class:road
last	.\OneOffs\gen_roads.cpp	/^road_deck * last = NULL;$/;"	v
last	.\XESCore\DSFBuilder.cpp	/^	double last[3];$/;"	m	struct:road_coords_checker	file:
lastUsedPredicateId_	.\lib_json\src\test_lib_json\jsontest.h	/^      PredicateContext::Id lastUsedPredicateId_;$/;"	m	class:JsonTest::TestResult
lastValueEnd_	.\lib_json\include\json\reader.h	/^      Location lastValueEnd_;$/;"	m	class:Json::Reader
lastValue_	.\lib_json\include\json\reader.h	/^      Value *lastValue_;$/;"	m	class:Json::Reader
last_block	.\Utils\zip.c	/^    linkedlist_datablock_internal* last_block;$/;"	m	struct:linkedlist_data_s	file:
last_enum	.\WEDCore\WED_EnumSystem.h	/^	last_enum$/;"	e	enum:__anon109
last_node_id	.\OneOffs\osm2shape.c	/^static int last_node_id=-1;			\/\/ Counting info to track out-of-order XML files.$/;"	v	file:
last_rel_id	.\OneOffs\osm2shape.c	/^static int last_rel_id=-1;$/;"	v	file:
last_way_id	.\OneOffs\osm2shape.c	/^static int last_way_id=-1;$/;"	v	file:
lat	.\Env\EnvDefs.h	/^	float	lat;$/;"	m	struct:__anon19
lat	.\OneOffs\gen_roads10.h	/^	float			lat;$/;"	m	struct:traffic_lane
lat	.\OneOffs\gen_roads10.h	/^	float			lat;$/;"	m	struct:wire
lat	.\OneOffs\gen_roads10.h	/^	float	lat[2];$/;"	m	struct:obj_placement
lat	.\OneOffs\osm2shape.c	/^	double lat;$/;"	m	struct:__anon65	file:
lat	.\RawImport\FAA_Obs.h	/^	double		lat;$/;"	m	struct:FAAObs_t
lat	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double					lat;$/;"	m	struct:NearestEdgeToPt_t	file:
lat	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double				lat;$/;"	m	struct:NearestPFSToPt_t	file:
lat	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double				lat;$/;"	m	struct:NearestVertexToPt_t	file:
lat	.\WEDNetwork\WED_NWLinkAdapter.h	/^    double  lat;$/;"	m	struct:WED_NWCamera_t
lat	.\XESCore\DEMAlgs.cpp	/^	float	lat;$/;"	m	struct:SnowLineInfo_t	file:
lat	.\XPTools\Env2DSF.cpp	/^	float		lat;$/;"	m	struct:NetworkNode_t	file:
latLonCode	.\Env\EnvDefs.h	/^	long	latLonCode;$/;"	m	struct:__anon18
lat_interval	.\XESCore\DEMIO.cpp	/^	char			lat_interval[4];			\/\/ Approx lat spacing in tenth-arc-seconds, e.g.  0300 = 30 arc-second$/;"	m	struct:DTED_UHL_t	file:
lat_max	.\Tiger\TIGERProcess.h	/^	float		lat_max;$/;"	m	struct:TigerAreaInfo_t
lat_max	.\XESCore\DEMTables.h	/^	float			lat_max;$/;"	m	struct:NaturalTerrainRule_t
lat_min	.\Tiger\TIGERProcess.h	/^	float		lat_min;$/;"	m	struct:TigerAreaInfo_t
lat_min	.\XESCore\DEMTables.h	/^	float			lat_min;$/;"	m	struct:NaturalTerrainRule_t
lat_offsets	.\RawImport\AptElev.cpp	/^int	lat_offsets[9] = { -1, -1, -1, 0, 0, 0, 1, 1, 1 };$/;"	v
lat_ref	.\AC3DPlugins\dsf_export.cpp	/^static	double				lat_ref;$/;"	v	file:
lat_to_y	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::lat_to_y(double inLat) const$/;"	f	class:DEMGeo
latitude	.\Env\EnvDefs.h	/^	float	latitude;$/;"	m	struct:__anon17
latitude	.\Env\Persistence.h	/^	double		latitude;$/;"	m	struct:VertexInfo
latitude	.\Env\Persistence.h	/^	double	latitude;$/;"	m	struct:ObjectInfo
latitude	.\Env\Persistence.h	/^	double	latitude;$/;"	m	struct:PathInfo
latitude	.\WEDCore\WED_ResourceMgr.h	/^	float		latitude;$/;"	m	struct:pol_info_t
latitude	.\WEDEntities\WED_GISPoint.h	/^		WED_PropDoubleText		latitude;$/;"	m	class:WED_GISPoint
latitude	.\XESCore\DEMIO.cpp	/^	char			latitude[8];				\/\/ South edge In form of 0340000N = 34.0$/;"	m	struct:DTED_UHL_t	file:
latlon_bucket	.\OneOffs\genpath.c	/^int	latlon_bucket(int p)$/;"	f
latlon_bucket	.\Utils\GISUtils.h	/^inline int	latlon_bucket(int p)$/;"	f
latlonel2xyz	.\AC3DPlugins\ac_utils.cpp	/^void	latlonel2xyz(double latlonel[3],$/;"	f
layer	.\MeshTool\MeshTool_Create.cpp	/^static vector<Polygon_with_holes_2>		layer;$/;"	v	file:
layer	.\OneOffs\gen_roads.cpp	/^	int				layer;$/;"	m	struct:tex_info	file:
layer	.\WEDEntities\WED_RoadEdge.h	/^	WED_PropIntText			layer;$/;"	m	class:WED_RoadEdge
layer	.\WEDMap\WED_PreviewLayer.h	/^	int			layer;$/;"	m	struct:WED_PreviewItem
layer	.\XESCore\DEMTables.h	/^	int				layer;$/;"	m	struct:NaturalTerrainInfo_t
layer_group	.\Obj\XObjBuilder.h	/^	string		layer_group;$/;"	m	class:XObjBuilder
layer_group	.\Obj\XObjWriteEmbedded.cpp	/^	int				layer_group;$/;"	m	struct:embed_props_t	file:
layer_group_for_string	.\WEDMap\WED_PreviewLayer.cpp	/^static int layer_group_for_string(const char * s, int o, int def)$/;"	f	file:
layer_group_offset	.\Obj\XObjBuilder.h	/^	int			layer_group_offset;$/;"	m	class:XObjBuilder
layer_mask	.\MeshTool\MeshTool_Create.cpp	/^static Polygon_set_2					layer_mask;$/;"	v	file:
layer_type	.\MeshTool\MeshTool_Create.cpp	/^static int								layer_type = NO_VALUE;$/;"	v	file:
lcl_4wd	.\OneOffs\gen_roads.cpp	/^void lcl_4wd() { make_deck(51,108, &local, "gravel"); }$/;"	f
lcl_arch_side	.\OneOffs\gen_roads.cpp	/^void lcl_arch_side() 	{ 	make_blade(362,435,-8,1,&local);  }$/;"	f
lcl_marked1	.\OneOffs\gen_roads.cpp	/^void lcl_marked1() { make_deck(0,48, &local, "asphalt");$/;"	f
lcl_marked2	.\OneOffs\gen_roads.cpp	/^void lcl_marked2() { make_deck(0,48, &local, "asphalt");$/;"	f
lcl_overpass_side	.\OneOffs\gen_roads.cpp	/^void lcl_overpass_side(){	make_blade(277,266,0.5,-1.5,&local); }$/;"	f
lcl_pylon_start	.\OneOffs\gen_roads.cpp	/^void lcl_pylon_start() { pylons_start("ramp_pylon.obj", 0.5, 0, 120, 60, 0); }$/;"	f
lcl_start	.\OneOffs\gen_roads.cpp	/^void lcl_start(int b, int ow, int n, const char * na) { road_start(b, ow, n,na,&local); }$/;"	f
lcl_underarch	.\OneOffs\gen_roads.cpp	/^void lcl_underarch()	{ underside_start(309,359,-0.1,&local); }$/;"	f
lcl_underside_start	.\OneOffs\gen_roads.cpp	/^void lcl_underside_start()	{ underside_start(178,226,-1.5,&local); }$/;"	f
lcl_underwalk	.\OneOffs\gen_roads.cpp	/^void lcl_underwalk()	{ underside_start(183,221,-0.25,&local); }$/;"	f
lcl_unmarked1	.\OneOffs\gen_roads.cpp	/^void lcl_unmarked1() { make_deck(5,44, &local, "asphalt");$/;"	f
lcl_walk	.\OneOffs\gen_roads.cpp	/^void lcl_walk     () { make_deck(107,146, &local, "gravel"); }$/;"	f
lcl_walk_over	.\OneOffs\gen_roads.cpp	/^void lcl_walk_over() { make_deck(120,137, &local, "gravel"); }$/;"	f
lcl_walk_side	.\OneOffs\gen_roads.cpp	/^void lcl_walk_side() 	{ 	make_blade(277,265,0.25,-0.25,&local);  }$/;"	f
leaf	.\Utils\RTree2.h	/^	struct leaf {$/;"	s	class:RTree2
left	.\Obj\XObjDefs.h	/^	int						left;$/;"	m	struct:XObjPanelRegion8
left	.\Utils\RLERegion.h	/^	int		left(void) const { return x1_; }$/;"	f	class:RLERegion
left	.\XESCore\BezierApprox.cpp	/^	approx_t *					left;$/;"	m	struct:possible_approx_t	file:
left	.\XESCore\NetTables.h	/^	int			left;$/;"	m	struct:ForkRule
leftFace	.\XESCore\WTPM.h	/^	WTPM_Face *				leftFace;$/;"	m	struct:WTPM_Line
leftFaceKey	.\SDTS\SDTSReadTVP.cpp	/^	ForeignKey				leftFaceKey;$/;"	m	struct:LineRecord	file:
left_align	.\GUI\GUI_Laftfont.h	/^	float		left_align;$/;"	m	struct:gl_glyph
left_as_leaf	.\Utils\RTree2.h	/^		leaf *		left_as_leaf() const { return _clean_ptr(left_l); }$/;"	f	struct:RTree2::node
left_as_node	.\Utils\RTree2.h	/^		node *		left_as_node() const { return _clean_ptr(left_n); }$/;"	f	struct:RTree2::node
left_edg_index	.\VPF\VPFImport.cpp	/^	int		left_edg_index;$/;"	m	struct:VPF_Line	file:
left_fac_index	.\VPF\VPFImport.cpp	/^	int		left_fac_index;$/;"	m	struct:VPF_Line	file:
left_is_leaf	.\Utils\RTree2.h	/^		bool		left_is_leaf() const { return _get_lsb(left_n); }$/;"	f	struct:RTree2::node
left_l	.\Utils\RTree2.h	/^			leaf *		left_l;$/;"	m	union:RTree2::node::__anon97
left_n	.\Utils\RTree2.h	/^			node *		left_n;			\/\/ tagged ptr  - flag means leaf!$/;"	m	union:RTree2::node::__anon97
left_side	.\Utils\CompGeomDefs2.h	/^	Segment2	left_side   (void) const { return Segment2(top_left(), bottom_left()); }$/;"	f	struct:Bbox2
left_turn	.\Utils\CompGeomDefs2.h	/^	bool	left_turn(const Vector2& v) const { return (-dy * v.dx + dx * v.dy) > 0.0; }$/;"	f	struct:Vector2
left_turn	.\Utils\CompGeomDefs2.h	/^inline bool	left_turn(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
len	.\Installer\InstallerProcs.h	/^	int			len;$/;"	m	struct:InstallerChunk
len	.\Obj\XObjWriteEmbedded.cpp	/^	int len() { return end - begin; }$/;"	f	struct:mem_block
len	.\OneOffs\gen_roads10.h	/^	float	len[2];$/;"	m	struct:train_car
len	.\OneOffs\osm2shape.c	/^	int						len;$/;"	m	struct:tag_att_info	file:
len	.\Utils\BitmapUtils.cpp	/^	int			len;				\/\/$/;"	m	struct:__anon87	file:
length	.\OneOffs\gen_roads10.h	/^	float	length;$/;"	m	struct:vert_props
length	.\OneOffs\gen_roads10.h	/^	float length() {$/;"	f	class:published_road
length	.\OneOffs\gen_roads10.h	/^	vert_props		length;$/;"	m	struct:road_segment
length	.\Utils\XChunkyFileUtils.h	/^	uint32_t	length;$/;"	m	struct:XAtomHeader_t
length	.\WEDCore\WED_Sign_Parser.h	/^	int length;$/;"	m	struct:parser_error_info
length	.\WEDEntities\WED_GISPoint_HeadingWidthLength.h	/^		WED_PropDoubleTextMeters		length;$/;"	m	class:WED_GISPoint_HeadingWidthLength
length	.\XESCore\Zoning.cpp	/^	float			length;		\/\/ Length of edge in meters$/;"	m	struct:EdgeNode_t	file:
length_mtr	.\XESCore\AptDefs.h	/^	float		length_mtr;$/;"	m	struct:AptHelipad_t
less	.\RenderFarmUI\RF_Selection.h	/^struct less<PointFeatureSelection> : binary_function<PointFeatureSelection, PointFeatureSelection, bool> {$/;"	s	namespace:std
lesser_x	.\Utils\CompGeomDefs2.h	/^struct lesser_x {	bool	operator()(const Point2& lhs, const Point2& rhs) const { return (lhs.x_ < rhs.x_);}};$/;"	s
lesser_x_then_y	.\Utils\CompGeomDefs2.h	/^struct lesser_x_then_y {$/;"	s
lesser_y	.\Utils\CompGeomDefs2.h	/^struct lesser_y {	bool	operator()(const Point2& lhs, const Point2& rhs) const { return (lhs.y_ < rhs.y_);}};$/;"	s
lesser_y_then_x	.\Utils\CompGeomDefs2.h	/^struct lesser_y_then_x {$/;"	s
lesser_y_then_x_then_z	.\Utils\CompGeomDefs3.h	/^struct lesser_y_then_x_then_z {$/;"	s
level	.\RawImport\gshhs.h	/^	int level;			\/* 1 land, 2 lake, 3 island_in_lake, 4 pond_in_island_in_lake *\/$/;"	m	struct:GSHHS
levelOfDetail	.\ObjEdit\OE_DataModel.cpp	/^	int				levelOfDetail;$/;"	m	struct:UndoState_t	file:
levelize_junction	.\XESCore\NetHelpers.h	/^inline int levelize_junction(Pmwx::Vertex_handle v, map<int,vector<Pmwx::Halfedge_handle> >& out_junc)$/;"	f
lex_compare_vector	.\Obj\ObjPointPool.h	/^struct lex_compare_vector : public binary_function<vector<T>, vector<T>, bool> {$/;"	s
light_angle	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropDoubleText		light_angle;$/;"	m	class:WED_CreatePointTool
light_code	.\XESCore\AptDefs.h	/^	int			light_code;$/;"	m	struct:AptLight_t
light_from_name	.\Obj\XObjWriteEmbedded.cpp	/^int light_from_name(const char * name)$/;"	f
light_info	.\Obj\XObjWriteEmbedded.cpp	/^	void *			light_info;$/;"	m	struct:embed_props_t	file:
light_kind	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			light_kind;$/;"	m	class:WED_CreatePointTool
light_level	.\Obj\XObjBuilder.h	/^	string		light_level;		string	o_light_level;$/;"	m	class:XObjBuilder
light_level_v1	.\Obj\XObjBuilder.h	/^	float		light_level_v1,		light_level_v2;$/;"	m	class:XObjBuilder
light_level_v2	.\Obj\XObjBuilder.h	/^	float		light_level_v1,		light_level_v2;$/;"	m	class:XObjBuilder
light_off	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned short	light_off;		\/\/ Offset to light cmds in bytes$/;"	m	struct:embed_props_t	file:
light_type	.\WEDEntities\WED_LightFixture.h	/^	WED_PropIntEnum		light_type;$/;"	m	class:WED_LightFixture
lights	.\WEDEntities\WED_AirportBoundary.h	/^	WED_PropIntEnumSetUnion	lights;$/;"	m	class:WED_AirportBoundary
lights	.\WEDEntities\WED_AirportChain.h	/^	WED_PropIntEnumSetUnion	lights;$/;"	m	class:WED_AirportChain
lights	.\WEDEntities\WED_AirportNode.h	/^	WED_PropIntEnumSetFilter	lights;$/;"	m	class:WED_AirportNode
lights	.\WEDEntities\WED_Taxiway.h	/^	WED_PropIntEnumSetUnion	lights;$/;"	m	class:WED_Taxiway
lights	.\XESCore\AptDefs.h	/^	AptLightVector		lights;$/;"	m	struct:AptInfo_t
lim	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned char *		lim;$/;"	m	struct:mem_block	file:
line_	.\lib_json\src\test_lib_json\jsontest.h	/^      unsigned int line_;$/;"	m	class:JsonTest::Failure
line_	.\lib_json\src\test_lib_json\jsontest.h	/^      unsigned int line_;$/;"	m	struct:JsonTest::PredicateContext
line_ascent	.\GUI\GUI_Fonts.cpp	/^	float				line_ascent;		\/\/ distance from the baseline to the top of all drawing$/;"	m	class:TT_font_info	file:
line_ascent	.\UI\FontMgr.cpp	/^	float	line_ascent;		\/\/ Stores dist from baseline to  tallest letter, ish$/;"	m	struct:FontInfo_t	file:
line_descent	.\GUI\GUI_Fonts.cpp	/^	float				line_descent;		\/\/ distance from the baseline to the bottom of all drawing$/;"	m	class:TT_font_info	file:
line_descent	.\UI\FontMgr.cpp	/^	float	line_descent;		\/\/ Stores dist from bottom of the line to the baseline$/;"	m	struct:FontInfo_t	file:
line_height	.\GUI\GUI_Fonts.cpp	/^	float				line_height;		\/\/ total distance from one baseline to the next$/;"	m	class:TT_font_info	file:
line_height	.\UI\FontMgr.cpp	/^	float	line_height;		\/\/ Stores the line height of the font in px$/;"	m	struct:FontInfo_t	file:
line_num	.\MeshTool\MeshTool.cpp	/^static int			line_num;$/;"	v	file:
line_starts	.\OGLE\ogle.cpp	/^	vector<int>				line_starts;$/;"	m	struct:OGLE_Rec	file:
linear_formula	.\Utils\CompGeomDefs2.h	/^inline int linear_formula(double a, double b, double roots[1])$/;"	f
lines	.\SDTS\SDTSReadTVP.cpp	/^	LineTable		lines;$/;"	m	struct:Topology	file:
lines	.\WEDEntities\WED_AirportBoundary.h	/^	WED_PropIntEnumSetUnion	lines;$/;"	m	class:WED_AirportBoundary
lines	.\WEDEntities\WED_AirportChain.h	/^	WED_PropIntEnumSetUnion	lines;$/;"	m	class:WED_AirportChain
lines	.\WEDEntities\WED_AirportNode.h	/^	WED_PropIntEnumSetFilter	lines;$/;"	m	class:WED_AirportNode
lines	.\WEDEntities\WED_Taxiway.h	/^	WED_PropIntEnumSetUnion	lines;$/;"	m	class:WED_Taxiway
lines	.\XESCore\AptDefs.h	/^	AptMarkingVector	lines;$/;"	m	struct:AptInfo_t
lines	.\XESCore\WTPM.h	/^	WTPM_DirectedLineVector	lines;$/;"	m	struct:WTPM_Node
link_	.\lib_json\include\json\value.h	/^         ValueInternalLink *link_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
link_BezierCtrl	.\Interfaces\IControlHandles.h	/^	link_BezierCtrl,	\/\/ Thin line for bezier handles$/;"	e	enum:LinkType_t
link_Ghost	.\Interfaces\IControlHandles.h	/^	link_Ghost,			\/\/ implicit ghost line$/;"	e	enum:LinkType_t
link_Marquee	.\Interfaces\IControlHandles.h	/^	link_Marquee$/;"	e	enum:LinkType_t
link_None	.\Interfaces\IControlHandles.h	/^	link_None,			\/\/ Draw nothing$/;"	e	enum:LinkType_t
link_Solid	.\Interfaces\IControlHandles.h	/^	link_Solid,			\/\/ Draw solid line...$/;"	e	enum:LinkType_t
linked_heap	.\DSF\tri_stripper_101\heap_array.h	/^	typedef std::vector<linker> linked_heap;$/;"	t	class:common_structures::heap_array
linkedlist_data	.\Utils\zip.c	/^} linkedlist_data;$/;"	t	typeref:struct:linkedlist_data_s	file:
linkedlist_data_s	.\Utils\zip.c	/^typedef struct linkedlist_data_s$/;"	s	file:
linkedlist_datablock_internal	.\Utils\zip.c	/^} linkedlist_datablock_internal;$/;"	t	typeref:struct:linkedlist_datablock_internal_s	file:
linkedlist_datablock_internal_s	.\Utils\zip.c	/^typedef struct linkedlist_datablock_internal_s$/;"	s	file:
linker	.\DSF\tri_stripper_101\heap_array.h	/^		linker(const T & Elem, size_t i) : m_Elem(Elem), m_Index(i) { }$/;"	f	struct:common_structures::heap_array::linker
linker	.\DSF\tri_stripper_101\heap_array.h	/^	struct linker {$/;"	s	class:common_structures::heap_array
linkname	.\Utils\MemFileUtils.cpp	/^  char linkname[100];		\/* 157 *\/$/;"	m	struct:tar_header	file:
listTests	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::listTests() const$/;"	f	class:JsonTest::Runner
listsFont	.\GUI\GUI_Laftfont.h	/^		unsigned int	listsFont;$/;"	m	class:GUI_Laftfont
lit	.\WEDEntities\WED_Windsock.h	/^	WED_PropBoolText			lit;$/;"	m	class:WED_Windsock
lit	.\XESCore\AptDefs.h	/^	int			lit;$/;"	m	struct:AptWindsock_t
lit	.\XPTools\ViewObj.cpp	/^	bool	lit;$/;"	m	struct:ObjViewInfo_t	file:
lit_tex	.\XESCore\DEMTables.h	/^	string			lit_tex;$/;"	m	struct:NaturalTerrainInfo_t
lm	.\XESCore\DSFBuilder.cpp	/^	char lm;$/;"	m	struct:road_coords_checker	file:
lname	.\OneOffs\gen_roads.cpp	/^	const char *	lname;$/;"	m	struct:tex_info	file:
lo	.\Utils\CompGeomDefs2.h	/^	Point2		lo;$/;"	m	struct:BezierPoint2
lo_color	.\XESCore\DEMTables.h	/^	RGBColor_t		lo_color;$/;"	m	struct:DEMColorBand_t
lo_elev	.\RawImport\AptElev.h	/^	double	lo_elev;$/;"	m	struct:RwyInfo
lo_lat	.\RawImport\AptElev.h	/^	double	lo_lat;$/;"	m	struct:RwyInfo
lo_lon	.\RawImport\AptElev.h	/^	double	lo_lon;$/;"	m	struct:RwyInfo
lo_value	.\XESCore\DEMTables.h	/^	float			lo_value;$/;"	m	struct:DEMColorBand_t
load_match_file	.\XESCore\MeshAlgs.cpp	/^static bool	load_match_file(const char * path, mesh_match_t& outLeft, mesh_match_t& outBottom, mesh_match_t& outRight, mesh_match_t& outTop)$/;"	f	file:
load_zone_border	.\XESCore\Zoning.cpp	/^static bool load_zone_border(const char * fname, zone_borders_t& border)$/;"	f	file:
loc	.\WEDCore\WED_Routing.h	/^	Point2						loc;	$/;"	m	struct:WED_route_node_t
loc	.\XESCore\BlockDefs.h	/^	Point2			loc;			\/\/ This is our original location on $/;"	m	struct:block_pt
loc	.\XESCore\MeshAlgs.cpp	/^	Point_2					loc;			\/\/ Location in master$/;"	m	struct:mesh_match_vertex_t	file:
local	.\OneOffs\gen_roads.cpp	/^tex_info	local 	 = { "local.dds"    , "\/\/"				 , 1, 3, 15, 8.5, 512  ,{0.4,0.4,0.4}};$/;"	v
local	.\Utils\unzip.c	27;"	d	file:
local	.\Utils\zip.c	28;"	d	file:
localIP	.\Network\PCSBSocket.h	/^		unsigned long	localIP;$/;"	m	struct:PCSBSocket::ConnectionData
localPort	.\Network\PCSBSocket.h	/^		unsigned short	localPort;$/;"	m	struct:PCSBSocket::ConnectionData
local_deltas_x	.\XESCore\DEMAlgs.cpp	/^float	local_deltas_x[9] = { -1, 0, 1, -1, 0, 1, -1, 0, 1 };$/;"	v
local_deltas_y	.\XESCore\DEMAlgs.cpp	/^float	local_deltas_y[9] = { -1, -1, -1, 0, 0, 0, 1, 1, 1 };$/;"	v
local_minmax	.\XESCore\DEMDefs.cpp	/^float	DEMGeo::local_minmax(int x1, int y1, int x2, int y2,$/;"	f	class:DEMGeo
local_package	.\WEDCore\WED_LibraryMgr.h	/^	string							local_package;$/;"	m	class:WED_LibraryMgr
local_path	.\XESCore\SceneryPackages.cpp	/^static void local_path(string& iopath)$/;"	f	file:
local_range	.\XESCore\DEMAlgs.h	/^	int		local_range;$/;"	m	struct:DEMPrefs_t
local_scan_t	.\WEDCore\WED_LibraryMgr.cpp	/^struct local_scan_t {$/;"	s	file:
locate_cache	.\XESCore\MeshDefs.cpp	/^CDT::Face_handle CDT::locate_cache(const Point& p, Locate_type& lt, int& li, int cache_key) const$/;"	f	class:CDT
location	.\DSF\DSFLibWrite.cpp	/^		int						location;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
location	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						location;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
location	.\Tiger\TIGERTypes.h	/^	Point2						location;	\/\/ Some point within the entity$/;"	m	struct:PolygonInfo_t
location	.\Tiger\TIGERTypes.h	/^	Point2			location;$/;"	m	struct:LandmarkInfo_t
location	.\Utils\Skeleton.cpp	/^	Point2		location;		\/\/ This is the original location of the vertex as its base time.$/;"	m	struct:SK_Vertex	file:
location	.\XESCore\AptDefs.h	/^	Point2						location;$/;"	m	struct:AptRouteNode_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptBeacon_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptGate_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptHelipad_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptLight_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptSign_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptTowerPt_t
location	.\XESCore\AptDefs.h	/^	Point2		location;$/;"	m	struct:AptWindsock_t
location	.\XESCore\NetPlacement.h	/^	Point2							location;					\/\/ Locations are in absolute MSL space -$/;"	m	struct:Net_JunctionInfo_t
location	.\XESCore\WTPM.h	/^	Point2					location;$/;"	m	struct:WTPM_Node
lock_pts	.\XESCore\Zoning.cpp	/^	set<double>		lock_pts[4];$/;"	m	struct:zone_borders_t	file:
locked	.\DSF\tri_stripper_101\heap_array.h	/^inline bool heap_array<T, CmpT>::locked() const {$/;"	f	class:common_structures::heap_array
locked	.\WEDEntities\WED_Entity.h	/^	WED_PropBoolText			locked;$/;"	m	class:WED_Entity
locked	.\XESCore\BlockDefs.h	/^	bool			locked;			\/\/ Is this point locked.  We lock any point that has high internal valence.$/;"	m	struct:block_pt
lod	.\Obj\XObjBuilder.h	/^ 	XObjLOD8 *	lod;$/;"	m	class:XObjBuilder
lod	.\OneOffs\gen_roads10.h	/^	lod_range		lod;$/;"	m	struct:road_segment
lod	.\OneOffs\gen_roads10.h	/^	lod_range		lod;$/;"	m	struct:wire
lod_far	.\Obj\XObjDefs.h	/^	float					lod_far;$/;"	m	struct:XObjLOD8
lod_near	.\Obj\XObjDefs.h	/^	float					lod_near;$/;"	m	struct:XObjLOD8
lod_range	.\OneOffs\gen_roads10.h	/^struct	lod_range {$/;"	s
lods	.\Obj\XObjDefs.h	/^	vector<XObjLOD8>		lods;$/;"	m	struct:XObj8
logFile	.\Installer\BuildInstaller.cpp	/^static FILE * logFile = NULL;$/;"	v	file:
logFile	.\Installer\InstallerRun.cpp	/^static FILE * logFile = NULL;$/;"	v	file:
lon	.\Env\EnvDefs.h	/^	float	lon;$/;"	m	struct:__anon19
lon	.\OneOffs\osm2shape.c	/^	double lon;$/;"	m	struct:__anon65	file:
lon	.\RawImport\FAA_Obs.h	/^	double		lon;$/;"	m	struct:FAAObs_t
lon	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double					lon;$/;"	m	struct:NearestEdgeToPt_t	file:
lon	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double				lon;$/;"	m	struct:NearestPFSToPt_t	file:
lon	.\RenderFarmUI\RF_SelectionTool.cpp	/^	double				lon;$/;"	m	struct:NearestVertexToPt_t	file:
lon	.\WEDNetwork\WED_NWLinkAdapter.h	/^    double  lon;$/;"	m	struct:WED_NWCamera_t
lon	.\XPTools\Env2DSF.cpp	/^	float		lon;$/;"	m	struct:NetworkNode_t	file:
lon_interval	.\XESCore\DEMIO.cpp	/^	char			lon_interval[4];			\/\/ Approx lon spacing in tenth-arc-seconds, e.g.  0300 = 30 arc-second$/;"	m	struct:DTED_UHL_t	file:
lon_lat_to_idx	.\WEDCore\WED_Package.cpp	/^inline int lon_lat_to_idx  (int lon, int lat) { return lon + 180 + 360 * (lat + 90); }$/;"	f
lon_lat_to_idx10	.\WEDCore\WED_Package.cpp	/^inline int lon_lat_to_idx10(int lon, int lat) { return (lon\/10) + 18  +  36 * ((lat\/10) +  9); }$/;"	f
lon_max	.\Tiger\TIGERProcess.h	/^	float		lon_max;$/;"	m	struct:TigerAreaInfo_t
lon_min	.\Tiger\TIGERProcess.h	/^	float		lon_min;$/;"	m	struct:TigerAreaInfo_t
lon_offsets	.\RawImport\AptElev.cpp	/^int	lon_offsets[9] = { -1, 0, 1, -1, 0, 1, -1, 0, 1 };$/;"	v
lon_ref	.\AC3DPlugins\dsf_export.cpp	/^static	double				lon_ref;$/;"	v	file:
lon_to_x	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::lon_to_x(double inLon) const$/;"	f	class:DEMGeo
longest_side	.\Utils\CompGeomDefs2.h	/^inline int  Polygon2::longest_side(void) const$/;"	f	class:Polygon2
longitude	.\Env\EnvDefs.h	/^	float	longitude;$/;"	m	struct:__anon17
longitude	.\Env\Persistence.h	/^	double		longitude;$/;"	m	struct:VertexInfo
longitude	.\Env\Persistence.h	/^	double	longitude;$/;"	m	struct:ObjectInfo
longitude	.\Env\Persistence.h	/^	double	longitude;$/;"	m	struct:PathInfo
longitude	.\WEDCore\WED_ResourceMgr.h	/^	float		longitude;$/;"	m	struct:pol_info_t
longitude	.\WEDEntities\WED_GISPoint.h	/^		WED_PropDoubleText		longitude;$/;"	m	class:WED_GISPoint
longitude	.\XESCore\DEMIO.cpp	/^	char			longitude[8];				\/\/ West edge In form of 1180000W = -118.0$/;"	m	struct:DTED_UHL_t	file:
lowest_index	.\DSF\DSFLibWrite.cpp	/^		int						lowest_index;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
lowest_index	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						lowest_index;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
lpoly	.\Tiger\TIGERTypes.h	/^	CENID_POLYID	lpoly;$/;"	m	struct:ChainInfo_t
lsb_bit	.\Utils\RTree2.h	/^const uintptr_t	lsb_bit = 1;$/;"	v
lsb_mask	.\Utils\RTree2.h	/^const uintptr_t  lsb_mask = ~1;$/;"	v
mAGP	.\WEDCore\WED_ResourceMgr.h	/^	map<string,agp_t>			mAGP;$/;"	m	class:WED_ResourceMgr
mAboutBox	.\WEDCore\WED_Application.h	/^	GUI_Window * mAboutBox;$/;"	m	class:WED_Application
mAirportFactor	.\WEDMap\WED_MapLayer.h	/^	double					mAirportFactor;$/;"	m	class:WED_MapLayer
mAirportIconsC	.\WEDMap\WED_StructureLayer.h	/^	vector<float>		mAirportIconsC;$/;"	m	class:WED_StructureLayer
mAirportIconsX	.\WEDMap\WED_StructureLayer.h	/^	vector<int>			mAirportIconsX;$/;"	m	class:WED_StructureLayer
mAirportIconsY	.\WEDMap\WED_StructureLayer.h	/^	vector<int>			mAirportIconsY;$/;"	m	class:WED_StructureLayer
mAirportRadius	.\WEDMap\WED_MapLayer.h	/^	double					mAirportRadius;$/;"	m	class:WED_MapLayer
mAirportTransWidth	.\WEDMap\WED_MapLayer.h	/^	int						mAirportTransWidth;$/;"	m	class:WED_MapLayer
mAligned	.\GUI\GUI_Table.h	/^			bool					mAligned;$/;"	m	class:GUI_Table
mAllowed	.\GUI\GUI_TextField.h	/^		bool				mAllowed[256];$/;"	m	class:GUI_TextField
mAllowedVK	.\GUI\GUI_TextField.h	/^		bool				mAllowedVK[256];$/;"	m	class:GUI_TextField
mAlpha	.\WEDEntities\WED_OverlayImage.h	/^	WED_PropDoubleText			mAlpha;$/;"	m	class:WED_OverlayImage
mAlt	.\WEDXPlugin\WED_XPluginEntity.h	/^    double			 	mAlt;$/;"	m	class:WED_XPluginEntity
mAlternate	.\GUI\GUI_TextTable.h	/^	int						mAlternate;$/;"	m	class:GUI_TextTable
mAnchor	.\RenderFarmUI\RF_MeshTester.h	/^		Point2					mAnchor;$/;"	m	class:RF_MeshTester
mAnchor	.\RenderFarmUI\RF_TopoTester.h	/^		Point2					mAnchor;$/;"	m	class:RF_TopoTester
mAnchorHint	.\RenderFarmUI\RF_TopoTester.h	/^		Halfedge_handle			mAnchorHint;$/;"	m	class:RF_TopoTester
mAnchorLoc	.\RenderFarmUI\RF_TopoTester.h	/^		Pmwx::Locate_type		mAnchorLoc;$/;"	m	class:RF_TopoTester
mAnimate	.\XPTools\ViewObj.cpp	/^	bool	mAnimate;$/;"	m	class:XObjWin	file:
mApprox	.\XESCore\DEMGrid.h	/^	vector<Point2>	mApprox;$/;"	m	struct:DEMGrid
mApt	.\WEDImportExport\WED_GatewayExport.cpp	/^	WED_Airport *			mApt;$/;"	m	class:WED_GatewayExportDialog	file:
mAptTable	.\WEDImportExport\WED_AptImportDialog.h	/^	WED_AptTable			mAptTable;$/;"	m	class:WED_AptImportDialog
mApts	.\WEDImportExport\WED_AptImportDialog.h	/^	AptVector				mApts;$/;"	m	class:WED_AptImportDialog
mApts	.\WEDImportExport\WED_AptTable.h	/^	const AptVector *	mApts;$/;"	m	class:WED_AptTable
mApts	.\WEDImportExport\WED_ICAOTable.h	/^	const AptVector *	mApts;$/;"	m	class:WED_ICAOTable
mArchive	.\WEDCore\WED_Document.h	/^	WED_Archive			mArchive;$/;"	m	class:WED_Document
mArchive	.\WEDCore\WED_Persistent.h	/^		WED_Archive *	mArchive;$/;"	m	class:WED_Persistent
mArchive	.\WEDCore\WED_UndoLayer.h	/^	WED_Archive *			mArchive;$/;"	m	class:WED_UndoLayer
mArchive	.\WEDCore\WED_UndoMgr.h	/^	WED_Archive *				mArchive;$/;"	m	class:WED_UndoMgr
mArchive	.\WEDImportExport\WED_AptImportDialog.h	/^	WED_Archive *	mArchive;$/;"	m	class:WED_AptImportDialog
mArchive	.\WEDMap\WED_CreateToolBase.h	/^	WED_Archive *		mArchive;$/;"	m	class:WED_CreateToolBase
mArchive	.\WEDNetwork\WED_NWLinkAdapter.h	/^			WED_Archive *		 mArchive;$/;"	m	class:WED_NWLinkAdapter
mAreaFeature	.\XESCore\MapDefs.h	/^	GISAreaFeature_t			mAreaFeature;$/;"	m	class:GIS_face_data
mAspectRatio	.\RenderFarmUI\RF_MapZoomer.h	/^	double	mAspectRatio;$/;"	m	class:RF_MapZoomer
mAtomStart	.\Utils\XChunkyFileUtils.h	/^	int32_t			mAtomStart;$/;"	m	struct:StAtomWriter
mAxisName	.\Utils\CoverageFinder.h	/^	vector<string>				mAxisName;$/;"	m	class:CoverageFinder
mAxisWidth	.\Utils\CoverageFinder.h	/^	vector<int>					mAxisWidth;$/;"	m	class:CoverageFinder
mBackButton	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Button *			mBackButton;$/;"	m	class:WED_GatewayImportDialog	file:
mBackup	.\Utils\BWImage.h	/^	unsigned long * mBackup;$/;"	m	struct:BWImage
mBaseProc	.\GUI\GUI_Window.h	/^		WNDPROC				mBaseProc;$/;"	m	class:GUI_Window
mBegin	.\Utils\MemFileUtils.cpp	/^	const char *	mBegin;	\/\/ Span of memory the file is loaded into.$/;"	m	struct:MFMemFile	file:
mBehavior	.\GUI\GUI_Button.h	/^		GUI_ButtonType		mBehavior;$/;"	m	class:GUI_Button
mBezier1	.\RenderFarmUI\RF_BezierTestTool.h	/^	Bezier2			mBezier1;$/;"	m	class:RF_BezierTestTool
mBezier2	.\RenderFarmUI\RF_BezierTestTool.h	/^	Bezier2			mBezier2;$/;"	m	class:RF_BezierTestTool
mBigEndian	.\XESCore\DEMIO.h	/^	bool			mBigEndian;				\/\/ True if big-endian, false for little endian$/;"	m	struct:DEMSpec
mBits	.\RenderFarmUI\RF_ImageTool.h	/^	bool			mBits;$/;"	m	class:RF_ImageTool
mBits	.\XESCore\DEMIO.h	/^	int				mBits;					\/\/ Bits per post (8, 16 or 32)$/;"	m	struct:DEMSpec
mBlockEvents	.\UI\XWin.h	/^	int		mBlockEvents;	$/;"	m	class:XWin
mBottom	.\Utils\HLCamera.h	/^	GLdouble	mBottom[3];			\/\/ go through the point 0,0,0 in the form Ax + By + Cz = 0.$/;"	m	class:xcam_class
mBounds	.\GUI\GUI_Pane.h	/^		int					mBounds[4];$/;"	m	class:GUI_Pane
mBounds	.\RenderFarmUI\RF_CropTool.h	/^	double			mBounds[4];$/;"	m	class:RF_CropTool
mBounds	.\WEDCore\WED_Document.h	/^	double				mBounds[4];$/;"	m	class:WED_Document
mBroadcasters	.\GUI\GUI_Listener.h	/^	set<GUI_Broadcaster *>	mBroadcasters;$/;"	m	class:GUI_Listener
mBuf	.\SDTS\SDTSReadTVP.h	/^	char	mBuf[512];$/;"	m	class:SDTSException
mBuf	.\Utils\XUtils.h	/^	string	mBuf;$/;"	m	class:StTextFileScanner
mBuffer	.\XESCore\SimpleIO.h	/^	char			mBuffer[WRITER_BUFFER_SIZE + WRITER_BUFFER_PAD];$/;"	m	class:WriterBuffer
mButtonHolder	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Pane *				mButtonHolder;$/;"	m	class:WED_GatewayImportDialog	file:
mCache	.\WEDLibrary\WED_LibraryListAdapter.h	/^		vector<string>			mCache;$/;"	m	class:WED_LibraryListAdapter
mCache	.\WEDTCE\WED_TCEVertexTool.h	/^	mutable	vector<IGISEntity *>		mCache;$/;"	m	class:WED_TCEVertexTool
mCacheBounds	.\WEDEntities\WED_GISChain.h	/^	mutable	Bbox2						mCacheBounds;$/;"	m	class:WED_GISChain
mCacheBounds	.\WEDEntities\WED_GISComposite.h	/^	mutable	Bbox2					mCacheBounds;$/;"	m	class:WED_GISComposite
mCacheBounds	.\WEDMap\WED_MarqueeTool.h	/^	mutable	Bbox2			mCacheBounds;$/;"	m	class:WED_MarqueeTool
mCacheBounds	.\WEDTCE\WED_TCEMarqueeTool.h	/^	mutable	Bbox2		mCacheBounds;$/;"	m	class:WED_TCEMarqueeTool
mCacheBoundsUV	.\WEDEntities\WED_GISChain.h	/^	mutable	Bbox2						mCacheBoundsUV;$/;"	m	class:WED_GISChain
mCacheBoundsUV	.\WEDEntities\WED_GISComposite.h	/^	mutable	Bbox2					mCacheBoundsUV;$/;"	m	class:WED_GISComposite
mCacheIconic	.\WEDMap\WED_MarqueeTool.h	/^	mutable bool			mCacheIconic;$/;"	m	class:WED_MarqueeTool
mCacheIconic	.\WEDTCE\WED_TCEMarqueeTool.h	/^	mutable bool		mCacheIconic;$/;"	m	class:WED_TCEMarqueeTool
mCacheKey	.\WEDCore\WED_Archive.h	/^	long long		mCacheKey;$/;"	m	class:WED_Archive
mCacheKey	.\WEDMap\WED_MapZoomerNew.h	/^	long long mCacheKey;$/;"	m	class:WED_MapZoomerNew
mCacheKeyArchive	.\WEDMap\WED_MarqueeTool.h	/^	mutable long long		mCacheKeyArchive;$/;"	m	class:WED_MarqueeTool
mCacheKeyArchive	.\WEDTCE\WED_TCEMarqueeTool.h	/^	mutable long long	mCacheKeyArchive;$/;"	m	class:WED_TCEMarqueeTool
mCachePts	.\WEDEntities\WED_GISChain.h	/^	mutable	vector<IGISPoint *>			mCachePts;$/;"	m	class:WED_GISChain
mCachePtsBezier	.\WEDEntities\WED_GISChain.h	/^	mutable	vector<IGISPoint_Bezier *>	mCachePtsBezier;$/;"	m	class:WED_GISChain
mCacheValid	.\WEDLibrary\WED_LibraryListAdapter.h	/^		bool					mCacheValid;$/;"	m	class:WED_LibraryListAdapter
mCacheValid	.\WEDProperties\WED_PropertyTable.h	/^	bool						mCacheValid;$/;"	m	class:WED_PropertyTable
mCalibrateDirty	.\GUI\GUI_ScrollerPane.h	/^	bool							mCalibrateDirty;$/;"	m	class:GUI_ScrollerPane
mCalibrating	.\GUI\GUI_ScrollerPane.h	/^	bool							mCalibrating;$/;"	m	class:GUI_ScrollerPane
mCalls	.\Utils\PerfUtils.h	/^	unsigned long		mCalls;$/;"	m	class:PerfTimer
mCamera	.\WEDNetwork\WED_NWLinkAdapter.h	/^			WED_NWCamera_t       mCamera;$/;"	m	class:WED_NWLinkAdapter
mCamera	.\WEDXPlugin\WED_XPluginMgr.h	/^   WED_XPluginCamera                mCamera;$/;"	m	class:WED_XPluginMgr
mCanClose	.\WEDMap\WED_CreateToolBase.h	/^	int		mCanClose;$/;"	m	class:WED_CreateToolBase
mCanCurve	.\WEDMap\WED_CreateToolBase.h	/^	int		mCanCurve;$/;"	m	class:WED_CreateToolBase
mCanSelect	.\WEDMap\WED_HandleToolBase.h	/^		int						mCanSelect;$/;"	m	class:WED_HandleToolBase
mCancel	.\GUI\GUI_FormWindow.h	/^		GUI_Pane *			mCancel;$/;"	m	class:GUI_FormWindow
mCaption	.\WEDWindows\WED_StartWindow.h	/^	string				mCaption;$/;"	m	class:WED_StartWindow
mCaret	.\GUI\GUI_TextField.h	/^		int					mCaret;$/;"	m	class:GUI_TextField
mCatLibInd	.\WEDLibrary\WED_LibraryListAdapter.h	/^		int						mCatLibInd;$/;"	m	class:WED_LibraryListAdapter
mCatLocInd	.\WEDLibrary\WED_LibraryListAdapter.h	/^		int						mCatLocInd;$/;"	m	class:WED_LibraryListAdapter
mCellIndent	.\GUI\GUI_TextTable.h	/^	int						mCellIndent;$/;"	m	class:GUI_TextTable
mCellOffHilite	.\GUI\GUI_Button.h	/^		int					mCellOffHilite[4];$/;"	m	class:GUI_Button
mCellOffReg	.\GUI\GUI_Button.h	/^		int					mCellOffReg[4];$/;"	m	class:GUI_Button
mCellOnHilite	.\GUI\GUI_Button.h	/^		int					mCellOnHilite[4];$/;"	m	class:GUI_Button
mCellOnReg	.\GUI\GUI_Button.h	/^		int					mCellOnReg[4];$/;"	m	class:GUI_Button
mCellResize	.\GUI\GUI_TextTable.h	/^	int								mCellResize;$/;"	m	class:GUI_TextTableHeader
mCellResize	.\GUI\GUI_TextTable.h	/^	int								mCellResize;$/;"	m	class:GUI_TextTableSide
mCellResize	.\GUI\GUI_TextTable.h	/^	int						mCellResize;$/;"	m	class:GUI_TextTable
mChance	.\XPTools\AddObjects.cpp	/^		double		mChance;$/;"	m	class:GroupNode	file:
mChance	.\XPTools\AddObjects.cpp	/^		double		mChance;$/;"	m	class:ObjectNode	file:
mChance	.\XPTools\AddObjects.cpp	/^		double		mChance;$/;"	m	class:SwitchNode	file:
mChange	.\WEDWindows\WED_StartWindow.h	/^	GUI_Button *		mChange;$/;"	m	class:WED_StartWindow
mChangeMask	.\WEDCore\WED_UndoLayer.h	/^	int						mChangeMask;$/;"	m	class:WED_UndoLayer
mChangeView	.\GUI\GUI_TabPane.h	/^	GUI_ChangeView *	mChangeView;$/;"	m	class:GUI_TabPane
mChildren	.\GUI\GUI_Pane.h	/^		vector<GUI_Pane *>	mChildren;$/;"	m	class:GUI_Pane
mClearColor	.\GUI\GUI_Window.h	/^	bool			mClearColor;$/;"	m	class:GUI_Window
mClearColorRGBA	.\GUI\GUI_Window.h	/^	float			mClearColorRGBA[4];$/;"	m	class:GUI_Window
mClearDepth	.\GUI\GUI_Window.h	/^	bool			mClearDepth;$/;"	m	class:GUI_Window
mClick	.\GUI\GUI_Splitter.h	/^	int		mClick;$/;"	m	class:GUI_Splitter
mClickCellX	.\GUI\GUI_Table.h	/^			int						mClickCellX;$/;"	m	class:GUI_Header
mClickCellX	.\GUI\GUI_Table.h	/^			int						mClickCellX;$/;"	m	class:GUI_Table
mClickCellX	.\GUI\GUI_TextTable.h	/^	int						mClickCellX;$/;"	m	class:GUI_TextTable
mClickCellY	.\GUI\GUI_Table.h	/^			int						mClickCellY;$/;"	m	class:GUI_Side
mClickCellY	.\GUI\GUI_Table.h	/^			int						mClickCellY;$/;"	m	class:GUI_Table
mClickCellY	.\GUI\GUI_TextTable.h	/^	int						mClickCellY;$/;"	m	class:GUI_TextTable
mClickLayer	.\WEDMap\WED_Map.h	/^	WED_MapLayer *	mClickLayer;$/;"	m	class:WED_Map
mClickPart	.\GUI\GUI_ScrollBar.h	/^		int		mClickPart;$/;"	m	class:GUI_ScrollBar
mClipper	.\ObjEdit\OE_Scroller.h	/^		OE_Pane *	mClipper;$/;"	m	class:OE_Scroller
mClose	.\Utils\MemFileUtils.cpp	/^	bool			mClose;	\/\/ True if we need to close our file descriptor.$/;"	m	struct:MFMemFile	file:
mClose	.\XESCore\SimpleIO.h	/^	bool			mClose;$/;"	m	class:FileReader
mClose	.\XESCore\SimpleIO.h	/^	bool			mClose;$/;"	m	class:FileWriter
mCmdChildren	.\GUI\GUI_Commander.h	/^				vector<GUI_Commander *>		mCmdChildren;$/;"	m	class:GUI_Commander
mCmdFocus	.\GUI\GUI_Commander.h	/^				GUI_Commander *				mCmdFocus;$/;"	m	class:GUI_Commander
mCmdParent	.\GUI\GUI_Commander.h	/^				GUI_Commander *				mCmdParent;$/;"	m	class:GUI_Commander
mCmdTarget	.\WEDWindows\WED_PackageListAdapter.h	/^	GUI_Commander *	mCmdTarget;$/;"	m	class:WED_PackageListAdapter
mColNames	.\WEDProperties\WED_PropertyTable.h	/^	vector<string>				mColNames;$/;"	m	class:WED_PropertyTable
mColNames	.\WEDProperties\WED_PropertyTable.h	/^	vector<string>				mColNames;$/;"	m	class:WED_PropertyTableHeader
mColor	.\WEDNetwork\WED_NWInfoLayer.h	/^    float	mColor[4];$/;"	m	class:WED_NWInfoLayer
mColorBkgnd	.\GUI\GUI_TextField.h	/^		float				mColorBkgnd[4];$/;"	m	class:GUI_TextField
mColorBox	.\GUI\GUI_TextField.h	/^		float				mColorBox[4];$/;"	m	class:GUI_TextField
mColorGridlines	.\GUI\GUI_TextTable.h	/^	float					mColorGridlines[4];$/;"	m	class:GUI_TextTable
mColorGridlines	.\GUI\GUI_TextTable.h	/^	float					mColorGridlines[4];$/;"	m	class:GUI_TextTableHeader
mColorGridlines	.\GUI\GUI_TextTable.h	/^	float					mColorGridlines[4];$/;"	m	class:GUI_TextTableSide
mColorHilite	.\GUI\GUI_TextField.h	/^		float				mColorHilite[4];$/;"	m	class:GUI_TextField
mColorInsertBetween	.\GUI\GUI_TextTable.h	/^	float					mColorInsertBetween[4];$/;"	m	class:GUI_TextTable
mColorInsertInto	.\GUI\GUI_TextTable.h	/^	float					mColorInsertInto[4];$/;"	m	class:GUI_TextTable
mColorSelect	.\GUI\GUI_TextTable.h	/^	float					mColorSelect[4];$/;"	m	class:GUI_TextTable
mColorText	.\GUI\GUI_Label.h	/^		float				mColorText[4];$/;"	m	class:GUI_Label
mColorText	.\GUI\GUI_TextField.h	/^		float				mColorText[4];$/;"	m	class:GUI_TextField
mColorText	.\GUI\GUI_TextTable.h	/^	float					mColorText[4];$/;"	m	class:GUI_TextTable
mColorText	.\GUI\GUI_TextTable.h	/^	float					mColorText[4];$/;"	m	class:GUI_TextTableHeader
mColorText	.\GUI\GUI_TextTable.h	/^	float					mColorText[4];$/;"	m	class:GUI_TextTableSide
mColorTextSelect	.\GUI\GUI_TextTable.h	/^	float					mColorTextSelect[4];$/;"	m	class:GUI_TextTable
mCols	.\GUI\GUI_SimpleTableGeometry.h	/^			vector<int>	mCols;$/;"	m	class:GUI_SimpleTableGeometry
mCommand	.\WEDCore\WED_UndoMgr.h	/^	WED_UndoLayer *				mCommand;$/;"	m	class:WED_UndoMgr
mCommited	.\ObjEdit\OE_DataModel.h	/^	bool mCommited;$/;"	m	struct:OECommand
mConnection	.\Network\HTTPClient.h	/^	HTTPConnection *	mConnection;		\/\/ Our connection - set to NULL when we are completed.$/;"	m	class:HTTPRequest
mConnection	.\WEDNetwork\WED_Server.h	/^	WED_Connection * 	mConnection;$/;"	m	class:WED_Server
mContent	.\GUI\GUI_ScrollerPane.h	/^	GUI_ScrollerPaneContent *		mContent;$/;"	m	class:GUI_ScrollerPane
mContent	.\GUI\GUI_Table.h	/^			GUI_TableContent *		mContent;$/;"	m	class:GUI_Table
mContent	.\GUI\GUI_TextTable.h	/^	GUI_TextTableHeaderProvider *	mContent;$/;"	m	class:GUI_TextTableHeader
mContent	.\GUI\GUI_TextTable.h	/^	GUI_TextTableHeaderProvider *	mContent;$/;"	m	class:GUI_TextTableSide
mContent	.\GUI\GUI_TextTable.h	/^	GUI_TextTableProvider * mContent;$/;"	m	class:GUI_TextTable
mContents	.\Network\XMLObject.h	/^	std::string		mContents;$/;"	m	class:XMLObject
mContents	.\ObjEdit\OE_Scroller.h	/^		OE_Pane *	mContents;$/;"	m	class:OE_Scroller
mContext	.\UI\XWinGL.h	/^		HGLRC			mContext;$/;"	m	class:XWinGL
mContext	.\UI\XWinGL.h	/^		NSOpenGLView *		mContext;$/;"	m	class:XWinGL
mControlHi	.\WEDMap\WED_CreateToolBase.h	/^	vector<Point2>		mControlHi;$/;"	m	class:WED_CreateToolBase
mControlLo	.\WEDMap\WED_CreateToolBase.h	/^	vector<Point2>		mControlLo;$/;"	m	class:WED_CreateToolBase
mControlPoint	.\ObjEdit\OE_CubeDeformer.h	/^	int			mControlPoint;$/;"	m	class:OE_CubeDeformer
mCoords	.\Network\TerraServer.h	/^	double			mCoords[4][2];$/;"	m	class:AsyncImage
mCoords	.\RenderFarmUI\RF_ImageTool.h	/^	double			mCoords[8];$/;"	m	class:RF_ImageTool
mCountKeys	.\WEDCore\WED_Properties.h	/^	sql_command		mCountKeys;$/;"	m	class:WED_Properties
mCoverage	.\Utils\CoverageFinder.h	/^	vector<bool>				mCoverage;$/;"	m	class:CoverageFinder
mCreating	.\WEDMap\WED_CreateToolBase.h	/^	int		mCreating;$/;"	m	class:WED_CreateToolBase
mCrop	.\RenderFarmUI\RF_CropTool.h	/^	bool			mCrop;$/;"	m	class:RF_CropTool
mCurHandle	.\Utils\UIUtils.h	/^	int							mCurHandle;$/;"	m	class:DragHandleSet
mCurPak	.\WEDWindows\WED_FilterBar.h	/^	string				mCurPak;$/;"	m	class:WED_FilterBar
mCurPakVal	.\WEDLibrary\WED_LibraryListAdapter.h	/^		int						mCurPakVal;$/;"	m	class:WED_LibraryListAdapter
mCurPakVal	.\WEDWindows\WED_FilterBar.h	/^	int					mCurPakVal;$/;"	m	class:WED_FilterBar
mCurProjector	.\ObjEdit\OE_ProjectionMgr.h	/^	int							mCurProjector;$/;"	m	class:OE_ProjectionMgr
mCurTool	.\RenderFarmUI\RF_MapView.h	/^	int						mCurTool;$/;"	m	class:RF_MapView
mCurkPak	.\WEDLibrary\WED_LibraryListAdapter.h	/^		string					mCurkPak;$/;"	m	class:WED_LibraryListAdapter
mCurl	.\WEDImportExport\WED_GatewayExport.cpp	/^	curl_http_get_file *	mCurl;$/;"	m	class:WED_GatewayExportDialog	file:
mCurl	.\WEDImportExport\WED_GatewayImport.cpp	/^	RAII_CURL_HNDL		mCurl;$/;"	m	class:WED_GatewayImportDialog	file:
mCurrentDragOps	.\UI\XWin.h	/^		int						mCurrentDragOps;	\/\/ Legal drag mask (in NS constants) for current drag op)$/;"	m	class:XWin
mCurrentFilter	.\DSF\DSFLibWrite.cpp	/^	int					mCurrentFilter;$/;"	m	class:DSFFileWriterImp	file:
mCurrentRecord	.\VPF\VPFTable.h	/^	const char *	mCurrentRecord;		\/\/ Base addr of current record$/;"	m	class:VPFTableIterator
mDC	.\UI\XWinGL.h	/^		HDC				mDC;$/;"	m	class:XWinGL
mDEMBounds	.\RenderFarmUI\RF_MapView.h	/^	double					mDEMBounds[4];$/;"	m	class:RF_MapView
mDLBuckets	.\RenderFarmUI\RF_MapView.h	/^	Bbox2					mDLBuckets[MESH_BUCKET_SIZE * MESH_BUCKET_SIZE + 1];$/;"	m	class:RF_MapView
mDLMeshFill	.\RenderFarmUI\RF_MapView.h	/^	int						mDLMeshFill;$/;"	m	class:RF_MapView
mDLMeshLine	.\RenderFarmUI\RF_MapView.h	/^	int						mDLMeshLine;$/;"	m	class:RF_MapView
mDND	.\GUI\GUI_Window.h	/^		GUI_Window_DND *	mDND;$/;"	m	class:GUI_Window
mDT	.\Utils\point_index.h	/^	DT			mDT;$/;"	m	class:spatial_index_2
mData	.\DSF\DSFPointPool.h	/^	double	mData[MAX_TUPLE_LEN];$/;"	m	class:DSFTuple
mData	.\DSF\dsflib_013005\DSFPointPool.h	/^	double	mData[MAX_TUPLE_LEN];$/;"	m	class:DSFTuple
mData	.\GUI\GUI_Clipboard.h	/^	map<GUI_ClipType, vector<char> >		mData;		\/\/ A map of buffers for our types.$/;"	m	class:GUI_SimpleDataObject
mData	.\GUI\GUI_Window.cpp	/^	IDataObject *	mData;$/;"	m	class:GUI_Window_DND	file:
mData	.\Obj\ObjPointPool.h	/^	vector<float>	mData;$/;"	m	class:ObjPointPool
mData	.\RenderFarmUI\RF_TerraTool.h	/^	string							mData;$/;"	m	class:RF_TerraTool
mData	.\Utils\BWImage.h	/^	unsigned long *	mData;$/;"	m	struct:BWImage
mData	.\WEDMap\WED_TerraserverLayer.h	/^	string									mData;$/;"	m	class:WED_TerraserverLayer
mData	.\XESCore\DEMDefs.h	/^	float *	mData;$/;"	m	struct:DEMGeo
mData	.\XESCore\DEMDefs.h	/^	vector<bool>	mData;$/;"	m	struct:DEMMask
mDeadList	.\GUI\GUI_Destroyable.cpp	/^static set<GUI_Destroyable *>		mDeadList;$/;"	v	file:
mDeadTask	.\GUI\GUI_Destroyable.cpp	/^static GUI_DestroyableTask *		mDeadTask = NULL;$/;"	v	file:
mDecimals	.\WEDCore\WED_PropertyHelper.h	/^	int				mDecimals;$/;"	m	class:WED_PropDoubleText
mDef	.\VPF\VPFTable.h	/^	VPF_TableDef	mDef;				\/\/ Def of our table$/;"	m	class:VPFTableIterator
mDefaultDND	.\UI\XWin.h	/^		int						mDefaultDND;		\/\/ If true, we dispatch the simple file-based D&D.  Otherwise we use the Mac-specific$/;"	m	class:XWin
mDeferLevel	.\GUI\GUI_Commander.h	/^				int							mDeferLevel;$/;"	m	class:GUI_Commander
mDeferredActions	.\GUI\GUI_Commander.h	/^				vector<deferred_cmd_or_key>	mDeferredActions;$/;"	m	class:GUI_Commander
mDeformer	.\ObjEdit\OE_ProjectionMgr.h	/^	OE_CubeDeformer *			mDeformer;$/;"	m	class:OE_ProjectionMgr
mDelList	.\WEDNetwork\WED_NWLinkAdapter.h	/^				set<int>		 mDelList;$/;"	m	class:WED_NWLinkAdapter
mDensity	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropDoubleText				mDensity;$/;"	m	class:WED_CreatePolygonTool
mDepth	.\Obj\ObjPointPool.h	/^	int				mDepth;$/;"	m	class:ObjPointPool
mDerived	.\XESCore\MapDefs.h	/^	bool				mDerived;$/;"	m	struct:GISPolyObjPlacement_t
mDerived	.\XESCore\MapDefs.h	/^	bool			mDerived;$/;"	m	struct:GISObjPlacement_t
mDesc	.\GUI\GUI_Pane.h	/^		string				mDesc;$/;"	m	class:GUI_Pane
mDestFile	.\Network\HTTPClient.h	/^	FILE *				mDestFile;			\/\/ File to save to, if open.$/;"	m	class:HTTPRequest
mDestFileName	.\Network\HTTPClient.h	/^	string				mDestFileName;		\/\/ Name of file to save to.$/;"	m	class:HTTPRequest
mDigits	.\WEDCore\WED_PropertyHelper.h	/^	int				mDigits;$/;"	m	class:WED_PropDoubleText
mDigits	.\WEDCore\WED_PropertyHelper.h	/^	int				mDigits;$/;"	m	class:WED_PropIntText
mDirection	.\GUI\GUI_Splitter.h	/^	int		mDirection;$/;"	m	class:GUI_Splitter
mDirty	.\WEDCore\WED_Persistent.h	/^		int				mDirty;$/;"	m	class:WED_Persistent
mDiscloseIndent	.\GUI\GUI_TextTable.h	/^	int						mDiscloseIndent;$/;"	m	class:GUI_TextTable
mDisplayPopup	.\ObjEdit\OE_Preview.h	/^	OE_Pane *	mDisplayPopup[3];$/;"	m	class:OE_Preview
mDistances	.\Utils\XCull.h	/^	vector<DistanceVector>			mDistances;$/;"	m	class:XCull
mDivisions	.\DSF\DSFLibWrite.cpp	/^	int		mDivisions;$/;"	m	class:DSFFileWriterImp	file:
mDivisions	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	int		mDivisions;$/;"	m	class:DSFFileWriterImp	file:
mDocPrefs	.\WEDCore\WED_Document.h	/^	map<string,string>			mDocPrefs;				\/\/ All string, int and double (non-set) prefs$/;"	m	class:WED_Document
mDocPrefsActName	.\WEDCore\WED_Document.h	/^	string						mDocPrefsActName;		\/\/ Temporary for tracking the current int-set on read-i.$/;"	m	class:WED_Document
mDocPrefsItems	.\WEDCore\WED_Document.h	/^	map<string,set<int> >		mDocPrefsItems;			\/\/ The int-set prefs, separated out.$/;"	m	class:WED_Document
mDocument	.\WEDWindows\WED_DocumentWindow.h	/^	WED_Document *				mDocument;$/;"	m	class:WED_DocumentWindow
mDomain	.\Network\TerraServer.h	/^	int				mDomain;$/;"	m	class:AsyncImage
mDomain	.\RenderFarmUI\RF_TerraTool.h	/^	int mX1, mX2, mY1, mY2, mDomain, mHas;$/;"	m	class:RF_TerraTool
mDomain	.\WEDMap\WED_TerraserverLayer.h	/^	int mX1[NUM_LEVELS], mX2[NUM_LEVELS], mY1[NUM_LEVELS], mY2[NUM_LEVELS], mDomain[NUM_LEVELS], mHas[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mDone	.\GUI\GUI_Application.h	/^	bool                mDone;$/;"	m	class:GUI_Application
mDone	.\Utils\XUtils.h	/^	bool	mDone;$/;"	m	class:StTextFileScanner
mDragCmd	.\ObjEdit\OE_TexEdWindow.h	/^		int			mDragCmd;		\/\/ The command index for the primitive being dragged$/;"	m	class:OE_DirectEdPane
mDragDest	.\GUI\GUI_TextTable.h	/^	GUI_DragTableDest		mDragDest;$/;"	m	class:GUI_TextTable
mDragMode	.\WEDNetwork\WED_NWInfoLayer.h	/^    drag_mode	mDragMode;$/;"	m	class:WED_NWInfoLayer
mDragPart	.\GUI\GUI_TextTable.h	/^	GUI_DragPart			mDragPart;$/;"	m	class:GUI_TextTable
mDragS1	.\ObjEdit\OE_TexEdWindow.h	/^	float	mDragS1;		\/\/ Original geometry of the patch on drag start$/;"	m	class:OE_PatchEdPane
mDragS2	.\ObjEdit\OE_TexEdWindow.h	/^	float	mDragS2;$/;"	m	class:OE_PatchEdPane
mDragT1	.\ObjEdit\OE_TexEdWindow.h	/^	float	mDragT1;$/;"	m	class:OE_PatchEdPane
mDragT2	.\ObjEdit\OE_TexEdWindow.h	/^	float	mDragT2;$/;"	m	class:OE_PatchEdPane
mDragTarget	.\GUI\GUI_Pane.h	/^		GUI_Pane *			mDragTarget;$/;"	m	class:GUI_Pane
mDragType	.\WEDMap\WED_HandleToolBase.h	/^		DragType_t				mDragType;$/;"	m	class:WED_HandleToolBase
mDragVertex	.\ObjEdit\OE_TexEdWindow.h	/^		int			mDragVertex;	\/\/ The vertex index in that command$/;"	m	class:OE_DirectEdPane
mDragX	.\GUI\GUI_Table.h	/^			int						mDragX;$/;"	m	class:GUI_Table
mDragX	.\GUI\GUI_TextTable.h	/^	int						mDragX;$/;"	m	class:GUI_TextTable
mDragX	.\WEDMap\WED_HandleToolBase.h	/^		int						mDragX;$/;"	m	class:WED_HandleToolBase
mDragX1	.\ObjEdit\OE_Preview.h	/^	int		mDragX1;$/;"	m	class:OE_Preview
mDragX2	.\ObjEdit\OE_Preview.h	/^	int		mDragX2;$/;"	m	class:OE_Preview
mDragY	.\GUI\GUI_Table.h	/^			int						mDragY;$/;"	m	class:GUI_Table
mDragY	.\GUI\GUI_TextTable.h	/^	int						mDragY;$/;"	m	class:GUI_TextTable
mDragY	.\WEDMap\WED_HandleToolBase.h	/^		int						mDragY;$/;"	m	class:WED_HandleToolBase
mDragY1	.\ObjEdit\OE_Preview.h	/^	int		mDragY1;$/;"	m	class:OE_Preview
mDragY2	.\ObjEdit\OE_Preview.h	/^	int		mDragY2;$/;"	m	class:OE_Preview
mDragging	.\ObjEdit\OE_Preview.h	/^	bool	mDragging;$/;"	m	class:OE_Preview
mDragging	.\UI\XWin.h	/^		int				mDragging;$/;"	m	class:XWin
mDragging	.\UI\XWin.h	/^	int		mDragging; \/\/ Button being dragged or -1 if none ;$/;"	m	class:XWin
mDrawAlways	.\WEDMap\WED_HandleToolBase.h	/^		int						mDrawAlways;$/;"	m	class:WED_HandleToolBase
mDropTarget	.\UI\XWin.h	/^		CDropTarget *	mDropTarget;$/;"	m	class:XWin
mDst	.\Utils\BWImage.h	/^	char *			mDst;$/;"	m	struct:StRestoreChunk
mDstMax	.\Utils\CompGeomUtils.h	/^	Point2	mDstMax;$/;"	m	struct:CoordTranslator2
mDstMax	.\XESCore\CGALDefs.h	/^	Point_2	mDstMax;$/;"	m	struct:CoordTranslator_2
mDstMin	.\Utils\CompGeomUtils.h	/^	Point2	mDstMin;$/;"	m	struct:CoordTranslator2
mDstMin	.\XESCore\CGALDefs.h	/^	Point_2	mDstMin;$/;"	m	struct:CoordTranslator_2
mDying	.\WEDCore\WED_Archive.h	/^	bool			mDying;			\/\/ Flag to self - WE are killing ourselves - ignore objects.$/;"	m	class:WED_Archive
mDynamicCols	.\WEDProperties\WED_PropertyTable.h	/^	int							mDynamicCols;$/;"	m	class:WED_PropertyTable
mEast	.\DSF\DSFLibWrite.cpp	/^	double	mEast;$/;"	m	class:DSFFileWriterImp	file:
mEast	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	double	mEast;$/;"	m	class:DSFFileWriterImp	file:
mEast	.\Network\TerraServer.h	/^	double			mEast;$/;"	m	class:AsyncImageLocator
mEast	.\XESCore\DEMDefs.h	/^	double	mEast;$/;"	m	struct:DEMGeo
mEast	.\XESCore\DEMDefs.h	/^	double	mEast;$/;"	m	struct:DEMMask
mEast	.\XESCore\DEMIO.h	/^	double			mEast;$/;"	m	struct:DEMSpec
mEdgeSelection	.\RenderFarmUI\RF_SelectionTool.h	/^	set<Pmwx::Halfedge_handle>	mEdgeSelection;$/;"	m	class:RF_SelectionTool
mEdges	.\RenderFarmUI\RF_MapView.h	/^	int						mEdges[MESH_BUCKET_SIZE * MESH_BUCKET_SIZE + 1];$/;"	m	class:RF_MapView
mEditInfo	.\GUI\GUI_TextTable.h	/^	GUI_CellContent			mEditInfo;$/;"	m	class:GUI_TextTable
mEditMode	.\WEDMap\WED_MarqueeTool.h	/^			marquee_mode_t	mEditMode;$/;"	m	class:WED_MarqueeTool
mEditMode	.\WEDTCE\WED_TCEMarqueeTool.h	/^			tce_marquee_mode_t	mEditMode;$/;"	m	class:WED_TCEMarqueeTool
mEditNum	.\XPTools\ViewObj.cpp	/^	int		mEditNum;$/;"	m	class:XObjWin	file:
mEditStarted	.\WEDMap\WED_CreateToolBase.h	/^	int					mEditStarted;$/;"	m	class:WED_CreateToolBase
mElevMax	.\DSF\DSFLibWrite.cpp	/^	double	mElevMax;$/;"	m	class:DSFFileWriterImp	file:
mElevMin	.\DSF\DSFLibWrite.cpp	/^	double	mElevMin;$/;"	m	class:DSFFileWriterImp	file:
mEnabled	.\GUI\GUI_Pane.h	/^		int					mEnabled;$/;"	m	class:GUI_Pane
mEnabled	.\GUI\GUI_ToolBar.h	/^	vector<int>		mEnabled;$/;"	m	class:GUI_ToolBar
mEnabled	.\WEDXPlugin\WED_XPluginCamera.h	/^    bool                 mEnabled;$/;"	m	class:WED_XPluginCamera
mEnd	.\Utils\MemFileUtils.cpp	/^	const char *	mEnd;$/;"	m	struct:MFMemFile	file:
mEnd	.\XESCore\SimpleIO.h	/^	const char *	mEnd;$/;"	m	class:MemFileReader
mEntities	.\WEDEntities\WED_GISComposite.h	/^	mutable	vector<IGISEntity *>	mEntities;$/;"	m	class:WED_GISComposite
mEntities	.\WEDXPlugin\WED_XPluginMgr.h	/^   map<int,WED_XPluginEntity *>  	mEntities;$/;"	m	class:WED_XPluginMgr
mEntityCache	.\WEDMap\WED_VertexTool.h	/^		mutable vector<IGISEntity *>	mEntityCache;$/;"	m	class:WED_VertexTool
mEntityCacheKeyArchive	.\WEDMap\WED_VertexTool.h	/^		mutable long long				mEntityCacheKeyArchive;$/;"	m	class:WED_VertexTool
mEntityCacheKeyZoomer	.\WEDMap\WED_VertexTool.h	/^		mutable long long				mEntityCacheKeyZoomer;$/;"	m	class:WED_VertexTool
mEnumValues	.\Utils\CoverageFinder.h	/^	vector<map<int, string> >	mEnumValues;$/;"	m	class:CoverageFinder
mExclusions	.\WEDMap\WED_CreateBoxTool.h	/^		WED_PropIntEnumSet				mExclusions;$/;"	m	class:WED_CreateBoxTool
mExtendSide	.\GUI\GUI_Table.h	/^			int						mExtendSide;$/;"	m	class:GUI_Header
mExtendSide	.\GUI\GUI_Table.h	/^			int						mExtendSide;$/;"	m	class:GUI_Table
mExternal	.\SDTS\SDTSRead.h	/^		MFFileSet *								mExternal;$/;"	m	class:SDTSDirectory
mFac	.\WEDCore\WED_ResourceMgr.h	/^	map<string,fac_info_t>		mFac;$/;"	m	class:WED_ResourceMgr
mFacTool	.\WEDMap\WED_MapPane.h	/^	WED_CreatePolygonTool *	mFacTool;$/;"	m	class:WED_MapPane
mFacade	.\XPTools\ViewObj.cpp	/^	FacadeObj_t		mFacade;$/;"	m	class:XObjWin	file:
mFaceSelection	.\RenderFarmUI\RF_SelectionTool.h	/^	set<Pmwx::Face_handle>		mFaceSelection;$/;"	m	class:RF_SelectionTool
mFakeFar	.\Utils\HLCamera.h	/^	GLdouble	mFakeFar;			\/\/ See comments on fake far clipping planes$/;"	m	class:xcam_class
mFar	.\Utils\HLCamera.h	/^	GLdouble	mFar;				\/\/ (These are always negative!)$/;"	m	class:xcam_class
mFeatType	.\XESCore\MapDefs.h	/^	int				mFeatType;$/;"	m	struct:GISAreaFeature_t
mFeatType	.\XESCore\MapDefs.h	/^	int				mFeatType;$/;"	m	struct:GISNetworkSegment_t
mFeatType	.\XESCore\MapDefs.h	/^	int				mFeatType;$/;"	m	struct:GISPointFeature_t
mFeatType	.\XESCore\MapDefs.h	/^	int				mFeatType;$/;"	m	struct:GISPolygonFeature_t
mFetch	.\Network\TerraServer.h	/^	HTTPRequest *	mFetch;$/;"	m	class:AsyncImageLocator
mFetchCoords	.\Network\TerraServer.h	/^	HTTPRequest *	mFetchCoords;$/;"	m	class:AsyncImage
mFetchFunc	.\GUI\GUI_Clipboard.h	/^	GUI_GetData_f				mFetchFunc;$/;"	m	class:GUI_SimpleDataObject
mFetchImage	.\Network\TerraServer.h	/^	HTTPRequest *	mFetchImage;$/;"	m	class:AsyncImage
mFetchRef	.\GUI\GUI_Clipboard.h	/^	void *						mFetchRef;$/;"	m	class:GUI_SimpleDataObject
mFieldOffsets	.\VPF\VPFTable.h	/^	vector<int>		mFieldOffsets;		\/\/ Offsets in cur record of all fields (in bytes)$/;"	m	class:VPFTableIterator
mFields	.\Network\HTTPClient.h	/^	FieldMap			mFields;			\/\/ All fields verbatim$/;"	m	class:HTTPRequest
mFile	.\RenderFarmUI\RF_ImageTool.h	/^	string			mFile;$/;"	m	class:RF_ImageTool
mFile	.\Utils\MemFileUtils.cpp	/^	int				mFile;	\/\/ File descriptor$/;"	m	struct:MFMemFile	file:
mFile	.\Utils\XChunkyFileUtils.h	/^	FILE *			mFile;$/;"	m	struct:StAtomWriter
mFile	.\Utils\XUtils.h	/^	FILE *	mFile;$/;"	m	class:StTextFileScanner
mFile	.\VPF\VPFTable.h	/^	MFMemFile *		mFile;				\/\/ Mem in file$/;"	m	class:VPFTableIterator
mFile	.\WEDCore\WED_Errors.h	/^	const char *		mFile;$/;"	m	class:wed_error_exception
mFile	.\WEDCore\WED_UndoLayer.h	/^	const char *			mFile;$/;"	m	class:WED_UndoLayer
mFile	.\WEDImportExport\WED_GatewayImport.cpp	/^ FILE * mFile;$/;"	m	class:RAII_file	file:
mFile	.\XESCore\SimpleIO.h	/^	FILE *			mFile;$/;"	m	class:FileReader
mFile	.\XESCore\SimpleIO.h	/^	FILE *			mFile;$/;"	m	class:FileWriter
mFile	.\XESCore\SimpleIO.h	/^	zipFile			mFile;$/;"	m	class:ZipFileWriter
mFileData	.\Utils\MemFileUtils.cpp	/^	vector<char *>		mFileData;		\/\/ Per file - bytes of this file if pre-loaded (NULLs allowed to keep array ok.)$/;"	m	struct:MFFileSet	file:
mFileEnd	.\Utils\MemFileUtils.cpp	/^	const char * mFileEnd;$/;"	m	struct:MFTextScanner	file:
mFilePath	.\WEDCore\WED_Document.h	/^	string				mFilePath;$/;"	m	class:WED_Document
mFiles	.\SDTS\SDTSRead.h	/^		MFFileSet *								mFiles;$/;"	m	class:SDTSDirectory
mFiltSplitter	.\WEDWindows\WED_DocumentWindow.h	/^	GUI_Splitter *				mFiltSplitter;$/;"	m	class:WED_DocumentWindow
mFilter	.\WEDImportExport\WED_AptImportDialog.h	/^	WED_FilterBar *			mFilter;$/;"	m	class:WED_AptImportDialog
mFilter	.\WEDImportExport\WED_AptTable.h	/^	string				mFilter;$/;"	m	class:WED_AptTable
mFilter	.\WEDImportExport\WED_GatewayImport.cpp	/^	WED_FilterBar	 *		mFilter;$/;"	m	class:WED_GatewayImportDialog	file:
mFilter	.\WEDImportExport\WED_ICAOTable.h	/^	string				mFilter;$/;"	m	class:WED_ICAOTable
mFilter	.\WEDImportExport\WED_VerTable.h	/^	string				mFilter;$/;"	m	class:WED_VerTable
mFilter	.\WEDLibrary\WED_LibraryListAdapter.h	/^		vector<string>			mFilter;$/;"	m	class:WED_LibraryListAdapter
mFilter	.\WEDLibrary\WED_LibraryPane.h	/^	WED_FilterBar *			mFilter;$/;"	m	class:WED_LibraryPane
mFilter	.\WEDProperties\WED_PropertyTable.h	/^	set<string>					mFilter;$/;"	m	class:WED_PropertyTable
mFloat	.\XESCore\DEMIO.h	/^	bool			mFloat;					\/\/ True if floating point, false for integral types$/;"	m	struct:DEMSpec
mFloatValues	.\Utils\CoverageFinder.h	/^	vector<set<float> >			mFloatValues;$/;"	m	class:CoverageFinder
mFloors	.\XPTools\ViewObj.cpp	/^	int		mFloors;$/;"	m	class:XObjWin	file:
mFlowBounds	.\RenderFarmUI\RF_MapView.h	/^	double					mFlowBounds[4];$/;"	m	class:RF_MapView
mFlowID	.\RenderFarmUI\RF_MapView.h	/^	GLuint					mFlowID;$/;"	m	class:RF_MapView
mFlowS	.\RenderFarmUI\RF_MapView.h	/^	float					mFlowS;$/;"	m	class:RF_MapView
mFlowT	.\RenderFarmUI\RF_MapView.h	/^	float					mFlowT;$/;"	m	class:RF_MapView
mFocusRing	.\GUI\GUI_FormWindow.h	/^		vector<GUI_Commander *> mFocusRing;$/;"	m	class:GUI_FormWindow
mFont	.\GUI\GUI_Label.h	/^		int					mFont;$/;"	m	class:GUI_Label
mFont	.\GUI\GUI_TextField.h	/^		int					mFont;$/;"	m	class:GUI_TextField
mFont	.\GUI\GUI_TextTable.h	/^	int						mFont;$/;"	m	class:GUI_TextTable
mFormBounds	.\GUI\GUI_FormWindow.h	/^		int					mFormBounds[4];$/;"	m	class:GUI_FormWindow
mFound	.\RenderFarmUI\RF_TopoTester.h	/^		Point2					mFound;$/;"	m	class:RF_TopoTester
mFoundHint	.\RenderFarmUI\RF_TopoTester.h	/^		GISHalfedge *			mFoundHint;$/;"	m	class:RF_TopoTester
mFoundLoc	.\RenderFarmUI\RF_TopoTester.h	/^		Pmwx::Locate_type		mFoundLoc;$/;"	m	class:RF_TopoTester
mFree	.\Utils\MemFileUtils.cpp	/^	bool			mFree;	\/\/ True if we need to free memory when done.$/;"	m	struct:MFMemFile	file:
mFstTool	.\WEDMap\WED_MapPane.h	/^	WED_CreatePolygonTool * mFstTool;$/;"	m	class:WED_MapPane
mFunctions	.\UI\FontMgr.h	/^	FontFuncs		mFunctions;$/;"	m	class:FontMgr
mFurnitureFactor	.\WEDMap\WED_MapLayer.h	/^	double					mFurnitureFactor;$/;"	m	class:WED_MapLayer
mFurnitureRadius	.\WEDMap\WED_MapLayer.h	/^	double					mFurnitureRadius;$/;"	m	class:WED_MapLayer
mGL	.\XESCore\MapDefs.h	/^	float						mGL[2];				\/\/ Pre-expanded line!$/;"	m	struct:GIS_vertex_data
mGLColor	.\XESCore\MapDefs.h	/^	unsigned char				mGLColor[3];$/;"	m	struct:GIS_halfedge_data
mGLColor	.\XESCore\MapDefs.h	/^	unsigned char				mGLColor[4];$/;"	m	class:GIS_face_data
mGLTris	.\XESCore\MapDefs.h	/^	vector<const float *>		mGLTris;						\/\/ Pre-expanded triangle indices$/;"	m	class:GIS_face_data
mGen	.\Network\TerraServer.h	/^	int				mGen;$/;"	m	class:AsyncImage
mGeometry	.\GUI\GUI_Table.h	/^			GUI_TableGeometry *		mGeometry;$/;"	m	class:GUI_Header
mGeometry	.\GUI\GUI_Table.h	/^			GUI_TableGeometry *		mGeometry;$/;"	m	class:GUI_Side
mGeometry	.\GUI\GUI_Table.h	/^			GUI_TableGeometry *		mGeometry;$/;"	m	class:GUI_Table
mGeometry	.\GUI\GUI_TextTable.h	/^	GUI_TableGeometry *				mGeometry;$/;"	m	class:GUI_TextTableHeader
mGeometry	.\GUI\GUI_TextTable.h	/^	GUI_TableGeometry *				mGeometry;$/;"	m	class:GUI_TextTableSide
mGeometry	.\GUI\GUI_TextTable.h	/^	GUI_TableGeometry *		mGeometry;$/;"	m	class:GUI_TextTable
mGetKey	.\WEDCore\WED_Properties.h	/^	sql_command		mGetKey;$/;"	m	class:WED_Properties
mGlWidget	.\UI\XWinGL.h	/^	glWidget*		mGlWidget;$/;"	m	class:XWinGL
mGotWholeHeader	.\Network\HTTPClient.h	/^	bool				mGotWholeHeader;	\/\/ Already saw the whole HTTP header?  (Then we are in payload.)$/;"	m	class:HTTPRequest
mGrid	.\WEDTCE\WED_TCEVertexTool.h	/^		WED_PropIntEnum		mGrid;$/;"	m	class:WED_TCEVertexTool
mGrid	.\XESCore\DEMGrid.h	/^	vector<Point_2>	mGrid;$/;"	m	struct:DEMGrid
mH	.\GUI\GUI_ToolBar.h	/^	int				mH;$/;"	m	class:GUI_ToolBar
mH	.\UI\XPopup.h	/^		int mX, mY, mW, mH;$/;"	m	class:XPopup
mHScroll	.\ObjEdit\OE_Scroller.h	/^		OE_Pane *	mHScroll;$/;"	m	class:OE_Scroller
mHandle	.\OGLE\ogle.h	/^	OGLE_Handle		mHandle;$/;"	m	class:OGLE
mHandle	.\ObjEdit\OE_TexEdWindow.h	/^	int		mHandle;		\/\/ Our current handle or 8 to drag the whole thing$/;"	m	class:OE_PatchEdPane
mHandleEntity	.\WEDMap\WED_HandleToolBase.h	/^		intptr_t				mHandleEntity;		\/\/ Which entity do we drag$/;"	m	class:WED_HandleToolBase
mHandleIndex	.\WEDMap\WED_HandleToolBase.h	/^		int						mHandleIndex;$/;"	m	class:WED_HandleToolBase
mHandleRadius	.\Utils\UIUtils.h	/^	int							mHandleRadius;$/;"	m	class:DragHandleSet
mHandles	.\RenderFarmUI\RF_BezierTestTool.h	/^	DragHandleSet	mHandles;$/;"	m	class:RF_BezierTestTool
mHandles	.\RenderFarmUI\RF_CropTool.h	/^	DragHandleSet	mHandles;$/;"	m	class:RF_CropTool
mHandles	.\RenderFarmUI\RF_ImageTool.h	/^	DragHandleSet	mHandles;$/;"	m	class:RF_ImageTool
mHandles	.\WEDMap\WED_HandleToolBase.h	/^		IControlHandles *		mHandles;$/;"	m	class:WED_HandleToolBase
mHas	.\Network\TerraServer.h	/^	bool			mHas;$/;"	m	class:AsyncImageLocator
mHas	.\RenderFarmUI\RF_TerraTool.h	/^	int mX1, mX2, mY1, mY2, mDomain, mHas;$/;"	m	class:RF_TerraTool
mHas	.\WEDMap\WED_TerraserverLayer.h	/^	int mX1[NUM_LEVELS], mX2[NUM_LEVELS], mY1[NUM_LEVELS], mY2[NUM_LEVELS], mDomain[NUM_LEVELS], mHas[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mHasCoords	.\Network\TerraServer.h	/^	bool			mHasCoords;$/;"	m	class:AsyncImage
mHasDirs	.\WEDMap\WED_CreateToolBase.h	/^	vector<int>			mHasDirs;$/;"	m	class:WED_CreateToolBase
mHasErr	.\Network\TerraServer.h	/^	bool			mHasErr;$/;"	m	class:AsyncImage
mHasFlow	.\RenderFarmUI\RF_MapView.h	/^	bool					mHasFlow;$/;"	m	class:RF_MapView
mHasListing	.\Utils\MemFileUtils.cpp	/^	bool				mHasListing;	\/\/ Is the dir listing already loaded?$/;"	m	struct:MFFileSet	file:
mHasRelief	.\RenderFarmUI\RF_MapView.h	/^	bool					mHasRelief;$/;"	m	class:RF_MapView
mHasTex	.\RenderFarmUI\RF_MapView.h	/^	bool					mHasTex;$/;"	m	class:RF_MapView
mHasUV	.\WEDEntities\WED_GISChain.h	/^	mutable bool						mHasUV;$/;"	m	class:WED_GISChain
mHasUV	.\WEDEntities\WED_GISComposite.h	/^	mutable	bool					mHasUV;$/;"	m	class:WED_GISComposite
mHavePacks	.\WEDWindows\WED_FilterBar.h	/^	bool				mHavePacks;$/;"	m	class:WED_FilterBar
mHdg	.\WEDXPlugin\WED_XPluginEntity.h	/^    float				mHdg;$/;"	m	class:WED_XPluginEntity
mHeader	.\GUI\GUI_Table.h	/^			GUI_TableHeader *		mHeader;$/;"	m	class:GUI_Header
mHeader	.\WEDImportExport\WED_AptImportDialog.h	/^	GUI_Header *			mHeader;$/;"	m	class:WED_AptImportDialog
mHeader	.\WEDLibrary\WED_LibraryPane.h	/^	GUI_Header *			mHeader;$/;"	m	class:WED_LibraryPane
mHeader	.\WEDProperties\WED_PropertyPane.h	/^	GUI_Header *					mHeader;$/;"	m	class:WED_PropertyPane
mHeaderBytes	.\XESCore\DEMIO.h	/^	int				mHeaderBytes;			\/\/ Pre-data header size - usually 0, except for oz floats$/;"	m	struct:DEMSpec
mHeading	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropDoubleText				mHeading;$/;"	m	class:WED_CreatePolygonTool
mHeading	.\XESCore\MapDefs.h	/^	double			mHeading;$/;"	m	struct:GISObjPlacement_t
mHeading	.\XPTools\AddObjects.cpp	/^		DoubleRange	mHeading;$/;"	m	class:ObjectNode	file:
mHeight	.\Utils\BWImage.h	/^	int				mHeight;$/;"	m	struct:BWImage
mHeight	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropDoubleText				mHeight;$/;"	m	class:WED_CreatePolygonTool
mHeight	.\XESCore\DEMDefs.h	/^	int		mHeight;$/;"	m	struct:DEMGeo
mHeight	.\XESCore\DEMDefs.h	/^	int		mHeight;$/;"	m	struct:DEMMask
mHeight	.\XESCore\DEMGrid.h	/^	int				mHeight;$/;"	m	struct:DEMGrid
mHeight	.\XESCore\DEMIO.h	/^	int				mHeight;$/;"	m	struct:DEMSpec
mHeliportIconsC	.\WEDMap\WED_StructureLayer.h	/^	vector<float>		mHeliportIconsC;$/;"	m	class:WED_StructureLayer
mHeliportIconsX	.\WEDMap\WED_StructureLayer.h	/^	vector<int>			mHeliportIconsX;$/;"	m	class:WED_StructureLayer
mHeliportIconsY	.\WEDMap\WED_StructureLayer.h	/^	vector<int>			mHeliportIconsY;$/;"	m	class:WED_StructureLayer
mHilite	.\GUI\GUI_Button.h	/^		int					mHilite;$/;"	m	class:GUI_Button
mHilite	.\GUI\GUI_TabControl.h	/^		int					mHilite;$/;"	m	class:GUI_TabControl
mHintMap	.\XESCore\MeshDefs.h	/^	mutable	HintMap	mHintMap;$/;"	m	class:CDT
mHost	.\WEDMap\WED_MapLayer.h	/^	GUI_Pane *				mHost;$/;"	m	class:WED_MapLayer
mHost	.\WEDTCE\WED_TCELayer.h	/^	GUI_Pane *				mHost;$/;"	m	class:WED_TCELayer
mHotArrive	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntEnumSet		mHotArrive;$/;"	m	class:WED_CreateEdgeTool
mHotDepart	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntEnumSet		mHotDepart;$/;"	m	class:WED_CreateEdgeTool
mHotILS	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntEnumSet		mHotILS;		$/;"	m	class:WED_CreateEdgeTool
mICAO_AptProvider	.\WEDImportExport\WED_GatewayImport.cpp	/^		WED_ICAOTable			mICAO_AptProvider;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_Apts	.\WEDImportExport\WED_GatewayImport.cpp	/^		AptVector				mICAO_Apts;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_Header	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Header *			mICAO_Header;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_Packer	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Packer *			mICAO_Packer;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_Scroller	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_ScrollerPane *		mICAO_Scroller;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_Table	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Table *				mICAO_Table;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_TextTable	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_TextTable			mICAO_TextTable;$/;"	m	class:WED_GatewayImportDialog	file:
mICAO_TextTableHeader	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_TextTableHeader		mICAO_TextTableHeader;$/;"	m	class:WED_GatewayImportDialog	file:
mICAOid	.\WEDImportExport\WED_GatewayImport.cpp	/^	string				mICAOid;$/;"	m	class:WED_GatewayImportDialog	file:
mID	.\GUI\GUI_Pane.h	/^		int					mID;$/;"	m	class:GUI_Pane
mID	.\GUI\GUI_Timer.h	/^		UINT_PTR	mID;$/;"	m	class:GUI_Timer
mID	.\Utils\XChunkyFileUtils.h	/^	uint32_t		mID;$/;"	m	struct:StAtomWriter
mID	.\WEDCore\WED_Archive.h	/^	int				mID;$/;"	m	class:WED_Archive
mID	.\WEDCore\WED_Persistent.h	/^		int				mID;$/;"	m	class:WED_Persistent
mIPAddr	.\WEDXPlugin\WED_XPluginClient.h	/^	unsigned long		mIPAddr;$/;"	m	class:WED_XPluginClient
mIWnd	.\UI\XPopup.h	/^		xwindow mIWnd;$/;"	m	class:XPopup
mIdent	.\WEDNetwork\WED_Server.h	/^	unsigned long		mIdent;$/;"	m	class:WED_Server
mIdent	.\WEDXPlugin\WED_XPluginClient.h	/^	unsigned long		mIdent;$/;"	m	class:WED_XPluginClient
mImage	.\GUI\GUI_Packer.h	/^	string	mImage;$/;"	m	class:GUI_Packer
mImage	.\GUI\GUI_ScrollerPane.h	/^	string							mImage;$/;"	m	class:GUI_ScrollerPane
mImage	.\GUI\GUI_Splitter.h	/^	string	mImage;$/;"	m	class:GUI_Splitter
mImage	.\GUI\GUI_TextTable.h	/^	string							mImage;$/;"	m	class:GUI_TextTableHeader
mImage	.\GUI\GUI_TextTable.h	/^	string							mImage;$/;"	m	class:GUI_TextTableSide
mImage	.\GUI\GUI_TextTable.h	/^	string					mImage;$/;"	m	class:GUI_TextTable
mImage	.\Network\TerraServer.h	/^	ImageInfo *		mImage;$/;"	m	class:AsyncImage
mImage1	.\GUI\GUI_Splitter.h	/^	string	mImage1;$/;"	m	class:GUI_Splitter
mImage2	.\GUI\GUI_Splitter.h	/^	string	mImage2;$/;"	m	class:GUI_Splitter
mImageCon	.\Network\TerraServer.h	/^	vector<HTTPConnection *>		mImageCon;$/;"	m	class:AsyncConnectionPool
mImageFile	.\WEDEntities\WED_OverlayImage.h	/^	WED_PropFileText			mImageFile;$/;"	m	class:WED_OverlayImage
mImages	.\RenderFarmUI\RF_TerraTool.h	/^	map<long long, AsyncImage*>		mImages;$/;"	m	class:RF_TerraTool
mImages	.\WEDMap\WED_TerraserverLayer.h	/^	map<long long, AsyncImage*>		mImages[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mImp	.\SDTS\SDTSRead.h	/^	SDTSModuleIteratorImp * mImp;$/;"	m	class:SDTSModuleIterator
mImp	.\Utils\XUtils.h	/^	XPointPoolImp * mImp;$/;"	m	class:XPointPool
mInBounds	.\GUI\GUI_TextTable.h	/^	int						mInBounds;$/;"	m	class:GUI_TextTable
mInBuf	.\Network\HTTPClient.h	/^	vector<char>		mInBuf;				\/\/ Incoming buffer$/;"	m	class:HTTPConnection
mInBuf	.\WEDNetwork\WED_Connection.h	/^	vector<char>	mInBuf;				\/\/ Incoming buffer$/;"	m	class:WED_Connection
mInBuf	.\WEDXPlugin\WED_XPluginClient.h	/^		vector<char>	mInBuf;				\/\/ Incoming buffer$/;"	m	class:WED_XPluginClient
mInDrag	.\GUI\GUI_Window.h	/^	int				mInDrag;$/;"	m	class:GUI_Window
mInDrag	.\UI\XWin.h	/^		int						mInDrag;			\/\/ Button being dragged or -1 if none.  This ensures we send only one down\/drag\/up sequence.$/;"	m	class:XWin
mInDragOp	.\UI\XWin.h	/^		int						mInDragOp;			\/\/ Flag if we are in a drag and drop op - since the op is closed via a callback we have to keep a flag.$/;"	m	class:XWin
mInEdit	.\WEDMap\WED_VertexTool.h	/^		int						mInEdit;$/;"	m	class:WED_VertexTool
mInInit	.\UI\XWin.h	/^		int						mInInit;			\/\/ Init protection flag to keep obj-c from calling virtual functions from ctor$/;"	m	class:XWin
mInMouseHandler	.\UI\XWin.h	/^		int						mInMouseHandler;	\/\/ Detector for re-entrancy in mouse handlers$/;"	m	class:XWin
mInPart	.\GUI\GUI_ScrollBar.h	/^		int		mInPart;$/;"	m	class:GUI_ScrollBar
mInPopup	.\UI\XWin.h	/^		int						mInPopup;			\/\/ This flag tells us we are in a popup menu, so we stash menu picks instead of dispatching them.$/;"	m	class:XWin
mIncomingLength	.\Network\HTTPClient.h	/^	int					mIncomingLength;	\/\/ How many bytes payload do we expect?$/;"	m	class:HTTPRequest
mIndex	.\GUI\GUI_Clipboard.cpp	/^	ULONG					mIndex;		\/\/ Position in our iteration$/;"	m	class:GUI_SimpleEnumFORMATETC	file:
mIndex	.\Obj\ObjPointPool.h	/^	index_type		mIndex;$/;"	m	class:ObjPointPool
mIndex	.\WEDEntities\WED_GISPolygon.cpp	/^	int					mIndex;$/;"	m	class:Bezier_Seq_Iterator	file:
mInfo	.\Utils\UIUtils.h	/^	vector<DragHandleInfo_t>	mInfo;$/;"	m	class:DragHandleSet
mInfoAdapter	.\WEDMap\WED_MapPane.h	/^	WED_ToolInfoAdapter *			mInfoAdapter;$/;"	m	class:WED_MapPane
mInfoAdapter	.\WEDTCE\WED_TCEPane.h	/^	WED_ToolInfoAdapter *	mInfoAdapter;$/;"	m	class:WED_TCEPane
mInited	.\UI\XWin.h	/^	bool mInited;$/;"	m	class:XWin
mInited	.\UI\XWinGL.h	/^	bool			mInited;$/;"	m	class:XWinGL
mInsertY	.\GUI\GUI_FormWindow.h	/^		int					mInsertY;$/;"	m	class:GUI_FormWindow
mInset	.\XESCore\MapDefs.h	/^	double						mInset;				\/\/ Largest unusable inset for this side$/;"	m	struct:GIS_halfedge_data
mInstantiated	.\XESCore\MapDefs.h	/^	bool			mInstantiated;$/;"	m	struct:GISPointFeature_t
mInstantiated	.\XESCore\MapDefs.h	/^	bool			mInstantiated;$/;"	m	struct:GISPolygonFeature_t
mInvertSort	.\WEDImportExport\WED_AptTable.h	/^	int					mInvertSort;$/;"	m	class:WED_AptTable
mInvertSort	.\WEDImportExport\WED_ICAOTable.h	/^	int					mInvertSort;$/;"	m	class:WED_ICAOTable
mInvertSort	.\WEDImportExport\WED_VerTable.h	/^	int					mInvertSort;$/;"	m	class:WED_VerTable
mIsAServer	.\Network\PCSBSocket.h	/^		bool		mIsAServer;$/;"	m	class:PCSBSocket
mIsControlClick	.\UI\XWin.h	/^		int						mIsControlClick;	\/\/ Flag if control key down on the mInDrag down click - control + button 0 = button 1$/;"	m	class:XWin
mIsDownCount	.\WEDMap\WED_Map.h	/^	int				mIsDownCount;$/;"	m	class:WED_Map
mIsDownCount	.\WEDTCE\WED_TCE.h	/^	int				mIsDownCount;$/;"	m	class:WED_TCE
mIsDownExtraCount	.\WEDMap\WED_Map.h	/^	int				mIsDownExtraCount;$/;"	m	class:WED_Map
mIsDownExtraCount	.\WEDTCE\WED_TCE.h	/^	int				mIsDownExtraCount;$/;"	m	class:WED_TCE
mIsDrag	.\RenderFarmUI\RF_SelectionTool.h	/^	bool						mIsDrag;$/;"	m	class:RF_SelectionTool
mIsEnum	.\Utils\CoverageFinder.h	/^	vector<bool>				mIsEnum;$/;"	m	class:CoverageFinder
mIsFacade	.\XPTools\ViewObj.cpp	/^	bool	mIsFacade;$/;"	m	class:XObjWin	file:
mIsImplicitMulti	.\GUI\GUI_Label.h	/^		bool				mIsImplicitMulti;$/;"	m	class:GUI_Label
mIsLit	.\WEDXPlugin\WED_XPluginMgr.h	/^   bool								mIsLit;$/;"	m	class:WED_XPluginMgr
mIsMoveVertices	.\RenderFarmUI\RF_SelectionTool.h	/^	bool						mIsMoveVertices;$/;"	m	class:RF_SelectionTool
mIsObj8	.\XPTools\ViewObj.cpp	/^	bool	mIsObj8;$/;"	m	class:XObjWin	file:
mIsOrtho	.\Utils\HLCamera.h	/^	bool		mIsOrtho;			\/\/ Are we orthographic or perspective projection?$/;"	m	class:xcam_class
mIsReady	.\WEDXPlugin\WED_XPluginClient.h	/^				int		mIsReady;$/;"	m	class:WED_XPluginClient
mIsRotate	.\WEDMap\WED_VertexTool.h	/^		int						mIsRotate;$/;"	m	class:WED_VertexTool
mIsScale	.\WEDMap\WED_VertexTool.h	/^		int						mIsScale;$/;"	m	class:WED_VertexTool
mIsSplit	.\WEDMap\WED_CreateToolBase.h	/^	vector<int>			mIsSplit;$/;"	m	class:WED_CreateToolBase
mIsSymetric	.\WEDMap\WED_VertexTool.h	/^		int						mIsSymetric;$/;"	m	class:WED_VertexTool
mIsTaxiSpin	.\WEDMap\WED_VertexTool.h	/^		int						mIsTaxiSpin;$/;"	m	class:WED_VertexTool
mIsToolClick	.\WEDTCE\WED_TCE.h	/^	int				mIsToolClick;$/;"	m	class:WED_TCE
mItems	.\GUI\GUI_PopupButton.h	/^		vector<string>		mItems;$/;"	m	class:GUI_PopupButton
mItems	.\GUI\GUI_TabControl.h	/^		vector<string>		mItems;$/;"	m	class:GUI_TabControl
mItems	.\WEDCore\WED_PropertyHelper.h	/^	vector<WED_PropertyItem *>		mItems;$/;"	m	class:WED_PropertyHelper
mItems	.\XPTools\AddObjects.cpp	/^		NodeVector	mItems;$/;"	m	class:GroupNode	file:
mItems	.\XPTools\AddObjects.cpp	/^		NodeVector	mItems;$/;"	m	class:SwitchNode	file:
mKillAlpha	.\WEDTCE\WED_TCE.h	/^		bool			mKillAlpha;$/;"	m	class:WED_TCE
mKind	.\ObjEdit\OE_Preview.h	/^	int		mKind;$/;"	m	class:OE_Preview
mLOD	.\XPTools\ViewObj.cpp	/^	int		mLOD;$/;"	m	class:XObjWin	file:
mLabel	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Label *				mLabel;$/;"	m	class:WED_GatewayImportDialog	file:
mLabel	.\WEDWindows\WED_FilterBar.h	/^	string				mLabel;$/;"	m	class:WED_FilterBar
mLastDragX	.\GUI\GUI_Window.h	/^	int				mLastDragX;$/;"	m	class:GUI_Window
mLastDragY	.\GUI\GUI_Window.h	/^	int				mLastDragY;$/;"	m	class:GUI_Window
mLastOp	.\GUI\GUI_TextTable.h	/^	GUI_DragOperation		mLastOp;$/;"	m	class:GUI_TextTable
mLastPt	.\WEDMap\WED_CreateToolBase.h	/^	Point2	mLastPt;$/;"	m	class:WED_CreateToolBase
mLastTime	.\WEDMap\WED_CreateToolBase.h	/^	float	mLastTime;$/;"	m	class:WED_CreateToolBase
mLastX	.\GUI\GUI_TextTable.h	/^	int								mLastX;$/;"	m	class:GUI_TextTableHeader
mLastX	.\GUI\GUI_TextTable.h	/^	int						mLastX;$/;"	m	class:GUI_TextTable
mLastX	.\UI\XWin.h	/^		int						mLastX;				\/\/ Last known mouse event for when we have to fake an event.$/;"	m	class:XWin
mLastX	.\Utils\UIUtils.h	/^	double						mLastX;			\/\/ Mouse coords$/;"	m	class:DragHandleSet
mLastX	.\XPTools\ViewObj.cpp	/^	int		mLastX;$/;"	m	class:XObjWin	file:
mLastY	.\GUI\GUI_TextTable.h	/^	int								mLastY;$/;"	m	class:GUI_TextTableSide
mLastY	.\UI\XWin.h	/^		int						mLastY;$/;"	m	class:XWin
mLastY	.\Utils\UIUtils.h	/^	double						mLastY;$/;"	m	class:DragHandleSet
mLastY	.\XPTools\ViewObj.cpp	/^	int		mLastY;$/;"	m	class:XObjWin	file:
mLat	.\WEDXPlugin\WED_XPluginEntity.h	/^    double				mLat;$/;"	m	class:WED_XPluginEntity
mLat	.\XPTools\AddObjects.cpp	/^		DoubleRange	mLat;$/;"	m	class:ObjectNode	file:
mLatCenter	.\WEDMap\WED_MapZoomerNew.h	/^	double	mLatCenter;$/;"	m	class:WED_MapZoomerNew
mLayer	.\Network\TerraServer.h	/^	int				mLayer;$/;"	m	class:AsyncImageLocator
mLayer	.\WEDEntities\WED_GISPolygon.cpp	/^	GISLayer_t			mLayer;$/;"	m	class:Bezier_Seq_Iterator	file:
mLayer	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntText			mLayer;$/;"	m	class:WED_CreateEdgeTool
mLayers	.\WEDMap\WED_Map.h	/^	vector<WED_MapLayer *>			mLayers;$/;"	m	class:WED_Map
mLayers	.\WEDMap\WED_MapPane.h	/^	vector<WED_MapLayer *>	mLayers;$/;"	m	class:WED_MapPane
mLayers	.\WEDTCE\WED_TCE.h	/^	vector<WED_TCELayer *>			mLayers;$/;"	m	class:WED_TCE
mLayers	.\WEDTCE\WED_TCEPane.h	/^	vector<WED_TCELayer *>	mLayers;$/;"	m	class:WED_TCEPane
mLeft	.\Utils\HLCamera.h	/^	GLdouble	mLeft[3];			\/\/ Plane equations for the four slanted sides of the view$/;"	m	class:xcam_class
mLen	.\DSF\DSFPointPool.h	/^	int		mLen;$/;"	m	class:DSFTuple
mLen	.\DSF\dsflib_013005\DSFPointPool.h	/^	int		mLen;$/;"	m	class:DSFTuple
mLength	.\Utils\BWImage.h	/^	int				mLength;$/;"	m	struct:StRestoreChunk
mLibSplitter	.\WEDWindows\WED_DocumentWindow.h	/^	GUI_Splitter *				mLibSplitter;$/;"	m	class:WED_DocumentWindow
mLibrary	.\UI\FontMgr.h	/^	FT_Library		mLibrary;$/;"	m	class:FontMgr
mLibrary	.\WEDCore\WED_ResourceMgr.h	/^	WED_LibraryMgr *			mLibrary;$/;"	m	class:WED_ResourceMgr
mLibrary	.\WEDLibrary\WED_LibraryListAdapter.h	/^		WED_LibraryMgr *		mLibrary;$/;"	m	class:WED_LibraryListAdapter
mLibrary	.\WEDWindows\WED_FilterBar.h	/^	WED_LibraryMgr		*mLibrary;$/;"	m	class:WED_FilterBar
mLibraryList	.\WEDLibrary\WED_LibraryPane.h	/^	WED_LibraryListAdapter	mLibraryList;$/;"	m	class:WED_LibraryPane
mLibraryMgr	.\WEDCore\WED_Document.h	/^	WED_LibraryMgr *	mLibraryMgr;$/;"	m	class:WED_Document
mLibraryStr	.\WEDLibrary\WED_LibraryListAdapter.h	/^		string					mLibraryStr;$/;"	m	class:WED_LibraryListAdapter
mLighting	.\XPTools\ViewObj.cpp	/^	bool	mLighting;$/;"	m	class:XObjWin	file:
mLinSocket	.\Network\PCSBSocket.h	/^		int		mLinSocket;$/;"	m	class:PCSBSocket
mLinTool	.\WEDMap\WED_MapPane.h	/^	WED_CreatePolygonTool * mLinTool;$/;"	m	class:WED_MapPane
mLine	.\WEDCore\WED_Errors.h	/^	int					mLine;$/;"	m	class:wed_error_exception
mLine	.\WEDCore\WED_UndoLayer.h	/^	int						mLine;$/;"	m	class:WED_UndoLayer
mListeners	.\GUI\GUI_Broadcaster.h	/^	set<GUI_Listener *>		mListeners;$/;"	m	class:GUI_Broadcaster
mLit	.\XPTools\ViewObj.cpp	/^	bool	mLit;$/;"	m	class:XObjWin	file:
mLiteLevelRef	.\WEDXPlugin\WED_XPluginMgr.h	/^   XPLMDataRef						mLiteLevelRef;$/;"	m	class:WED_XPluginMgr
mLiveEdit	.\GUI\GUI_TextTable.h	/^	int						mLiveEdit;$/;"	m	class:GUI_TextTable
mLocalStr	.\WEDLibrary\WED_LibraryListAdapter.h	/^		string					mLocalStr;$/;"	m	class:WED_LibraryListAdapter
mLocation	.\Utils\HLCamera.h	/^	GLdouble	mLocation[4];		\/\/ For all cameras - the camera's location.  Need 4th variable ("W" param) for proper OGL transforms!$/;"	m	class:xcam_class
mLocation	.\XESCore\MapDefs.h	/^	Point2			mLocation;$/;"	m	struct:GISObjPlacement_t
mLocation	.\XESCore\MapDefs.h	/^	Point_2			mLocation;$/;"	m	struct:GISPointFeature_t
mLocationStale	.\Utils\HLCamera.h	/^	bool		mLocationStale;$/;"	m	class:xcam_class
mLocator	.\RenderFarmUI\RF_TerraTool.h	/^	AsyncImageLocator *				mLocator;$/;"	m	class:RF_TerraTool
mLocator	.\WEDMap\WED_TerraserverLayer.h	/^	AsyncImageLocator *						mLocator[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mLocatorCon	.\Network\TerraServer.h	/^	HTTPConnection *				mLocatorCon;$/;"	m	class:AsyncConnectionPool
mLock	.\WEDWindows\WED_PackageListAdapter.h	/^	set<string>		mLock;$/;"	m	class:WED_PackageListAdapter
mLocked	.\GUI\GUI_Table.h	/^			int						mLocked;$/;"	m	class:GUI_Header
mLocked	.\GUI\GUI_Table.h	/^			int						mLocked;$/;"	m	class:GUI_Side
mLocked	.\GUI\GUI_Table.h	/^			int						mLocked;$/;"	m	class:GUI_Table
mLogicalBounds	.\GUI\GUI_TextField.h	/^		float				mLogicalBounds[4];$/;"	m	class:GUI_TextField
mLogicalBounds	.\RenderFarmUI\RF_MapZoomer.h	/^	double	mLogicalBounds[4];$/;"	m	class:RF_MapZoomer
mLogicalBounds	.\WEDMap\WED_MapZoomerNew.h	/^	double	mLogicalBounds[4];$/;"	m	class:WED_MapZoomerNew
mLon	.\WEDXPlugin\WED_XPluginEntity.h	/^    double				mLon;$/;"	m	class:WED_XPluginEntity
mLon	.\XPTools\AddObjects.cpp	/^		DoubleRange	mLon;$/;"	m	class:ObjectNode	file:
mLonCenter	.\WEDMap\WED_MapZoomerNew.h	/^	double	mLonCenter;$/;"	m	class:WED_MapZoomerNew
mLonCenterCOS	.\WEDMap\WED_MapZoomerNew.h	/^	double	mLonCenterCOS;$/;"	m	class:WED_MapZoomerNew
mMainSplitter	.\WEDWindows\WED_DocumentWindow.h	/^	GUI_Splitter *				mMainSplitter;$/;"	m	class:WED_DocumentWindow
mMainSplitter2	.\WEDWindows\WED_DocumentWindow.h	/^	GUI_Splitter *				mMainSplitter2;$/;"	m	class:WED_DocumentWindow
mMakeIndex	.\WEDCore\WED_Properties.h	/^	sql_init		mMakeIndex;$/;"	m	class:WED_Properties
mMakeTable	.\WEDCore\WED_Properties.h	/^	sql_init		mMakeTable;$/;"	m	class:WED_Properties
mMap	.\Network\XMLObject.h	/^	ObjectMap		mMap;$/;"	m	class:XMLObject
mMap	.\WEDLibrary\WED_LibraryListAdapter.h	/^		WED_MapPane				* mMap;$/;"	m	class:WED_LibraryListAdapter
mMap	.\WEDMap\WED_MapPane.h	/^	WED_Map *				mMap;$/;"	m	class:WED_MapPane
mMapPane	.\WEDImportExport\WED_AptImportDialog.h	/^	WED_MapPane *			mMapPane;$/;"	m	class:WED_AptImportDialog
mMapPane	.\WEDImportExport\WED_GatewayImport.cpp	/^	WED_MapPane *		mMapPane;$/;"	m	class:WED_GatewayImportDialog	file:
mMapPane	.\WEDWindows\WED_DocumentWindow.h	/^	WED_MapPane *				mMapPane;$/;"	m	class:WED_DocumentWindow
mMargins	.\GUI\GUI_Label.h	/^		float				mMargins[4];$/;"	m	class:GUI_Label
mMargins	.\GUI\GUI_TextField.h	/^		float				mMargins[4];$/;"	m	class:GUI_TextField
mMark	.\XESCore\MapDefs.h	/^	bool						mMark;				\/\/ Temporary, for algorithms$/;"	m	struct:GIS_halfedge_data
mMarkings	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropIntEnumSet				mMarkings;$/;"	m	class:WED_CreatePolygonTool
mMarkingsLights	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropIntEnumSetFilter		mMarkingsLights;$/;"	m	class:WED_CreatePolygonTool
mMarkingsLines	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropIntEnumSetFilter		mMarkingsLines;$/;"	m	class:WED_CreatePolygonTool
mMax	.\DSF\DSFPointPool.h	/^	DSFTuple			mMax;$/;"	m	class:DSF32BitPointPool
mMax	.\DSF\DSFPointPool.h	/^	DSFTuple			mMax;$/;"	m	class:DSFContiguousPointPool
mMax	.\DSF\DSFPointPool.h	/^	DSFTuple			mMax;$/;"	m	class:DSFSharedPointPool
mMax	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple			mMax;$/;"	m	class:DSF32BitPointPool
mMax	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple			mMax;$/;"	m	class:DSFContiguousPointPool
mMax	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple			mMax;$/;"	m	class:DSFSharedPointPool
mMax	.\GUI\GUI_Control.h	/^		float		mMax;$/;"	m	class:GUI_Control
mMaxCons	.\Network\TerraServer.h	/^	int								mMaxCons;$/;"	m	class:AsyncConnectionPool
mMaxDepths	.\Network\TerraServer.h	/^	int								mMaxDepths;$/;"	m	class:AsyncConnectionPool
mMaxPts	.\WEDMap\WED_CreateToolBase.h	/^	int		mMaxPts;$/;"	m	class:WED_CreateToolBase
mMeasureOnOpen	.\XPTools\ViewObj.cpp	/^	bool	mMeasureOnOpen;$/;"	m	class:XObjWin	file:
mMenus	.\GUI\GUI_Application.h	/^	QList<GUI_QtMenu*>  mMenus;$/;"	m	class:GUI_Application
mMenus	.\GUI\GUI_Application.h	/^	set<GUI_Menu>		mMenus;$/;"	m	class:GUI_Application
mMgr	.\Utils\UIUtils.h	/^	DragHandleManager *			mMgr;$/;"	m	class:DragHandleSet
mMgr	.\WEDXPlugin\WED_XPluginClient.h	/^	WED_XPluginMgr *	mMgr;$/;"	m	class:WED_XPluginClient
mMgrRef	.\WEDXPlugin\WED_XPluginCamera.h	/^    WED_XPluginMgr *     mMgrRef;$/;"	m	class:WED_XPluginCamera
mMgrRef	.\WEDXPlugin\WED_XPluginEntity.h	/^    WED_XPluginMgr * 	mMgrRef;$/;"	m	class:WED_XPluginEntity
mMin	.\DSF\DSFPointPool.h	/^	DSFTuple			mMin;$/;"	m	class:DSF32BitPointPool
mMin	.\DSF\DSFPointPool.h	/^	DSFTuple			mMin;$/;"	m	class:DSFContiguousPointPool
mMin	.\DSF\DSFPointPool.h	/^	DSFTuple			mMin;$/;"	m	class:DSFSharedPointPool
mMin	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple			mMin;$/;"	m	class:DSF32BitPointPool
mMin	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple			mMin;$/;"	m	class:DSFContiguousPointPool
mMin	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple			mMin;$/;"	m	class:DSFSharedPointPool
mMin	.\GUI\GUI_Control.h	/^		float		mMin;$/;"	m	class:GUI_Control
mMinPts	.\WEDMap\WED_CreateToolBase.h	/^	int		mMinPts;$/;"	m	class:WED_CreateToolBase
mModelView	.\Utils\HLCamera.h	/^	GLdouble	mModelView[16];		\/\/ Model-view matrix for this camera.$/;"	m	class:xcam_class
mModifiers	.\GUI\GUI_TextTable.h	/^	GUI_KeyFlags			mModifiers;$/;"	m	class:GUI_TextTable
mModifiers	.\RenderFarmUI\RF_SelectionTool.h	/^	GUI_KeyFlags				mModifiers;$/;"	m	class:RF_SelectionTool
mModuleMap	.\SDTS\SDTSRead.h	/^		hash_map<string, pair<string, bool> >	mModuleMap;		\/\/ Name, external?$/;"	m	class:SDTSDirectory
mMouse	.\UI\XWin.h	/^		POINT			mMouse;$/;"	m	class:XWin
mMouse	.\UI\XWin.h	/^	POINT	mMouse;$/;"	m	class:XWin
mMouseFocusButton	.\GUI\GUI_Window.h	/^	int				mMouseFocusButton;	\/\/ Remembered for a drag-and-drop$/;"	m	class:GUI_Window
mMouseFocusPane	.\GUI\GUI_Window.h	/^	GUI_Pane *		mMouseFocusPane[BUTTON_DIM];$/;"	m	class:GUI_Window
mMouseStartX	.\RenderFarmUI\RF_SelectionTool.h	/^	int							mMouseStartX;$/;"	m	class:RF_SelectionTool
mMouseStartY	.\RenderFarmUI\RF_SelectionTool.h	/^	int							mMouseStartY;$/;"	m	class:RF_SelectionTool
mMouseX	.\ObjEdit\OE_CubeDeformer.h	/^	int			mMouseX;$/;"	m	class:OE_CubeDeformer
mMouseX	.\ObjEdit\OE_TexEdWindow.h	/^		int			mMouseX;		\/\/ The original mouse coordinates when drag started$/;"	m	class:OE_DirectEdPane
mMouseX	.\ObjEdit\OE_TexEdWindow.h	/^	float	mMouseX;		\/\/ Start of mouse dragging$/;"	m	class:OE_PatchEdPane
mMouseX	.\RenderFarmUI\RF_SelectionTool.h	/^	int							mMouseX;$/;"	m	class:RF_SelectionTool
mMouseY	.\ObjEdit\OE_CubeDeformer.h	/^	int			mMouseY;$/;"	m	class:OE_CubeDeformer
mMouseY	.\ObjEdit\OE_TexEdWindow.h	/^		int			mMouseY;$/;"	m	class:OE_DirectEdPane
mMouseY	.\ObjEdit\OE_TexEdWindow.h	/^	float	mMouseY;$/;"	m	class:OE_PatchEdPane
mMouseY	.\RenderFarmUI\RF_SelectionTool.h	/^	int							mMouseY;$/;"	m	class:RF_SelectionTool
mMoveLat	.\RenderFarmUI\RF_SelectionTool.h	/^	double						mMoveLat;$/;"	m	class:RF_SelectionTool
mMoveLon	.\RenderFarmUI\RF_SelectionTool.h	/^	double						mMoveLon;$/;"	m	class:RF_SelectionTool
mMovedOff	.\ObjEdit\OE_Preview.h	/^	bool					mMovedOff;$/;"	m	class:OE_Preview
mMsg	.\GUI\GUI_Control.h	/^		intptr_t	mMsg;$/;"	m	class:GUI_Control
mMsg	.\GUI\GUI_TextField.h	/^		intptr_t			mMsg, mParam;$/;"	m	class:GUI_TextField
mMsg	.\WEDCore\WED_Errors.h	/^	char				mMsg[1024];$/;"	m	class:wed_error_exception
mMsg	.\WEDWindows\WED_FilterBar.h	/^	intptr_t			mMsg;$/;"	m	class:WED_FilterBar
mMustClose	.\WEDMap\WED_CreateToolBase.h	/^	int		mMustClose;$/;"	m	class:WED_CreateToolBase
mMustCurve	.\WEDMap\WED_CreateToolBase.h	/^	int		mMustCurve;$/;"	m	class:WED_CreateToolBase
mNWAdapter	.\WEDCore\WED_Archive.h	/^	WED_NWLinkAdapter *	mNWAdapter;$/;"	m	class:WED_Archive
mNWInfoLayer	.\WEDMap\WED_MapPane.h	/^	WED_NWInfoLayer *		mNWInfoLayer;$/;"	m	class:WED_MapPane
mNWLink	.\WEDCore\WED_Document.h	/^	WED_NWLinkAdapter *	mNWLink;$/;"	m	class:WED_Document
mNWLink	.\WEDNetwork\WED_NWInfoLayer.h	/^    WED_NWLinkAdapter* mNWLink;$/;"	m	class:WED_NWInfoLayer
mName	.\Utils\PerfUtils.h	/^	const char *		mName;$/;"	m	class:PerfTimer
mName	.\Utils\PerfUtils.h	/^	const char *		mName;$/;"	m	class:StElapsedTime
mName	.\WEDCore\WED_UndoLayer.h	/^	string					mName;$/;"	m	class:WED_UndoLayer
mName	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropStringText		mName;$/;"	m	class:WED_CreateEdgeTool
mName	.\WEDXPlugin\WED_XPluginEntity.h	/^    string 			 	mName;$/;"	m	class:WED_XPluginEntity
mNames	.\Utils\MemFileUtils.cpp	/^	vector<string>		mNames;			\/\/ Per file - filename$/;"	m	struct:MFFileSet	file:
mNear	.\Utils\HLCamera.h	/^	GLdouble	mNear;				\/\/ The near and far clipping plane, in Z coordinates.$/;"	m	class:xcam_class
mNeedRecalcDEM	.\RenderFarmUI\RF_MapView.h	/^	bool					mNeedRecalcDEM;$/;"	m	class:RF_MapView
mNeedRecalcMapFull	.\RenderFarmUI\RF_MapView.h	/^	bool					mNeedRecalcMapFull;$/;"	m	class:RF_MapView
mNeedRecalcMapMeta	.\RenderFarmUI\RF_MapView.h	/^	bool					mNeedRecalcMapMeta;$/;"	m	class:RF_MapView
mNeedRecalcMeshHi	.\RenderFarmUI\RF_MapView.h	/^	bool					mNeedRecalcMeshHi;$/;"	m	class:RF_MapView
mNeedRecalcMeshHiAlpha	.\RenderFarmUI\RF_MapView.h	/^	bool					mNeedRecalcMeshHiAlpha;$/;"	m	class:RF_MapView
mNeedRecalcRelief	.\RenderFarmUI\RF_MapView.h	/^	bool					mNeedRecalcRelief;$/;"	m	class:RF_MapView
mNeighborBurned	.\XESCore\MapDefs.h	/^	bool mNeighborBurned;$/;"	m	struct:GIS_vertex_data
mNeighborNotBurned	.\XESCore\MapDefs.h	/^	bool mNeighborNotBurned;$/;"	m	struct:GIS_vertex_data
mNew	.\WEDWindows\WED_StartWindow.h	/^	GUI_Button *		mNew;$/;"	m	class:WED_StartWindow
mNewSplitPoint	.\WEDMap\WED_VertexTool.h	/^		IGISPoint *				mNewSplitPoint;		\/\/ When we option-click to get a split point...this is the newly born point.$/;"	m	class:WED_VertexTool
mNextButton	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Button *			mNextButton;$/;"	m	class:WED_GatewayImportDialog	file:
mNextRecord	.\VPF\VPFTable.h	/^	const char *	mNextRecord;		\/\/ Base addr of next record, defines our length$/;"	m	class:VPFTableIterator
mNoData	.\XESCore\DEMIO.h	/^	float			mNoData;				\/\/ No-data value, usually -9999 or -32768$/;"	m	struct:DEMSpec
mNorth	.\DSF\DSFLibWrite.cpp	/^	double	mNorth;$/;"	m	class:DSFFileWriterImp	file:
mNorth	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	double	mNorth;$/;"	m	class:DSFFileWriterImp	file:
mNorth	.\Network\TerraServer.h	/^	double			mNorth;$/;"	m	class:AsyncImageLocator
mNorth	.\XESCore\DEMDefs.h	/^	double	mNorth;$/;"	m	struct:DEMGeo
mNorth	.\XESCore\DEMDefs.h	/^	double	mNorth;$/;"	m	struct:DEMMask
mNorth	.\XESCore\DEMIO.h	/^	double			mNorth;					$/;"	m	struct:DEMSpec
mOK	.\GUI\GUI_FormWindow.h	/^		GUI_Pane *			mOK;$/;"	m	class:GUI_FormWindow
mObj	.\WEDCore\WED_ResourceMgr.h	/^	map<string,XObj8 *>			mObj;$/;"	m	class:WED_ResourceMgr
mObj	.\XPTools\ViewObj.cpp	/^	XObj			mObj;$/;"	m	class:XObjWin	file:
mObj8	.\XPTools\ViewObj.cpp	/^	XObj8			mObj8;$/;"	m	class:XObjWin	file:
mObjCache	.\WEDNetwork\WED_NWLinkAdapter.h	/^	map<WED_Persistent *,int>	 mObjCache;$/;"	m	class:WED_NWLinkAdapter
mObjDB	.\XPTools\ViewObj.cpp	/^	map<string, XObj>	mObjDB;$/;"	m	class:XObjWin	file:
mObjDensity	.\WEDMap\WED_PreviewLayer.h	/^	int								mObjDensity;$/;"	m	class:WED_PreviewLayer
mObjInst	.\XPTools\ViewObj.cpp	/^	vector<ObjPlacement_t>	mObjInst;$/;"	m	class:XObjWin	file:
mObjRef	.\WEDXPlugin\WED_XPluginObject.h	/^		XPLMObjectRef	mObjRef;$/;"	m	class:WED_XPluginObject
mObjTool	.\WEDMap\WED_MapPane.h	/^	WED_CreatePointTool *	mObjTool;$/;"	m	class:WED_MapPane
mObject	.\GUI\GUI_Clipboard.h	/^	IDataObject *	mObject;$/;"	m	class:GUI_OLE_Adapter
mObject	.\GUI\GUI_Clipboard.h	/^	void *		mObject;$/;"	m	class:GUI_DragData_Adapter
mObject	.\GUI\GUI_Clipboard.h	/^	void *		mObject;$/;"	m	class:GUI_DragMgr_Adapter
mObject	.\XPTools\AddObjects.cpp	/^		string		mObject;$/;"	m	class:ObjectNode	file:
mObjects	.\WEDCore\WED_Archive.h	/^	ObjectMap		mObjects;		\/\/ Our objects!$/;"	m	class:WED_Archive
mObjects	.\WEDCore\WED_UndoLayer.h	/^	ObjInfoMap				mObjects;$/;"	m	class:WED_UndoLayer
mObjs	.\XESCore\MapDefs.h	/^	GISObjPlacementVector		mObjs;$/;"	m	class:GIS_face_data
mOffset	.\DSF\DSFPointPool.h	/^		DSFTuple					mOffset;$/;"	m	struct:DSFContiguousPointPool::ContiguousSubPool
mOffset	.\DSF\DSFPointPool.h	/^		DSFTuple					mOffset;$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mOffset	.\DSF\DSFPointPool.h	/^	DSFTuple					mOffset;$/;"	m	class:DSF32BitPointPool
mOffset	.\DSF\dsflib_013005\DSFPointPool.h	/^		DSFTuple					mOffset;$/;"	m	struct:DSFContiguousPointPool::ContiguousSubPool
mOffset	.\DSF\dsflib_013005\DSFPointPool.h	/^		DSFTuple					mOffset;$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mOffset	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple					mOffset;$/;"	m	class:DSF32BitPointPool
mOldX	.\RenderFarmUI\RF_MapView.h	/^	int						mOldX, mOldY;$/;"	m	class:RF_MapView
mOldY	.\RenderFarmUI\RF_MapView.h	/^	int						mOldX, mOldY;$/;"	m	class:RF_MapView
mOnDisk	.\WEDCore\WED_Document.h	/^	bool				mOnDisk;$/;"	m	class:WED_Document
mOneway	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropBoolText		mOneway;$/;"	m	class:WED_CreateEdgeTool
mOpCount	.\WEDCore\WED_Archive.h	/^	int				mOpCount;$/;"	m	class:WED_Archive
mOpen	.\WEDLibrary\WED_LibraryListAdapter.h	/^		hash_map<string,int>	mOpen;$/;"	m	class:WED_LibraryListAdapter
mOpen	.\WEDProperties\WED_PropertyTable.h	/^	hash_map<int,int>			mOpen;$/;"	m	class:WED_PropertyTable
mOpen	.\WEDWindows\WED_StartWindow.h	/^	GUI_Button *		mOpen;$/;"	m	class:WED_StartWindow
mOriginal	.\ObjEdit\OE_TexEdWindow.h	/^		XObj		mOriginal;$/;"	m	class:OE_DirectEdPane
mOriginalSelection	.\ObjEdit\OE_Preview.h	/^	set<int>				mOriginalSelection;$/;"	m	class:OE_Preview
mOrthoBottom	.\Utils\HLCamera.h	/^	GLdouble	mOrthoBottom;$/;"	m	class:xcam_class
mOrthoLeft	.\Utils\HLCamera.h	/^	GLdouble	mOrthoLeft;			\/\/ The dimensions of the sides of the camera (in eye coordinates).$/;"	m	class:xcam_class
mOrthoRight	.\Utils\HLCamera.h	/^	GLdouble	mOrthoRight;$/;"	m	class:xcam_class
mOrthoTop	.\Utils\HLCamera.h	/^	GLdouble	mOrthoTop;			\/\/ For orthographic cameras only:$/;"	m	class:xcam_class
mOutBuf	.\Network\HTTPClient.h	/^	vector<char>		mOutBuf;			\/\/ Outgoing buffer$/;"	m	class:HTTPConnection
mOutBuf	.\WEDNetwork\WED_Connection.h	/^	vector<char>	mOutBuf;			\/\/ Outgoing buffer$/;"	m	class:WED_Connection
mOutBuf	.\WEDXPlugin\WED_XPluginClient.h	/^		vector<char>	mOutBuf;			\/\/ Outgoing buffer$/;"	m	class:WED_XPluginClient
mP1	.\WEDCore\WED_FastBuffer.h	/^			intptr_t					mP1, mP2;$/;"	m	class:WED_FastBuffer
mP2	.\WEDCore\WED_FastBuffer.h	/^			intptr_t					mP1, mP2;$/;"	m	class:WED_FastBuffer
mPackArea	.\GUI\GUI_Packer.h	/^	int		mPackArea[4];$/;"	m	class:GUI_Packer
mPackage	.\WEDCore\WED_Document.h	/^	string				mPackage;$/;"	m	class:WED_Document
mPackage	.\WEDCore\WED_TexMgr.h	/^	string	mPackage;$/;"	m	class:WED_TexMgr
mPackage	.\WEDWindows\WED_PackageStatusPane.h	/^	WED_Package * mPackage;$/;"	m	class:WED_PackageStatusPane
mPackage	.\WEDWindows\WED_PackageWindow.h	/^	WED_Package *		mPackage;$/;"	m	class:WED_PackageWindow
mPackage	.\WEDXPlugin\WED_XPluginMgr.h	/^   string                           mPackage;$/;"	m	class:WED_XPluginMgr
mPackageBase	.\WEDCore\WED_Package.h	/^	string			mPackageBase;$/;"	m	class:WED_Package
mPackageList	.\WEDWindows\WED_StartWindow.h	/^	WED_PackageListAdapter *		mPackageList;$/;"	m	class:WED_StartWindow
mPacker	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Packer *			mPacker;$/;"	m	class:WED_GatewayImportDialog	file:
mPageSize	.\GUI\GUI_Control.h	/^		float		mPageSize;$/;"	m	class:GUI_Control
mPane	.\ObjEdit\OE_PatchList.h	/^		OE_PatchTable *		mPane;$/;"	m	class:OE_PatchList
mPane	.\ObjEdit\OE_TexEdWindow.h	/^		OE_TexEdPane *		mPane;$/;"	m	class:OE_TexEdWindow
mPanicHandler	.\WEDCore\WED_UndoMgr.h	/^	WED_UndoFatalErrorHandler *	mPanicHandler;$/;"	m	class:WED_UndoMgr
mParID	.\WEDImportExport\WED_GatewayExport.cpp	/^	string					mParID;$/;"	m	class:WED_GatewayExportDialog	file:
mParam	.\GUI\GUI_Control.h	/^		intptr_t	mParam;$/;"	m	class:GUI_Control
mParam	.\GUI\GUI_TextField.h	/^		intptr_t			mMsg, mParam;$/;"	m	class:GUI_TextField
mParam	.\WEDWindows\WED_FilterBar.h	/^	intptr_t			mParam;$/;"	m	class:WED_FilterBar
mParam	.\XESCore\MapDefs.h	/^	unsigned short		mParam;$/;"	m	struct:GISPolyObjPlacement_t
mParams	.\XESCore\MapDefs.h	/^	GISParamMap					mParams;$/;"	m	class:GIS_face_data
mParams	.\XESCore\MapDefs.h	/^	GISParamMap					mParams;$/;"	m	struct:GIS_halfedge_data
mParams	.\XESCore\MapDefs.h	/^	GISParamMap		mParams;$/;"	m	struct:GISAreaFeature_t
mParams	.\XESCore\MapDefs.h	/^	GISParamMap		mParams;$/;"	m	struct:GISPointFeature_t
mParams	.\XESCore\MapDefs.h	/^	GISParamMap		mParams;$/;"	m	struct:GISPolygonFeature_t
mParent	.\GUI\GUI_Pane.h	/^		GUI_Pane *			mParent;$/;"	m	class:GUI_Pane
mParent	.\GUI\GUI_TextTable.h	/^	GUI_Table *				mParent;$/;"	m	class:GUI_TextTable
mParent	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropertyHelper *	mParent;$/;"	m	class:WED_PropertyItem
mParts	.\GUI\GUI_FormWindow.h	/^		vector<GUI_Pane *>	mParts;$/;"	m	class:GUI_FormWindow
mPasswordChar	.\GUI\GUI_TextField.h	/^		char				mPasswordChar;$/;"	m	class:GUI_TextField
mPath	.\Utils\MemFileUtils.cpp	/^	string				mPath;			\/\/ Our path$/;"	m	struct:MFFileSet	file:
mPath	.\WEDImportExport\WED_AptImportDialog.h	/^	string			mPath;$/;"	m	class:WED_AptImportDialog
mPavement	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropIntEnum					mPavement;$/;"	m	class:WED_CreatePolygonTool
mPavementAlpha	.\WEDMap\WED_PreviewLayer.h	/^	float							mPavementAlpha;$/;"	m	class:WED_PreviewLayer
mPayload	.\Network\HTTPClient.h	/^	vector<char>		mPayload;			\/\/ If not saving to a file, this is where our data shows up!$/;"	m	class:HTTPRequest
mPerspective	.\Utils\HLCamera.h	/^	GLdouble	mPerspective[16];	\/\/ Projection matrix for this camera.$/;"	m	class:xcam_class
mPhase	.\WEDImportExport\WED_GatewayExport.cpp	/^	int						mPhase;$/;"	m	class:WED_GatewayExportDialog	file:
mPhase	.\WEDImportExport\WED_GatewayImport.cpp	/^	int					mPhase;\/\/Our simple stage counter for our simple fsm$/;"	m	class:WED_GatewayImportDialog	file:
mPixel2DegLat	.\WEDMap\WED_MapZoomerNew.h	/^	double	mPixel2DegLat;$/;"	m	class:WED_MapZoomerNew
mPixels	.\RenderFarmUI\RF_MapZoomer.h	/^	double	mPixels[4];$/;"	m	class:RF_MapZoomer
mPixels	.\WEDMap\WED_MapZoomerNew.h	/^	double	mPixels[4];$/;"	m	class:WED_MapZoomerNew
mPkgName	.\WEDNetwork\WED_Server.h	/^	string              mPkgName;$/;"	m	class:WED_Server
mPlatform	.\XESCore\SimpleIO.h	/^	PlatformType	mPlatform;$/;"	m	class:FileReader
mPlatform	.\XESCore\SimpleIO.h	/^	PlatformType	mPlatform;$/;"	m	class:FileWriter
mPlatform	.\XESCore\SimpleIO.h	/^	PlatformType	mPlatform;$/;"	m	class:MemFileReader
mPlatform	.\XESCore\SimpleIO.h	/^	PlatformType	mPlatform;$/;"	m	class:WriterBuffer
mPlatform	.\XESCore\SimpleIO.h	/^	PlatformType	mPlatform;$/;"	m	class:ZipFileWriter
mPointFeatureSelection	.\RenderFarmUI\RF_SelectionTool.h	/^	set<PointFeatureSelection>	mPointFeatureSelection;$/;"	m	class:RF_SelectionTool
mPointFeatures	.\XESCore\MapDefs.h	/^	GISPointFeatureVector		mPointFeatures;$/;"	m	class:GIS_face_data
mPoints	.\DSF\DSFPointPool.h	/^		DSFTupleVector				mPoints;			\/\/ These are our points$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mPoints	.\DSF\DSFPointPool.h	/^		DSFTupleVector			mPoints;$/;"	m	struct:DSFContiguousPointPool::ContiguousSubPool
mPoints	.\DSF\DSFPointPool.h	/^	DSFTupleVector				mPoints;			\/\/ These are our points$/;"	m	class:DSF32BitPointPool
mPoints	.\DSF\dsflib_013005\DSFPointPool.h	/^		DSFTupleVector			mPoints;			\/\/ These are our points$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mPoints	.\DSF\dsflib_013005\DSFPointPool.h	/^		DSFTupleVector			mPoints;$/;"	m	struct:DSFContiguousPointPool::ContiguousSubPool
mPoints	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTupleVector				mPoints;			\/\/ These are our points$/;"	m	class:DSF32BitPointPool
mPointsIndex	.\DSF\DSFPointPool.h	/^		hash_map<DSFTuple, int>		mPointsIndex;		\/\/ This is used to see if we already have a point.$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mPointsIndex	.\DSF\DSFPointPool.h	/^	hash_map<DSFTuple, int>		mPointsIndex;		\/\/ This is used to see if we already have a point.$/;"	m	class:DSF32BitPointPool
mPointsIndex	.\DSF\dsflib_013005\DSFPointPool.h	/^		map<DSFTuple, int>			mPointsIndex;		\/\/ This is used to see if we already have a point.$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mPointsIndex	.\DSF\dsflib_013005\DSFPointPool.h	/^	map<DSFTuple, int>			mPointsIndex;		\/\/ This is used to see if we already have a point.$/;"	m	class:DSF32BitPointPool
mPol	.\WEDCore\WED_ResourceMgr.h	/^	map<string,pol_info_t>		mPol;$/;"	m	class:WED_ResourceMgr
mPolTool	.\WEDMap\WED_MapPane.h	/^	WED_CreatePolygonTool * mPolTool;$/;"	m	class:WED_MapPane
mPolyObjs	.\XESCore\MapDefs.h	/^	GISPolyObjPlacementVector	mPolyObjs;$/;"	m	class:GIS_face_data
mPolygonFeatures	.\XESCore\MapDefs.h	/^	GISPolygonFeatureVector		mPolygonFeatures;$/;"	m	class:GIS_face_data
mPool	.\Network\TerraServer.h	/^	AsyncConnectionPool *	mPool;$/;"	m	class:AsyncImage
mPool	.\Network\TerraServer.h	/^	AsyncConnectionPool *	mPool;$/;"	m	class:AsyncImageLocator
mPool	.\RenderFarmUI\RF_TerraTool.h	/^	AsyncConnectionPool *			mPool;$/;"	m	class:RF_TerraTool
mPool	.\WEDMap\WED_TerraserverLayer.h	/^	AsyncConnectionPool *					mPool;$/;"	m	class:WED_TerraserverLayer
mPools	.\DSF\DSFPointPool.h	/^	list<ContiguousSubPool>		mPools;$/;"	m	class:DSFContiguousPointPool
mPools	.\DSF\DSFPointPool.h	/^	list<SharedSubPool>			mPools;$/;"	m	class:DSFSharedPointPool
mPools	.\DSF\dsflib_013005\DSFPointPool.h	/^	vector<ContiguousSubPool>	mPools;$/;"	m	class:DSFContiguousPointPool
mPools	.\DSF\dsflib_013005\DSFPointPool.h	/^	vector<SharedSubPool>		mPools;$/;"	m	class:DSFSharedPointPool
mPopup	.\GUI\GUI_Application.h	/^	QMenu *             mPopup;$/;"	m	class:GUI_Application
mPopupPick	.\UI\XWin.h	/^		int						mPopupPick;			\/\/ Local storage from popup callback handler for what we picked$/;"	m	class:XWin
mPort	.\WEDNetwork\WED_Server.h	/^	unsigned short		mPort;$/;"	m	class:WED_Server
mPort	.\WEDXPlugin\WED_XPluginClient.h	/^	unsigned short	mPort;$/;"	m	class:WED_XPluginClient
mPos	.\WEDXPlugin\WED_XPluginCamera.h	/^    XPLMCameraPosition_t mPos;$/;"	m	class:WED_XPluginCamera
mPos	.\XESCore\SimpleIO.h	/^	int				mPos;$/;"	m	class:WriterBuffer
mPost	.\XESCore\DEMDefs.h	/^	int		mPost;		\/\/ If 1, pixels sit "on" grid-lines, e.g. 1201 samples on a 90m DEM. If 0, a pixel is an _area_ between grid-lines.$/;"	m	struct:DEMGeo
mPost	.\XESCore\DEMDefs.h	/^	int		mPost;$/;"	m	struct:DEMMask
mPost	.\XESCore\DEMIO.h	/^	int				mPost;					\/\/ Post vs. area pixels$/;"	m	struct:DEMSpec
mPreview	.\WEDLibrary\WED_LibraryListAdapter.h	/^		WED_LibraryPreviewPane	* mPreview;$/;"	m	class:WED_LibraryListAdapter
mPreview	.\WEDMap\WED_MapPane.h	/^	WED_PreviewLayer *		mPreview;$/;"	m	class:WED_MapPane
mPreviewItems	.\WEDMap\WED_PreviewLayer.h	/^	vector<WED_PreviewItem *>	mPreviewItems;$/;"	m	class:WED_PreviewLayer
mPreviewObj	.\ObjEdit\OE_ProjectionMgr.h	/^	XObj						mPreviewObj;$/;"	m	class:OE_ProjectionMgr
mProbeRef	.\WEDXPlugin\WED_XPluginCamera.h	/^    XPLMProbeRef         mProbeRef;$/;"	m	class:WED_XPluginCamera
mProbeRef	.\WEDXPlugin\WED_XPluginEntity.h	/^    XPLMProbeRef	 	mProbeRef;$/;"	m	class:WED_XPluginEntity
mProbeRef	.\WEDXPlugin\WED_XPluginMgr.h	/^   XPLMProbeRef		    			mProbeRef;$/;"	m	class:WED_XPluginMgr
mProblemChildren	.\WEDImportExport\WED_GatewayExport.cpp	/^	set<WED_Thing *>		mProblemChildren;$/;"	m	class:WED_GatewayExportDialog	file:
mProjection	.\ObjEdit\OE_TexEdWindow.h	/^	bool	mProjection;$/;"	m	class:OE_PatchEdPane
mProjector	.\ObjEdit\OE_ProjectionMgr.h	/^	OE_AbstactTexProjector *	mProjector[3];$/;"	m	class:OE_ProjectionMgr
mPropPane	.\WEDWindows\WED_DocumentWindow.h	/^	WED_PropertyPane *			mPropPane;$/;"	m	class:WED_DocumentWindow
mPropSplitter	.\WEDWindows\WED_DocumentWindow.h	/^	GUI_Splitter *				mPropSplitter;$/;"	m	class:WED_DocumentWindow
mPropertyTable	.\WEDProperties\WED_PropertyPane.h	/^	WED_PropertyTable				mPropertyTable	;$/;"	m	class:WED_PropertyPane
mPsi	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		float				mPsi,mThe;$/;"	m	class:WED_LibraryPreviewPane
mPsiOrig	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		float				mPsiOrig,mTheOrig;$/;"	m	class:WED_LibraryPreviewPane
mPtr	.\XESCore\SimpleIO.h	/^	const char *	mPtr;$/;"	m	class:MemFileReader
mPts	.\WEDMap\WED_CreateToolBase.h	/^	vector<Point2>		mPts;$/;"	m	class:WED_CreateToolBase
mPts	.\XPTools\ViewObj.cpp	/^	Polygon2 		mPts;$/;"	m	class:XObjWin	file:
mQueue	.\WEDNetwork\WED_Server.h	/^	vector<vector<string> >		mQueue;$/;"	m	class:WED_Server
mRadios	.\GUI\GUI_Button.h	/^		vector<GUI_Button *>	mRadios;$/;"	m	class:GUI_Button
mRank	.\XESCore\DEMGrid.h	/^	vector<int>		mRank;$/;"	m	struct:DEMGrid
mRayShoot	.\RenderFarmUI\RF_MeshTester.h	/^		bool					mRayShoot;$/;"	m	class:RF_MeshTester
mRayShoot	.\RenderFarmUI\RF_TopoTester.h	/^		bool					mRayShoot;$/;"	m	class:RF_TopoTester
mReadIterator	.\WEDCore\WED_Buffer.h	/^	Storage *					mReadIterator;		\/\/ Ptr to the block we are reading and its offset.$/;"	m	class:WED_Buffer
mReadSubpos	.\WEDCore\WED_Buffer.h	/^	int							mReadSubpos;$/;"	m	class:WED_Buffer
mRealLines	.\WEDMap\WED_StructureLayer.h	/^	bool							mRealLines;$/;"	m	class:WED_StructureLayer
mReceivedPayload	.\Network\HTTPClient.h	/^	int					mReceivedPayload;	\/\/ How much of the incoming data have we seen?$/;"	m	class:HTTPRequest
mReceivedRelease	.\Network\PCSBSocket.h	/^		bool		mReceivedRelease;$/;"	m	class:PCSBSocket
mRedo	.\WEDCore\WED_UndoMgr.h	/^	LayerList		mRedo;$/;"	m	class:WED_UndoMgr
mRefCount	.\GUI\GUI_Clipboard.cpp	/^	ULONG					mRefCount;$/;"	m	class:GUI_SimpleEnumFORMATETC	file:
mRefCount	.\GUI\GUI_Clipboard.h	/^	ULONG									mRefCount;$/;"	m	class:GUI_SimpleDataObject
mRefCount	.\GUI\GUI_Window.cpp	/^	ULONG			mRefCount;$/;"	m	class:GUI_Window_DND	file:
mReliefID	.\RenderFarmUI\RF_MapView.h	/^	GLuint					mReliefID;$/;"	m	class:RF_MapView
mReliefS	.\RenderFarmUI\RF_MapView.h	/^	float					mReliefS;$/;"	m	class:RF_MapView
mReliefT	.\RenderFarmUI\RF_MapView.h	/^	float					mReliefT;$/;"	m	class:RF_MapView
mRepType	.\XESCore\MapDefs.h	/^	int					mRepType;$/;"	m	struct:GISPolyObjPlacement_t
mRepType	.\XESCore\MapDefs.h	/^	int				mRepType;$/;"	m	struct:GISNetworkSegment_t
mRepType	.\XESCore\MapDefs.h	/^	int				mRepType;$/;"	m	struct:GISObjPlacement_t
mReqs	.\Network\HTTPClient.h	/^	list<HTTPRequest *>	mReqs;				\/\/ All pipelined requests.  Front of list is first one tried.$/;"	m	class:HTTPConnection
mRequest	.\Network\HTTPClient.h	/^	vector<char>		mRequest;			\/\/ Copy of the total request, used for retrying.$/;"	m	class:HTTPRequest
mRes	.\RenderFarmUI\RF_TerraTool.h	/^	int								mRes;$/;"	m	class:RF_TerraTool
mRes	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		string				mRes;$/;"	m	class:WED_LibraryPreviewPane
mRes	.\WEDMap\WED_TerraserverLayer.h	/^	int										mRes;$/;"	m	class:WED_TerraserverLayer
mResMgr	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		WED_ResourceMgr *	mResMgr;$/;"	m	class:WED_LibraryPreviewPane
mResPath	.\WEDXPlugin\WED_XPluginEntity.h	/^    string			 	mResPath;$/;"	m	class:WED_XPluginEntity
mResolver	.\WEDCore\WED_Archive.h	/^	IResolver *		mResolver;$/;"	m	class:WED_Archive
mResolver	.\WEDImportExport\WED_AptImportDialog.h	/^	WED_Document *	mResolver;$/;"	m	class:WED_AptImportDialog
mResolver	.\WEDImportExport\WED_GatewayExport.cpp	/^	IResolver *				mResolver;	$/;"	m	class:WED_GatewayExportDialog	file:
mResolver	.\WEDImportExport\WED_GatewayImport.cpp	/^	WED_Document *		mResolver;$/;"	m	class:WED_GatewayImportDialog	file:
mResolver	.\WEDMap\WED_Map.h	/^	IResolver *						mResolver;$/;"	m	class:WED_Map
mResolver	.\WEDMap\WED_MapLayer.h	/^	IResolver *				mResolver;$/;"	m	class:WED_MapLayer
mResolver	.\WEDMap\WED_MapPane.h	/^	IResolver *				mResolver;$/;"	m	class:WED_MapPane
mResolver	.\WEDProperties\WED_PropertyTable.h	/^	IResolver *					mResolver;$/;"	m	class:WED_PropertyTable
mResolver	.\WEDTCE\WED_TCE.h	/^	IResolver *						mResolver;$/;"	m	class:WED_TCE
mResolver	.\WEDTCE\WED_TCELayer.h	/^	IResolver *				mResolver;$/;"	m	class:WED_TCELayer
mResolver	.\WEDTCE\WED_TCEPane.h	/^	IResolver *				mResolver;$/;"	m	class:WED_TCEPane
mResource	.\GUI\GUI_Button.h	/^		string				mResource;$/;"	m	class:GUI_Button
mResource	.\GUI\GUI_ToolBar.h	/^	string			mResource;$/;"	m	class:GUI_ToolBar
mResource	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropStringText				mResource;$/;"	m	class:WED_CreatePolygonTool
mResourceMgr	.\WEDCore\WED_Document.h	/^	WED_ResourceMgr *	mResourceMgr;$/;"	m	class:WED_Document
mResponse	.\WEDImportExport\WED_GatewayExport.cpp	/^	vector<char>			mResponse;$/;"	m	class:WED_GatewayExportDialog	file:
mResponseName	.\Network\HTTPClient.h	/^	string				mResponseName;		\/\/ E.g. OK$/;"	m	class:HTTPRequest
mResponseNum	.\Network\HTTPClient.h	/^	int					mResponseNum;		\/\/ E.g. 200$/;"	m	class:HTTPRequest
mRestore	.\Utils\BWImage.h	/^	bool			mRestore;$/;"	m	struct:StRestoreChunk
mRight	.\Utils\HLCamera.h	/^	GLdouble	mRight[3];			\/\/ frustum (in eye coordinates).  These are planes that$/;"	m	class:xcam_class
mRotateCtr	.\WEDMap\WED_MarqueeTool.h	/^			Point2			mRotateCtr;$/;"	m	class:WED_MarqueeTool
mRotateCtr	.\WEDMap\WED_VertexTool.h	/^		mutable Point2			mRotateCtr;$/;"	m	class:WED_VertexTool
mRotateCtr	.\WEDTCE\WED_TCEMarqueeTool.h	/^			Point2		mRotateCtr;$/;"	m	class:WED_TCEMarqueeTool
mRotateIndex	.\WEDMap\WED_VertexTool.h	/^		mutable	int				mRotateIndex;$/;"	m	class:WED_VertexTool
mRotateMatrix	.\ObjEdit\OE_CubeDeformer.h	/^	double		mRotateMatrix[16];$/;"	m	class:OE_CubeDeformer
mRotateOffset	.\WEDMap\WED_VertexTool.h	/^		mutable double			mRotateOffset;$/;"	m	class:WED_VertexTool
mRotatePt	.\WEDMap\WED_MarqueeTool.h	/^			Point2			mRotatePt;$/;"	m	class:WED_MarqueeTool
mRotatePt	.\WEDTCE\WED_TCEMarqueeTool.h	/^			Point2		mRotatePt;$/;"	m	class:WED_TCEMarqueeTool
mRotation	.\ObjEdit\OE_Zoomer3d.h	/^	float				mRotation[4];$/;"	m	class:OE_Zoomer3d
mRoughness	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropDoubleText				mRoughness;$/;"	m	class:WED_CreatePolygonTool
mRowHeight	.\GUI\GUI_SimpleTableGeometry.h	/^			int			mRowHeight;$/;"	m	class:GUI_SimpleTableGeometry
mRowHeight	.\WEDMap\WED_ToolInfoAdapter.h	/^	int					mRowHeight;$/;"	m	class:WED_ToolInfoAdapter
mRule	.\Utils\CoverageFinder.h	/^	vector<vector<bool> >		mRule;$/;"	m	class:CoverageFinder
mRunBegin	.\Utils\MemFileUtils.cpp	/^	const char * mRunBegin;$/;"	m	struct:MFTextScanner	file:
mRunEnd	.\Utils\MemFileUtils.cpp	/^	const char * mRunEnd;$/;"	m	struct:MFTextScanner	file:
mRunway	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntEnum			mRunway;$/;"	m	class:WED_CreateEdgeTool
mRunwayLayer	.\WEDMap\WED_PreviewLayer.h	/^	int							mRunwayLayer;		\/\/ Keep adding 1 to layer as we find runways, etc.  This means the runway's layer order$/;"	m	class:WED_PreviewLayer
mS	.\Network\TerraServer.h	/^	float 			mS;$/;"	m	class:AsyncImage
mS	.\WEDEntities\WED_TextureBezierNode.h	/^	WED_PropDoubleText			mS;$/;"	m	class:WED_TextureBezierNode
mS	.\WEDEntities\WED_TextureNode.h	/^	WED_PropDoubleText			mS;$/;"	m	class:WED_TextureNode
mSQLColumn	.\WEDCore\WED_PropertyHelper.h	/^	SQL_Name				mSQLColumn;$/;"	m	class:WED_PropertyItem
mScH	.\WEDEntities\WED_TextureBezierNode.h	/^	WED_PropDoubleText			mScH;$/;"	m	class:WED_TextureBezierNode
mScL	.\WEDEntities\WED_TextureBezierNode.h	/^	WED_PropDoubleText			mScL;$/;"	m	class:WED_TextureBezierNode
mScale	.\DSF\DSFPointPool.h	/^		DSFTuple					mScale;$/;"	m	struct:DSFContiguousPointPool::ContiguousSubPool
mScale	.\DSF\DSFPointPool.h	/^		DSFTuple					mScale;$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mScale	.\DSF\DSFPointPool.h	/^	DSFTuple					mScale;$/;"	m	class:DSF32BitPointPool
mScale	.\DSF\dsflib_013005\DSFPointPool.h	/^		DSFTuple					mScale;$/;"	m	struct:DSFContiguousPointPool::ContiguousSubPool
mScale	.\DSF\dsflib_013005\DSFPointPool.h	/^		DSFTuple					mScale;$/;"	m	struct:DSFSharedPointPool::SharedSubPool
mScale	.\DSF\dsflib_013005\DSFPointPool.h	/^	DSFTuple					mScale;$/;"	m	class:DSF32BitPointPool
mScale	.\Network\TerraServer.h	/^	string			mScale;$/;"	m	class:AsyncImage
mScale	.\ObjEdit\OE_TexEdWindow.h	/^		float		mScale;$/;"	m	class:OE_TexEdPane
mScale	.\ObjEdit\OE_Zoomer3d.h	/^	float				mScale;$/;"	m	class:OE_Zoomer3d
mScaleMatrix	.\ObjEdit\OE_CubeDeformer.h	/^	double		mScaleMatrix[16];$/;"	m	class:OE_CubeDeformer
mScrollH	.\GUI\GUI_ScrollerPane.h	/^	GUI_ScrollBar *					mScrollH;$/;"	m	class:GUI_ScrollerPane
mScrollH	.\GUI\GUI_Table.h	/^			int						mScrollH;$/;"	m	class:GUI_Table
mScrollH	.\GUI\GUI_TextField.h	/^		int					mScrollH;$/;"	m	class:GUI_TextField
mScrollV	.\GUI\GUI_ScrollerPane.h	/^	GUI_ScrollBar *					mScrollV;$/;"	m	class:GUI_ScrollerPane
mScrollV	.\GUI\GUI_Table.h	/^			int						mScrollV;$/;"	m	class:GUI_Table
mScroller	.\ObjEdit\OE_PatchList.h	/^		OE_Scroller *		mScroller;$/;"	m	class:OE_PatchList
mScroller	.\ObjEdit\OE_TexEdWindow.h	/^		OE_Scroller *		mScroller;$/;"	m	class:OE_TexEdWindow
mScroller	.\WEDImportExport\WED_AptImportDialog.h	/^	GUI_ScrollerPane *		mScroller;$/;"	m	class:WED_AptImportDialog
mScroller	.\WEDLibrary\WED_LibraryPane.h	/^	GUI_ScrollerPane *		mScroller;$/;"	m	class:WED_LibraryPane
mScroller	.\WEDProperties\WED_PropertyPane.h	/^	GUI_ScrollerPane *				mScroller;$/;"	m	class:WED_PropertyPane
mScroller	.\WEDWindows\WED_StartWindow.h	/^	GUI_ScrollerPane *	mScroller;$/;"	m	class:WED_StartWindow
mSeaportIconsC	.\WEDMap\WED_StructureLayer.h	/^	vector<float>		mSeaportIconsC;$/;"	m	class:WED_StructureLayer
mSeaportIconsX	.\WEDMap\WED_StructureLayer.h	/^	vector<int>			mSeaportIconsX;$/;"	m	class:WED_StructureLayer
mSeaportIconsY	.\WEDMap\WED_StructureLayer.h	/^	vector<int>			mSeaportIconsY;$/;"	m	class:WED_StructureLayer
mSegments	.\XESCore\MapDefs.h	/^	GISNetworkSegmentVector		mSegments;			\/\/ Network segments along us$/;"	m	struct:GIS_halfedge_data
mSegs	.\RenderFarmUI\RF_BezierTestTool.h	/^	int				mSegs;$/;"	m	class:RF_BezierTestTool
mSel	.\WEDLibrary\WED_LibraryListAdapter.h	/^		string					mSel;$/;"	m	class:WED_LibraryListAdapter
mSel	.\WEDWindows\WED_PackageListAdapter.h	/^	int				mSel;$/;"	m	class:WED_PackageListAdapter
mSelManip	.\WEDMap\WED_HandleToolBase.h	/^		vector<IGISEntity *>	mSelManip;$/;"	m	class:WED_HandleToolBase
mSelModeBtns	.\RenderFarmUI\RF_MapView.h	/^	vector<GUI_Pane *>		mSelModeBtns;		\/\/ Selection-mode buttons$/;"	m	class:RF_MapView
mSelOnly	.\WEDProperties\WED_PropertyTable.h	/^	int							mSelOnly;$/;"	m	class:WED_PropertyTable
mSelSave	.\WEDMap\WED_HandleToolBase.h	/^		vector<ISelectable *>	mSelSave;$/;"	m	class:WED_HandleToolBase
mSelSave	.\WEDProperties\WED_PropertyTable.h	/^	vector<ISelectable *>		mSelSave;$/;"	m	class:WED_PropertyTable
mSelStartX	.\GUI\GUI_TextTable.h	/^	int						mSelStartX;$/;"	m	class:GUI_TextTable
mSelStartY	.\GUI\GUI_TextTable.h	/^	int						mSelStartY;$/;"	m	class:GUI_TextTable
mSelToggle	.\WEDMap\WED_HandleToolBase.h	/^		int						mSelToggle;$/;"	m	class:WED_HandleToolBase
mSelVerts	.\WEDMap\WED_VertexTool.h	/^		int						mSelVerts;$/;"	m	class:WED_VertexTool
mSelX	.\WEDMap\WED_HandleToolBase.h	/^		int						mSelX;$/;"	m	class:WED_HandleToolBase
mSelY	.\WEDMap\WED_HandleToolBase.h	/^		int						mSelY;$/;"	m	class:WED_HandleToolBase
mSelected	.\WEDEntities\WED_Select.h	/^	set<int>		mSelected;$/;"	m	class:WED_Select
mSelected	.\WEDImportExport\WED_AptTable.h	/^	set<int>			mSelected;$/;"	m	class:WED_AptTable
mSelected	.\WEDImportExport\WED_ICAOTable.h	/^	set<int>			mSelected;$/;"	m	class:WED_ICAOTable
mSelected	.\WEDImportExport\WED_VerTable.h	/^	set<int>			mSelected;$/;"	m	class:WED_VerTable
mSelectedOrig	.\WEDImportExport\WED_AptTable.h	/^	set<int>			mSelectedOrig;$/;"	m	class:WED_AptTable
mSelectedOrig	.\WEDImportExport\WED_VerTable.h	/^	set<int>			mSelectedOrig;$/;"	m	class:WED_VerTable
mSentRelease	.\Network\PCSBSocket.h	/^		bool		mSentRelease;$/;"	m	class:PCSBSocket
mSeq	.\WEDEntities\WED_GISPolygon.cpp	/^	IGISPointSequence *	mSeq;$/;"	m	class:Bezier_Seq_Iterator	file:
mServer	.\WEDCore\WED_Document.h	/^	WED_Server *		mServer;$/;"	m	class:WED_Document
mServer	.\WEDNetwork\WED_NWLinkAdapter.h	/^			WED_Server * 		 mServer;$/;"	m	class:WED_NWLinkAdapter
mServerSocket	.\WEDNetwork\WED_Server.h	/^	PCSBSocket * 		mServerSocket;$/;"	m	class:WED_Server
mSetKey	.\WEDCore\WED_Properties.h	/^	sql_command		mSetKey;$/;"	m	class:WED_Properties
mSetToTerrain	.\WEDXPlugin\WED_XPluginEntity.h	/^    bool				mSetToTerrain;$/;"	m	class:WED_XPluginEntity
mShape	.\XESCore\MapDefs.h	/^	Polygon_with_holes_2		mShape;$/;"	m	struct:GISPolygonFeature_t
mShape	.\XESCore\MapDefs.h	/^	vector<Polygon2>	mShape;$/;"	m	struct:GISPolyObjPlacement_t
mShoulderLayer	.\WEDMap\WED_PreviewLayer.h	/^	int							mShoulderLayer;$/;"	m	class:WED_PreviewLayer
mShowCulled	.\XPTools\ViewObj.cpp	/^	int		mShowCulled;$/;"	m	class:XObjWin	file:
mSide	.\GUI\GUI_Table.h	/^			GUI_TableSide *			mSide;$/;"	m	class:GUI_Side
mSide	.\WEDProperties\WED_PropertyPane.h	/^	GUI_Side *						mSide;$/;"	m	class:WED_PropertyPane
mSizeMin	.\UI\XWin.h	/^		POINT			mSizeMin;$/;"	m	class:XWin
mSizes	.\Utils\MemFileUtils.cpp	/^	vector<int>			mSizes;			\/\/ Per file - size of this file in bytes$/;"	m	struct:MFFileSet	file:
mSkipBlanks	.\Utils\XUtils.h	/^	bool	mSkipBlanks;$/;"	m	class:StTextFileScanner
mSlaveH	.\GUI\GUI_ScrollerPane.h	/^		vector<GUI_ScrollerPane*>	mSlaveH;$/;"	m	class:GUI_ScrollerPane
mSlaveV	.\GUI\GUI_ScrollerPane.h	/^		vector<GUI_ScrollerPane*>	mSlaveV;$/;"	m	class:GUI_ScrollerPane
mSlop	.\GUI\GUI_ScrollBar.h	/^		float	mSlop;$/;"	m	class:GUI_ScrollBar
mSlop	.\GUI\GUI_Splitter.h	/^	int		mSlop;		\/\/ mouse - boundary = slop$/;"	m	class:GUI_Splitter
mSlop	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntText			mSlop;$/;"	m	class:WED_CreateEdgeTool
mSnapCache	.\WEDMap\WED_VertexTool.h	/^		mutable vector<pair<Point2,IGISEntity *> >		mSnapCache;$/;"	m	class:WED_VertexTool
mSnapCacheKeyArchive	.\WEDMap\WED_VertexTool.h	/^		mutable long long								mSnapCacheKeyArchive;$/;"	m	class:WED_VertexTool
mSnapCacheKeyZoomer	.\WEDMap\WED_VertexTool.h	/^		mutable long long								mSnapCacheKeyZoomer;$/;"	m	class:WED_VertexTool
mSnapToGrid	.\WEDMap\WED_VertexTool.h	/^		WED_PropBoolText		mSnapToGrid;$/;"	m	class:WED_VertexTool
mSocket	.\Network\HTTPClient.h	/^	PCSBSocket *		mSocket;			\/\/ Socket$/;"	m	class:HTTPConnection
mSocket	.\WEDNetwork\WED_Connection.h	/^	PCSBSocket *	mSocket;$/;"	m	class:WED_Connection
mSocket	.\WEDXPlugin\WED_XPluginClient.h	/^		PCSBSocket * 	mSocket;$/;"	m	class:WED_XPluginClient
mSolid	.\XPTools\ViewObj.cpp	/^	bool	mSolid;$/;"	m	class:XObjWin	file:
mSortColumn	.\WEDImportExport\WED_AptTable.h	/^	int					mSortColumn;$/;"	m	class:WED_AptTable
mSortColumn	.\WEDImportExport\WED_ICAOTable.h	/^	int					mSortColumn;$/;"	m	class:WED_ICAOTable
mSortColumn	.\WEDImportExport\WED_VerTable.h	/^	int					mSortColumn;$/;"	m	class:WED_VerTable
mSorted	.\WEDImportExport\WED_AptTable.h	/^	vector<int>			mSorted;$/;"	m	class:WED_AptTable
mSorted	.\WEDImportExport\WED_ICAOTable.h	/^	vector<int>			mSorted;$/;"	m	class:WED_ICAOTable
mSorted	.\WEDImportExport\WED_VerTable.h	/^	vector<int>			mSorted;$/;"	m	class:WED_VerTable
mSource	.\WEDCore\WED_FastBuffer.h	/^			WED_Buffer *			mSource;$/;"	m	class:WED_FastBuffer
mSourceHeight	.\XESCore\MapDefs.h	/^	double			mSourceHeight;$/;"	m	struct:GISNetworkSegment_t
mSouth	.\DSF\DSFLibWrite.cpp	/^	double	mSouth;$/;"	m	class:DSFFileWriterImp	file:
mSouth	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	double	mSouth;$/;"	m	class:DSFFileWriterImp	file:
mSouth	.\Network\TerraServer.h	/^	double			mSouth;$/;"	m	class:AsyncImageLocator
mSouth	.\XESCore\DEMDefs.h	/^	double	mSouth;$/;"	m	struct:DEMGeo
mSouth	.\XESCore\DEMDefs.h	/^	double	mSouth;$/;"	m	struct:DEMMask
mSouth	.\XESCore\DEMIO.h	/^	double			mSouth;$/;"	m	struct:DEMSpec
mSpacing	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropDoubleText				mSpacing;$/;"	m	class:WED_CreatePolygonTool
mSpecificBufs	.\WEDImportExport\WED_GatewayImport.cpp	/^	vector<JSON_BUF>	mSpecificBufs;$/;"	m	class:WED_GatewayImportDialog	file:
mSplit	.\RenderFarmUI\RF_BezierTestTool.h	/^	double			mSplit;$/;"	m	class:RF_BezierTestTool
mSrc	.\Utils\BWImage.h	/^	char *			mSrc;$/;"	m	struct:StRestoreChunk
mSrcMax	.\Utils\CompGeomUtils.h	/^	Point2	mSrcMax;$/;"	m	struct:CoordTranslator2
mSrcMax	.\XESCore\CGALDefs.h	/^	Point_2	mSrcMax;$/;"	m	struct:CoordTranslator_2
mSrcMin	.\Utils\CompGeomUtils.h	/^	Point2	mSrcMin;$/;"	m	struct:CoordTranslator2
mSrcMin	.\XESCore\CGALDefs.h	/^	Point_2	mSrcMin;$/;"	m	struct:CoordTranslator_2
mStart	.\Utils\PerfUtils.h	/^	unsigned long long	mStart;$/;"	m	class:PerfTimer
mStartTime	.\Utils\PerfUtils.h	/^	unsigned long long 	mStartTime;$/;"	m	class:StElapsedTime
mStarted	.\WEDNetwork\WED_Server.h	/^				int		mStarted;$/;"	m	class:WED_Server
mState	.\GUI\GUI_TextField.h	/^		GUI_GraphState * 	mState;$/;"	m	class:GUI_TextField
mState	.\GUI\GUI_Window.h	/^	GUI_GraphState	mState;$/;"	m	class:GUI_Window
mStats	.\WEDXPlugin\WED_XPluginMgr.h	/^   WED_XPluginStats_t	    		mStats;$/;"	m	class:WED_XPluginMgr
mStatus	.\WEDCore\WED_Package.h	/^	int				mStatus[360*180];$/;"	m	class:WED_Package
mStatus	.\WEDMap\WED_TerraserverLayer.h	/^	string									mStatus;$/;"	m	class:WED_TerraserverLayer
mStatus	.\WEDXPlugin\WED_XPluginClient.h	/^				string 	mStatus;$/;"	m	class:WED_XPluginClient
mSticky	.\GUI\GUI_Pane.h	/^		float				mSticky[4];$/;"	m	class:GUI_Pane
mStorage	.\WEDCore\WED_Buffer.h	/^	Storage *					mStorage;			\/\/ Ptr to the slist of blocks.$/;"	m	class:WED_Buffer
mStorage	.\WEDCore\WED_FastBuffer.h	/^	WED_Buffer			mStorage;$/;"	m	class:WED_FastBufferGroup
mStorage	.\WEDCore\WED_UndoLayer.h	/^	WED_FastBufferGroup *	mStorage;$/;"	m	class:WED_UndoLayer
mStrTool	.\WEDMap\WED_MapPane.h	/^	WED_CreatePolygonTool * mStrTool;$/;"	m	class:WED_MapPane
mStructureLayer	.\WEDMap\WED_MapPane.h	/^	WED_StructureLayer *	mStructureLayer;$/;"	m	class:WED_MapPane
mSubtype	.\WEDMap\WED_CreateEdgeTool.h	/^	WED_PropIntEnum			mSubtype;$/;"	m	class:WED_CreateEdgeTool
mSuper	.\WEDWindows\WED_PackageStatusPane.h	/^	GUI_Commander * mSuper;$/;"	m	class:WED_PackageStatusPane
mSwap	.\XESCore\SimpleIO.h	/^	bool			mSwap;$/;"	m	class:WriterBuffer
mT	.\Network\TerraServer.h	/^	float			mT;$/;"	m	class:AsyncImage
mT	.\WEDEntities\WED_TextureBezierNode.h	/^	WED_PropDoubleText			mT;$/;"	m	class:WED_TextureBezierNode
mT	.\WEDEntities\WED_TextureNode.h	/^	WED_PropDoubleText			mT;$/;"	m	class:WED_TextureNode
mTCE	.\WEDTCE\WED_TCEPane.h	/^	WED_TCE *				mTCE;$/;"	m	class:WED_TCEPane
mTCEPane	.\WEDWindows\WED_DocumentWindow.h	/^	WED_TCEPane *				mTCEPane;$/;"	m	class:WED_DocumentWindow
mTFColorBkgnd	.\GUI\GUI_TextTable.h	/^	float					mTFColorBkgnd[4];$/;"	m	class:GUI_TextTable
mTFColorBox	.\GUI\GUI_TextTable.h	/^	float					mTFColorBox[4];$/;"	m	class:GUI_TextTable
mTFColorHilite	.\GUI\GUI_TextTable.h	/^	float					mTFColorHilite[4];$/;"	m	class:GUI_TextTable
mTFColorText	.\GUI\GUI_TextTable.h	/^	float					mTFColorText[4];$/;"	m	class:GUI_TextTable
mTable	.\GUI\GUI_Table.h	/^			GUI_Table *				mTable;$/;"	m	class:GUI_Header
mTable	.\GUI\GUI_Table.h	/^			GUI_Table *				mTable;$/;"	m	class:GUI_Side
mTable	.\WEDImportExport\WED_AptImportDialog.h	/^	GUI_Table *				mTable;$/;"	m	class:WED_AptImportDialog
mTable	.\WEDLibrary\WED_LibraryPane.h	/^	GUI_Table *				mTable;$/;"	m	class:WED_LibraryPane
mTable	.\WEDMap\WED_MapPane.h	/^	GUI_Table *						mTable;$/;"	m	class:WED_MapPane
mTable	.\WEDProperties\WED_PropertyPane.h	/^	GUI_Table *						mTable;$/;"	m	class:WED_PropertyPane
mTable	.\WEDTCE\WED_TCEPane.h	/^	GUI_Table *				mTable;$/;"	m	class:WED_TCEPane
mTable	.\WEDWindows\WED_StartWindow.h	/^	GUI_Table *			mTable;$/;"	m	class:WED_StartWindow
mTabs	.\GUI\GUI_TabPane.h	/^	GUI_TabControl *	mTabs;$/;"	m	class:GUI_TabPane
mTag	.\Network\XMLObject.h	/^	std::string		mTag;$/;"	m	class:XMLObject
mTarget	.\GUI\GUI_Window.cpp	/^	GUI_Pane *		mTarget;$/;"	m	class:GUI_Window_DND	file:
mTarget	.\RenderFarmUI\RF_MeshTester.h	/^		Point2					mTarget;$/;"	m	class:RF_MeshTester
mTarget	.\RenderFarmUI\RF_TopoTester.h	/^		Point2					mTarget;$/;"	m	class:RF_TopoTester
mTarget	.\UI\XPopup.h	/^		xwindow mTarget;$/;"	m	class:XPopup
mTargetHeight	.\XESCore\MapDefs.h	/^	double			mTargetHeight;$/;"	m	struct:GISNetworkSegment_t
mTaxiDest	.\WEDMap\WED_VertexTool.h	/^		mutable Point2			mTaxiDest;$/;"	m	class:WED_VertexTool
mTaxiLayer	.\WEDMap\WED_PreviewLayer.h	/^	int							mTaxiLayer;			\/\/ IS the hierarchy\/export order, which is good.$/;"	m	class:WED_PreviewLayer
mTcH	.\WEDEntities\WED_TextureBezierNode.h	/^	WED_PropDoubleText			mTcH;$/;"	m	class:WED_TextureBezierNode
mTcL	.\WEDEntities\WED_TextureBezierNode.h	/^	WED_PropDoubleText			mTcL;$/;"	m	class:WED_TextureBezierNode
mTemp1	.\XESCore\MapDefs.h	/^	int							mTemp1;							\/\/ Per face temp value$/;"	m	class:GIS_face_data
mTemp2	.\XESCore\MapDefs.h	/^	int							mTemp2;							\/\/ Per face temp value$/;"	m	class:GIS_face_data
mTerrainType	.\XESCore\MapDefs.h	/^	int							mTerrainType;		\/\/ This is a feature type for matching.  EXCEPTION: terrain_Water is both a feature and terrain.$/;"	m	class:GIS_face_data
mTerraserver	.\WEDMap\WED_MapPane.h	/^	WED_TerraserverLayer *	mTerraserver;$/;"	m	class:WED_MapPane
mTex	.\WEDTCE\WED_TCE.h	/^		TexRef			mTex;$/;"	m	class:WED_TCE
mTexID	.\RenderFarmUI\RF_ImageTool.h	/^	GLuint			mTexID;$/;"	m	class:RF_ImageTool
mTexID	.\RenderFarmUI\RF_MapView.h	/^	GLuint					mTexID;$/;"	m	class:RF_MapView
mTexMap	.\UI\FontMgr.h	/^	TextureMap_t	mTexMap;$/;"	m	class:FontMgr
mTexMgr	.\WEDCore\WED_Document.h	/^	WED_TexMgr *		mTexMgr;$/;"	m	class:WED_Document
mTexMgr	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		ITexMgr *			mTexMgr;$/;"	m	class:WED_LibraryPreviewPane
mTexNum	.\Network\TerraServer.h	/^	GLuint			mTexNum;$/;"	m	class:AsyncImage
mTexS	.\RenderFarmUI\RF_MapView.h	/^	float					mTexS;$/;"	m	class:RF_MapView
mTexT	.\RenderFarmUI\RF_MapView.h	/^	float					mTexT;$/;"	m	class:RF_MapView
mTexes	.\WEDCore\WED_TexMgr.h	/^	TexMap mTexes;$/;"	m	class:WED_TexMgr
mText	.\GUI\GUI_TextField.h	/^		string				mText;$/;"	m	class:GUI_TextField
mText	.\WEDWindows\WED_FilterBar.h	/^	string				mText;$/;"	m	class:WED_FilterBar
mTextColor	.\GUI\GUI_TabControl.h	/^		float				mTextColor[4];$/;"	m	class:GUI_TabControl
mTextField	.\GUI\GUI_TextTable.h	/^	GUI_TextField *			mTextField;$/;"	m	class:GUI_TextTable
mTextTable	.\WEDImportExport\WED_AptImportDialog.h	/^	GUI_TextTable			mTextTable;$/;"	m	class:WED_AptImportDialog
mTextTable	.\WEDLibrary\WED_LibraryPane.h	/^	GUI_TextTable			mTextTable;$/;"	m	class:WED_LibraryPane
mTextTable	.\WEDMap\WED_MapPane.h	/^	GUI_TextTable *					mTextTable;$/;"	m	class:WED_MapPane
mTextTable	.\WEDProperties\WED_PropertyPane.h	/^	GUI_TextTable					mTextTable;$/;"	m	class:WED_PropertyPane
mTextTable	.\WEDTCE\WED_TCEPane.h	/^	GUI_TextTable *			mTextTable;$/;"	m	class:WED_TCEPane
mTextTable	.\WEDWindows\WED_FilterBar.h	/^	GUI_TextTable		mTextTable;$/;"	m	class:WED_FilterBar
mTextTable	.\WEDWindows\WED_StartWindow.h	/^	GUI_TextTable *					mTextTable;$/;"	m	class:WED_StartWindow
mTextTableHeader	.\WEDImportExport\WED_AptImportDialog.h	/^	GUI_TextTableHeader		mTextTableHeader;$/;"	m	class:WED_AptImportDialog
mTextTableHeader	.\WEDLibrary\WED_LibraryPane.h	/^	GUI_TextTableHeader		mTextTableHeader;$/;"	m	class:WED_LibraryPane
mTextTableHeader	.\WEDProperties\WED_PropertyPane.h	/^	GUI_TextTableHeader				mTextTableHeader;$/;"	m	class:WED_PropertyPane
mTextTableSide	.\WEDProperties\WED_PropertyPane.h	/^	GUI_TextTableSide				mTextTableSide;$/;"	m	class:WED_PropertyPane
mTexture	.\ObjEdit\OE_ProjectionMgr.h	/^	OE_Texture_t				mTexture;$/;"	m	class:OE_ProjectionMgr
mThe	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		float				mPsi,mThe;$/;"	m	class:WED_LibraryPreviewPane
mTheOrig	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		float				mPsiOrig,mTheOrig;$/;"	m	class:WED_LibraryPreviewPane
mTheme	.\Network\TerraServer.h	/^	string			mTheme;$/;"	m	class:AsyncImage
mThingCache	.\WEDProperties\WED_PropertyTable.h	/^	vector<WED_Thing *>			mThingCache;$/;"	m	class:WED_PropertyTable
mTiles	.\WEDCore\WED_Package.h	/^	WED_Document *	mTiles[360*180];$/;"	m	class:WED_Package
mTime	.\Utils\PerfUtils.h	/^	double				mTime;$/;"	m	class:PerfTimer
mTimer	.\GUI\GUI_Timer.h	/^		CFRunLoopTimerRef					mTimer;$/;"	m	class:GUI_Timer
mTimer	.\UI\XWin.h	/^		NSTimer *				mTimer;$/;"	m	class:XWin
mTimer	.\UI\XWin.h	/^		void *					mTimer;$/;"	m	class:XWin
mTimer	.\UI\XWin.h	/^	int		mTimer;$/;"	m	class:XWin
mTimerIsStarted	.\WEDNetwork\WED_NWLinkAdapter.h	/^				bool			 mTimerIsStarted;$/;"	m	class:WED_NWLinkAdapter
mTipBounds	.\GUI\GUI_Window.h	/^		int					mTipBounds[4];$/;"	m	class:GUI_Window
mTips	.\GUI\GUI_ToolBar.h	/^	vector<string>	mTips;$/;"	m	class:GUI_ToolBar
mTitle	.\WEDCore\WED_PropertyHelper.h	/^	const char *			mTitle;$/;"	m	class:WED_PropertyItem
mTmpX	.\WEDNetwork\WED_NWInfoLayer.h	/^	float	mTmpX, mTmpY;$/;"	m	class:WED_NWInfoLayer
mTmpY	.\WEDNetwork\WED_NWInfoLayer.h	/^	float	mTmpX, mTmpY;$/;"	m	class:WED_NWInfoLayer
mTool	.\WEDMap\WED_Map.h	/^	WED_MapToolNew *				mTool;$/;"	m	class:WED_Map
mTool	.\WEDMap\WED_ToolInfoAdapter.h	/^	IPropertyObject *	mTool;$/;"	m	class:WED_ToolInfoAdapter
mTool	.\WEDTCE\WED_TCE.h	/^	WED_TCEToolNew *				mTool;$/;"	m	class:WED_TCE
mToolBarBtns	.\RenderFarmUI\RF_MapView.h	/^	vector<GUI_Pane *>		mToolBarBtns;		\/\/ Tools themselves$/;"	m	class:RF_MapView
mToolBtnsOffset	.\RenderFarmUI\RF_MapView.h	/^	int						mToolBtnsOffset;$/;"	m	class:RF_MapView
mToolFuncBtns	.\RenderFarmUI\RF_MapView.h	/^	vector<GUI_Pane *>		mToolFuncBtns;		\/\/ Buttons that do tool-specific cmds$/;"	m	class:RF_MapView
mToolProperties	.\RenderFarmUI\RF_MapView.h	/^	vector<GUI_Pane *>		mToolProperties;	\/\/ Editing of tool properties$/;"	m	class:RF_MapView
mToolTip	.\GUI\GUI_Window.h	/^		HWND				mToolTip;$/;"	m	class:GUI_Window
mToolTipBounds	.\UI\XWin.h	/^		int						mToolTipBounds[4];	\/\/ If the tip is up, we kill the tip when it goes out of these bounds so we can recompute it.$/;"	m	class:XWin
mToolTipLive	.\UI\XWin.h	/^		int						mToolTipLive;		\/\/ True if the tip is up.$/;"	m	class:XWin
mToolTipMem	.\UI\XWin.h	/^		void *					mToolTipMem;		\/\/ Tool tips - a retained NSString current tool tip casted to void.$/;"	m	class:XWin
mToolbar	.\WEDMap\WED_MapPane.h	/^	GUI_ToolBar *			mToolbar;$/;"	m	class:WED_MapPane
mToolbar	.\WEDTCE\WED_TCEPane.h	/^	GUI_ToolBar *			mToolbar;$/;"	m	class:WED_TCEPane
mTools	.\RenderFarmUI\RF_MapView.h	/^	vector<RF_MapTool *>	mTools;$/;"	m	class:RF_MapView
mTools	.\WEDMap\WED_MapPane.h	/^	vector<WED_MapToolNew *>mTools;$/;"	m	class:WED_MapPane
mTools	.\WEDTCE\WED_TCEPane.h	/^	vector<WED_TCEToolNew *>mTools;$/;"	m	class:WED_TCEPane
mTop	.\Utils\HLCamera.h	/^	GLdouble	mTop[3];			\/\/ For perspective cameras only:$/;"	m	class:xcam_class
mTotalVisible	.\Utils\XCull.h	/^	int								mTotalVisible;$/;"	m	class:XCull
mTrackBtn	.\GUI\GUI_TabControl.h	/^		int					mTrackBtn;$/;"	m	class:GUI_TabControl
mTrackLeft	.\GUI\GUI_TextTable.h	/^	int						mTrackLeft;$/;"	m	class:GUI_TextTable
mTrackPoint	.\WEDMap\WED_HandleToolBase.h	/^		Point2					mTrackPoint;$/;"	m	class:WED_HandleToolBase
mTrackRight	.\GUI\GUI_TextTable.h	/^	int						mTrackRight;$/;"	m	class:GUI_TextTable
mTransition	.\XESCore\MapDefs.h	/^	int							mTransition;		\/\/ Transition type ID$/;"	m	struct:GIS_halfedge_data
mTranslateMatrix	.\ObjEdit\OE_CubeDeformer.h	/^	double		mTranslateMatrix[16];$/;"	m	class:OE_CubeDeformer
mTranslation	.\ObjEdit\OE_Zoomer3d.h	/^	float				mTranslation[3];$/;"	m	class:OE_Zoomer3d
mTrap	.\GUI\GUI_Pane.h	/^		set<GUI_Pane *>		mTrap;$/;"	m	class:GUI_Pane
mTris	.\RenderFarmUI\RF_MapView.h	/^	int						mTris[MESH_BUCKET_SIZE * MESH_BUCKET_SIZE + 1];$/;"	m	class:RF_MapView
mTunnelPortal	.\XESCore\MapDefs.h	/^	bool mTunnelPortal;$/;"	m	struct:GIS_vertex_data
mType	.\Utils\MemFileUtils.cpp	/^	MF_FileType			mType;			\/\/ Type of directory (directory, zip files, or gz tar ball.$/;"	m	struct:MFFileSet	file:
mType	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		int					mType;$/;"	m	class:WED_LibraryPreviewPane
mType	.\WEDMap\WED_CreateBoxTool.h	/^		CreateBox_t	mType;$/;"	m	class:WED_CreateBoxTool
mType	.\WEDMap\WED_CreateEdgeTool.h	/^		CreateEdge_t	mType;$/;"	m	class:WED_CreateEdgeTool
mType	.\WEDMap\WED_CreateLineTool.h	/^		CreateLine_t	mType;$/;"	m	class:WED_CreateLineTool
mType	.\WEDMap\WED_CreatePointTool.h	/^		CreatePoint_t	mType;$/;"	m	class:WED_CreatePointTool
mType	.\WEDMap\WED_CreatePolygonTool.h	/^		CreateTool_t	mType;$/;"	m	class:WED_CreatePolygonTool
mType	.\WEDXPlugin\WED_XPluginEntity.h	/^    int					mType;$/;"	m	class:WED_XPluginEntity
mTypes	.\GUI\GUI_Clipboard.cpp	/^	vector<GUI_ClipType>	mTypes;		\/\/ Note - we pre-copy our types to a vector.  Easier and puts them in a random-accessible container$/;"	m	class:GUI_SimpleEnumFORMATETC	file:
mUVMap	.\WEDMap\WED_CreatePolygonTool.h	/^		WED_PropBoolText				mUVMap;$/;"	m	class:WED_CreatePolygonTool
mUndo	.\WEDCore\WED_Archive.h	/^	WED_UndoLayer *	mUndo;$/;"	m	class:WED_Archive
mUndo	.\WEDCore\WED_Document.h	/^	WED_UndoMgr			mUndo;$/;"	m	class:WED_Document
mUndo	.\WEDCore\WED_UndoMgr.h	/^	LayerList 		mUndo;$/;"	m	class:WED_UndoMgr
mUndoMgr	.\WEDCore\WED_Archive.h	/^	WED_UndoMgr *	mUndoMgr;$/;"	m	class:WED_Archive
mUnmap	.\Utils\MemFileUtils.cpp	/^	bool			mUnmap;	\/\/ True if we need to unmap memory.$/;"	m	struct:MFMemFile	file:
mUsageMapping	.\DSF\DSFPointPool.h	/^	vector<int>					mUsageMapping;$/;"	m	class:DSFContiguousPointPool
mUsageMapping	.\DSF\DSFPointPool.h	/^	vector<int>					mUsageMapping;$/;"	m	class:DSFSharedPointPool
mUsageMapping	.\DSF\dsflib_013005\DSFPointPool.h	/^	vector<int>					mUsageMapping;$/;"	m	class:DSFContiguousPointPool
mUsageMapping	.\DSF\dsflib_013005\DSFPointPool.h	/^	vector<int>					mUsageMapping;$/;"	m	class:DSFSharedPointPool
mV	.\GUI\GUI_ToolBar.h	/^	int				mV;$/;"	m	class:GUI_ToolBar
mVScroll	.\ObjEdit\OE_Scroller.h	/^		OE_Pane *	mVScroll;$/;"	m	class:OE_Scroller
mValue	.\GUI\GUI_Control.h	/^		float		mValue;$/;"	m	class:GUI_Control
mVers	.\WEDImportExport\WED_VerTable.h	/^	const VerVector *	mVers;$/;"	m	class:WED_VerTable
mVersions_Header	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Header *			mVersions_Header;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_Packer	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Packer *			mVersions_Packer;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_Scroller	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_ScrollerPane *		mVersions_Scroller;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_Table	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_Table *				mVersions_Table;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_TextTable	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_TextTable			mVersions_TextTable;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_TextTableHeader	.\WEDImportExport\WED_GatewayImport.cpp	/^	GUI_TextTableHeader		mVersions_TextTableHeader;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_VerProvider	.\WEDImportExport\WED_GatewayImport.cpp	/^		WED_VerTable			mVersions_VerProvider;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_Vers	.\WEDImportExport\WED_GatewayImport.cpp	/^		VerVector				mVersions_Vers;$/;"	m	class:WED_GatewayImportDialog	file:
mVersions_VersionsSelected	.\WEDImportExport\WED_GatewayImport.cpp	/^	set<int>				mVersions_VersionsSelected;$/;"	m	class:WED_GatewayImportDialog	file:
mVertexSelection	.\RenderFarmUI\RF_SelectionTool.h	/^	set<Pmwx::Vertex_handle>	mVertexSelection;$/;"	m	class:RF_SelectionTool
mVertical	.\WEDProperties\WED_PropertyTable.h	/^	int							mVertical;$/;"	m	class:WED_PropertyTable
mVertices	.\WEDMap\WED_StructureLayer.h	/^	bool							mVertices;$/;"	m	class:WED_StructureLayer
mVis	.\WEDMap\WED_TerraserverLayer.h	/^	bool									mVis;$/;"	m	class:WED_TerraserverLayer
mVisible	.\GUI\GUI_Pane.h	/^		int					mVisible;$/;"	m	class:GUI_Pane
mVisible	.\ObjEdit\OE_Preview.h	/^	vector<VisibleVector>	mVisible;$/;"	m	class:OE_Preview
mVisible	.\RenderFarmUI\RF_ImageTool.h	/^	bool			mVisible;$/;"	m	class:RF_ImageTool
mVisible	.\UI\XPopup.h	/^		bool mVisible;$/;"	m	class:XPopup
mVisible	.\Utils\XCull.h	/^	vector<VisibleVector>			mVisible;$/;"	m	class:XCull
mVisible	.\WEDMap\WED_MapLayer.h	/^	bool					mVisible;$/;"	m	class:WED_MapLayer
mVisible	.\WEDMap\WED_WorldMapLayer.h	/^	bool			mVisible;$/;"	m	class:WED_WorldMapLayer
mVisibleBounds	.\RenderFarmUI\RF_MapZoomer.h	/^	double	mVisibleBounds[4];$/;"	m	class:RF_MapZoomer
mW	.\UI\XPopup.h	/^		int mX, mY, mW, mH;$/;"	m	class:XPopup
mWaitCntr	.\WEDNetwork\WED_Connection.h	/^		int			mWaitCntr;$/;"	m	class:WED_Connection
mWantDraw	.\WEDXPlugin\WED_XPluginObject.h	/^    	bool			mWantDraw;$/;"	m	class:WED_XPluginObject
mWantFakeUp	.\UI\XWin.h	/^		int						mWantFakeUp;		\/\/ True if the down or drag handler should fake an up click and end the gesture.$/;"	m	class:XWin
mWantFakeUp	.\UI\XWin.h	/^		int				mWantFakeUp;$/;"	m	class:XWin
mWantFakeUp	.\UI\XWin.h	/^	int		mWantFakeUp;$/;"	m	class:XWin
mWest	.\DSF\DSFLibWrite.cpp	/^	double	mWest;$/;"	m	class:DSFFileWriterImp	file:
mWest	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	double	mWest;$/;"	m	class:DSFFileWriterImp	file:
mWest	.\Network\TerraServer.h	/^	double			mWest;$/;"	m	class:AsyncImageLocator
mWest	.\XESCore\DEMDefs.h	/^	double	mWest;$/;"	m	struct:DEMGeo
mWest	.\XESCore\DEMDefs.h	/^	double	mWest;$/;"	m	struct:DEMMask
mWest	.\XESCore\DEMIO.h	/^	double			mWest;					\/\/ Outer bbox of DEM$/;"	m	struct:DEMSpec
mWidget	.\ObjEdit\OE_Pane.h	/^	XPWidgetID		mWidget;$/;"	m	class:OE_Pane
mWidget	.\RenderFarmUI\RF_Pane.h	/^	XPWidgetID		mWidget;$/;"	m	class:RF_Pane
mWidth	.\Utils\BWImage.h	/^	int				mWidth;$/;"	m	struct:BWImage
mWidth	.\XESCore\DEMDefs.h	/^	int		mWidth;$/;"	m	struct:DEMGeo
mWidth	.\XESCore\DEMDefs.h	/^	int		mWidth;$/;"	m	struct:DEMMask
mWidth	.\XESCore\DEMGrid.h	/^	int				mWidth;$/;"	m	struct:DEMGrid
mWidth	.\XESCore\DEMIO.h	/^	int				mWidth;					\/\/ Image dimensions$/;"	m	struct:DEMSpec
mWidths	.\GUI\GUI_TabControl.h	/^		vector<int>			mWidths;$/;"	m	class:GUI_TabControl
mWinFile	.\Utils\MemFileUtils.cpp	/^	HANDLE 			mWinFile;$/;"	m	struct:MFMemFile	file:
mWinFileMapping	.\Utils\MemFileUtils.cpp	/^	HANDLE 			mWinFileMapping;$/;"	m	struct:MFMemFile	file:
mWinSocket	.\Network\PCSBSocket.h	/^		SOCKET		mWinSocket; \/\/our socket$/;"	m	class:PCSBSocket
mWinSocket	.\Network\PCSBSocketUDP.h	/^		SOCKET				mWinSocket;		\/\/our socket$/;"	m	class:PCSBSocketUDP
mWinSocket	.\Network\PCSBSocketUDP.h	/^		int					mWinSocket;$/;"	m	class:PCSBSocketUDP
mWindow	.\GUI\GUI_Window.cpp	/^	HWND			mWindow;$/;"	m	class:GUI_Window_DND	file:
mWindow	.\GUI\GUI_Window.cpp	66;"	d	file:
mWindow	.\UI\XWin.h	/^		HWND			mWindow;$/;"	m	class:XWin
mWindow	.\UI\XWin.h	/^		XWinCocoa *				mWindow;$/;"	m	class:XWin
mWnd	.\UI\XPopup.h	/^		xwindow mWnd;$/;"	m	class:XPopup
mWorldMap	.\WEDMap\WED_MapPane.h	/^	WED_WorldMapLayer *		mWorldMap;$/;"	m	class:WED_MapPane
mWrap	.\WEDTCE\WED_TCE.h	/^		bool			mWrap;$/;"	m	class:WED_TCE
mWriteIterator	.\WEDCore\WED_Buffer.h	/^	Storage *					mWriteIterator;		\/\/ Ptr to the block we are writing in now.$/;"	m	class:WED_Buffer
mWriter	.\XESCore\SimpleIO.h	/^	IOWriter *	mWriter;$/;"	m	class:WriterBuffer
mX	.\Network\TerraServer.h	/^	int				mX;$/;"	m	class:AsyncImage
mX	.\UI\XPopup.h	/^		int mX, mY, mW, mH;$/;"	m	class:XPopup
mX	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		int					mX, mY;$/;"	m	class:WED_LibraryPreviewPane
mX	.\WEDMap\WED_Map.h	/^	int				mX;$/;"	m	class:WED_Map
mX	.\WEDTCE\WED_TCE.h	/^	int				mX;$/;"	m	class:WED_TCE
mX1	.\Network\TerraServer.h	/^	int				mX1;$/;"	m	class:AsyncImageLocator
mX1	.\RenderFarmUI\RF_TerraTool.h	/^	int mX1, mX2, mY1, mY2, mDomain, mHas;$/;"	m	class:RF_TerraTool
mX1	.\WEDMap\WED_TerraserverLayer.h	/^	int mX1[NUM_LEVELS], mX2[NUM_LEVELS], mY1[NUM_LEVELS], mY2[NUM_LEVELS], mDomain[NUM_LEVELS], mHas[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mX2	.\Network\TerraServer.h	/^	int 			mX2;$/;"	m	class:AsyncImageLocator
mX2	.\RenderFarmUI\RF_TerraTool.h	/^	int mX1, mX2, mY1, mY2, mDomain, mHas;$/;"	m	class:RF_TerraTool
mX2	.\WEDMap\WED_TerraserverLayer.h	/^	int mX1[NUM_LEVELS], mX2[NUM_LEVELS], mY1[NUM_LEVELS], mY2[NUM_LEVELS], mDomain[NUM_LEVELS], mHas[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mXLimit	.\Utils\BWImage.h	/^	int				mXLimit;$/;"	m	struct:BWImage
mXMLColumn	.\WEDCore\WED_PropertyHelper.h	/^	XML_Name				mXMLColumn;$/;"	m	class:WED_PropertyItem
mXWinGL	.\UI\XWinGL.h	/^	XWinGL* mXWinGL;$/;"	m	class:glWidget
mX_Orig	.\WEDMap\WED_Map.h	/^	int				mX_Orig;$/;"	m	class:WED_Map
mX_Orig	.\WEDTCE\WED_TCE.h	/^	int				mX_Orig;$/;"	m	class:WED_TCE
mY	.\Network\TerraServer.h	/^	int				mY;$/;"	m	class:AsyncImage
mY	.\UI\XPopup.h	/^		int mX, mY, mW, mH;$/;"	m	class:XPopup
mY	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		int					mX, mY;$/;"	m	class:WED_LibraryPreviewPane
mY	.\WEDMap\WED_Map.h	/^	int				mY;$/;"	m	class:WED_Map
mY	.\WEDTCE\WED_TCE.h	/^	int				mY;$/;"	m	class:WED_TCE
mY1	.\Network\TerraServer.h	/^	int				mY1;$/;"	m	class:AsyncImageLocator
mY1	.\RenderFarmUI\RF_TerraTool.h	/^	int mX1, mX2, mY1, mY2, mDomain, mHas;$/;"	m	class:RF_TerraTool
mY1	.\WEDMap\WED_TerraserverLayer.h	/^	int mX1[NUM_LEVELS], mX2[NUM_LEVELS], mY1[NUM_LEVELS], mY2[NUM_LEVELS], mDomain[NUM_LEVELS], mHas[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mY2	.\Network\TerraServer.h	/^	int				mY2;$/;"	m	class:AsyncImageLocator
mY2	.\RenderFarmUI\RF_TerraTool.h	/^	int mX1, mX2, mY1, mY2, mDomain, mHas;$/;"	m	class:RF_TerraTool
mY2	.\WEDMap\WED_TerraserverLayer.h	/^	int mX1[NUM_LEVELS], mX2[NUM_LEVELS], mY1[NUM_LEVELS], mY2[NUM_LEVELS], mDomain[NUM_LEVELS], mHas[NUM_LEVELS];$/;"	m	class:WED_TerraserverLayer
mYLimit	.\Utils\BWImage.h	/^	int				mYLimit;$/;"	m	struct:BWImage
mY_Orig	.\WEDMap\WED_Map.h	/^	int				mY_Orig;$/;"	m	class:WED_Map
mY_Orig	.\WEDTCE\WED_TCE.h	/^	int				mY_Orig;$/;"	m	class:WED_TCE
mZipFile	.\Utils\MemFileUtils.cpp	/^	unzFile				mZipFile;		\/\/ The open zip archive for zip files$/;"	m	struct:MFFileSet	file:
mZoom	.\WEDLibrary\WED_LibraryPreviewPane.h	/^		float				mZoom;$/;"	m	class:WED_LibraryPreviewPane
mZoomer	.\RenderFarmUI\RF_MapTool.h	/^		RF_MapZoomer *		mZoomer;$/;"	m	class:RF_MapTool
mZoomer	.\RenderFarmUI\RF_MapView.h	/^	RF_MapZoomer *			mZoomer;$/;"	m	class:RF_MapView
mZoomer	.\WEDMap\WED_MapLayer.h	/^	WED_MapZoomerNew *		mZoomer;$/;"	m	class:WED_MapLayer
mZoomer	.\WEDTCE\WED_TCELayer.h	/^	WED_MapZoomerNew *		mZoomer;$/;"	m	class:WED_TCELayer
mZoomer	.\XPTools\ViewObj.cpp	/^	OE_Zoomer3d	mZoomer;$/;"	m	class:XObjWin	file:
m_A	.\DSF\tri_stripper_101\tri_stripper.h	/^		index m_A;$/;"	m	class:triangle_stripper::tri_stripper::triangle
m_A	.\DSF\tri_stripper_101\tri_stripper.h	/^		index m_A;$/;"	m	class:triangle_stripper::tri_stripper::triangle_edge
m_B	.\DSF\tri_stripper_101\tri_stripper.h	/^		index m_B;$/;"	m	class:triangle_stripper::tri_stripper::triangle
m_B	.\DSF\tri_stripper_101\tri_stripper.h	/^		index m_B;$/;"	m	class:triangle_stripper::tri_stripper::triangle_edge
m_C	.\DSF\tri_stripper_101\tri_stripper.h	/^		index m_C;$/;"	m	class:triangle_stripper::tri_stripper::triangle
m_Cache	.\DSF\tri_stripper_101\cache_simulator.h	/^	indices_deque	m_Cache;$/;"	m	class:triangle_stripper::cache_simulator
m_Cache	.\DSF\tri_stripper_101\tri_stripper.h	/^	cache_simulator		m_Cache;$/;"	m	class:triangle_stripper::tri_stripper
m_Compare	.\DSF\tri_stripper_101\heap_array.h	/^	CmpT		m_Compare;$/;"	m	class:common_structures::heap_array
m_Degree	.\DSF\tri_stripper_101\tri_stripper.h	/^		size_t m_Degree;$/;"	m	class:triangle_stripper::tri_stripper::triangle_degree
m_Elem	.\DSF\tri_stripper_101\graph_array.h	/^		arctype			m_Elem;$/;"	m	class:common_structures::graph_array::arc
m_Elem	.\DSF\tri_stripper_101\graph_array.h	/^		nodetype		m_Elem;$/;"	m	class:common_structures::graph_array::node
m_Elem	.\DSF\tri_stripper_101\heap_array.h	/^		T		m_Elem;$/;"	m	struct:common_structures::heap_array::linker
m_Finder	.\DSF\tri_stripper_101\heap_array.h	/^	finder		m_Finder;$/;"	m	class:common_structures::heap_array
m_Heap	.\DSF\tri_stripper_101\heap_array.h	/^	linked_heap	m_Heap;$/;"	m	class:common_structures::heap_array
m_Index	.\DSF\tri_stripper_101\heap_array.h	/^		size_t	m_Index;$/;"	m	struct:common_structures::heap_array::linker
m_Indices	.\DSF\tri_stripper_101\tri_stripper.h	/^		indices			m_Indices;$/;"	m	struct:triangle_stripper::tri_stripper::primitives
m_Initial	.\DSF\tri_stripper_101\graph_array.h	/^		node_iterator	m_Initial;$/;"	m	class:common_structures::graph_array::arc
m_Locked	.\DSF\tri_stripper_101\heap_array.h	/^	bool		m_Locked;$/;"	m	class:common_structures::heap_array
m_Marker	.\DSF\tri_stripper_101\graph_array.h	/^		bool			m_Marker;$/;"	m	class:common_structures::graph_array::arc
m_Marker	.\DSF\tri_stripper_101\graph_array.h	/^		bool			m_Marker;$/;"	m	class:common_structures::graph_array::node
m_MinStripSize	.\DSF\tri_stripper_101\tri_stripper.h	/^	size_t				m_MinStripSize;$/;"	m	class:triangle_stripper::tri_stripper
m_NbArcs	.\DSF\tri_stripper_101\graph_array.h	/^	size_t				m_NbArcs;$/;"	m	class:common_structures::graph_array
m_NbHits	.\DSF\tri_stripper_101\cache_simulator.h	/^	size_t			m_NbHits;$/;"	m	class:triangle_stripper::cache_simulator
m_NextCandidates	.\DSF\tri_stripper_101\tri_stripper.h	/^	triangle_indices	m_NextCandidates;$/;"	m	class:triangle_stripper::tri_stripper
m_Nodes	.\DSF\tri_stripper_101\graph_array.h	/^	std::vector<node>	m_Nodes;$/;"	m	class:common_structures::graph_array
m_OutArcs	.\DSF\tri_stripper_101\graph_array.h	/^		std::list<arc>	m_OutArcs;$/;"	m	class:common_structures::graph_array::node
m_PrimitivesVector	.\DSF\tri_stripper_101\tri_stripper.h	/^	primitives_vector	m_PrimitivesVector;$/;"	m	class:triangle_stripper::tri_stripper
m_ReceiverObj	.\UI\XWin32DND.h	/^   XWinFileReceiver * m_ReceiverObj;$/;"	m	class:CDropTarget
m_Size	.\DSF\tri_stripper_101\tri_stripper.h	/^		size_t		m_Size;$/;"	m	class:triangle_stripper::tri_stripper::triangle_strip
m_StartOrder	.\DSF\tri_stripper_101\tri_stripper.h	/^		start_order	m_StartOrder;$/;"	m	class:triangle_stripper::tri_stripper::triangle_strip
m_StartTriPos	.\DSF\tri_stripper_101\tri_stripper.h	/^		size_t		m_StartTriPos;$/;"	m	class:triangle_stripper::tri_stripper::triangle_strip
m_StripID	.\DSF\tri_stripper_101\tri_stripper.h	/^		size_t m_StripID;$/;"	m	class:triangle_stripper::tri_stripper::triangle
m_StripID	.\DSF\tri_stripper_101\tri_stripper.h	/^	size_t				m_StripID;$/;"	m	class:triangle_stripper::tri_stripper
m_Terminal	.\DSF\tri_stripper_101\graph_array.h	/^		node_iterator	m_Terminal;$/;"	m	class:common_structures::graph_array::arc
m_TriHeap	.\DSF\tri_stripper_101\tri_stripper.h	/^	triangles_heap		m_TriHeap;$/;"	m	class:triangle_stripper::tri_stripper
m_TriIndices	.\DSF\tri_stripper_101\tri_stripper.h	/^	const indices &		m_TriIndices;$/;"	m	class:triangle_stripper::tri_stripper
m_TriPos	.\DSF\tri_stripper_101\tri_stripper.h	/^		size_t m_TriPos;$/;"	m	class:triangle_stripper::tri_stripper::triangle_degree
m_TriPos	.\DSF\tri_stripper_101\tri_stripper.h	/^		size_t m_TriPos;$/;"	m	class:triangle_stripper::tri_stripper::triangle_edge
m_Triangles	.\DSF\tri_stripper_101\tri_stripper.h	/^	triangles_graph		m_Triangles;$/;"	m	class:triangle_stripper::tri_stripper
m_Type	.\DSF\tri_stripper_101\tri_stripper.h	/^		primitive_type	m_Type;$/;"	m	struct:triangle_stripper::tri_stripper::primitives
m_Window	.\UI\XWin32DND.h	/^   HWND 			  m_Window;$/;"	m	class:CDropTarget
m_a_cuts	.\XESCore\BlockFill.cpp	/^	vector<double>			m_a_cuts;$/;"	m	class:candy_bar	file:
m_a_divs	.\XESCore\BlockFill.cpp	/^	int						m_a_divs;$/;"	m	class:candy_bar	file:
m_abspath	.\linuxinit\initializer.cpp	/^volatile char* Initializer::m_abspath = 0;$/;"	m	class:Initializer	file:
m_abspath	.\linuxinit\initializer.h	/^	static volatile char* m_abspath;$/;"	m	class:Initializer
m_b_cuts	.\XESCore\BlockFill.cpp	/^	vector<double>			m_b_cuts;$/;"	m	class:candy_bar	file:
m_b_divs	.\XESCore\BlockFill.cpp	/^	int						m_b_divs;$/;"	m	class:candy_bar	file:
m_cRef	.\GUI\GUI_Window.cpp	/^	ULONG m_cRef;$/;"	m	class:GUI_DropSource	file:
m_cRefCount	.\UI\XWin32DND.h	/^   ULONG m_cRefCount;$/;"	m	class:CDropTarget
m_cert	.\Network\curl_http.h	/^		string					m_cert;$/;"	m	class:curl_http_get_file
m_dest_buffer	.\Network\curl_http.h	/^		vector<char>*			m_dest_buffer;$/;"	m	class:curl_http_get_file
m_dest_path	.\Network\curl_http.h	/^		string					m_dest_path;$/;"	m	class:curl_http_get_file
m_dirname	.\linuxinit\initializer.cpp	/^volatile char* Initializer::m_dirname = 0;$/;"	m	class:Initializer	file:
m_dirname	.\linuxinit\initializer.h	/^	static volatile char* m_dirname;$/;"	m	class:Initializer
m_dl_buffer	.\Network\curl_http.h	/^		vector<char>			m_dl_buffer;$/;"	m	class:curl_http_get_file
m_errcode	.\Network\curl_http.h	/^		volatile	int			m_errcode;$/;"	m	class:curl_http_get_file
m_fAcceptFmt	.\UI\XWin32DND.h	/^   BOOL m_fAcceptFmt;$/;"	m	class:CDropTarget
m_halt	.\Network\curl_http.h	/^		volatile	int			m_halt;$/;"	m	class:curl_http_get_file
m_homedir	.\linuxinit\initializer.cpp	/^volatile char* Initializer::m_homedir = 0;$/;"	m	class:Initializer	file:
m_homedir	.\linuxinit\initializer.h	/^	static volatile char* m_homedir;$/;"	m	class:Initializer
m_inhandler	.\linuxinit\initializer.cpp	/^volatile sig_atomic_t Initializer::m_inhandler = 0;$/;"	m	class:Initializer	file:
m_inhandler	.\linuxinit\initializer.h	/^	static volatile sig_atomic_t m_inhandler;$/;"	m	class:Initializer
m_init	.\linuxinit\initializer.cpp	/^volatile bool Initializer::m_init = false;$/;"	m	class:Initializer	file:
m_init	.\linuxinit\initializer.h	/^	static volatile bool m_init;$/;"	m	class:Initializer
m_last_data_time	.\Network\curl_http.h	/^		time_t					m_last_data_time;$/;"	m	class:curl_http_get_file
m_last_dl_amount	.\Network\curl_http.h	/^		double					m_last_dl_amount;$/;"	m	class:curl_http_get_file
m_pDropTargetHelper	.\UI\XWin32DND.h	/^   IDropTargetHelper *m_pDropTargetHelper;$/;"	m	class:CDropTarget
m_part_idx	.\XESCore\BlockFill.cpp	/^	vector<int>				m_part_idx;$/;"	m	class:candy_bar	file:
m_parts	.\XESCore\BlockFill.cpp	/^	vector<BLOCK_face_data>	m_parts;$/;"	m	class:candy_bar	file:
m_post	.\Network\curl_http.h	/^		string					m_post;$/;"	m	class:curl_http_get_file
m_programname	.\linuxinit\initializer.cpp	/^volatile char* Initializer::m_programname = 0;$/;"	m	class:Initializer	file:
m_programname	.\linuxinit\initializer.h	/^	static volatile char* m_programname;$/;"	m	class:Initializer
m_progress	.\Network\curl_http.h	/^		volatile	int			m_progress;		\/\/ Out of 100$/;"	m	class:curl_http_get_file
m_put	.\Network\curl_http.h	/^		string					m_put;$/;"	m	class:curl_http_get_file
m_status	.\Network\curl_http.h	/^		volatile	int			m_status;$/;"	m	class:curl_http_get_file
m_thread	.\Network\curl_http.h	/^		HANDLE					m_thread;$/;"	m	class:curl_http_get_file
m_thread	.\Network\curl_http.h	/^		pthread_t				m_thread;$/;"	m	class:curl_http_get_file
m_url	.\Network\curl_http.h	/^		string					m_url;$/;"	m	class:curl_http_get_file
magic	.\Obj\XObjWriteEmbedded.cpp	/^	char	magic[4];$/;"	m	struct:master_header_t	file:
magic	.\Utils\MemFileUtils.cpp	/^  char magic[6];		\/* 257 *\/$/;"	m	struct:tar_header	file:
main	.\DSFTools\DSFToolCmdLine.cpp	/^int main(int argc, char * argv[])$/;"	f
main	.\MeshTool\MeshTool.cpp	/^int	main(int argc, char * argv[])$/;"	f
main	.\OneOffs\GenTerrain.c	/^int main(int argc, char ** argv)$/;"	f
main	.\OneOffs\SplitImage.c	/^int main(int argc, char ** argv)$/;"	f
main	.\OneOffs\gen_roads.cpp	/^int main(int argc, char * argv[])$/;"	f
main	.\OneOffs\gen_roads10.cpp	/^int main(int argc, const char ** argv)$/;"	f
main	.\OneOffs\gen_tiles.c	/^int main(int argc, const char * argv[])$/;"	f
main	.\OneOffs\genpath.c	/^int main(int argc, char * argv[])$/;"	f
main	.\OneOffs\make_fill_rules.c	/^int main(int argc, const char * argv[])$/;"	f
main	.\OneOffs\osm2shape.c	/^int main(int argc, const char * argv[])$/;"	f
main	.\OneOffs\osm_tile.c	/^int main(int argc, const char * argv[])$/;"	f
main	.\OneOffs\shape2xon.cpp	/^int main(int argc, const char * argv[])$/;"	f
main	.\TigerTools\TIGERIndex.cpp	/^int	main(int argc, char ** argv)$/;"	f
main	.\UI\XGUIApp.cpp	/^int		main(int argc, char ** argv)$/;"	f
main	.\UI\XGUIApp.cpp	/^int main(int argc, char* argv[])$/;"	f
main	.\UI\XGrinderApp.cpp	/^int		main(int argc, char ** argv)$/;"	f
main	.\UI\XGrinderApp.cpp	/^int main(int argc, char* argv[])$/;"	f
main	.\UI\XWidgetApp.cpp	/^int		main(int argc, char ** argv)$/;"	f
main	.\XESTools\GISTool copy.cpp	/^int	main(int argc, char * argv[])$/;"	f
main	.\XESTools\GISTool.cpp	/^int	main(int argc, char * argv[])$/;"	f
main	.\XPTools\ConvertObj.cpp	/^int main(int argc, char * argv[])$/;"	f
main	.\XPTools\DDSTool.cpp	/^int main(int argc, char * argv[])$/;"	f
main	.\lib_json\src\jsontestrunner\main.cpp	/^int main( int argc, const char *argv[] )$/;"	f
main	.\lib_json\src\test_lib_json\main.cpp	/^int main( int argc, const char *argv[] )$/;"	f
major	.\XESCore\TensorRoads.cpp	/^	bool		major;$/;"	m	struct:TensorSeed	file:
major_axis	.\XESCore\BlockDefs.h	/^	Vector2	major_axis;$/;"	m	struct:BLOCK_face_data
make	.\lib_json\src\lib_json\json_value.cpp	/^Path::make( Value &root ) const$/;"	f	class:Json::Path
makePath	.\lib_json\src\lib_json\json_value.cpp	/^Path::makePath( const std::string &path,$/;"	f	class:Json::Path
make_anim_group	.\AC3DPlugins\obj_anim.cpp	/^static void make_anim_group(void)$/;"	f	file:
make_anim_of_type	.\AC3DPlugins\obj_anim.cpp	/^static void make_anim_of_type(int argc, char * argv[])$/;"	f	file:
make_bbox	.\OneOffs\osm_tile.c	/^bbox_t make_bbox(int w, int s, int e, int n)$/;"	f
make_blade	.\OneOffs\gen_roads.cpp	/^void	make_blade(int s1, int s2, float y1, float y2, tex_info * t) { get_top()->accept(new road_blade	(s1,s2,y1,y2,t)); }$/;"	f
make_cache_file_path	.\Utils\GISUtils.cpp	/^void	make_cache_file_path(const char * cache_base, int west, int south, const char * cache_name, char path[1024])$/;"	f
make_car	.\OneOffs\gen_roads.cpp	/^void	make_car(int r, int p, int s, float d, int t) { last->add_car(r,p,s,d,t); }$/;"	f
make_conforming_any	.\XESCore\MeshConformer.h	/^  void make_conforming_any()$/;"	f	class:CGAL::Triangulation_conformer_any_2
make_conforming_any_2	.\XESCore\MeshConformer.h	/^make_conforming_any_2(Tr& t)$/;"	f	namespace:CGAL
make_deck	.\OneOffs\gen_roads.cpp	/^void	make_deck(int s1, int s2, tex_info * t, const char * s) { get_top()->accept(last = new road_deck	(s1,s2,t,s)); }$/;"	f
make_deck_draped	.\OneOffs\gen_roads10.h	/^road	make_deck_draped(shader& shad, const lod_range& lod, const vert_props& len,$/;"	f
make_deck_graded	.\OneOffs\gen_roads10.h	/^road	make_deck_graded(shader& shad, const lod_range& lod, const vert_props& len,$/;"	f
make_draped	.\OneOffs\gen_roads10.h	/^void	make_draped(const string& name, int vt, float pitch, float roll, float schedule[])$/;"	f
make_draped_only	.\OneOffs\gen_roads10.h	/^void	make_draped_only(const string& name, int vt, float pitch)$/;"	f
make_exclusion	.\WEDImportExport\WED_DSFImport.cpp	/^	void make_exclusion(const char * ex, int k)$/;"	f	class:DSF_Importer
make_gaussian_kernel	.\XESCore\DEMAlgs.cpp	/^static void make_gaussian_kernel(float k[], int width, double sigma)$/;"	f	file:
make_graded	.\OneOffs\gen_roads10.h	/^void	make_graded(const string& name, int vt, float pitch, float schedule[])$/;"	f
make_index_seq	.\XESCore\BezierApprox.cpp	/^void make_index_seq(__Seq seq, PolyLineIndex& out_index)$/;"	f
make_labeled_entry	.\AC3DPlugins\XPlaneSupport.tcl	/^proc make_labeled_entry { path name var width } {$/;"	p
make_labeled_entry_pair	.\AC3DPlugins\XPlaneSupport.tcl	/^proc make_labeled_entry_pair { path name1 var1 name2 var2 } {$/;"	p
make_obj	.\OneOffs\gen_roads10.h	/^road make_obj(const char * name, grading_type grad, float lat1, float lat2, float psi1, float psi2, float off1, float off2, float spa1, float spa2, float frq1, float frq2, perlin_params * noise)$/;"	f
make_one_pol	.\WEDCore\WED_Orthophoto.cpp	/^static void make_one_pol(WED_OverlayImage * image, const vector<Polygon2>& area, WED_Thing * wrl, WED_ResourceMgr * rmgr)$/;"	f	file:
make_res_path	.\Obj\XObjWriteEmbedded.cpp	/^static void make_res_path(string& path)$/;"	f	file:
make_spacer	.\OneOffs\gen_roads.cpp	/^void 	make_spacer(float f)	{	get_top()->accept(new road_spacer	(f)); }$/;"	f
make_strip_order	.\Obj\ObjConvert.cpp	/^void make_strip_order(vector<INDEX_T>& indices)$/;"	f
make_terrain_package_HELP	.\XESTools\GISTool_MiscCmds.cpp	491;"	d	file:
make_texture	.\Utils\QuiltUtils.cpp	/^void	make_texture($/;"	f
make_transparent	.\AC3DPlugins\bitmap_match.cpp	/^int make_transparent(ACImage * im)$/;"	f
make_wire	.\OneOffs\gen_roads10.h	/^road make_wire(lod_range r, float lat, float y, float d)$/;"	f
mangle_name	.\GUI\GUI_Resources.cpp	/^static char* mangle_name (const char* filename, const char* suffix)$/;"	f	file:
manip	.\Obj\XObjBuilder.h	/^	manip_data	manip;				manip_data	o_manip;$/;"	m	class:XObjBuilder
manip_axis	.\AC3DPlugins\obj_model.h	/^	manip_axis = 2,$/;"	e	enum:__anon3
manip_axis_2d	.\AC3DPlugins\obj_model.h	/^	manip_axis_2d = 3,$/;"	e	enum:__anon3
manip_command	.\AC3DPlugins\obj_model.h	/^	manip_command = 4,$/;"	e	enum:__anon3
manip_command_axis	.\AC3DPlugins\obj_model.h	/^	manip_command_axis = 5,$/;"	e	enum:__anon3
manip_data	.\Obj\XObjBuilder.cpp	/^XObjBuilder::manip_data::manip_data() : attr(attr_Manip_None)$/;"	f	class:XObjBuilder::manip_data
manip_data	.\Obj\XObjBuilder.cpp	/^XObjBuilder::manip_data::manip_data(const manip_data& rhs) : attr(rhs.attr), data(rhs.data)$/;"	f	class:XObjBuilder::manip_data
manip_data	.\Obj\XObjBuilder.cpp	/^XObjBuilder::manip_data::manip_data(int a, XObjManip8& rhs) : attr(a), data(rhs)$/;"	f	class:XObjBuilder::manip_data
manip_data	.\Obj\XObjBuilder.h	/^	struct manip_data {$/;"	s	class:XObjBuilder
manip_dref_delta	.\AC3DPlugins\obj_model.h	/^	manip_dref_delta = 10,$/;"	e	enum:__anon3
manip_dref_push	.\AC3DPlugins\obj_model.h	/^	manip_dref_push = 7,$/;"	e	enum:__anon3
manip_dref_radio	.\AC3DPlugins\obj_model.h	/^	manip_dref_radio = 8,$/;"	e	enum:__anon3
manip_dref_toggle	.\AC3DPlugins\obj_model.h	/^	manip_dref_toggle = 9,$/;"	e	enum:__anon3
manip_dref_wrap	.\AC3DPlugins\obj_model.h	/^	manip_dref_wrap = 11$/;"	e	enum:__anon3
manip_none	.\AC3DPlugins\obj_model.h	/^	manip_none = 0,$/;"	e	enum:__anon3
manip_noop	.\AC3DPlugins\obj_model.h	/^	manip_noop = 6,$/;"	e	enum:__anon3
manip_panel	.\AC3DPlugins\obj_model.h	/^	manip_panel = 1,$/;"	e	enum:__anon3
manips	.\Obj\XObjDefs.h	/^	vector<XObjManip8>		manips;$/;"	m	struct:XObj8
map2block	.\XESCore\BlockFill.cpp	99;"	d	file:
map_	.\lib_json\include\json\value.h	/^         ObjectValues *map_;$/;"	m	union:Json::Value::ValueHolder
map_	.\lib_json\include\json\value.h	/^         ValueInternalMap *map_;$/;"	m	struct:Json::ValueInternalMap::IteratorState
map_	.\lib_json\include\json\value.h	/^         ValueInternalMap *map_;$/;"	m	union:Json::Value::ValueHolder
map_	.\lib_json\include\json\value.h	/^         ValueInternalMap::IteratorState map_;$/;"	m	union:Json::ValueIteratorBase::__anon34
map_height_from_plane	.\AC3DPlugins\uv_mapper.cpp	/^static void		map_height_from_plane(VertexMap& map, const cgd::Plane3& proj_plane)$/;"	f	file:
map_iterator	.\Utils\STLUtils.h	/^	typedef typename map_type::iterator				map_iterator;$/;"	t	class:pqueue
map_object	.\AC3DPlugins\uv_mapper.cpp	/^void		map_object(ACObject * ob, VertexMap& map, BackMap& back)$/;"	f
map_rgb	.\XESCore\DEMTables.h	/^	RGBColor_t		map_rgb;$/;"	m	struct:NaturalTerrainInfo_t
map_s_on_tri	.\AC3DPlugins\uv_mapper.cpp	/^static void		map_s_on_tri(VertexMap& map, const cgd::Plane3& proj_plane, const cgd::Point3 corners[3], const cgd::Point2 sts[3])$/;"	f	file:
map_surface	.\AC3DPlugins\uv_mapper.cpp	/^static void		map_surface(Surface * surf, VertexMap& map, BackMap& back)$/;"	f	file:
map_t_from_heights	.\AC3DPlugins\uv_mapper.cpp	/^static void		map_t_from_heights(VertexMap& map, const cgd::Plane3& lateral_plane)$/;"	f	file:
map_type	.\Utils\STLUtils.h	/^	typedef	multimap<priority_type,value_type>		map_type;$/;"	t	class:pqueue
map_value_type	.\Utils\STLUtils.h	/^	typedef typename map_type::value_type			map_value_type;$/;"	t	class:pqueue
map_x_from	.\XESCore\DEMDefs.h	/^inline int	DEMGeo::map_x_from(const DEMGeo& src, int x) const$/;"	f	class:DEMGeo
map_y_from	.\XESCore\DEMDefs.h	/^inline int	DEMGeo::map_y_from(const DEMGeo& src, int y) const$/;"	f	class:DEMGeo
mark	.\DSF\tri_stripper_101\graph_array.h	/^		arc & mark()									{ m_Marker = true; return (* this); }$/;"	f	class:common_structures::graph_array::arc
mark	.\DSF\tri_stripper_101\graph_array.h	/^		node & mark()									{ m_Marker = true; return (* this); }$/;"	f	class:common_structures::graph_array::node
mark1	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum				mark1;$/;"	m	class:WED_Runway
mark2	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum				mark2;$/;"	m	class:WED_Runway
mark_face	.\RawImport\ShapeIO.cpp	/^	virtual	void	mark_face(const Prop_t& in_properties, Face_handle face)$/;"	f	class:toggle_properties_visitor
mark_face	.\XESCore\BlockAlgs.cpp	/^	virtual	void	mark_face(const Prop_t& in_properties, Block_2::Face_handle face)$/;"	f	class:apply_properties_visitor
mark_is_locked	.\XESCore\Zoning.cpp	/^int mark_is_locked(Vertex_handle v, NT coord, const set<double>& locked_pts)$/;"	f
marked	.\DSF\tri_stripper_101\graph_array.h	/^		bool marked() const								{ return m_Marker; }$/;"	f	class:common_structures::graph_array::arc
marked	.\DSF\tri_stripper_101\graph_array.h	/^		bool marked() const								{ return m_Marker; }$/;"	f	class:common_structures::graph_array::node
markers	.\OneOffs\gen_roads10.h	/^	vector<road_center_marker>	markers;$/;"	m	class:road
marking_code	.\XESCore\AptDefs.h	/^	int			marking_code;$/;"	m	struct:AptHelipad_t
marking_code	.\XESCore\AptDefs.h	/^	int			marking_code;$/;"	m	struct:AptPavement_t
marking_code	.\XESCore\AptDefs.h	/^	int			marking_code[2];$/;"	m	struct:AptRunway_t
markings	.\WEDEntities\WED_Helipad.h	/^	WED_PropIntEnum		markings;$/;"	m	class:WED_Helipad
marquee_mode_t	.\WEDMap\WED_MarqueeTool.h	/^enum marquee_mode_t {$/;"	g
mask_with	.\XESCore\Airports.cpp	/^static void mask_with(DEMGeo& dst, const DEMGeo& src)$/;"	f	file:
masterBlobzip	.\WEDImportExport\WED_VerTable.h	/^	vector<char> masterBlobzip;$/;"	m	struct:VerInfo_t
master_base	.\Installer\BuildInstaller.cpp	/^	string	master_base;$/;"	m	struct:InstallerStat	file:
master_header_t	.\Obj\XObjWriteEmbedded.cpp	/^struct master_header_t {$/;"	s	file:
masters	.\Utils\PolyRasterUtils.h	/^	vector<PolyRasterSeg>		masters;$/;"	m	struct:PolyRasterizer
match	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::match( Location pattern, $/;"	f	class:Json::Reader
match_border	.\XESCore\MeshAlgs.cpp	/^void	match_border(CDT& ioMesh, mesh_match_t& ioBorder, int side_num)$/;"	f
match_mode	.\XPTools\TaxiMaker.cpp	/^	int						match_mode;	\/\/ What mode must we be in to use this??$/;"	m	struct:taxi_element_t	file:
match_pred_f	.\XESCore\NetHelpers.h	/^typedef bool (* match_pred_f)(Pmwx::Halfedge_handle h1, Pmwx::Halfedge_handle h2);$/;"	t
match_str_attr	.\OneOffs\osm2shape.c	/^static int match_str_attr(const char * key, const char * values[], const XML_Char ** atts)$/;"	f	file:
match_str_attr	.\OneOffs\osm_tile.c	/^int match_str_attr(const char * key, const char * values[], const XML_Char ** atts)$/;"	f
matches_any	.\XESCore\NetHelpers.h	/^inline bool matches_any(Pmwx::Halfedge_handle he1, Pmwx::Halfedge_handle he2) { return true; }$/;"	f
matches_limited_access	.\XESCore\NetHelpers.h	/^inline bool matches_limited_access(Pmwx::Halfedge_handle he1, Pmwx::Halfedge_handle he2)$/;"	f
matches_rep_type	.\XESCore\NetHelpers.h	/^inline bool matches_rep_type(Pmwx::Halfedge_handle he1, Pmwx::Halfedge_handle he2)$/;"	f
matches_street	.\XESCore\NetHelpers.h	/^inline bool matches_street(Pmwx::Halfedge_handle he1, Pmwx::Halfedge_handle he2)$/;"	f
matches_use	.\XESCore\NetHelpers.h	/^inline bool matches_use(Pmwx::Halfedge_handle he1, Pmwx::Halfedge_handle he2)$/;"	f
maxCP	.\GUI\GUI_Laftfont.h	/^		unsigned short	maxCP;$/;"	m	class:GUI_Laftfont
maxInt	.\lib_json\include\json\value.h	/^      static const Int maxInt;$/;"	m	class:Json::Value
maxInt	.\lib_json\src\lib_json\json_value.cpp	/^const Int Value::maxInt = Int( UInt(-1)\/2 );$/;"	m	class:Json::Value	file:
maxInt64	.\lib_json\include\json\value.h	/^      static const Int64 maxInt64;$/;"	m	class:Json::Value
maxInt64	.\lib_json\src\lib_json\json_value.cpp	/^const Int64 Value::maxInt64 = Int64( UInt64(-1)\/2 );$/;"	m	class:Json::Value	file:
maxLargestInt	.\lib_json\include\json\value.h	/^      static const LargestInt maxLargestInt;$/;"	m	class:Json::Value
maxLargestInt	.\lib_json\src\lib_json\json_value.cpp	/^const LargestInt Value::maxLargestInt = LargestInt( LargestUInt(-1)\/2 );$/;"	m	class:Json::Value	file:
maxLargestUInt	.\lib_json\include\json\value.h	/^      static const LargestUInt maxLargestUInt;$/;"	m	class:Json::Value
maxLargestUInt	.\lib_json\src\lib_json\json_value.cpp	/^const LargestUInt Value::maxLargestUInt = LargestUInt(-1);$/;"	m	class:Json::Value	file:
maxUInt	.\lib_json\include\json\value.h	/^      static const UInt maxUInt;$/;"	m	class:Json::Value
maxUInt	.\lib_json\src\lib_json\json_value.cpp	/^const UInt Value::maxUInt = UInt(-1);$/;"	m	class:Json::Value	file:
maxUInt64	.\lib_json\include\json\value.h	/^      static const UInt64 maxUInt64;$/;"	m	class:Json::Value
maxUInt64	.\lib_json\src\lib_json\json_value.cpp	/^const UInt64 Value::maxUInt64 = UInt64(-1);$/;"	m	class:Json::Value	file:
max_center_agl	.\XESCore\NetTables.h	/^	float		max_center_agl;$/;"	m	struct:BridgeInfo
max_code	.\XESCore\NetAlgs.cpp	/^int	max_code(int num_hes, int num_levels)$/;"	f
max_density	.\XESCore\NetTables.h	/^	float		max_density;$/;"	m	struct:Feature2RepInfo
max_ele	.\XESCore\DEMIO.cpp	1712;"	d	file:
max_err	.\XESCore\MeshSimplify.h	/^	double			max_err;$/;"	m	class:MeshSimplify
max_err	.\XESCore\NetTables.h	/^	float		max_err;$/;"	m	struct:NetRepInfo
max_error	.\XESCore\MeshAlgs.h	/^	float	max_error;$/;"	m	struct:MeshPrefs_t
max_files_use	.\OneOffs\osm_tile.c	/^static int max_files_use = 16;$/;"	v	file:
max_height	.\GUI\GUI_Laftfont.h	/^		int		max_height;$/;"	m	class:GUI_Laftfont
max_height	.\XESCore\Zoning.h	/^	float		max_height;$/;"	m	struct:FillRule_t
max_lat	.\XESCore\DEMTables.h	/^	float		max_lat;$/;"	m	struct:BeachInfo_t
max_length	.\XESCore\NetTables.h	/^	float		max_length;$/;"	m	struct:BridgeInfo
max_lod	.\Obj\XObjWriteEmbedded.cpp	/^	float			max_lod;$/;"	m	struct:embed_props_t	file:
max_node_refs	.\OneOffs\osm2shape.c	/^static int max_node_refs = 0;$/;"	v	file:
max_params	.\XESTools\GISTool_Utils.cpp	/^	int						max_params;$/;"	m	struct:GISTool_CmdInfo_t	file:
max_pitch	.\OneOffs\gen_roads10.h	/^	float max_pitch;$/;"	m	class:virtual_table
max_points	.\XESCore\MeshAlgs.h	/^	int		max_points;$/;"	m	struct:MeshPrefs_t
max_rail	.\XESCore\NetTables.h	/^	float		max_rail;$/;"	m	struct:Feature2RepInfo
max_rain	.\XESCore\DEMTables.h	/^	float		max_rain;$/;"	m	struct:BeachInfo_t
max_rel_refs	.\OneOffs\osm2shape.c	/^static int max_rel_refs = 0;$/;"	v	file:
max_roll	.\OneOffs\gen_roads10.h	/^	float max_roll;$/;"	m	class:virtual_table
max_sea	.\XESCore\DEMTables.h	/^	float		max_sea;$/;"	m	struct:BeachInfo_t
max_seg_count	.\XESCore\NetTables.h	/^	float		max_seg_count;$/;"	m	struct:BridgeInfo
max_seg_length	.\XESCore\NetTables.h	/^	float		max_seg_length;$/;"	m	struct:BridgeInfo
max_side_len	.\XESCore\Zoning.h	/^	float		max_side_len;$/;"	m	struct:FillRule_t
max_side_len	.\XESCore\Zoning.h	/^	float		max_side_len;$/;"	m	struct:ZoningRule_t
max_side_major	.\XESCore\Zoning.h	/^	float		max_side_major;$/;"	m	struct:FillRule_t
max_side_major	.\XESCore\Zoning.h	/^	float		max_side_major;$/;"	m	struct:ZoningRule_t
max_side_minor	.\XESCore\Zoning.h	/^	float		max_side_minor;$/;"	m	struct:FillRule_t
max_side_minor	.\XESCore\Zoning.h	/^	float		max_side_minor;$/;"	m	struct:ZoningRule_t
max_slope	.\XESCore\DEMTables.h	/^	float		max_slope;$/;"	m	struct:BeachInfo_t
max_slope	.\XESCore\Zoning.h	/^	float		max_slope;								\/\/ Exclude areas that have slope > this value$/;"	m	struct:ZoningInfo_t
max_speed_knots	.\XESCore\AptDefs.h	/^	int				max_speed_knots;$/;"	m	struct:AptWindRule_t
max_start_agl	.\XESCore\NetTables.h	/^	float		max_start_agl;$/;"	m	struct:BridgeInfo
max_temp	.\XESCore\DEMTables.h	/^	float		max_temp;$/;"	m	struct:BeachInfo_t
max_tex_size	.\Utils\TexUtils.cpp	/^	int		max_tex_size;$/;"	m	struct:gl_info_t	file:
max_tri_size_m	.\XESCore\MeshAlgs.h	/^	float	max_tri_size_m;$/;"	m	struct:MeshPrefs_t
max_turn_concave	.\XESCore\DEMTables.h	/^	float		max_turn_concave;$/;"	m	struct:BeachInfo_t
max_turn_convex	.\XESCore\DEMTables.h	/^	float		max_turn_convex;$/;"	m	struct:BeachInfo_t
max_v	.\AC3DPlugins\obj_anim.cpp	/^	float		max_v;$/;"	m	struct:dataref_info	file:
max_way_refs	.\OneOffs\osm2shape.c	/^static int max_way_refs = 0;$/;"	v	file:
max_x	.\OneOffs\gen_roads10.h	/^	inline float	max_x() const { return max(x[0],x[1]); }$/;"	f	struct:road_segment
max_x	.\OneOffs\gen_roads10.h	/^	inline float max_x(void) const { $/;"	f	class:road
maxp	.\XESTools\GISTool_Utils.h	/^	int					maxp;$/;"	m	struct:GISTool_RegCmd_t
maxv	.\WEDCore\WED_PropertyHelper.h	/^	int						maxv;$/;"	m	class:WED_PropIntEnumSetFilter
me	.\AC3DPlugins\uv_mapper.cpp	/^	SVertex *						me;				\/\/ Underlying ac3d vertex$/;"	m	struct:uv_vertex_info_t	file:
measure_ring_node	.\XESCore\BlockFill.cpp	/^double measure_ring_node(ring_node<__InputIterator> * node, const __MeasureFunctor& measure)$/;"	f
mem	.\Installer\InstallerProcs.h	/^	char *		mem;$/;"	m	struct:InstallerChunk
mem	.\OneOffs\gen_tiles.c	/^char *		mem;$/;"	v
mem_block	.\Obj\XObjWriteEmbedded.cpp	/^ 	 mem_block(int len) { begin = (unsigned char *) malloc(len); end = begin; lim = end + len; }$/;"	f	struct:mem_block
mem_block	.\Obj\XObjWriteEmbedded.cpp	/^struct	mem_block {$/;"	s	file:
mem_fill_input_buffer	.\Utils\BitmapUtils.cpp	/^METHODDEF(boolean) mem_fill_input_buffer (j_decompress_ptr cinfo)$/;"	f
mem_init_source	.\Utils\BitmapUtils.cpp	/^METHODDEF(void) mem_init_source (j_decompress_ptr cinfo)$/;"	f
mem_skip_input_data	.\Utils\BitmapUtils.cpp	/^METHODDEF(void) mem_skip_input_data (j_decompress_ptr cinfo, long num_bytes)$/;"	f
mem_source_mgr	.\Utils\BitmapUtils.cpp	/^} mem_source_mgr;$/;"	t	typeref:struct:__anon87	file:
mem_src_ptr	.\Utils\BitmapUtils.cpp	/^typedef mem_source_mgr *  mem_src_ptr;$/;"	t	file:
mem_term_source	.\Utils\BitmapUtils.cpp	/^METHODDEF(void) mem_term_source (j_decompress_ptr cinfo)$/;"	f
memstreambuf	.\Utils\MemIStreamBuf.h	/^typedef	basic_memstreambuf<char, char_traits<char> >  memstreambuf;$/;"	t	namespace:std
menu	.\XPTools\XGrinderShell.cpp	/^	xmenu					menu;$/;"	m	struct:flag_menu_info	file:
menu_item_pick	.\UI\ObjCUtils.h	/^		void (*		menu_item_pick)(void * info, int cmd);$/;"	m	struct:app_callbacks
menu_item_update	.\UI\ObjCUtils.h	/^		void (*		menu_item_update)(void * info, int cmd, char * io_name, int * io_check, int * io_enable);$/;"	m	struct:app_callbacks
merge	.\XESCore\Zoning.cpp	/^void			FaceGraph_t::merge(FaceNode_t * f1, FaceNode_t * f2, list<EdgeNode_t *>& out_neighbors)$/;"	f	class:FaceGraph_t
merge_approx	.\XESCore\BezierApprox.cpp	/^approx_t * merge_approx(possible_approx_t * who, possible_approx_q * q, double err_lim)$/;"	f
merge_left	.\XESCore\BezierApprox.cpp	/^	possible_approx_t *		merge_left;		\/\/ ptr into future approximations, so that if$/;"	m	struct:approx_t	file:
merge_params	.\XESCore\MapOverlay.cpp	/^void merge_params(GISParamMap& out, const GISParamMap& lhs, const GISParamMap& rhs)$/;"	f
merge_right	.\XESCore\BezierApprox.cpp	/^	possible_approx_t *		merge_right;	\/\/ we are merged out, we can "find" ourselves.$/;"	m	struct:approx_t	file:
mesh	.\XESCore\MeshSimplify.h	/^	CDT&			mesh;$/;"	m	class:MeshSimplify
mesh	.\XESCore\TriFan.h	/^	CDT *						mesh;				\/\/ Our mesh$/;"	m	class:TriFanBuilder
mesh_error_f	.\XESCore\MeshSimplify.h	/^typedef double (*mesh_error_f)(const Point_2& p, const Point_2& q, const Point_2& r);$/;"	t
mesh_match_edge_t	.\XESCore\MeshAlgs.cpp	/^struct	mesh_match_edge_t {$/;"	s	file:
mesh_match_t	.\XESCore\MeshAlgs.cpp	/^struct	mesh_match_t {$/;"	s	file:
mesh_match_vertex_t	.\XESCore\MeshAlgs.cpp	/^struct	mesh_match_vertex_t {$/;"	s	file:
mesh_rain	.\XESCore\MeshDefs.h	/^	float			mesh_rain;$/;"	m	struct:MeshFaceInfo
mesh_temp	.\XESCore\MeshDefs.h	/^	float			mesh_temp;				\/\/ These are not debug - beach code uses this.$/;"	m	struct:MeshFaceInfo
mesh_tex	.\WEDCore\WED_ResourceMgr.h	/^	string			mesh_tex;$/;"	m	struct:agp_t
mesh_to_pmwx_he	.\XESCore\MeshAlgs.cpp	/^Pmwx::Halfedge_handle	mesh_to_pmwx_he(CDT& ioMesh, CDT::Edge& e)$/;"	f
messageTarget_	.\lib_json\src\test_lib_json\jsontest.h	/^      Failure *messageTarget_;$/;"	m	class:JsonTest::TestResult
message_	.\lib_json\include\json\reader.h	/^         std::string message_;$/;"	m	class:Json::Reader::ErrorInfo
message_	.\lib_json\src\test_lib_json\jsontest.h	/^      std::string message_;$/;"	m	class:JsonTest::Failure
method	.\Utils\zip.c	/^    int  method;                \/* compression method of file currenty wr.*\/$/;"	m	struct:__anon104	file:
metrics	.\GUI\GUI_Resources.cpp	/^	GUI_TexPosition_t	metrics;$/;"	m	struct:TexInfo	file:
mf_	.\SDTS\SDTSReadTVP.cpp	/^	MFMemFile * mf_;$/;"	m	struct:StMemFile	file:
mf_BadFile	.\Utils\MemFileUtils.h	/^	mf_BadFile,$/;"	e	enum:__anon92
mf_CheckContents	.\Utils\MemFileUtils.h	/^	mf_CheckContents = 2$/;"	e	enum:__anon93
mf_CheckHeaders	.\Utils\MemFileUtils.h	/^	mf_CheckHeaders = 1,$/;"	e	enum:__anon93
mf_CheckType	.\Utils\MemFileUtils.h	/^	mf_CheckType = 0,$/;"	e	enum:__anon93
mf_DataFile	.\Utils\MemFileUtils.h	/^	mf_DataFile,$/;"	e	enum:__anon92
mf_Directory	.\Utils\MemFileUtils.h	/^	mf_Directory,$/;"	e	enum:__anon92
mf_GZFile	.\Utils\MemFileUtils.h	/^	mf_GZFile,$/;"	e	enum:__anon92
mf_GZTarBall	.\Utils\MemFileUtils.h	/^	mf_GZTarBall$/;"	e	enum:__anon92
mf_ZipFile	.\Utils\MemFileUtils.h	/^	mf_ZipFile,$/;"	e	enum:__anon92
mf_ZipFiles	.\Utils\MemFileUtils.h	/^	mf_ZipFiles,$/;"	e	enum:__anon92
midpoint	.\Utils\CompGeomDefs2.h	/^	Point2	midpoint(double s=0.5) const { if (s==0.0) return p1; if (s==1.0) return p2; double ms = 1.0 - s; return Point2($/;"	f	struct:Segment2
midpoint	.\Utils\CompGeomDefs2.h	/^inline	Point2	Bezier2::midpoint(double t) const$/;"	f	class:Bezier2
midpoint	.\Utils\CompGeomDefs3.h	/^	Point3	midpoint(double s=0.5) const { if (s == 0.0) return p1; if (s == 1.0) return p2; double ms = 1.0 - s; return Point3($/;"	f	struct:Segment3
midpoint	.\Utils\CompGeomDefs3.h	/^inline	Point3	Bezier3::midpoint(double t) const$/;"	f	class:Bezier3
migrate_atts	.\OneOffs\osm2shape.c	/^void migrate_atts(entity_t * dst, entity_t * src)$/;"	f
minInt	.\lib_json\include\json\value.h	/^      static const Int minInt;$/;"	m	class:Json::Value
minInt	.\lib_json\src\lib_json\json_value.cpp	/^const Int Value::minInt = Int( ~(UInt(-1)\/2) );$/;"	m	class:Json::Value	file:
minInt64	.\lib_json\include\json\value.h	/^      static const Int64 minInt64;$/;"	m	class:Json::Value
minInt64	.\lib_json\src\lib_json\json_value.cpp	/^const Int64 Value::minInt64 = Int64( ~(UInt64(-1)\/2) );$/;"	m	class:Json::Value	file:
minLargestInt	.\lib_json\include\json\value.h	/^      static const LargestInt minLargestInt;$/;"	m	class:Json::Value
minLargestInt	.\lib_json\src\lib_json\json_value.cpp	/^const LargestInt Value::minLargestInt = LargestInt( ~(LargestUInt(-1)\/2) );$/;"	m	class:Json::Value	file:
min_area	.\XESCore\DEMTables.h	/^	float		min_area;$/;"	m	struct:BeachInfo_t
min_center_agl	.\XESCore\NetTables.h	/^	float		min_center_agl;$/;"	m	struct:BridgeInfo
min_defl_deg_mtr	.\XESCore\NetTables.h	/^	float		min_defl_deg_mtr;$/;"	m	struct:NetRepInfo
min_density	.\XESCore\NetTables.h	/^	float		min_density;$/;"	m	struct:Feature2RepInfo
min_div	.\OneOffs\make_fill_rules.c	/^	float	min_div;$/;"	m	struct:depth_info_t	file:
min_ele	.\XESCore\DEMIO.cpp	1713;"	d	file:
min_height	.\GUI\GUI_Laftfont.h	/^		int		min_height;$/;"	m	class:GUI_Laftfont
min_height	.\XESCore\Zoning.h	/^	float		min_height;$/;"	m	struct:FillRule_t
min_lat	.\XESCore\DEMTables.h	/^	float		min_lat;$/;"	m	struct:BeachInfo_t
min_len	.\XESCore\DEMTables.h	/^	float		min_len;$/;"	m	struct:BeachInfo_t
min_length	.\XESCore\NetTables.h	/^	float		min_length;$/;"	m	struct:BridgeInfo
min_params	.\XESTools\GISTool_Utils.cpp	/^	int						min_params;$/;"	m	struct:GISTool_CmdInfo_t	file:
min_rail	.\XESCore\NetTables.h	/^	float		min_rail;$/;"	m	struct:Feature2RepInfo
min_rain	.\XESCore\DEMTables.h	/^	float		min_rain;$/;"	m	struct:BeachInfo_t
min_sea	.\XESCore\DEMTables.h	/^	float		min_sea;$/;"	m	struct:BeachInfo_t
min_seg_count	.\XESCore\NetTables.h	/^	float		min_seg_count;$/;"	m	struct:BridgeInfo
min_seg_length	.\XESCore\NetTables.h	/^	float		min_seg_length;$/;"	m	struct:BridgeInfo
min_side_len	.\XESCore\Zoning.h	/^	float		min_side_len;							\/\/ Side length constraints$/;"	m	struct:FillRule_t
min_side_len	.\XESCore\Zoning.h	/^	float		min_side_len;							\/\/ Side length constraints$/;"	m	struct:ZoningRule_t
min_side_major	.\XESCore\Zoning.h	/^	float		min_side_major;							\/\/ Bounds range on the major and minor block axes$/;"	m	struct:FillRule_t
min_side_major	.\XESCore\Zoning.h	/^	float		min_side_major;							\/\/ Bounds range on the major and minor block axes$/;"	m	struct:ZoningRule_t
min_side_minor	.\XESCore\Zoning.h	/^	float		min_side_minor;$/;"	m	struct:FillRule_t
min_side_minor	.\XESCore\Zoning.h	/^	float		min_side_minor;$/;"	m	struct:ZoningRule_t
min_slope	.\XESCore\DEMTables.h	/^	float		min_slope;$/;"	m	struct:BeachInfo_t
min_start_agl	.\XESCore\NetTables.h	/^	float		min_start_agl;$/;"	m	struct:BridgeInfo
min_temp	.\XESCore\DEMTables.h	/^	float		min_temp;$/;"	m	struct:BeachInfo_t
min_v	.\AC3DPlugins\obj_anim.cpp	/^	float		min_v;$/;"	m	struct:dataref_info	file:
minp	.\XESTools\GISTool_Utils.h	/^	int					minp;$/;"	m	struct:GISTool_RegCmd_t
minv	.\WEDCore\WED_PropertyHelper.h	/^	int						minv;$/;"	m	class:WED_PropIntEnumSetFilter
mismatched_edge_types	.\XESCore\BlockFill.cpp	/^static bool mismatched_edge_types(const pair<int,bool>& e1, const pair<int,bool>& e2, int zoning, int variant, float height, bool fill_edges)$/;"	f	file:
mm_Center	.\WEDMap\WED_MarqueeTool.h	/^	mm_Center,			\/\/ Drag, keep center in center$/;"	e	enum:marquee_mode_t
mm_Drag	.\WEDMap\WED_MarqueeTool.h	/^	mm_Drag,			\/\/ Drag any corner$/;"	e	enum:marquee_mode_t
mm_None	.\WEDMap\WED_MarqueeTool.h	/^	mm_None=0,			\/\/ No edit going on$/;"	e	enum:marquee_mode_t
mm_Prop	.\WEDMap\WED_MarqueeTool.h	/^	mm_Prop,			\/\/ Drag, maintain aspect ratio$/;"	e	enum:marquee_mode_t
mm_Prop_Center	.\WEDMap\WED_MarqueeTool.h	/^	mm_Prop_Center		\/\/ DRag, maintain aspect ratio AND keep center in center$/;"	e	enum:marquee_mode_t
mm_Rotate	.\WEDMap\WED_MarqueeTool.h	/^	mm_Rotate,			\/\/ Rotate around center$/;"	e	enum:marquee_mode_t
mode	.\Utils\MemFileUtils.cpp	/^  char mode[8];			\/* 100 *\/$/;"	m	struct:tar_header	file:
mode_Any	.\XPTools\TaxiMaker.cpp	/^	mode_Any = 0,$/;"	e	enum:__anon144	file:
mode_Black	.\XPTools\TaxiMaker.cpp	/^	mode_Black = 2,$/;"	e	enum:__anon144	file:
mode_None	.\XPTools\TaxiMaker.cpp	/^	mode_None = -1,$/;"	e	enum:__anon144	file:
mode_Red	.\XPTools\TaxiMaker.cpp	/^	mode_Red = 3,$/;"	e	enum:__anon144	file:
mode_White	.\XPTools\TaxiMaker.cpp	/^	mode_White = 4$/;"	e	enum:__anon144	file:
mode_Yellow	.\XPTools\TaxiMaker.cpp	/^	mode_Yellow = 1,$/;"	e	enum:__anon144	file:
mode_for_modifiers	.\WEDMap\WED_MarqueeTool.cpp	/^static marquee_mode_t	mode_for_modifiers(GUI_KeyFlags flags, bool rotate_ok)$/;"	f	file:
mode_for_modifiers	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^static tce_marquee_mode_t	mode_for_modifiers(GUI_KeyFlags flags, bool rotate_ok)$/;"	f	file:
models	.\OneOffs\gen_roads10.h	/^	vector<string>	models;$/;"	m	struct:obj_placement
moderatorComments	.\WEDImportExport\WED_VerTable.h	/^	string moderatorComments;$/;"	m	struct:VerInfo_t
modern	.\WEDCore\WED_ResourceMgr.h	/^	bool			modern;$/;"	m	struct:fac_info_t
monotone_regions	.\Utils\CompGeomDefs2.h	/^inline int		Bezier2::monotone_regions(double times[4]) const$/;"	f	class:Bezier2
mouseMoveEvent	.\UI\XWin.lin.cpp	/^void XWin::mouseMoveEvent(QMouseEvent* e)$/;"	f	class:XWin
mousePressEvent	.\UI\XWin.lin.cpp	/^void XWin::mousePressEvent(QMouseEvent* e)$/;"	f	class:XWin
mouseReleaseEvent	.\UI\XWin.lin.cpp	/^void XWin::mouseReleaseEvent(QMouseEvent* e)$/;"	f	class:XWin
move_child_to_head	.\AC3DPlugins\ac_utils.cpp	/^void move_child_to_head(ACObject * parent, ACObject * child)$/;"	f
msg	.\WEDCore\WED_Sign_Parser.h	/^	string msg;\/\/The human readable version of the error, DOES NOT end with a \\n. The client decides if they want one$/;"	m	struct:parser_error_info
msgBuf	.\Installer\InstallerScript.cpp	/^static char 	msgBuf[1024];$/;"	v	file:
msg_ArchiveChanged	.\WEDCore\WED_Messages.h	/^	msg_ArchiveChanged,$/;"	e	enum:__anon113
msg_DoRebuild	.\ObjEdit\OE_Msgs.h	/^	msg_DoRebuild$/;"	e	enum:__anon49
msg_DocLoaded	.\WEDCore\WED_Messages.h	/^	msg_DocLoaded,$/;"	e	enum:__anon113
msg_DocWillSave	.\WEDCore\WED_Messages.h	/^	msg_DocWillSave,$/;"	e	enum:__anon113
msg_DocumentDestroyed	.\WEDCore\WED_Messages.h	/^	msg_DocumentDestroyed,$/;"	e	enum:__anon113
msg_LibraryChanged	.\WEDCore\WED_Messages.h	/^	msg_LibraryChanged$/;"	e	enum:__anon113
msg_NetworkStatusInfo	.\WEDCore\WED_Messages.h	/^	,msg_NetworkStatusInfo$/;"	e	enum:__anon113
msg_ObjectLODChanged	.\ObjEdit\OE_Msgs.h	/^	msg_ObjectLODChanged,$/;"	e	enum:__anon50
msg_ObjectLoaded	.\ObjEdit\OE_Msgs.h	/^	msg_ObjectLoaded,$/;"	e	enum:__anon50
msg_ObjectSelectionChanged	.\ObjEdit\OE_Msgs.h	/^	msg_ObjectSelectionChanged,$/;"	e	enum:__anon50
msg_ObjectTexturingChanged	.\ObjEdit\OE_Msgs.h	/^	msg_ObjectTexturingChanged$/;"	e	enum:__anon50
msg_PackageDestroyed	.\WEDCore\WED_Messages.h	/^	msg_PackageDestroyed = GUI_APP_MESSAGES,$/;"	e	enum:__anon113
msg_ProjectionTexChanged	.\ObjEdit\OE_Msgs.h	/^	msg_ProjectionTexChanged$/;"	e	enum:__anon51
msg_SystemFolderChanged	.\WEDCore\WED_Messages.h	/^	msg_SystemFolderChanged,$/;"	e	enum:__anon113
msg_SystemFolderUpdated	.\WEDCore\WED_Messages.h	/^	msg_SystemFolderUpdated,$/;"	e	enum:__anon113
msg_TexAdded	.\ObjEdit\OE_Msgs.h	/^	msg_TexAdded,$/;"	e	enum:__anon49
msg_TexDeleted	.\ObjEdit\OE_Msgs.h	/^	msg_TexDeleted,$/;"	e	enum:__anon49
msg_TexLoaded	.\ObjEdit\OE_Msgs.h	/^	msg_TexLoaded,$/;"	e	enum:__anon49
msg_TexSelectionChanged	.\ObjEdit\OE_Msgs.h	/^	msg_TexSelectionChanged,$/;"	e	enum:__anon49
msg_TexSelectionEdited	.\ObjEdit\OE_Msgs.h	/^	msg_TexSelectionEdited,$/;"	e	enum:__anon49
msl	.\RawImport\FAA_Obs.h	/^	float		msl;$/;"	m	struct:FAAObs_t
msl	.\WEDEntities\WED_ObjPlacement.h	/^	WED_PropDoubleText		msl;	$/;"	m	class:WED_ObjPlacement
msvcrtSilentReportHook	.\lib_json\src\test_lib_json\jsontest.cpp	/^msvcrtSilentReportHook( int reportType, char *message, int *returnValue )$/;"	f	namespace:JsonTest
mtime	.\Utils\MemFileUtils.cpp	/^  char mtime[12];		\/* 136 *\/$/;"	m	struct:tar_header	file:
mtr_to_pix	.\Utils\HLCamera.cpp	/^void xcam_class::mtr_to_pix(GLdouble inXYZ[3],GLdouble outPixel[2])$/;"	f	class:xcam_class
multMatrices	.\Utils\MatrixUtils.cpp	/^multMatrices(GLdouble dst[16], const GLdouble a[16], const GLdouble b[16])$/;"	f
multMatrixVec	.\Utils\MatrixUtils.cpp	/^multMatrixVec(GLdouble dst[4], const GLdouble m[16], const GLdouble v[4])$/;"	f
multi_edit	.\AC3DPlugins\obj_editor.cpp	/^TCL_linked_vari * multi_edit = NULL;$/;"	v
multiple_accuracy_flag	.\XESCore\DEMIO.cpp	/^	char			multiple_accuracy_flag;		\/\/ '0' or '1'$/;"	m	struct:DTED_UHL_t	file:
must_burn_he	.\XESCore\MeshAlgs.h	/^inline bool must_burn_he(Halfedge_handle he)$/;"	f
must_burn_v	.\XESCore\MeshAlgs.h	/^inline bool must_burn_v(Vertex_handle v)$/;"	f
must_lock	.\XESCore\Zoning.cpp	/^	bool			must_lock;$/;"	m	struct:EdgeNode_t	file:
must_merge	.\XESCore\Zoning.cpp	/^	bool			must_merge;$/;"	m	struct:EdgeNode_t	file:
must_sort_nodes	.\OneOffs\osm2shape.c	/^static int must_sort_nodes;$/;"	v	file:
must_sort_rels	.\OneOffs\osm2shape.c	/^static int must_sort_rels;$/;"	v	file:
must_sort_ways	.\OneOffs\osm2shape.c	/^static int must_sort_ways;$/;"	v	file:
my_error	.\Utils\BitmapUtils.cpp	/^void my_error  (png_structp,png_const_charp err){}$/;"	f
my_fgets	.\Utils\XUtils.cpp	/^static char * my_fgets(char * s, int n, FILE * file)$/;"	f	file:
my_propagating_flip	.\XESCore\MeshDefs.cpp	/^CDT::my_propagating_flip(Face_handle& f,int i, set<Face_handle>& all)$/;"	f	class:CDT
my_source	.\AC3DPlugins\uv_mapper.cpp	/^	uv_vertex_info_t *				my_source;		\/\/ One vertex that feeds me$/;"	m	struct:uv_vertex_info_t	file:
my_targets	.\AC3DPlugins\uv_mapper.cpp	/^	set<uv_vertex_info_t *>			my_targets;		\/\/ Vertex I will feed to$/;"	m	struct:uv_vertex_info_t	file:
my_turn_degs	.\XESCore\BlockFill.cpp	/^double my_turn_degs(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
my_warning	.\Utils\BitmapUtils.cpp	/^void my_warning(png_structp,png_const_charp err){}$/;"	f
n	.\RawImport\gshhs.h	/^	int n;				\/* Number of points in this polygon *\/$/;"	m	struct:GSHHS
n	.\Utils\CompGeomDefs3.h	/^	Vector3		n;$/;"	m	struct:Plane3
n	.\Utils\UTL_interval.h	/^	int											n;$/;"	m	class:UTL_interval::const_iterator
n	.\WEDWindows\WED_StartWindow.cpp	/^	string					n;$/;"	m	struct:open_doc_t	file:
n	.\XESCore\Hydro2.cpp	/^	double n,s,e,w;$/;"	m	struct:no_sharp_pt	file:
nRefCnt	.\UI\FontMgr.cpp	/^	int		nRefCnt;$/;"	m	struct:FontInfo_t	file:
n_	.\Utils\CompGeomDefs2.h	/^		int n_;$/;"	m	struct:Polygon2::const_side_iterator
name	.\Env\Persistence.h	/^	std::string	name;$/;"	m	struct:ObjectInfo
name	.\GUI\GUI_Defs.h	/^	const char *	name;			\/\/ Item Name$/;"	m	struct:GUI_MenuItem_t
name	.\ObjEdit\OE_Globals.h	/^	string	name;$/;"	m	struct:OE_Texture_t
name	.\Obj\XObjDefs.h	/^	const char *	name;$/;"	m	struct:cmd_info
name	.\Obj\XObjDefs.h	/^	string					name;$/;"	m	struct:XObjCmd8
name	.\Obj\XObjWriteEmbedded.cpp	/^	const char *	name;$/;"	m	struct:named_light_info_t	file:
name	.\OneOffs\GenTerrain.c	/^	const char * 	name;$/;"	m	struct:__anon62	file:
name	.\OneOffs\gen_roads.cpp	/^	const char * 	name;$/;"	m	class:road	file:
name	.\OneOffs\gen_roads10.h	/^	string	name;$/;"	m	class:published_road
name	.\OneOffs\gen_roads10.h	/^	string name;$/;"	m	class:virtual_table
name	.\OneOffs\osm2shape.c	/^	const char *			name;$/;"	m	struct:tag_att_info	file:
name	.\Tiger\TIGERProcess.h	/^	string		name;$/;"	m	struct:TigerAreaInfo_t
name	.\Tiger\TIGERTypes.h	/^	string			name;$/;"	m	struct:ChainInfo_t
name	.\Tiger\TIGERTypes.h	/^	string			name;$/;"	m	struct:LandmarkInfo_t
name	.\Tiger\TigerImport.cpp	/^	string				name;$/;"	m	struct:FeatureInfo_t	file:
name	.\Tiger\TigerImport.cpp	/^	string		name;$/;"	m	struct:WaterCodeInfo_t	file:
name	.\Utils\MemFileUtils.cpp	/^  char name[100];		\/*   0 *\/$/;"	m	struct:tar_header	file:
name	.\Utils\XCarBoneUtils.h	/^	string			name;			\/\/ Name of the file that contains this part$/;"	m	struct:XCarBone
name	.\VPF\VPFTable.h	/^	string					name;$/;"	m	struct:VPF_TableDef
name	.\VPF\VPFTable.h	/^	string		name;$/;"	m	struct:VPF_ColumnDef
name	.\WEDCore\WED_EnumSystem.cpp	/^	string	name;$/;"	m	struct:enum_Info	file:
name	.\WEDCore\WED_ResourceMgr.h	/^		string	name;$/;"	m	struct:agp_t::obj
name	.\WEDCore\WED_XMLWriter.h	/^		string									name;$/;"	m	class:WED_XMLElement
name	.\WEDEntities\WED_Thing.h	/^	WED_PropStringText			name;$/;"	m	class:WED_Thing
name	.\WEDMap\WED_PreviewLayer.cpp	/^const struct { const char * name; int group_lo;  int group_hi; }	kGroupNames[] = {$/;"	m	struct:__anon121	file:
name	.\WEDNetwork\WED_Connection.h	/^		string		name;$/;"	m	class:WED_Connection
name	.\XESCore\AptDefs.h	/^	string						name;$/;"	m	struct:AptFlow_t
name	.\XESCore\AptDefs.h	/^	string						name;$/;"	m	struct:AptNetwork_t
name	.\XESCore\AptDefs.h	/^	string						name;$/;"	m	struct:AptRouteEdge_t
name	.\XESCore\AptDefs.h	/^	string						name;$/;"	m	struct:AptRouteNode_t
name	.\XESCore\AptDefs.h	/^	string					name;$/;"	m	struct:AptBoundary_t
name	.\XESCore\AptDefs.h	/^	string					name;$/;"	m	struct:AptMarking_t
name	.\XESCore\AptDefs.h	/^	string					name;$/;"	m	struct:AptTaxiway_t
name	.\XESCore\AptDefs.h	/^	string				name;$/;"	m	struct:AptInfo_t
name	.\XESCore\AptDefs.h	/^	string			name;$/;"	m	struct:AptRunwayRule_t
name	.\XESCore\AptDefs.h	/^	string		name;	\/\/ lo or taxiway letter or blank$/;"	m	struct:AptPavement_t
name	.\XESCore\AptDefs.h	/^	string		name;$/;"	m	struct:AptATCFreq_t
name	.\XESCore\AptDefs.h	/^	string		name;$/;"	m	struct:AptBeacon_t
name	.\XESCore\AptDefs.h	/^	string		name;$/;"	m	struct:AptGate_t
name	.\XESCore\AptDefs.h	/^	string		name;$/;"	m	struct:AptLight_t
name	.\XESCore\AptDefs.h	/^	string		name;$/;"	m	struct:AptTowerPt_t
name	.\XESCore\AptDefs.h	/^	string		name;$/;"	m	struct:AptWindsock_t
name	.\XESCore\DEMTables.h	/^	int				name;$/;"	m	struct:NaturalTerrainRule_t
name	.\XPTools\TaxiMaker.cpp	/^	const char *			name;		\/\/ Symbol of the token$/;"	m	struct:taxi_element_t	file:
name_	.\lib_json\src\test_lib_json\jsontest.h	/^      std::string name_;$/;"	m	class:JsonTest::TestResult
named_light_info_t	.\Obj\XObjWriteEmbedded.cpp	/^struct named_light_info_t {$/;"	s	file:
narrativeFileName	.\VPF\VPFTable.h	/^	string		narrativeFileName;$/;"	m	struct:VPF_ColumnDef
ndotp	.\Utils\CompGeomDefs3.h	/^	double		ndotp;$/;"	m	struct:Plane3
near	.\OneOffs\gen_roads10.h	/^	int		near;$/;"	m	struct:lod_range
near2	.\MeshTool\MeshTool_Create.cpp	/^inline int near2(int n) { $/;"	f
nearLOD	.\DSF\DSFLibWrite.cpp	/^		double					nearLOD;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
nearLOD	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		double					nearLOD;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
near_water	.\XESCore\DEMTables.h	/^	int				near_water;$/;"	m	struct:NaturalTerrainRule_t
need_lu	.\XESCore\Zoning.h	/^	int			need_lu;								\/\/ Exclude areas that are not urban LU?$/;"	m	struct:ZoningInfo_t
neighbor	.\OneOffs\gen_tiles.c	/^char	neighbor(int i, int d)$/;"	f
neighbor_begin	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim> DEMGeo::neighbor_begin(address i)$/;"	f	class:DEMGeo
neighbor_end	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim> DEMGeo::neighbor_end(address i)$/;"	f	class:DEMGeo
neighbor_iterator	.\XESCore\DEMDefs.h	/^	struct neighbor_iterator {$/;"	s	struct:DEMGeo
neighbor_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim>::neighbor_iterator() : parent(NULL), coords(DEMGeo::coordinates(0,0)), step(0)$/;"	f	class:DEMGeo::neighbor_iterator
neighbor_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim>::neighbor_iterator(const DEMGeo * d, address a) :$/;"	f	class:DEMGeo::neighbor_iterator
neighbor_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim>::neighbor_iterator(const neighbor_iterator& rhs) :$/;"	f	class:DEMGeo::neighbor_iterator
nestingLevel_	.\lib_json\src\test_lib_json\jsontest.h	/^      unsigned int nestingLevel_;$/;"	m	class:JsonTest::Failure
net	.\MeshTool\MeshTool_Create.cpp	/^static vector<X_monotone_curve_2>		net;$/;"	v	file:
net_type	.\MeshTool\MeshTool_Create.cpp	/^static int								net_type=NO_VALUE;$/;"	v	file:
networkDefs	.\DSF\DSFLibWrite.cpp	/^	vector<string>		networkDefs;$/;"	m	class:DSFFileWriterImp	file:
networkDefs	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	vector<string>		networkDefs;$/;"	m	class:DSFFileWriterImp	file:
network_type	.\Tiger\(TigerImport Backup.cpp).cpp	/^	int					network_type;$/;"	m	struct:RoadInfo_t	file:
network_type	.\Tiger\TigerImport.cpp	/^	int					network_type;$/;"	m	struct:RoadInfo_t	file:
new_actives	.\Utils\PolyRasterUtils.h	/^	vector<ActiveSeg>			new_actives;$/;"	m	struct:PolyRasterizer
new_edge	.\XESCore\Zoning.cpp	/^EdgeNode_t *	FaceGraph_t::new_edge()$/;"	f	class:FaceGraph_t
new_face	.\XESCore\Zoning.cpp	/^FaceNode_t *	FaceGraph_t::new_face()$/;"	f	class:FaceGraph_t
new_handler_for_element	.\WEDCore\WED_XMLReader.h	/^	list<bool>				new_handler_for_element;$/;"	m	class:WED_XMLReader
new_left	.\XESCore\NetTables.h	/^	int			new_left;$/;"	m	struct:ForkRule
new_mid	.\XESCore\NetTables.h	/^	int			new_mid;$/;"	m	struct:ChangeRule
new_name	.\GUI\GUI_Window.cpp	/^		string	new_name;$/;"	m	struct:CmdEval_t	file:
new_right	.\XESCore\NetTables.h	/^	int			new_right;$/;"	m	struct:ForkRule
new_s	.\AC3DPlugins\uv_mapper.cpp	/^	float							new_s;			\/\/ Newly computed S & T coords$/;"	m	struct:uv_vertex_info_t	file:
new_t	.\AC3DPlugins\uv_mapper.cpp	/^	float							new_t;$/;"	m	struct:uv_vertex_info_t	file:
new_trunk	.\XESCore\NetTables.h	/^	int			new_trunk;$/;"	m	struct:ForkRule
next	.\OneOffs\osm2shape.c	/^	struct tag_att_info *	next;$/;"	m	struct:tag_att_info	typeref:struct:tag_att_info::tag_att_info	file:
next	.\Utils\CompGeomDefs2.h	/^	int			next(int index) const { return (index + 1) % size(); }$/;"	f	struct:Polygon2
next	.\Utils\RLERegion.cpp	/^	void next(void)$/;"	f	class:RLERegionDualScanner
next	.\Utils\Skeleton.cpp	/^	SK_Edge *	next;$/;"	m	struct:SK_Vertex	file:
next	.\Utils\Skeleton.cpp	/^	SK_Vertex *		next;$/;"	m	struct:SK_Edge	file:
next	.\Utils\XUtils.cpp	/^void	StTextFileScanner::next()$/;"	f	class:StTextFileScanner
next	.\WEDCore\WED_Buffer.cpp	/^	Storage *		next;			\/\/ ptr to next storage block$/;"	m	struct:WED_Buffer::Storage	file:
next	.\XESCore\BezierApprox.cpp	/^	approx_t *				next;$/;"	m	struct:approx_t	file:
next	.\XESCore\BlockFill.cpp	/^	self_type *		next;$/;"	m	struct:ring_node	file:
next	.\XESCore\NetTables.h	/^	int			next;$/;"	m	struct:ChangeRule
next	.\XESCore\Zoning.cpp	/^	EdgeNode_t *	next;$/;"	m	struct:EdgeNode_t	file:
next	.\XESCore\Zoning.cpp	/^	FaceNode_t *			next;$/;"	m	struct:FaceNode_t	file:
nextLeft	.\XESCore\WTPM.h	/^	WTPM_DirectedLinePtr	nextLeft;$/;"	m	struct:WTPM_Line
nextRight	.\XESCore\WTPM.h	/^	WTPM_DirectedLinePtr	nextRight;$/;"	m	struct:WTPM_Line
next_	.\lib_json\include\json\value.h	/^      ValueInternalLink *next_;$/;"	m	class:Json::ValueInternalLink
next_	.\lib_json\src\lib_json\json_batchallocator.h	/^      BatchInfo *next_;$/;"	m	struct:Json::BatchAllocator::BatchInfo
next_	.\lib_json\src\test_lib_json\jsontest.h	/^      PredicateContext *next_;$/;"	m	struct:JsonTest::PredicateContext
next_contig	.\XESCore\NetHelpers.h	/^inline Pmwx::Halfedge_handle next_contig(Pmwx::Halfedge_handle me)$/;"	f
next_datablock	.\Utils\zip.c	/^  struct linkedlist_datablock_internal_s* next_datablock;$/;"	m	struct:linkedlist_datablock_internal_s	typeref:struct:linkedlist_datablock_internal_s::linkedlist_datablock_internal_s	file:
next_he_of_type	.\XESTools\HackExport.cpp	/^Pmwx::Halfedge_handle	next_he_of_type(Pmwx::Halfedge_handle e, int type)$/;"	f
next_he_pred	.\XESCore\MapHelpers.h	/^typename Arr::Halfedge_handle next_he_pred(typename Arr::Halfedge_handle he)$/;"	f
next_row	.\Utils\RLERegion.cpp	/^void		RLERegionScanner::next_row(void)$/;"	f	class:RLERegionScanner
next_row_id	.\VPF\VPFTable.h	/^	unsigned int next_row_id;$/;"	m	struct:VPF_TripletKey
next_run	.\Utils\RLERegion.cpp	/^void		RLERegionScanner::next_run(void)$/;"	f	class:RLERegionScanner
next_token	.\Installer\InstallerScript.cpp	/^char *	next_token(char ** buf)$/;"	f
nh_dry	.\XESCore\DEMAlgs.cpp	/^	float	nh_dry;$/;"	m	struct:SnowLineInfo_t	file:
nh_wet	.\XESCore\DEMAlgs.cpp	/^	float	nh_wet;$/;"	m	struct:SnowLineInfo_t	file:
night_filter	.\XPTools\DDSTool.cpp	/^unsigned char night_filter(unsigned char src[], int count, int channel, int level)$/;"	f
nn	.\OneOffs\osm_tile.c	/^static	int nw = 0, nn = 0, nr = 0;$/;"	v	file:
noDuplication	.\lib_json\include\json\value.h	/^            noDuplication = 0,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
no_blend	.\Obj\XObjBuilder.h	/^ 	float		no_blend;			float	o_no_blend;$/;"	m	class:XObjBuilder
no_path	.\MeshTool\MeshTool_Create.cpp	/^inline const char * no_path(const char * f)$/;"	f
no_sharp_pt	.\XESCore\Hydro2.cpp	/^	no_sharp_pt(const DEMGeo& d) : n(d.mNorth), s(d.mSouth),w(d.mWest),e(d.mEast) { }$/;"	f	struct:no_sharp_pt
no_sharp_pt	.\XESCore\Hydro2.cpp	/^struct no_sharp_pt {$/;"	s	file:
no_turn	.\Utils\CompGeomDefs2.h	/^	bool	no_turn(const Vector2& v) const { return (-dy * v.dx + dx * v.dy) == 0.0; }$/;"	f	struct:Vector2
node	.\DSF\tri_stripper_101\graph_array.h	/^		node() : m_Marker(false) { }$/;"	f	class:common_structures::graph_array::node
node	.\DSF\tri_stripper_101\graph_array.h	/^	class node$/;"	c	class:common_structures::graph_array
node	.\Utils\RTree2.h	/^	struct node {$/;"	s	class:RTree2
node_count	.\OneOffs\osm2shape.c	/^	int			node_count;$/;"	m	struct:__anon66	file:
node_count	.\OneOffs\osm2shape.c	/^	int			node_count;$/;"	m	struct:rel_info_tag	file:
node_count	.\OneOffs\osm2shape.c	/^static int node_count = 0;			\/\/ Total counts$/;"	v	file:
node_free	.\OneOffs\osm2shape.c	/^static int node_free = 0;			\/\/ Used memory as we read ... entities and references$/;"	v	file:
node_ids	.\OneOffs\osm2shape.c	/^		int *			node_ids;$/;"	m	union:__anon66::__anon67	file:
node_ids	.\OneOffs\osm2shape.c	/^		int *			node_ids;$/;"	m	union:rel_info_tag::__anon68	file:
node_info_t	.\OneOffs\osm2shape.c	/^} node_info_t;$/;"	t	typeref:struct:__anon65	file:
node_iterator	.\DSF\tri_stripper_101\graph_array.h	/^	typedef typename std::vector<node>::iterator				node_iterator;$/;"	t	class:common_structures::graph_array
node_ptrs	.\OneOffs\osm2shape.c	/^		node_info_t **	node_ptrs;$/;"	m	union:__anon66::__anon67	file:
node_ptrs	.\OneOffs\osm2shape.c	/^		node_info_t **	node_ptrs;$/;"	m	union:rel_info_tag::__anon68	file:
node_ref_free	.\OneOffs\osm2shape.c	/^static int node_ref_free = 0;$/;"	v	file:
node_reverse_iterator	.\DSF\tri_stripper_101\graph_array.h	/^	typedef typename std::vector<node>::reverse_iterator		node_reverse_iterator;$/;"	t	class:common_structures::graph_array
node_roles	.\OneOffs\osm2shape.c	/^	char **				node_roles;$/;"	m	struct:rel_info_tag	file:
nodeid	.\DSF\tri_stripper_101\graph_array.h	/^	typedef size_t												nodeid;$/;"	t	class:common_structures::graph_array
nodes	.\OneOffs\osm2shape.c	/^	} nodes;$/;"	m	struct:__anon66	typeref:union:__anon66::__anon67	file:
nodes	.\OneOffs\osm2shape.c	/^	} nodes;$/;"	m	struct:rel_info_tag	typeref:union:rel_info_tag::__anon68	file:
nodes	.\WEDCore\WED_Routing.h	/^	vector<WED_route_node_t *>	nodes;$/;"	m	struct:WED_route_t
nodes	.\XESCore\AptDefs.h	/^	vector<AptRouteNode_t>		nodes;$/;"	m	struct:AptNetwork_t
nodes_	.\lib_json\include\json\reader.h	/^      Nodes nodes_;$/;"	m	class:Json::Reader
nodes_now	.\OneOffs\osm2shape.c	/^static int nodes_now = 0;			\/\/ Tracking high water marks for how much stuff we ahve$/;"	v	file:
noise_tex	.\XESCore\DEMTables.h	/^	string			noise_tex;$/;"	m	struct:NaturalTerrainInfo_t
nonConvexPolygon	.\RenderFarmUI\RF_DrawMap.cpp	/^void nonConvexPolygon( const Polygon2& p, const vector<Polygon2>& pp)$/;"	f
non_integral	.\XESCore\DEMAlgs.cpp	/^inline	bool	non_integral(float f) { return (f != DEM_NO_DATA && f != 0.0 && f != 1.0); }$/;"	f
none	.\OneOffs\gen_roads10.h	/^	none,$/;"	e	enum:surface_type
normal	.\XESCore\DEMTables.h	/^	string			normal;$/;"	m	struct:NaturalTerrainInfo_t
normal	.\XESCore\MeshDefs.h	/^	float					normal[3];				\/\/ Normal - X,Y,Z in OGL coords(!)$/;"	m	struct:MeshVertexInfo
normal	.\XESCore\MeshDefs.h	/^	float			normal[3];				\/\/ Tri flat normal - not in final DSF but handy for other sh-t.$/;"	m	struct:MeshFaceInfo
normal_scale	.\XESCore\DEMTables.h	/^	float			normal_scale;$/;"	m	struct:NaturalTerrainInfo_t
normalize	.\Utils\CompGeomDefs2.h	/^	double 	normalize(void) { $/;"	f	struct:Vector2
normalize	.\Utils\CompGeomDefs2.h	/^inline void Line2::normalize()$/;"	f	class:Line2
normalize	.\Utils\CompGeomDefs3.h	/^	void 	normalize(void) { double len = sqrt(dx * dx + dy * dy + dz * dz); if (len != 0.0) { len = 1.0 \/ len; dx *= len; dy *= len; dz *= len; } }$/;"	f	struct:Vector3
normalize	.\Utils\CompGeomDefs3.h	/^inline void Plane3::normalize()$/;"	f	class:Plane3
normalize	.\XESCore\MapDefs.h	/^inline FastKernel::Vector_3 normalize(FastKernel::Vector_3 v) {$/;"	f
normalize	.\XESCore\MapDefs.h	/^inline Vector_2 normalize(Vector_2 v) {$/;"	f
normalizeEOL	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::normalizeEOL( const std::string &text )$/;"	f	class:Json::StyledStreamWriter
normalizeEOL	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::normalizeEOL( const std::string &text )$/;"	f	class:Json::StyledWriter
normalize_dir_chars	.\Installer\InstallerScript.cpp	/^void	normalize_dir_chars(char * buf)$/;"	f
normalize_kernel	.\XESCore\DEMAlgs.cpp	/^static void normalize_kernel(float k[], int w)$/;"	f	file:
normalize_quat	.\Utils\trackball.c	/^normalize_quat(float q[4])$/;"	f	file:
north	.\RawImport\gshhs.h	/^	int west, east, south, north;	\/* min\/max extent in micro-degrees *\/$/;"	m	struct:GSHHS
north	.\RenderFarmUI\RF_Import.cpp	/^	float		north;$/;"	m	struct:RF_ImportState_t	file:
not_enough_files	.\OneOffs\osm_tile.c	/^static int not_enough_files = 0;$/;"	v	file:
notifier	.\XESTools\MapDefs_TEST.cpp	/^void notifier(GISHalfedge * h_old, GISHalfedge * h_new, void *)$/;"	f
now_v	.\AC3DPlugins\obj_anim.cpp	/^	float		now_v;$/;"	m	struct:dataref_info	file:
nr	.\OneOffs\osm_tile.c	/^static	int nw = 0, nn = 0, nr = 0;$/;"	v	file:
nth_from	.\Utils\STLUtils.h	/^I nth_from(const I& i, int n)$/;"	f
nuke_container	.\Utils\STLUtils.h	/^void nuke_container(T& v)$/;"	f
null	.\lib_json\include\json\value.h	/^      static const Value null;$/;"	m	class:Json::Value
null	.\lib_json\src\lib_json\json_value.cpp	/^const Value Value::null;$/;"	m	class:Json::Value	file:
nullValue	.\lib_json\include\json\value.h	/^      nullValue = 0, \/\/\/< 'null' value$/;"	e	enum:Json::ValueType
null_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value null_;$/;"	m	struct:ValueTest	file:
null_level	.\XESCore\MeshConformer.h	/^  Null_mesher_level null_level;$/;"	m	class:CGAL::Triangulation_conformer_any_2
null_visitor	.\XESCore\MeshConformer.h	/^  Null_mesh_visitor null_visitor;$/;"	m	class:CGAL::Triangulation_conformer_any_2
num	.\OneOffs\gen_roads.cpp	/^	int 			num;$/;"	m	class:road	file:
num_block_processed	.\XESCore\BlockFill.cpp	/^int num_block_processed = 0;$/;"	v
num_blocks_with_split	.\XESCore\BlockFill.cpp	/^int num_blocks_with_split = 0;$/;"	v
num_cus_terrains	.\MeshTool\MeshTool_Create.cpp	/^static int								num_cus_terrains=0;$/;"	v	file:
num_dem_cmds	.\RenderFarmUI\RF_Msgs.h	/^const int num_dem_cmds = dem_Wizard - dem_Elevation + 2;$/;"	v
num_file	.\Utils\unzip.c	/^	uLong num_file;             \/* number of the current file in the zipfile*\/$/;"	m	struct:__anon102	file:
num_forest_split	.\XESCore\BlockFill.cpp	/^int num_forest_split = 0;$/;"	v
num_line_integ	.\XESCore\BlockFill.cpp	/^int num_line_integ = 0;$/;"	v
num_lines_lat	.\XESCore\DEMIO.cpp	/^	char			num_lines_lat[4];			\/\/ Num scanlines V, e.g. 3601 = 3601 pixels wide$/;"	m	struct:DTED_UHL_t	file:
num_lines_lon	.\XESCore\DEMIO.cpp	/^	char			num_lines_lon[4];			\/\/ Num scanlines H, e.g. 0121 = 121 pixels wide$/;"	m	struct:DTED_UHL_t	file:
num_sides	.\Utils\Skeleton.cpp	/^	int	num_sides(void) const { if (!ccb) return 0; SK_Edge * iter = ccb, * stop = ccb; int ctr = 0; do { ++ctr; iter=iter->next->next; } while (iter != stop); return ctr;}$/;"	f	struct:SK_Polygon
numberOfCommentPlacement	.\lib_json\include\json\value.h	/^      numberOfCommentPlacement$/;"	e	enum:Json::CommentPlacement
number_entry	.\Utils\unzip.h	/^	uLong number_entry;         \/* total number of entries in$/;"	m	struct:unz_global_info_s
number_entry	.\Utils\zip.c	/^    uLong number_entry;$/;"	m	struct:__anon105	file:
number_of_arcs	.\DSF\tri_stripper_101\graph_array.h	/^inline size_t graph_array<nodetype, arctype>::number_of_arcs() const {$/;"	f	class:common_structures::graph_array
number_of_clusters_at_vertex	.\XESCore\MeshConformer.h	/^  unsigned int number_of_clusters_at_vertex(const Vertex_handle& vh)$/;"	f	class:CGAL::Triangulation_conformer_any_2
number_of_clusters_vertices	.\XESCore\MeshConformer.h	/^  int number_of_clusters_vertices() const$/;"	f	class:CGAL::Triangulation_conformer_any_2
number_of_constrained_edges	.\XESCore\MeshConformer.h	/^  int number_of_constrained_edges()$/;"	f	class:CGAL::Triangulation_conformer_any_2
number_of_out_arcs	.\DSF\tri_stripper_101\graph_array.h	/^		size_t number_of_out_arcs() const				{ return m_OutArcs.size(); }$/;"	f	class:common_structures::graph_array::node
nw	.\OneOffs\osm_tile.c	/^static	int nw = 0, nn = 0, nr = 0;$/;"	v	file:
nw_cam_data	.\WEDNetwork\WED_NWDefs.h	/^	nw_cam_data  	    = 1	,$/;"	e	enum:wed_nw_cam
nw_cam_state	.\WEDNetwork\WED_NWDefs.h	/^	nw_cam_state 		= 0	,$/;"	e	enum:wed_nw_cam
nw_cmd_done	.\WEDNetwork\WED_NWDefs.h	/^	nw_cmd_done   		= 1	,$/;"	e	enum:wed_nw_cmd
nw_cmd_none	.\WEDNetwork\WED_NWDefs.h	/^	nw_cmd_none  		= 0	,$/;"	e	enum:wed_nw_cmd
nw_cmd_reloadscen	.\WEDNetwork\WED_NWDefs.h	/^	nw_cmd_reloadscen  	= 2	,$/;"	e	enum:wed_nw_cmd
nw_con_go_on	.\WEDNetwork\WED_NWDefs.h	/^	nw_con_go_on  		= 3	,$/;"	e	enum:wed_nw_con
nw_con_leave	.\WEDNetwork\WED_NWDefs.h	/^	nw_con_leave 		= 2	,$/;"	e	enum:wed_nw_con
nw_con_login	.\WEDNetwork\WED_NWDefs.h	/^	nw_con_login  		= 1	,$/;"	e	enum:wed_nw_con
nw_con_none	.\WEDNetwork\WED_NWDefs.h	/^	nw_con_none 		= 0	,$/;"	e	enum:wed_nw_con
nw_con_refused	.\WEDNetwork\WED_NWDefs.h	/^	nw_con_refused		= 4	,$/;"	e	enum:wed_nw_con
nw_msg_debug	.\WEDNetwork\WED_NWDefs.h	/^	nw_msg_debug   		= 3	,$/;"	e	enum:wed_nw_msg
nw_msg_error	.\WEDNetwork\WED_NWDefs.h	/^	nw_msg_error 		= 2	,$/;"	e	enum:wed_nw_msg
nw_msg_info	.\WEDNetwork\WED_NWDefs.h	/^	nw_msg_info  		= 1	,$/;"	e	enum:wed_nw_msg
nw_msg_none	.\WEDNetwork\WED_NWDefs.h	/^	nw_msg_none   		= 0	,$/;"	e	enum:wed_nw_msg
nw_obj_Facade	.\WEDNetwork\WED_NWDefs.h	/^	nw_obj_Facade	  	= 2	,$/;"	e	enum:wed_nw_obj
nw_obj_FacadeNode	.\WEDNetwork\WED_NWDefs.h	/^	nw_obj_FacadeNode	= 3	,$/;"	e	enum:wed_nw_obj
nw_obj_FacadeRing	.\WEDNetwork\WED_NWDefs.h	/^	nw_obj_FacadeRing  	= 4	,$/;"	e	enum:wed_nw_obj
nw_obj_Object	.\WEDNetwork\WED_NWDefs.h	/^	nw_obj_Object 		= 1	,$/;"	e	enum:wed_nw_obj
nw_obj_none	.\WEDNetwork\WED_NWDefs.h	/^	nw_obj_none   		= 0	,$/;"	e	enum:wed_nw_obj
o_cockpit	.\Obj\XObjBuilder.h	/^ 	int			cockpit;			int		o_cockpit;$/;"	m	class:XObjBuilder
o_deck	.\Obj\XObjBuilder.h	/^	int			deck;				int		o_deck;$/;"	m	class:XObjBuilder
o_diffuse	.\Obj\XObjBuilder.h	/^	float		diffuse[3];			float	o_diffuse[3];$/;"	m	class:XObjBuilder
o_draw_disable	.\Obj\XObjBuilder.h	/^	int			draw_disable;		int		o_draw_disable;$/;"	m	class:XObjBuilder
o_emission	.\Obj\XObjBuilder.h	/^	float		emission[3];		float	o_emission[3];$/;"	m	class:XObjBuilder
o_flat	.\Obj\XObjBuilder.h	/^ 	int			flat;				int		o_flat;$/;"	m	class:XObjBuilder
o_hard	.\Obj\XObjBuilder.h	/^ 	string		hard;				string	o_hard;$/;"	m	class:XObjBuilder
o_light_level	.\Obj\XObjBuilder.h	/^	string		light_level;		string	o_light_level;$/;"	m	class:XObjBuilder
o_manip	.\Obj\XObjBuilder.h	/^	manip_data	manip;				manip_data	o_manip;$/;"	m	class:XObjBuilder
o_no_blend	.\Obj\XObjBuilder.h	/^ 	float		no_blend;			float	o_no_blend;$/;"	m	class:XObjBuilder
o_offset	.\Obj\XObjBuilder.h	/^ 	float		offset;				float	o_offset;$/;"	m	class:XObjBuilder
o_shiny	.\Obj\XObjBuilder.h	/^	float		shiny;				float	o_shiny;$/;"	m	class:XObjBuilder
o_two_sided	.\Obj\XObjBuilder.h	/^ 	int			two_sided;			int		o_two_sided;$/;"	m	class:XObjBuilder
o_wall	.\Obj\XObjBuilder.h	/^	int			wall;				int		o_wall;$/;"	m	class:XObjBuilder
obj	.\Obj\XObjBuilder.h	/^ 	XObj8 *		obj;$/;"	m	class:XObjBuilder
obj	.\OneOffs\gen_roads.cpp	/^	const char * obj;$/;"	m	class:road_pylons	file:
obj	.\WEDCore\WED_ResourceMgr.h	/^	struct obj {$/;"	s	struct:agp_t
obj	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_ObjPlacement * obj;	$/;"	m	struct:preview_object	file:
obj	.\XPTools\ViewObj.cpp	/^		string	obj;$/;"	m	struct:XObjWin::ObjPlacement_t	file:
obj8_LightCustom	.\Obj\XObjDefs.h	/^	obj8_LightCustom,			\/\/ all in name??  param is pos?$/;"	e	enum:__anon42
obj8_LightNamed	.\Obj\XObjDefs.h	/^	obj8_LightNamed,			\/\/ name has light name, param is pos$/;"	e	enum:__anon42
obj8_Lights	.\Obj\XObjDefs.h	/^	obj8_Lights,$/;"	e	enum:__anon42
obj8_Lines	.\Obj\XObjDefs.h	/^	obj8_Lines,$/;"	e	enum:__anon42
obj8_Tris	.\Obj\XObjDefs.h	/^	obj8_Tris,$/;"	e	enum:__anon42
obj8_output_light	.\AC3DPlugins\obj8_export.cpp	/^static void obj8_output_light(XObjBuilder * builder, ACObject *obj)$/;"	f	file:
obj8_output_object	.\AC3DPlugins\obj8_export.cpp	/^void obj8_output_object(XObjBuilder * builder, ACObject * obj, ACObject * root, int tex_id, int do_misc)$/;"	f
obj8_output_polygon	.\AC3DPlugins\obj8_export.cpp	/^void obj8_output_polygon(XObjBuilder * builder, Surface *s)$/;"	f
obj8_output_polyline	.\AC3DPlugins\obj8_export.cpp	/^void obj8_output_polyline(XObjBuilder * builder, Surface *s)$/;"	f
obj8_output_triangle	.\AC3DPlugins\obj8_export.cpp	/^void obj8_output_triangle(XObjBuilder * builder, Surface *s, bool is_smooth)$/;"	f
obj8_split_anim	.\AC3DPlugins\obj_update.cpp	/^void obj8_split_anim(ACObject * obj)$/;"	f
obj8_update_light	.\AC3DPlugins\obj_update.cpp	/^static void obj8_update_light(ACObject *obj)$/;"	f	file:
obj8_update_object	.\AC3DPlugins\obj_update.cpp	/^void obj8_update_object(ACObject * obj, ACObject * root)$/;"	f
objType	.\SDTS\SDTSReadTVP.cpp	/^	char						objType[2];$/;"	m	struct:PointRecord	file:
objType	.\SDTS\SDTSReadTVP.cpp	/^	char					objType[2];$/;"	m	struct:LineRecord	file:
objType	.\SDTS\SDTSReadTVP.cpp	/^	char					objType[2];$/;"	m	struct:PolygonRecord	file:
obj_End	.\Obj\XObjDefs.h	/^	obj_End = 0,$/;"	e	enum:__anon42
obj_Light	.\Obj\XObjDefs.h	/^	obj_Light,$/;"	e	enum:__anon42
obj_Line	.\Obj\XObjDefs.h	/^	obj_Line,$/;"	e	enum:__anon42
obj_Movie	.\Obj\XObjDefs.h	/^	obj_Movie,$/;"	e	enum:__anon42
obj_Polygon	.\Obj\XObjDefs.h	/^	obj_Polygon,$/;"	e	enum:__anon42
obj_Quad	.\Obj\XObjDefs.h	/^	obj_Quad,$/;"	e	enum:__anon42
obj_Quad_Cockpit	.\Obj\XObjDefs.h	/^	obj_Quad_Cockpit,$/;"	e	enum:__anon42
obj_Quad_Hard	.\Obj\XObjDefs.h	/^	obj_Quad_Hard,$/;"	e	enum:__anon42
obj_Quad_Strip	.\Obj\XObjDefs.h	/^	obj_Quad_Strip,$/;"	e	enum:__anon42
obj_Smoke_Black	.\Obj\XObjDefs.h	/^	obj_Smoke_Black,$/;"	e	enum:__anon42
obj_Smoke_White	.\Obj\XObjDefs.h	/^	obj_Smoke_White,$/;"	e	enum:__anon42
obj_Tri	.\Obj\XObjDefs.h	/^	obj_Tri,$/;"	e	enum:__anon42
obj_Tri_Fan	.\Obj\XObjDefs.h	/^	obj_Tri_Fan,$/;"	e	enum:__anon42
obj_Tri_Strip	.\Obj\XObjDefs.h	/^	obj_Tri_Strip,$/;"	e	enum:__anon42
obj_changed_cb	.\AC3DPlugins\obj_anim.cpp	/^static void	obj_changed_cb(ACObject * obj)$/;"	f	file:
obj_defs	.\WEDImportExport\WED_DSFExport.cpp	/^	vector<string>				obj_defs;$/;"	m	struct:DSF_ResourceTable	file:
obj_defs_idx	.\WEDImportExport\WED_DSFExport.cpp	/^	map<pair<string,int>, int>	obj_defs_idx;$/;"	m	struct:DSF_ResourceTable	file:
obj_get_first_surf	.\AC3DPlugins\ac_utils.cpp	/^Surface * obj_get_first_surf(ACObject * obj)$/;"	f
obj_name	.\XESCore\ObjTables.h	/^	int		obj_name;$/;"	m	struct:RepInfo_t
obj_names	.\DSF\DSFLib_Print.cpp	/^static vector<string>	obj_names;$/;"	v	file:
obj_panel_H	.\AC3DPlugins\obj_panel.h	25;"	d
obj_placement	.\OneOffs\gen_roads10.h	/^struct obj_placement {$/;"	s
obj_sel_st	.\AC3DPlugins\ac_utils.cpp	/^void	  obj_sel_st(ACObject * obj, float st_bounds[4], vector<Surface *>& out_surf)$/;"	f
obj_table	.\WEDImportExport\WED_DSFImport.cpp	/^	vector<string>		obj_table;$/;"	m	class:DSF_Importer	file:
obj_total	.\DSF\DSFLib_Print.cpp	/^static int				obj_total;$/;"	v	file:
obj_type	.\XESCore\ObjTables.h	/^	int		obj_type;$/;"	m	struct:RepInfo_t
obj_usages	.\DSF\DSFLib_Print.cpp	/^static vector<int>		obj_usages;$/;"	v	file:
object1_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value object1_;$/;"	m	struct:ValueTest	file:
objectDefs	.\DSF\DSFLibWrite.cpp	/^	vector<string>		objectDefs;$/;"	m	class:DSFFileWriterImp	file:
objectDefs	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	vector<string>		objectDefs;$/;"	m	class:DSFFileWriterImp	file:
objectPool	.\DSF\DSFLibWrite.cpp	/^	DSFContiguousPointPool	objectPool  ;$/;"	m	class:DSFFileWriterImp	file:
objectPool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSFContiguousPointPool	objectPool;$/;"	m	class:DSFFileWriterImp	file:
objectPool3d	.\DSF\DSFLibWrite.cpp	/^	DSFContiguousPointPool	objectPool3d;$/;"	m	class:DSFFileWriterImp	file:
objectValue	.\lib_json\include\json\value.h	/^      objectValue    \/\/\/< object value (collection of name\/value pairs).$/;"	e	enum:Json::ValueType
objects	.\DSF\DSFLibWrite.cpp	/^	ObjectSpecVector			objects;$/;"	m	class:DSFFileWriterImp	file:
objects	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	ObjectSpecVector			objects;$/;"	m	class:DSFFileWriterImp	file:
objects	.\ObjEdit\OE_DataModel.cpp	/^	vector<XObj>	objects;$/;"	m	struct:UndoState_t	file:
objects	.\OneOffs\gen_roads10.h	/^	vector<obj_placement>		objects;$/;"	m	class:road
objects3d	.\DSF\DSFLibWrite.cpp	/^	ObjectSpecVector			objects3d;$/;"	m	class:DSFFileWriterImp	file:
objectsPerPage_	.\lib_json\src\lib_json\json_batchallocator.h	/^   unsigned int objectsPerPage_;$/;"	m	class:Json::BatchAllocator
objs	.\WEDCore\WED_ResourceMgr.h	/^	vector<obj>		objs;$/;"	m	struct:agp_t
oe_DirectEd	.\ObjEdit\OE_TexEdWindow.h	/^	oe_DirectEd,$/;"	e	enum:__anon57
oe_PatchEd	.\ObjEdit\OE_TexEdWindow.h	/^	oe_PatchEd,$/;"	e	enum:__anon57
oe_PreviewType_HiddenSurfaces	.\ObjEdit\OE_Preview.h	/^	oe_PreviewType_HiddenSurfaces,$/;"	e	enum:__anon53
oe_PreviewType_Preview	.\ObjEdit\OE_Preview.h	/^	oe_PreviewType_Preview = 0,$/;"	e	enum:__anon53
oe_PreviewType_Projection	.\ObjEdit\OE_Preview.h	/^	oe_PreviewType_Projection,$/;"	e	enum:__anon53
oe_PreviewType_ProjectionPreview	.\ObjEdit\OE_Preview.h	/^	oe_PreviewType_ProjectionPreview$/;"	e	enum:__anon53
oe_PreviewType_Select	.\ObjEdit\OE_Preview.h	/^	oe_PreviewType_Select,$/;"	e	enum:__anon53
oe_ProjEd	.\ObjEdit\OE_TexEdWindow.h	/^	oe_ProjEd$/;"	e	enum:__anon57
off	.\OneOffs\gen_roads10.h	/^	float	off[2];$/;"	m	struct:obj_placement
off_t	.\Utils\CarbonMemMap.h	/^typedef	long long off_t;$/;"	t
off_type	.\Utils\MemIStreamBuf.h	/^	typedef typename traits::off_type off_type;$/;"	t	class:std::basic_memstreambuf
offset	.\DSF\DSFDefs.h	/^	float		offset;$/;"	m	struct:DSFRasterHeader_t
offset	.\Obj\XObjBuilder.h	/^ 	float		offset;				float	o_offset;$/;"	m	class:XObjBuilder
offset	.\RenderFarmUI\RF_Export.cpp	/^	float		offset;$/;"	m	struct:RF_ExportState_t	file:
offset	.\RenderFarmUI\RF_Import.cpp	/^	float		offset;$/;"	m	struct:RF_ImportState_t	file:
offset	.\Utils\GISUtils.cpp	/^	int				offset;$/;"	m	struct:MemJASGeoFile	file:
offset	.\Utils\RLERegion.cpp	/^void	RLERegion::offset(int x, int y)$/;"	f	class:RLERegion
offset	.\XESCore\DEMIO.cpp	/^	int				offset;$/;"	m	struct:StTiffMemFile	file:
offset_central_dir	.\Utils\unzip.c	/^	uLong offset_central_dir;   \/* offset of start of central directory with$/;"	m	struct:__anon102	file:
offset_curfile	.\Utils\unzip.c	/^    uLong offset_curfile;\/* relative offset of local header 4 bytes *\/$/;"	m	struct:unz_file_info_internal_s	file:
offset_cuts	.\Utils\QuiltUtils.h	/^inline void 	offset_cuts(vector<int>& cuts, int d)$/;"	f
offset_local_extrafield	.\Utils\unzip.c	/^	uLong offset_local_extrafield;\/* offset of the local extra field *\/$/;"	m	struct:__anon101	file:
offset_net	.\DSFTools\DSF2Text.cpp	/^static int offset_net = 0;$/;"	v	file:
offset_next1	.\XESCore\BlockDefs.h	/^	Point2			offset_next1;	\/\/ This is our offset location parallel to our NEXT segment.$/;"	m	struct:block_pt
offset_next2	.\XESCore\BlockDefs.h	/^	Point2			offset_next2;	\/\/ This is our offset location parallel to our NEXT segment.$/;"	m	struct:block_pt
offset_obj	.\DSFTools\DSF2Text.cpp	/^static int offset_obj = 0;$/;"	v	file:
offset_object_textures	.\AC3DPlugins\ac_utils.cpp	/^void	offset_object_textures(ACObject * ob, double dx, double dy, double sx, double sy)$/;"	f
offset_pol	.\DSFTools\DSF2Text.cpp	/^static int offset_pol = 0;$/;"	v	file:
offset_prev1	.\XESCore\BlockDefs.h	/^	Point2			offset_prev1;	\/\/ This is our offset location parallel to our PREVIOUS segment.$/;"	m	struct:block_pt
offset_prev2	.\XESCore\BlockDefs.h	/^	Point2			offset_prev2;	\/\/ This is our offset location parallel to our PREVIOUS segment.$/;"	m	struct:block_pt
offset_reflex1	.\XESCore\BlockDefs.h	/^	Point2			offset_reflex1[3];\/\/ If we have a reflex vertex, up to 3 points form the "shape" around it.$/;"	m	struct:block_pt
offset_reflex2	.\XESCore\BlockDefs.h	/^	Point2			offset_reflex2[3];\/\/ If non-reflex but non-discon, this gives us one useful "mid" point.$/;"	m	struct:block_pt
offset_ter	.\DSFTools\DSF2Text.cpp	/^static int offset_ter = 0;$/;"	v	file:
ogl	.\XESCore\AptDefs.h	/^	vector<AptLineLoop_t>	ogl;$/;"	m	struct:AptInfo_t
ogl_bezier	.\WEDMap\WED_CreateToolBase.cpp	/^static void ogl_bezier(const Bezier2& b, WED_MapZoomerNew * z)$/;"	f	file:
ogle_Delete	.\OGLE\ogle.h	/^	ogle_Delete		= 127$/;"	e	enum:__anon59
ogle_DeleteBack	.\OGLE\ogle.h	/^	ogle_DeleteBack = 8,$/;"	e	enum:__anon59
ogle_Down	.\OGLE\ogle.h	/^	ogle_Down 		= 31,$/;"	e	enum:__anon59
ogle_End	.\OGLE\ogle.h	/^	ogle_End		= 4,$/;"	e	enum:__anon59
ogle_Home	.\OGLE\ogle.h	/^	ogle_Home		= 1,$/;"	e	enum:__anon59
ogle_Left	.\OGLE\ogle.h	/^	ogle_Left 		= 28,$/;"	e	enum:__anon59
ogle_Right	.\OGLE\ogle.h	/^	ogle_Right 		= 29,$/;"	e	enum:__anon59
ogle_Up	.\OGLE\ogle.h	/^	ogle_Up 		= 30,$/;"	e	enum:__anon59
ok	.\XESCore\BlockAlgs.cpp	/^	bool				ok;$/;"	m	class:check_block_visitor	file:
ok_attr	.\OneOffs\osm2shape.c	/^static int ok_attr(const char * attr, const char * list)$/;"	f	file:
ok_tags	.\OneOffs\osm2shape.c	/^static const char * ok_tags = NULL;$/;"	v	file:
ok_types	.\OneOffs\osm_tile.c	/^static const char * ok_types = NULL;$/;"	v	file:
onMenuAction	.\UI\XWin.lin.cpp	/^void XWin::onMenuAction(QAction* a)$/;"	f	class:XWin
on_front	.\WEDCore\WED_Sign_Parser.cpp	/^	bool on_front;$/;"	m	class:WED_Sign_Parser	file:
on_ground	.\OneOffs\gen_roads.cpp	/^	int 		on_ground;$/;"	m	class:road_pylons	file:
on_left_side	.\Utils\CompGeomDefs2.h	/^	bool	on_left_side(const Point2& p) const { return (a * p.x_ + b * p.y_ + c) > 0; }$/;"	f	struct:Line2
on_left_side	.\Utils\CompGeomDefs2.h	/^	bool	on_left_side(const Point2& p) const { return Vector2(p1, p2).left_turn(Vector2(p1, p)); }$/;"	f	struct:Segment2
on_line	.\Utils\CompGeomDefs3.h	/^inline bool	Line3::on_line(const Point3& pt) const$/;"	f	class:Line3
on_normal_side	.\Utils\CompGeomDefs3.h	/^	bool	on_normal_side(const Point3& p) const { return n.dot(Vector3(p)) >  ndotp; }$/;"	f	struct:Plane3
on_plane	.\Utils\CompGeomDefs3.h	/^	bool	on_plane      (const Point3& p) const { return n.dot(Vector3(p)) == ndotp; }$/;"	f	struct:Plane3
on_right_side	.\Utils\CompGeomDefs2.h	/^	bool	on_right_side(const Point2& p) const { return (a * p.x_ + b * p.y_ + c) < 0; }$/;"	f	struct:Line2
on_right_side	.\Utils\CompGeomDefs2.h	/^	bool	on_right_side(const Point2& p) const { return Vector2(p1, p2).right_turn(Vector2(p1, p)); }$/;"	f	struct:Segment2
on_side_of_line_h	.\WEDCore\WED_Clipping.cpp	/^	on_side_of_line_h(double in_y, int which_side) : y(in_y), side(which_side) { $/;"	f	struct:on_side_of_line_h
on_side_of_line_h	.\WEDCore\WED_Clipping.cpp	/^struct on_side_of_line_h {$/;"	s	file:
on_side_of_line_v	.\WEDCore\WED_Clipping.cpp	/^	on_side_of_line_v(double in_x, int which_side) : x(in_x), side(which_side) { $/;"	f	struct:on_side_of_line_v
on_side_of_line_v	.\WEDCore\WED_Clipping.cpp	/^struct on_side_of_line_v {$/;"	s	file:
one_256	.\XESCore\DEMIO.cpp	/^const double one_256 = 1.0 \/ 256.0;$/;"	v
one_side	.\Tiger\TIGERTypes.h	/^	bool			one_side;$/;"	m	struct:ChainInfo_t
one_way	.\OneOffs\gen_roads.cpp	/^	int				one_way;$/;"	m	class:road	file:
one_winding	.\WEDImportExport\WED_DSFExport.cpp	/^static bool one_winding(const vector<Bezier2>& v)$/;"	f	file:
one_winding	.\WEDImportExport\WED_DSFExport.cpp	/^static bool one_winding(const vector<Segment2>& v)$/;"	f	file:
oneway	.\WEDEntities\WED_TaxiRoute.h	/^		WED_PropBoolText		oneway;$/;"	m	class:WED_TaxiRoute
oneway	.\XESCore\AptDefs.h	/^	int							oneway;$/;"	m	struct:AptRouteEdge_t
oneway_feature	.\XESCore\NetTables.h	/^	int			oneway_feature;$/;"	m	struct:NetFeatureInfo
only_dir	.\XESCore\SceneryPackages.cpp	/^static void	only_dir(string& iopath)$/;"	f	file:
only_file	.\XESCore\SceneryPackages.cpp	/^static void only_file(string& iopath)$/;"	f	file:
ontriggered	.\GUI\GUI_Application.cpp	/^void GUI_QtAction::ontriggered()$/;"	f	class:GUI_QtAction
op	.\AC3DPlugins\obj_update.cpp	/^	int op;$/;"	m	struct:update_anim_op	file:
op	.\WEDCore\WED_UndoLayer.h	/^		LayerOp				op;$/;"	m	struct:WED_UndoLayer::ObjInfo
op_Changed	.\WEDCore\WED_UndoLayer.h	/^			op_Changed,$/;"	e	enum:WED_UndoLayer::LayerOp
op_Created	.\WEDCore\WED_UndoLayer.h	/^			op_Created,$/;"	e	enum:WED_UndoLayer::LayerOp
op_Destroyed	.\WEDCore\WED_UndoLayer.h	/^			op_Destroyed$/;"	e	enum:WED_UndoLayer::LayerOp
op_strings	.\XESCore\AptIO.cpp	/^const char * op_strings[] = { "arrivals", "departures", 0 };$/;"	v
open_doc_t	.\WEDWindows\WED_StartWindow.cpp	/^struct open_doc_t {$/;"	s	file:
operations	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntEnumBitfield	operations;	$/;"	m	class:WED_ATCRunwayUse
operations	.\XESCore\AptDefs.h	/^	int				operations;$/;"	m	struct:AptRunwayRule_t
operator !	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator!() const$/;"	f	class:Json::Value
operator !=	.\Obj\XObjBuilder.cpp	/^bool XObjBuilder::manip_data::operator!=(const manip_data& rhs) const$/;"	f	class:XObjBuilder::manip_data
operator !=	.\Utils\CompGeomDefs2.h	/^		bool operator!=(const const_side_iterator& rhs) const { return p_ != rhs.p_ || n_ != rhs.n_; }$/;"	f	struct:Polygon2::const_side_iterator
operator !=	.\Utils\CompGeomDefs2.h	/^	bool		operator!=(const Bbox2& rhs) const { return p1 != rhs.p1 || p2 != rhs.p2; }$/;"	f	struct:Bbox2
operator !=	.\Utils\CompGeomDefs2.h	/^	bool operator!=(const Bezier2& x) const { return p1 != x.p1 || p2 != x.p2 || c1 != x.c1 || c2 != x.c2; }$/;"	f	struct:Bezier2
operator !=	.\Utils\CompGeomDefs2.h	/^	bool operator!=(const Line2& rhs) const { return (a * rhs.b != rhs.a * b) || (a * rhs.c != rhs.a * c) || (b * rhs.c != rhs.b * c); }$/;"	f	struct:Line2
operator !=	.\Utils\CompGeomDefs2.h	/^	bool operator!=(const Point2& rhs) const { return x_ != rhs.x_ || y_ != rhs.y_; }$/;"	f	struct:Point2
operator !=	.\Utils\CompGeomDefs2.h	/^	bool operator!=(const Segment2& rhs) const { return p1 != rhs.p1 || p2 != rhs.p2; }$/;"	f	struct:Segment2
operator !=	.\Utils\CompGeomDefs2.h	/^	bool operator!=(const Vector2& rhs) const { return dx != rhs.dx || dy != rhs.dy; }$/;"	f	struct:Vector2
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Bezier3& x) const { return p1 != x.p1 || p2 != x.p2 || c1 != x.c1 || c2 != x.c2; }$/;"	f	class:Bezier3
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Line3& rhs) const { return p != rhs.p || v != rhs.v; }$/;"	f	struct:Line3
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Plane3& rhs) const { return n != rhs.n || ndotp != rhs.ndotp; }$/;"	f	struct:Plane3
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Point3& rhs) const { return x != rhs.x || y != rhs.y || z != rhs.z; }$/;"	f	struct:Point3
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Segment3& rhs) const { return p1 != rhs.p1 || p2 != rhs.p2; }$/;"	f	struct:Segment3
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Sphere3& rhs) const { return c != rhs.c || radius_squared != rhs.radius_squared; }$/;"	f	struct:Sphere3
operator !=	.\Utils\CompGeomDefs3.h	/^	bool operator!=(const Vector3& rhs) const { return dx != rhs.dx || dy != rhs.dy || dz != rhs.dz; }$/;"	f	struct:Vector3
operator !=	.\Utils\RLERegion.cpp	/^bool RLERegion::operator!=(const RLERegion& rhs) const$/;"	f	class:RLERegion
operator !=	.\Utils\UTL_interval.h	/^	bool operator!=(const self& x) const { return n != x.n || src != x.src; }$/;"	f	class:UTL_interval::const_iterator
operator !=	.\Utils\UTL_interval.h	/^bool UTL_interval<T>::operator!=(const UTL_interval<T>& rhs) const$/;"	f	class:UTL_interval
operator !=	.\WEDEntities\WED_GISPolygon.cpp	/^bool Bezier_Seq_Iterator::operator!=(const Bezier_Seq_Iterator& rhs) const$/;"	f	class:Bezier_Seq_Iterator
operator !=	.\XESCore\AptAlgs.cpp	/^bool AptPolygonIterator::operator!=(const AptPolygonIterator& rhs) const { return i != rhs.i || p != rhs.p; }$/;"	f	class:AptPolygonIterator
operator !=	.\XESCore\DEMDefs.h	/^inline bool DEMGeo::neighbor_iterator<__dim>::operator!=(const neighbor_iterator& rhs) const$/;"	f	class:DEMGeo::neighbor_iterator
operator !=	.\XESCore\Hydro.cpp	/^	bool operator!=(const DemPt& rhs) const {$/;"	f	struct:DemPt
operator !=	.\lib_json\include\json\value.h	/^      bool operator !=( const SelfType &other ) const$/;"	f	class:Json::ValueIteratorBase
operator !=	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator !=( const Value &other ) const$/;"	f	class:Json::Value
operator &=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator&=(const UTL_interval<T>& rhs)$/;"	f	class:UTL_interval
operator &=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator&=(const interval& rhs)$/;"	f	class:UTL_interval
operator ()	.\AC3DPlugins\obj_anim.cpp	/^	bool operator()(const XObjKey& lhs, float rhs) const {$/;"	f	struct:compare_key
operator ()	.\AC3DPlugins\obj_tools.cpp	/^	bool operator()(ACObject * lhs, ACObject *rhs) const {$/;"	f	struct:sort_by_ac_state
operator ()	.\DSF\DSFLibWrite.cpp	/^		bool operator()(const ChainSpec& lhs, const ChainSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::SortChainByLength
operator ()	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool operator()(const ChainSpec& lhs, const ChainSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::SortChainByLength
operator ()	.\DSF\tri_stripper_101\graph_array.h	/^	void operator () (A & Arc) const { Arc.unmark(); }$/;"	f	class:common_structures::unmark_arc
operator ()	.\DSF\tri_stripper_101\tri_stripper.h	/^inline bool tri_stripper::_cmp_tri_degree_gt::operator () (const triangle_degree & a, const triangle_degree & b) const {$/;"	f	class:triangle_stripper::tri_stripper::_cmp_tri_degree_gt
operator ()	.\DSF\tri_stripper_101\tri_stripper.h	/^inline bool tri_stripper::_cmp_tri_interface_lt::operator() (const triangle_edge & a, const triangle_edge & b) const {$/;"	f	class:triangle_stripper::tri_stripper::_cmp_tri_interface_lt
operator ()	.\GUI\GUI_Clipboard.cpp	/^	HGLOBAL	operator()(void) const { return handle; }$/;"	f	struct:StGlobalBlock
operator ()	.\GUI\GUI_Clipboard.cpp	/^	bool operator()(void) const { return is_open; }$/;"	f	struct:StOpenClipboard
operator ()	.\GUI\GUI_Clipboard.cpp	/^	void * operator()(void) const { return ptr; }$/;"	f	struct:StGlobalLock
operator ()	.\Obj\ObjDraw.cpp	/^	bool operator()(const XObjKey& lhs, float rhs) const {$/;"	f	struct:compare_key
operator ()	.\Obj\ObjPointPool.h	/^	bool operator()(const vector<T>& lhs, const vector<T>& rhs) const {$/;"	f	struct:lex_compare_vector
operator ()	.\Obj\XDefs.h	/^				operator()(const float& __s) const$/;"	f	struct:__gnu_cxx::hash
operator ()	.\Obj\XDefs.h	/^				operator()(const std::string& __s) const$/;"	f	struct:__gnu_cxx::hash
operator ()	.\RenderFarmUI\RF_Main.cpp	/^	bool operator()(Face_handle f) const { return f->data().GetParam(af_Variant,-1.0f) == variant_ && f->data().mTerrainType == terrain_;  }$/;"	f	struct:is_same_terrain_c
operator ()	.\RenderFarmUI\RF_Main.cpp	/^	bool operator()(Face_handle f) const { return f->data().mTerrainType == terrain_; } $/;"	f	struct:is_same_terrain_p
operator ()	.\RenderFarmUI\RF_Selection.h	/^	bool operator()(const PointFeatureSelection& x, const PointFeatureSelection& y) const$/;"	f	struct:std::less
operator ()	.\RenderFarmUI\RF_SpecialCommands.cpp	/^	bool operator()(const GISPointFeature_t& x) const {$/;"	f	struct:FeatureHasNoHeight
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Bezier2& lhs, const Bezier2& rhs) const {$/;"	f	struct:greater_x_then_y
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Bezier2& lhs, const Bezier2& rhs) const {$/;"	f	struct:greater_y_then_x
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Bezier2& lhs, const Bezier2& rhs) const {$/;"	f	struct:lesser_x_then_y
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Bezier2& lhs, const Bezier2& rhs) const {$/;"	f	struct:lesser_y_then_x
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Point2& lhs, const Point2& rhs) const {$/;"	f	struct:greater_x_then_y
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Point2& lhs, const Point2& rhs) const {$/;"	f	struct:greater_y_then_x
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Point2& lhs, const Point2& rhs) const {$/;"	f	struct:lesser_x_then_y
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Point2& lhs, const Point2& rhs) const {$/;"	f	struct:lesser_y_then_x
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Segment2& lhs, const Segment2& rhs) const {$/;"	f	struct:greater_x_then_y
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Segment2& lhs, const Segment2& rhs) const {$/;"	f	struct:greater_y_then_x
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Segment2& lhs, const Segment2& rhs) const {$/;"	f	struct:lesser_x_then_y
operator ()	.\Utils\CompGeomDefs2.h	/^	bool	operator()(const Segment2& lhs, const Segment2& rhs) const {$/;"	f	struct:lesser_y_then_x
operator ()	.\Utils\CompGeomDefs2.h	/^struct lesser_x {	bool	operator()(const Point2& lhs, const Point2& rhs) const { return (lhs.x_ < rhs.x_);}};$/;"	f	struct:lesser_x
operator ()	.\Utils\CompGeomDefs2.h	/^struct lesser_y {	bool	operator()(const Point2& lhs, const Point2& rhs) const { return (lhs.y_ < rhs.y_);}};$/;"	f	struct:lesser_y
operator ()	.\Utils\CompGeomDefs3.h	/^	bool	operator()(const Point3& lhs, const Point3& rhs) const {$/;"	f	struct:greater_y_then_x_then_z
operator ()	.\Utils\CompGeomDefs3.h	/^	bool	operator()(const Point3& lhs, const Point3& rhs) const {$/;"	f	struct:lesser_y_then_x_then_z
operator ()	.\Utils\PolyRasterUtils.h	/^		bool operator()(const ActiveSeg& lhs, const ActiveSeg& rhs) const$/;"	f	struct:PolyRasterizer::compare_active_segs
operator ()	.\Utils\PolyRasterUtils.h	/^		bool operator()(const ActiveSeg& x) const$/;"	f	struct:PolyRasterizer::active_seg_dead
operator ()	.\Utils\RTree2.h	/^		bool operator()(const item_type& lhs, const item_type& rhs) const {$/;"	f	struct:RTree2::item_compare_x
operator ()	.\Utils\RTree2.h	/^		bool operator()(const item_type& lhs, const item_type& rhs) const {$/;"	f	struct:RTree2::item_compare_y
operator ()	.\Utils\STLUtils.h	/^	bool operator()()  { return i < c || s(); }$/;"	f	struct:split_seq
operator ()	.\Utils\STLUtils.h	/^	bool operator()()  { return s(); }$/;"	f	struct:filtered_seq
operator ()	.\Utils\STLUtils.h	/^	bool operator()() { return begin != end; }$/;"	f	struct:const_sequence_for_container
operator ()	.\Utils\STLUtils.h	/^	bool operator()() { return begin != end; }$/;"	f	struct:sequence_for_container
operator ()	.\Utils\UTL_interval.h	/^struct UTL_interval_op_difference { bool operator()(bool a, bool b) const { return a && !b; } };$/;"	f	struct:UTL_interval_op_difference
operator ()	.\Utils\UTL_interval.h	/^struct UTL_interval_op_intersection { bool operator()(bool a, bool b) const { return a && b; } };$/;"	f	struct:UTL_interval_op_intersection
operator ()	.\Utils\UTL_interval.h	/^struct UTL_interval_op_symmetric_difference { bool operator()(bool a, bool b) const { return a ^ b; } };$/;"	f	struct:UTL_interval_op_symmetric_difference
operator ()	.\Utils\UTL_interval.h	/^struct UTL_interval_op_union { bool operator()(bool a, bool b) const { return a || b; } };$/;"	f	struct:UTL_interval_op_union
operator ()	.\VPF\VPFImport.cpp	/^	bool operator()() const { return f_ != NULL; }$/;"	f	struct:StMemFile
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(I b, I e, const Bezier2& s) const {$/;"	f	struct:inside_polygon_curve
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(I b, I e, const Segment2& s) const {$/;"	f	struct:inside_polygon_curve
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Bezier2& lhs, const Bezier2& rhs) const { $/;"	f	struct:sort_segment_x_then_y
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Bezier2& s) const { return s.p1 == target_; }$/;"	f	struct:src_matches_target
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Bezier2& s)$/;"	f	struct:on_side_of_line_h
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Bezier2& s)$/;"	f	struct:on_side_of_line_v
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Segment2& lhs, const Segment2& rhs) const { $/;"	f	struct:sort_segment_x_then_y
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Segment2& s) const { return s.p1 == target_; }$/;"	f	struct:src_matches_target
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Segment2& s)$/;"	f	struct:on_side_of_line_h
operator ()	.\WEDCore\WED_Clipping.cpp	/^	bool operator()(const Segment2& s)$/;"	f	struct:on_side_of_line_v
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Bezier2& in_seg, Bezier2 out_segs[4])$/;"	f	struct:split_at_line_h
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Bezier2& in_seg, Bezier2 out_segs[4])$/;"	f	struct:split_at_line_v
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Bezier2p& in_seg, Bezier2p out_segs[4])$/;"	f	struct:split_at_line_h
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Bezier2p& in_seg, Bezier2p out_segs[4])$/;"	f	struct:split_at_line_v
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Segment2& in_seg, Segment2 out_segs[2])$/;"	f	struct:split_at_line_h
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Segment2& in_seg, Segment2 out_segs[2])$/;"	f	struct:split_at_line_v
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Segment2p& in_seg, Segment2p out_segs[2])$/;"	f	struct:split_at_line_h
operator ()	.\WEDCore\WED_Clipping.cpp	/^	int operator()(const Segment2p& in_seg, Segment2p out_segs[2])$/;"	f	struct:split_at_line_v
operator ()	.\WEDCore\WED_Clipping.cpp	/^	void operator()(const Point2& p1, const Point2& p2, const Bezier2& example)$/;"	f	struct:construct_segment
operator ()	.\WEDCore\WED_Clipping.cpp	/^	void operator()(const Point2& p1, const Point2& p2, const Bezier2p& example)$/;"	f	struct:construct_segment
operator ()	.\WEDCore\WED_Clipping.cpp	/^	void operator()(const Point2& p1, const Point2& p2, const S& example)$/;"	f	struct:construct_segment
operator ()	.\WEDCore\WED_LibraryMgr.h	/^		bool operator()(const string& lhs, const string& rhs) const {$/;"	f	struct:WED_LibraryMgr::compare_str_no_case
operator ()	.\WEDImportExport\WED_AptTable.cpp	/^	bool operator()(int x, int y) const {$/;"	f	struct:sort_by_apt
operator ()	.\WEDImportExport\WED_DSFExport.cpp	/^	bool operator()(const Segment2& s) const { return s.p1 == s.p2; }$/;"	f	struct:kill_zero_length_segment
operator ()	.\WEDImportExport\WED_GatewayImport.cpp	/^ FILE * operator()() { return mFile; }$/;"	f	class:RAII_file
operator ()	.\WEDImportExport\WED_ICAOTable.cpp	/^	bool operator()(int x, int y) const {$/;"	f	struct:sort_by_apt
operator ()	.\WEDImportExport\WED_VerTable.cpp	/^	bool operator()(int x, int y) const {$/;"	f	struct:sort_by_ver
operator ()	.\WEDMap\WED_CreateEdgeTool.cpp	/^	bool operator()(const Point2& p1, const Point2& p2) const {$/;"	f	struct:sort_by_seg_rat
operator ()	.\WEDMap\WED_CreateEdgeTool.cpp	/^	bool operator()(const pair<A,B>& lhs, const pair<A,B>& rhs) const {$/;"	f	struct:compare_second
operator ()	.\WEDMap\WED_CreateEdgeTool.cpp	/^	bool operator()(const pair<IGISPointSequence *, Point2>& p1, const pair<IGISPointSequence *, Point2>& p2) const {$/;"	f	struct:sort_by_seg_rat
operator ()	.\WEDMap\WED_PreviewLayer.cpp	/^struct sort_item_by_layer {	bool operator()(WED_PreviewItem * lhs, WED_PreviewItem * rhs) const { return lhs->get_layer() < rhs->get_layer(); } };$/;"	f	struct:sort_item_by_layer
operator ()	.\XESCore\AptAlgs.cpp	/^set<int> AptPolygonIterator::operator()(void) const {$/;"	f	class:AptPolygonIterator
operator ()	.\XESCore\BezierApprox.cpp	/^	bool operator()(void) { return begin == end; }$/;"	f	struct:seq_for_container
operator ()	.\XESCore\BezierApprox.cpp	/^	bool operator()(void) { return s1() && s2(); }$/;"	f	struct:seq_concat
operator ()	.\XESCore\BezierApprox.cpp	/^	bool operator()(void)$/;"	f	struct:bezier_approx_seq
operator ()	.\XESCore\BlockFill.cpp	/^	bool operator()(const Point2& p) const { return false; }$/;"	f	struct:simple_pt_locked
operator ()	.\XESCore\BlockFill.cpp	/^	bool operator()(const block_pt& p) const { return p.locked; }$/;"	f	struct:block_pt_locked
operator ()	.\XESCore\BlockFill.cpp	/^	bool operator()(const block_pt& p1, const block_pt& p2) const {$/;"	f	struct:block_pt_compare
operator ()	.\XESCore\BlockFill.cpp	/^	bool operator()(const reg_info_t& lhs, const reg_info_t& rhs) const { $/;"	f	struct:dupe_bot_reg_type
operator ()	.\XESCore\BlockFill.cpp	/^	double operator()(const Point2& p1, const Point2& p2) const {$/;"	f	struct:simple_pt_compare
operator ()	.\XESCore\BlockFill.cpp	/^	double operator()(const Point2& p1, const Point2& p2, const Point2& x) const {$/;"	f	struct:simple_pt_err
operator ()	.\XESCore\BlockFill.cpp	/^	double operator()(const block_pt& p1, const block_pt& p2, const block_pt& x) const {$/;"	f	struct:block_pt_err
operator ()	.\XESCore\DEMAlgs.cpp	/^	bool operator()(const DEMGeo::address lhs, const DEMGeo::address rhs) const {$/;"	f	struct:sort_pixel_by_height
operator ()	.\XESCore\DEMDefs.h	/^inline bool	DEMMask::operator()(int x, int y) const$/;"	f	class:DEMMask
operator ()	.\XESCore\DEMDefs.h	/^inline bool DEMGeo::neighbor_iterator<__dim>::operator()(void) const$/;"	f	class:DEMGeo::neighbor_iterator
operator ()	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::operator()(int x, int y) const$/;"	f	class:DEMGeo
operator ()	.\XESCore\DEMDefs.h	/^inline float&	DEMGeo::operator()(int x, int y)$/;"	f	class:DEMGeo
operator ()	.\XESCore\DEMTables.cpp	/^	bool operator()(void) const {$/;"	f	struct:float_between_iterator
operator ()	.\XESCore\DSFBuilder.cpp	/^	bool operator()(const int& lhs, const int& rhs) const {$/;"	f	struct:SortByLULayer
operator ()	.\XESCore\DSFBuilder.cpp	/^	bool operator()(const int& lhs, const int& rhs) const$/;"	f	struct:ObjPrio
operator ()	.\XESCore\GreedyMesh.cpp	/^bool operator()(const CDT::Face_handle f1, const CDT::Face_handle f2) const {$/;"	f	struct:eval_face
operator ()	.\XESCore\MapHelpers.h	/^	bool operator()(const Point_2& p)$/;"	f	struct:visit_pt_in_tri
operator ()	.\XESCore\MapHelpers.h	/^	typename Arr::Point_2 operator()(typename Arr::Vertex_handle v) const { return v->point(); }$/;"	f	struct:arr_vertex_pt_extractor
operator ()	.\XESCore\MapOverlay.cpp	/^	GIS_face_data operator() (GIS_face_data a, GIS_face_data b) const$/;"	f	struct:Overlay_terrain
operator ()	.\XESCore\MapOverlay.cpp	/^	GIS_halfedge_data operator() (GIS_halfedge_data a, GIS_halfedge_data b) const$/;"	f	struct:Overlay_network
operator ()	.\XESCore\MapOverlay.cpp	/^	GIS_vertex_data operator()(GIS_vertex_data a, GIS_vertex_data b) const$/;"	f	struct:Overlay_vertex
operator ()	.\XESCore\MapTopology.h	/^	bool operator()(const Value& v) const { if (pred_(v)) { col_->insert(v); return true; } else return false; }$/;"	f	struct:CollectionVisitor
operator ()	.\XESCore\MapTopology.h	/^struct PredicateAlways { bool operator()(const Value& v) const { return true; } };$/;"	f	struct:PredicateAlways
operator ()	.\XESCore\MeshAlgs.cpp	/^	bool operator()(const CDT::Face_handle& lhs, const CDT::Face_handle& rhs) const {$/;"	f	struct:sort_cdt_face_by_lowest_height
operator ()	.\XESCore\MeshAlgs.cpp	/^	bool operator()(const CDT::Vertex_handle& lhs, const CDT::Vertex_handle& rhs) const {$/;"	f	struct:sort_cdt_face_by_lowest_height
operator ()	.\XESCore\NetPlacement.cpp	/^	bool operator()(Net_JunctionInfo_t * const & p1, Net_JunctionInfo_t * const & p2) const $/;"	f	struct:sort_by_y
operator ()	.\XESCore\NetPlacement.cpp	/^	bool operator()(const JuncPair& lhs, const JuncPair& rhs) const$/;"	f	struct:sort_by_sqr_dist
operator ()	.\XESCore\Zoning.cpp	/^	bool operator()(Face_handle f) const { return !f->is_unbounded() && f->data().mTerrainType == terrain_; }$/;"	f	struct:is_same_terrain_p
operator ()	.\XESCore\Zoning.cpp	/^	bool operator()(Face_handle who) const {$/;"	f	struct:UnlinkedFace_p
operator ()	.\XESCore\Zoning.cpp	/^	bool operator()(const EdgeNode_t *& e) const { return e->f1 == f_ || e->f2 == f_; }$/;"	f	struct:edge_contains_f
operator ()	.\XESTools\GISTool_ObsCmds.cpp	/^	bool operator()(const AptInfo_t& x) const { if(icao.count(x.icao) > 0) { if(gVerbose) printf("Found: %s\\n", x.icao.c_str()); return true; } return false; }$/;"	f	struct:icao_matcher
operator *	.\DSF\DSFPointPool.h	/^inline DSFTuple DSFTuple::operator* (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator *	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple DSFTuple::operator* (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator *	.\DSF\tri_stripper_101\graph_array.h	/^		arctype & operator * ()							{ return m_Elem; }$/;"	f	class:common_structures::graph_array::arc
operator *	.\DSF\tri_stripper_101\graph_array.h	/^		const arctype & operator * () const				{ return m_Elem; }$/;"	f	class:common_structures::graph_array::arc
operator *	.\DSF\tri_stripper_101\graph_array.h	/^		const nodetype & operator * () const			{ return m_Elem; }$/;"	f	class:common_structures::graph_array::node
operator *	.\DSF\tri_stripper_101\graph_array.h	/^		nodetype & operator * ()						{ return m_Elem; }$/;"	f	class:common_structures::graph_array::node
operator *	.\Utils\CompGeomDefs2.h	/^		Segment2 operator*(){ return p_->side(n_); }$/;"	f	struct:Polygon2::const_side_iterator
operator *	.\Utils\CompGeomDefs2.h	/^	Vector2  operator* (double scalar) const { return Vector2(dx * scalar, dy * scalar); }$/;"	f	struct:Vector2
operator *	.\Utils\CompGeomDefs3.h	/^	Vector3  operator* (double scalar) const { return Vector3(dx * scalar, dy * scalar, dz * scalar); }$/;"	f	struct:Vector3
operator *	.\Utils\RLERegion.h	/^	RLERegion operator*(const RLERegion& rhs) const { RLERegion tmp(*this); tmp += rhs; return tmp; }$/;"	f	class:RLERegion
operator *	.\Utils\STLUtils.h	/^	const value_type& operator*() { return *begin; }$/;"	f	struct:const_sequence_for_container
operator *	.\Utils\STLUtils.h	/^	set_erase_iterator& operator*() { return *this; }$/;"	f	class:set_erase_iterator
operator *	.\Utils\STLUtils.h	/^	set_insert_iterator& operator*() { return *this; }$/;"	f	class:set_insert_iterator
operator *	.\Utils\STLUtils.h	/^	value_type& operator*() { return *begin; }$/;"	f	struct:sequence_for_container
operator *	.\Utils\STLUtils.h	/^	value_type& operator*() { return *s; }$/;"	f	struct:filtered_seq
operator *	.\Utils\STLUtils.h	/^	value_type& operator*() { return v[i]; }$/;"	f	struct:split_seq
operator *	.\Utils\UTL_interval.h	/^	reference operator*() { cache.first = src->at(n); cache.second = src->at(n+1); return cache; }$/;"	f	class:UTL_interval::const_iterator
operator *	.\WEDEntities\WED_GISPolygon.cpp	/^Bezier2 Bezier_Seq_Iterator::operator*(void) const$/;"	f	class:Bezier_Seq_Iterator
operator *	.\XESCore\AptAlgs.cpp	/^pair<Point2, int>	AptPolygonIterator::operator*(void) const$/;"	f	class:AptPolygonIterator
operator *	.\XESCore\BezierApprox.cpp	/^	Point2 operator*()$/;"	f	struct:bezier_approx_seq
operator *	.\XESCore\BezierApprox.cpp	/^	Point2c operator*() { return *begin; }$/;"	f	struct:seq_for_container
operator *	.\XESCore\BezierApprox.cpp	/^	Point2c operator*() { return s1() ? *s2 : *s1; }$/;"	f	struct:seq_concat
operator *	.\XESCore\DEMDefs.h	/^inline DEMGeo::address DEMGeo::neighbor_iterator<__dim>::operator * (void)$/;"	f	class:DEMGeo::neighbor_iterator
operator *	.\XESCore\DEMTables.cpp	/^	float operator * (void) const {$/;"	f	struct:float_between_iterator
operator *	.\lib_json\include\json\value.h	/^      reference operator *() const$/;"	f	class:Json::ValueConstIterator
operator *	.\lib_json\include\json\value.h	/^      reference operator *() const$/;"	f	class:Json::ValueIterator
operator *=	.\DSF\DSFPointPool.h	/^inline DSFTuple& DSFTuple::operator *= (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator *=	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple& DSFTuple::operator *= (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator *=	.\Utils\CompGeomDefs2.h	/^	Vector2& operator *= (double scalar) { dx *= scalar; dy *= scalar; return *this; }$/;"	f	struct:Vector2
operator *=	.\Utils\CompGeomDefs3.h	/^	Sphere3& operator*=(double scale) { radius_squared *= (scale * scale); return *this; }$/;"	f	struct:Sphere3
operator *=	.\Utils\CompGeomDefs3.h	/^	Vector3& operator*= (double scalar) { dx *= scalar; dy *= scalar; dz *= scalar; return *this; }$/;"	f	struct:Vector3
operator *=	.\Utils\RLERegion.cpp	/^RLERegion& RLERegion::operator*=(const RLERegion& rhs)$/;"	f	class:RLERegion
operator *=	.\XESCore\DEMDefs.cpp	/^DEMGeo& DEMGeo::operator*=(const DEMGeo& rhs)$/;"	f	class:DEMGeo
operator *=	.\XESCore\DEMDefs.cpp	/^DEMGeo& DEMGeo::operator*=(float v)$/;"	f	class:DEMGeo
operator +	.\DSF\DSFPointPool.h	/^inline DSFTuple DSFTuple::operator+ (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator +	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple DSFTuple::operator+ (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator +	.\OneOffs\gen_roads10.h	/^	road operator+(const road& rhs) const { road ret(*this); ret += rhs; return ret; }$/;"	f	class:road
operator +	.\OneOffs\gen_roads10.h	/^vector<road_map::range_ref>		operator+(const road_map::range_ref& a, const road_map::range_ref& b)$/;"	f
operator +	.\OneOffs\gen_roads10.h	/^vector<road_map::range_ref>		operator+(const vector<road_map::range_ref>& a, const road_map::range_ref& b)$/;"	f
operator +	.\OneOffs\gen_roads10.h	/^vector<train_car> operator+(const train_car& lhs, const train_car& rhs)$/;"	f
operator +	.\OneOffs\gen_roads10.h	/^vector<train_car> operator+(const vector<train_car>& lhs, const train_car& rhs)$/;"	f
operator +	.\Utils\CompGeomDefs2.h	/^	Vector2	 operator+ (const Vector2& v) const { return Vector2(dx + v.dx, dy + v.dy); }$/;"	f	struct:Vector2
operator +	.\Utils\CompGeomDefs2.h	/^inline Point2 Point2::operator+(const Vector2& v) const { return Point2(x_ + v.dx, y_ + v.dy); }$/;"	f	class:Point2
operator +	.\Utils\CompGeomDefs3.h	/^	Vector3  operator+ (const Vector3& v) const { return Vector3(dx + v.dx, dy + v.dy, dz + v.dz); }$/;"	f	struct:Vector3
operator +	.\Utils\CompGeomDefs3.h	/^inline Point3 Point3::operator+(const Vector3& v) const { return Point3(x + v.dx, y + v.dy, z + v.dz); }$/;"	f	class:Point3
operator +	.\Utils\RLERegion.h	/^	RLERegion operator+(const RLERegion& rhs) const { RLERegion tmp(*this); tmp += rhs; return tmp; }$/;"	f	class:RLERegion
operator ++	.\Utils\CompGeomDefs2.h	/^		const_side_iterator& operator++() { ++n_; return *this; }$/;"	f	struct:Polygon2::const_side_iterator
operator ++	.\Utils\STLUtils.h	/^	self& operator++() { ++begin; return *this; }$/;"	f	struct:const_sequence_for_container
operator ++	.\Utils\STLUtils.h	/^	self& operator++() { ++begin; return *this; }$/;"	f	struct:sequence_for_container
operator ++	.\Utils\STLUtils.h	/^	self& operator++() { ++i; $/;"	f	struct:split_seq
operator ++	.\Utils\STLUtils.h	/^	self& operator++() { ++s; while(s() && !f(*s)) ++s; return *this; }$/;"	f	struct:filtered_seq
operator ++	.\Utils\STLUtils.h	/^	set_erase_iterator  operator++(int) { return *this; }$/;"	f	class:set_erase_iterator
operator ++	.\Utils\STLUtils.h	/^	set_erase_iterator& operator++() { return *this; }$/;"	f	class:set_erase_iterator
operator ++	.\Utils\STLUtils.h	/^	set_insert_iterator  operator++(int) { return *this; }$/;"	f	class:set_insert_iterator
operator ++	.\Utils\STLUtils.h	/^	set_insert_iterator& operator++() { return *this; }$/;"	f	class:set_insert_iterator
operator ++	.\Utils\UTL_interval.h	/^	self operator++(int) { self tmp = *this; n += 2; return tmp; } $/;"	f	class:UTL_interval::const_iterator
operator ++	.\Utils\UTL_interval.h	/^	self& operator++() { n += 2; return *this; }$/;"	f	class:UTL_interval::const_iterator
operator ++	.\WEDEntities\WED_GISPolygon.cpp	/^Bezier_Seq_Iterator Bezier_Seq_Iterator::operator++(int)$/;"	f	class:Bezier_Seq_Iterator
operator ++	.\WEDEntities\WED_GISPolygon.cpp	/^Bezier_Seq_Iterator& Bezier_Seq_Iterator::operator++(void)$/;"	f	class:Bezier_Seq_Iterator
operator ++	.\XESCore\AptAlgs.cpp	/^AptPolygonIterator AptPolygonIterator::operator++(int)$/;"	f	class:AptPolygonIterator
operator ++	.\XESCore\AptAlgs.cpp	/^AptPolygonIterator& AptPolygonIterator::operator++(void)$/;"	f	class:AptPolygonIterator
operator ++	.\XESCore\BezierApprox.cpp	/^	bezier_approx_seq& operator++(void)$/;"	f	struct:bezier_approx_seq
operator ++	.\XESCore\BezierApprox.cpp	/^	seq_concat& operator++(void) { if(s1()) ++s2; else ++s1; return *this; } $/;"	f	struct:seq_concat
operator ++	.\XESCore\BezierApprox.cpp	/^	seq_for_container& operator++(void) { ++begin; return *this; }$/;"	f	struct:seq_for_container
operator ++	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim> DEMGeo::neighbor_iterator<__dim>::operator++(int)$/;"	f	class:DEMGeo::neighbor_iterator
operator ++	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim>& DEMGeo::neighbor_iterator<__dim>::operator++(void)$/;"	f	class:DEMGeo::neighbor_iterator
operator ++	.\XESCore\DEMTables.cpp	/^	float_between_iterator& operator++(void) {$/;"	f	struct:float_between_iterator
operator ++	.\lib_json\include\json\value.h	/^      SelfType &operator++()$/;"	f	class:Json::ValueConstIterator
operator ++	.\lib_json\include\json\value.h	/^      SelfType &operator++()$/;"	f	class:Json::ValueIterator
operator ++	.\lib_json\include\json\value.h	/^      SelfType operator++( int )$/;"	f	class:Json::ValueConstIterator
operator ++	.\lib_json\include\json\value.h	/^      SelfType operator++( int )$/;"	f	class:Json::ValueIterator
operator +=	.\DSF\DSFPointPool.h	/^inline DSFTuple& DSFTuple::operator += (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator +=	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple& DSFTuple::operator += (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator +=	.\OneOffs\gen_roads10.h	/^	road& operator+=(const road& rhs)$/;"	f	class:road
operator +=	.\OneOffs\gen_roads10.h	/^	road& operator+=(float o)$/;"	f	class:road
operator +=	.\OneOffs\gen_roads10.h	/^	road_segment&	operator+=(float o) { x[0] += o; x[1] += o; return *this; }$/;"	f	struct:road_segment
operator +=	.\OneOffs\gen_roads10.h	/^	traffic& operator+=(const train_spelling& rhs) {$/;"	f	class:traffic
operator +=	.\OneOffs\gen_roads10.h	/^vector<train_car>& operator+=(vector<train_car>& lhs, const train_car& rhs)$/;"	f
operator +=	.\Utils\CompGeomDefs2.h	/^	Segment2& operator+=(const Vector2& rhs) { p1 += rhs; p2 += rhs; return *this; }$/;"	f	struct:Segment2
operator +=	.\Utils\CompGeomDefs2.h	/^	Vector2& operator += (const Vector2& rhs) { dx += rhs.dx; dy += rhs.dy; return *this; }$/;"	f	struct:Vector2
operator +=	.\Utils\CompGeomDefs2.h	/^inline Bbox2& Bbox2::operator+=(const Bbox2& rhs)$/;"	f	class:Bbox2
operator +=	.\Utils\CompGeomDefs2.h	/^inline Bbox2& Bbox2::operator+=(const Point2& rhs)$/;"	f	class:Bbox2
operator +=	.\Utils\CompGeomDefs2.h	/^inline Bbox2& Bbox2::operator+=(const Vector2& rhs)$/;"	f	class:Bbox2
operator +=	.\Utils\CompGeomDefs2.h	/^inline Point2& Point2::operator += (const Vector2& v) { x_ += v.dx; y_ += v.dy; return *this; }$/;"	f	class:Point2
operator +=	.\Utils\CompGeomDefs3.h	/^	Segment3& operator+=(const Vector3& rhs) { p1 += rhs; p2 += rhs; return *this; }$/;"	f	struct:Segment3
operator +=	.\Utils\CompGeomDefs3.h	/^	Sphere3& operator+=(const Vector3& v) { c += v; return *this; }$/;"	f	struct:Sphere3
operator +=	.\Utils\CompGeomDefs3.h	/^	Vector3& operator+= (const Vector3& v) { dx += v.dx; dy += v.dy; dz += v.dz; return *this; }$/;"	f	struct:Vector3
operator +=	.\Utils\CompGeomDefs3.h	/^inline Point3& Point3::operator += (const Vector3& v) { x += v.dx; y += v.dy; z += v.dz; return *this; }$/;"	f	class:Point3
operator +=	.\Utils\RLERegion.cpp	/^RLERegion& RLERegion::operator+=(const RLERegion& rhs)$/;"	f	class:RLERegion
operator +=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator+=(const UTL_interval<T>& rhs)$/;"	f	class:UTL_interval
operator +=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator+=(const interval& rhs)$/;"	f	class:UTL_interval
operator +=	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumSet& operator+=(const int v) { if(value.count(v) == 0) { if (mParent) mParent->PropEditCallback(1); value.insert(v); if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropIntEnumSet
operator +=	.\XESCore\CGALDefs.h	/^inline CGAL::Bbox_2& operator+=(Bbox_2& lhs, const Bbox_2& rhs)$/;"	f
operator +=	.\XESCore\DEMDefs.cpp	/^DEMGeo& DEMGeo::operator+=(const DEMGeo& rhs)$/;"	f	class:DEMGeo
operator +=	.\XESCore\DEMDefs.cpp	/^DEMGeo& DEMGeo::operator+=(float v)$/;"	f	class:DEMGeo
operator -	.\DSF\DSFPointPool.h	/^inline DSFTuple DSFTuple::operator- (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator -	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple DSFTuple::operator- (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator -	.\Utils\CompGeomDefs2.h	/^	Vector2	 operator- (const Vector2& v) const { return Vector2(dx - v.dx, dy - v.dy); }$/;"	f	struct:Vector2
operator -	.\Utils\CompGeomDefs2.h	/^	Vector2	 operator- (void) const { return Vector2(-dx, -dy); }$/;"	f	struct:Vector2
operator -	.\Utils\CompGeomDefs2.h	/^inline Point2 Point2::operator-(const Vector2& v) const { return Point2(x_ - v.dx, y_ - v.dy); }$/;"	f	class:Point2
operator -	.\Utils\CompGeomDefs3.h	/^	Vector3  operator- (const Vector3& v) const { return Vector3(dx - v.dx, dy - v.dy, dz - v.dz); }$/;"	f	struct:Vector3
operator -	.\Utils\CompGeomDefs3.h	/^	Vector3  operator- (void) const { return Vector3(-dx, -dy, -dz); }$/;"	f	struct:Vector3
operator -	.\Utils\CompGeomDefs3.h	/^inline Point3 Point3::operator-(const Vector3& v) const { return Point3(x - v.dx, y - v.dy, z - v.dz); }$/;"	f	class:Point3
operator -	.\Utils\RLERegion.h	/^	RLERegion operator-(const RLERegion& rhs) const { RLERegion tmp(*this); tmp += rhs; return tmp; }$/;"	f	class:RLERegion
operator -	.\lib_json\include\json\value.h	/^      difference_type operator -( const SelfType &other ) const$/;"	f	class:Json::ValueIteratorBase
operator --	.\Utils\UTL_interval.h	/^	self operator--(int) { self tmp = *this; n -= 2; return tmp; } $/;"	f	class:UTL_interval::const_iterator
operator --	.\Utils\UTL_interval.h	/^	self& operator--() { n -= 2; return *this; }$/;"	f	class:UTL_interval::const_iterator
operator --	.\lib_json\include\json\value.h	/^      SelfType &operator--()$/;"	f	class:Json::ValueConstIterator
operator --	.\lib_json\include\json\value.h	/^      SelfType &operator--()$/;"	f	class:Json::ValueIterator
operator --	.\lib_json\include\json\value.h	/^      SelfType operator--( int )$/;"	f	class:Json::ValueConstIterator
operator --	.\lib_json\include\json\value.h	/^      SelfType operator--( int )$/;"	f	class:Json::ValueIterator
operator -=	.\DSF\DSFPointPool.h	/^inline DSFTuple& DSFTuple::operator -= (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator -=	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple& DSFTuple::operator -= (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator -=	.\Utils\CompGeomDefs2.h	/^	Vector2& operator -= (const Vector2& rhs) { dx -= rhs.dx; dy -= rhs.dy; return *this; }$/;"	f	struct:Vector2
operator -=	.\Utils\CompGeomDefs2.h	/^inline Point2& Point2::operator -= (const Vector2& v) { x_ -= v.dx; y_ -= v.dy; return *this; }$/;"	f	class:Point2
operator -=	.\Utils\CompGeomDefs3.h	/^	Vector3& operator-= (const Vector3& v) { dx -= v.dx; dy -= v.dy; dz -= v.dz; return *this; }$/;"	f	struct:Vector3
operator -=	.\Utils\CompGeomDefs3.h	/^inline Point3& Point3::operator -= (const Vector3& v) { x -= v.dx; y -= v.dy; z -= v.dz; return *this; }$/;"	f	class:Point3
operator -=	.\Utils\RLERegion.cpp	/^RLERegion& RLERegion::operator-=(const RLERegion& rhs)$/;"	f	class:RLERegion
operator -=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator-=(const UTL_interval<T>& rhs)$/;"	f	class:UTL_interval
operator -=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator-=(const interval& rhs)$/;"	f	class:UTL_interval
operator ->	.\DSF\tri_stripper_101\graph_array.h	/^		arctype * operator -> ()						{ return &m_Elem; }$/;"	f	class:common_structures::graph_array::arc
operator ->	.\DSF\tri_stripper_101\graph_array.h	/^		const arctype * operator -> () const			{ return &m_Elem; }$/;"	f	class:common_structures::graph_array::arc
operator ->	.\DSF\tri_stripper_101\graph_array.h	/^		const nodetype * operator -> () const			{ return &m_Elem; }$/;"	f	class:common_structures::graph_array::node
operator ->	.\DSF\tri_stripper_101\graph_array.h	/^		nodetype * operator -> ()						{ return &m_Elem; }$/;"	f	class:common_structures::graph_array::node
operator ->	.\Utils\UTL_interval.h	/^	pointer operator->() { cache.first = src->at(n); cache.second = src->at(n+1); return &cache; }$/;"	f	class:UTL_interval::const_iterator
operator /	.\DSF\DSFPointPool.h	/^inline DSFTuple DSFTuple::operator\/ (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator /	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple DSFTuple::operator\/ (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator /	.\Utils\CompGeomDefs2.h	/^	Vector2  operator\/ (double scalar) const { return Vector2(dx \/ scalar, dy \/ scalar); }$/;"	f	struct:Vector2
operator /	.\Utils\CompGeomDefs3.h	/^	Vector3  operator\/ (double scalar) const { return Vector3(dx \/ scalar, dy \/ scalar, dz \/ scalar); }$/;"	f	struct:Vector3
operator /=	.\DSF\DSFPointPool.h	/^inline DSFTuple& DSFTuple::operator \/= (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator /=	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple& DSFTuple::operator \/= (const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator /=	.\Utils\CompGeomDefs2.h	/^	Vector2& operator\/= (double scalar) { dx \/= scalar; dy \/= scalar; return *this; }$/;"	f	struct:Vector2
operator /=	.\Utils\CompGeomDefs3.h	/^	Vector3& operator\/= (double scalar) { dx \/= scalar; dy \/= scalar; dz \/= scalar; return *this; }$/;"	f	struct:Vector3
operator <	.\DSF\DSFLibWrite.cpp	/^		bool	operator<(const ObjectSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::ObjectSpec
operator <	.\DSF\DSFLibWrite.cpp	/^		bool	operator<(const PatchSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::PatchSpec
operator <	.\DSF\DSFLibWrite.cpp	/^		bool	operator<(const PolygonSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::PolygonSpec
operator <	.\DSF\DSFLibWrite.cpp	/^		bool operator<(const ChainSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::ChainSpec
operator <	.\DSF\DSFPointPool.h	/^inline bool DSFTuple::operator< (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator <	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool	operator<(const ObjectSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::ObjectSpec
operator <	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool	operator<(const PatchSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::PatchSpec
operator <	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool	operator<(const PolygonSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::PolygonSpec
operator <	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		bool operator<(const ChainSpec& rhs) const {$/;"	f	struct:DSFFileWriterImp::ChainSpec
operator <	.\DSF\dsflib_013005\DSFPointPool.cpp	/^bool DSFTuple::operator< (const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator <	.\OneOffs\shape2xon.cpp	/^	bool operator<(const pt_t& rhs) const {$/;"	f	struct:pt_t
operator <	.\OneOffs\shape2xon.cpp	/^	bool operator<(const seg_t& o) const {$/;"	f	struct:seg_t
operator <	.\Utils\PolyRasterUtils.h	/^	bool operator<(const PolyRasterSeg_t& rhs) const { return y1 < rhs.y1; }$/;"	f	struct:PolyRasterSeg_t
operator <	.\XESCore\BlockDefs.h	/^inline bool operator<(const Block_2::Face_const_handle& lhs, const Block_2::Face_const_handle& rhs)			{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\BlockDefs.h	/^inline bool operator<(const Block_2::Face_handle& lhs, const Block_2::Face_handle& rhs)			{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\BlockDefs.h	/^inline bool operator<(const Block_2::Halfedge_const_handle& lhs, const Block_2::Halfedge_const_handle& rhs)	{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\BlockDefs.h	/^inline bool operator<(const Block_2::Halfedge_handle& lhs, const Block_2::Halfedge_handle& rhs)	{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\BlockDefs.h	/^inline bool operator<(const Block_2::Vertex_const_handle& lhs, const Block_2::Vertex_const_handle& rhs)		{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\BlockDefs.h	/^inline bool operator<(const Block_2::Vertex_handle& lhs, const Block_2::Vertex_handle& rhs)		{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\Hydro.cpp	/^	bool operator<(const DemPt& rhs) const {$/;"	f	struct:DemPt
operator <	.\XESCore\MapDefs.h	/^inline bool operator<(const Face_const_handle& lhs, const Face_const_handle& rhs)			{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\MapDefs.h	/^inline bool operator<(const Face_handle& lhs, const Face_handle& rhs)			{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\MapDefs.h	/^inline bool operator<(const Halfedge_const_handle& lhs, const Halfedge_const_handle& rhs)	{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\MapDefs.h	/^inline bool operator<(const Halfedge_handle& lhs, const Halfedge_handle& rhs)	{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\MapDefs.h	/^inline bool operator<(const Vertex_const_handle& lhs, const Vertex_const_handle& rhs)		{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\XESCore\MapDefs.h	/^inline bool operator<(const Vertex_handle& lhs, const Vertex_handle& rhs)		{	return &*lhs < &*rhs;	}$/;"	f
operator <	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::operator<( const CZString &other ) const $/;"	f	class:Json::Value::CZString
operator <	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator <( const Value &other ) const$/;"	f	class:Json::Value
operator <<	.\lib_json\src\lib_json\json_writer.cpp	/^std::ostream& operator<<( std::ostream &sout, const Value &root )$/;"	f	namespace:Json
operator <<	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::operator << ( bool value )$/;"	f	class:JsonTest::TestResult
operator <<	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::operator << ( const char *value )$/;"	f	class:JsonTest::TestResult
operator <<	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::operator << ( const std::string &value )$/;"	f	class:JsonTest::TestResult
operator <<	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::operator << ( double value )$/;"	f	class:JsonTest::TestResult
operator <<	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::operator << ( int value )$/;"	f	class:JsonTest::TestResult
operator <<	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::operator << ( unsigned int value )$/;"	f	class:JsonTest::TestResult
operator <=	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator <=( const Value &other ) const$/;"	f	class:Json::Value
operator =	.\DSF\DSFPointPool.h	/^inline DSFTuple& DSFTuple::operator=(const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator =	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple& DSFTuple::operator=(const DSFTuple& rhs)$/;"	f	class:DSFTuple
operator =	.\DSF\tri_stripper_101\graph_array.h	/^		nodetype & operator = (const nodetype & Elem)	{ return (m_Elem = Elem); }$/;"	f	class:common_structures::graph_array::node
operator =	.\Obj\XObjBuilder.cpp	/^XObjBuilder::manip_data& XObjBuilder::manip_data::operator=(const manip_data& rhs)$/;"	f	class:XObjBuilder::manip_data
operator =	.\OneOffs\gen_roads10.h	/^		range_ref& operator=(const range_ref& rhs) {$/;"	f	struct:road_map::range_ref
operator =	.\OneOffs\gen_roads10.h	/^		range_ref& operator=(const road& rhs) {$/;"	f	struct:road_map::range_ref
operator =	.\Utils\BWImage.cpp	/^BWImage& BWImage::operator=(const BWImage& rhs)$/;"	f	class:BWImage
operator =	.\Utils\CompGeomDefs2.h	/^	Bbox2&		operator=(const Bbox2& rhs) { p1 = rhs.p1; p2 = rhs.p2; return *this; }$/;"	f	struct:Bbox2
operator =	.\Utils\CompGeomDefs2.h	/^	Bbox2&		operator=(const Point2& rhs) { p1 = rhs; p2 = rhs; return *this; }$/;"	f	struct:Bbox2
operator =	.\Utils\CompGeomDefs2.h	/^	Bezier2& operator=(const Bezier2& x) { p1 = x.p1; p2 = x.p2; c1 = x.c1; c2 = x.c2; return *this; }$/;"	f	struct:Bezier2
operator =	.\Utils\CompGeomDefs2.h	/^	Line2& operator=(const Line2& rhs) { a = rhs.a; b = rhs.b; c = rhs.c; return *this; }$/;"	f	struct:Line2
operator =	.\Utils\CompGeomDefs2.h	/^	Point2& operator=(const Point2& rhs) { x_ = rhs.x_; y_ = rhs.y_; return *this; }$/;"	f	struct:Point2
operator =	.\Utils\CompGeomDefs2.h	/^	Segment2& operator=(const Segment2& rhs) { p1 = rhs.p1; p2 = rhs.p2; return *this; }$/;"	f	struct:Segment2
operator =	.\Utils\CompGeomDefs2.h	/^	Vector2& operator=(const Vector2& rhs) { dx = rhs.dx; dy = rhs.dy; return *this; }$/;"	f	struct:Vector2
operator =	.\Utils\CompGeomDefs3.h	/^	Bezier3& operator=(const Bezier3& x) { p1 = x.p1; p2 = x.p2; c1 = x.c1; c2 = x.c2; return *this; }$/;"	f	class:Bezier3
operator =	.\Utils\CompGeomDefs3.h	/^	Line3& operator=(const Line3& rhs) { p = rhs.p; v = rhs.v; return *this; }$/;"	f	struct:Line3
operator =	.\Utils\CompGeomDefs3.h	/^	Plane3& operator=(const Plane3& rhs) { n = rhs.n; ndotp = rhs.ndotp; return *this; }$/;"	f	struct:Plane3
operator =	.\Utils\CompGeomDefs3.h	/^	Point3& operator=(const Point3& rhs) { x = rhs.x; y = rhs.y; z = rhs.z; return *this; }$/;"	f	struct:Point3
operator =	.\Utils\CompGeomDefs3.h	/^	Segment3& operator=(const Segment3& rhs) { p1 = rhs.p1; p2 = rhs.p2; return *this; }$/;"	f	struct:Segment3
operator =	.\Utils\CompGeomDefs3.h	/^	Sphere3& operator=(const Sphere3& rhs) { c = rhs.c; radius_squared = rhs.radius_squared; return *this; }$/;"	f	struct:Sphere3
operator =	.\Utils\CompGeomDefs3.h	/^	Vector3& operator=(const Vector3& rhs) { dx = rhs.dx; dy = rhs.dy; dz = rhs.dz; return *this; }$/;"	f	struct:Vector3
operator =	.\Utils\RLERegion.cpp	/^RLERegion& RLERegion::operator=(const RLERegion& rhs)$/;"	f	class:RLERegion
operator =	.\Utils\STLUtils.h	/^	pqueue& operator=(pqueue& rhs) { items_ = rhs.items_; back_links_.clear(); rebuild_links(); }$/;"	f	class:pqueue
operator =	.\Utils\STLUtils.h	/^	self& operator=(const self& rhs) { s = rhs.s; f = rhs.f; return *this; }$/;"	f	struct:filtered_seq
operator =	.\Utils\STLUtils.h	/^	set_erase_iterator& operator=(typename Container::const_reference value) { container->erase(value); return *this; }$/;"	f	class:set_erase_iterator
operator =	.\Utils\STLUtils.h	/^	set_insert_iterator& operator=(typename Container::const_reference value) { container->insert(value); return *this; }$/;"	f	class:set_insert_iterator
operator =	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator=(const UTL_interval<T>& rhs)$/;"	f	class:UTL_interval
operator =	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator=(const interval& rhs)$/;"	f	class:UTL_interval
operator =	.\WEDCore\WED_Errors.cpp	/^wed_error_exception& wed_error_exception::operator=(const wed_error_exception& rhs)$/;"	f	class:wed_error_exception
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropBoolText& operator=(int v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropBoolText
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropDoubleText& operator=(double v) { WED_PropDoubleText::operator=(v); return *this; }$/;"	f	class:WED_PropDoubleTextMeters
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropDoubleText& operator=(double v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropDoubleText
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropFileText& operator=(const string& v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropFileText
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnum& operator=(int v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropIntEnum
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumBitfield& operator=(const set<int>& v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropIntEnumBitfield
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntEnumSet& operator=(const set<int>& v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropIntEnumSet
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropIntText& operator=(int v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropIntText
operator =	.\WEDCore\WED_PropertyHelper.h	/^	WED_PropStringText& operator=(const string& v) { if (value != v) { if (mParent) mParent->PropEditCallback(1); value = v; if (mParent) mParent->PropEditCallback(0); } return *this; }$/;"	f	class:WED_PropStringText
operator =	.\WEDEntities\WED_GISPolygon.cpp	/^Bezier_Seq_Iterator& Bezier_Seq_Iterator::operator=(const Bezier_Seq_Iterator& rhs)$/;"	f	class:Bezier_Seq_Iterator
operator =	.\XESCore\AptAlgs.cpp	/^AptPolygonIterator& AptPolygonIterator::operator=(const AptPolygonIterator& rhs)$/;"	f	class:AptPolygonIterator
operator =	.\XESCore\DEMDefs.cpp	/^DEMGeo& DEMGeo::operator=(const DEMGeo& x)$/;"	f	class:DEMGeo
operator =	.\XESCore\DEMDefs.cpp	/^DEMGeo& DEMGeo::operator=(float v)$/;"	f	class:DEMGeo
operator =	.\XESCore\DEMDefs.cpp	/^DEMMask& DEMMask::operator=(bool x)$/;"	f	class:DEMMask
operator =	.\XESCore\DEMDefs.cpp	/^DEMMask& DEMMask::operator=(const DEMGeo& rhs)$/;"	f	class:DEMMask
operator =	.\XESCore\DEMDefs.cpp	/^DEMMask& DEMMask::operator=(const DEMMask& x)$/;"	f	class:DEMMask
operator =	.\XESCore\DEMDefs.h	/^inline DEMGeo::neighbor_iterator<__dim>& DEMGeo::neighbor_iterator<__dim>::operator=(const neighbor_iterator& rhs)$/;"	f	class:DEMGeo::neighbor_iterator
operator =	.\XESCore\Hydro.cpp	/^	DemPt& operator=(const DemPt& rhs) { x = rhs.x; y = rhs.y; return *this; }$/;"	f	struct:DemPt
operator =	.\XESCore\MapDefs.h	/^	Polygon_set_2& operator=(const Arrangement_2& rhs)$/;"	f	class:Polygon_set_2
operator =	.\XESCore\MapDefs.h	/^	Polygon_set_2& operator=(const Polygon_set_2& ps)$/;"	f	class:Polygon_set_2
operator =	.\XESCore\MeshDefs.h	/^	MeshFaceInfo& operator=(const MeshFaceInfo& rhs) {$/;"	f	struct:MeshFaceInfo
operator =	.\XESCore\MeshDefs.h	/^	MeshVertexInfo& operator=(const MeshVertexInfo& rhs) {$/;"	f	struct:MeshVertexInfo
operator =	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::operator =( const CZString &other )$/;"	f	class:Json::Value::CZString
operator =	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator=( const Value &other )$/;"	f	class:Json::Value
operator ==	.\DSF\DSFPointPool.h	/^inline bool DSFTuple::operator==(const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator ==	.\DSF\dsflib_013005\DSFPointPool.cpp	/^bool DSFTuple::operator==(const DSFTuple& rhs) const$/;"	f	class:DSFTuple
operator ==	.\Obj\ObjConvert.cpp	/^bool operator==(const vec_tex& lhs, const vec_tex& rhs)$/;"	f
operator ==	.\Obj\XObjBuilder.cpp	/^bool XObjBuilder::manip_data::operator==(const manip_data& rhs) const$/;"	f	class:XObjBuilder::manip_data
operator ==	.\OneOffs\gen_roads10.h	/^	bool operator==(const lod_range& rhs) const { return near == rhs.near && far == rhs.far; }$/;"	f	struct:lod_range
operator ==	.\OneOffs\gen_roads10.h	/^	bool operator==(const vert_props& rhs) const { return length == rhs.length && cut == rhs.cut; }$/;"	f	struct:vert_props
operator ==	.\OneOffs\shape2xon.cpp	/^	bool operator==(const pt_t& o) const {$/;"	f	struct:pt_t
operator ==	.\OneOffs\shape2xon.cpp	/^	bool operator==(const seg_t& o) const {$/;"	f	struct:seg_t
operator ==	.\Utils\CompGeomDefs2.h	/^		bool operator==(const const_side_iterator& rhs) const { return p_ == rhs.p_ && n_ == rhs.n_; }$/;"	f	struct:Polygon2::const_side_iterator
operator ==	.\Utils\CompGeomDefs2.h	/^	bool		operator==(const Bbox2& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }$/;"	f	struct:Bbox2
operator ==	.\Utils\CompGeomDefs2.h	/^	bool operator==(const Bezier2& x) const { return p1 == x.p1 && p2 == x.p2 && c1 == x.c1 && c2 == x.c2; }$/;"	f	struct:Bezier2
operator ==	.\Utils\CompGeomDefs2.h	/^	bool operator==(const BezierPoint2& rhs) const { return lo == rhs.lo && pt == rhs.pt && hi == rhs.hi; }$/;"	f	struct:BezierPoint2
operator ==	.\Utils\CompGeomDefs2.h	/^	bool operator==(const Line2& rhs) const { return (a * rhs.b == rhs.a * b) && (a * rhs.c == rhs.a * c) && (b * rhs.c == rhs.b * c); }$/;"	f	struct:Line2
operator ==	.\Utils\CompGeomDefs2.h	/^	bool operator==(const Point2& rhs) const { return x_ == rhs.x_ && y_ == rhs.y_; }$/;"	f	struct:Point2
operator ==	.\Utils\CompGeomDefs2.h	/^	bool operator==(const Segment2& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }$/;"	f	struct:Segment2
operator ==	.\Utils\CompGeomDefs2.h	/^	bool operator==(const Vector2& rhs) const { return dx == rhs.dx && dy == rhs.dy; }$/;"	f	struct:Vector2
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Bezier3& x) const { return p1 == x.p1 && p2 == x.p2 && c1 == x.c1 && c2 == x.c2; }$/;"	f	class:Bezier3
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Line3& rhs) const { return p == rhs.p && v == rhs.v; }$/;"	f	struct:Line3
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Plane3& rhs) const { return n == rhs.n && ndotp == rhs.ndotp; }$/;"	f	struct:Plane3
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Point3& rhs) const { return x == rhs.x && y == rhs.y && z == rhs.z; }$/;"	f	struct:Point3
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Segment3& rhs) const { return p1 == rhs.p1 && p2 == rhs.p2; }$/;"	f	struct:Segment3
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Sphere3& rhs) const { return c == rhs.c && radius_squared == rhs.radius_squared; }$/;"	f	struct:Sphere3
operator ==	.\Utils\CompGeomDefs3.h	/^	bool operator==(const Vector3& rhs) const { return dx == rhs.dx && dy == rhs.dy && dz == rhs.dz; }$/;"	f	struct:Vector3
operator ==	.\Utils\RLERegion.cpp	/^bool RLERegion::operator==(const RLERegion& rhs) const$/;"	f	class:RLERegion
operator ==	.\Utils\UTL_interval.h	/^	bool operator==(const self& x) const { return n == x.n && src == x.src; }$/;"	f	class:UTL_interval::const_iterator
operator ==	.\Utils\UTL_interval.h	/^bool UTL_interval<T>::operator==(const UTL_interval<T>& rhs) const$/;"	f	class:UTL_interval
operator ==	.\Utils\XFileTwiddle.cpp	/^bool	MD5_Sig::operator==(const MD5_Sig& rhs) const$/;"	f	class:MD5_Sig
operator ==	.\WEDEntities\WED_GISPolygon.cpp	/^bool Bezier_Seq_Iterator::operator==(const Bezier_Seq_Iterator& rhs) const$/;"	f	class:Bezier_Seq_Iterator
operator ==	.\XESCore\AptAlgs.cpp	/^bool AptPolygonIterator::operator==(const AptPolygonIterator& rhs) const { return i == rhs.i && p == rhs.p; }$/;"	f	class:AptPolygonIterator
operator ==	.\XESCore\BezierApprox.h	/^	bool operator==(const Point2c& rhs) const { return c == rhs.c && Point2::operator==(rhs); }$/;"	f	struct:Point2c
operator ==	.\XESCore\BlockDefs.h	/^	bool operator==(const block_pt& rhs) const { return loc == rhs.loc; }$/;"	f	struct:block_pt
operator ==	.\XESCore\BlockDefs.h	/^struct BLOCK_halfedge_data { bool operator==(const BLOCK_halfedge_data& rhs) const { return true; } };$/;"	f	struct:BLOCK_halfedge_data
operator ==	.\XESCore\DEMDefs.h	/^inline bool DEMGeo::neighbor_iterator<__dim>::operator==(const neighbor_iterator& rhs) const$/;"	f	class:DEMGeo::neighbor_iterator
operator ==	.\XESCore\Hydro.cpp	/^	bool operator==(const DemPt& rhs) const {$/;"	f	struct:DemPt
operator ==	.\XESCore\MapDefs.h	/^	bool operator==(const GISNetworkSegment_t& rhs) const {$/;"	f	struct:GISNetworkSegment_t
operator ==	.\XESCore\MapDefs.h	/^	inline bool operator==(const GIS_halfedge_data& rhs) const { return mTransition == rhs.mTransition && mSegments == rhs.mSegments && mParams == rhs.mParams && mInset == rhs.mInset; }$/;"	f	struct:GIS_halfedge_data
operator ==	.\lib_json\include\json\value.h	/^      bool operator ==( const SelfType &other ) const$/;"	f	class:Json::ValueIteratorBase
operator ==	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::operator==( const CZString &other ) const $/;"	f	class:Json::Value::CZString
operator ==	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator ==( const Value &other ) const$/;"	f	class:Json::Value
operator >	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator >( const Value &other ) const$/;"	f	class:Json::Value
operator >=	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator >=( const Value &other ) const$/;"	f	class:Json::Value
operator >>	.\lib_json\src\lib_json\json_reader.cpp	/^std::istream& operator>>( std::istream &sin, Value &root )$/;"	f	namespace:Json
operator MFMemFile *	.\VPF\VPFImport.cpp	/^	operator MFMemFile * () const { return f_; }$/;"	f	struct:StMemFile
operator MFMemFile*	.\SDTS\SDTSReadTVP.cpp	/^	operator MFMemFile* () const { return mf_; }$/;"	f	struct:StMemFile
operator Point3	.\Utils\CompGeomDefs3.h	/^	operator Point3() const { return Point3(dx, dy, dz); }$/;"	f	struct:Vector3
operator []	.\DSF\DSFPointPool.h	/^	inline double operator[](int n) const 	{ return mData[n]; 	}$/;"	f	class:DSFTuple
operator []	.\DSF\DSFPointPool.h	/^	inline double& operator[](int n) 		{ return mData[n]; 	}$/;"	f	class:DSFTuple
operator []	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline double operator[](int n) const { return mData[n]; }$/;"	f	class:DSFTuple
operator []	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline double& operator[](int n) { return mData[n]; }$/;"	f	class:DSFTuple
operator []	.\DSF\tri_stripper_101\graph_array.h	/^inline const typename graph_array<nodetype, arctype>::node & graph_array<nodetype, arctype>::operator [] (const nodeid & i) const {$/;"	f	class:common_structures::graph_array
operator []	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::node & graph_array<nodetype, arctype>::operator [] (const nodeid & i) {$/;"	f	class:common_structures::graph_array
operator []	.\DSF\tri_stripper_101\heap_array.h	/^inline const T & heap_array<T, CmpT>::operator [] (size_t i) const {$/;"	f	class:common_structures::heap_array
operator []	.\Obj\XDefs.h	/^				inline 	     reference operator[](size_type n)		 {assert(n>=0 && n<base_type::size()); return base_type::operator[](n);}$/;"	f	class:std::__dev_vector
operator []	.\Obj\XDefs.h	/^				inline const_reference operator[](size_type n) const {assert(n>=0 && n<base_type::size()); return base_type::operator[](n);}$/;"	f	class:std::__dev_vector
operator []	.\OneOffs\gen_roads10.h	/^		road& operator[](int n) { pair<iterator, iterator> p = self->equal_range(key); advance(p.first, n); return p.first->second; }$/;"	f	struct:road_map::range_ref
operator []	.\OneOffs\gen_roads10.h	/^	range_ref operator[](int key)$/;"	f	class:road_map
operator []	.\XESCore\DEMDefs.h	/^	DEMGeo& operator[](int i) {$/;"	f	class:DEMGeoMap
operator []	.\XESCore\DEMDefs.h	/^	const DEMGeo& operator[](int i) const {$/;"	f	class:DEMGeoMap
operator []	.\XESCore\DEMDefs.h	/^inline float DEMGeo::operator[](address a) const$/;"	f	class:DEMGeo
operator []	.\XESCore\DEMDefs.h	/^inline float DEMGeo::operator[](const coordinates& c) const$/;"	f	class:DEMGeo
operator []	.\XESCore\DEMDefs.h	/^inline float& DEMGeo::operator[](address a)$/;"	f	class:DEMGeo
operator []	.\XESCore\DEMDefs.h	/^inline float& DEMGeo::operator[](const coordinates& c)$/;"	f	class:DEMGeo
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( ArrayIndex index ) const$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( ArrayIndex index )$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const CppTL::ConstString &key ) const$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const CppTL::ConstString &key )$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const StaticString &key )$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const char *key ) const$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const char *key )$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const std::string &key ) const$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( const std::string &key )$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( int index ) const$/;"	f	class:Json::Value
operator []	.\lib_json\src\lib_json\json_value.cpp	/^Value::operator[]( int index )$/;"	f	class:Json::Value
operator ^=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator^=(const UTL_interval<T>& rhs)$/;"	f	class:UTL_interval
operator ^=	.\Utils\UTL_interval.h	/^UTL_interval<T>& UTL_interval<T>::operator^=(const interval& rhs)$/;"	f	class:UTL_interval
operator bool	.\WEDImportExport\WED_GatewayImport.cpp	/^ operator bool() const { return mFile != NULL; }$/;"	f	class:RAII_file
operator const char *	.\Utils\FileUtils.cpp	/^FILE_case_correct_path::operator const char * (void) const { return path; }$/;"	f	class:FILE_case_correct_path
operator const char *	.\lib_json\include\json\value.h	/^      operator const char *() const$/;"	f	class:Json::StaticString
operator delete	.\Utils\MemUtils.cpp	/^void operator delete(void* p) throw() { if(p) nedalloc::nedfree(p); }$/;"	f
operator delete	.\Utils\MemUtils.cpp	/^void operator delete(void* p, const std::nothrow_t&) throw() { if(p) nedalloc::nedfree(p); }$/;"	f
operator delete[]	.\Utils\MemUtils.cpp	/^void operator delete[](void* p) throw() { if(p) nedalloc::nedfree(p); }$/;"	f
operator delete[]	.\Utils\MemUtils.cpp	/^void operator delete[](void* p, const std::nothrow_t&) throw() { if(p) nedalloc::nedfree(p); }$/;"	f
operator double	.\WEDCore\WED_PropertyHelper.h	/^						operator double() const { return value; }$/;"	f	class:WED_PropDoubleText
operator double&	.\WEDCore\WED_PropertyHelper.h	/^						operator double&() { return value; }$/;"	f	class:WED_PropDoubleText
operator int	.\WEDCore\WED_PropertyHelper.h	/^						operator int() const { return value; }$/;"	f	class:WED_PropIntEnum
operator int	.\WEDCore\WED_PropertyHelper.h	/^	operator int() const { return value; }$/;"	f	class:WED_PropBoolText
operator int	.\WEDCore\WED_PropertyHelper.h	/^	operator int() const { return value; }$/;"	f	class:WED_PropIntText
operator int&	.\WEDCore\WED_PropertyHelper.h	/^						operator int&() { return value; }$/;"	f	class:WED_PropIntEnum
operator int&	.\WEDCore\WED_PropertyHelper.h	/^	operator int&() { return value; }$/;"	f	class:WED_PropBoolText
operator int&	.\WEDCore\WED_PropertyHelper.h	/^	operator int&() { return value; }$/;"	f	class:WED_PropIntText
operator new	.\Utils\MemUtils.cpp	/^void* operator new(std::size_t sz) throw (std::bad_alloc)$/;"	f
operator new	.\Utils\MemUtils.cpp	/^void* operator new(std::size_t sz, const std::nothrow_t& nt) throw()$/;"	f
operator new[]	.\Utils\MemUtils.cpp	/^void* operator new[](std::size_t s) throw (std::bad_alloc)$/;"	f
operator new[]	.\Utils\MemUtils.cpp	/^void* operator new[](std::size_t s, const std::nothrow_t& nt) throw()$/;"	f
operator set<int>	.\WEDCore\WED_PropertyHelper.h	/^						operator set<int>() const { return value; }$/;"	f	class:WED_PropIntEnumBitfield
operator set<int>	.\WEDCore\WED_PropertyHelper.h	/^						operator set<int>() const { return value; }$/;"	f	class:WED_PropIntEnumSet
operator set<int>&	.\WEDCore\WED_PropertyHelper.h	/^						operator set<int>&() { return value; }$/;"	f	class:WED_PropIntEnumBitfield
operator set<int>&	.\WEDCore\WED_PropertyHelper.h	/^						operator set<int>&() { return value; }$/;"	f	class:WED_PropIntEnumSet
operator string	.\WEDCore\WED_PropertyHelper.h	/^						operator string() const { return value; }$/;"	f	class:WED_PropFileText
operator string	.\WEDCore\WED_PropertyHelper.h	/^						operator string() const { return value; }$/;"	f	class:WED_PropStringText
operator string&	.\WEDCore\WED_PropertyHelper.h	/^						operator string&() { return value; }$/;"	f	class:WED_PropFileText
operator string&	.\WEDCore\WED_PropertyHelper.h	/^						operator string&() { return value; }$/;"	f	class:WED_PropStringText
operator |	.\OneOffs\gen_roads10.h	/^	road operator|(const road& rhs) const { road ret(*this); ret |= rhs; return ret; }$/;"	f	class:road
operator |=	.\OneOffs\gen_roads10.h	/^	road& operator|=(const road& rhs)$/;"	f	class:road
optimize	.\OneOffs\gen_roads10.h	/^road	optimize(vector<road_map::range_ref> r)$/;"	f
optimize_borders	.\XESCore\MeshAlgs.h	/^	int		optimize_borders;$/;"	m	struct:MeshPrefs_t
optimize_one_junction	.\XESCore\NetAlgs.cpp	/^int	optimize_one_junction(Pmwx::Vertex_handle v)$/;"	f
optimize_segments	.\OneOffs\gen_roads10.h	/^	int optimize_segments()$/;"	f	class:road
org_x	.\WEDCore\WED_TexMgr.h	/^		int			org_x;$/;"	m	struct:WED_TexMgr::TexInfo
org_y	.\WEDCore\WED_TexMgr.h	/^		int			org_y;$/;"	m	struct:WED_TexMgr::TexInfo
organize	.\OneOffs\shape2xon.cpp	/^	void organize(void)$/;"	f	struct:seg_t
orig	.\XESCore\BlockDefs.h	/^	Halfedge_handle	orig;$/;"	m	struct:block_pt
orig_face	.\XESCore\MeshDefs.h	/^	Face_handle		orig_face;				\/\/ If a face caused us to get the terrain we did, this is who!$/;"	m	struct:MeshFaceInfo
orig_first	.\XESCore\BezierApprox.cpp	/^	bez_list::iterator		orig_first;		\/\/ List iterator to original span of nodes, INCLUSIVE! REALLY!$/;"	m	struct:approx_t	file:
orig_last	.\XESCore\BezierApprox.cpp	/^	bez_list::iterator		orig_last;$/;"	m	struct:approx_t	file:
orig_next	.\XESCore\BlockFill.cpp	/^	self_type *		orig_next;$/;"	m	struct:ring_node	file:
orig_prev	.\XESCore\BlockFill.cpp	/^	self_type *		orig_prev;$/;"	m	struct:ring_node	file:
orig_vertex	.\XESCore\MeshDefs.h	/^	Vertex_handle			orig_vertex;			\/\/ Original vertex in the Pmwx.$/;"	m	struct:MeshVertexInfo
orth	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_DrapedOrthophoto * orth;	$/;"	m	struct:preview_ortho	file:
os	.\OneOffs\gen_roads10.h	/^	int os;$/;"	m	class:shader
osm_id	.\OneOffs\osm2shape.c	/^static int				osm_id;$/;"	v	file:
other	.\XESCore\Zoning.cpp	/^	FaceNode_t *	other(FaceNode_t * f) const { DebugAssert(f == f1 || f == f2); return (f == f1) ? f2 : f1; }$/;"	f	struct:EdgeNode_t
other_junc	.\XESCore\NetPlacement.cpp	/^Net_JunctionInfo_t *	Net_ChainInfo_t::other_junc(Net_JunctionInfo_t * junc)$/;"	f	class:Net_ChainInfo_t
our_new_handler	.\GUI\GUI_MemoryHog.cpp	/^void	GUI_MemoryHog::our_new_handler()$/;"	f	class:GUI_MemoryHog
out_arc_iterator	.\DSF\tri_stripper_101\graph_array.h	/^	typedef typename std::list<arc>::iterator			out_arc_iterator;$/;"	t	class:common_structures::graph_array
out_begin	.\DSF\tri_stripper_101\graph_array.h	/^		const_out_arc_iterator out_begin() const		{ return m_OutArcs.begin(); }$/;"	f	class:common_structures::graph_array::node
out_begin	.\DSF\tri_stripper_101\graph_array.h	/^		out_arc_iterator out_begin()					{ return m_OutArcs.begin(); }$/;"	f	class:common_structures::graph_array::node
out_box	.\OneOffs\osm_tile.c	/^static int	out_box[4];$/;"	v	file:
out_empty	.\DSF\tri_stripper_101\graph_array.h	/^		bool out_empty() const							{ return m_OutArcs.empty(); }$/;"	f	class:common_structures::graph_array::node
out_end	.\DSF\tri_stripper_101\graph_array.h	/^		const_out_arc_iterator out_end() const			{ return m_OutArcs.end(); }$/;"	f	class:common_structures::graph_array::node
out_end	.\DSF\tri_stripper_101\graph_array.h	/^		out_arc_iterator out_end()						{ return m_OutArcs.end(); }$/;"	f	class:common_structures::graph_array::node
out_map	.\WEDCore\WED_GISUtils.cpp	/^static UVMap_t *			out_map = NULL;$/;"	v	file:
out_sign	.\WEDCore\WED_Sign_Parser.h	/^	parser_finished_sign out_sign;$/;"	m	struct:parser_out_info
outerRing	.\XESCore\WTPM.h	/^	WTPM_LinePtr			outerRing;$/;"	m	struct:WTPM_Face
outp_	.\XESCore\DEMDefs.h	/^	size_t outp_;	$/;"	m	struct:address_fifo
output	.\OneOffs\gen_roads10.h	/^	static void output(FILE * fi) { for (vector<shader*>::iterator s = all.begin(); s != all.end(); ++s) (*s)->output_one(fi); }$/;"	f	class:shader
output	.\OneOffs\gen_roads10.h	/^	static void output(FILE * fi) { for(vector<published_road*>::iterator r = all.begin(); r != all.end(); ++r) (*r)->output_one(fi); }$/;"	f	class:published_road
output	.\OneOffs\gen_roads10.h	/^	static void output(FILE * fi) { for(vector<traffic*>::iterator t = all.begin(); t != all.end(); ++t) (*t)->output_one(fi); }$/;"	f	class:traffic
output	.\OneOffs\gen_roads10.h	/^	static void output(FILE * fi) { for(vector<virtual_table*>::iterator v = all.begin(); v != all.end(); ++v) (*v)->output_one(fi); }$/;"	f	class:virtual_table
output	.\OneOffs\gen_roads10.h	/^void output(FILE * fi)$/;"	f
output	.\Utils\PolyRasterUtils.h	/^		vector<Number>		output;$/;"	m	struct:BoxRasterizer
output_extension	.\XPTools\XGrinderShell.cpp	/^	string					output_extension;$/;"	m	struct:conversion_info	file:
output_level	.\OneOffs\osm_tile.c	/^static int	output_level = 0;$/;"	v	file:
output_one	.\OneOffs\gen_roads10.h	/^	void output_one(FILE * fi) { $/;"	f	class:traffic
output_one	.\OneOffs\gen_roads10.h	/^	void output_one(FILE * fi) {$/;"	f	class:published_road
output_one	.\OneOffs\gen_roads10.h	/^	void output_one(FILE * fi) {$/;"	f	class:virtual_table
output_one	.\OneOffs\gen_roads10.h	/^	void output_one(FILE * fi)$/;"	f	class:shader
output_one_rule	.\OneOffs\make_fill_rules.c	/^void output_one_rule(int h, int r, int v, const struct depth_info_t * ds, const char * zoning)$/;"	f
output_rule_basic	.\OneOffs\make_fill_rules.c	/^void output_rule_basic(const char * zoning, const struct depth_info_t * depth_schedule)$/;"	f
output_rule_with_height	.\OneOffs\make_fill_rules.c	/^void output_rule_with_height(const char * zoning, const struct depth_info_t * depth_schedule)$/;"	f
over_water	.\XESCore\NetPlacement.h	/^	bool							over_water;					\/\/ Is this segment over water?$/;"	m	struct:Net_ChainInfo_t
overlap	.\Utils\CompGeomDefs2.h	/^inline	bool		Bbox2::overlap(const Bbox2& rhs) const$/;"	f	class:Bbox2
overlaps	.\Utils\UTL_interval.h	/^bool	UTL_interval<T>::overlaps(T b, T e) const$/;"	f	class:UTL_interval
overlay	.\XESCore\DEMDefs.cpp	/^void DEMGeo::overlay(const DEMGeo& rhs, int dx, int dy)$/;"	f	class:DEMGeo
overlay	.\XESCore\DEMDefs.cpp	/^void DEMGeo::overlay(const DEMGeo& x)	\/\/ Overlay$/;"	f	class:DEMGeo
overlay_edge_data	.\XESCore\MapOverlay.cpp	/^	Overlay_edge_data         overlay_edge_data;$/;"	m	class:Arr_full_overlay_traits	file:
overlay_face_data	.\XESCore\MapOverlay.cpp	/^	Overlay_face_data         overlay_face_data;$/;"	m	class:Arr_full_overlay_traits	file:
overlay_forests	.\XESCore\BlockFill.cpp	/^class overlay_forests : public CGAL::_Arr_default_overlay_traits_base<Block_2, Pmwx, Block_2> {$/;"	c	file:
overlay_vertex_data	.\XESCore\MapOverlay.cpp	/^	Overlay_vertex_data       overlay_vertex_data;$/;"	m	class:Arr_full_overlay_traits	file:
owner	.\Tiger\TIGERTypes.h	/^	int				owner;		\/\/ File pass # for the owner!$/;"	m	struct:ChainInfo_t
owner	.\Utils\Skeleton.cpp	/^	SK_Polygon * 	owner;$/;"	m	struct:SK_Edge	file:
owner	.\Utils\Skeleton.cpp	/^	SK_Polygon * owner;$/;"	m	struct:SK_Vertex	file:
p	.\AC3DPlugins\uv_mapper.cpp	/^	cgd::Plane3		p;$/;"	m	struct:a_tri	file:
p	.\Utils\CompGeomDefs3.h	/^	Point3	p;$/;"	m	struct:Line3
p	.\Utils\XChunkyFileUtils.cpp	/^	uint8_t *	p;$/;"	m	class:RLEDecoder	file:
p	.\Utils\XChunkyFileUtils.cpp	/^	uint8_t * p;$/;"	m	class:FlatDecoder	file:
p	.\XESCore\AptAlgs.h	/^		int								p;$/;"	m	struct:AptPolygonIterator
p	.\XESCore\TensorRoads.cpp	/^	Point2		p;$/;"	m	struct:TensorSeed	file:
p1	.\OneOffs\shape2xon.cpp	/^	pt_t	p1;$/;"	m	struct:seg_t	file:
p1	.\Utils\CompGeomDefs2.h	/^	Point2	p1;$/;"	m	struct:Bbox2
p1	.\Utils\CompGeomDefs2.h	/^	Point2	p1;$/;"	m	struct:Bezier2
p1	.\Utils\CompGeomDefs2.h	/^	Point2	p1;$/;"	m	struct:Segment2
p1	.\Utils\CompGeomDefs2.h	/^	Point2	p1;$/;"	m	struct:Triangle2
p1	.\Utils\CompGeomDefs3.h	/^	Point3	p1;$/;"	m	class:Bezier3
p1	.\Utils\CompGeomDefs3.h	/^	Point3	p1;$/;"	m	struct:Segment3
p1_	.\Utils\RLERegion.cpp	/^	int p1_;$/;"	m	class:RLERegionDualScanner	file:
p2	.\OneOffs\shape2xon.cpp	/^	pt_t	p2;$/;"	m	struct:seg_t	file:
p2	.\Utils\CompGeomDefs2.h	/^	Point2	p2;$/;"	m	struct:Bbox2
p2	.\Utils\CompGeomDefs2.h	/^	Point2	p2;$/;"	m	struct:Bezier2
p2	.\Utils\CompGeomDefs2.h	/^	Point2	p2;$/;"	m	struct:Segment2
p2	.\Utils\CompGeomDefs2.h	/^	Point2	p2;$/;"	m	struct:Triangle2
p2	.\Utils\CompGeomDefs3.h	/^	Point3	p2;$/;"	m	class:Bezier3
p2	.\Utils\CompGeomDefs3.h	/^	Point3	p2;$/;"	m	struct:Segment3
p2_	.\Utils\RLERegion.cpp	/^	int p2_;$/;"	m	class:RLERegionDualScanner	file:
p3	.\Utils\CompGeomDefs2.h	/^	Point2	p3;$/;"	m	struct:Triangle2
p_	.\DSF\DSFLibWrite.cpp	/^	string p_;$/;"	m	struct:StCloseAndKill	file:
p_	.\Utils\CompGeomDefs2.h	/^		const Polygon2 * p_;$/;"	m	struct:Polygon2::const_side_iterator
p_info	.\Utils\XUtils.cpp	/^	struct	p_info {$/;"	s	struct:XPointPool::XPointPoolImp	file:
pack_All	.\WEDCore\WED_LibraryMgr.h	/^	pack_All		= -3,			\/\/ Return local files and the entire library.$/;"	e	enum:__anon111
pack_Default	.\WEDCore\WED_LibraryMgr.h	/^	pack_Default	= -4			\/\/ Return only library items that come from the default scenery packs that x-plane ships with.$/;"	e	enum:__anon111
pack_Library	.\WEDCore\WED_LibraryMgr.h	/^	pack_Library	= -2,			\/\/ Return only library items.$/;"	e	enum:__anon111
pack_Local	.\WEDCore\WED_LibraryMgr.h	/^	pack_Local		= -1,			\/\/ Return only files in the users's currently open pack.$/;"	e	enum:__anon111
package_scan_func	.\WEDCore\WED_PackageMgr.cpp	/^static bool package_scan_func(const char * fileName, bool is_dir, void * ref)$/;"	f	file:
packages	.\WEDCore\WED_LibraryMgr.h	/^		set<int>	packages;$/;"	m	struct:WED_LibraryMgr::res_info_t
packtext	.\AC3DPlugins\XPlaneSupport.tcl	/^proc packtext { w t } {$/;"	p
pad	.\Utils\BitmapUtils.h	/^	long			pad;$/;"	m	struct:ImageInfo
pad	.\XESCore\NetTables.h	/^	float		pad;$/;"	m	struct:NetRepInfo
pageCount_	.\lib_json\include\json\value.h	/^      PageIndex pageCount_;$/;"	m	class:Json::ValueInternalArray
pages_	.\lib_json\include\json\value.h	/^      Value **pages_;$/;"	m	class:Json::ValueInternalArray
paintEvent	.\UI\XGrinderApp.cpp	/^void XGrinderWin::paintEvent(QPaintEvent* e)$/;"	f	class:XGrinderWin
paintGL	.\UI\XWinGL.lin.cpp	/^void glWidget::paintGL(void)$/;"	f	class:glWidget
pair_set_f	.\XESCore\BlockFill.cpp	/^typedef void (* pair_set_f)(pair<double, double>& p, double v);$/;"	t	file:
pan	.\XPTools\ViewObj.cpp	/^	GLenum		pan;$/;"	m	struct:ObjViewInfo_t	file:
pan_lit	.\XPTools\ViewObj.cpp	/^	GLenum		pan_lit;$/;"	m	struct:ObjViewInfo_t	file:
panel_get_import_scaling	.\AC3DPlugins\obj_panel.cpp	/^void	panel_get_import_scaling(int tex_id, int sub, float * s_mul, float * t_mul, float * s_add, float * t_add)$/;"	f
panel_get_texture_offset_x	.\AC3DPlugins\obj_panel.cpp	/^float	panel_get_texture_offset_x(int sub, ACObject * obj)$/;"	f
panel_get_texture_offset_y	.\AC3DPlugins\obj_panel.cpp	/^float	panel_get_texture_offset_y(int sub, ACObject * obj)$/;"	f
panel_get_texture_repeat_x	.\AC3DPlugins\obj_panel.cpp	/^float	panel_get_texture_repeat_x(int sub, ACObject * obj)$/;"	f
panel_get_texture_repeat_y	.\AC3DPlugins\obj_panel.cpp	/^float	panel_get_texture_repeat_y(int sub, ACObject * obj)$/;"	f
parallel	.\Utils\CompGeomDefs3.h	/^inline bool	Line3::parallel(const Line3& l) const$/;"	f	class:Line3
param	.\DSF\DSFLibWrite.cpp	/^		int					param;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
param	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int					param;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
param	.\WEDCore\WED_GISUtils.h	/^	int		param;	$/;"	m	struct:BezierPoint2p
param	.\WEDCore\WED_GISUtils.h	/^	int		param;$/;"	m	struct:Bezier2p
param	.\WEDCore\WED_GISUtils.h	/^	int		param;$/;"	m	struct:Segment2p
param_index	.\Utils\SQLUtils.h	/^	vector<int>		param_index;$/;"	m	class:sql_command
param_name	.\Utils\SQLUtils.h	/^	vector<string>	param_name;$/;"	m	class:sql_command
params	.\Obj\XObjDefs.h	/^	float					params[12];$/;"	m	struct:XObjCmd8
params	.\RawImport\ShapeIO.cpp	/^	GISParamMap			params;$/;"	m	struct:shape_import_data	file:
parent	.\OneOffs\gen_roads.cpp	/^	road_elem *		parent;$/;"	m	class:road_underside	file:
parent	.\UI\XPopup.h	/^	Window		parent;$/;"	m	struct:xwindow
parent	.\Utils\Skeleton.cpp	/^	SK_Polygon *		parent;$/;"	m	struct:SK_Polygon	file:
parent	.\Utils\XCarBoneUtils.h	/^	int				parent;			\/\/ Table index # of our parent$/;"	m	struct:XCarBone
parent	.\WEDCore\WED_XMLWriter.h	/^		WED_XMLElement *						parent;$/;"	m	class:WED_XMLElement
parent	.\WEDImportExport\WED_DSFImport.cpp	/^	WED_Thing *			parent;$/;"	m	class:DSF_Importer	file:
parent	.\XESCore\DEMDefs.h	/^		const DEMGeo *			parent;$/;"	m	struct:DEMGeo::neighbor_iterator
parentId	.\WEDImportExport\WED_VerTable.h	/^	int parentId;$/;"	m	struct:VerInfo_t
parent_id	.\WEDEntities\WED_Thing.h	/^	int				parent_id;$/;"	m	class:WED_Thing
park_avg_max	.\XESCore\Zoning.h	/^	float		park_avg_min,	park_avg_max;			\/\/ Average park level$/;"	m	struct:ZoningRule_t
park_avg_min	.\XESCore\Zoning.h	/^	float		park_avg_min,	park_avg_max;			\/\/ Average park level$/;"	m	struct:ZoningRule_t
parse	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::parse( const char *beginDoc, const char *endDoc, $/;"	f	class:Json::Reader
parse	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::parse( const std::string &document, $/;"	f	class:Json::Reader
parse	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::parse( std::istream& sin,$/;"	f	class:Json::Reader
parseAndSaveValueTree	.\lib_json\src\jsontestrunner\main.cpp	/^parseAndSaveValueTree( const std::string &input, $/;"	f	file:
parseCommandLine	.\lib_json\src\jsontestrunner\main.cpp	/^parseCommandLine( int argc, const char *argv[], $/;"	f
parse_field_float	.\XESCore\DEMIO.cpp	/^double	parse_field_float(const char ** s, const char * e)$/;"	f
parse_field_int	.\XESCore\DEMIO.cpp	/^int parse_field_int(const char ** s, const char * e)$/;"	f
parse_linear_codes	.\XESCore\AptIO.cpp	/^static void	parse_linear_codes(const string& codes, set<int> * attributes)$/;"	f	file:
parser	.\WEDCore\WED_XMLReader.h	/^	XML_Parser				parser;$/;"	m	class:WED_XMLReader
parser_color_t	.\WEDCore\WED_Sign_Parser.h	/^typedef char parser_color_t;$/;"	t
parser_error_info	.\WEDCore\WED_Sign_Parser.h	/^struct parser_error_info {$/;"	s
parser_error_t	.\WEDCore\WED_Sign_Parser.h	/^enum parser_error_t$/;"	g
parser_finished_sign	.\WEDCore\WED_Sign_Parser.h	/^struct parser_finished_sign$/;"	s
parser_glyph_info	.\WEDCore\WED_Sign_Parser.h	/^	parser_glyph_info(parser_color_t color, parser_glyph_t name)$/;"	f	struct:parser_glyph_info
parser_glyph_info	.\WEDCore\WED_Sign_Parser.h	/^struct parser_glyph_info$/;"	s
parser_glyph_t	.\WEDCore\WED_Sign_Parser.h	/^typedef string parser_glyph_t;$/;"	t
parser_in_info	.\WEDCore\WED_Sign_Parser.h	/^	parser_in_info(const string & signText):input(signText)\/*,position(0)*\/{}$/;"	f	struct:parser_in_info
parser_in_info	.\WEDCore\WED_Sign_Parser.h	/^struct parser_in_info$/;"	s
parser_out_info	.\WEDCore\WED_Sign_Parser.h	/^struct parser_out_info$/;"	s
part_type	.\Utils\XCarBoneUtils.h	/^	int				part_type;		\/\/ Enum for the type of part, used in sim$/;"	m	struct:XCarBone
partial	.\WEDCore\WED_LibraryMgr.cpp	/^	string	partial;$/;"	m	struct:local_scan_t	file:
partition	.\Utils\CompGeomDefs2.h	/^inline void	Bezier2::partition(Bezier2& lhs, Bezier2& rhs, double t) const$/;"	f	class:Bezier2
parts	.\OneOffs\gen_roads.cpp	/^	vector<road_elem *>	parts;$/;"	m	class:road_composite	file:
pass_Back	.\ObjEdit\OE_DrawObj.cpp	/^	pass_Back,$/;"	e	enum:__anon45	file:
pass_FrontNormal	.\ObjEdit\OE_DrawObj.cpp	/^	pass_FrontNormal,$/;"	e	enum:__anon45	file:
pass_FrontOverlay	.\ObjEdit\OE_DrawObj.cpp	/^	pass_FrontOverlay,$/;"	e	enum:__anon45	file:
pass_WireNormal	.\ObjEdit\OE_DrawObj.cpp	/^	pass_WireNormal,$/;"	e	enum:__anon45	file:
pass_WireOverlay	.\ObjEdit\OE_DrawObj.cpp	/^	pass_WireOverlay$/;"	e	enum:__anon45	file:
patches	.\DSF\DSFLibWrite.cpp	/^	PatchSpecVector					patches;$/;"	m	class:DSFFileWriterImp	file:
patches	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	PatchSpecVector					patches;$/;"	m	class:DSFFileWriterImp	file:
path	.\DSF\DSFLibWrite.cpp	/^		DSFTupleVector			path;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
path	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		DSFTupleVector			path;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
path	.\Utils\FileUtils.h	/^	char * path;$/;"	m	class:FILE_case_correct_path
path	.\WEDImportExport\WED_AptIE.cpp	/^	const char *	path;$/;"	m	struct:LazyLog_t	file:
pattern_runway	.\XESCore\AptDefs.h	/^	string						pattern_runway;$/;"	m	struct:AptFlow_t
pattern_rwy	.\WEDEntities\WED_ATCFlow.h	/^	WED_PropIntEnum		pattern_rwy;$/;"	m	class:WED_ATCFlow
pattern_side	.\XESCore\AptDefs.h	/^	int							pattern_side;$/;"	m	struct:AptFlow_t
pattern_strings	.\XESCore\AptIO.cpp	/^const char * pattern_strings[] = { "left", "right", 0 };$/;"	v
pavements	.\XESCore\AptDefs.h	/^	AptPavementVector	pavements;				\/\/ 810 structures$/;"	m	struct:AptInfo_t
pclose	.\XPTools\XGrinderShell.cpp	48;"	d	file:
peek	.\DSF\tri_stripper_101\heap_array.h	/^inline const T & heap_array<T, CmpT>::peek(size_t i) const {$/;"	f	class:common_structures::heap_array
perlin_1d	.\Utils\perlin.cpp	/^float perlin_1d(float x, int min_level, int max_level, float persistence, int seed)$/;"	f
perlin_2d	.\Utils\perlin.cpp	/^float perlin_2d(float x, float y, int min_level, int max_level, float persistence, int seed)$/;"	f
perlin_params	.\OneOffs\gen_roads10.h	/^struct perlin_params {$/;"	s
perpendicular_ccw	.\Utils\CompGeomDefs2.h	/^	Vector2 perpendicular_ccw() const { return Vector2(-dy, dx); }$/;"	f	struct:Vector2
perpendicular_cw	.\Utils\CompGeomDefs2.h	/^	Vector2 perpendicular_cw() const { return Vector2(dy, -dx); }$/;"	f	struct:Vector2
pfile_in_zip_read	.\Utils\unzip.c	/^    file_in_zip_read_info_s* pfile_in_zip_read; \/* structure about the current$/;"	m	struct:__anon102	file:
pick_histo	.\OneOffs\make_fill_rules.c	/^int	pick_histo(float * table)$/;"	f
pick_major_axis	.\XESCore\BlockAlgs.cpp	/^int	pick_major_axis($/;"	f
pick_tile	.\OneOffs\gen_tiles.c	/^int pick_tile(int num_choices)$/;"	f
pick_walls	.\WEDEntities\WED_FacadePlacement.h	/^	WED_PropBoolText		pick_walls;$/;"	m	class:WED_FacadePlacement
pitch	.\WEDNetwork\WED_NWLinkAdapter.h	/^    float   pitch;$/;"	m	struct:WED_NWCamera_t
pix_h	.\OneOffs\gen_roads.cpp	/^	int				pix_h;		\/\/ pixels per meter (PPM)$/;"	m	struct:tex_info	file:
pixel	.\OneOffs\gen_roads.cpp	/^	int		pixel;$/;"	m	struct:car_lane	file:
pixel_area	.\XESCore\DEMDefs.h	/^	inline	int		pixel_area() const { return mWidth * mHeight; }$/;"	f	struct:DEMGeo
pixel_bounds	.\GUI\GUI_Fonts.cpp	/^	int		pixel_bounds[4];	\/\/ Integer pixel coords in the bitmap where we stored this guy!  Stored in absolute pixels, not ratio$/;"	m	struct:OGL_char_info	file:
pixel_offset	.\XESCore\DEMDefs.h	/^	inline	float	pixel_offset() const { return mPost ? 0.0 : 0.5; }	\/\/ distance from the coordinate defining a pixel to its sampling center.$/;"	f	struct:DEMGeo
pixel_to_meter	.\OneOffs\gen_roads.cpp	/^inline float pixel_to_meter(tex_info * t, float s)$/;"	f
place_buildings	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		place_buildings;$/;"	m	struct:ProcessingPrefs_t
plane_a	.\XESCore\MeshDefs.h	/^	double			plane_a;$/;"	m	struct:MeshFaceInfo
plane_b	.\XESCore\MeshDefs.h	/^	double			plane_b;$/;"	m	struct:MeshFaceInfo
plane_c	.\XESCore\MeshDefs.h	/^	double			plane_c;$/;"	m	struct:MeshFaceInfo
planes	.\Utils\BitmapUtils.cpp	/^	short			planes;$/;"	m	struct:BMPImageDesc	file:
platform_BigEndian	.\Utils\EndianUtils.h	/^	platform_BigEndian,$/;"	e	enum:__anon90
platform_LittleEndian	.\Utils\EndianUtils.h	/^	platform_LittleEndian$/;"	e	enum:__anon90
platform_Native	.\Utils\EndianUtils.h	/^	platform_Native,		\/* This is whatever your native code is compiled to. *\/$/;"	e	enum:__anon90
pm	.\Utils\GISUtils.cpp	/^static int pm(char * s, void * v)$/;"	f	file:
pm_edges	.\XESCore\WTPM.h	/^	EdgePair				pm_edges;$/;"	m	struct:WTPM_Line
pm_face	.\XESCore\WTPM.h	/^	DFace *					pm_face;$/;"	m	struct:WTPM_Face
pm_vertex	.\XESCore\WTPM.h	/^	DVertex *				pm_vertex;$/;"	m	struct:WTPM_Node
pmwx	.\XESCore\MapAlgs.cpp	/^	Pmwx *									pmwx;$/;"	m	struct:UpdatePmwx	file:
pmwx_Coastal	.\XESCore\MapTopology.h	/^	pmwx_Coastal,			\/\/ 2-way conditions (wet\/drY)$/;"	e	enum:Pmwx_Coastal_t
pmwx_CoastalBoundary	.\XESCore\MapTopology.h	/^	pmwx_CoastalBoundary,	\/\/ Three way condition (impossible for HE)$/;"	e	enum:Pmwx_Coastal_t
pmwx_Dry	.\XESCore\MapTopology.h	/^	pmwx_Dry,$/;"	e	enum:Pmwx_Coastal_t
pmwx_DryBoundary	.\XESCore\MapTopology.h	/^	pmwx_DryBoundary,$/;"	e	enum:Pmwx_Coastal_t
pmwx_Unbounded	.\XESCore\MapTopology.h	/^	pmwx_Unbounded,$/;"	e	enum:Pmwx_Coastal_t
pmwx_Wet	.\XESCore\MapTopology.h	/^	pmwx_Wet,				\/\/ Uniform conditions$/;"	e	enum:Pmwx_Coastal_t
pmwx_WetBoundary	.\XESCore\MapTopology.h	/^	pmwx_WetBoundary,$/;"	e	enum:Pmwx_Coastal_t
pmwx_categorize	.\XESCore\MapTopology.h	/^inline Pmwx_Coastal_t pmwx_categorize(Pmwx::Halfedge_const_handle he)$/;"	f
pmwx_categorize	.\XESCore\MapTopology.h	/^inline Pmwx_Coastal_t pmwx_categorize(Pmwx::Vertex_const_handle v)$/;"	f
png_buffered_read_func	.\Utils\BitmapUtils.cpp	/^void png_buffered_read_func(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_current_pos	.\Utils\BitmapUtils.cpp	/^const char *			png_current_pos	= NULL;$/;"	v
png_end_pos	.\Utils\BitmapUtils.cpp	/^const char *			png_end_pos 	= NULL;$/;"	v
png_start_pos	.\Utils\BitmapUtils.cpp	/^const char *			png_start_pos 	= NULL;$/;"	v
point_index_H	.\Utils\point_index.h	25;"	d
pointer	.\Utils\UTL_interval.h	/^	typedef const value_type*					pointer;$/;"	t	class:UTL_interval::const_iterator
pointer	.\lib_json\include\json\value.h	/^      typedef Value *pointer;$/;"	t	class:Json::ValueIterator
pointer	.\lib_json\include\json\value.h	/^      typedef const Value *pointer;$/;"	t	class:Json::ValueConstIterator
points	.\SDTS\SDTSReadTVP.cpp	/^	PointTable		points;$/;"	m	struct:Topology	file:
pol	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_GISPolygon * pol;	$/;"	m	struct:preview_polygon	file:
pol	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_PolygonPlacement * pol;	$/;"	m	struct:preview_pol	file:
pol_defs	.\WEDImportExport\WED_DSFExport.cpp	/^	vector<string>				pol_defs;$/;"	m	struct:DSF_ResourceTable	file:
pol_defs_idx	.\WEDImportExport\WED_DSFExport.cpp	/^	map<pair<string, int>, int>	pol_defs_idx;$/;"	m	struct:DSF_ResourceTable	file:
pol_info_t	.\WEDCore\WED_ResourceMgr.h	/^struct	pol_info_t {$/;"	s
pol_table	.\WEDImportExport\WED_DSFImport.cpp	/^	vector<string>		pol_table;$/;"	m	class:DSF_Importer	file:
poly	.\WEDImportExport\WED_DSFImport.cpp	/^	WED_Thing *			poly;$/;"	m	class:DSF_Importer	file:
poly_CCW	.\XPTools\ConvertObj.cpp	/^	poly_CCW,$/;"	e	enum:__anon138	file:
poly_CW	.\XPTools\ConvertObj.cpp	/^	poly_CW,$/;"	e	enum:__anon138	file:
poly_Solid	.\ObjEdit\OE_DrawObj.h	/^	poly_Solid,				\/\/ Draw as a solid object$/;"	e	enum:__anon46
poly_Wire	.\ObjEdit\OE_DrawObj.h	/^	poly_Wire = 0,			\/\/ Draw as a wire frame$/;"	e	enum:__anon46
poly_WireAndSolid	.\ObjEdit\OE_DrawObj.h	/^	poly_WireAndSolid,		\/\/ Draw solid but with wire frame$/;"	e	enum:__anon46
polygonDefs	.\DSF\DSFLibWrite.cpp	/^	vector<string>		polygonDefs;$/;"	m	class:DSFFileWriterImp	file:
polygonDefs	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	vector<string>		polygonDefs;$/;"	m	class:DSFFileWriterImp	file:
polygonPool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSFContiguousPointPool	polygonPool;$/;"	m	class:DSFFileWriterImp	file:
polygonPools	.\DSF\DSFLibWrite.cpp	/^	DSFContiguousPointPoolMap					polygonPools;$/;"	m	class:DSFFileWriterImp	file:
polygons	.\DSF\DSFLibWrite.cpp	/^	PolygonSpecVector				polygons;$/;"	m	class:DSFFileWriterImp	file:
polygons	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	PolygonSpecVector				polygons;$/;"	m	class:DSFFileWriterImp	file:
polygons	.\SDTS\SDTSReadTVP.cpp	/^	PolygonTable	polygons;$/;"	m	struct:Topology	file:
pool	.\DSF\DSFLibWrite.cpp	/^		int						pool;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
pool	.\DSF\DSFLibWrite.cpp	/^		int					pool;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
pool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						pool;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
pool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int					pool;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
pool_accumulate	.\XPTools\ConvertObj3DS.cpp	/^int pool_accumulate(ObjPointPool * pool, const float xyz[3], const float st[2])$/;"	f
pool_get	.\XPTools\ConvertObj3DS.cpp	/^void pool_get(ObjPointPool * pool, int idx, float xyz[3], float st[2])$/;"	f
pop	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::pop() {$/;"	f	class:common_structures::heap_array
pop	.\XESCore\DEMDefs.h	/^	address pop(void) { DebugAssert(size_ > 0); address r = data_[outp_]; outp_ = (outp_+1) % data_.size(); --size_; return r; }$/;"	f	struct:address_fifo
pop	.\XESCore\Zoning.cpp	/^EdgeNode_t *	FaceGraph_t::pop(void)$/;"	f	class:FaceGraph_t
popPredicateContext	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::popPredicateContext()$/;"	f	class:JsonTest::TestResult
pop_front	.\Utils\STLUtils.h	/^	void			pop_front()$/;"	f	class:pqueue
popen	.\XPTools\XGrinderShell.cpp	47;"	d	file:
pos_in_buffered_data	.\Utils\zip.c	/^    uInt pos_in_buffered_data;  \/* last written byte in buffered_data *\/$/;"	m	struct:__anon104	file:
pos_in_central_dir	.\Utils\unzip.c	/^	uLong pos_in_central_dir;   \/* pos of the current file in the central dir*\/$/;"	m	struct:__anon102	file:
pos_in_zipfile	.\Utils\unzip.c	/^	uLong pos_in_zipfile;       \/* position in byte on the zipfile, for fseek*\/$/;"	m	struct:__anon101	file:
pos_local_extrafield	.\Utils\unzip.c	/^	uLong pos_local_extrafield;   \/* position in the local extra field in read*\/$/;"	m	struct:__anon101	file:
pos_local_header	.\Utils\zip.c	/^    uLong pos_local_header;     \/* offset of the local header of the file$/;"	m	struct:__anon104	file:
pos_type	.\Utils\MemIStreamBuf.h	/^	typedef typename traits::pos_type pos_type;$/;"	t	class:std::basic_memstreambuf
position	.\Utils\XChunkyFileUtils.h	/^	char *		position;$/;"	m	struct:XAtomPackedData
position	.\WEDCore\WED_Sign_Parser.h	/^	int position;\/\/The position in the string the error starts at$/;"	m	struct:parser_error_info
possible_approx_q	.\XESCore\BezierApprox.cpp	/^typedef multimap<double, possible_approx_t *>	possible_approx_q;$/;"	t	file:
possible_approx_t	.\XESCore\BezierApprox.cpp	/^struct	possible_approx_t {$/;"	s	file:
pow2_down	.\XPTools\DDSTool.cpp	/^int pow2_down(int n)$/;"	f
pow2_up	.\XPTools\DDSTool.cpp	/^int pow2_up(int n)$/;"	f
pow_curve	.\OneOffs\gen_tiles.c	/^float		pow_curve;$/;"	v
pqueue	.\Utils\STLUtils.h	/^	pqueue() { }$/;"	f	class:pqueue
pqueue	.\Utils\STLUtils.h	/^	pqueue(const pqueue& rhs) : items_(rhs.items_) { rebuild_links(); }$/;"	f	class:pqueue
pqueue	.\Utils\STLUtils.h	/^class pqueue {$/;"	c
pred_	.\XESCore\MapTopology.h	/^	Predicate				pred_;$/;"	m	struct:CollectionVisitor
pred_want_ag	.\XESTools\GISTool_ProcessingCmds.cpp	/^bool pred_want_ag(CDT::Face_handle f)$/;"	f
predicateId_	.\lib_json\src\test_lib_json\jsontest.h	/^      PredicateContext::Id predicateId_;$/;"	m	class:JsonTest::TestResult
predicateStackTail_	.\lib_json\src\test_lib_json\jsontest.h	/^      PredicateContext *predicateStackTail_;$/;"	m	class:JsonTest::TestResult
pref_start_agl	.\XESCore\NetTables.h	/^	float		pref_start_agl;$/;"	m	struct:BridgeInfo
prefix	.\Utils\MemFileUtils.cpp	/^  char prefix[155];		\/* 345 *\/$/;"	m	struct:tar_header	file:
preform_final_semantic_checks	.\WEDCore\WED_Sign_Parser.cpp	/^bool WED_Sign_Parser::preform_final_semantic_checks(const parser_in_info & inStr, parser_out_info & output)$/;"	f	class:WED_Sign_Parser
prefs_init	.\AC3DPlugins\prefs.cpp	/^void	prefs_init(void)$/;"	f
prev	.\Utils\CompGeomDefs2.h	/^	int			prev(int index) const { return (index + size() - 1) % size(); }$/;"	f	struct:Polygon2
prev	.\Utils\Skeleton.cpp	/^	SK_Edge * 	prev;$/;"	m	struct:SK_Vertex	file:
prev	.\Utils\Skeleton.cpp	/^	SK_Vertex * 	prev;$/;"	m	struct:SK_Edge	file:
prev	.\XESCore\BezierApprox.cpp	/^	approx_t *				prev;			\/\/ Links to prev\/next approx in our chain$/;"	m	struct:approx_t	file:
prev	.\XESCore\BlockFill.cpp	/^	self_type *		prev;$/;"	m	struct:ring_node	file:
prev	.\XESCore\NetTables.h	/^	int			prev;$/;"	m	struct:ChangeRule
prev	.\XESCore\Zoning.cpp	/^	EdgeNode_t *	prev;$/;"	m	struct:EdgeNode_t	file:
prev	.\XESCore\Zoning.cpp	/^	FaceNode_t *			prev;$/;"	m	struct:FaceNode_t	file:
prev_contig	.\XESCore\NetHelpers.h	/^inline Pmwx::Halfedge_handle prev_contig(Pmwx::Halfedge_handle me)$/;"	f
prev_he_of_type	.\XESTools\HackExport.cpp	/^Pmwx::Halfedge_handle	prev_he_of_type(Pmwx::Halfedge_handle e, int type)$/;"	f
preventDialogOnCrash	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::preventDialogOnCrash()$/;"	f	class:JsonTest::Runner
preview_facade	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_facade(WED_FacadePlacement * f, int l) : preview_polygon(f,l,false), fac(f) { }$/;"	f	struct:preview_facade
preview_facade	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_facade : public preview_polygon {$/;"	s	file:
preview_forest	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_forest(WED_ForestPlacement * f, int l) : preview_polygon(f,l,false), fst(f) { }$/;"	f	struct:preview_forest
preview_forest	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_forest : public preview_polygon {$/;"	s	file:
preview_helipad	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_helipad(WED_Helipad * h, int l) : WED_PreviewItem(l), heli(h) { }$/;"	f	struct:preview_helipad
preview_helipad	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_helipad : public WED_PreviewItem {$/;"	s	file:
preview_level	.\WEDMap\WED_PreviewLayer.cpp	/^	int	preview_level;$/;"	m	struct:preview_object	file:
preview_object	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_object(WED_ObjPlacement * o, int l, int pl, IResolver * r) : WED_PreviewItem(l), obj(o), resolver(r), preview_level(pl) { }$/;"	f	struct:preview_object
preview_object	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_object : public WED_PreviewItem {$/;"	s	file:
preview_ortho	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_ortho(WED_DrapedOrthophoto * o, int l, IResolver * r) : preview_polygon(o,l,true), orth(o), resolver(r) { }$/;"	f	struct:preview_ortho
preview_ortho	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_ortho : public preview_polygon {$/;"	s	file:
preview_pol	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_pol(WED_PolygonPlacement * p, int l, IResolver * r) : preview_polygon(p,l,false), pol(p), resolver(r) { }$/;"	f	struct:preview_pol
preview_pol	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_pol : public preview_polygon {$/;"	s	file:
preview_polygon	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_polygon(WED_GISPolygon * p, int l, bool uv) : WED_PreviewItem(l), pol(p), has_uv(uv) { }$/;"	f	struct:preview_polygon
preview_polygon	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_polygon : public WED_PreviewItem {$/;"	s	file:
preview_runway	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_runway(WED_Runway * r, int l, int is_shoulders) : WED_PreviewItem(l), rwy(r), do_shoulders(is_shoulders) { }$/;"	f	struct:preview_runway
preview_runway	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_runway : public WED_PreviewItem {$/;"	s	file:
preview_sealane	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_sealane(WED_Sealane * s, int l) : WED_PreviewItem(l), sea(s) { }$/;"	f	struct:preview_sealane
preview_sealane	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_sealane : public WED_PreviewItem {$/;"	s	file:
preview_taxiway	.\WEDMap\WED_PreviewLayer.cpp	/^	preview_taxiway(WED_Taxiway * t, int l) : WED_PreviewItem(l), taxi(t) { }$/;"	f	struct:preview_taxiway
preview_taxiway	.\WEDMap\WED_PreviewLayer.cpp	/^struct	preview_taxiway : public WED_PreviewItem {$/;"	s	file:
preview_time	.\Utils\XCarBoneUtils.h	/^	double			preview_time;	\/\/ The time we are showing now, used to transform geometry.$/;"	m	struct:XCarBone
previous_	.\lib_json\include\json\value.h	/^      ValueInternalLink *previous_;$/;"	m	class:Json::ValueInternalLink
pri_start	.\OneOffs\gen_roads.cpp	/^void pri_start(int b, int ow, int n, const char * na) { road_start(b, ow, n,na,&secondary); }$/;"	f
primitive_type	.\DSF\tri_stripper_101\tri_stripper.h	/^	enum primitive_type {$/;"	g	class:triangle_stripper::tri_stripper
primitives	.\DSF\DSFLibWrite.cpp	/^		TriPrimitiveVector		primitives;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
primitives	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		TriPrimitiveVector		primitives;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
primitives	.\DSF\tri_stripper_101\tri_stripper.h	/^	struct primitives$/;"	s	class:triangle_stripper::tri_stripper
primitives_vector	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef std::vector<primitives> primitives_vector;$/;"	t	class:triangle_stripper::tri_stripper
print	.\OneOffs\shape2xon.cpp	/^	void print(void) const {$/;"	f	struct:pt_t
print	.\OneOffs\shape2xon.cpp	/^	void print(void) const {$/;"	f	struct:seg_t
printCellInfo	.\GUI\GUI_TextTable.h	/^	void printCellInfo($/;"	f	struct:GUI_CellContent
printConfig	.\lib_json\src\jsontestrunner\main.cpp	/^printConfig()$/;"	f	file:
printFailure	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::printFailure( bool printTestName ) const$/;"	f	class:JsonTest::TestResult
printMatrix	.\Utils\MatrixUtils.cpp	/^printMatrix(char *msg, GLdouble m[16])$/;"	f
printUsage	.\lib_json\src\jsontestrunner\main.cpp	/^printUsage( const char *argv[] )$/;"	f	file:
printUsage	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::printUsage( const char *appName )$/;"	f	class:JsonTest::Runner
printValueTree	.\lib_json\src\jsontestrunner\main.cpp	/^printValueTree( FILE *fout, Json::Value &value, const std::string &path = "." )$/;"	f	file:
print_apt_poly	.\XESCore\AptIO.cpp	/^static void	print_apt_poly(int (*fprintf)(void * fi, const char * fmt, ...), void * fi, const AptPolygon_t& poly)$/;"	f	file:
print_bitfields	.\XESCore\AptIO.cpp	/^void print_bitfields(int(*fprintf)(void *, const char *, ...), void * fi, int flags, const char * bits[])$/;"	f
print_ccb	.\XESTools\GISTool_DumpCmds.cpp	/^static void print_ccb(Halfedge_handle e)$/;"	f	file:
print_func	.\DSFTools\DSF2Text.h	/^	int (* print_func)(void *, const char *, ...);$/;"	m	struct:print_funcs_s
print_funcs_s	.\DSFTools\DSF2Text.h	/^struct print_funcs_s {$/;"	s
print_mesh_stats	.\MeshTool\MeshTool_Create.cpp	/^static void print_mesh_stats(void)$/;"	f	file:
print_one_tag	.\OneOffs\osm_tile.c	/^static void print_one_tag($/;"	f	file:
print_product_version	.\XPTools\version.h	/^print_product_version(const char* product, uint32_t ver, const char* extra_ver)$/;"	f
print_to_bucket_ok	.\OneOffs\osm_tile.c	/^gzFile * print_to_bucket_ok(int x, int y)$/;"	f
print_xml_encoded	.\OneOffs\osm_tile.c	/^static void print_xml_encoded(gzFile * fi, const char * str)$/;"	f	file:
printgl	.\GUI\GUI_Laftfont.cpp	/^void GUI_Laftfont::printgl(int x, int y, int z, const char *fmt, ...)$/;"	f	class:GUI_Laftfont
printgl	.\GUI\GUI_Laftfont.cpp	/^void GUI_Laftfont::printgl(int x, int y, int z, const wchar_t *fmt, ...)$/;"	f	class:GUI_Laftfont
printgl	.\GUI\GUI_Laftfont.cpp	/^void GUI_Laftfont::printgl(int x, int y, int z, std::string& text)$/;"	f	class:GUI_Laftfont
printgl	.\GUI\GUI_Laftfont.cpp	/^void GUI_Laftfont::printgl(int x, int y, int z, std::wstring& text)$/;"	f	class:GUI_Laftfont
priority_type	.\Utils\STLUtils.h	/^	typedef Priority								priority_type;$/;"	t	class:pqueue
procCmd_AddUrbanRoads	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_AddUrbanRoads,$/;"	e	enum:__anon81	file:
procCmd_AssignLUToMesh	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_AssignLUToMesh,$/;"	e	enum:__anon81	file:
procCmd_BuildRoads	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_BuildRoads,$/;"	e	enum:__anon81	file:
procCmd_CalcSlope	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_CalcSlope,$/;"	e	enum:__anon81	file:
procCmd_Count	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_Count$/;"	e	enum:__anon81	file:
procCmd_DeriveDEMs	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_DeriveDEMs,$/;"	e	enum:__anon81	file:
procCmd_Divider1	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_Divider1,$/;"	e	enum:__anon81	file:
procCmd_Divider2	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_Divider2,$/;"	e	enum:__anon81	file:
procCmd_DoAirports	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_DoAirports,$/;"	e	enum:__anon81	file:
procCmd_DoProcessing	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_DoProcessing,$/;"	e	enum:__anon81	file:
procCmd_DoZoning	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_DoZoning,$/;"	e	enum:__anon81	file:
procCmd_ExportDSFExisting	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_ExportDSFExisting,$/;"	e	enum:__anon81	file:
procCmd_ExportDSFNew	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_ExportDSFNew,$/;"	e	enum:__anon81	file:
procCmd_HiResTri	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_HiResTri,$/;"	e	enum:__anon81	file:
procCmd_HydroCorrect	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_HydroCorrect,$/;"	e	enum:__anon81	file:
procCmd_HydroSimplfiy	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_HydroSimplfiy,$/;"	e	enum:__anon81	file:
procCmd_InstantiateFor	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_InstantiateFor,$/;"	e	enum:__anon81	file:
procCmd_InstantiateGT	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_InstantiateGT,$/;"	e	enum:__anon81	file:
procCmd_RemoveDupes	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_RemoveDupes,$/;"	e	enum:__anon81	file:
procCmd_UpsampleEnviro	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^	procCmd_UpsampleEnviro,$/;"	e	enum:__anon81	file:
process_block	.\XESCore\BlockFill.cpp	/^bool process_block(Pmwx::Face_handle f, CDT& mesh, const DEMGeo& ag_ok_approx_dem, const DEMGeo& forest_dem,ForestIndex&	forest_index)$/;"	f
process_texture_path	.\WEDCore\WED_ResourceMgr.cpp	/^static void process_texture_path(const string& path_of_obj, string& path_of_tex)$/;"	f	file:
product_version	.\XPTools\version.h	/^product_version(uint32_t ver, const char* extra_ver)$/;"	f
program_abspath	.\linuxinit\initializer.cpp	/^const char* const Initializer::program_abspath()$/;"	f	class:Initializer
program_dir	.\linuxinit\initializer.cpp	/^const char* const Initializer::program_dir()$/;"	f	class:Initializer
program_file	.\linuxinit\initializer.cpp	/^const char* const Initializer::program_file()$/;"	f	class:Initializer
progress_cb	.\Network\curl_http.cpp	/^int			curl_http_get_file::progress_cb(void* ptr, double TotalToDownload, double NowDownloaded, double TotalToUpload, double NowUploaded)$/;"	f	class:curl_http_get_file
proj_Down	.\XESCore\DEMTables.h	/^	proj_Down,$/;"	e	enum:proj_dir_t
proj_EastWest	.\XESCore\DEMTables.h	/^	proj_EastWest$/;"	e	enum:proj_dir_t
proj_NorthSouth	.\XESCore\DEMTables.h	/^	proj_NorthSouth,$/;"	e	enum:proj_dir_t
proj_angle	.\XESCore\DEMTables.h	/^	proj_dir_t		proj_angle;			\/\/ Projection angle.  For legacy terrain this influences the xon distances.  For next-gen, always use "down"...the way the xon is scaled$/;"	m	struct:NaturalTerrainInfo_t
proj_dir_t	.\XESCore\DEMTables.h	/^enum proj_dir_t {$/;"	g
proj_height	.\AC3DPlugins\uv_mapper.cpp	/^	float							proj_height;	\/\/ Projected height for ordering.  Signed!$/;"	m	struct:uv_vertex_info_t	file:
proj_s	.\WEDCore\WED_ResourceMgr.h	/^	float		proj_s;$/;"	m	struct:pol_info_t
proj_t	.\WEDCore\WED_ResourceMgr.h	/^	float		proj_t;$/;"	m	struct:pol_info_t
projection	.\Utils\CompGeomDefs2.h	/^inline Point2	Segment2::projection(const Point2& pt) const$/;"	f	class:Segment2
projection	.\Utils\CompGeomDefs2.h	/^inline Vector2	Vector2::projection(const Vector2& rhs) const$/;"	f	class:Vector2
projection	.\Utils\CompGeomDefs3.h	/^inline Point3	Line3::projection(const Point3& pt) const$/;"	f	class:Line3
projection	.\Utils\CompGeomDefs3.h	/^inline Point3	Plane3::projection(const Point3& p) const$/;"	f	class:Plane3
projection	.\Utils\CompGeomDefs3.h	/^inline Point3	Segment3::projection(const Point3& pt) const$/;"	f	class:Segment3
projection	.\Utils\CompGeomDefs3.h	/^inline Vector3 Vector3::projection(const Vector3& rhs) const$/;"	f	class:Vector3
projector_Cylinder	.\ObjEdit\OE_ProjectionMgr.h	/^	projector_Cylinder = 1,$/;"	e	enum:__anon54
projector_Plane	.\ObjEdit\OE_ProjectionMgr.h	/^	projector_Plane = 0,$/;"	e	enum:__anon54
projector_Sphere	.\ObjEdit\OE_ProjectionMgr.h	/^	projector_Sphere = 2$/;"	e	enum:__anon54
promote_both	.\XESCore\NetTables.h	/^	int			promote_both;$/;"	m	struct:ZoningPromote
promote_left	.\XESCore\NetTables.h	/^	int			promote_left;$/;"	m	struct:ZoningPromote
promote_right	.\XESCore\NetTables.h	/^	int			promote_right;$/;"	m	struct:ZoningPromote
propPane_Filtered	.\WEDProperties\WED_PropertyPane.h	/^	propPane_Filtered,$/;"	e	enum:__anon124
propPane_FilteredVertical	.\WEDProperties\WED_PropertyPane.h	/^	propPane_FilteredVertical,$/;"	e	enum:__anon124
propPane_Hierarchy	.\WEDProperties\WED_PropertyPane.h	/^	propPane_Hierarchy,$/;"	e	enum:__anon124
propPane_Selection	.\WEDProperties\WED_PropertyPane.h	/^	propPane_Selection$/;"	e	enum:__anon124
prop_Bool	.\Interfaces\IPropertyObject.h	/^	prop_Bool,			\/\/ Returns as int$/;"	e	enum:__anon31
prop_Double	.\Interfaces\IPropertyObject.h	/^	prop_Double,$/;"	e	enum:__anon31
prop_Enum	.\Interfaces\IPropertyObject.h	/^	prop_Enum,			\/\/ Returns as int$/;"	e	enum:__anon31
prop_EnumSet	.\Interfaces\IPropertyObject.h	/^	prop_EnumSet$/;"	e	enum:__anon31
prop_FilePath	.\Interfaces\IPropertyObject.h	/^	prop_FilePath,$/;"	e	enum:__anon31
prop_Int	.\Interfaces\IPropertyObject.h	/^	prop_Int,$/;"	e	enum:__anon31
prop_String	.\Interfaces\IPropertyObject.h	/^	prop_String,$/;"	e	enum:__anon31
prop_kind	.\Interfaces\IPropertyObject.h	/^	int				prop_kind;$/;"	m	struct:PropertyInfo_t
prop_kind	.\Interfaces\IPropertyObject.h	/^	int			prop_kind;$/;"	m	struct:PropertyVal_t
prop_name	.\Interfaces\IPropertyObject.h	/^	string			prop_name;$/;"	m	struct:PropertyInfo_t
prop_pair	.\XESCore\MapTopology.h	/^	typedef pair<typename Arr::Face_handle, Properties>				prop_pair;$/;"	t	class:MapBFSVisitor
properties	.\DSF\DSFLibWrite.cpp	/^	vector<string>		properties;$/;"	m	class:DSFFileWriterImp	file:
properties	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	vector<string>		properties;$/;"	m	class:DSFFileWriterImp	file:
property_value	.\XESCore\ObjTables.h	/^	float		property_value;$/;"	m	struct:FeatureInfo
prp_len	.\Obj\XObjWriteEmbedded.cpp	/^	int		prp_len;$/;"	m	struct:master_header_t	file:
prp_off	.\Obj\XObjWriteEmbedded.cpp	/^	int		prp_off;$/;"	m	struct:master_header_t	file:
psi	.\OneOffs\gen_roads10.h	/^	float	psi[2];$/;"	m	struct:obj_placement
pt	.\Utils\CompGeomDefs2.h	/^	Point2		pt;$/;"	m	struct:BezierPoint2
pt	.\XESCore\AptDefs.h	/^	Point2		pt;$/;"	m	struct:AptLinearSegment_t
pt	.\XESCore\BlockFill.cpp	/^	__InputIterator	pt;$/;"	m	struct:ring_node	file:
pt_in_tri_3d	.\AC3DPlugins\uv_mapper.cpp	/^static int pt_in_tri_3d(const a_tri& tri, const cgd::Point3& p)$/;"	f	file:
pt_t	.\OneOffs\shape2xon.cpp	/^struct pt_t {$/;"	s	file:
ptr	.\GUI\GUI_Clipboard.cpp	/^	void *	ptr;$/;"	m	struct:StGlobalLock	file:
ptr	.\XESCore\DSFBuilder.cpp	/^	void * ptr;$/;"	m	struct:road_coords_checker	file:
pts	.\Utils\XUtils.cpp	/^	vector<p_info>			pts;$/;"	m	struct:XPointPool::XPointPoolImp	file:
pts	.\WEDImportExport\WED_DSFImport.cpp	/^	vector<BezierPoint2>pts,uvs;$/;"	m	class:DSF_Importer	file:
pts	.\XESCore\AptDefs.h	/^		Polygon2		pts;$/;"	m	struct:AptInfo_t::AptLineLoop_t
pub	.\Utils\BitmapUtils.cpp	/^	struct jpeg_error_mgr	pub;$/;"	m	struct:__anon88	typeref:struct:__anon88::jpeg_error_mgr	file:
pub	.\Utils\BitmapUtils.cpp	/^	struct jpeg_source_mgr pub;		\/\/ Fields inherited from all jpeg source mgs.$/;"	m	struct:__anon87	typeref:struct:__anon87::jpeg_source_mgr	file:
publish_road	.\OneOffs\gen_roads10.h	/^void publish_road(int id, const string& name, int show_level, float r, float g, float b, const road& guts)$/;"	f
published_road	.\OneOffs\gen_roads10.h	/^	published_road(int i, const road& g) : id(i), guts(g) { all.push_back(this); width = guts.max_x(); if(guts.markers.size() != 1) fprintf(stderr,"ERROR: road %d has no center marker.\\n", id); }$/;"	f	class:published_road
published_road	.\OneOffs\gen_roads10.h	/^class	published_road {$/;"	c
pull_int_attr	.\AC3DPlugins\ac_utils.cpp	/^int pull_int_attr(ACObject * ob, const char * attr, int * value)$/;"	f
pull_int_attr_recursive	.\AC3DPlugins\ac_utils.cpp	/^int 	pull_int_attr_recursive(ACObject * obj, const char * attr, int defv, ACObject * root)$/;"	f
pull_str_attr	.\AC3DPlugins\ac_utils.cpp	/^char * pull_str_attr(ACObject * ob, const char * attr)$/;"	f
purge_datarefs	.\AC3DPlugins\obj_anim.cpp	/^void	purge_datarefs(void)$/;"	f
push	.\DSF\tri_stripper_101\cache_simulator.h	/^inline void cache_simulator::push(const index i, const bool CountCacheHit) {$/;"	f	class:triangle_stripper::cache_simulator
push	.\DSF\tri_stripper_101\heap_array.h	/^inline size_t heap_array<T, CmpT>::push(const T & Elem) {$/;"	f	class:common_structures::heap_array
push	.\XESCore\DEMDefs.h	/^	void push(address n) { DebugAssert(size_ < data_.size()); data_[inp_] = n; inp_ = (inp_+1) % data_.size(); ++size_; }$/;"	f	struct:address_fifo
pushValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::pushValue( const std::string &value )$/;"	f	class:Json::StyledStreamWriter
pushValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::pushValue( const std::string &value )$/;"	f	class:Json::StyledWriter
push_back	.\DSF\DSFPointPool.h	/^inline void DSFTuple::push_back(double v)$/;"	f	class:DSFTuple
push_back	.\DSF\dsflib_013005\DSFPointPool.cpp	/^void DSFTuple::push_back(double v)$/;"	f	class:DSFTuple
push_block_curve	.\XESCore\BlockFill.cpp	/^inline void push_block_curve(vector<Block_2::X_monotone_curve_2>& curves, const Point2& p1, const Point2& p2, int idx1)$/;"	f
push_block_curve	.\XESCore\BlockFill.cpp	/^inline void push_block_curve(vector<Block_2::X_monotone_curve_2>& curves, const Point2& p1, const Point2& p2, int idx1, int idx2)$/;"	f
push_curve	.\XESCore\BlockFill.cpp	/^static void push_curve(vector<Block_2::X_monotone_curve_2>& curves, const BPoint_2& p1, const BPoint_2& p2, int cat1, int cat2, int urban_idx, int oob_idx)$/;"	f	file:
push_horizontal	.\XESCore\MapRaster.cpp	/^inline void push_horizontal(double y, double x1, double x2, vector<X_monotone_curve_2>& c, int key, CoordTranslator2 * translator, int splits)$/;"	f
push_one_forest	.\XESCore\BlockFill.cpp	/^void push_one_forest(vector<Polygon2>& bounds, const DEMGeo& dem, Pmwx::Face_handle dest_face)$/;"	f
push_stack	.\AC3DPlugins\obj_anim.cpp	/^list<int>	push_stack;$/;"	v
push_vertical	.\XESCore\MapRaster.cpp	/^inline void push_vertical(double x, double y1, double y2, vector<X_monotone_curve_2>& c, int key, CoordTranslator2 * translator, int splits)$/;"	f
pvr_2	.\XPTools\DDSTool.cpp	/^	pvr_2 = 2,$/;"	e	enum:__anon139	file:
pvr_4	.\XPTools\DDSTool.cpp	/^	pvr_4 = 3$/;"	e	enum:__anon139	file:
pylons_end	.\OneOffs\gen_roads.cpp	/^void 	pylons_end()	{	road_stack.pop_back(); }$/;"	f
pylons_start	.\OneOffs\gen_roads.cpp	/^void	pylons_start(const char * iobj, float israt, float isoff, float ispacing, float istart_space, int on_ground)$/;"	f
pythag	.\Utils\MathUtils.h	/^inline float	pythag		(const float p,const float q												){													return sqrtf(p*p+q*q	 );}$/;"	f
pythag	.\Utils\MathUtils.h	/^inline float	pythag		(const float p,const float q,const float r									){													return sqrtf(p*p+q*q+r*r);}$/;"	f
pythag_sqr	.\Utils\MathUtils.h	/^inline float	pythag_sqr	(const float p,const float q,const float r									){													return (p*p+q*q+r*r);}$/;"	f
pythag_sqr	.\Utils\MathUtils.h	/^inline float	pythag_sqr  (const float p,const float q												){													return (p*p+q*q);}$/;"	f
qapp	.\GUI\GUI_Application.h	/^	QApplication*       qapp;$/;"	m	class:GUI_Application
qmid_recurse	.\MeshTool\MeshTool_Create.cpp	/^static void qmid_recurse(int q, double io_lon[4], double io_lat[4])$/;"	f	file:
quadratic_formula	.\Utils\CompGeomDefs2.h	/^inline int quadratic_formula(double a, double b, double c, double roots[2])$/;"	f
quads	.\ObjEdit\oenotes.c	/^	"Reset" texture should wrap a texture around the quads, not project in 3-d space.$/;"	v
query	.\Utils\RTree2.h	/^void	RTree2<T,N>::query(const Bbox2& where, O out)$/;"	f	class:RTree2
query_hpc	.\Utils\PerfUtils.h	/^inline unsigned long long query_hpc()$/;"	f
query_recursive	.\Utils\RTree2.h	/^void	RTree2<T,N>::query_recursive(node * node, const Bbox2& where, O out)$/;"	f	class:RTree2
query_value	.\Utils\RTree2.h	/^void	RTree2<T,N>::query_value(const Bbox2& where, O out)$/;"	f	class:RTree2
query_value_recursive	.\Utils\RTree2.h	/^void	RTree2<T,N>::query_value_recursive(node * node, const Bbox2& where, O out)$/;"	f	class:RTree2
queue	.\XESCore\MeshSimplify.h	/^	VertexQueue		queue;$/;"	m	class:MeshSimplify
queue	.\XESCore\TriFan.h	/^	TriFanQueue					queue;				\/\/ Our tri fans in priority order$/;"	m	class:TriFanBuilder
queue	.\XESCore\Zoning.cpp	/^	EdgeQ			queue;$/;"	m	struct:FaceGraph_t	file:
queue_incident_edges_if_needed	.\XESCore\MapHelpers.h	/^void arrangement_simplifier<Arr,Traits>::queue_incident_edges_if_needed(typename Arr::Halfedge_iterator he1, typename Arr::Halfedge_iterator he2, Error_map& err_checks)$/;"	f	class:arrangement_simplifier
quilt_images	.\Utils\QuiltUtils.cpp	/^void	quilt_images($/;"	f
quote_dref	.\AC3DPlugins\obj_anim.cpp	/^static void quote_dref(string& s)$/;"	f	file:
r	.\WEDCore\WED_ResourceMgr.h	/^		double  x,y,r;			\/\/ annotation position$/;"	m	struct:agp_t::obj
r	.\XPTools\ViewObj.cpp	/^		double	r;$/;"	m	struct:XObjWin::ObjPlacement_t	file:
r1	.\AC3DPlugins\obj_update.cpp	/^	float r1, r2;$/;"	m	struct:update_anim_op	file:
r1_	.\Utils\RLERegion.cpp	/^	int r1_;$/;"	m	class:RLERegionDualScanner	file:
r2	.\AC3DPlugins\obj_update.cpp	/^	float r1, r2;$/;"	m	struct:update_anim_op	file:
r2_	.\Utils\RLERegion.cpp	/^	int r2_;$/;"	m	class:RLERegionDualScanner	file:
r_	.\Utils\RLERegion.h	/^	int					r_;$/;"	m	class:RLERegionScanner
radial_dist	.\XESCore\DEMDefs.h	/^inline int	DEMGeo::radial_dist(int x, int y, int max, float key) const$/;"	f	class:DEMGeo
radial_weight	.\XESCore\TensorRoads.h	/^	float		radial_weight;$/;"	m	struct:RoadPrefs_t
radio	.\XPTools\XGrinderShell.cpp	/^	int						radio;				\/\/ enforce mutually exclusive behavoir$/;"	m	struct:flag_item_info	file:
radius_squared	.\Utils\CompGeomDefs3.h	/^	double	radius_squared;$/;"	m	struct:Sphere3
railroad	.\OneOffs\gen_roads.cpp	/^tex_info	railroad = { "railroad.dds" , "\/\/"				 , 0, 1, 30, 8.5, 512  ,{0.1,0.1,0.1}};$/;"	v
rain_disturb	.\XESCore\DEMAlgs.h	/^	float	rain_disturb;$/;"	m	struct:DEMPrefs_t
rain_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	rain_min;	float	rain_max;$/;"	m	struct:RF_WizardParams	file:
rain_max	.\XESCore\DEMTables.h	/^	float			rain_max;$/;"	m	struct:NaturalTerrainRule_t
rain_max	.\XESCore\ForestTables.h	/^	float		rain_min, rain_max;$/;"	m	struct:ForestRule_t
rain_max	.\XESCore\NetTables.h	/^	float		rain_max;$/;"	m	struct:Feature2RepInfo
rain_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	rain_min;	float	rain_max;$/;"	m	struct:RF_WizardParams	file:
rain_min	.\XESCore\DEMTables.h	/^	float			rain_min;$/;"	m	struct:NaturalTerrainRule_t
rain_min	.\XESCore\ForestTables.h	/^	float		rain_min, rain_max;$/;"	m	struct:ForestRule_t
rain_min	.\XESCore\NetTables.h	/^	float		rain_min;$/;"	m	struct:Feature2RepInfo
ramp_type	.\WEDEntities\WED_RampPosition.h	/^	WED_PropIntEnum			ramp_type;$/;"	m	class:WED_RampPosition
ramp_type	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			ramp_type;$/;"	m	class:WED_CreatePointTool
ramp_type_strings	.\XESCore\AptIO.cpp	/^const char * ramp_type_strings[] = { "misc","gate","tie_down","hangar", 0 };$/;"	v
random	.\Utils\QuiltUtils.cpp	29;"	d	file:
random_percent	.\OneOffs\make_fill_rules.c	/^float random_percent(void)$/;"	f
range	.\OneOffs\gen_roads10.h	/^	typedef pair<iterator,iterator>	range;$/;"	t	class:road_map
range_ref	.\OneOffs\gen_roads10.h	/^		range_ref(base * b, int k) : self(b), key(k) { }$/;"	f	struct:road_map::range_ref
range_ref	.\OneOffs\gen_roads10.h	/^		range_ref(const range_ref& rhs) : self(rhs.self), key(rhs.key) { }$/;"	f	struct:road_map::range_ref
range_ref	.\OneOffs\gen_roads10.h	/^	struct	range_ref {$/;"	s	class:road_map
rasterDefs	.\DSF\DSFLibWrite.cpp	/^	vector<string>		rasterDefs;$/;"	m	class:DSFFileWriterImp	file:
raster_data	.\DSF\DSFLibWrite.cpp	/^	vector<void *>				raster_data;$/;"	m	class:DSFFileWriterImp	file:
raster_headers	.\DSF\DSFLibWrite.cpp	/^	vector<DSFRasterHeader_t>	raster_headers;$/;"	m	class:DSFFileWriterImp	file:
rasterizer	.\Utils\PolyRasterUtils.h	/^		PolyRasterizer<Number> *	rasterizer;$/;"	m	struct:BoxRasterizer
rawJSONBuf	.\WEDImportExport\WED_GatewayImport.cpp	/^	vector<char> rawJSONBuf;$/;"	m	class:RAII_CURL_HNDL	file:
raw_16	.\XPTools\DDSTool.cpp	/^	raw_16 = 0,$/;"	e	enum:__anon139	file:
raw_24	.\XPTools\DDSTool.cpp	/^	raw_24 = 1,$/;"	e	enum:__anon139	file:
ray_intersect	.\XESCore\BezierApprox.cpp	/^inline bool ray_intersect(const Point2& p1, const Vector2& v1, const Point2& p2, const Vector2& v2, double& t1, double& t2)$/;"	f
rbegin	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::const_node_reverse_iterator graph_array<nodetype, arctype>::rbegin() const {$/;"	f	class:common_structures::graph_array
rbegin	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::node_reverse_iterator graph_array<nodetype, arctype>::rbegin() {$/;"	f	class:common_structures::graph_array
readArray	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readArray( Token &\/*tokenStart*\/ )$/;"	f	class:Json::Reader
readCStyleComment	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readCStyleComment()$/;"	f	class:Json::Reader
readComment	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readComment()$/;"	f	class:Json::Reader
readCppStyleComment	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readCppStyleComment()$/;"	f	class:Json::Reader
readInputTestFile	.\lib_json\src\jsontestrunner\main.cpp	/^readInputTestFile( const char *path )$/;"	f	file:
readNumber	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readNumber()$/;"	f	class:Json::Reader
readObject	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readObject( Token &\/*tokenStart*\/ )$/;"	f	class:Json::Reader
readString	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readString()$/;"	f	class:Json::Reader
readToken	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readToken( Token &token )$/;"	f	class:Json::Reader
readValue	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::readValue()$/;"	f	class:Json::Reader
read_arrangement_begin	.\XESCore\MapIO.cpp	/^	void read_arrangement_begin () { } $/;"	f	class:PmwxFmt
read_arrangement_end	.\XESCore\MapIO.cpp	/^	void read_arrangement_end() { } $/;"	f	class:PmwxFmt
read_buffer	.\Utils\unzip.c	/^	char  *read_buffer;         \/* internal buffer for compressed data *\/$/;"	m	struct:__anon101	file:
read_cb	.\Network\curl_http.cpp	/^size_t		curl_http_get_file::read_cb(void *contents, size_t size, size_t nmemb, void *userp)$/;"	f	class:curl_http_get_file
read_ccb_halfedges_begin	.\XESCore\MapIO.cpp	/^	void read_ccb_halfedges_begin() { }$/;"	f	class:PmwxFmt
read_ccb_halfedges_end	.\XESCore\MapIO.cpp	/^	void read_ccb_halfedges_end() { } $/;"	f	class:PmwxFmt
read_edge_begin	.\XESCore\MapIO.cpp	/^	void read_edge_begin () { }$/;"	f	class:PmwxFmt
read_edge_end	.\XESCore\MapIO.cpp	/^	void read_edge_end () { }$/;"	f	class:PmwxFmt
read_edges_begin	.\XESCore\MapIO.cpp	/^	void read_edges_begin() { }$/;"	f	class:PmwxFmt
read_edges_end	.\XESCore\MapIO.cpp	/^	void read_edges_end() { }$/;"	f	class:PmwxFmt
read_face_begin	.\XESCore\MapIO.cpp	/^	void read_face_begin () { }$/;"	f	class:PmwxFmt
read_face_data	.\XESCore\MapIO.cpp	/^	virtual void read_face_data (Face_handle f)$/;"	f	class:PmwxFmt
read_face_end	.\XESCore\MapIO.cpp	/^	void read_face_end () { }$/;"	f	class:PmwxFmt
read_faces_begin	.\XESCore\MapIO.cpp	/^	void read_faces_begin() { }$/;"	f	class:PmwxFmt
read_faces_end	.\XESCore\MapIO.cpp	/^	void read_faces_end() { }$/;"	f	class:PmwxFmt
read_halfedge_data	.\XESCore\MapIO.cpp	/^	virtual void read_halfedge_data (Halfedge_handle e)$/;"	f	class:PmwxFmt
read_halfedge_index	.\XESCore\MapIO.cpp	/^	int read_halfedge_index ()$/;"	f	class:PmwxFmt
read_inner_ccbs_begin	.\XESCore\MapIO.cpp	/^	void read_inner_ccbs_begin () { }$/;"	f	class:PmwxFmt
read_inner_ccbs_end	.\XESCore\MapIO.cpp	/^	void read_inner_ccbs_end () { }$/;"	f	class:PmwxFmt
read_isolated_vertices_begin	.\XESCore\MapIO.cpp	/^	void read_isolated_vertices_begin () { }$/;"	f	class:PmwxFmt
read_isolated_vertices_end	.\XESCore\MapIO.cpp	/^	void read_isolated_vertices_end () { } $/;"	f	class:PmwxFmt
read_next	.\Utils\XUtils.cpp	/^void	StTextFileScanner::read_next(void)$/;"	f	class:StTextFileScanner
read_outer_ccbs_begin	.\XESCore\MapIO.cpp	/^	void read_outer_ccbs_begin () { }$/;"	f	class:PmwxFmt
read_outer_ccbs_end	.\XESCore\MapIO.cpp	/^	void read_outer_ccbs_end () { }$/;"	f	class:PmwxFmt
read_point	.\XESCore\MapIO.cpp	/^	virtual void read_point (Point_2& p) $/;"	f	class:PmwxFmt
read_size	.\XESCore\MapIO.cpp	/^	Size read_size (const char* \/* title *\/ = NULL)$/;"	f	class:PmwxFmt
read_vertex_begin	.\XESCore\MapIO.cpp	/^	void read_vertex_begin () { }$/;"	f	class:PmwxFmt
read_vertex_data	.\XESCore\MapIO.cpp	/^	virtual void read_vertex_data (Vertex_handle v)$/;"	f	class:PmwxFmt
read_vertex_end	.\XESCore\MapIO.cpp	/^	void read_vertex_end () { }$/;"	f	class:PmwxFmt
read_vertex_index	.\XESCore\MapIO.cpp	/^	int read_vertex_index () $/;"	f	class:PmwxFmt
read_vertices_begin	.\XESCore\MapIO.cpp	/^	void read_vertices_begin() { }$/;"	f	class:PmwxFmt
read_vertices_end	.\XESCore\MapIO.cpp	/^	void read_vertices_end() { }$/;"	f	class:PmwxFmt
read_x_monotone_curve	.\XESCore\MapIO.cpp	/^	virtual void read_x_monotone_curve (X_monotone_curve_2& cv) $/;"	f	class:PmwxFmt
reader	.\SDTS\SDTSRead.cpp	/^	sio_8211Reader					reader;$/;"	m	struct:SDTSModuleIterator::SDTSModuleIteratorImp	file:
reader	.\XESCore\MapIO.cpp	/^	IOReader *					reader;$/;"	m	class:PmwxFmt	file:
realValue	.\lib_json\include\json\value.h	/^      realValue,     \/\/\/< double value$/;"	e	enum:Json::ValueType
real_	.\lib_json\include\json\value.h	/^         double real_;$/;"	m	union:Json::Value::ValueHolder
real_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value real_;$/;"	m	struct:ValueTest	file:
real_faces	.\XESCore\Zoning.cpp	/^	list<Face_handle>		real_faces;$/;"	m	struct:FaceNode_t	file:
real_height	.\GUI\GUI_Resources.h	/^	int		real_height;$/;"	m	struct:GUI_TexPosition_t
real_path	.\WEDCore\WED_LibraryMgr.h	/^		string		real_path;$/;"	m	struct:WED_LibraryMgr::res_info_t
real_types	.\OneOffs\gen_roads10.h	/^	vector<pair<float, int> > real_types;$/;"	m	class:virtual_table
real_width	.\GUI\GUI_Resources.h	/^	int		real_width;$/;"	m	struct:GUI_TexPosition_t
really_ok_point	.\XESCore\GreedyMesh.cpp	/^bool really_ok_point(const DEMGeo * dem, int x, int y, const CDT::Point& v1, const CDT::Point& v2, const CDT::Point& v3)$/;"	f
rebuildStep	.\ObjEdit\OE_DataModel.cpp	/^	int				rebuildStep;$/;"	m	struct:UndoState_t	file:
rebuild_links	.\Utils\STLUtils.h	/^	void rebuild_links()$/;"	f	class:pqueue
recip	.\RawImport\AptElev.h	/^	int		recip;$/;"	m	struct:RwyInfo
recip	.\WEDImportExport\WED_AptIE.cpp	/^inline Point2	recip(const Point2& pt, const Point2& ctrl) { return pt + Vector2(ctrl,pt); }$/;"	f
recip_4294967295	.\DSF\DSFLib.cpp	/^const double recip_4294967295 = 1.0 \/ 4294967295.0;$/;"	v
recip_65535	.\DSF\DSFLib.cpp	/^const double recip_65535 = 1.0 \/ 65535.0;$/;"	v
recip_name	.\XESCore\AptIO.cpp	/^static string recip_name(const string& ident)$/;"	f	file:
recip_num	.\XESCore\AptIO.cpp	/^inline int recip_num(int n)$/;"	f
recompose_polygon	.\WEDCore\WED_Clipping.cpp	/^bool recompose_polygon(const vector<Segment2>& in_poly, Polygon2& out_poly)$/;"	f
recompose_polygon_with_holes	.\WEDCore\WED_Clipping.cpp	/^bool recompose_polygon_with_holes(const vector<vector<Segment2> > & in_poly, vector<Polygon2>& out_poly)$/;"	f
reconstruct_ccbs	.\WEDCore\WED_Clipping.cpp	/^bool reconstruct_ccbs(const GP& outer_boundary, vector<GP>& outer_ccbs)$/;"	f
recoverFromError	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::recoverFromError( TokenType skipUntilToken )$/;"	f	class:Json::Reader
recull_node	.\Utils\QuadTree.h	/^void QuadTree<__T, __N>::recull_node(Node * n)$/;"	f	class:QuadTree
ref	.\AC3DPlugins\tcl_utils.h	/^	void *							ref;$/;"	m	class:TCL_linked_vardv
ref	.\AC3DPlugins\tcl_utils.h	/^	void *							ref;$/;"	m	class:TCL_linked_variv
ref	.\AC3DPlugins\tcl_utils.h	/^	void *							ref;$/;"	m	class:TCL_linked_varsv
ref	.\AC3DPlugins\tcl_utils.h	/^	void *			ref;$/;"	m	class:TCL_linked_vard
ref	.\AC3DPlugins\tcl_utils.h	/^	void *			ref;$/;"	m	class:TCL_linked_vari
ref	.\AC3DPlugins\tcl_utils.h	/^	void *			ref;$/;"	m	class:TCL_linked_vars
ref	.\DSFTools\DSF2Text.h	/^	void * ref;$/;"	m	struct:print_funcs_s
ref	.\OGLE\ogle.cpp	/^	void *					ref;$/;"	m	struct:OGLE_Rec	file:
ref	.\Utils\XCarBoneUtils.h	/^	void *			ref;			\/\/ Reference to external data, useful when working in AC3D (holds an ACObject)$/;"	m	struct:XCarBone
refCount	.\AC3DPlugins\TclStubs.h	/^    int refCount;		\/* When 0 the object will be freed. *\/$/;"	m	struct:Tcl_Obj
ref_column	.\VPF\VPFImport.h	/^	const char *		ref_column;		\/\/ Name of column in line  table that refers to attr table$/;"	m	struct:VPF_LineRule_t
ref_column	.\VPF\VPFImport.h	/^	const char *		ref_column;$/;"	m	struct:VPF_FaceRule_t
ref_count	.\Obj\XObjWriteEmbedded.cpp	/^	volatile int	ref_count;$/;"	m	struct:embed_props_t	file:
reference	.\Obj\XDefs.h	/^				typedef typename base_type::reference		reference;$/;"	t	class:std::__dev_vector
reference	.\Utils\UTL_interval.h	/^	typedef const value_type&					reference;$/;"	t	class:UTL_interval::const_iterator
reference	.\lib_json\include\json\value.h	/^      typedef Value &reference;$/;"	t	class:Json::ValueIterator
reference	.\lib_json\include\json\value.h	/^      typedef const Value &reference;$/;"	t	class:Json::ValueConstIterator
refilter_listbox_cmnd	.\AC3DPlugins\XPlaneSupport.tcl	/^proc refilter_listbox_cmnd { lb tv } {$/;"	p
refilter_listbox_dref	.\AC3DPlugins\XPlaneSupport.tcl	/^proc refilter_listbox_dref { lb tv } {$/;"	p
reflex	.\XESCore\BlockDefs.h	/^	bool			reflex;$/;"	m	struct:block_pt
reflex_event	.\Utils\Skeleton.cpp	/^	bool				reflex_event;$/;"	m	struct:SK_Event	file:
reg_TERM	.\XESCore\BlockFill.cpp	/^		reg_TERM = 0,$/;"	e	enum:__anon129	file:
reg_agb	.\XESCore\BlockFill.cpp	/^		reg_agb,$/;"	e	enum:__anon129	file:
reg_debug_str	.\XESCore\BlockFill.cpp	/^		const char * reg_debug_str[] = { "term", "none", "junk", "slop", "fac", "agb" };$/;"	v
reg_fac	.\XESCore\BlockFill.cpp	/^		reg_fac,$/;"	e	enum:__anon129	file:
reg_info_t	.\XESCore\BlockFill.cpp	/^	struct reg_info_t {$/;"	s	file:
reg_junk	.\XESCore\BlockFill.cpp	/^		reg_junk,		\/\/ parking lots and other random junk.$/;"	e	enum:__anon129	file:
reg_none	.\XESCore\BlockFill.cpp	/^		reg_none,$/;"	e	enum:__anon129	file:
reg_slop	.\XESCore\BlockFill.cpp	/^		reg_slop,		\/\/ When the 'front' side is actually to the side, we just glom it on to our friend...as a side wall there aren't a lot of rules about its metrics.$/;"	e	enum:__anon129	file:
region_	.\Utils\RLERegion.h	/^	const RLERegion&	region_;$/;"	m	class:RLERegionScanner
region_for	.\Utils\UTL_interval.h	/^int		UTL_interval<T>::region_for(T t) const$/;"	f	class:UTL_interval
region_png	.\XESCore\DEMTables.h	/^	string			region_png;$/;"	m	struct:Regionalization_t
regionalization	.\XESCore\DEMTables.h	/^	int				regionalization;	\/\/ index into regionalization table for correct library output.$/;"	m	struct:NaturalTerrainInfo_t
regions	.\Obj\XObjDefs.h	/^	vector<XObjPanelRegion8>regions;$/;"	m	struct:XObj8
register_panel_vars	.\AC3DPlugins\obj_panel.cpp	/^void	register_panel_vars(void)$/;"	f
register_target	.\UI\XPopup.lin.cpp	/^void XPopup::register_target(Display* dspl, Window wnd)$/;"	f	class:XPopup
register_updater	.\AC3DPlugins\obj_update.cpp	/^void register_updater(void)$/;"	f
reil1	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum				reil1;$/;"	m	class:WED_Runway
reil2	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum				reil2;$/;"	m	class:WED_Runway
reil_code	.\XESCore\AptDefs.h	/^	int			reil_code[2];$/;"	m	struct:AptRunway_t
rel_count	.\OneOffs\osm2shape.c	/^	int			rel_count;$/;"	m	struct:rel_info_tag	file:
rel_count	.\OneOffs\osm2shape.c	/^static int rel_count = 0;$/;"	v	file:
rel_elev_max	.\XESCore\DEMTables.h	/^	float			rel_elev_max;$/;"	m	struct:NaturalTerrainRule_t
rel_elev_min	.\XESCore\DEMTables.h	/^	float			rel_elev_min;$/;"	m	struct:NaturalTerrainRule_t
rel_free	.\OneOffs\osm2shape.c	/^static int rel_free = 0;$/;"	v	file:
rel_ids	.\OneOffs\osm2shape.c	/^		int *					rel_ids;$/;"	m	union:rel_info_tag::__anon70	file:
rel_info_t	.\OneOffs\osm2shape.c	/^} rel_info_t;$/;"	t	typeref:struct:rel_info_tag	file:
rel_info_tag	.\OneOffs\osm2shape.c	/^typedef struct rel_info_tag {$/;"	s	file:
rel_ptrs	.\OneOffs\osm2shape.c	/^		struct rel_info_tag **	rel_ptrs;$/;"	m	union:rel_info_tag::__anon70	typeref:struct:rel_info_tag::__anon70::rel_info_tag	file:
rel_ref_free	.\OneOffs\osm2shape.c	/^static int rel_ref_free = 0;$/;"	v	file:
rel_roles	.\OneOffs\osm2shape.c	/^	char **				rel_roles;$/;"	m	struct:rel_info_tag	file:
rel_type	.\OneOffs\osm2shape.c	/^	char *		rel_type;$/;"	m	struct:rel_info_tag	file:
release	.\DSF\DSFLibWrite.cpp	/^	void release() { f_ = NULL; }$/;"	f	struct:StCloseAndKill
release	.\GUI\GUI_Clipboard.cpp	/^	void release(void) { handle = NULL; }$/;"	f	struct:StGlobalBlock
release	.\lib_json\src\lib_json\json_batchallocator.h	/^   void release( AllocatedType *object )$/;"	f	class:Json::BatchAllocator
releaseStringValue	.\lib_json\src\lib_json\json_value.cpp	/^releaseStringValue( char *value )$/;"	f	namespace:Json
rels	.\OneOffs\osm2shape.c	/^	} rels;$/;"	m	struct:rel_info_tag	typeref:union:rel_info_tag::__anon70	file:
rels_now	.\OneOffs\osm2shape.c	/^static int rels_now = 0;$/;"	v	file:
relv_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	relv_min;	float	relv_max;$/;"	m	struct:RF_WizardParams	file:
relv_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	relv_min;	float	relv_max;$/;"	m	struct:RF_WizardParams	file:
remaining_signs	.\WEDEntities\WED_Runway.h	/^	WED_PropBoolText		remaining_signs;$/;"	m	class:WED_Runway
remap	.\WEDCore\WED_PropertyHelper.cpp	/^inline int remap(const map<int,int>& m, int v)$/;"	f
remap_str	.\AC3DPlugins\obj_editor.cpp	/^const char * remap_str(const char * v, const char * old, const char * rep)$/;"	f
remoteIP	.\Network\PCSBSocket.h	/^		unsigned long	remoteIP;$/;"	m	struct:PCSBSocket::ConnectionData
remotePort	.\Network\PCSBSocket.h	/^		unsigned short	remotePort;$/;"	m	struct:PCSBSocket::ConnectionData
remove	.\RawImport\ShapeIO.cpp	/^	void remove(Pmwx::Vertex_handle v) const {$/;"	f	struct:shape_lock_traits
remove	.\Utils\QuadTree.h	/^void QuadTree<__T, __N>::remove(ValueType * v)$/;"	f	class:QuadTree
remove	.\Utils\point_index.h	/^void		spatial_index_2<Traits>::remove(const Point_2& p)$/;"	f	class:spatial_index_2
remove	.\XESCore\BlockAlgs.cpp	/^	void remove(Block_2::Vertex_handle v) const {} $/;"	f	struct:traits
remove	.\XESCore\Hydro2.cpp	/^	void remove(typename Arr::Vertex_handle v) const { }$/;"	f	struct:no_sharp_pt
remove	.\XESCore\MapHelpers.h	/^	void remove(typename Arr::Vertex_handle v) const { }$/;"	f	struct:default_lock_traits
remove	.\XESTools\GISTool_VectorCmds.cpp	/^	void remove(Pmwx::Vertex_handle v) const { $/;"	f	struct:debug_lock_traits
removeMember	.\lib_json\src\lib_json\json_value.cpp	/^Value::removeMember( const char* key )$/;"	f	class:Json::Value
removeMember	.\lib_json\src\lib_json\json_value.cpp	/^Value::removeMember( const std::string &key )$/;"	f	class:Json::Value
removeSuffix	.\lib_json\src\jsontestrunner\main.cpp	/^removeSuffix( const std::string &path, $/;"	f	file:
remove_all	.\Utils\QuadTree.h	/^void QuadTree<__T, __N>::remove_all(void)$/;"	f	class:QuadTree
remove_all_node	.\Utils\QuadTree.h	/^void QuadTree<__T, __N>::remove_all_node(Node * n)$/;"	f	class:QuadTree
remove_duplicate_objs	.\RenderFarmUI\RF_ProcessingCmds.h	/^	int		remove_duplicate_objs;$/;"	m	struct:ProcessingPrefs_t
remove_linear	.\XESCore\DEMDefs.cpp	/^int	DEMGeo::remove_linear(int iterations, float max_err)$/;"	f	class:DEMGeo
remove_node	.\Utils\QuadTree.h	/^bool QuadTree<__T, __N>::remove_node(Node * node, const KeyType& bounds, ValueType * v, const KeyType& k)$/;"	f	class:QuadTree
remove_outsets_ccb	.\XESCore\MapAlgs.cpp	/^int remove_outsets_ccb(Pmwx& io_map, Pmwx::Face_handle f, Pmwx::Ccb_halfedge_circulator circ, double max_len_sq, double max_area, spatial_index_2<Pmwx::Geometry_traits_2>& idx)$/;"	f
remove_pt	.\Utils\RLERegion.h	/^	void	remove_pt(int x, int y) { RLERegion tmp(x,y,x+1,y+1); (*this) -= tmp; }$/;"	f	class:RLERegion
remove_these	.\XESCore\Zoning.cpp	/^inline void remove_these(set<int>& stuff, const set<int>& nuke_these)$/;"	f
removed	.\DSF\tri_stripper_101\heap_array.h	/^inline bool heap_array<T, CmpT>::removed(size_t i) const {$/;"	f	class:common_structures::heap_array
rend	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::const_node_reverse_iterator graph_array<nodetype, arctype>::rend() const {$/;"	f	class:common_structures::graph_array
rend	.\DSF\tri_stripper_101\graph_array.h	/^inline typename graph_array<nodetype, arctype>::node_reverse_iterator graph_array<nodetype, arctype>::rend() {$/;"	f	class:common_structures::graph_array
rep_Fac	.\XESCore\ObjTables.h	/^	rep_Fac$/;"	e	enum:__anon136
rep_Obj	.\XESCore\ObjTables.h	/^	rep_Obj,$/;"	e	enum:__anon136
rep_switch_m	.\XESCore\MeshAlgs.h	/^	float	rep_switch_m;$/;"	m	struct:MeshPrefs_t
rep_type	.\XESCore\NetPlacement.h	/^	int								rep_type;					\/\/ A specific road type (a RF enum)$/;"	m	struct:Net_ChainInfo_t
rep_type	.\XESCore\NetTables.h	/^	int			rep_type;$/;"	m	struct:BridgeInfo
rep_type	.\XESCore\NetTables.h	/^	int			rep_type;$/;"	m	struct:Feature2RepInfo
repair_network	.\XESCore\NetAlgs.cpp	/^void repair_network(Pmwx& io_map)$/;"	f
reproj	.\RawImport\ShapeIO.cpp	/^static void reproj(Point2& io_pt)$/;"	f	file:
reproj	.\RawImport\ShapeIO.cpp	/^static void reproj(double io_pt[2])$/;"	f	file:
req_cat1	.\XESCore\Zoning.h	/^	int			req_cat1;$/;"	m	struct:ZoningRule_t
req_cat1_min	.\XESCore\Zoning.h	/^	float		req_cat1_min;$/;"	m	struct:ZoningRule_t
req_cat2	.\XESCore\Zoning.h	/^	int			req_cat2;$/;"	m	struct:ZoningRule_t
req_cat2_min	.\XESCore\Zoning.h	/^	float		req_cat2_min;$/;"	m	struct:ZoningRule_t
req_level_agp	.\WEDImportExport\WED_DSFImport.cpp	/^	int					req_level_agp[7];$/;"	m	class:DSF_Importer	file:
req_level_fac	.\WEDImportExport\WED_DSFImport.cpp	/^	int					req_level_fac[7];$/;"	m	class:DSF_Importer	file:
req_level_obj	.\WEDImportExport\WED_DSFImport.cpp	/^	int					req_level_obj[7];$/;"	m	class:DSF_Importer	file:
req_road	.\XESCore\Zoning.h	/^	int			req_road;								\/\/ Roads with direct access (primary\/secondary, not highway or ramp)$/;"	m	struct:ZoningRule_t
req_string	.\Network\Terraserver.cpp	/^char	req_string[65536];$/;"	v
req_train	.\XESCore\Zoning.h	/^	int			req_train;								\/\/ Train tracks on outer border?$/;"	m	struct:ZoningRule_t
req_water	.\XESCore\Zoning.h	/^	int			req_water;								\/\/ Are we adjacent to water (not counting holes\/lakes)$/;"	m	struct:ZoningRule_t
require_Coords	.\VPF\VPFImport.cpp	/^	require_Coords,$/;"	e	enum:__anon107	file:
require_Int	.\VPF\VPFImport.cpp	/^	require_Int,$/;"	e	enum:__anon107	file:
require_Link	.\VPF\VPFImport.cpp	/^	require_Link,$/;"	e	enum:__anon107	file:
require_String	.\VPF\VPFImport.cpp	/^	require_String$/;"	e	enum:__anon107	file:
require_airport	.\XESCore\DEMTables.h	/^	int			require_airport;$/;"	m	struct:BeachInfo_t
require_char	.\GUI\GUI_Fonts.cpp	/^float TT_font_info::require_char(UTF32 inChar, float s)$/;"	f	class:TT_font_info
require_features	.\XESCore\Zoning.h	/^	set<int>	require_features;						\/\/ One of these features MUST be present or we can't use the rule.$/;"	m	struct:ZoningRule_t
require_gt_poly	.\Tiger\TigerImport.cpp	/^	int					require_gt_poly;	\/\/ If this is set and we are an area not an area feature in the census, ignore and dump the feature.$/;"	m	struct:FeatureInfo_t	file:
require_open	.\XESCore\DEMTables.h	/^	int			require_open;$/;"	m	struct:BeachInfo_t
required_zoning	.\XESCore\Zoning.h	/^	set<int>	required_zoning;$/;"	m	struct:LandFillRule_t
res	.\OneOffs\gen_roads10.h	/^	string					res;$/;"	m	class:traffic
res	.\OneOffs\gen_roads10.h	/^	string	res;$/;"	m	struct:train_car
res_Directory	.\WEDCore\WED_LibraryMgr.h	/^	res_Directory,$/;"	e	enum:__anon110
res_Facade	.\WEDCore\WED_LibraryMgr.h	/^	res_Facade,$/;"	e	enum:__anon110
res_Forest	.\WEDCore\WED_LibraryMgr.h	/^	res_Forest,$/;"	e	enum:__anon110
res_Line	.\WEDCore\WED_LibraryMgr.h	/^	res_Line,$/;"	e	enum:__anon110
res_None	.\WEDCore\WED_LibraryMgr.h	/^	res_None,$/;"	e	enum:__anon110
res_Object	.\WEDCore\WED_LibraryMgr.h	/^	res_Object,$/;"	e	enum:__anon110
res_Polygon	.\WEDCore\WED_LibraryMgr.h	/^	res_Polygon$/;"	e	enum:__anon110
res_String	.\WEDCore\WED_LibraryMgr.h	/^	res_String,$/;"	e	enum:__anon110
res_info_t	.\WEDCore\WED_LibraryMgr.h	/^	struct	res_info_t {$/;"	s	class:WED_LibraryMgr
res_map	.\GUI\GUI_Resources.cpp	/^typedef map<string, res_struct>	res_map;$/;"	t	file:
res_map_t	.\WEDCore\WED_LibraryMgr.h	/^	typedef map<string,res_info_t,compare_str_no_case>	res_map_t;$/;"	t	class:WED_LibraryMgr
res_struct	.\GUI\GUI_Resources.cpp	/^struct res_struct {$/;"	s	file:
res_table	.\WEDCore\WED_LibraryMgr.h	/^	res_map_t						res_table;$/;"	m	class:WED_LibraryMgr
res_type	.\WEDCore\WED_LibraryMgr.h	/^		int			res_type;$/;"	m	struct:WED_LibraryMgr::res_info_t
rescale	.\RenderFarmUI\RF_Export.cpp	/^	int			rescale;$/;"	m	struct:RF_ExportState_t	file:
rescale	.\RenderFarmUI\RF_Import.cpp	/^	int			rescale;$/;"	m	struct:RF_ImportState_t	file:
rescale	.\RenderFarmUI\RF_MapZoomer.cpp	/^inline	double	rescale(double s1, double s2, double d1, double d2, double v)$/;"	f
rescale	.\WEDMap\WED_MapZoomerNew.cpp	/^inline	double	rescale(double s1, double s2, double d1, double d2, double v)$/;"	f
rescale_keyframes	.\AC3DPlugins\obj_anim.cpp	/^void	rescale_keyframes			(ACObject * obj, float old_lo, float new_lo, float old_hi, float new_hi)$/;"	f
rescale_sel	.\AC3DPlugins\obj_anim.cpp	/^static void	rescale_sel(int argc, char * argv[])$/;"	f	file:
rescale_to_x	.\Utils\CompGeomDefs2.h	/^inline double		Bbox2::rescale_to_x(const Bbox2& new_box, double x) const$/;"	f	class:Bbox2
rescale_to_xv	.\Utils\CompGeomDefs2.h	/^inline double		Bbox2::rescale_to_xv(const Bbox2& new_box, double x) const$/;"	f	class:Bbox2
rescale_to_y	.\Utils\CompGeomDefs2.h	/^inline double		Bbox2::rescale_to_y(const Bbox2& new_box, double y) const$/;"	f	class:Bbox2
rescale_to_yv	.\Utils\CompGeomDefs2.h	/^inline double		Bbox2::rescale_to_yv(const Bbox2& new_box, double y) const$/;"	f	class:Bbox2
reserve	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::reserve(size_t Size) {$/;"	f	class:common_structures::heap_array
reserved	.\Utils\BitmapUtils.cpp	/^	long			reserved;$/;"	m	struct:BMPHeader	file:
reserved	.\XESCore\DEMIO.cpp	/^	char			reserved[24];				\/\/ Usually lblank$/;"	m	struct:DTED_UHL_t	file:
reserved1	.\XPTools\DDSTool.cpp	/^		unsigned int reserved1;$/;"	m	struct:ATC_Header_Texture_TAG	file:
reserved2	.\XPTools\DDSTool.cpp	/^		unsigned int reserved2;$/;"	m	struct:ATC_Header_Texture_TAG	file:
reserved3	.\XPTools\DDSTool.cpp	/^		unsigned int reserved3;$/;"	m	struct:ATC_Header_Texture_TAG	file:
reset	.\DSF\tri_stripper_101\cache_simulator.h	/^inline void cache_simulator::reset() {$/;"	f	class:triangle_stripper::cache_simulator
reset	.\Utils\RLERegion.cpp	/^void		RLERegionScanner::reset(void)$/;"	f	class:RLERegionScanner
resize	.\DSF\tri_stripper_101\cache_simulator.h	/^inline void cache_simulator::resize(const size_t Size) {$/;"	f	class:triangle_stripper::cache_simulator
resize	.\Obj\ObjPointPool.cpp	/^void	ObjPointPool::resize(int pts)$/;"	f	class:ObjPointPool
resize	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::resize(int width, int height)$/;"	f	class:DEMGeo
resize	.\XESCore\DEMDefs.cpp	/^void	DEMMask::resize(int width, int height, bool ini)$/;"	f	class:DEMMask
resize	.\lib_json\src\lib_json\json_value.cpp	/^Value::resize( ArrayIndex newSize )$/;"	f	class:Json::Value
resizeEvent	.\UI\XWin.lin.cpp	/^void XWin::resizeEvent(QResizeEvent* e)$/;"	f	class:XWin
resizeGL	.\UI\XWinGL.lin.cpp	/^void glWidget::resizeGL(int inWidth, int inHeight)$/;"	f	class:glWidget
resize_save	.\XESCore\DEMDefs.cpp	/^void DEMGeo::resize_save(int w, int h, float fill_value)$/;"	f	class:DEMGeo
resolve	.\lib_json\src\lib_json\json_value.cpp	/^Path::resolve( const Value &root ) const$/;"	f	class:Json::Path
resolve	.\lib_json\src\lib_json\json_value.cpp	/^Path::resolve( const Value &root, $/;"	f	class:Json::Path
resolveReference	.\lib_json\src\lib_json\json_value.cpp	/^Value::resolveReference( const char *key, $/;"	f	class:Json::Value
resolver	.\WEDMap\WED_PreviewLayer.cpp	/^	IResolver * resolver;$/;"	m	struct:preview_object	file:
resolver	.\WEDMap\WED_PreviewLayer.cpp	/^	IResolver * resolver;$/;"	m	struct:preview_ortho	file:
resolver	.\WEDMap\WED_PreviewLayer.cpp	/^	IResolver * resolver;$/;"	m	struct:preview_pol	file:
resort	.\WEDImportExport\WED_AptTable.cpp	/^void		WED_AptTable::resort(void)$/;"	f	class:WED_AptTable
resort	.\WEDImportExport\WED_ICAOTable.cpp	/^void		WED_ICAOTable::resort(void)$/;"	f	class:WED_ICAOTable
resort	.\WEDImportExport\WED_VerTable.cpp	/^void		WED_VerTable::resort(void)$/;"	f	class:WED_VerTable
resource	.\WEDEntities\WED_DrapedOrthophoto.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_DrapedOrthophoto
resource	.\WEDEntities\WED_FacadePlacement.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_FacadePlacement
resource	.\WEDEntities\WED_ForestPlacement.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_ForestPlacement
resource	.\WEDEntities\WED_LinePlacement.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_LinePlacement
resource	.\WEDEntities\WED_ObjPlacement.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_ObjPlacement
resource	.\WEDEntities\WED_PolygonPlacement.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_PolygonPlacement
resource	.\WEDEntities\WED_StringPlacement.h	/^	WED_PropStringText		resource;$/;"	m	class:WED_StringPlacement
resource	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropStringText		resource;$/;"	m	class:WED_CreatePointTool
resource_get_memory	.\GUI\GUI_Resources.cpp	/^static bool resource_get_memory(const string& res_name, char** begin, char** end)$/;"	f	file:
resource_id	.\XESCore\Zoning.h	/^	int			resource_id;$/;"	m	struct:EdgeRule_t
rest_read_compressed	.\Utils\unzip.c	/^	uLong rest_read_compressed; \/* number of byte to be decompressed *\/$/;"	m	struct:__anon101	file:
rest_read_uncompressed	.\Utils\unzip.c	/^	uLong rest_read_uncompressed;\/*number of byte to be obtained after decomp*\/$/;"	m	struct:__anon101	file:
result_	.\lib_json\src\test_lib_json\jsontest.h	/^      TestResult *result_;$/;"	m	class:JsonTest::TestCase
results	.\XESCore\MapHelpers.h	/^	set<typename Arr::Halfedge_handle>	results;$/;"	m	class:edge_collector_t
rev	.\WEDNetwork\WED_Connection.h	/^		int			rev;$/;"	m	class:WED_Connection
reverse	.\OneOffs\gen_roads10.h	/^	int				reverse;$/;"	m	struct:traffic_lane
reverse	.\XESCore\NetPlacement.cpp	/^void	Net_ChainInfo_t::reverse(void)$/;"	f	class:Net_ChainInfo_t
reverse_histo	.\Utils\STLUtils.h	/^V reverse_histo(const map<K,V>& in_histo, multimap<V,K>& out_histo)$/;"	f
reverse_poly	.\OneOffs\osm2shape.c	/^void reverse_poly(double * x, double * y, int c)$/;"	f
reverse_sel	.\AC3DPlugins\obj_anim.cpp	/^static void	reverse_sel(void)$/;"	f	file:
reversed	.\OneOffs\gen_roads.cpp	/^	int		reversed;$/;"	m	struct:car_lane	file:
reversed	.\Tiger\TIGERTypes.h	/^	char			reversed;	\/\/ Current owner has vertex order opposite the one that made it 0=false1=true2=???$/;"	m	struct:ChainInfo_t
rewriteValueTree	.\lib_json\src\jsontestrunner\main.cpp	/^rewriteValueTree( const std::string &rewritePath, $/;"	f	file:
rf_Cat_File	.\RenderFarmUI\RF_Msgs.h	/^	rf_Cat_File = 0,$/;"	e	enum:__anon77
rf_Cat_Selection	.\RenderFarmUI\RF_Msgs.h	/^	rf_Cat_Selection$/;"	e	enum:__anon77
rf_Msg_AirportsLoaded	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_AirportsLoaded		\/\/ Airport data has changed.$/;"	e	enum:__anon78
rf_Msg_FileLoaded	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_FileLoaded = 0,		\/\/ The whole file was loaded - everything's blown away.$/;"	e	enum:__anon78
rf_Msg_RasterChange	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_RasterChange,		\/\/ At least one raster layer has changed - msg is the DEM layer or 0 for unknown$/;"	e	enum:__anon78
rf_Msg_SelectionChanged	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_SelectionChanged$/;"	e	enum:__anon79
rf_Msg_SelectionModeChanged	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_SelectionModeChanged = 0,	\/\/ Param is int, true if sel changed too$/;"	e	enum:__anon79
rf_Msg_TriangleHiChange	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_TriangleHiChange,	\/\/ Triangle Mesh is changed in some way.$/;"	e	enum:__anon78
rf_Msg_VectorChange	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_VectorChange,		\/\/ Vector layer has changed, moving stuff spatially or adding\/removing objects.$/;"	e	enum:__anon78
rf_Msg_VectorMetaChange	.\RenderFarmUI\RF_Msgs.h	/^	rf_Msg_VectorMetaChange,	\/\/ Vector map is constant but the meta data per segment may have changed.$/;"	e	enum:__anon78
rf_Select_Edge	.\RenderFarmUI\RF_Selection.h	/^	rf_Select_Edge,$/;"	e	enum:__anon83
rf_Select_Face	.\RenderFarmUI\RF_Selection.h	/^	rf_Select_Face,$/;"	e	enum:__anon83
rf_Select_PointFeatures	.\RenderFarmUI\RF_Selection.h	/^	rf_Select_PointFeatures$/;"	e	enum:__anon83
rf_Select_Vertex	.\RenderFarmUI\RF_Selection.h	/^	rf_Select_Vertex = 0,$/;"	e	enum:__anon83
rf_assert_fail_exception	.\RenderFarmUI\RF_Assert.h	/^class rf_assert_fail_exception : public exception {$/;"	c
rf_key	.\RawImport\ShapeIO.cpp	/^	int					rf_key;				\/\/ This is the enum to key off of for RF.$/;"	m	struct:import_column_t	file:
rgb	.\Obj\XObjDefs.h	/^	float	rgb[3];$/;"	m	struct:vec_rgb
rgb	.\Obj\XObjDefs.h	/^	vector<vec_rgb>	rgb;$/;"	m	struct:XObjCmd
rgb	.\OneOffs\gen_roads.cpp	/^	float			rgb[3];$/;"	m	struct:tex_info	file:
rgb	.\OneOffs\gen_roads10.h	/^	float	rgb[3];$/;"	m	class:published_road
rgb	.\XESCore\AptDefs.h	/^		float			rgb[3];$/;"	m	struct:AptInfo_t::AptLineLoop_t
rgb	.\XESCore\ConfigSystem.h	/^	float		rgb[3];$/;"	m	struct:RGBColor_t
rgn1_	.\Utils\RLERegion.cpp	/^	const RLERegion& rgn1_;$/;"	m	class:RLERegionDualScanner	file:
rgn2_	.\Utils\RLERegion.cpp	/^	const RLERegion& rgn2_;$/;"	m	class:RLERegionDualScanner	file:
right	.\Obj\XObjDefs.h	/^	int						right;$/;"	m	struct:XObjPanelRegion8
right	.\Utils\RLERegion.h	/^	int		right(void) const { return x2_; }$/;"	f	class:RLERegion
right	.\XESCore\BezierApprox.cpp	/^	approx_t *					right;$/;"	m	struct:possible_approx_t	file:
right	.\XESCore\NetTables.h	/^	int			right;$/;"	m	struct:ForkRule
rightFace	.\XESCore\WTPM.h	/^	WTPM_Face *				rightFace;$/;"	m	struct:WTPM_Line
rightFaceKey	.\SDTS\SDTSReadTVP.cpp	/^	ForeignKey				rightFaceKey;$/;"	m	struct:LineRecord	file:
rightMargin_	.\lib_json\include\json\writer.h	/^      int rightMargin_;$/;"	m	class:Json::StyledStreamWriter
rightMargin_	.\lib_json\include\json\writer.h	/^      int rightMargin_;$/;"	m	class:Json::StyledWriter
right_as_leaf	.\Utils\RTree2.h	/^		leaf *		right_as_leaf() const { return _clean_ptr(right_l); }$/;"	f	struct:RTree2::node
right_as_node	.\Utils\RTree2.h	/^		node *		right_as_node() const { return _clean_ptr(right_n); } $/;"	f	struct:RTree2::node
right_edg_index	.\VPF\VPFImport.cpp	/^	int		right_edg_index;$/;"	m	struct:VPF_Line	file:
right_fac_index	.\VPF\VPFImport.cpp	/^	int		right_fac_index;$/;"	m	struct:VPF_Line	file:
right_is_leaf	.\Utils\RTree2.h	/^		bool		right_is_leaf() const { return _get_lsb(right_n); }$/;"	f	struct:RTree2::node
right_l	.\Utils\RTree2.h	/^			leaf *		right_l;$/;"	m	union:RTree2::node::__anon98
right_n	.\Utils\RTree2.h	/^			node *		right_n;$/;"	m	union:RTree2::node::__anon98
right_side	.\Utils\CompGeomDefs2.h	/^	Segment2	right_side  (void) const { return Segment2(bottom_right(), top_right()); }$/;"	f	struct:Bbox2
right_turn	.\Utils\CompGeomDefs2.h	/^	bool	right_turn(const Vector2& v) const { return (-dy * v.dx + dx * v.dy) < 0.0; }$/;"	f	struct:Vector2
right_turn	.\Utils\CompGeomDefs2.h	/^inline bool	right_turn(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
ring	.\MeshTool\MeshTool_Create.cpp	/^static Polygon_2						ring, the_hole;$/;"	v	file:
ring	.\WEDCore\WED_ResourceMgr.h	/^	bool			ring;$/;"	m	struct:fac_info_t
ring	.\WEDImportExport\WED_DSFImport.cpp	/^	WED_Thing *			ring;$/;"	m	class:DSF_Importer	file:
ring_node	.\XESCore\BlockFill.cpp	/^struct ring_node$/;"	s	file:
ring_simplify	.\XESCore\BlockFill.cpp	/^void ring_simplify($/;"	f
ring_simplify_polygon	.\XESCore\BlockFill.cpp	/^void ring_simplify_polygon(Polygon2& io_poly, double err)$/;"	f
road	.\OneOffs\GenTerrain.c	/^	int		road;$/;"	m	struct:__anon60	file:
road	.\OneOffs\gen_roads.cpp	/^	road(int br, int ow,tex_info * itex, const char * iname, int inum, int sl=0) :$/;"	f	class:road
road	.\OneOffs\gen_roads.cpp	/^class	road : public road_container {$/;"	c	file:
road	.\OneOffs\gen_roads10.h	/^class	road {$/;"	c
road	.\XESCore\ObjTables.h	/^	int		road;$/;"	m	struct:RepInfo_t
road	.\XESCore\Zoning.h	/^	int			road;$/;"	m	struct:FillRule_t
road_blade	.\OneOffs\gen_roads.cpp	/^	road_blade(int is1, int is2, float iy1, float iy2, tex_info * itex) :$/;"	f	class:road_blade
road_blade	.\OneOffs\gen_roads.cpp	/^class	road_blade : public road_elem {$/;"	c	file:
road_center_marker	.\OneOffs\gen_roads10.h	/^struct road_center_marker {$/;"	s
road_codes	.\OneOffs\make_fill_rules.c	/^int	road_codes[] = { 2, 1, 0 };$/;"	v
road_composite	.\OneOffs\gen_roads.cpp	/^class	road_composite : public road_elem, public road_container {$/;"	c	file:
road_container	.\OneOffs\gen_roads.cpp	/^class	road_container {$/;"	c	file:
road_coords_checker	.\XESCore\DSFBuilder.cpp	/^	road_coords_checker(void * p, double c[3], char m) {ptr = p;  last[0] = c[0]; last[1] = c[1]; last[2] = c[2]; lm = m; }$/;"	f	struct:road_coords_checker
road_coords_checker	.\XESCore\DSFBuilder.cpp	/^struct	road_coords_checker {$/;"	s	file:
road_deck	.\OneOffs\gen_roads.cpp	/^	road_deck(int is1, int is2, tex_info * itex, const char * isurf) :$/;"	f	class:road_deck
road_deck	.\OneOffs\gen_roads.cpp	/^class	road_deck : public road_elem {$/;"	c	file:
road_elem	.\OneOffs\gen_roads.cpp	/^class	road_elem {$/;"	c	file:
road_end	.\OneOffs\gen_roads.cpp	/^void 	road_end(void) { road * r = dynamic_cast<road *>(road_stack.back()); r->emit(); road_stack.pop_back(); assert(road_stack.empty()); }$/;"	f
road_map	.\OneOffs\gen_roads10.h	/^class	road_map {$/;"	c
road_pylons	.\OneOffs\gen_roads.cpp	/^	road_pylons(const char * iobj, float israt, float isoff, float ispacing, float istart_space, int ion ) : obj(iobj), srat(israt),$/;"	f	class:road_pylons
road_pylons	.\OneOffs\gen_roads.cpp	/^class	road_pylons : public road_elem, public road_container {$/;"	c	file:
road_segment	.\OneOffs\gen_roads10.h	/^struct road_segment {$/;"	s
road_slope	.\XESCore\NetTables.h	/^	float		road_slope;$/;"	m	struct:BridgeInfo
road_spacer	.\OneOffs\gen_roads.cpp	/^	road_spacer(float iw) : w(iw) { }$/;"	f	class:road_spacer
road_spacer	.\OneOffs\gen_roads.cpp	/^class	road_spacer : public road_elem {$/;"	c	file:
road_stack	.\OneOffs\gen_roads.cpp	/^vector<road_container *>	road_stack;$/;"	v
road_start	.\OneOffs\gen_roads.cpp	/^void	road_start(int bridge, int one_way, int number, const char * name, tex_info * tex, int show_level=0) {  road * r = new road(bridge, one_way, tex,name, number,show_level); road_stack.push_back(r); }$/;"	f
road_suffix	.\OneOffs\make_fill_rules.c	/^const char * road_suffix[] = { "_f", "_h", NULL };$/;"	v
road_type	.\XESCore\Zoning.cpp	/^	int				road_type;	\/\/ Lowest enum overlying road on this edge$/;"	m	struct:EdgeNode_t	file:
road_type	.\XESCore\Zoning.h	/^	int			road_type;		$/;"	m	struct:EdgeRule_t
road_underside	.\OneOffs\gen_roads.cpp	/^	road_underside(int is1, int is2, float iy, tex_info * itex) :$/;"	f	class:road_underside
road_underside	.\OneOffs\gen_roads.cpp	/^class	road_underside : public road_elem, public road_container {$/;"	c	file:
roll	.\WEDNetwork\WED_NWLinkAdapter.h	/^    float   roll;$/;"	m	struct:WED_NWCamera_t
roof	.\WEDCore\WED_ResourceMgr.h	/^	bool			roof;$/;"	m	struct:fac_info_t
root	.\UI\XPopup.h	/^	Window		root;$/;"	m	struct:xwindow
root	.\Utils\QuadTree.h	/^	Node *		root;$/;"	m	class:QuadTree
root	.\Utils\RTree2.h	/^	node *		root;$/;"	m	class:RTree2
rootPredicateNode_	.\lib_json\src\test_lib_json\jsontest.h	/^      PredicateContext rootPredicateNode_;$/;"	m	class:JsonTest::TestResult
rot	.\Utils\XCarBoneUtils.h	/^	KeyTable		rot[3];			\/\/ Keyable rotations around phi, the and psi (Eulers)$/;"	m	struct:XCarBone
rotate_inplace	.\Utils\QuiltUtils.h	/^void rotate_inplace($/;"	f
rotate_surface_y	.\AC3DPlugins\ac_utils.cpp	/^void rotate_surface_y(Surface * surface, float angle, float x_ctr, float z_ctr)$/;"	f
rotate_to_corner	.\XESCore\BlockFill.cpp	/^void	rotate_to_corner(vector<block_pt>& outer_ccb_pts)$/;"	f
rotation	.\Env\Persistence.h	/^	short		rotation;$/;"	m	struct:VertexInfo
roughness	.\WEDEntities\WED_Helipad.h	/^	WED_PropDoubleText	roughness;$/;"	m	class:WED_Helipad
roughness	.\WEDEntities\WED_Runway.h	/^	WED_PropDoubleText		roughness;$/;"	m	class:WED_Runway
roughness	.\WEDEntities\WED_Taxiway.h	/^	WED_PropDoubleText		roughness;$/;"	m	class:WED_Taxiway
roughness_ratio	.\XESCore\AptDefs.h	/^	float					roughness_ratio;$/;"	m	struct:AptTaxiway_t
roughness_ratio	.\XESCore\AptDefs.h	/^	float		roughness_ratio;$/;"	m	struct:AptHelipad_t
roughness_ratio	.\XESCore\AptDefs.h	/^	float		roughness_ratio;$/;"	m	struct:AptPavement_t
roughness_ratio	.\XESCore\AptDefs.h	/^	float		roughness_ratio;$/;"	m	struct:AptRunway_t
round	.\Obj\XDefs.h	/^	static __inline double round(double v) { return floor(v+0.5); }$/;"	f
round_by_parts	.\Utils\GISUtils.h	/^inline double round_by_parts(double c, int parts)$/;"	f
round_by_parts_guess	.\Utils\GISUtils.h	/^inline double round_by_parts_guess(double c, int parts)$/;"	f
round_grid	.\RawImport\ShapeIO.cpp	/^static void round_grid(Point2& io_pt, int steps)$/;"	f	file:
roundf	.\Obj\XObjBuilder.cpp	/^float roundf (float x)$/;"	f
row_id	.\VPF\VPFTable.h	/^	unsigned int row_id;$/;"	m	struct:VPF_TripletKey
rpoly	.\Tiger\TIGERTypes.h	/^	CENID_POLYID	rpoly;$/;"	m	struct:ChainInfo_t
run	.\Utils\RLERegion.h	/^	typedef vector<int>	run;$/;"	t	class:RLERegion
run	.\Utils\XChunkyFileUtils.cpp	/^		vector<T>	run;$/;"	m	class:RLEEncoder	file:
run	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestCase::run( TestResult &result )$/;"	f	class:JsonTest::TestCase
run1_	.\Utils\RLERegion.cpp	/^	const RLERegion::run * run1_;$/;"	m	class:RLERegionDualScanner	file:
run2_	.\Utils\RLERegion.cpp	/^	const RLERegion::run * run2_;$/;"	m	class:RLERegionDualScanner	file:
runAllTest	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::runAllTest( bool printSummary ) const$/;"	f	class:JsonTest::Runner
runCommandLine	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::runCommandLine( int argc, const char *argv[] ) const$/;"	f	class:JsonTest::Runner
runTestAt	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::runTestAt( unsigned int index, TestResult &result ) const$/;"	f	class:JsonTest::Runner
run_file	.\OneOffs\osm2shape.c	/^void run_file(const char * fname,XML_StartElementHandler start,XML_EndElementHandler end)$/;"	f
run_file	.\OneOffs\osm_tile.c	/^void run_file(const char * fname,XML_StartElementHandler start,XML_EndElementHandler end)$/;"	f
run_length	.\Utils\RLERegion.cpp	/^	int  run_length(void) { return x2_ - x1_; }$/;"	f	class:RLERegionDualScanner
run_length	.\Utils\XChunkyFileUtils.cpp	/^		int			run_length;$/;"	m	class:RLEEncoder	file:
run_length	.\Utils\XChunkyFileUtils.cpp	/^	int		run_length;$/;"	m	class:RLEDecoder	file:
run_start	.\Utils\RLERegion.cpp	/^	int  run_start(void) { return x1_; }$/;"	f	class:RLERegionDualScanner
run_stop	.\Utils\RLERegion.cpp	/^	int	 run_stop(void) { return x2_; }$/;"	f	class:RLERegionDualScanner
run_vertex	.\XESCore\MeshSimplify.cpp	/^void MeshSimplify::run_vertex(CDT::Vertex_handle q)$/;"	f	class:MeshSimplify
runarray	.\Utils\RLERegion.h	/^	typedef vector<run>	runarray;$/;"	t	class:RLERegion
runs_	.\Utils\RLERegion.h	/^	runarray	runs_;$/;"	m	class:RLERegion
runway	.\WEDEntities\WED_TaxiRoute.h	/^		WED_PropIntEnum			runway;$/;"	m	class:WED_TaxiRoute
runway	.\XESCore\AptDefs.h	/^	int							runway;$/;"	m	struct:AptRouteEdge_t
runway	.\XESCore\AptDefs.h	/^	string			runway;$/;"	m	struct:AptRunwayRule_t
runway_rules	.\XESCore\AptDefs.h	/^	AptRunwayRuleVector			runway_rules;$/;"	m	struct:AptFlow_t
runways	.\XESCore\AptDefs.h	/^	AptRunwayVector		runways;				\/\/ 850 structures$/;"	m	struct:AptInfo_t
rwy	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntEnum			rwy;$/;"	m	class:WED_ATCRunwayUse
rwy	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_Runway * rwy;	$/;"	m	struct:preview_runway	file:
rwy_app_lights	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropIntEnum				rwy_app_lights;$/;"	m	class:WED_CreateLineTool
rwy_center_lites	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropBoolText			rwy_center_lites;$/;"	m	class:WED_CreateLineTool
rwy_edge_lights	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropIntEnum				rwy_edge_lights;$/;"	m	class:WED_CreateLineTool
rwy_markings	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropIntEnum				rwy_markings;$/;"	m	class:WED_CreateLineTool
rwy_prop_count	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_count$/;"	e	enum:__anon117	file:
rwy_prop_heading	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_heading,$/;"	e	enum:__anon117	file:
rwy_prop_lat1	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_lat1,$/;"	e	enum:__anon117	file:
rwy_prop_lat2	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_lat2,$/;"	e	enum:__anon117	file:
rwy_prop_latc	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_latc,$/;"	e	enum:__anon117	file:
rwy_prop_length	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_length,$/;"	e	enum:__anon117	file:
rwy_prop_lon1	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_lon1,$/;"	e	enum:__anon117	file:
rwy_prop_lon2	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_lon2,$/;"	e	enum:__anon117	file:
rwy_prop_lonc	.\WEDEntities\WED_GISLine_Width.cpp	/^	rwy_prop_lonc,$/;"	e	enum:__anon117	file:
rwy_reil	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropIntEnum				rwy_reil;$/;"	m	class:WED_CreateLineTool
rwy_remaining_signs	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropBoolText			rwy_remaining_signs;$/;"	m	class:WED_CreateLineTool
rwy_roughness	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropDoubleText			rwy_roughness;$/;"	m	class:WED_CreateLineTool
rwy_shoulder	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropIntEnum				rwy_shoulder;$/;"	m	class:WED_CreateLineTool
rwy_surface	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropIntEnum				rwy_surface;$/;"	m	class:WED_CreateLineTool
rwy_tdzl	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropBoolText			rwy_tdzl;$/;"	m	class:WED_CreateLineTool
s	.\OneOffs\gen_roads10.h	/^	float			s[2];$/;"	m	struct:road_segment
s	.\Utils\STLUtils.h	/^	S			s;$/;"	m	struct:split_seq
s	.\Utils\STLUtils.h	/^	S	s;$/;"	m	struct:filtered_seq
s	.\XESCore\BezierApprox.cpp	/^	__Seq		s;$/;"	m	struct:bezier_approx_seq	file:
s	.\XESCore\Hydro2.cpp	/^	double n,s,e,w;$/;"	m	struct:no_sharp_pt	file:
s	.\XPTools\TaxiMaker.cpp	/^	int						s;			\/\/ Tex coordinates of the token$/;"	m	struct:taxi_element_t	file:
s1	.\ObjEdit\OE_Globals.h	/^	float	s1, s2, t1, t2;$/;"	m	struct:OE_Texture_t
s1	.\OneOffs\gen_roads.cpp	/^	int				s1;$/;"	m	class:road_blade	file:
s1	.\OneOffs\gen_roads.cpp	/^	int				s1;$/;"	m	class:road_deck	file:
s1	.\OneOffs\gen_roads.cpp	/^	int				s1;$/;"	m	class:road_underside	file:
s1	.\XESCore\BezierApprox.cpp	/^	S1	s1;$/;"	m	struct:seq_concat	file:
s2	.\ObjEdit\OE_Globals.h	/^	float	s1, s2, t1, t2;$/;"	m	struct:OE_Texture_t
s2	.\OneOffs\gen_roads.cpp	/^	int				s2;$/;"	m	class:road_blade	file:
s2	.\OneOffs\gen_roads.cpp	/^	int				s2;$/;"	m	class:road_deck	file:
s2	.\OneOffs\gen_roads.cpp	/^	int				s2;$/;"	m	class:road_underside	file:
s2	.\XESCore\BezierApprox.cpp	/^	S2	s2;$/;"	m	struct:seq_concat	file:
sAirports	.\XESCore\DEMTables.cpp	/^static set<int>			sAirports;$/;"	v	file:
sAptIndex	.\MeshTool\MeshTool_Create.cpp	/^static AptIndex				sAptIndex;$/;"	v	file:
sApts	.\MeshTool\MeshTool_Create.cpp	/^static AptVector			sApts;$/;"	v	file:
sAssertHandler	.\Utils\AssertUtils.cpp	/^static	AssertHandler_f		sAssertHandler = DefaultAssert;$/;"	v	file:
sBad	.\DSF\DSFLib_Print.cpp	/^static int sBad = 0;$/;"	v	file:
sBestChoices	.\XESCore\GreedyMesh.cpp	/^static FaceQueue	sBestChoices;$/;"	v	file:
sBounds	.\MeshTool\MeshTool_Create.cpp	/^static double				sBounds[4];$/;"	v	file:
sCITs	.\GUI\GUI_Clipboard.cpp	/^static vector<GUI_CIT>		sCITs;$/;"	v	file:
sCallbacks	.\XPTools\ViewObj.cpp	/^static	ObjDrawFuncs10_t sCallbacks = {$/;"	v	file:
sCliffs	.\XESCore\DEMTables.cpp	/^static map<string,CliffInfo_t>		sCliffs;$/;"	v	file:
sClipStrings	.\GUI\GUI_Clipboard.cpp	/^static vector<string>		sClipStrings;$/;"	v	file:
sCmds	.\XESTools\GISTool_Utils.cpp	/^static map<string, GISTool_CmdInfo_t>		sCmds;$/;"	v	file:
sCommand	.\ObjEdit\OE_DataModel.cpp	/^static UndoState_t		sCommand;$/;"	v	file:
sCommandInProgress	.\ObjEdit\OE_DataModel.cpp	/^static bool				sCommandInProgress = false;$/;"	v	file:
sCoreCmds	.\XESTools\GISTool_CoreCmds.cpp	/^static	GISTool_RegCmd_t		sCoreCmds[] = {$/;"	v	file:
sCount	.\Installer\XResources.win.cpp	/^static	int					sCount;$/;"	v	file:
sCurrentDEM	.\XESCore\GreedyMesh.cpp	/^static const DEMGeo *	sCurrentDEM = NULL;$/;"	v	file:
sCurrentMesh	.\XESCore\GreedyMesh.cpp	/^static		 CDT *		sCurrentMesh = NULL;$/;"	v	file:
sDEMType	.\RenderFarmUI\RF_MapView.cpp	/^static	int			sDEMType = 0;$/;"	v	file:
sDSF2TEXT_CoordDepth	.\DSFTools\DSF2Text.cpp	/^static int sDSF2TEXT_CoordDepth;$/;"	v	file:
sDSF_Chains	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_Chains = 0;$/;"	v	file:
sDSF_Chains	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_Chains = 0;$/;"	v	file:
sDSF_CheckType	.\DSF\DSFLib_Print.cpp	/^static	int	sDSF_CheckType = -1;$/;"	v	file:
sDSF_CheckType	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int	sDSF_CheckType = -1;$/;"	v	file:
sDSF_Objs	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_Objs = 0;$/;"	v	file:
sDSF_Objs	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_Objs = 0;$/;"	v	file:
sDSF_Patches	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_Patches = 0;$/;"	v	file:
sDSF_Patches	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_Patches = 0;$/;"	v	file:
sDSF_Polys	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_Polys = 0;$/;"	v	file:
sDSF_Polys	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_Polys = 0;$/;"	v	file:
sDSF_ShapePoints	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_ShapePoints = 0;$/;"	v	file:
sDSF_ShapePoints	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_ShapePoints = 0;$/;"	v	file:
sDSF_Tris	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_Tris = 0;$/;"	v	file:
sDSF_Tris	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_Tris = 0;$/;"	v	file:
sDSF_VertNum	.\DSF\DSFLib_Print.cpp	/^static	int sDSF_VertNum = 0;$/;"	v	file:
sDSF_VertNum	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	int sDSF_VertNum = 0;$/;"	v	file:
sData	.\Installer\XResources.win.cpp	/^static	std::vector<char>	sData;$/;"	v	file:
sDebugAssertHandler	.\Utils\AssertUtils.cpp	/^static	AssertHandler_f		sDebugAssertHandler = DefaultDebugAssert;$/;"	v	file:
sDefault	.\Obj\ObjDraw.cpp	/^static	ObjDrawFuncs10_t sDefault = {$/;"	v	file:
sDem	.\MeshTool\MeshTool_Create.cpp	/^static DEMGeoMap			sDem;$/;"	v	file:
sDemCmds	.\XESTools\GISTool_DemCmds.cpp	/^static	GISTool_RegCmd_t		sDemCmds[] = {$/;"	v	file:
sDocs	.\WEDWindows\WED_StartWindow.cpp	/^static vector<open_doc_t>	sDocs;$/;"	v	file:
sDocuments	.\WEDCore\WED_Document.cpp	/^static set<WED_Document *> sDocuments;$/;"	v	file:
sDomains	.\WEDCore\WED_EnumSystem.cpp	/^static map<int,domain_Info>				sDomains;$/;"	v	file:
sDumpCmds	.\XESTools\GISTool_DumpCmds.cpp	/^static	GISTool_RegCmd_t		sDumpCmds[] = {$/;"	v	file:
sEast	.\DSF\DSFLib_Print.cpp	/^static	double	sEast = -180.0;$/;"	v	file:
sEditMenu	.\RenderFarmUI\RF_EditCommands.cpp	/^static	XPLMMenuID	sEditMenu = NULL;$/;"	v	file:
sEnums	.\WEDCore\WED_EnumSystem.cpp	/^static vector<enum_Info>				sEnums;				\/\/ For each enum N, string,$/;"	v	file:
sEnumsReverse	.\WEDCore\WED_EnumSystem.cpp	/^static map<pair<int,string>, int>		sEnumsReverse;$/;"	v	file:
sExport	.\RenderFarmUI\RF_Export.cpp	/^static XPWidgetID		sExport = NULL;$/;"	v	file:
sExportCLUT	.\RenderFarmUI\RF_Export.cpp	/^vector<char>		sExportCLUT;$/;"	v
sExportForwardMap	.\RenderFarmUI\RF_Export.cpp	/^vector<int>			sExportForwardMap;$/;"	v
sExportReverseMap	.\RenderFarmUI\RF_Export.cpp	/^hash_map<int,int>	sExportReverseMap;$/;"	v
sExportState	.\RenderFarmUI\RF_Export.cpp	/^static RF_ExportState_t	sExportState = { 0, 0, 0, 0, 0.0, 1.0, 0, 0, 0, 0 };$/;"	v	file:
sFeatureObjs	.\XESCore\ObjTables.cpp	/^static set<int>					sFeatureObjs;$/;"	v	file:
sFileCmds	.\ObjEdit\OE_FileCmds.cpp	/^const	char *	sFileCmds[] = {$/;"	v
sFileKeys	.\ObjEdit\OE_FileCmds.cpp	/^const	char	sFileKeys[] = {$/;"	v
sFileMenu	.\ObjEdit\OE_FileCmds.cpp	/^static	XPLMMenuID	sFileMenu;$/;"	v	file:
sGlobalPrefs	.\WEDCore\WED_Document.cpp	/^static map<string,string>	sGlobalPrefs;$/;"	v	file:
sHandlerTable	.\XESCore\ConfigSystem.cpp	/^static HandlerMap									sHandlerTable;$/;"	v	file:
sHogs	.\GUI\GUI_MemoryHog.cpp	/^static set<GUI_MemoryHog *>	sHogs;$/;"	v	file:
sImport	.\RenderFarmUI\RF_Import.cpp	/^static XPWidgetID		sImport = NULL;$/;"	v	file:
sImportCLUT	.\RenderFarmUI\RF_Import.cpp	/^vector<char>		sImportCLUT;$/;"	v
sImportColumns	.\RawImport\ShapeIO.cpp	/^static import_column_vector	sImportColumns;$/;"	v	file:
sImportForwardMap	.\RenderFarmUI\RF_Import.cpp	/^vector<int>			sImportForwardMap;$/;"	v
sImportReverseMap	.\RenderFarmUI\RF_Import.cpp	/^hash_map<int,int>	sImportReverseMap;$/;"	v
sImportState	.\RenderFarmUI\RF_Import.cpp	/^static RF_ImportState_t	sImportState = { 0, 0, 0, 0, 1201, 1201, 0.0, 1.0, 0, 0, 0, 0,$/;"	v	file:
sIn	.\Network\PCSBSocket.h	/^		SOCKADDR_IN	sIn; \/\/our address struct$/;"	m	class:PCSBSocket
sIn	.\Network\PCSBSocket.h	/^	struct	sockaddr_in	sIn;$/;"	m	class:PCSBSocket	typeref:struct:PCSBSocket::sockaddr_in
sIn	.\Network\PCSBSocketUDP.h	/^		SOCKADDR_IN			sIn;			\/\/our address struct$/;"	m	class:PCSBSocketUDP
sIn	.\Network\PCSBSocketUDP.h	/^		sockaddr_in			sIn;$/;"	m	class:PCSBSocketUDP
sIniting	.\UI\XWin.win.cpp	/^static	bool	sIniting = false;$/;"	v	file:
sKeyGen	.\XESCore\MeshDefs.cpp	/^int CDT::sKeyGen = 1;$/;"	m	class:CDT	file:
sKeyGen	.\XESCore\MeshDefs.h	/^	static	int		sKeyGen;$/;"	m	class:CDT
sKnownFeatures	.\XESCore\ObjTables.cpp	/^static set<int>					sKnownFeatures;$/;"	v	file:
sLayerID	.\RawImport\ShapeIO.cpp	/^static int					sLayerID;$/;"	v	file:
sLayerTag	.\RawImport\ShapeIO.cpp	/^static string				sLayerTag;$/;"	v	file:
sLibrary	.\GUI\GUI_Fonts.cpp	/^static	FT_Library			sLibrary = NULL;$/;"	v	file:
sLineBridge	.\RawImport\ShapeIO.cpp	/^static shape_pattern_vector sLineBridge;$/;"	v	file:
sLineReverse	.\RawImport\ShapeIO.cpp	/^static shape_pattern_vector sLineReverse;$/;"	v	file:
sLoadedFiles	.\XESCore\ConfigSystem.cpp	/^static set<string>									sLoadedFiles;$/;"	v	file:
sMakeDDS	.\MeshTool\MeshTool_Create.cpp	/^static int					sMakeDDS = 0;$/;"	v	file:
sMeasurements	.\WEDMap\WED_UIMeasurements.cpp	/^static UI_Measurement_t	sMeasurements;$/;"	v	file:
sMesh	.\MeshTool\MeshTool_Create.cpp	/^static CDT					sMesh;$/;"	v	file:
sMiscCmds	.\XESTools\GISTool_MiscCmds.cpp	/^static	GISTool_RegCmd_t		sMiscCmds[] = {$/;"	v	file:
sNADGrid	.\Utils\GISUtils.cpp	/^struct CTABLE *		sNADGrid = NULL;$/;"	v	typeref:struct:CTABLE
sNorth	.\DSF\DSFLib_Print.cpp	/^static	double	sNorth = -90.0;$/;"	v	file:
sNotifiables	.\ObjEdit\OE_Notify.cpp	/^static	set<OE_Notifiable *>	sNotifiables;$/;"	v	file:
sNotifiables	.\RenderFarmUI\RF_Notify.cpp	/^static	set<RF_Notifiable *>	sNotifiables;$/;"	v	file:
sNotify	.\GUI\GUI_Commander.cpp	/^static set<GUI_Commander_Notifiable *>	sNotify;$/;"	v	file:
sNotifyFuncs	.\ObjEdit\OE_Notify.cpp	/^static	set<OE_Notify_f>		sNotifyFuncs;$/;"	v	file:
sNotifyFuncs	.\RenderFarmUI\RF_Notify.cpp	/^static	set<RF_Notify_f>		sNotifyFuncs;$/;"	v	file:
sObsCmds	.\XESTools\GISTool_ObsCmds.cpp	/^static	GISTool_RegCmd_t		sObsCmds[] = {$/;"	v	file:
sOldHandler	.\GUI\GUI_MemoryHog.cpp	/^static new_handler			sOldHandler;$/;"	v	file:
sPackages	.\WEDCore\WED_Package.cpp	/^static set<WED_Package*> sPackages;$/;"	v	file:
sPathStack	.\XESCore\ConfigSystem.cpp	/^static list<string>									sPathStack;$/;"	v	file:
sPrefs	.\GUI\GUI_Prefs.cpp	/^static	GUI_Prefs_t		sPrefs;$/;"	v	file:
sPrefsDialog	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static XPWidgetID		sPrefsDialog = NULL;$/;"	v	file:
sPrefsTab	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static	int				sPrefsTab = 0;$/;"	v	file:
sProcessCmds	.\XESTools\GISTool_ProcessingCmds.cpp	/^static	GISTool_RegCmd_t		sProcessCmds[] = {$/;"	v	file:
sProcessMenu	.\RenderFarmUI\RF_ProcessingCmds.cpp	/^static	XPLMMenuID	sProcessMenu = NULL;$/;"	v	file:
sProj	.\RawImport\ShapeIO.cpp	/^static projPJ 				sProj=NULL;$/;"	v	file:
sRedo	.\ObjEdit\OE_DataModel.cpp	/^static UndoVector_t		sRedo;$/;"	v	file:
sResMap	.\GUI\GUI_Resources.cpp	/^static res_map sResMap;$/;"	v	file:
sSelCmds	.\ObjEdit\OE_SelCmds.cpp	/^const	char *	sSelCmds[] = {$/;"	v
sSelKeys	.\ObjEdit\OE_SelCmds.cpp	/^const	char	sSelKeys[] = {$/;"	v
sSelMenu	.\ObjEdit\OE_SelCmds.cpp	/^static	XPLMMenuID	sSelMenu;$/;"	v	file:
sSelectionType	.\WEDMap\WED_ToolUtils.cpp	/^static	GUI_ClipType	sSelectionType = gui_ClipType_Invalid;$/;"	v	file:
sShadingAzi	.\RenderFarmUI\RF_MapView.cpp	/^float		sShadingAzi = 315;$/;"	v
sShadingDecl	.\RenderFarmUI\RF_MapView.cpp	/^float		sShadingDecl = 45;$/;"	v
sShapeRules	.\RawImport\ShapeIO.cpp	/^static shape_pattern_vector	sShapeRules;$/;"	v	file:
sShowAirports	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowAirports =1;$/;"	v
sShowDEMData	.\RenderFarmUI\RF_MapView.cpp	/^static int			sShowDEMData[DEMChoiceCount-1] = { 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0 };$/;"	v	file:
sShowExtent	.\RenderFarmUI\RF_MapView.cpp	/^static	int			sShowExtent = 1;$/;"	v	file:
sShowGrids	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowGrids = 0;$/;"	v
sShowMap	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowMap = 1;$/;"	v
sShowMeshAlphas	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowMeshAlphas = 1;$/;"	v
sShowMeshLines	.\RenderFarmUI\RF_MapView.cpp	/^static	int			sShowMeshLines  = 1;$/;"	v	file:
sShowMeshPoints	.\RenderFarmUI\RF_MapView.cpp	/^static	int			sShowMeshPoints = 1;$/;"	v	file:
sShowMeshTrisHi	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowMeshTrisHi = 1;$/;"	v
sShowShading	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowShading = 1;$/;"	v
sShowTensors	.\RenderFarmUI\RF_MapView.cpp	/^int			sShowTensors = 1;$/;"	v
sSkip	.\XESTools\GISTool_Utils.cpp	/^static int									sSkip = 0;$/;"	v	file:
sSouth	.\DSF\DSFLib_Print.cpp	/^static	double	sSouth = 90.0;$/;"	v	file:
sStaticCtors	.\WEDCore\WED_Persistent.cpp	/^static hash_map<string, WED_Persistent::CTOR_f>	sStaticCtors;$/;"	v	file:
sTest1	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static	int				sTest1 = 0;$/;"	v	file:
sTest2	.\RenderFarmUI\RF_PrefsDialog.cpp	/^static	int				sTest2 = 0;$/;"	v	file:
sTestInteractive	.\Utils\AssertUtils.cpp	/^bool	sTestInteractive = false;$/;"	v
sTexCmdMenu	.\ObjEdit\OE_TexCmds.cpp	/^static	XPLMMenuID sTexCmdMenu;$/;"	v	file:
sTexCmds	.\ObjEdit\OE_TexCmds.cpp	/^static const char *	sTexCmds [] = {$/;"	v	file:
sTexKeys	.\ObjEdit\OE_TexCmds.cpp	/^static	const char	sTexKeys [] = {$/;"	v	file:
sTexes	.\GUI\GUI_Resources.cpp	/^static TexResourceTable		sTexes;$/;"	v	file:
sTimerMap	.\GUI\GUI_Timer.cpp	/^static TimerMap						sTimerMap;$/;"	v	file:
sTranslateMap	.\XESCore\DEMIO.cpp	/^static vector<int> *		sTranslateMap = NULL;$/;"	v	file:
sTri_SaveFirst	.\DSF\DSFLib_Print.cpp	/^static	double	sTri_SaveFirst[2];$/;"	v	file:
sTri_SaveFirst	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	double	sTri_SaveFirst[2];$/;"	v	file:
sTri_SaveLast	.\DSF\DSFLib_Print.cpp	/^static	double	sTri_SaveLast[2];$/;"	v	file:
sTri_SaveLast	.\DSF\dsflib_013005\DSFLib_Print.cpp	/^static	double	sTri_SaveLast[2];$/;"	v	file:
sUTMProj	.\Utils\GISUtils.cpp	/^hash_map<int, projPJ>	sUTMProj;$/;"	v
sUndo	.\ObjEdit\OE_DataModel.cpp	/^static UndoVector_t		sUndo;$/;"	v	file:
sUndoCmdMenu	.\ObjEdit\OE_DataModel.cpp	/^static	XPLMMenuID	sUndoCmdMenu;$/;"	v	file:
sUndoCmds	.\ObjEdit\OE_DataModel.cpp	/^static const char * sUndoCmds [] = {$/;"	v	file:
sUndoKeys	.\ObjEdit\OE_DataModel.cpp	/^static const char	sUndoKeys [] = {$/;"	v	file:
sUrbanDenseSpreaderKernel	.\XESCore\DEMAlgs.cpp	/^static float	sUrbanDenseSpreaderKernel[URBAN_DENSE_KERN_SIZE * URBAN_DENSE_KERN_SIZE];$/;"	v	file:
sUrbanRadialSpreaderKernel	.\XESCore\DEMAlgs.cpp	/^static float	sUrbanRadialSpreaderKernel[URBAN_RADIAL_KERN_SIZE * URBAN_RADIAL_KERN_SIZE];$/;"	v	file:
sUrbanTransSpreaderKernel	.\XESCore\DEMAlgs.cpp	/^static float	sUrbanTransSpreaderKernel[URBAN_TRANS_KERN_SIZE * URBAN_TRANS_KERN_SIZE];$/;"	v	file:
sUsedDEM	.\XESCore\GreedyMesh.cpp	/^static		 DEMMask *	sUsedDEM = NULL;$/;"	v	file:
sUtilCmds	.\RenderFarmUI\RF_Main.cpp	/^static	GISTool_RegCmd_t		sUtilCmds[] = {$/;"	v	file:
sUtilCmds	.\XESTools\GISTool.cpp	/^static	GISTool_RegCmd_t		sUtilCmds[] = {$/;"	v	file:
sVectorCmds	.\XESTools\GISTool_VectorCmds.cpp	/^static	GISTool_RegCmd_t		sVectorCmds[] = {$/;"	v	file:
sWest	.\DSF\DSFLib_Print.cpp	/^static	double	sWest = 180.0;$/;"	v	file:
sWidth	.\Env\Persistence.cpp	/^static	int		sWidth = 0;$/;"	v	file:
sWindowClass	.\UI\XWin.win.cpp	/^static TCHAR sWindowClass[] = "XGrinderWindow";$/;"	v	file:
sWindows	.\GUI\GUI_Window.cpp	/^static set<GUI_Window *>	sWindows;$/;"	v	file:
sWindows	.\UI\XWin.win.cpp	/^map<HWND, XWin *>	sWindows;$/;"	v
sWindows	.\XPTools\ViewObj.cpp	/^static	set<XObjWin *>	sWindows;$/;"	v	file:
sWizard	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^static	XPWidgetID		sWizard = NULL;$/;"	v	file:
sWizardParams	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^static RF_WizardParams	sWizardParams = { 0 };$/;"	v	file:
sZoomLoad	.\RenderFarmUI\RF_MapView.cpp	/^static	int			sZoomLoad = 1;$/;"	v	file:
s_	.\XESCore\DEMTables.cpp	/^	const set_type&	s_;$/;"	m	struct:float_between_iterator	file:
s_changed	.\WEDNetwork\WED_Server.h	/^						s_changed    ,$/;"	e	enum:WED_Server::server_msg_kind
s_crop	.\RawImport\ShapeIO.cpp	/^static double s_crop[4] = { -180.0, -90.0, 180.0, 90.0 };$/;"	v	file:
s_error	.\WEDNetwork\WED_Server.h	/^						s_error   = 0,$/;"	e	enum:WED_Server::server_msg_kind
s_flow_names	.\WEDCore\WED_Validate.cpp	/^static set<string>	s_flow_names;$/;"	v	file:
s_icao	.\WEDCore\WED_Validate.cpp	/^static set<string>	s_icao;$/;"	v	file:
s_legal_rwy_oneway	.\WEDCore\WED_Validate.cpp	/^static set<int>		s_legal_rwy_oneway;$/;"	v	file:
s_legal_rwy_twoway	.\WEDCore\WED_Validate.cpp	/^static set<int>		s_legal_rwy_twoway;$/;"	v	file:
s_newdata	.\WEDNetwork\WED_Server.h	/^						s_newdata    ,$/;"	e	enum:WED_Server::server_msg_kind
s_rescale	.\GUI\GUI_Resources.h	/^	float	s_rescale;$/;"	m	struct:GUI_TexPosition_t
s_started	.\WEDNetwork\WED_Server.h	/^						s_started    ,$/;"	e	enum:WED_Server::server_msg_kind
s_stopped	.\WEDNetwork\WED_Server.h	/^						s_stopped    ,$/;"	e	enum:WED_Server::server_msg_kind
s_used_hel	.\WEDCore\WED_Validate.cpp	/^static set<string>	s_used_hel;$/;"	v	file:
s_used_rwy	.\WEDCore\WED_Validate.cpp	/^static set<string>	s_used_rwy;$/;"	v	file:
sample_kernel_h	.\XESCore\DEMAlgs.cpp	/^static float sample_kernel_h(const DEMGeo& src, int x, int y, float k[], int width)$/;"	f	file:
sample_kernel_v	.\XESCore\DEMAlgs.cpp	/^static float sample_kernel_v(const DEMGeo& src, int x, int y, float k[], int width)$/;"	f	file:
save_BMP	.\XPTools\GetImage.cpp	/^	save_BMP = 0,$/;"	e	enum:__anon142	file:
save_OBJ7	.\XPTools\ConvertObj.cpp	/^	save_OBJ7,$/;"	e	enum:__anon138	file:
save_OBJ8	.\XPTools\ConvertObj.cpp	/^	save_OBJ8$/;"	e	enum:__anon138	file:
save_PNG	.\XPTools\GetImage.cpp	/^	save_PNG = 1$/;"	e	enum:__anon142	file:
saved_comment	.\WEDImportExport\WED_GatewayExport.cpp	/^static string saved_comment;$/;"	v	file:
saved_passwd	.\WEDImportExport\WED_GatewayExport.cpp	/^static string saved_passwd;$/;"	v	file:
saved_uname	.\WEDImportExport\WED_GatewayExport.cpp	/^static string saved_uname;$/;"	v	file:
sb_PartDownButton	.\GUI\GUI_ScrollBar.cpp	/^	sb_PartDownButton,$/;"	e	enum:__anon28	file:
sb_PartDownPage	.\GUI\GUI_ScrollBar.cpp	/^	sb_PartDownPage,$/;"	e	enum:__anon28	file:
sb_PartNone	.\GUI\GUI_ScrollBar.cpp	/^	sb_PartNone,$/;"	e	enum:__anon28	file:
sb_PartThumb	.\GUI\GUI_ScrollBar.cpp	/^	sb_PartThumb,$/;"	e	enum:__anon28	file:
sb_PartUpButton	.\GUI\GUI_ScrollBar.cpp	/^	sb_PartUpButton$/;"	e	enum:__anon28	file:
sb_PartUpPage	.\GUI\GUI_ScrollBar.cpp	/^	sb_PartUpPage,$/;"	e	enum:__anon28	file:
scale	.\DSF\DSFDefs.h	/^	float		scale ;$/;"	m	struct:DSFRasterHeader_t
scale	.\Env\Persistence.h	/^	short		scale;$/;"	m	struct:VertexInfo
scale	.\RenderFarmUI\RF_Export.cpp	/^	float		scale;$/;"	m	struct:RF_ExportState_t	file:
scale	.\RenderFarmUI\RF_Import.cpp	/^	float		scale;$/;"	m	struct:RF_ImportState_t	file:
scale_h	.\OneOffs\gen_roads.cpp	/^	float			scale_h;	\/\/ size of tex horizonal in pixels$/;"	m	struct:tex_info	file:
scale_v	.\OneOffs\gen_roads.cpp	/^	float			scale_v;	\/\/ meters for whole tex vert$/;"	m	struct:tex_info	file:
scale_vert	.\Obj\XObjWriteEmbedded.cpp	/^	float			scale_vert;		\/\/ scale for XYZ$/;"	m	struct:embed_props_t	file:
scan_bitfields	.\XESCore\AptIO.cpp	/^int scan_bitfields(const char * str, const char * bits[], int all_value, char separator='|')$/;"	f
scan_enum	.\XESCore\AptIO.cpp	/^int scan_enum(const char * str, const char * enums[])$/;"	f
scan_file_exists	.\WEDCore\WED_Package.cpp	/^static bool	scan_file_exists(const char * name, bool dir, unsigned long long mod, void * ref)$/;"	f	file:
scan_folder_exists	.\WEDCore\WED_Package.cpp	/^static bool	scan_folder_exists(const char * name, bool dir, unsigned long long mod, void * ref)$/;"	f	file:
sceneryId	.\WEDImportExport\WED_VerTable.h	/^	int sceneryId;$/;"	m	struct:VerInfo_t
scenery_id	.\WEDEntities\WED_Airport.h	/^	WED_PropIntText				scenery_id;$/;"	m	class:WED_Airport
schedule	.\Utils\UTL_interval.h	/^	vector<T>		schedule;			\/\/ Sorted vector of start, end, start, end)$/;"	m	class:UTL_interval
score_for_junction	.\XESCore\NetAlgs.cpp	/^int score_for_junction(Pmwx::Vertex_handle v)$/;"	f
scriptLog	.\Installer\InstallerScript.cpp	/^static FILE * scriptLog = NULL;$/;"	v	file:
script_to_utf32	.\GUI\GUI_Unicode.cpp	/^UTF32 script_to_utf32(int c)$/;"	f
sdir_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	sdir_min;	float	sdir_max;$/;"	m	struct:RF_WizardParams	file:
sdir_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	sdir_min;	float	sdir_max;$/;"	m	struct:RF_WizardParams	file:
sdts_BadForeignKey	.\SDTS\SDTSReadTVP.h	/^	sdts_BadForeignKey,$/;"	e	enum:SDTSErrorType
sdts_BadLink	.\SDTS\SDTSReadTVP.h	/^	sdts_BadLink,$/;"	e	enum:SDTSErrorType
sdts_BadRecordFile	.\SDTS\SDTSReadTVP.h	/^	sdts_BadRecordFile,$/;"	e	enum:SDTSErrorType
sdts_BadSpatialID	.\SDTS\SDTSReadTVP.h	/^	sdts_BadSpatialID,$/;"	e	enum:SDTSErrorType
sdts_LogicError	.\SDTS\SDTSReadTVP.h	/^	sdts_LogicError$/;"	e	enum:SDTSErrorType
sdts_MissingInfo	.\SDTS\SDTSReadTVP.h	/^	sdts_MissingInfo,$/;"	e	enum:SDTSErrorType
sdts_Ok	.\SDTS\SDTSReadTVP.h	/^	sdts_Ok = 0,$/;"	e	enum:SDTSErrorType
sdts_WrongRecordType	.\SDTS\SDTSReadTVP.h	/^	sdts_WrongRecordType,$/;"	e	enum:SDTSErrorType
sea	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_Sealane * sea;	$/;"	m	struct:preview_sealane	file:
sea_buoys	.\WEDMap\WED_CreateLineTool.h	/^		WED_PropBoolText			sea_buoys;$/;"	m	class:WED_CreateLineTool
sealanes	.\XESCore\AptDefs.h	/^	AptSealaneVector	sealanes;$/;"	m	struct:AptInfo_t
search	.\Utils\point_index.h	/^void		spatial_index_2<Traits>::search(const typename Traits::Circle_2& where, Visitor& visitor)$/;"	f	class:spatial_index_2
search_dist	.\XESCore\NetTables.h	/^	float		search_dist;$/;"	m	struct:BridgeInfo
search_nearest	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::search_nearest(double lon, double lat) const$/;"	f	class:DEMGeo
sec_girdr_side	.\OneOffs\gen_roads.cpp	/^void sec_girdr_side() 	{ 	make_blade(681,810,-2,9,&secondary);  }$/;"	f
sec_girdr_space	.\OneOffs\gen_roads.cpp	/^void sec_girdr_space() { 	pylons_start("secondary_pylon.obj", 0.5, 0, 60, 0, 0);$/;"	f
sec_girdr_start	.\OneOffs\gen_roads.cpp	/^void sec_girdr_start() { 	pylons_start("secondary_pylon.obj", 0.0, -1.3, 60, 0, 0);$/;"	f
sec_grd_b	.\OneOffs\gen_roads.cpp	/^void sec_grd_b(int p) { sec_grd_e(0); sec_girdr_space(); sec_grd_s(0); }$/;"	f
sec_grd_e	.\OneOffs\gen_roads.cpp	/^void sec_grd_e(int p) { sec_girdr_side(); end_composite(); underside_end(); if (p) {end_composite(); pylons_end(); pylons_end(); } }$/;"	f
sec_grd_s	.\OneOffs\gen_roads.cpp	/^void sec_grd_s(int p) { if(p) { sec_girdr_start(); start_composite(); } sec_underside_start(-0.5); start_composite(); sec_girdr_side(); }$/;"	f
sec_overpass_side	.\OneOffs\gen_roads.cpp	/^void sec_overpass_side(){	make_blade(556,545,0.5,-1.5,&secondary); }$/;"	f
sec_ovr_e	.\OneOffs\gen_roads.cpp	/^void sec_ovr_e(int p) { sec_overpass_side(); end_composite(); underside_end(); if (p) pylons_end(); pylons_end(); }$/;"	f
sec_ovr_s	.\OneOffs\gen_roads.cpp	/^void sec_ovr_s(int p) { if (p) sec_pylon2_start(); else sec_pylon1_start(); sec_underside_start(-1.0); start_composite(); sec_overpass_side(); }$/;"	f
sec_prim_L	.\OneOffs\gen_roads.cpp	/^void sec_prim_L()		{	make_deck(175,229, &secondary, "asphalt");$/;"	f
sec_prim_L_s	.\OneOffs\gen_roads.cpp	/^void sec_prim_L_s()		{	make_deck(154,250, &secondary, "asphalt");$/;"	f
sec_prim_R	.\OneOffs\gen_roads.cpp	/^void sec_prim_R()		{	make_deck(175,229, &secondary, "asphalt");$/;"	f
sec_prim_R_s	.\OneOffs\gen_roads.cpp	/^void sec_prim_R_s()		{	make_deck(154,250, &secondary, "asphalt");$/;"	f
sec_prim_tr	.\OneOffs\gen_roads.cpp	/^void sec_prim_tr(int r)	{	make_deck(569,640, &secondary, "gravel");$/;"	f
sec_prim_undiv	.\OneOffs\gen_roads.cpp	/^void sec_prim_undiv()	{	make_deck(23,131, &secondary, "asphalt");$/;"	f
sec_prim_undiv_s	.\OneOffs\gen_roads.cpp	/^void sec_prim_undiv_s()	{	make_deck( 2,151, &secondary, "asphalt");$/;"	f
sec_pylon1_start	.\OneOffs\gen_roads.cpp	/^void sec_pylon1_start() { pylons_start("highway_pylon.obj", 0.5, 0, 120, 60, 0); }$/;"	f
sec_pylon2_start	.\OneOffs\gen_roads.cpp	/^void sec_pylon2_start() { 	pylons_start("highway_pylon.obj", 0.20, 0, 120, 60, 0);$/;"	f
sec_reg_e	.\OneOffs\gen_roads.cpp	/^void sec_reg_e(void) { end_composite(); }$/;"	f
sec_reg_s	.\OneOffs\gen_roads.cpp	/^void sec_reg_s(void) { start_composite(); }$/;"	f
sec_sec	.\OneOffs\gen_roads.cpp	/^void sec_sec()			{	make_deck(358,416, &secondary, "asphalt");$/;"	f
sec_sec_p	.\OneOffs\gen_roads.cpp	/^void sec_sec_p()		{	make_deck(419,477, &secondary, "asphalt");$/;"	f
sec_sec_s	.\OneOffs\gen_roads.cpp	/^void sec_sec_s()		{	make_deck(253,356, &secondary, "asphalt");$/;"	f
sec_space	.\OneOffs\gen_roads.cpp	/^void sec_space()		{	make_spacer(2.6); }$/;"	f
sec_start	.\OneOffs\gen_roads.cpp	/^void sec_start(int b, int n, const char * na) { road_start(b, 0, n,na,&secondary,3); }$/;"	f
sec_stn_e	.\OneOffs\gen_roads.cpp	/^void sec_stn_e(int p) { sec_stone_side(); end_composite(); underside_end(); pylons_end(); }$/;"	f
sec_stn_s	.\OneOffs\gen_roads.cpp	/^void sec_stn_s(int p) { sec_stone_start(); sec_underside_start(-1.5); start_composite(); sec_stone_side(); }$/;"	f
sec_stone_side	.\OneOffs\gen_roads.cpp	/^void sec_stone_side()	{	make_blade(929,1021,-10.5,1.5,&secondary); }$/;"	f
sec_stone_start	.\OneOffs\gen_roads.cpp	/^void sec_stone_start() { 	pylons_start("secondary_oldpylon.obj", 0.5, 0, 30, 0, 0); }$/;"	f
sec_underside_start	.\OneOffs\gen_roads.cpp	/^void sec_underside_start(float y)	{ underside_start(481,528,y,&secondary); }$/;"	f
second_on	.\Utils\RLERegion.cpp	/^	bool second_on(void) { return r2_ < run2_->size() && (r2_ % 2); }$/;"	f	class:RLERegionDualScanner
secondary	.\OneOffs\gen_roads.cpp	/^tex_info	secondary= { "secondary.dds", "secondary_LIT.dds", 2, 2, 30, 8.5, 1024 ,{0.5,0.5,0.5}};$/;"	v
security_code	.\XESCore\DEMIO.cpp	/^	char			security_code[3];			\/\/ Securtity code, might be 'U  ' one of S=Secret,C=Confidential,U=Unclassified,R=Restricted$/;"	m	struct:DTED_UHL_t	file:
seekoff	.\Utils\MemIStreamBuf.h	/^	pos_type seekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)$/;"	f	class:std::basic_memstreambuf
seekpos	.\Utils\MemIStreamBuf.h	/^	pos_type seekpos(pos_type sp, ios_base::openmode which)$/;"	f	class:std::basic_memstreambuf
seg_t	.\OneOffs\shape2xon.cpp	/^struct	seg_t {$/;"	s	file:
segment_crosses_y_within	.\XESCore\BlockFill.cpp	/^inline bool segment_crosses_y_within(const Segment2& s, double y, double x_min, double x_max)$/;"	f
segments	.\OneOffs\gen_roads10.h	/^	vector<road_segment>		segments;$/;"	m	class:road
segs	.\XPTools\Env2DSF.cpp	/^	set<int>	segs;$/;"	m	struct:NetworkNode_t	file:
selCmd_Divider1	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_Divider1,$/;"	e	enum:__anon55	file:
selCmd_FirstLOD	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_FirstLOD,$/;"	e	enum:__anon55	file:
selCmd_LastLOD	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_LastLOD$/;"	e	enum:__anon55	file:
selCmd_NextLOD	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_NextLOD,$/;"	e	enum:__anon55	file:
selCmd_PrevLOD	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_PrevLOD,$/;"	e	enum:__anon55	file:
selCmd_SelectAll	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectAll,$/;"	e	enum:__anon55	file:
selCmd_SelectFirst	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectFirst,$/;"	e	enum:__anon55	file:
selCmd_SelectLast	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectLast,$/;"	e	enum:__anon55	file:
selCmd_SelectNext	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectNext,$/;"	e	enum:__anon55	file:
selCmd_SelectNextUntextured	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectNextUntextured,$/;"	e	enum:__anon55	file:
selCmd_SelectNone	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectNone,$/;"	e	enum:__anon55	file:
selCmd_SelectPrev	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectPrev,$/;"	e	enum:__anon55	file:
selCmd_SelectPrevUntextured	.\ObjEdit\OE_SelCmds.cpp	/^	selCmd_SelectPrevUntextured,$/;"	e	enum:__anon55	file:
sel_end	.\OGLE\ogle.cpp	/^	int						sel_end;$/;"	m	struct:OGLE_Rec	file:
sel_group	.\AC3DPlugins\obj_editor.cpp	/^	sel_group = 3,$/;"	e	enum:__anon1	file:
sel_if_has	.\AC3DPlugins\obj_anim.cpp	/^static void sel_if_has(ACObject * who, const char *dref)$/;"	f	file:
sel_if_light	.\AC3DPlugins\obj_tools.cpp	/^static void sel_if_light(ACObject * who)$/;"	f	file:
sel_light	.\AC3DPlugins\obj_editor.cpp	/^	sel_light = 1,$/;"	e	enum:__anon1	file:
sel_multi	.\AC3DPlugins\obj_editor.cpp	/^	sel_multi = 4,$/;"	e	enum:__anon1	file:
sel_none	.\AC3DPlugins\obj_editor.cpp	/^	sel_none = 0,$/;"	e	enum:__anon1	file:
sel_obj	.\AC3DPlugins\obj_editor.cpp	/^	sel_obj = 2,$/;"	e	enum:__anon1	file:
sel_start	.\OGLE\ogle.cpp	/^	int						sel_start;$/;"	m	struct:OGLE_Rec	file:
sel_unknown	.\AC3DPlugins\obj_editor.cpp	/^	sel_unknown = 5$/;"	e	enum:__anon1	file:
select_all_anim	.\AC3DPlugins\obj_anim.cpp	/^static void select_all_anim(void)$/;"	f	file:
select_zero_recursive	.\WEDWindows\WED_GroupCommands.cpp	/^void select_zero_recursive(WED_Thing * t, ISelection * s)$/;"	f
selected_conversions	.\XPTools\XGrinderShell.cpp	/^static map<string,conversion_info *>	selected_conversions;$/;"	v	file:
selection	.\ObjEdit\OE_DataModel.cpp	/^	set<int>		selection;$/;"	m	struct:UndoState_t	file:
self	.\OneOffs\gen_roads10.h	/^		base *		self;$/;"	m	struct:road_map::range_ref
self	.\Utils\STLUtils.h	/^	typedef const_sequence_for_container<T>	self;$/;"	t	struct:const_sequence_for_container
self	.\Utils\STLUtils.h	/^	typedef filtered_seq<S,F>		self;$/;"	t	struct:filtered_seq
self	.\Utils\STLUtils.h	/^	typedef sequence_for_container<T>	self;$/;"	t	struct:sequence_for_container
self	.\Utils\STLUtils.h	/^	typedef split_seq<S,F,N>		self;$/;"	t	struct:split_seq
self	.\Utils\UTL_interval.h	/^	typedef const_iterator						self;$/;"	t	class:UTL_interval::const_iterator
self	.\XESCore\BezierApprox.cpp	/^	possible_approx_q::iterator	self;$/;"	m	struct:possible_approx_t	file:
self	.\XESCore\BlockFill.cpp	/^	typename multimap<double,self_type *>::iterator				self;$/;"	m	struct:ring_node	file:
self	.\XESCore\MeshDefs.h	/^	FaceQueue::iterator	self;					\/\/ Queue ref to self!$/;"	m	struct:MeshFaceInfo
self	.\XESCore\MeshDefs.h	/^	VertexQueue::iterator	self;$/;"	m	struct:MeshVertexInfo
self	.\XESCore\TriFan.h	/^	TriFanQueue::iterator			self;		\/\/ Each tri fan has a link back to itself in the queue$/;"	m	struct:TriFan_t
self	.\XESCore\Zoning.cpp	/^	EdgeQ::iterator	self;$/;"	m	struct:EdgeNode_t	file:
self_intersect	.\Utils\CompGeomDefs2.h	/^inline bool	Bezier2::self_intersect(int d) const$/;"	f	class:Bezier2
self_intersect_recursive	.\Utils\CompGeomDefs2.h	/^inline bool Bezier2::self_intersect_recursive(const Bezier2& rhs, int d) const$/;"	f	class:Bezier2
self_ref	.\Utils\Skeleton.cpp	/^	EventMap::iterator	self_ref;$/;"	m	struct:SK_Event	file:
self_type	.\XESCore\BlockFill.cpp	/^	typedef ring_node<__InputIterator>							self_type;$/;"	t	struct:ring_node	file:
sem_glyph_color_mismatch	.\WEDCore\WED_Sign_Parser.h	/^	sem_glyph_color_mismatch,\/\/Found under check_color$/;"	e	enum:parser_error_t
sem_mutiple_side_switches	.\WEDCore\WED_Sign_Parser.h	/^	sem_mutiple_side_switches,\/\/Found under I_ANY_CONTROL:case '@':$/;"	e	enum:parser_error_t
sem_no_color	.\WEDCore\WED_Sign_Parser.h	/^	sem_no_color,\/\/Found under preform_final_semantic_checks$/;"	e	enum:parser_error_t
sem_not_real_instruction	.\WEDCore\WED_Sign_Parser.h	/^	sem_not_real_instruction,\/\/Found under I_ANY_CONTROL$/;"	e	enum:parser_error_t
sem_not_real_multiglyph	.\WEDCore\WED_Sign_Parser.h	/^	sem_not_real_multiglyph,\/\/Found under check_multi_glyph$/;"	e	enum:parser_error_t
sem_not_real_singleglyph	.\WEDCore\WED_Sign_Parser.h	/^	sem_not_real_singleglyph,\/\/Foudn nder check_single_glyph$/;"	e	enum:parser_error_t
sem_pipe_begins_sign	.\WEDCore\WED_Sign_Parser.h	/^	sem_pipe_begins_sign,$/;"	e	enum:parser_error_t
sem_pipe_color_mismatch	.\WEDCore\WED_Sign_Parser.h	/^	sem_pipe_color_mismatch,\/\/\/YF|\/\/RD from {@Y,F}|{@R,D}$/;"	e	enum:parser_error_t
sem_pipe_double_juxed	.\WEDCore\WED_Sign_Parser.h	/^	sem_pipe_double_juxed, \/\/||$/;"	e	enum:parser_error_t
sem_pipe_ends_sign	.\WEDCore\WED_Sign_Parser.h	/^	sem_pipe_ends_sign,$/;"	e	enum:parser_error_t
semi_l	.\XESCore\NetTables.h	/^	float		semi_l;$/;"	m	struct:NetRepInfo
semi_r	.\XESCore\NetTables.h	/^	float		semi_r;$/;"	m	struct:NetRepInfo
seq_concat	.\XESCore\BezierApprox.cpp	/^	seq_concat(const S1& is1, const S2& is2) : s1(is1), s2(is2) { }$/;"	f	struct:seq_concat
seq_concat	.\XESCore\BezierApprox.cpp	/^struct seq_concat {$/;"	s	file:
seq_for_container	.\XESCore\BezierApprox.cpp	/^	seq_for_container(Iter b, Iter e) : begin(b), end(e) { }$/;"	f	struct:seq_for_container
seq_for_container	.\XESCore\BezierApprox.cpp	/^struct seq_for_container {$/;"	s	file:
sequence_for_container	.\Utils\STLUtils.h	/^	sequence_for_container(T& c) : begin(c.begin()), end(c.end()) { }$/;"	f	struct:sequence_for_container
sequence_for_container	.\Utils\STLUtils.h	/^struct sequence_for_container {$/;"	s
sequence_push_back	.\Utils\STLUtils.h	/^void sequence_push_back(T& container, S& seq)$/;"	f
server_msg_kind	.\WEDNetwork\WED_Server.h	/^				enum	server_msg_kind {$/;"	g	class:WED_Server
set	.\AC3DPlugins\tcl_utils.cpp	/^void	TCL_linked_vard::set(double value)$/;"	f	class:TCL_linked_vard
set	.\AC3DPlugins\tcl_utils.cpp	/^void	TCL_linked_vardv::set(int n, double value)$/;"	f	class:TCL_linked_vardv
set	.\AC3DPlugins\tcl_utils.cpp	/^void	TCL_linked_vari::set(int value)$/;"	f	class:TCL_linked_vari
set	.\AC3DPlugins\tcl_utils.cpp	/^void	TCL_linked_variv::set(int n, int value)$/;"	f	class:TCL_linked_variv
set	.\AC3DPlugins\tcl_utils.cpp	/^void	TCL_linked_vars::set(const char * value)$/;"	f	class:TCL_linked_vars
set	.\AC3DPlugins\tcl_utils.cpp	/^void	TCL_linked_varsv::set(int n, const char * value)$/;"	f	class:TCL_linked_varsv
set	.\Obj\ObjPointPool.cpp	/^void	ObjPointPool::set(int n, float pt[])$/;"	f	class:ObjPointPool
set	.\XESCore\DEMDefs.h	/^inline void	DEMGeo::set(int x, int y, float v)$/;"	f	class:DEMGeo
set	.\XESCore\DEMDefs.h	/^inline void	DEMMask::set(int x, int y, bool v)$/;"	f	class:DEMMask
setComment	.\lib_json\src\lib_json\json_value.cpp	/^Value::CommentInfo::setComment( const char *text )$/;"	f	class:Json::Value::CommentInfo
setComment	.\lib_json\src\lib_json\json_value.cpp	/^Value::setComment( const char *comment,$/;"	f	class:Json::Value
setComment	.\lib_json\src\lib_json\json_value.cpp	/^Value::setComment( const std::string &comment,$/;"	f	class:Json::Value
setIdentityMatrix	.\Utils\MatrixUtils.cpp	/^void	setIdentityMatrix(GLdouble m[16])$/;"	f
setItemUsed	.\lib_json\include\json\value.h	/^      inline void setItemUsed( bool isUsed = true )$/;"	f	class:Json::Value
setMemberNameIsStatic	.\lib_json\include\json\value.h	/^      inline void setMemberNameIsStatic( bool isStatic )$/;"	f	class:Json::Value
setTestName	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestResult::setTestName( const std::string &name )$/;"	f	class:JsonTest::TestResult
set_anim_enable	.\AC3DPlugins\obj_anim.cpp	/^static void set_anim_enable(float n)$/;"	f	file:
set_anim_for_sel_keyframe	.\AC3DPlugins\obj_anim.cpp	/^static void set_anim_for_sel_keyframe(int argc, char * argv[])$/;"	f	file:
set_anim_now	.\AC3DPlugins\obj_anim.cpp	/^static void set_anim_now(int argc, char * argv[])$/;"	f	file:
set_center_at	.\OneOffs\gen_roads10.h	/^	void	set_center_at(float x)$/;"	f	class:road
set_center_at_center	.\OneOffs\gen_roads10.h	/^	void	set_center_at_center(void)$/;"	f	class:road
set_edge_feature	.\XESCore\MeshDefs.h	/^	inline	void set_edge_feature(int e, bool val) { if (val) edge_flags[e] |= flag_Feature; else edge_flags[e] &= ~flag_Feature; }$/;"	f	struct:MeshFaceInfo
set_erase_iterator	.\Utils\STLUtils.h	/^	explicit set_erase_iterator(Container& x) : container(&x) { }$/;"	f	class:set_erase_iterator
set_erase_iterator	.\Utils\STLUtils.h	/^class set_erase_iterator$/;"	c
set_eraser	.\Utils\STLUtils.h	/^template <class Container>	inline set_erase_iterator<Container> set_eraser(Container& x) { return set_erase_iterator<Container>(x); }$/;"	f
set_extent	.\Utils\QuadTree.h	/^void	QuadTree<__T, __N>::set_extent(const KeyType& e)$/;"	f	class:QuadTree
set_filter	.\WEDImportExport\WED_DSFExport.cpp	/^	void set_filter(int x) { cur_filter = x; }$/;"	f	struct:DSF_ResourceTable
set_first	.\XESCore\BlockFill.cpp	/^template <typename P>	void set_first(P& p, typename P::first_type v) {	p.first = v; }$/;"	f
set_forward	.\XESCore\NetHelpers.h	/^inline void set_forward(list<Pmwx::Halfedge_handle>& flow)$/;"	f
set_he_level_at	.\XESCore\NetHelpers.h	/^inline void set_he_level_at(Pmwx::Halfedge_handle he, Pmwx::Vertex_handle v, double h)$/;"	f
set_he_rep_type	.\XESCore\NetHelpers.h	/^inline void set_he_rep_type(Pmwx::Halfedge_handle he, int t)$/;"	f
set_initialized	.\XESCore\MeshConformer.h	/^  void set_initialized(Initialization init) { initialized = init; }$/;"	f	class:CGAL::Triangulation_conformer_any_2
set_insert_iterator	.\Utils\STLUtils.h	/^	explicit set_insert_iterator(Container& x) : container(&x) { }$/;"	f	class:set_insert_iterator
set_insert_iterator	.\Utils\STLUtils.h	/^class set_insert_iterator$/;"	c
set_inserter	.\Utils\STLUtils.h	/^template <class Container>	inline set_insert_iterator<Container> set_inserter(Container& x) { return set_insert_iterator<Container>(x); }$/;"	f
set_left_leaf	.\Utils\RTree2.h	/^		void		set_left_leaf(leaf * l) { left_l = _set_lsb(l); }$/;"	f	struct:RTree2::node
set_left_node	.\Utils\RTree2.h	/^		void		set_left_node(node * n) { left_n = n; }$/;"	f	struct:RTree2::node
set_list_invis	.\AC3DPlugins\obj_anim.cpp	/^static void set_list_invis(float n)$/;"	f	file:
set_params	.\Utils\SQLUtils.h	/^	void set_params(const B& params)$/;"	f	class:sql_command
set_pt	.\XESCore\DEMGrid.cpp	/^void	DEMGrid::set_pt(int x, int y, const Point_2& p, int rank)$/;"	f	class:DEMGrid
set_rect	.\Utils\RLERegion.cpp	/^void	RLERegion::set_rect(int x1, int y1, int x2, int y2)$/;"	f	class:RLERegion
set_reverse	.\XESCore\NetHelpers.h	/^inline void set_reverse(list<Pmwx::Halfedge_handle>& flow)$/;"	f
set_rez	.\XESCore\DEMDefs.cpp	/^void DEMGeo::set_rez(double x_res, double y_res)$/;"	f	class:DEMGeo
set_right_leaf	.\Utils\RTree2.h	/^		void		set_right_leaf(leaf * r) { right_l = _set_lsb(r); }$/;"	f	struct:RTree2::node
set_right_node	.\Utils\RTree2.h	/^		void		set_right_node(node * n) { right_n = n; }$/;"	f	struct:RTree2::node
set_rows	.\Utils\RLERegion.cpp	/^	void set_rows(int y1, int y2) {$/;"	f	class:RLERegionDualScanner
set_second	.\XESCore\BlockFill.cpp	/^template <typename P>	void set_second(P& p, typename P::second_type v){ p.second = v;}$/;"	f
set_sel_now	.\AC3DPlugins\obj_anim.cpp	/^static void set_sel_now(int argc, char * argv[])$/;"	f	file:
set_shader_width	.\OneOffs\gen_roads10.h	/^static void set_shader_width(FILE * fi, shader * s)$/;"	f
set_slot	.\VPF\VPFImport.cpp	/^	void set_slot(WTPM_Line::EdgePair * islot) { slot = islot; }$/;"	f	class:RememberHalfedge
set_std_panel	.\AC3DPlugins\obj_panel.cpp	/^void	set_std_panel(void)$/;"	f
set_tile	.\OneOffs\gen_roads10.h	/^	void set_tile(int tx, int ty, float bx, float by, float wx, float wy) $/;"	f	class:shader
set_type	.\XESCore\DEMTables.cpp	/^	typedef set<float>					set_type;$/;"	t	struct:float_between_iterator	file:
set_union_length	.\Utils\STLUtils.h	/^size_t set_union_length(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f
set_union_length	.\Utils\STLUtils.h	/^size_t set_union_length(const set<T>& s1, const set<T>& s2)$/;"	f
set_val	.\Interfaces\IPropertyObject.h	/^	set<int>	set_val;$/;"	m	struct:PropertyVal_t
setd	.\WEDCore\WED_Properties.cpp	/^void	WED_Properties::setd(const char * key, double		 v)$/;"	f	class:WED_Properties
seti	.\WEDCore\WED_Properties.cpp	/^void	WED_Properties::seti(const char * key, int			 v)$/;"	f	class:WED_Properties
setjmp_err_mgr	.\Utils\BitmapUtils.cpp	/^} setjmp_err_mgr;$/;"	t	typeref:struct:__anon88	file:
setjmp_err_ptr	.\Utils\BitmapUtils.cpp	/^typedef setjmp_err_mgr *	setjmp_err_ptr;$/;"	t	file:
sets	.\WEDCore\WED_Properties.cpp	/^void	WED_Properties::sets(const char * key, const string& v)$/;"	f	class:WED_Properties
setsize	.\DSF\tri_stripper_101\graph_array.h	/^inline void graph_array<nodetype, arctype>::setsize(const size_t NbNodes) {$/;"	f	class:common_structures::graph_array
setting	.\AC3DPlugins\tcl_utils.h	/^	int				setting;$/;"	m	class:TCL_linked_vard
setting	.\AC3DPlugins\tcl_utils.h	/^	int				setting;$/;"	m	class:TCL_linked_vari
setting	.\AC3DPlugins\tcl_utils.h	/^	int				setting;$/;"	m	class:TCL_linked_vars
setup_approx	.\XESCore\BezierApprox.cpp	/^void setup_approx(approx_t * l, approx_t * r, possible_approx_t * who, possible_approx_q * q, double err_lim)$/;"	f
setup_baseline_ogl	.\XPTools\ViewObj.cpp	/^static void setup_baseline_ogl(int hidden_geo)$/;"	f	file:
setup_lights	.\XPTools\ViewObj.cpp	/^static void setup_lights(bool inLighting, bool inLit, bool inShowCulled)$/;"	f	file:
setup_obj_anim	.\AC3DPlugins\obj_anim.cpp	/^void setup_obj_anim(void)$/;"	f
setup_pol_texture	.\WEDMap\WED_PreviewLayer.cpp	/^static bool setup_pol_texture(ITexMgr * tman, pol_info_t& pol, double heading, bool no_proj, const Point2& centroid, GUI_GraphState * g, WED_MapZoomerNew * z, float alpha)$/;"	f	file:
setup_signalhandlers	.\linuxinit\initializer.cpp	/^void Initializer::setup_signalhandlers()$/;"	f	class:Initializer
setup_taxi_texture	.\WEDMap\WED_PreviewLayer.cpp	/^static bool setup_taxi_texture(int surface_code, double heading, const Point2& centroid, GUI_GraphState * g, WED_MapZoomerNew * z, float alpha)$/;"	f	file:
setup_textures	.\XPTools\ViewObj.cpp	/^static void setup_textures(const string& in_tex, const string& in_lit, const string& tex_drp, bool inLit, bool inSolid, ObjViewInfo_t& info)$/;"	f	file:
sfile	.\OneOffs\osm2shape.c	/^static SHPHandle sfile = NULL;$/;"	v	file:
sh_dry	.\XESCore\DEMAlgs.cpp	/^	float	sh_dry;	\/\/ meters$/;"	m	struct:SnowLineInfo_t	file:
sh_wet	.\XESCore\DEMAlgs.cpp	/^	float	sh_wet;$/;"	m	struct:SnowLineInfo_t	file:
shad	.\OneOffs\gen_roads10.h	/^	shader *		shad;$/;"	m	struct:road_segment
shader	.\OneOffs\gen_roads10.h	/^	shader(const char * tex_name, int poly_os, int w) : width(w), tex(tex_name), os(poly_os), $/;"	f	class:shader
shader	.\OneOffs\gen_roads10.h	/^class	shader {$/;"	c
shader	.\XESCore\DEMTables.h	/^	shader_t		shader;$/;"	m	struct:NaturalTerrainInfo_t
shader_composite	.\XESCore\DEMTables.h	/^	shader_composite$/;"	e	enum:shader_t
shader_heading	.\XESCore\DEMTables.h	/^	shader_heading,$/;"	e	enum:shader_t
shader_normal	.\XESCore\DEMTables.h	/^	shader_normal,$/;"	e	enum:shader_t
shader_slope	.\XESCore\DEMTables.h	/^	shader_slope,$/;"	e	enum:shader_t
shader_slope2	.\XESCore\DEMTables.h	/^	shader_slope2,$/;"	e	enum:shader_t
shader_t	.\XESCore\DEMTables.h	/^enum shader_t {$/;"	g
shader_tile	.\XESCore\DEMTables.h	/^	shader_tile,$/;"	e	enum:shader_t
shader_vary	.\XESCore\DEMTables.h	/^	shader_vary,$/;"	e	enum:shader_t
shape	.\XESCore\AptDefs.h	/^	vector<Point2>				shape;$/;"	m	struct:AptRouteEdge_t
shape	.\XESCore\NetPlacement.h	/^	vector<Point2>					shape;						\/\/ Intermediate shaping pts - 3d loc and$/;"	m	struct:Net_ChainInfo_t
shape	.\XESCore\WTPM.h	/^	vector<Point2>			shape;$/;"	m	struct:WTPM_Line
shape	.\XPTools\Env2DSF.cpp	/^	vector<unsigned int>		shape;$/;"	m	struct:NetworkSeg_t	file:
shapeCurve	.\XPTools\Env2DSF.cpp	/^	vector<unsigned int>		shapeCurve;$/;"	m	struct:NetworkSeg_t	file:
shapeLat	.\XPTools\Env2DSF.cpp	/^	vector<float>	shapeLat;$/;"	m	struct:NetworkSeg_t	file:
shapeLon	.\XPTools\Env2DSF.cpp	/^	vector<float>	shapeLon;$/;"	m	struct:NetworkSeg_t	file:
shape_import_data	.\RawImport\ShapeIO.cpp	/^	shape_import_data(int p) : feature(p) { }$/;"	f	struct:shape_import_data
shape_import_data	.\RawImport\ShapeIO.cpp	/^struct shape_import_data {$/;"	s	file:
shape_in_bounds	.\RawImport\ShapeIO.cpp	/^bool shape_in_bounds(SHPObject * obj)$/;"	f
shape_lock_traits	.\RawImport\ShapeIO.cpp	/^struct shape_lock_traits {$/;"	s	file:
shape_pattern_t	.\RawImport\ShapeIO.cpp	/^struct shape_pattern_t {$/;"	s	file:
shape_pattern_vector	.\RawImport\ShapeIO.cpp	/^typedef vector<shape_pattern_t> shape_pattern_vector;$/;"	t	file:
shiny	.\Obj\XObjBuilder.h	/^	float		shiny;				float	o_shiny;$/;"	m	class:XObjBuilder
shoulder	.\WEDEntities\WED_Helipad.h	/^	WED_PropIntEnum		shoulder;$/;"	m	class:WED_Helipad
shoulder	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum			shoulder;$/;"	m	class:WED_Runway
shoulder_code	.\XESCore\AptDefs.h	/^	int			shoulder_code;$/;"	m	struct:AptHelipad_t
shoulder_code	.\XESCore\AptDefs.h	/^	int			shoulder_code;$/;"	m	struct:AptPavement_t
shoulder_code	.\XESCore\AptDefs.h	/^	int			shoulder_code;$/;"	m	struct:AptRunway_t
show	.\UI\XPopup.lin.cpp	/^void XPopup::show()$/;"	f	class:XPopup
showEvent	.\GUI\GUI_Application.cpp	/^void GUI_QtMenu::showEvent( QShowEvent * e )$/;"	f	class:GUI_QtMenu
show_hi	.\WEDCore\WED_ResourceMgr.h	/^		int		show_lo,show_hi;$/;"	m	struct:agp_t::obj
show_level	.\OneOffs\gen_roads.cpp	/^	int				show_level;$/;"	m	class:road	file:
show_level	.\OneOffs\gen_roads.cpp	/^	int				show_level;$/;"	m	struct:tex_info	file:
show_level	.\OneOffs\gen_roads10.h	/^	int		show_level;$/;"	m	class:published_road
show_level	.\WEDEntities\WED_FacadePlacement.h	/^	WED_PropIntEnum			show_level;$/;"	m	class:WED_FacadePlacement
show_level	.\WEDEntities\WED_ObjPlacement.h	/^	WED_PropIntEnum			show_level;$/;"	m	class:WED_ObjPlacement
show_level	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			show_level;$/;"	m	class:WED_CreatePointTool
show_level_obj	.\WEDImportExport\WED_DSFExport.cpp	/^	int show_level_obj[7];$/;"	m	struct:DSF_ResourceTable	file:
show_level_pol	.\WEDImportExport\WED_DSFExport.cpp	/^	int show_level_pol[7];$/;"	m	struct:DSF_ResourceTable	file:
show_lo	.\WEDCore\WED_ResourceMgr.h	/^		int		show_lo,show_hi;$/;"	m	struct:agp_t::obj
shp	.\WEDCore\WED_Routing.h	/^	vector<Point2>				shp; \/\/ might be empty.  this is additional "shaping" points.$/;"	m	struct:WED_route_edge_t
shp_ErrCheck	.\RawImport\ShapeIO.h	/^		shp_ErrCheck		= 128			\/\/ Check for overlapping line segments, and fail if we find any.$/;"	e	enum:__anon72
shp_Flags	.\RawImport\ShapeIO.h	/^typedef int shp_Flags;$/;"	t
shp_Mode_Coastline	.\RawImport\ShapeIO.h	/^		shp_Mode_Coastline	= 3,			\/\/ Line shape file, right-side of vectors become param$/;"	e	enum:__anon72
shp_Mode_Feature	.\RawImport\ShapeIO.h	/^		shp_Mode_Feature	= 2,			\/\/ Polygon shape file, params go into the feature field$/;"	e	enum:__anon72
shp_Mode_Landuse	.\RawImport\ShapeIO.h	/^		shp_Mode_Landuse	= 1,			\/\/ Polygon shape file, params go into the land use fields.$/;"	e	enum:__anon72
shp_Mode_Map	.\RawImport\ShapeIO.h	/^		shp_Mode_Map		= 16,			\/\/ Use a map file for features.$/;"	e	enum:__anon72
shp_Mode_Road	.\RawImport\ShapeIO.h	/^		shp_Mode_Road		= 4,			\/\/ Line shape file, lines become roads$/;"	e	enum:__anon72
shp_Mode_Simple	.\RawImport\ShapeIO.h	/^		shp_Mode_Simple		= 8,			\/\/ Use a simple feature desc for features.$/;"	e	enum:__anon72
shp_None	.\RawImport\ShapeIO.h	/^		shp_None			= 0,$/;"	e	enum:__anon72
shp_Overlay	.\RawImport\ShapeIO.h	/^		shp_Overlay			= 64,			\/\/ Do not clear previous data.$/;"	e	enum:__anon72
shp_Use_Crop	.\RawImport\ShapeIO.h	/^		shp_Use_Crop		= 32,			\/\/ Add the crop-box to the import on the fly.$/;"	e	enum:__anon72
side	.\Utils\CompGeomDefs2.h	/^	Segment2	side(int n) const { if (n == (size()-1)) return Segment2(at(n),at(0)); return Segment2(at(n), at(n+1)); }$/;"	f	struct:Polygon2
side	.\Utils\CompGeomDefs3.h	/^	Segment3	side(int n) const { if (n == (size()-1)) return Segment3(at(n),at(0)); return Segment3(at(n), at(n+1)); }$/;"	f	class:Polygon3
side	.\WEDCore\WED_Clipping.cpp	/^	int side;$/;"	m	struct:on_side_of_line_h	file:
side	.\WEDCore\WED_Clipping.cpp	/^	int side;$/;"	m	struct:on_side_of_line_v	file:
side_is_degenerate	.\WEDCore\WED_Clipping.cpp	/^bool side_is_degenerate(const T& s)$/;"	f
side_of	.\OneOffs\shape2xon.cpp	/^	int side_of(const pt_t& p) const$/;"	f	struct:seg_t
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line(const T& thingie, const clipping_line& l)$/;"	f
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line<Bezier2>(const Bezier2& b, const clipping_line& l)$/;"	f
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line<Bezier2p>(const Bezier2p& p, const clipping_line& l)$/;"	f
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line<Point2>(const Point2& p, const clipping_line& l)$/;"	f
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line<Polygon2>(const Polygon2& p, const clipping_line& l)$/;"	f
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line<Segment2>(const Segment2& p, const clipping_line& l)$/;"	f
side_of_clipping_line	.\WEDCore\WED_Clipping.cpp	/^int side_of_clipping_line<Segment2p>(const Segment2p& p, const clipping_line& l)$/;"	f
side_of_line	.\Utils\CompGeomDefs2.h	/^	int		side_of_line(const Point2& p) const { double v = (a * p.x_ + b * p.y_ + c); if (v > 0.0) return LEFT_TURN; if (v < 0.0) return RIGHT_TURN; return COLLINEAR; }$/;"	f	struct:Line2
side_of_line	.\Utils\CompGeomDefs2.h	/^	int		side_of_line(const Point2& p) const { return Vector2(p1, p2).turn_direction(Vector2(p1, p));  }$/;"	f	struct:Segment2
sides_begin	.\Utils\CompGeomDefs2.h	/^	const_side_iterator sides_begin() const { return const_side_iterator(this,0); }$/;"	f	struct:Polygon2
sides_can_merge	.\XESCore\BlockAlgs.cpp	/^bool	sides_can_merge(Pmwx::Halfedge_handle e1, Pmwx::Halfedge_handle e2)$/;"	f
sides_end	.\Utils\CompGeomDefs2.h	/^	const_side_iterator sides_end() const { return const_side_iterator(this,size()); }$/;"	f	struct:Polygon2
sides_max	.\XESCore\Zoning.h	/^	int			sides_min,		sides_max;$/;"	m	struct:ZoningRule_t
sides_min	.\XESCore\Zoning.h	/^	int			sides_min,		sides_max;$/;"	m	struct:ZoningRule_t
sign	.\Utils\MathUtils.h	/^inline double	sign		(const double in															){													return (in<0.0)?-1.0:1.0;}$/;"	f
sign	.\Utils\MathUtils.h	/^inline float	sign		(const float in																){													return (in<0.0f)?-1.0f:1.0f;}$/;"	f
sign	.\Utils\MathUtils.h	/^inline int		sign		(const int in																){													return (in<0   )?-1   :1   ;}$/;"	f
sign_clipboard	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropBoolText		sign_clipboard;$/;"	m	class:WED_CreatePointTool
sign_height	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			sign_height;$/;"	m	class:WED_CreatePointTool
sign_style	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropIntEnum			sign_style;$/;"	m	class:WED_CreatePointTool
sign_text	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropStringText		sign_text;$/;"	m	class:WED_CreatePointTool
signature	.\DSF\DSFDefs.h	/^	char	signature[16];$/;"	m	struct:DSFFooter_t
signature	.\DSF\dsflib_013005\DSFDefs.h	/^	char	signature[16];$/;"	m	struct:DSFFooter_t
signature	.\XPTools\DDSTool.cpp	/^		unsigned int signature;$/;"	m	struct:ATC_Header_Texture_TAG	file:
signature1	.\Utils\BitmapUtils.cpp	/^	char			signature1;$/;"	m	struct:BMPHeader	file:
signature2	.\Utils\BitmapUtils.cpp	/^	char			signature2;$/;"	m	struct:BMPHeader	file:
signed_area	.\Utils\CompGeomDefs2.h	/^	double	signed_area(const Vector2& v) const { return (dx * v.dy - dy * v.dx) * 0.5; }$/;"	f	struct:Vector2
signed_area	.\Utils\CompGeomDefs2.h	/^	double	signed_area(void) const { return Vector2(p1,p2).signed_area(Vector2(p1,p3)); }$/;"	f	struct:Triangle2
signed_area_3d	.\AC3DPlugins\uv_mapper.cpp	/^inline double	signed_area_3d(const cgd::Point3& p0,const cgd::Point3& p1,const cgd::Point3& p2, const cgd::Vector3 positive_dir)$/;"	f
signed_area_pt	.\Utils\CompGeomDefs2.h	/^double signed_area_pt(__Iterator begin, __Iterator end)$/;"	f
signs	.\XESCore\AptDefs.h	/^	AptSignVector		signs;$/;"	m	struct:AptInfo_t
signsqr	.\Utils\MathUtils.h	/^inline float	signsqr		(const float in																){													return (in>=0.0f)?sqr (in):-sqr ( in);}$/;"	f
signsqrt	.\Utils\MathUtils.h	/^inline float	signsqrt	(const float in																){													return (in>=0.0f)?sqrtf(in):-sqrtf(-in);}$/;"	f
signzero	.\Utils\MathUtils.h	/^inline double signzero(const double in){$/;"	f
signzero	.\Utils\MathUtils.h	/^inline float signzero(const float in){$/;"	f
simple_exec	.\Utils\SQLUtils.h	/^	int simple_exec(const B& binding)$/;"	f	class:sql_command
simple_exec	.\Utils\SQLUtils.h	/^	int simple_exec(const B& binding, R& row)$/;"	f	class:sql_command
simple_exec	.\Utils\SQLUtils.h	/^	int simple_exec(void)$/;"	f	class:sql_command
simple_pt_compare	.\XESCore\BlockFill.cpp	/^struct simple_pt_compare {$/;"	s	file:
simple_pt_err	.\XESCore\BlockFill.cpp	/^struct simple_pt_err {$/;"	s	file:
simple_pt_locked	.\XESCore\BlockFill.cpp	/^struct simple_pt_locked {$/;"	s	file:
simple_vertex_error	.\XESCore\MapHelpers.h	/^double arrangement_simplifier<Arr,Traits>::simple_vertex_error(typename Arr::Vertex_handle v, typename Arr::Halfedge_handle * he1, typename Arr::Halfedge_handle * he2)$/;"	f	class:arrangement_simplifier
simplify	.\XESCore\MapHelpers.h	/^void arrangement_simplifier<Arr,Traits>::simplify(Arr& io_block, double max_err, const Traits& tr, ProgressFunc func)$/;"	f	class:arrangement_simplifier
simplify	.\XESCore\MeshSimplify.cpp	/^void MeshSimplify::simplify(double in_max_err)$/;"	f	class:MeshSimplify
simplify_block	.\XESCore\BlockAlgs.cpp	/^void simplify_block(Block_2& io_block, double max_err)$/;"	f
simplify_id	.\XESCore\BlockDefs.h	/^	int		simplify_id;		\/\/ To merge two faces, they must have the same non-negative simplify_id.$/;"	m	struct:BLOCK_face_data
size	.\DSF\DSFDefs.h	/^	int32_t		size;$/;"	m	struct:AtomHeader_t
size	.\DSF\DSFPointPool.h	/^	inline int size() const 				{ return mLen; 		}$/;"	f	class:DSFTuple
size	.\DSF\dsflib_013005\DSFDefs.h	/^	int		size;$/;"	m	struct:AtomHeader_t
size	.\DSF\dsflib_013005\DSFPointPool.h	/^	inline int size() const { return mLen; }$/;"	f	class:DSFTuple
size	.\DSF\tri_stripper_101\cache_simulator.h	/^inline size_t cache_simulator::size() const {$/;"	f	class:triangle_stripper::cache_simulator
size	.\DSF\tri_stripper_101\graph_array.h	/^inline size_t graph_array<nodetype, arctype>::size() const {$/;"	f	class:common_structures::graph_array
size	.\DSF\tri_stripper_101\heap_array.h	/^inline size_t heap_array<T, CmpT>::size() const {$/;"	f	class:common_structures::heap_array
size	.\GUI\GUI_Laftfont.h	/^	int		size;$/;"	m	struct:gl_glyph
size	.\OneOffs\gen_roads10.h	/^		size_t size() { pair<iterator, iterator> p = self->equal_range(key); return distance(p.first,p.second); }$/;"	f	struct:road_map::range_ref
size	.\Utils\MemFileUtils.cpp	/^  char size[12];		\/* 124 *\/$/;"	m	struct:tar_header	file:
size	.\Utils\STLUtils.h	/^	size_t			size(void) const$/;"	f	class:pqueue
size	.\WEDCore\WED_Buffer.cpp	/^	int				size;			\/\/ size of bytes really used$/;"	m	struct:WED_Buffer::Storage	file:
size	.\XESCore\DEMDefs.h	/^	size_t size(void) const { return size_; }$/;"	f	struct:address_fifo
size	.\lib_json\src\lib_json\json_value.cpp	/^Value::size() const$/;"	f	class:Json::Value
size_	.\XESCore\DEMDefs.h	/^	size_t size_;$/;"	m	struct:address_fifo
size_	.\lib_json\include\json\value.h	/^      ArrayIndex size_;$/;"	m	class:Json::ValueInternalArray
size_central_dir	.\Utils\unzip.c	/^	uLong size_central_dir;     \/* size of the central directory  *\/$/;"	m	struct:__anon102	file:
size_centralheader	.\Utils\zip.c	/^    uLong size_centralheader;   \/* size of the central header for cur file *\/$/;"	m	struct:__anon104	file:
size_code	.\XESCore\AptDefs.h	/^	int			size_code;$/;"	m	struct:AptSign_t
size_comment	.\Utils\unzip.h	/^	uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:unz_global_info_s
size_file_comment	.\Utils\unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:unz_file_info_s
size_file_extra	.\Utils\unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:unz_file_info_s
size_filename	.\Utils\unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:unz_file_info_s
size_for_image	.\XPTools\DDSTool.cpp	/^static int size_for_image(int x, int y, int bpp, int min_bytes)$/;"	f	file:
size_for_mipmap	.\XPTools\DDSTool.cpp	/^static int size_for_mipmap(int x, int y, int bpp, int min_bytes)$/;"	f	file:
size_local_extrafield	.\Utils\unzip.c	/^	uInt  size_local_extrafield;\/* size of the local extra field *\/$/;"	m	struct:__anon101	file:
size_max	.\XESCore\Zoning.h	/^	float		size_min,		size_max;				\/\/ Size of block in square meters$/;"	m	struct:ZoningRule_t
size_min	.\XESCore\Zoning.h	/^	float		size_min,		size_max;				\/\/ Size of block in square meters$/;"	m	struct:ZoningRule_t
size_t	.\lib_json\include\json\value.h	/^      typedef unsigned int size_t;$/;"	t	class:Json::ValueConstIterator
size_t	.\lib_json\include\json\value.h	/^      typedef unsigned int size_t;$/;"	t	class:Json::ValueIterator
size_t	.\lib_json\include\json\value.h	/^      typedef unsigned int size_t;$/;"	t	class:Json::ValueIteratorBase
size_type	.\Obj\XDefs.h	/^				typedef typename base_type::size_type		size_type;$/;"	t	class:std::__dev_vector
skeleton_Exception	.\Utils\Skeleton.h	/^	skeleton_Exception			\/\/ An exception was thrown during processing.$/;"	e	enum:__anon99
skeleton_InvalidResult	.\Utils\Skeleton.h	/^	skeleton_InvalidResult,		\/\/ The resulting inset failed validation tests.$/;"	e	enum:__anon99
skeleton_OK	.\Utils\Skeleton.h	/^	skeleton_OK,$/;"	e	enum:__anon99
skeleton_OutOfSteps	.\Utils\Skeleton.h	/^	skeleton_OutOfSteps,		\/\/ We hit our step limit without reaching the inset we wanted.$/;"	e	enum:__anon99
skip	.\VPF\VPFImport.cpp	/^	bool	skip;$/;"	m	struct:VPF_Node	file:
skipCommentTokens	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::skipCommentTokens( Token &token )$/;"	f	class:Json::Reader
skipSpaces	.\lib_json\src\lib_json\json_reader.cpp	/^Reader::skipSpaces()$/;"	f	class:Json::Reader
skip_anim	.\Obj\XObjWriteEmbedded.cpp	/^bool skip_anim(vector<XObjCmd8>::const_iterator& cur_cmd, vector<XObjCmd8>::const_iterator stop_cmd, int pass_num)$/;"	f
skip_eol	.\GUI\GUI_Prefs.cpp	/^inline void	skip_eol(const char *&p, const char * e) { while(p<e && is_eol(*p)) ++p; }$/;"	f
skip_space	.\GUI\GUI_Prefs.cpp	/^inline void	skip_space(const char *&p, const char * e) { while(p<e && is_spc(*p)) ++p; }$/;"	f
slop_for_anim	.\AC3DPlugins\obj_anim.cpp	/^inline float slop_for_anim(int a)$/;"	f
slop_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	slop_min;	float	slop_max;$/;"	m	struct:RF_WizardParams	file:
slop_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	slop_min;	float	slop_max;$/;"	m	struct:RF_WizardParams	file:
slope_amp	.\XESCore\TensorRoads.h	/^	float		slope_amp;$/;"	m	struct:RoadPrefs_t
slope_heading_max	.\XESCore\DEMTables.h	/^	float			slope_heading_max;$/;"	m	struct:NaturalTerrainRule_t
slope_heading_min	.\XESCore\DEMTables.h	/^	float			slope_heading_min;$/;"	m	struct:NaturalTerrainRule_t
slope_max	.\XESCore\DEMTables.h	/^	float			slope_max;$/;"	m	struct:NaturalTerrainRule_t
slope_max	.\XESCore\Zoning.h	/^	float		slope_min,		slope_max;				\/\/ Max slope within block$/;"	m	struct:ZoningRule_t
slope_min	.\XESCore\DEMTables.h	/^	float			slope_min;$/;"	m	struct:NaturalTerrainRule_t
slope_min	.\XESCore\Zoning.h	/^	float		slope_min,		slope_max;				\/\/ Max slope within block$/;"	m	struct:ZoningRule_t
slot	.\VPF\VPFImport.cpp	/^	WTPM_Line::EdgePair* slot;$/;"	m	class:RememberHalfedge	file:
smallUnsignedInteger_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value smallUnsignedInteger_;$/;"	m	struct:ValueTest	file:
snap_round	.\XESCore\BlockFill.cpp	/^void	candy_bar::snap_round()$/;"	f	class:candy_bar
snprintf	.\Obj\XDefs.h	240;"	d
socketStatus	.\Network\PCSBSocket.h	/^		Status		socketStatus;$/;"	m	class:PCSBSocket
soff	.\OneOffs\gen_roads.cpp	/^	float		soff;$/;"	m	class:road_pylons	file:
soil_style	.\XESCore\DEMTables.h	/^	int				soil_style;$/;"	m	struct:NaturalTerrainRule_t
solid	.\XPTools\ViewObj.cpp	/^	bool	solid;$/;"	m	struct:ObjViewInfo_t	file:
sort_by_ac_state	.\AC3DPlugins\obj_tools.cpp	/^struct sort_by_ac_state {$/;"	s	file:
sort_by_apt	.\WEDImportExport\WED_AptTable.cpp	/^	sort_by_apt(const AptVector * apts, int sort_column, int invert_sort) : apts_(apts), sort_column_(sort_column), invert_sort_(invert_sort) { }$/;"	f	struct:sort_by_apt
sort_by_apt	.\WEDImportExport\WED_AptTable.cpp	/^struct sort_by_apt {$/;"	s	file:
sort_by_apt	.\WEDImportExport\WED_ICAOTable.cpp	/^	sort_by_apt(const AptVector * apts, int sort_column, int invert_sort) : apts_(apts), sort_column_(sort_column), invert_sort_(invert_sort) { }$/;"	f	struct:sort_by_apt
sort_by_apt	.\WEDImportExport\WED_ICAOTable.cpp	/^struct sort_by_apt {$/;"	s	file:
sort_by_seg_rat	.\WEDMap\WED_CreateEdgeTool.cpp	/^	sort_by_seg_rat(const Point2& i) : a(i) { }$/;"	f	struct:sort_by_seg_rat
sort_by_seg_rat	.\WEDMap\WED_CreateEdgeTool.cpp	/^struct sort_by_seg_rat {$/;"	s	file:
sort_by_sqr_dist	.\XESCore\NetPlacement.cpp	/^struct sort_by_sqr_dist {$/;"	s	file:
sort_by_ver	.\WEDImportExport\WED_VerTable.cpp	/^	sort_by_ver(const VerVector * vers, int sort_column, int invert_sort) : vers_(vers), sort_column_(sort_column), invert_sort_(invert_sort) { }$/;"	f	struct:sort_by_ver
sort_by_ver	.\WEDImportExport\WED_VerTable.cpp	/^struct sort_by_ver {$/;"	s	file:
sort_by_y	.\XESCore\NetPlacement.cpp	/^struct sort_by_y {$/;"	s	file:
sort_cdt_face_by_lowest_height	.\XESCore\MeshAlgs.cpp	/^struct sort_cdt_face_by_lowest_height {$/;"	s	file:
sort_column_	.\WEDImportExport\WED_AptTable.cpp	/^	int sort_column_;$/;"	m	struct:sort_by_apt	file:
sort_column_	.\WEDImportExport\WED_ICAOTable.cpp	/^	int sort_column_;$/;"	m	struct:sort_by_apt	file:
sort_column_	.\WEDImportExport\WED_VerTable.cpp	/^	int sort_column_;$/;"	m	struct:sort_by_ver	file:
sort_item_by_layer	.\WEDMap\WED_PreviewLayer.cpp	/^struct sort_item_by_layer {	bool operator()(WED_PreviewItem * lhs, WED_PreviewItem * rhs) const { return lhs->get_layer() < rhs->get_layer(); } };$/;"	s	file:
sort_pixel_by_height	.\XESCore\DEMAlgs.cpp	/^	sort_pixel_by_height(const DEMGeo& d) : d_(d) { }$/;"	f	struct:sort_pixel_by_height
sort_pixel_by_height	.\XESCore\DEMAlgs.cpp	/^struct sort_pixel_by_height {$/;"	s	file:
sort_segment_x_then_y	.\WEDCore\WED_Clipping.cpp	/^struct sort_segment_x_then_y {$/;"	s	file:
source	.\RawImport\gshhs.h	/^	short int source;		\/* 0 = CIA WDBII, 1 = WVS *\/$/;"	m	struct:GSHHS
source	.\Utils\CompGeomDefs2.h	/^	inline	Point2	source() const { return p1; }$/;"	f	struct:Bezier2
source	.\Utils\CompGeomDefs2.h	/^	inline	Point2	source() const { return p1; }$/;"	f	struct:Segment2
source_id	.\WEDEntities\WED_Thing.h	/^	vector<int>		source_id;				\/\/ These are MY sources!  I am watching them.$/;"	m	class:WED_Thing
south	.\RawImport\gshhs.h	/^	int west, east, south, north;	\/* min\/max extent in micro-degrees *\/$/;"	m	struct:GSHHS
south	.\RenderFarmUI\RF_Import.cpp	/^	float		south;$/;"	m	struct:RF_ImportState_t	file:
spa	.\OneOffs\gen_roads10.h	/^	float	spa[2];$/;"	m	struct:obj_placement
spacing	.\OneOffs\gen_roads.cpp	/^	float		spacing;$/;"	m	class:road_pylons	file:
spacing	.\WEDEntities\WED_StringPlacement.h	/^	WED_PropDoubleText		spacing;$/;"	m	class:WED_StringPlacement
spatial_index_2	.\Utils\point_index.h	/^class	spatial_index_2 {$/;"	c
spawn_process	.\XPTools\XGrinderShell.cpp	/^int spawn_process(char* cmdline)$/;"	f
specCmd_CheckEnums	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_CheckEnums$/;"	e	enum:__anon80
specCmd_ClimateRange	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_ClimateRange,$/;"	e	enum:__anon80
specCmd_CountBorders	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_CountBorders,$/;"	e	enum:__anon80
specCmd_CreateTerrainPackage	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_CreateTerrainPackage,$/;"	e	enum:__anon80
specCmd_FaceHeight	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_FaceHeight,$/;"	e	enum:__anon80
specCmd_FixMSL	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_FixMSL,$/;"	e	enum:__anon80
specCmd_FixRain	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_FixRain,$/;"	e	enum:__anon80
specCmd_KillObjs	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_KillObjs,$/;"	e	enum:__anon80
specCmd_MeshErr	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_MeshErr,$/;"	e	enum:__anon80
specCmd_MeshLU	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_MeshLU,$/;"	e	enum:__anon80
specCmd_ObjHeight	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_ObjHeight,$/;"	e	enum:__anon80
specCmd_PreviewSHP	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_PreviewSHP,$/;"	e	enum:__anon80
specCmd_ReloadConfigFiles	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_ReloadConfigFiles,$/;"	e	enum:__anon80
specCmd_Screenshot	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_Screenshot,$/;"	e	enum:__anon80
specCmd_SplatClimate	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_SplatClimate,$/;"	e	enum:__anon80
specCmd_TempMSL	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_TempMSL,$/;"	e	enum:__anon80
specCmd_UpdateTerrainPackage	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_UpdateTerrainPackage,$/;"	e	enum:__anon80
specCmd_Wizard	.\RenderFarmUI\RF_Msgs.h	/^	specCmd_Wizard,$/;"	e	enum:__anon80
spec_HillIrr	.\OneOffs\GenTerrain.c	/^	spec_HillIrr,		\/\/ Like out, but with hill patterns$/;"	e	enum:__anon61	file:
spec_HillSq	.\OneOffs\GenTerrain.c	/^	spec_HillSq,		\/\/ Like out, but with hill patterns$/;"	e	enum:__anon61	file:
spec_InIrr	.\OneOffs\GenTerrain.c	/^	spec_InIrr,		\/\/ City inner - non-single-unit buildings + sky scrapers limited by height restrictions$/;"	e	enum:__anon61	file:
spec_InSq	.\OneOffs\GenTerrain.c	/^	spec_InSq,		\/\/ City inner - non-single-unit buildings + sky scrapers limited by height restrictions$/;"	e	enum:__anon61	file:
spec_IndIrr	.\OneOffs\GenTerrain.c	/^	spec_IndIrr,		\/\/ Industrial$/;"	e	enum:__anon61	file:
spec_IndSq	.\OneOffs\GenTerrain.c	/^	spec_IndSq,		\/\/ Industrial$/;"	e	enum:__anon61	file:
spec_Max	.\OneOffs\GenTerrain.c	/^	spec_Max$/;"	e	enum:__anon61	file:
spec_OutIrr	.\OneOffs\GenTerrain.c	/^	spec_OutIrr,		\/\/ Outer-town area - basically residential$/;"	e	enum:__anon61	file:
spec_OutSq	.\OneOffs\GenTerrain.c	/^	spec_OutSq,		\/\/ Outer-town area - basically residential$/;"	e	enum:__anon61	file:
spec_Park	.\OneOffs\GenTerrain.c	/^	spec_Park,		\/\/ Parkland and grass\/forset areas$/;"	e	enum:__anon61	file:
spec_TownIrr	.\OneOffs\GenTerrain.c	/^	spec_TownIrr,		\/\/ Town - the outlay transition between city and farm\/natural$/;"	e	enum:__anon61	file:
spec_TownSq	.\OneOffs\GenTerrain.c	/^	spec_TownSq,		\/\/ Town - the outlay transition between city and farm\/natural$/;"	e	enum:__anon61	file:
special_tris_to_quads	.\Obj\ObjConvert.cpp	/^static void	special_tris_to_quads(XObj& obj)$/;"	f	file:
speed	.\OneOffs\gen_roads.cpp	/^	int		speed;$/;"	m	struct:car_lane	file:
speed	.\OneOffs\gen_roads10.h	/^	float			speed;$/;"	m	struct:traffic_lane
speed_knots	.\WEDEntities\WED_ATCWindRule.h	/^	WED_PropIntText				speed_knots;$/;"	m	class:WED_ATCWindRule
spherical	.\ObjEdit\oenotes.c	/^	6. Projection - planar, spherical, cubic or cylindrical.$/;"	v
splat_for_spot	.\Utils\QuiltUtils.cpp	/^void	splat_for_spot($/;"	f
split_arch	.\XESCore\NetTables.h	/^	int			split_arch;$/;"	m	struct:BridgeInfo
split_at_line_h	.\WEDCore\WED_Clipping.cpp	/^	split_at_line_h(double in_y) : y(in_y) { }$/;"	f	struct:split_at_line_h
split_at_line_h	.\WEDCore\WED_Clipping.cpp	/^struct split_at_line_h {$/;"	s	file:
split_at_line_v	.\WEDCore\WED_Clipping.cpp	/^	split_at_line_v(double in_x) : x(in_x) { }$/;"	f	struct:split_at_line_v
split_at_line_v	.\WEDCore\WED_Clipping.cpp	/^struct split_at_line_v {$/;"	s	file:
split_count	.\XESCore\NetTables.h	/^	int			split_count;$/;"	m	struct:BridgeInfo
split_degen	.\Obj\ObjConvert.cpp	/^void split_degen(const vector<INDEX_T>& all,$/;"	f
split_length	.\XESCore\NetTables.h	/^	float		split_length;$/;"	m	struct:BridgeInfo
split_path	.\WEDCore\WED_LibraryMgr.cpp	/^static void split_path(const string& i, string& p, string& f)$/;"	f	file:
split_segment	.\XESCore\BlockFill.cpp	/^void split_segment(const Segment2& s, double a_start, double a_stop, map<double,pair<double, double> >& times, const double * split_lines, int split_count)$/;"	f
split_seq	.\Utils\STLUtils.h	/^	split_seq(S src, F functor) : s(src), f(functor), i(0), c(0) {$/;"	f	struct:split_seq
split_seq	.\Utils\STLUtils.h	/^struct split_seq {$/;"	s
split_traits	.\WEDCore\WED_Clipping.cpp	/^struct split_traits {$/;"	s	file:
split_traits	.\WEDCore\WED_Clipping.cpp	/^struct split_traits<Bezier2> {$/;"	s	file:
split_traits	.\WEDCore\WED_Clipping.cpp	/^struct split_traits<Bezier2p> {		\/\/ needed?  I don't know.  C++ paranoia!!$/;"	s	file:
spool_job	.\XPTools\XGrinderShell.cpp	/^static void spool_job(const char * cmd_line)$/;"	f	file:
sql_bind	.\Utils\SQLUtils.h	/^	void	sql_bind(sqlite3_stmt * s, int * swizzle) const {$/;"	f	struct:sql_row0
sql_bind	.\Utils\SQLUtils.h	/^	void	sql_bind(sqlite3_stmt * s, int * swizzle) const {$/;"	f	struct:sql_row1
sql_bind	.\Utils\SQLUtils.h	/^	void	sql_bind(sqlite3_stmt * s, int * swizzle) const {$/;"	f	struct:sql_row2
sql_bind	.\Utils\SQLUtils.h	/^	void	sql_bind(sqlite3_stmt * s, int * swizzle) const {$/;"	f	struct:sql_row3
sql_bind	.\Utils\SQLUtils.h	/^	void	sql_bind(sqlite3_stmt * s, int * swizzle) const {$/;"	f	struct:sql_row4
sql_bind	.\Utils\SQLUtils.h	/^	void	sql_bind(sqlite3_stmt * s, int * swizzle) const {$/;"	f	struct:sql_row5
sql_bind_param	.\Utils\SQLUtils.h	/^inline int		sql_bind_param(sqlite3_stmt * s, int iparam, const string& value)	{ return sqlite3_bind_text(s,iparam,value.c_str(),value.size(), SQLITE_TRANSIENT);	}$/;"	f
sql_bind_param	.\Utils\SQLUtils.h	/^inline int		sql_bind_param(sqlite3_stmt * s, int iparam, double value)			{ return sqlite3_bind_double(s,iparam,value);										}$/;"	f
sql_bind_param	.\Utils\SQLUtils.h	/^inline int		sql_bind_param(sqlite3_stmt * s, int iparam, int value)				{ return sqlite3_bind_int(s,iparam,value);											}$/;"	f
sql_command	.\Utils\SQLUtils.cpp	/^sql_command::sql_command(sqlite3 * db, const char * cmd,const char * params)$/;"	f	class:sql_command
sql_command	.\Utils\SQLUtils.h	/^class	sql_command {$/;"	c
sql_db	.\Utils\SQLUtils.cpp	/^sql_db::sql_db(const char * in_filename, int flags)$/;"	f	class:sql_db
sql_db	.\Utils\SQLUtils.h	/^class	sql_db {$/;"	c
sql_do	.\Utils\SQLUtils.cpp	/^int sql_do(sqlite3 * db, const char * sql)$/;"	f
sql_do_bulk	.\Utils\SQLUtils.cpp	/^int sql_do_bulk(sqlite3 * db, const char * sql)$/;"	f
sql_do_bulk_range	.\Utils\SQLUtils.cpp	/^int sql_do_bulk_range(sqlite3 * db, const char * sql_begin, const char * sql_end)$/;"	f
sql_do_hack	.\Utils\SQLUtils.cpp	/^int sql_do_hack(sqlite3 * db, const char * sql, string * out_result)$/;"	f
sql_fetch	.\Utils\SQLUtils.h	/^	void	sql_fetch(sqlite3_stmt * s) {$/;"	f	struct:sql_row0
sql_fetch	.\Utils\SQLUtils.h	/^	void	sql_fetch(sqlite3_stmt * s) {$/;"	f	struct:sql_row1
sql_fetch	.\Utils\SQLUtils.h	/^	void	sql_fetch(sqlite3_stmt * s) {$/;"	f	struct:sql_row2
sql_fetch	.\Utils\SQLUtils.h	/^	void	sql_fetch(sqlite3_stmt * s) {$/;"	f	struct:sql_row3
sql_fetch	.\Utils\SQLUtils.h	/^	void	sql_fetch(sqlite3_stmt * s) {$/;"	f	struct:sql_row4
sql_fetch	.\Utils\SQLUtils.h	/^	void	sql_fetch(sqlite3_stmt * s) {$/;"	f	struct:sql_row5
sql_fetch_column	.\Utils\SQLUtils.h	/^inline void		sql_fetch_column(sqlite3_stmt * s, int icol, double& result)		{ result = sqlite3_column_double(s,icol);											}$/;"	f
sql_fetch_column	.\Utils\SQLUtils.h	/^inline void		sql_fetch_column(sqlite3_stmt * s, int icol, int& result)			{ result = sqlite3_column_int(s,icol);												}$/;"	f
sql_fetch_column	.\Utils\SQLUtils.h	/^inline void		sql_fetch_column(sqlite3_stmt * s, int icol, string& result)		{ result = (char*)sqlite3_column_text(s, icol);										}$/;"	f
sql_init	.\Utils\SQLUtils.h	/^	sql_init(sqlite3 * db, const char * sql) { sql_do(db,sql); }$/;"	f	class:sql_init
sql_init	.\Utils\SQLUtils.h	/^class sql_init {$/;"	c
sql_row0	.\Utils\SQLUtils.h	/^struct	sql_row0 {$/;"	s
sql_row1	.\Utils\SQLUtils.h	/^	sql_row1() { }$/;"	f	struct:sql_row1
sql_row1	.\Utils\SQLUtils.h	/^	sql_row1(const A& ia) : a(ia) { }$/;"	f	struct:sql_row1
sql_row1	.\Utils\SQLUtils.h	/^struct	sql_row1 {$/;"	s
sql_row2	.\Utils\SQLUtils.h	/^	sql_row2() { }$/;"	f	struct:sql_row2
sql_row2	.\Utils\SQLUtils.h	/^	sql_row2(const A& ia, const B& ib) : a(ia), b(ib) { }$/;"	f	struct:sql_row2
sql_row2	.\Utils\SQLUtils.h	/^struct	sql_row2 {$/;"	s
sql_row3	.\Utils\SQLUtils.h	/^	sql_row3() { }$/;"	f	struct:sql_row3
sql_row3	.\Utils\SQLUtils.h	/^	sql_row3(const A& ia, const B& ib, const C& ic) : a(ia), b(ib), c(ic) { }$/;"	f	struct:sql_row3
sql_row3	.\Utils\SQLUtils.h	/^struct	sql_row3 {$/;"	s
sql_row4	.\Utils\SQLUtils.h	/^	sql_row4() { }$/;"	f	struct:sql_row4
sql_row4	.\Utils\SQLUtils.h	/^	sql_row4(const A& ia, const B& ib, const C& ic, const D& id) : a(ia), b(ib), c(ic), d(id) { }$/;"	f	struct:sql_row4
sql_row4	.\Utils\SQLUtils.h	/^struct	sql_row4 {$/;"	s
sql_row5	.\Utils\SQLUtils.h	/^	sql_row5() { }$/;"	f	struct:sql_row5
sql_row5	.\Utils\SQLUtils.h	/^	sql_row5(const A& ia, const B& ib, const C& ic, const D& id, const E& ie) : a(ia), b(ib), c(ic), d(id), e(ie) { }$/;"	f	struct:sql_row5
sql_row5	.\Utils\SQLUtils.h	/^struct	sql_row5 {$/;"	s
sqlite3	.\WEDCore\WED_Document.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3_quote_string	.\Utils\SQLUtils.h	/^inline string sqlite3_quote_string(const string& v)$/;"	f
sqr	.\Utils\MathUtils.h	/^inline float	sqr			(const float in																){													return in*in;}$/;"	f
squared_distance	.\Utils\CompGeomDefs2.h	/^	inline double squared_distance(const Point2& p) const { return (p.x_ - x_) * (p.x_ - x_) + (p.y_ - y_) * (p.y_ - y_); }$/;"	f	struct:Point2
squared_distance	.\Utils\CompGeomDefs2.h	/^inline 	double Line2::squared_distance(const Point2& p) const$/;"	f	class:Line2
squared_distance	.\Utils\CompGeomDefs2.h	/^inline double Segment2::squared_distance(const Point2& p) const $/;"	f	class:Segment2
squared_distance	.\Utils\CompGeomDefs3.h	/^	inline double squared_distance(const Point3& p) const { return (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) + (p.z - z) * (p.z - z); }$/;"	f	struct:Point3
squared_distance	.\Utils\CompGeomDefs3.h	/^inline	double Plane3::squared_distance(const Point3& p) const$/;"	f	class:Plane3
squared_distance	.\Utils\CompGeomDefs3.h	/^inline double	Segment3::squared_distance(const Point3& p) const$/;"	f	class:Segment3
squared_distance_ccw	.\Utils\CompGeomDefs2.h	/^	double	squared_distance_ccw(const Point2& p) const { $/;"	f	struct:Triangle2
squared_distance_pt_seq	.\XESCore\BezierApprox.cpp	/^double squared_distance_pt_seq(PolyLineIndex& iseq, const Point2& p, double max_err)$/;"	f
squared_distance_pt_seq	.\XESCore\BezierApprox.cpp	/^double squared_distance_pt_seq(__Seq seq, const Point2& p)$/;"	f
squared_distance_seq_seq	.\XESCore\BezierApprox.cpp	/^double squared_distance_seq_seq(PolyLineIndex& s2, __Seq s1, double max_err)$/;"	f
squared_distance_seq_seq	.\XESCore\BezierApprox.cpp	/^double squared_distance_seq_seq(__Seq1 s1, __Seq2 s2)$/;"	f
squared_distance_supporting_line	.\Utils\CompGeomDefs2.h	/^inline double	Segment2::squared_distance_supporting_line(const Point2& p) const$/;"	f	class:Segment2
squared_length	.\Utils\CompGeomDefs2.h	/^	double	squared_length(void) const { return (p2.x_ - p1.x_) * (p2.x_ - p1.x_) + (p2.y_ - p1.y_) * (p2.y_ - p1.y_); }$/;"	f	struct:Segment2
squared_length	.\Utils\CompGeomDefs2.h	/^	double	squared_length(void) const { return dx * dx + dy * dy; }$/;"	f	struct:Vector2
squared_length	.\Utils\CompGeomDefs3.h	/^	double	squared_length(void) const { return (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y) + (p2.z - p1.z) * (p2.z - p1.z); }$/;"	f	struct:Segment3
squared_length	.\Utils\CompGeomDefs3.h	/^	double	squared_length(void) const { return dx * dx + dy * dy + dz * dz; }$/;"	f	struct:Vector3
squatters_in_area	.\XESCore\MapHelpers.h	/^bool			squatters_in_area($/;"	f
squatters_stopping_merge	.\XESCore\MapHelpers.h	/^bool			squatters_stopping_merge($/;"	f
srat	.\OneOffs\gen_roads.cpp	/^	float		srat;$/;"	m	class:road_pylons	file:
src	.\Utils\UTL_interval.h	/^	const vector<T> *							src;$/;"	m	class:UTL_interval::const_iterator
src	.\WEDCore\WED_Routing.h	/^	WED_route_node_t *			src;$/;"	m	struct:WED_route_edge_t
src	.\XESCore\AptDefs.h	/^	int							src;$/;"	m	struct:AptRouteEdge_t
src_matches_target	.\WEDCore\WED_Clipping.cpp	/^	src_matches_target(const Point2& target) : target_(target) { }$/;"	f	struct:src_matches_target
src_matches_target	.\WEDCore\WED_Clipping.cpp	/^struct src_matches_target {$/;"	s	file:
st	.\AC3DPlugins\uv_mapper.cpp	/^	cgd::Point2		st[3];$/;"	m	struct:a_tri	file:
st	.\Obj\XObjDefs.h	/^	float	st[2];$/;"	m	struct:vec_tex
st	.\Obj\XObjDefs.h	/^	vector<vec_tex>	st;$/;"	m	struct:XObjCmd
st	.\Utils\XUtils.cpp	/^		float st[2];$/;"	m	struct:XPointPool::XPointPoolImp::p_info	file:
st_lookup_final	.\XPTools\HackFixTextures.cpp	/^float	st_lookup_final[14][4][2];$/;"	v
st_normalize	.\AC3DPlugins\uv_mapper.cpp	/^static void		st_normalize(VertexMap& map)$/;"	f	file:
st_start_lookup	.\XPTools\HackFixTextures.cpp	/^float	st_start_lookup[4][14][4][2];$/;"	v
stack	.\Network\XMLObject.cpp	/^	vector<XMLObject *>	stack;$/;"	m	struct:ParserInfo	file:
start	.\Tiger\TIGERTypes.h	/^	RawCoordKey		start;$/;"	m	struct:ChainInfo_t
start	.\XPTools\Env2DSF.cpp	/^	int		start;$/;"	m	struct:NetworkSeg_t	file:
startNode	.\DSF\DSFLibWrite.cpp	/^		int						startNode;			\/\/ chain as passed into us.  We use this  while$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
startNode	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						startNode;			\/\/ chain as passed into us.  We use this  while$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
startNode	.\XESCore\WTPM.h	/^	WTPM_Node *				startNode;$/;"	m	struct:WTPM_Line
startNodeKey	.\SDTS\SDTSReadTVP.cpp	/^	ForeignKey				startNodeKey;$/;"	m	struct:LineRecord	file:
start_	.\lib_json\include\json\reader.h	/^         Location start_;$/;"	m	class:Json::Reader::Token
start_cnd_index	.\VPF\VPFImport.cpp	/^	int		start_cnd_index;$/;"	m	struct:VPF_Line	file:
start_composite	.\OneOffs\gen_roads.cpp	/^void 	start_composite()	{	road_composite * c = new road_composite; road_stack.push_back(c); }$/;"	f
start_items	.\XPTools\HackFixTextures.cpp	/^int	start_items[4][4] = { { 8, 11, 9, 10 }, { 4, 7, 5, 6 }, { 0, 3, 1, 2 }, { 12, 13, -1, -1 } };$/;"	v
start_junction	.\XESCore\NetPlacement.h	/^	Net_JunctionInfo_t *			start_junction;				\/\/ Start and end junction ptrs$/;"	m	struct:Net_ChainInfo_t
start_layer	.\XESCore\NetPlacement.h	/^	int								start_layer;$/;"	m	struct:Net_ChainInfo_t
start_node_pt	.\VPF\VPFImport.cpp	/^	Point2	start_node_pt;			\/\/ Some VPF data is missing node coordinates on the nodes themselves.$/;"	m	struct:VPF_Line	file:
start_order	.\DSF\tri_stripper_101\tri_stripper.h	/^		enum start_order { ABC = 0, BCA = 1, CAB = 2 };$/;"	g	class:triangle_stripper::tri_stripper::triangle_strip
start_p	.\GUI\GUI_Resources.cpp	/^	const char * start_p;$/;"	m	struct:res_struct	file:
start_space	.\OneOffs\gen_roads.cpp	/^	float		start_space;$/;"	m	class:road_pylons	file:
start_time_zulu	.\WEDEntities\WED_ATCTimeRule.h	/^	WED_PropIntText		start_time_zulu;$/;"	m	class:WED_ATCTimeRule
start_zulu	.\XESCore\AptDefs.h	/^	int				start_zulu;$/;"	m	struct:AptTimeRule_t
status	.\GUI\GUI_Fonts.cpp	/^	FT_Error	status;$/;"	m	struct:OGL_char_info	file:
status	.\UI\XPopup.h	/^	unsigned long status;$/;"	m	struct:MwmHints
status	.\WEDCore\WED_LibraryMgr.h	/^		int			status;$/;"	m	struct:WED_LibraryMgr::res_info_t
status	.\WEDImportExport\WED_VerTable.h	/^	string status;			\/\/ Now provided by the server.$/;"	m	struct:VerInfo_t
status_Connected	.\Network\PCSBSocket.h	/^	       status_Connected = 3,$/;"	e	enum:PCSBSocket::Status
status_Connecting	.\Network\PCSBSocket.h	/^	       status_Connecting = 2,$/;"	e	enum:PCSBSocket::Status
status_DSF	.\WEDCore\WED_Package.h	/^	status_DSF,$/;"	e	enum:__anon114
status_Deprecated	.\WEDCore\WED_LibraryMgr.h	/^	status_Deprecated	= 1,$/;"	e	enum:__anon112
status_Disconnected	.\Network\PCSBSocket.h	/^	       status_Disconnected = 4,$/;"	e	enum:PCSBSocket::Status
status_Error	.\Network\PCSBSocket.h	/^	       status_Error = 5$/;"	e	enum:PCSBSocket::Status
status_None	.\WEDCore\WED_Package.h	/^	status_None,$/;"	e	enum:__anon114
status_Pending	.\Network\HTTPClient.h	/^	status_Pending = 0,				\/\/ The request is in progress$/;"	e	enum:__anon37
status_Private	.\WEDCore\WED_LibraryMgr.h	/^	status_Private		= 0,		\/\/ Intentionally SORTED so that the most EXPOSED status is the HIGHEST number!$/;"	e	enum:__anon112
status_Public	.\WEDCore\WED_LibraryMgr.h	/^	status_Public		= 2$/;"	e	enum:__anon112
status_Ready	.\Network\PCSBSocket.h	/^	       status_Ready = 1,$/;"	e	enum:PCSBSocket::Status
status_SocketError	.\Network\HTTPClient.h	/^	status_SocketError = -1			\/\/ The socket died while servicing us, or before getting to us.$/;"	e	enum:__anon37
status_Stale	.\WEDCore\WED_Package.h	/^	status_Stale,$/;"	e	enum:__anon114
status_UpToDate	.\WEDCore\WED_Package.h	/^	status_UpToDate$/;"	e	enum:__anon114
status_XES	.\WEDCore\WED_Package.h	/^	status_XES,$/;"	e	enum:__anon114
std	.\Obj\XDefs.h	/^	namespace std$/;"	n
std	.\RenderFarmUI\RF_Selection.h	/^namespace std {$/;"	n
std	.\Utils\MemIStreamBuf.h	/^namespace std {$/;"	n
std	.\Utils\UTL_interval.h	/^namespace std {$/;"	n
stderr_read	.\XPTools\XGrinderShell.cpp	/^HANDLE stderr_read, stderr_write;$/;"	v
stderr_write	.\XPTools\XGrinderShell.cpp	/^HANDLE stderr_read, stderr_write;$/;"	v
stdin_read	.\XPTools\XGrinderShell.cpp	/^HANDLE stdin_read, stdin_write;$/;"	v
stdin_write	.\XPTools\XGrinderShell.cpp	/^HANDLE stdin_read, stdin_write;$/;"	v
stdout_read	.\XPTools\XGrinderShell.cpp	/^HANDLE stdout_read, stdout_write;$/;"	v
stdout_write	.\XPTools\XGrinderShell.cpp	/^HANDLE stdout_read, stdout_write;$/;"	v
step	.\XESCore\DEMDefs.h	/^		int						step;$/;"	m	struct:DEMGeo::neighbor_iterator
step_by_step_conforming_any	.\XESCore\MeshConformer.h	/^  bool step_by_step_conforming_any()$/;"	f	class:CGAL::Triangulation_conformer_any_2
stmt	.\Utils\SQLUtils.h	/^	sqlite3_stmt *	stmt;$/;"	m	class:sql_command
str_	.\lib_json\include\json\value.h	/^      const char *str_;$/;"	m	class:Json::StaticString
str_len	.\Obj\XObjWriteEmbedded.cpp	/^	int		str_len;$/;"	m	struct:master_header_t	file:
str_off	.\Obj\XObjWriteEmbedded.cpp	/^	int		str_off;$/;"	m	struct:master_header_t	file:
strcasecmp	.\Obj\XDefs.h	234;"	d
strcmpcasenosensitive_internal	.\Utils\unzip.c	/^local int strcmpcasenosensitive_internal (const char* fileName1,const char* fileName2)$/;"	f
strdup	.\linuxinit\initializer.cpp	29;"	d	file:
strdup_null	.\OneOffs\osm2shape.c	/^static char * strdup_null(const char * s)$/;"	f	file:
stream	.\Utils\unzip.c	/^	z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:__anon101	file:
stream	.\Utils\zip.c	/^	z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:__anon104	file:
stream_initialised	.\Utils\unzip.c	/^	uLong stream_initialised;   \/* flag set if stream structure is initialised*\/$/;"	m	struct:__anon101	file:
stream_initialised	.\Utils\zip.c	/^    int  stream_initialised;    \/* 1 is stream is initialised *\/$/;"	m	struct:__anon104	file:
strictMode	.\lib_json\src\lib_json\json_reader.cpp	/^Features::strictMode()$/;"	f	class:Json::Features
strictRoot_	.\lib_json\include\json\features.h	/^      bool strictRoot_;$/;"	m	class:Json::Features
string1_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value string1_;$/;"	m	struct:ValueTest	file:
stringValue	.\lib_json\include\json\value.h	/^      stringValue,   \/\/\/< UTF-8 string value$/;"	e	enum:Json::ValueType
string_	.\lib_json\include\json\value.h	/^         char *string_;$/;"	m	union:Json::Value::ValueHolder
string_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value string_;$/;"	m	struct:ValueTest	file:
string_is_resource	.\GUI\GUI_TextTable.h	/^	int						string_is_resource;$/;"	m	struct:GUI_CellContent
string_utf16	.\GUI\GUI_Unicode.h	/^typedef basic_string<UTF16>	string_utf16;											\/\/ Just like an STL string, but made of 16-bit UTF 16 chars.$/;"	t
string_utf_16_to_8	.\GUI\GUI_Unicode.cpp	/^void	string_utf_16_to_8(const string_utf16& input, string& output)$/;"	f
string_utf_8_to_16	.\GUI\GUI_Unicode.cpp	/^void	string_utf_8_to_16(const string& input, string_utf16& output)$/;"	f
string_val	.\Interfaces\IPropertyObject.h	/^	string		string_val;$/;"	m	struct:PropertyVal_t
strip	.\XESCore\TriFan.h	/^	list<CDT::Vertex_handle>		strip;$/;"	m	struct:TriStrip_t
strip_and_clean	.\DSFTools\DSF2Text.cpp	/^static char * strip_and_clean(char * raw)$/;"	f	file:
strip_break	.\DSF\DSFPointPool.cpp	/^static unsigned short * strip_break(unsigned short * idx_start, unsigned short * idx_end)$/;"	f	file:
strip_path	.\WEDImportExport\WED_DSFExport.cpp	/^static void strip_path(string& f)$/;"	f	file:
strip_segments_to_one	.\XESCore\NetAlgs.cpp	/^static void strip_segments_to_one(GISNetworkSegmentVector& v)$/;"	f	file:
strip_to_delim	.\Installer\InstallerScript.cpp	/^void	strip_to_delim(char * buf, char delim)$/;"	f
strip_whitespace	.\AC3DPlugins\obj8_export.cpp	/^static void strip_whitespace(string& s)$/;"	f	file:
strip_x	.\XESCore\AptIO.cpp	/^static void strip_x(string& s)$/;"	f	file:
stripped_resource	.\WEDMap\WED_CreatePolygonTool.cpp	/^string stripped_resource(const string& r)$/;"	f
strncasecmp	.\Obj\XDefs.h	235;"	d
strncpy_s	.\GUI\GUI_Window.cpp	/^static int strncpy_s(char* strDest, size_t numberOfElements, const char* strSource, size_t count)$/;"	f	file:
strptr_cb	.\Utils\SQLUtils.cpp	/^static int strptr_cb(void*ref,int col_count,char** col_data, char** col_names)$/;"	f	file:
strstrnocase	.\AC3DPlugins\ac_utils.cpp	/^const char * strstrnocase(const char * haystack, const char * needle)$/;"	f
structSize	.\Utils\BitmapUtils.cpp	/^	long			structSize;$/;"	m	struct:BMPImageDesc	file:
strval	.\VPF\VPFImport.h	/^	const char *		strval;			\/\/ Matching string enum (or null for int)$/;"	m	struct:VPF_LineRule_t
strval	.\VPF\VPFImport.h	/^	const char *		strval;$/;"	m	struct:VPF_FaceRule_t
style	.\WEDEntities\WED_AirportSign.h	/^	WED_PropIntEnum		style;$/;"	m	class:WED_AirportSign
style_code	.\XESCore\AptDefs.h	/^	int			style_code;$/;"	m	struct:AptSign_t
sub1	.\WEDWindows\WED_Menus.cpp	/^GUI_Menu	sub1 = 0;$/;"	v
subType	.\DSF\DSFLibWrite.cpp	/^		int						subType;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
subType	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						subType;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
sub_div	.\OneOffs\make_fill_rules.c	/^	int		sub_div;$/;"	m	struct:depth_info_t	file:
sub_str	.\XPTools\XGrinderShell.cpp	/^static void sub_str(string& io_str, const string& key, const string& rep)$/;"	f	file:
subcurve	.\Utils\CompGeomDefs2.h	/^inline void	Bezier2::subcurve(Bezier2& sub, double t1, double t2) const$/;"	f	class:Bezier2
subcurve	.\WEDCore\WED_GISUtils.h	/^	void subcurve(Bezier2p& sub, double t1, double t2) const { Bezier2::subcurve(sub,t1,t2); sub.param = param; }$/;"	f	struct:Bezier2p
subset	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::subset(DEMGeo& newDEM, int x1, int y1, int x2, int y2) const$/;"	f	class:DEMGeo
subtype	.\WEDEntities\WED_RoadEdge.h	/^	WED_PropIntEnum			subtype;$/;"	m	class:WED_RoadEdge
supporting_plane	.\Utils\Skeleton.cpp	/^	Plane3			supporting_plane;	\/\/	This is the supporting plane of the edge in XYT space.$/;"	m	struct:SK_Edge	file:
surf	.\OneOffs\gen_roads.cpp	/^	const char *	surf;$/;"	m	class:road_deck	file:
surf	.\OneOffs\gen_roads10.h	/^	surface_type	surf;$/;"	m	struct:road_segment
surf_code	.\XESCore\AptDefs.h	/^	int			surf_code;$/;"	m	struct:AptPavement_t
surf_code	.\XESCore\AptDefs.h	/^	int			surf_code;$/;"	m	struct:AptRunway_t
surf_name	.\OneOffs\gen_roads10.h	/^const char * surf_name(surface_type t) $/;"	f
surf_sel_st	.\AC3DPlugins\ac_utils.cpp	/^void	  surf_sel_st(Surface * s, float st_bounds[4], vector<Surface *>& out_surf)$/;"	f
surface	.\WEDEntities\WED_Helipad.h	/^	WED_PropIntEnum		surface;$/;"	m	class:WED_Helipad
surface	.\WEDEntities\WED_Runway.h	/^	WED_PropIntEnum			surface;$/;"	m	class:WED_Runway
surface	.\WEDEntities\WED_Taxiway.h	/^	WED_PropIntEnum			surface;$/;"	m	class:WED_Taxiway
surface_code	.\XESCore\AptDefs.h	/^	int						surface_code;$/;"	m	struct:AptTaxiway_t
surface_code	.\XESCore\AptDefs.h	/^	int			surface_code;$/;"	m	struct:AptHelipad_t
surface_set_normals	.\AC3DPlugins\ac_utils.cpp	/^void surface_set_normals(Surface * surface, Point3* nrml)$/;"	f
surface_type	.\OneOffs\gen_roads10.h	/^enum surface_type { $/;"	g
swabi2	.\RawImport\gshhs.h	90;"	d
swabi4	.\RawImport\gshhs.h	92;"	d
swap	.\DSF\tri_stripper_101\graph_array.h	/^	friend void swap(_mytype & Left, _mytype & Right)	{ Left.swap(Right); }$/;"	f	class:common_structures::graph_array
swap	.\DSF\tri_stripper_101\graph_array.h	/^inline void graph_array<nodetype, arctype>::swap(_mytype & Right) {$/;"	f	class:common_structures::graph_array
swap	.\Utils\UTL_interval.h	/^	inline void swap(UTL_interval<T>& a, UTL_interval<T>& b)$/;"	f	namespace:std
swap	.\Utils\UTL_interval.h	/^	void swap(UTL_interval& other) { schedule.swap(other.schedule); }$/;"	f	class:UTL_interval
swap	.\XESCore\DEMDefs.cpp	/^void	DEMGeo::swap(DEMGeo& rhs)$/;"	f	class:DEMGeo
swap	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::swap( CZString &other )$/;"	f	class:Json::Value::CZString
swap	.\lib_json\src\lib_json\json_value.cpp	/^Value::swap( Value &other )$/;"	f	class:Json::Value
swap_bgra_y	.\Utils\BitmapUtils.cpp	/^static void swap_bgra_y(struct ImageInfo& i)$/;"	f	file:
swap_double	.\OneOffs\osm2shape.c	/^void swap_double(double * a, double * b)$/;"	f
swap_he_road_dir	.\XESCore\NetHelpers.h	/^inline void swap_he_road_dir(Pmwx::Halfedge_handle he)$/;"	f
swap_mem	.\Utils\BitmapUtils.cpp	/^inline void swap_mem(unsigned char * p1, unsigned char * p2, int len)$/;"	f
swap_suffix	.\WEDImportExport\WED_DSFExport.cpp	/^static void swap_suffix(string& f, const char * new_suffix)$/;"	f	file:
swap_xy	.\RenderFarmUI\RF_Import.cpp	/^	int			swap_xy;$/;"	m	struct:RF_ImportState_t	file:
sym_Bordered	.\XPTools\TaxiMaker.cpp	/^	sym_Bordered$/;"	e	enum:__anon145	file:
sym_Leftcap	.\XPTools\TaxiMaker.cpp	/^	sym_Leftcap,$/;"	e	enum:__anon145	file:
sym_Middle	.\XPTools\TaxiMaker.cpp	/^	sym_Middle,$/;"	e	enum:__anon145	file:
sym_None	.\XPTools\TaxiMaker.cpp	/^	sym_None,$/;"	e	enum:__anon145	file:
sym_Rightcap	.\XPTools\TaxiMaker.cpp	/^	sym_Rightcap,$/;"	e	enum:__anon145	file:
symbollength	.\linuxinit\initializer.h	/^	symbollength = 1024$/;"	e	enum:InitializerConstants
syn_curly_pair_empty	.\WEDCore\WED_Sign_Parser.h	/^	syn_curly_pair_empty,$/;"	e	enum:parser_error_t
syn_curly_pair_missing	.\WEDCore\WED_Sign_Parser.h	/^	syn_curly_pair_missing,$/;"	e	enum:parser_error_t
syn_curly_pair_nested	.\WEDCore\WED_Sign_Parser.h	/^	syn_curly_pair_nested$/;"	e	enum:parser_error_t
syn_expected_non_comma_after_incur	.\WEDCore\WED_Sign_Parser.h	/^	syn_expected_non_comma_after_incur,\/\/Found under I_INCUR$/;"	e	enum:parser_error_t
syn_expected_non_seperator_after_comma	.\WEDCore\WED_Sign_Parser.h	/^	syn_expected_non_seperator_after_comma,\/\/Found under I_COMMA$/;"	e	enum:parser_error_t
syn_expected_seperator	.\WEDCore\WED_Sign_Parser.h	/^	syn_expected_seperator,\/\/Found under I_WAITING_SEPERATOR$/;"	e	enum:parser_error_t
syn_found_at_symbol_outside_curly	.\WEDCore\WED_Sign_Parser.h	/^	syn_found_at_symbol_outside_curly,\/\/Found under O_ACCUM_GLYPHS$/;"	e	enum:parser_error_t
syn_found_lowercase_outside_curly	.\WEDCore\WED_Sign_Parser.h	/^	syn_found_lowercase_outside_curly,\/\/Found under O_ACCUM_GLYPHS$/;"	e	enum:parser_error_t
syn_nonsupported_char	.\WEDCore\WED_Sign_Parser.h	/^	syn_nonsupported_char,$/;"	e	enum:parser_error_t
syn_whitespace_found	.\WEDCore\WED_Sign_Parser.h	/^	syn_whitespace_found,$/;"	e	enum:parser_error_t
sync_all_width	.\OneOffs\gen_roads10.h	/^	static void sync_all_width() { for(vector<virtual_table*>::iterator v = all.begin(); v != all.end(); ++v) (*v)->sync_width(); }$/;"	f	class:virtual_table
sync_dataref	.\AC3DPlugins\XPlaneSupport.tcl	/^proc sync_dataref { dref name now minv maxv } {$/;"	p
sync_datarefs	.\AC3DPlugins\obj_anim.cpp	/^void	sync_datarefs()$/;"	f
sync_menu_checks	.\XPTools\XGrinderShell.cpp	/^static void	sync_menu_checks()$/;"	f	file:
sync_panel_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc sync_panel_dialog { name1 name2 op } {$/;"	p
sync_tex	.\GUI\GUI_Fonts.cpp	/^void TT_font_info::sync_tex(void)$/;"	f	class:TT_font_info
sync_width	.\OneOffs\gen_roads10.h	/^	void	sync_width() {$/;"	f	class:virtual_table
synthetic	.\Interfaces\IPropertyObject.h	/^	int				synthetic;			\/\/ A synthetic property is one built from other properties or other derived data.  It is not necessary$/;"	m	struct:PropertyInfo_t
system_exists	.\WEDCore\WED_PackageMgr.h	/^	bool			system_exists;$/;"	m	class:WED_PackageMgr
system_path	.\WEDCore\WED_PackageMgr.h	/^	string			system_path;$/;"	m	class:WED_PackageMgr
t	.\XESCore\BezierApprox.cpp	/^	double		t;$/;"	m	struct:bezier_approx_seq	file:
t	.\XPTools\TaxiMaker.cpp	/^	int						t;$/;"	m	struct:taxi_element_t	file:
t1	.\ObjEdit\OE_Globals.h	/^	float	s1, s2, t1, t2;$/;"	m	struct:OE_Texture_t
t2	.\ObjEdit\OE_Globals.h	/^	float	s1, s2, t1, t2;$/;"	m	struct:OE_Texture_t
t_at_x	.\Utils\CompGeomDefs2.h	/^inline int	Bezier2::t_at_x(double x, double t[3]) const$/;"	f	class:Bezier2
t_at_y	.\Utils\CompGeomDefs2.h	/^inline int	Bezier2::t_at_y(double y, double t[3]) const$/;"	f	class:Bezier2
t_rescale	.\GUI\GUI_Resources.h	/^	float	t_rescale;$/;"	m	struct:GUI_TexPosition_t
table	.\VPF\VPFImport.h	/^	const char *		table;			\/\/ Name of the table that has this attribute$/;"	m	struct:VPF_LineRule_t
table	.\VPF\VPFImport.h	/^	const char *		table;$/;"	m	struct:VPF_FaceRule_t
tagPOINT	.\UI\XWin.h	/^typedef struct tagPOINT {$/;"	s
tag_att_info	.\OneOffs\osm2shape.c	/^typedef struct tag_att_info {$/;"	s	file:
tag_level	.\OneOffs\osm_tile.c	/^static int	tag_level = 0;$/;"	v	file:
tailLink_	.\lib_json\include\json\value.h	/^      ValueInternalLink *tailLink_;$/;"	m	class:Json::ValueInternalMap
tar_buffer	.\Utils\MemFileUtils.cpp	/^union tar_buffer {$/;"	u	file:
tar_header	.\Utils\MemFileUtils.cpp	/^struct tar_header$/;"	s	file:
target	.\Utils\CompGeomDefs2.h	/^	inline	Point2	target() const { return p2; }	$/;"	f	struct:Bezier2
target	.\Utils\CompGeomDefs2.h	/^	inline	Point2	target() const { return p2; }$/;"	f	struct:Segment2
target_	.\WEDCore\WED_Clipping.cpp	/^	Point2 target_;$/;"	m	struct:src_matches_target	file:
taxi	.\WEDMap\WED_PreviewLayer.cpp	/^	WED_Taxiway * taxi;	$/;"	m	struct:preview_taxiway	file:
taxi_element_t	.\XPTools\TaxiMaker.cpp	/^struct	taxi_element_t {$/;"	s	file:
taxi_route	.\XESCore\AptDefs.h	/^	AptNetwork_t		taxi_route;$/;"	m	struct:AptInfo_t
taxiways	.\XESCore\AptDefs.h	/^	AptTaxiwayVector	taxiways;$/;"	m	struct:AptInfo_t
tb_project_to_sphere	.\Utils\trackball.c	/^tb_project_to_sphere(float r, float x, float y)$/;"	f	file:
tce_marquee_mode_t	.\WEDTCE\WED_TCEMarqueeTool.h	/^enum tce_marquee_mode_t {$/;"	g
tcl_stubs	.\AC3DPlugins\TclStubs.cpp	/^TCL_stubs tcl_stubs = { 0 };$/;"	v
tcl_trace_cb	.\AC3DPlugins\tcl_utils.cpp	/^char * TCL_linked_vard::tcl_trace_cb(ClientData clientData, Tcl_Interp *interp, CONST84 char *part1, CONST84 char *part2, int flags)$/;"	f	class:TCL_linked_vard
tcl_trace_cb	.\AC3DPlugins\tcl_utils.cpp	/^char * TCL_linked_vari::tcl_trace_cb(ClientData clientData, Tcl_Interp *interp, CONST84 char *part1, CONST84 char *part2, int flags)$/;"	f	class:TCL_linked_vari
tcl_trace_cb	.\AC3DPlugins\tcl_utils.cpp	/^char * TCL_linked_vars::tcl_trace_cb(ClientData clientData, Tcl_Interp *interp, CONST84 char *part1, CONST84 char *part2, int flags)$/;"	f	class:TCL_linked_vars
tdzl1	.\WEDEntities\WED_Runway.h	/^	WED_PropBoolText			tdzl1;$/;"	m	class:WED_Runway
tdzl2	.\WEDEntities\WED_Runway.h	/^	WED_PropBoolText			tdzl2;$/;"	m	class:WED_Runway
temp_actives	.\Utils\PolyRasterUtils.h	/^	vector<ActiveSeg>			temp_actives;$/;"	m	struct:PolyRasterizer
temp_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	temp_min;	float	temp_max;$/;"	m	struct:RF_WizardParams	file:
temp_max	.\XESCore\DEMTables.h	/^	float			temp_max;$/;"	m	struct:NaturalTerrainRule_t
temp_max	.\XESCore\ForestTables.h	/^	float		temp_min, temp_max;$/;"	m	struct:ForestRule_t
temp_max	.\XESCore\NetTables.h	/^	float		temp_max;$/;"	m	struct:Feature2RepInfo
temp_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	temp_min;	float	temp_max;$/;"	m	struct:RF_WizardParams	file:
temp_min	.\XESCore\DEMTables.h	/^	float			temp_min;$/;"	m	struct:NaturalTerrainRule_t
temp_min	.\XESCore\ForestTables.h	/^	float		temp_min, temp_max;$/;"	m	struct:ForestRule_t
temp_min	.\XESCore\NetTables.h	/^	float		temp_min;$/;"	m	struct:Feature2RepInfo
temp_percentile	.\XESCore\DEMAlgs.h	/^	float	temp_percentile;$/;"	m	struct:DEMPrefs_t
temp_rng_max	.\XESCore\DEMTables.h	/^	float			temp_rng_max;$/;"	m	struct:NaturalTerrainRule_t
temp_rng_min	.\XESCore\DEMTables.h	/^	float			temp_rng_min;$/;"	m	struct:NaturalTerrainRule_t
term	.\Env\Persistence.h	/^	int		term;$/;"	m	struct:PathInfo
terminal	.\DSF\tri_stripper_101\graph_array.h	/^		node_iterator terminal() const					{ return m_Terminal; }$/;"	f	class:common_structures::graph_array::arc
terrain	.\XESCore\DEMTables.h	/^	int				terrain;	\/\/	e.g. natural_Terrain$/;"	m	struct:NaturalTerrainRule_t
terrain	.\XESCore\MeshDefs.h	/^	int				terrain;				\/\/ Specific terrain type, e.g. natural converted to a real land use. (This is a .ter enum, NOT a table index btw)$/;"	m	struct:MeshFaceInfo
terrain	.\XESCore\ObjTables.h	/^	int		terrain;$/;"	m	struct:RepInfo_t
terrain	.\XESCore\Zoning.h	/^	int			terrain;								\/\/ Required base terrain (or require natural)$/;"	m	struct:ZoningRule_t
terrain	.\XESCore\Zoning.h	/^	int			terrain;$/;"	m	struct:LandFillRule_t
terrainDefs	.\DSF\DSFLibWrite.cpp	/^	vector<string>		terrainDefs;$/;"	m	class:DSFFileWriterImp	file:
terrainDefs	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	vector<string>		terrainDefs;$/;"	m	class:DSFFileWriterImp	file:
terrainPool	.\DSF\DSFLibWrite.cpp	/^	DSFSharedPointPoolMap					terrainPool;$/;"	m	class:DSFFileWriterImp	file:
terrainPool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSFSharedPointPoolMap					terrainPool;$/;"	m	class:DSFFileWriterImp	file:
terrain_	.\RenderFarmUI\RF_Main.cpp	/^	int terrain_;$/;"	m	struct:is_same_terrain_c	file:
terrain_	.\RenderFarmUI\RF_Main.cpp	/^	int terrain_;$/;"	m	struct:is_same_terrain_p	file:
terrain_	.\XESCore\Zoning.cpp	/^	int terrain_;$/;"	m	struct:is_same_terrain_p	file:
terrain_border	.\XESCore\MeshDefs.h	/^	set<int>		terrain_border;			\/\/ All terrains on top of us!$/;"	m	struct:MeshFaceInfo
terrain_cur_coords	.\AC3DPlugins\dsf_export.cpp	/^static	vector<Vertex *>	terrain_cur_coords;$/;"	v	file:
terrain_cur_layer	.\AC3DPlugins\dsf_export.cpp	/^static	ACObject *			terrain_cur_layer;$/;"	v	file:
terrain_cur_primitive	.\AC3DPlugins\dsf_export.cpp	/^static	int					terrain_cur_primitive;$/;"	v	file:
terrain_layers	.\AC3DPlugins\dsf_export.cpp	/^static	vector<ACObject *>	terrain_layers;$/;"	v	file:
terrain_type	.\VPF\VPFImport.cpp	/^	int			terrain_type;$/;"	m	struct:VPF_Face	file:
terrain_type	.\VPF\VPFImport.h	/^	int					terrain_type;	\/\/ Terrain type to add$/;"	m	struct:VPF_FaceRule_t
terrain_type	.\XESCore\ObjTables.h	/^	int			terrain_type;$/;"	m	struct:FeatureInfo
terrain_type	.\XESCore\Zoning.h	/^	int			terrain_type;							\/\/ Source terrain type required for this zoning.$/;"	m	struct:ZoningInfo_t
terrains	.\OneOffs\GenTerrain.c	/^TerrainItem_t terrains[] = {$/;"	v
test	.\Utils\QuiltUtils.cpp	/^void test(void)$/;"	f
test1	.\WEDWindows\WED_Menus.cpp	/^GUI_Menu	test1 = 0;$/;"	v
testCount	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::testCount() const$/;"	f	class:JsonTest::Runner
testIndex	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::testIndex( const std::string &testName, $/;"	f	class:JsonTest::Runner
testNameAt	.\lib_json\src\test_lib_json\jsontest.cpp	/^Runner::testNameAt( unsigned int index ) const$/;"	f	class:JsonTest::Runner
test_terrain_package_HELP	.\XESTools\GISTool_MiscCmds.cpp	502;"	d	file:
tests_	.\lib_json\src\test_lib_json\jsontest.h	/^      Factories tests_;$/;"	m	class:JsonTest::Runner
tex	.\OneOffs\gen_roads.cpp	/^	tex_info *		tex;$/;"	m	class:road_blade	file:
tex	.\OneOffs\gen_roads.cpp	/^	tex_info *		tex;$/;"	m	class:road_deck	file:
tex	.\OneOffs\gen_roads.cpp	/^	tex_info *		tex;$/;"	m	class:road_underside	file:
tex	.\OneOffs\gen_roads.cpp	/^	tex_info * 		tex;$/;"	m	class:road	file:
tex	.\OneOffs\gen_roads10.h	/^	string tex;$/;"	m	class:shader
tex	.\WEDMap\WED_PreviewLayer.cpp	/^	int					tex;$/;"	m	struct:Obj_DrawStruct	file:
tex	.\XPTools\ViewObj.cpp	/^	GLenum		tex;$/;"	m	struct:ObjViewInfo_t	file:
texCmd_ApplyCylinder	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ApplyCylinder,$/;"	e	enum:__anon56	file:
texCmd_ApplyPlane	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ApplyPlane,$/;"	e	enum:__anon56	file:
texCmd_ApplyProjection	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ApplyProjection,$/;"	e	enum:__anon56	file:
texCmd_ApplySphere	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ApplySphere,$/;"	e	enum:__anon56	file:
texCmd_ApplyTexture	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ApplyTexture,$/;"	e	enum:__anon56	file:
texCmd_ClearTexture	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ClearTexture,$/;"	e	enum:__anon56	file:
texCmd_DelTex	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_DelTex$/;"	e	enum:__anon56	file:
texCmd_Divider1	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_Divider1,$/;"	e	enum:__anon56	file:
texCmd_Divider2	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_Divider2,$/;"	e	enum:__anon56	file:
texCmd_Divider3	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_Divider3,$/;"	e	enum:__anon56	file:
texCmd_Flip	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_Flip,$/;"	e	enum:__anon56	file:
texCmd_NewTex	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_NewTex,$/;"	e	enum:__anon56	file:
texCmd_ResetTexture	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_ResetTexture = 0,$/;"	e	enum:__anon56	file:
texCmd_RotateCCW	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_RotateCCW,$/;"	e	enum:__anon56	file:
texCmd_RotateCW	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_RotateCW,$/;"	e	enum:__anon56	file:
texCmd_SpecifyTexture	.\ObjEdit\OE_TexCmds.cpp	/^	texCmd_SpecifyTexture,$/;"	e	enum:__anon56	file:
tex_Always_Pad	.\Utils\TexUtils.h	/^	tex_Always_Pad		=	128	\/\/ Force pad up to pow2 even if we have non-pots card.  Needed for UI$/;"	e	enum:__anon100
tex_Compress_Ok	.\Utils\TexUtils.h	/^	tex_Compress_Ok		=	64,	\/\/ Allow driver-driven texture compression$/;"	e	enum:__anon100
tex_Day	.\ObjEdit\OE_DrawObj.h	/^	tex_Day = 1,			\/\/ Show day textures$/;"	e	enum:__anon46
tex_Linear	.\Utils\TexUtils.h	/^	tex_Linear			=	4,	\/\/ Linear filter (otherwise nearest)$/;"	e	enum:__anon100
tex_Lit	.\ObjEdit\OE_DrawObj.h	/^	tex_Lit = 2				\/\/ Show night texturse$/;"	e	enum:__anon46
tex_MagentaAlpha	.\Utils\TexUtils.h	/^	tex_MagentaAlpha	=	1,	\/\/ Convert RGB image to RGBA, chroma-key alpha.$/;"	e	enum:__anon100
tex_Mipmap	.\Utils\TexUtils.h	/^	tex_Mipmap			=	8,	\/\/ Generate mipmaps$/;"	e	enum:__anon100
tex_None	.\ObjEdit\OE_DrawObj.h	/^	tex_None = 0,			\/\/ No texturing$/;"	e	enum:__anon46
tex_Rescale	.\Utils\TexUtils.h	/^	tex_Rescale			=	16,	\/\/ Rescale to use whole tex$/;"	e	enum:__anon100
tex_Wrap	.\Utils\TexUtils.h	/^	tex_Wrap			=	2,	\/\/ Use wrapped tex, otherwise clamped.$/;"	e	enum:__anon100
tex_a_surface	.\AC3DPlugins\uv_mapper.cpp	/^static int tex_a_surface(Surface * surf, const vector<a_tri>& tris)$/;"	f	file:
tex_an_object	.\AC3DPlugins\uv_mapper.cpp	/^static int	tex_an_object(ACObject * ob, const vector<a_tri>& tris)$/;"	f	file:
tex_custom_hard_water	.\XESCore\DEMTables.h	/^    tex_custom_hard_water = 2,$/;"	e	enum:__anon132
tex_custom_no_water	.\XESCore\DEMTables.h	/^    tex_custom_no_water = 1,$/;"	e	enum:__anon132
tex_custom_soft_water	.\XESCore\DEMTables.h	/^    tex_custom_soft_water = 3$/;"	e	enum:__anon132
tex_day	.\Obj\XObjWriteEmbedded.cpp	/^	int				tex_day;		\/\/ string offset becomes obj$/;"	m	struct:embed_props_t	file:
tex_dirty	.\GUI\GUI_Fonts.cpp	/^	int					tex_dirty;$/;"	m	class:TT_font_info	file:
tex_font_size	.\UI\FontMgr.cpp	/^	int		tex_font_size;		\/\/ Stores the texture font size in px (NOT NECESSARILY WHAT'S DRAWN)$/;"	m	struct:FontInfo_t	file:
tex_height	.\GUI\GUI_Fonts.cpp	/^	int					tex_height;$/;"	m	class:TT_font_info	file:
tex_height	.\GUI\GUI_Resources.h	/^	int		tex_height;$/;"	m	struct:GUI_TexPosition_t
tex_height	.\UI\FontMgr.cpp	/^	int 	tex_height;			\/\/ Stores the texture height in px$/;"	m	struct:FontInfo_t	file:
tex_id	.\GUI\GUI_Resources.cpp	/^	GLuint				tex_id;$/;"	m	struct:TexInfo	file:
tex_id	.\UI\FontMgr.cpp	/^	int		tex_id;				\/\/ OpenGL texture ID for bitmap$/;"	m	struct:FontInfo_t	file:
tex_id	.\WEDCore\WED_TexMgr.h	/^		int			tex_id;$/;"	m	struct:WED_TexMgr::TexInfo
tex_info	.\OneOffs\gen_roads.cpp	/^struct	tex_info {$/;"	s	file:
tex_lit	.\Obj\XObjWriteEmbedded.cpp	/^	int				tex_lit;		\/\/ string offset becoems obj$/;"	m	struct:embed_props_t	file:
tex_lit	.\XPTools\ViewObj.cpp	/^	GLenum		tex_lit;$/;"	m	struct:ObjViewInfo_t	file:
tex_not_custom	.\XESCore\DEMTables.h	/^    tex_not_custom = 0,$/;"	e	enum:__anon132
tex_offset_s	.\Obj\XObjBuilder.h	/^	float		tex_offset_s;$/;"	m	class:XObjBuilder
tex_offset_t	.\Obj\XObjBuilder.h	/^	float		tex_offset_t;$/;"	m	class:XObjBuilder
tex_proj_info	.\XESCore\DEMTables.h	/^struct tex_proj_info {$/;"	s
tex_quad	.\GUI\GUI_ToolBar.cpp	/^static void tex_quad(int sx, int sy, int tx, int ty, int dx, int dy, float ttx, float tty)$/;"	f	file:
tex_ref	.\GUI\GUI_Fonts.cpp	/^	GLuint				tex_ref;$/;"	m	class:TT_font_info	file:
tex_reload	.\AC3DPlugins\bitmap_match.cpp	/^void	tex_reload(int tex_id)$/;"	f
tex_repeat_s	.\Obj\XObjBuilder.h	/^	float		tex_repeat_s;$/;"	m	class:XObjBuilder
tex_repeat_t	.\Obj\XObjBuilder.h	/^	float		tex_repeat_t;$/;"	m	class:XObjBuilder
tex_width	.\GUI\GUI_Resources.h	/^	int		tex_width;$/;"	m	struct:GUI_TexPosition_t
tex_width	.\UI\FontMgr.cpp	/^	int		tex_width;			\/\/ Stores the texture width in px$/;"	m	struct:FontInfo_t	file:
tex_x	.\GUI\GUI_Laftfont.h	/^	float		tex_x;$/;"	m	struct:gl_glyph
tex_y	.\GUI\GUI_Laftfont.h	/^	float		tex_y;$/;"	m	struct:gl_glyph
text	.\XESCore\AptDefs.h	/^	string		text;$/;"	m	struct:AptSign_t
textHeight	.\GUI\GUI_Laftfont.cpp	/^int GUI_Laftfont::textHeight(std::string& text)$/;"	f	class:GUI_Laftfont
textHeight	.\GUI\GUI_Laftfont.cpp	/^int GUI_Laftfont::textHeight(std::wstring& text)$/;"	f	class:GUI_Laftfont
textWidth	.\GUI\GUI_Laftfont.cpp	/^int GUI_Laftfont::textWidth(std::string& text)$/;"	f	class:GUI_Laftfont
textWidth	.\GUI\GUI_Laftfont.cpp	/^int GUI_Laftfont::textWidth(std::wstring& text)$/;"	f	class:GUI_Laftfont
textWidth	.\GUI\GUI_Laftfont.cpp	/^int GUI_Laftfont::textWidth(unsigned short codepoint)$/;"	f	class:GUI_Laftfont
text_val	.\GUI\GUI_TextTable.h	/^	string					text_val;		\/\/ Only one of these is used - which one depends on the cell content type!$/;"	m	struct:GUI_CellContent
texture	.\Env\EnvDefs.h	/^	long	texture;$/;"	m	struct:__anon17
texture	.\Env\EnvDefs.h	/^	long	texture;$/;"	m	struct:__anon18
texture	.\Obj\XObjDefs.h	/^	string			texture;$/;"	m	struct:XObj
texture	.\Obj\XObjDefs.h	/^	string 					texture;$/;"	m	struct:XObj8
texture_draped	.\Obj\XObjDefs.h	/^	string 					texture_draped;$/;"	m	struct:XObj8
texture_lit	.\Obj\XObjDefs.h	/^	string 					texture_lit;$/;"	m	struct:XObj8
the_class	.\WEDCore\WED_UndoLayer.h	/^		const char *		the_class;$/;"	m	struct:WED_UndoLayer::ObjInfo
the_hole	.\MeshTool\MeshTool_Create.cpp	/^static Polygon_2						ring, the_hole;$/;"	v	file:
the_map	.\MeshTool\MeshTool_Create.cpp	/^static Pmwx *							the_map = NULL;$/;"	v	file:
themeTableName	.\VPF\VPFTable.h	/^	string		themeTableName;$/;"	m	struct:VPF_ColumnDef
thread_proc	.\Network\curl_http.cpp	/^curl_http_get_file::thread_proc(void * param)$/;"	f	class:curl_http_get_file
throw_error_exit	.\Utils\BitmapUtils.cpp	/^METHODDEF(void) throw_error_exit (j_common_ptr cinfo)$/;"	f
tile	.\WEDCore\WED_ResourceMgr.h	/^	vector<double>	tile;	\/\/ the base tile in x,y,s,t quads.$/;"	m	struct:agp_t
tile_file_status	.\OneOffs\osm_tile.c	/^static int tile_file_status[362*180] = { 0 };$/;"	v	file:
tile_id	.\VPF\VPFTable.h	/^	unsigned int tile_id;$/;"	m	struct:VPF_TripletKey
tile_x	.\OneOffs\gen_roads10.h	/^	int tile_x, tile_y;$/;"	m	class:shader
tile_y	.\OneOffs\gen_roads10.h	/^	int tile_x, tile_y;$/;"	m	class:shader
tiles_x	.\XESCore\DEMTables.h	/^	int				tiles_x;$/;"	m	struct:NaturalTerrainInfo_t
tiles_y	.\XESCore\DEMTables.h	/^	int				tiles_y;$/;"	m	struct:NaturalTerrainInfo_t
time_base	.\Utils\Skeleton.cpp	/^	double		time_base;		\/\/ Time of creation$/;"	m	struct:SK_Vertex	file:
time_region	.\XESCore\BlockFill.cpp	/^typedef UTL_interval<double>	time_region;$/;"	t	file:
time_rules	.\XESCore\AptDefs.h	/^	AptTimeRuleVector			time_rules;$/;"	m	struct:AptFlow_t
timerEvent	.\UI\XWin.lin.cpp	/^void XWin::timerEvent(QTimerEvent* e)$/;"	f	class:XWin
title	.\GUI\GUI_TextTable.h	/^	string					title;$/;"	m	struct:GUI_HeaderContent
title	.\XPTools\XGrinderShell.cpp	/^	string					title;$/;"	m	struct:flag_menu_info	file:
tlid	.\Tiger\TIGERTypes.h	/^	int				tlid;$/;"	m	struct:ChainInfo_t
tm_hour	.\Utils\unzip.h	/^	uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:tm_unz_s
tm_hour	.\Utils\zip.h	/^	uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:tm_zip_s
tm_mday	.\Utils\unzip.h	/^	uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:tm_unz_s
tm_mday	.\Utils\zip.h	/^	uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:tm_zip_s
tm_min	.\Utils\unzip.h	/^	uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:tm_unz_s
tm_min	.\Utils\zip.h	/^	uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:tm_zip_s
tm_mon	.\Utils\unzip.h	/^	uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:tm_unz_s
tm_mon	.\Utils\zip.h	/^	uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:tm_zip_s
tm_sec	.\Utils\unzip.h	/^	uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:tm_unz_s
tm_sec	.\Utils\zip.h	/^	uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:tm_zip_s
tm_unz	.\Utils\unzip.h	/^} tm_unz;$/;"	t	typeref:struct:tm_unz_s
tm_unz_s	.\Utils\unzip.h	/^typedef struct tm_unz_s$/;"	s
tm_year	.\Utils\unzip.h	/^	uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:tm_unz_s
tm_year	.\Utils\zip.h	/^	uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:tm_zip_s
tm_zip	.\Utils\zip.h	/^} tm_zip;$/;"	t	typeref:struct:tm_zip_s
tm_zip_s	.\Utils\zip.h	/^typedef struct tm_zip_s$/;"	s
tmm_Center	.\WEDTCE\WED_TCEMarqueeTool.h	/^	tmm_Center,			\/\/ Drag, keep center in center$/;"	e	enum:tce_marquee_mode_t
tmm_Drag	.\WEDTCE\WED_TCEMarqueeTool.h	/^	tmm_Drag,			\/\/ Drag any corner$/;"	e	enum:tce_marquee_mode_t
tmm_None	.\WEDTCE\WED_TCEMarqueeTool.h	/^	tmm_None=0,			\/\/ No edit going on$/;"	e	enum:tce_marquee_mode_t
tmm_Prop	.\WEDTCE\WED_TCEMarqueeTool.h	/^	tmm_Prop,			\/\/ Drag, maintain aspect ratio$/;"	e	enum:tce_marquee_mode_t
tmm_Prop_Center	.\WEDTCE\WED_TCEMarqueeTool.h	/^	tmm_Prop_Center		\/\/ DRag, maintain aspect ratio AND keep center in center$/;"	e	enum:tce_marquee_mode_t
tmm_Rotate	.\WEDTCE\WED_TCEMarqueeTool.h	/^	tmm_Rotate,			\/\/ Rotate around center$/;"	e	enum:tce_marquee_mode_t
tmpr_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	tmpr_min;	float	tmpr_max;$/;"	m	struct:RF_WizardParams	file:
tmpr_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	tmpr_min;	float	tmpr_max;$/;"	m	struct:RF_WizardParams	file:
tmu_date	.\Utils\unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:unz_file_info_s
tmz_date	.\Utils\zip.h	/^	tm_zip      tmz_date;       \/* date in understandable format           *\/$/;"	m	struct:__anon106
tname	.\OneOffs\gen_roads.cpp	/^	const char *	tname;$/;"	m	struct:tex_info	file:
toString	.\WEDCore\WED_Sign_Parser.h	/^	string toString(const vector<parser_glyph_info> & side)$/;"	f	struct:parser_finished_sign
toStyledString	.\lib_json\src\lib_json\json_value.cpp	/^Value::toStyledString() const$/;"	f	class:Json::Value
to_address	.\XESCore\DEMDefs.h	/^inline DEMGeo::address DEMGeo::to_address(const coordinates& c) const$/;"	f	class:DEMGeo
to_address	.\XESCore\DEMDefs.h	/^inline DEMGeo::address DEMGeo::to_address(const_iterator i) const$/;"	f	class:DEMGeo
to_coordinates	.\XESCore\DEMDefs.h	/^inline DEMGeo::coordinates DEMGeo::to_coordinates(address a) const$/;"	f	class:DEMGeo
to_coordinates	.\XESCore\DEMDefs.h	/^inline DEMGeo::coordinates DEMGeo::to_coordinates(const_iterator i) const$/;"	f	class:DEMGeo
to_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::const_iterator DEMGeo::to_iterator(address a) const$/;"	f	class:DEMGeo
to_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::const_iterator DEMGeo::to_iterator(const coordinates& c) const$/;"	f	class:DEMGeo
to_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::iterator DEMGeo::to_iterator(address a)$/;"	f	class:DEMGeo
to_iterator	.\XESCore\DEMDefs.h	/^inline DEMGeo::iterator DEMGeo::to_iterator(const coordinates& c) $/;"	f	class:DEMGeo
to_metric	.\XESCore\NetPlacement.cpp	/^static void to_metric($/;"	f	file:
to_string	.\WEDImportExport\WED_GatewayExport.cpp	/^static std::string to_string(const T& value)$/;"	f	file:
toggle_properties_visitor	.\RawImport\ShapeIO.cpp	/^class toggle_properties_visitor : public MapBFSVisitor<set<int>, Pmwx > {$/;"	c	file:
token	.\XPTools\XGrinderShell.cpp	/^	string					token;				\/\/ token to substitute$/;"	m	struct:flag_item_info	file:
tokenArrayBegin	.\lib_json\include\json\reader.h	/^         tokenArrayBegin,$/;"	e	enum:Json::Reader::TokenType
tokenArrayEnd	.\lib_json\include\json\reader.h	/^         tokenArrayEnd,$/;"	e	enum:Json::Reader::TokenType
tokenArraySeparator	.\lib_json\include\json\reader.h	/^         tokenArraySeparator,$/;"	e	enum:Json::Reader::TokenType
tokenComment	.\lib_json\include\json\reader.h	/^         tokenComment,$/;"	e	enum:Json::Reader::TokenType
tokenEndOfStream	.\lib_json\include\json\reader.h	/^         tokenEndOfStream = 0,$/;"	e	enum:Json::Reader::TokenType
tokenError	.\lib_json\include\json\reader.h	/^         tokenError$/;"	e	enum:Json::Reader::TokenType
tokenFalse	.\lib_json\include\json\reader.h	/^         tokenFalse,$/;"	e	enum:Json::Reader::TokenType
tokenMemberSeparator	.\lib_json\include\json\reader.h	/^         tokenMemberSeparator,$/;"	e	enum:Json::Reader::TokenType
tokenNull	.\lib_json\include\json\reader.h	/^         tokenNull,$/;"	e	enum:Json::Reader::TokenType
tokenNumber	.\lib_json\include\json\reader.h	/^         tokenNumber,$/;"	e	enum:Json::Reader::TokenType
tokenObjectBegin	.\lib_json\include\json\reader.h	/^         tokenObjectBegin,$/;"	e	enum:Json::Reader::TokenType
tokenObjectEnd	.\lib_json\include\json\reader.h	/^         tokenObjectEnd,$/;"	e	enum:Json::Reader::TokenType
tokenString	.\lib_json\include\json\reader.h	/^         tokenString,$/;"	e	enum:Json::Reader::TokenType
tokenTrue	.\lib_json\include\json\reader.h	/^         tokenTrue,$/;"	e	enum:Json::Reader::TokenType
token_	.\lib_json\include\json\reader.h	/^         Token token_;$/;"	m	class:Json::Reader::ErrorInfo
token_map	.\XESCore\MapIO.cpp	/^	const TokenConversionMap * 	token_map;$/;"	m	class:PmwxFmt	file:
tokenize_string	.\Utils\STLUtils.h	/^void tokenize_string(InputIterator begin, InputIterator end, OutputIterator oi, Separator sep)$/;"	f
tokenize_string_func	.\Utils\STLUtils.h	/^void tokenize_string_func(InputIterator begin, InputIterator end, OutputIterator oi, Separator sep)$/;"	f
too_damn_small	.\XESCore\BlockFill.cpp	/^inline bool too_damn_small(Block_2::Ccb_halfedge_circulator circ, double len)$/;"	f
tool_name	.\WEDMap\WED_MapToolNew.h	/^	string	tool_name;$/;"	m	class:WED_MapToolNew
tool_name	.\WEDTCE\WED_TCEToolNew.h	/^	string	tool_name;$/;"	m	class:WED_TCEToolNew
tool_name	.\XPTools\XGrinderShell.cpp	/^	string					tool_name;$/;"	m	struct:conversion_info	file:
tooltip	.\Obj\XObjDefs.h	/^	string					tooltip;$/;"	m	struct:XObjManip8
top	.\DSF\tri_stripper_101\heap_array.h	/^inline const T & heap_array<T, CmpT>::top() const {$/;"	f	class:common_structures::heap_array
top	.\Obj\XObjDefs.h	/^	int						top;$/;"	m	struct:XObjPanelRegion8
top	.\Utils\RLERegion.h	/^	int		top(void) const { return y2_; }$/;"	f	class:RLERegion
top_left	.\Utils\CompGeomDefs2.h	/^	Point2		top_left    (void) const { return Point2(p1.x(),p2.y()); }$/;"	f	struct:Bbox2
top_right	.\Utils\CompGeomDefs2.h	/^	Point2		top_right   (void) const { return Point2(p2.x(),p2.y()); }$/;"	f	struct:Bbox2
top_side	.\Utils\CompGeomDefs2.h	/^	Segment2	top_side    (void) const { return Segment2(top_right(), top_left()); }$/;"	f	struct:Bbox2
top_side	.\XESCore\BlockFill.cpp	/^		int		top_side;$/;"	m	struct:reg_info_t	file:
top_slope	.\XESCore\BlockFill.cpp	/^		double	top_slope;	\/\/ b over a - CANNOT be NaN because time range must have a-time > 0$/;"	m	struct:reg_info_t	file:
top_type	.\XESCore\BlockFill.cpp	/^		int		top_type;$/;"	m	struct:reg_info_t	file:
topo_Area	.\WEDEntities\WED_FacadePlacement.h	/^		topo_Area = 0,$/;"	e	enum:WED_FacadePlacement::TopoMode
topo_Chain	.\WEDEntities\WED_FacadePlacement.h	/^		topo_Chain = 2$/;"	e	enum:WED_FacadePlacement::TopoMode
topo_Ring	.\WEDEntities\WED_FacadePlacement.h	/^		topo_Ring = 1,$/;"	e	enum:WED_FacadePlacement::TopoMode
tot_a	.\OneOffs\osm2shape.c	/^static int tot_f=0,tot_v=0,tot_a=0;$/;"	v	file:
tot_f	.\OneOffs\osm2shape.c	/^static int tot_f=0,tot_v=0,tot_a=0;$/;"	v	file:
tot_v	.\OneOffs\osm2shape.c	/^static int tot_f=0,tot_v=0,tot_a=0;$/;"	v	file:
total_error_ok	.\XESCore\MapHelpers.h	/^bool arrangement_simplifier<Arr,Traits>::total_error_ok(typename Arr::Vertex_handle v, typename Arr::Halfedge_handle h1, typename Arr::Halfedge_handle h2, const list<Point2>& l1, const list<Point2>& l2, double max_err2)$/;"	f	class:arrangement_simplifier
toupper	.\WEDImportExport\WED_AptTable.cpp	/^inline void toupper(string& io_string)$/;"	f
toupper	.\WEDImportExport\WED_ICAOTable.cpp	/^inline void toupper(string& io_string)$/;"	f
tower	.\XESCore\AptDefs.h	/^	AptTowerPt_t		tower;$/;"	m	struct:AptInfo_t
tower_height	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropDoubleText		tower_height;$/;"	m	class:WED_CreatePointTool
tr	.\XESCore\MeshConformer.h	/^  Tr& tr;$/;"	m	class:CGAL::Triangulation_conformer_any_2
tra_bridge_side	.\OneOffs\gen_roads.cpp	/^void tra_bridge_side()	{	make_blade(300,347,-0.5,6.5,&railroad); }$/;"	f
tra_guard_rail	.\OneOffs\gen_roads.cpp	/^void tra_guard_rail()	{	make_blade(96,123,0,2,&railroad); }$/;"	f
tra_one	.\OneOffs\gen_roads.cpp	/^void tra_one()			{	make_deck(44, 95, &railroad, "gravel");$/;"	f
tra_one_ovr_f	.\OneOffs\gen_roads.cpp	/^void tra_one_ovr_f()	{	make_deck(349, 391, &railroad, "gravel");$/;"	f
tra_one_ovr_r	.\OneOffs\gen_roads.cpp	/^void tra_one_ovr_r()	{	make_deck(349, 391, &railroad, "gravel");$/;"	f
tra_over_side	.\OneOffs\gen_roads.cpp	/^void tra_over_side()	{	make_blade(300,347,-1,0,&railroad); }$/;"	f
tra_pylon_start	.\OneOffs\gen_roads.cpp	/^void tra_pylon_start() { pylons_start("railroad_pylon.obj", 0.5, 0, 30, 0, 0); }$/;"	f
tra_roof_start	.\OneOffs\gen_roads.cpp	/^void tra_roof_start()	{ underside_start(265,298,6.5,&railroad); }$/;"	f
tra_start	.\OneOffs\gen_roads.cpp	/^void tra_start(int b, int ow, int n, const char * na) { road_start(b, ow, n,na,&railroad); }$/;"	f
tra_two	.\OneOffs\gen_roads.cpp	/^void tra_two()			{	make_deck(148, 251, &railroad, "gravel");$/;"	f
tra_underbridge_start	.\OneOffs\gen_roads.cpp	/^void tra_underbridge_start()	{ underside_start(391,432,-0.5,&railroad); }$/;"	f
tra_underside_start	.\OneOffs\gen_roads.cpp	/^void tra_underside_start()	{ underside_start(391,432,-1.0,&railroad); }$/;"	f
tracedepth	.\linuxinit\initializer.h	/^	tracedepth = 300,$/;"	e	enum:InitializerConstants
trackball	.\Utils\trackball.c	/^trackball(float q[4], float p1x, float p1y, float p2x, float p2y)$/;"	f
traffic	.\OneOffs\gen_roads10.h	/^	traffic(const string& model) : res(model) { idx = all.size(); all.push_back(this); }$/;"	f	class:traffic
traffic	.\OneOffs\gen_roads10.h	/^	traffic(const train_spelling& s) { idx = all.size(); all.push_back(this); trains.push_back(s); }$/;"	f	class:traffic
traffic	.\OneOffs\gen_roads10.h	/^class	traffic {$/;"	c
traffic	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntEnumBitfield	traffic;$/;"	m	class:WED_ATCRunwayUse
traffic_dir	.\WEDEntities\WED_ATCFlow.h	/^	WED_PropIntEnum		traffic_dir;$/;"	m	class:WED_ATCFlow
traffic_lane	.\OneOffs\gen_roads10.h	/^struct traffic_lane {$/;"	s
traffic_type	.\OneOffs\gen_roads.cpp	/^	int		traffic_type;$/;"	m	struct:car_lane	file:
train_car	.\OneOffs\gen_roads10.h	/^	train_car(const char * name, float l1, float l2) : res(name) { len[0] = l1; len[1] = l2; }$/;"	f	struct:train_car
train_car	.\OneOffs\gen_roads10.h	/^struct train_car {$/;"	s
train_spelling	.\OneOffs\gen_roads10.h	/^typedef vector<train_car>	train_spelling;$/;"	t
trains	.\OneOffs\gen_roads10.h	/^	vector<train_spelling>	trains;$/;"	m	class:traffic
traits	.\Utils\QuadTree.h	/^	Traits		traits;$/;"	m	class:QuadTree
traits	.\XESCore\BlockAlgs.cpp	/^struct traits {$/;"	s	file:
traits_type	.\Utils\MemIStreamBuf.h	/^	typedef traits                    traits_type;$/;"	t	class:std::basic_memstreambuf
traits_type	.\XESCore\MapHelpers.h	/^	typedef Traits		traits_type;$/;"	t	class:arrangement_simplifier
transposeMatrix	.\Utils\MatrixUtils.cpp	/^transposeMatrix(GLdouble dst[16], GLdouble src[16])$/;"	f
tri	.\XESCore\MapHelpers.h	/^	Triangle_2	tri;$/;"	m	struct:visit_pt_in_tri
tri_area	.\XESCore\DSFBuilder.cpp	/^inline double tri_area(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
tri_count	.\AC3DPlugins\dsf_export.cpp	/^static	int					tri_count;$/;"	v	file:
tri_is_cliff	.\XESCore\MeshAlgs.cpp	/^inline bool tri_is_cliff(CDT& io_mesh, CDT::Face_handle f)$/;"	f
tri_map_from_obj	.\AC3DPlugins\uv_mapper.cpp	/^static void tri_map_from_obj(ACObject * ob, vector<a_tri>& tris)$/;"	f	file:
tri_stripper	.\DSF\tri_stripper_101\tri_stripper.h	/^class tri_stripper$/;"	c	namespace:triangle_stripper
tri_stripper	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::tri_stripper(const indices & TriIndices) : m_TriIndices(TriIndices) {$/;"	f	class:triangle_stripper::tri_stripper
triangle	.\DSF\tri_stripper_101\tri_stripper.h	/^	class triangle$/;"	c	class:triangle_stripper::tri_stripper
triangle	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle::triangle() { }$/;"	f	class:triangle_stripper::tri_stripper::triangle
triangle	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle::triangle(const index A, const index B, const index C) : m_A(A), m_B(B), m_C(C), m_StripID(0) { }$/;"	f	class:triangle_stripper::tri_stripper::triangle
triangle_degree	.\DSF\tri_stripper_101\tri_stripper.h	/^	class triangle_degree$/;"	c	class:triangle_stripper::tri_stripper
triangle_degree	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle_degree::triangle_degree() { }$/;"	f	class:triangle_stripper::tri_stripper::triangle_degree
triangle_degree	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle_degree::triangle_degree(const size_t TriPos, const size_t Degree) : m_TriPos(TriPos), m_Degree(Degree) { }$/;"	f	class:triangle_stripper::tri_stripper::triangle_degree
triangle_edge	.\DSF\tri_stripper_101\tri_stripper.h	/^	class triangle_edge$/;"	c	class:triangle_stripper::tri_stripper
triangle_edge	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle_edge::triangle_edge(const index A, const index B, const size_t TriPos) : m_A(A), m_B(B), m_TriPos(TriPos) { }$/;"	f	class:triangle_stripper::tri_stripper::triangle_edge
triangle_edges	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef std::vector<triangle_edge> triangle_edges;$/;"	t	class:triangle_stripper::tri_stripper
triangle_indices	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef std::vector<size_t> triangle_indices;$/;"	t	class:triangle_stripper::tri_stripper
triangle_strip	.\DSF\tri_stripper_101\tri_stripper.h	/^	class triangle_strip$/;"	c	class:triangle_stripper::tri_stripper
triangle_strip	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle_strip::triangle_strip() : m_StartTriPos(0), m_StartOrder(ABC), m_Size(0) { }$/;"	f	class:triangle_stripper::tri_stripper::triangle_strip
triangle_strip	.\DSF\tri_stripper_101\tri_stripper.h	/^inline tri_stripper::triangle_strip::triangle_strip(const size_t StartTriPos, const start_order StartOrder, const size_t Size)$/;"	f	class:triangle_stripper::tri_stripper::triangle_strip
triangle_stripper	.\DSF\tri_stripper_101\cache_simulator.h	/^namespace triangle_stripper {$/;"	n
triangle_stripper	.\DSF\tri_stripper_101\tri_stripper.cpp	/^namespace triangle_stripper {$/;"	n	file:
triangle_stripper	.\DSF\tri_stripper_101\tri_stripper.h	/^namespace triangle_stripper {$/;"	n
triangles_graph	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef common_structures::graph_array<triangle, char> triangles_graph;$/;"	t	class:triangle_stripper::tri_stripper
triangles_heap	.\DSF\tri_stripper_101\tri_stripper.h	/^	typedef common_structures::heap_array<triangle_degree, _cmp_tri_degree_gt> triangles_heap;$/;"	t	class:triangle_stripper::tri_stripper
triangles_indices_error	.\DSF\tri_stripper_101\tri_stripper.h	/^	struct triangles_indices_error { };$/;"	s	class:triangle_stripper::tri_stripper
trim	.\Utils\RLERegion.cpp	/^void	RLERegion::trim(void)$/;"	f	class:RLERegion
trim	.\Utils\STLUtils.h	/^void trim(T& v)$/;"	f
trim	.\XESCore\MapDefs.h	/^	inline void trim(void) { ::trim(mPointFeatures); ::trim(mPolygonFeatures); ::trim(mObjs); ::trim(mPolyObjs); $/;"	f	class:GIS_face_data
trim	.\XESCore\MapDefs.h	/^	inline void trim(void) { ::trim(mSegments); }$/;"	f	struct:GIS_halfedge_data
trim	.\XESCore\MapDefs.h	/^	inline void trim(void) { ::trim(mShape); }$/;"	f	struct:GISPolyObjPlacement_t
trim	.\XESCore\MapDefs.h	/^	inline void trim(void) { }$/;"	f	struct:GIS_vertex_data
trim_down	.\XESCore\DEMIO.cpp	/^static	void	trim_down(const char ** sp, const char ** ep)$/;"	f	file:
trim_file	.\WEDCore\WED_Assert.cpp	/^static const char * trim_file(const char * p)$/;"	f	file:
trim_file	.\WEDCore\WED_UndoMgr.cpp	/^static const char * trim_file(const char * p)$/;"	f	file:
trim_map	.\XESCore\MapTopology.cpp	/^void trim_map(Pmwx& ioMap)$/;"	f
true_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value true_;$/;"	m	struct:ValueTest	file:
trunk	.\XESCore\NetTables.h	/^	int			trunk;$/;"	m	struct:ForkRule
try_one_step_conforming_any	.\XESCore\MeshConformer.h	/^  bool try_one_step_conforming_any()$/;"	f	class:CGAL::Triangulation_conformer_any_2
ts	.\OneOffs\gen_tiles.c	/^int			xs, ys, ts;$/;"	v
tt_dim	.\GUI\GUI_Fonts.cpp	356;"	d	file:
tt_font	.\GUI\GUI_Fonts.cpp	/^static TT_font_info*	tt_font [tt_dim]={0};$/;"	v	file:
tt_names	.\GUI\GUI_Fonts.cpp	/^static const char *		tt_names[tt_dim]={"sans.ttf", "sans.ttf" };$/;"	v	file:
tt_sizes	.\GUI\GUI_Fonts.cpp	/^static const float		tt_sizes[tt_dim]={12.0, 10.0};																\/\/ Fonts are both 10.5, but if they weren't from the same family, we might need to compensate!$/;"	v	file:
tt_t	.\GUI\GUI_Fonts.cpp	/^typedef int tt_t;$/;"	t	file:
tunnel	.\Tiger\TigerImport.cpp	/^	int					tunnel;$/;"	m	struct:RoadInfo_t	file:
turn_direction	.\Utils\CompGeomDefs2.h	/^	int		turn_direction(const Vector2& v) const { double d = -dy * v.dx + dx * v.dy; if (d > 0.0) return LEFT_TURN; if (d < 0.0) return RIGHT_TURN; return COLLINEAR; }$/;"	f	struct:Vector2
turn_direction	.\Utils\CompGeomDefs2.h	/^inline int	turn_direction(const Point2& p1, const Point2& p2, const Point2& p3)$/;"	f
two_sided	.\Obj\XObjBuilder.h	/^ 	int			two_sided;			int		o_two_sided;$/;"	m	class:XObjBuilder
type	.\DSF\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
type	.\DSF\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
type	.\DSF\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
type	.\DSF\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
type	.\DSF\DSFLibWrite.cpp	/^		int					type;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
type	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::ChainSpec	file:
type	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::ObjectSpec	file:
type	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::PatchSpec	file:
type	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int						type;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
type	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		int					type;$/;"	m	struct:DSFFileWriterImp::PolygonSpec	file:
type	.\Env\EnvDefs.h	/^	long	type;$/;"	m	struct:__anon19
type	.\WEDEntities\WED_Thing.h	/^	WED_TypeField				type;$/;"	m	class:WED_Thing
type	.\WEDImportExport\WED_VerTable.h	/^	string type;$/;"	m	struct:VerInfo_t
type	.\XESCore\AptDefs.h	/^	int			type;$/;"	m	struct:AptGate_t
type	.\lib_json\src\lib_json\json_value.cpp	/^Value::type() const$/;"	f	class:Json::Value
type_	.\lib_json\include\json\reader.h	/^         TokenType type_;$/;"	m	class:Json::Reader::Token
type_Anim	.\Obj\XObjDefs.h	/^	type_Anim,		\/\/ OBJ 8$/;"	e	enum:__anon41
type_Attr	.\Obj\XObjDefs.h	/^	type_Attr,		\/\/ OBJ 7 or 8$/;"	e	enum:__anon41
type_Cust	.\Obj\XObjDefs.h	/^	type_Cust		\/\/ OBJ8$/;"	e	enum:__anon41
type_Indexed	.\Obj\XObjDefs.h	/^	type_Indexed,	\/\/ OBJ 8$/;"	e	enum:__anon41
type_None	.\Obj\XObjDefs.h	/^	type_None = 0,$/;"	e	enum:__anon41
type_Poly	.\Obj\XObjDefs.h	/^	type_Poly,		\/\/ OBJ 7$/;"	e	enum:__anon41
type_PtLine	.\Obj\XObjDefs.h	/^	type_PtLine,	\/\/ OBJ 7$/;"	e	enum:__anon41
type_list	.\OneOffs\osm2shape.c	/^static const char * type_list[] = { "node", "way", "relation", 0 };$/;"	v	file:
type_list	.\OneOffs\osm_tile.c	/^		static const char * type_list[] = { "node", "way", "relation", 0 };$/;"	v	file:
type_node	.\OneOffs\osm2shape.c	/^enum { type_node = 0, type_way, type_relation };$/;"	e	enum:__anon71	file:
type_relation	.\OneOffs\osm2shape.c	/^enum { type_node = 0, type_way, type_relation };$/;"	e	enum:__anon71	file:
type_way	.\OneOffs\osm2shape.c	/^enum { type_node = 0, type_way, type_relation };$/;"	e	enum:__anon71	file:
typeflag	.\Utils\MemFileUtils.cpp	/^  char typeflag;		\/* 156 *\/$/;"	m	struct:tar_header	file:
ucen_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	ucen_min;	float	ucen_max;$/;"	m	struct:RF_WizardParams	file:
ucen_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	ucen_min;	float	ucen_max;$/;"	m	struct:RF_WizardParams	file:
uden	.\XESCore\TensorRoads.cpp	/^	const DEMGeo *	uden;$/;"	m	struct:Tensor_info	file:
uden_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	uden_min;	float	uden_max;$/;"	m	struct:RF_WizardParams	file:
uden_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	uden_min;	float	uden_max;$/;"	m	struct:RF_WizardParams	file:
udp_Exception_BindFailed	.\Network\PCSBSocketUDP.h	/^const long	udp_Exception_BindFailed = 2;$/;"	v
udp_Exception_UnknownError	.\Network\PCSBSocketUDP.h	/^const long	udp_Exception_UnknownError = 1;$/;"	v
uid	.\Utils\MemFileUtils.cpp	/^  char uid[8];			\/* 108 *\/$/;"	m	struct:tar_header	file:
uintToString	.\lib_json\src\lib_json\json_tool.h	/^uintToString( LargestUInt value, $/;"	f	namespace:Json
uintToStringBufferSize	.\lib_json\src\lib_json\json_tool.h	/^   uintToStringBufferSize = 3*sizeof(LargestUInt)+1 $/;"	e	enum:Json::__anon35
uintValue	.\lib_json\include\json\value.h	/^      uintValue,     \/\/\/< unsigned integer value$/;"	e	enum:Json::ValueType
uint_	.\lib_json\include\json\value.h	/^         LargestUInt uint_;$/;"	m	union:Json::Value::ValueHolder
um	.\WEDMap\WED_MarqueeTool.cpp	/^	hrm - ths is a case where bulk fetch would be more efficient by a factor of, um, 8??$/;"	v
uname	.\Utils\MemFileUtils.cpp	/^  char uname[32];		\/* 265 *\/$/;"	m	struct:tar_header	file:
uncompressed_size	.\Utils\unzip.h	/^    uLong uncompressed_size;    \/* uncompressed size               4 bytes *\/$/;"	m	struct:unz_file_info_s
underpassing	.\Tiger\(TigerImport Backup.cpp).cpp	/^	int					underpassing;$/;"	m	struct:RoadInfo_t	file:
underpassing	.\Tiger\TigerImport.cpp	/^	int					underpassing;$/;"	m	struct:RoadInfo_t	file:
underside_end	.\OneOffs\gen_roads.cpp	/^void 	underside_end()	{	road_stack.pop_back(); }$/;"	f
underside_start	.\OneOffs\gen_roads.cpp	/^void	underside_start(int is1, int is2, float iy, tex_info * itex)$/;"	f
undoCmd_Redo	.\ObjEdit\OE_DataModel.cpp	/^	undoCmd_Redo = 1$/;"	e	enum:__anon44	file:
undoCmd_Undo	.\ObjEdit\OE_DataModel.cpp	/^	undoCmd_Undo = 0,$/;"	e	enum:__anon44	file:
unhash_lat	.\RawImport\AptElev.h	/^inline int unhash_lat(int h) { return (h \/ 360)-90 ; }$/;"	f
unhash_lon	.\RawImport\AptElev.h	/^inline int unhash_lon(int h) { return (h % 360)-180; }$/;"	f
unindent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::unindent()$/;"	f	class:Json::StyledStreamWriter
unindent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::unindent()$/;"	f	class:Json::StyledWriter
unique_ref_num	.\XESCore\DEMIO.cpp	/^	char			unique_ref_num[12];			\/\/ May be blank, some kind of producer-defined blob$/;"	m	struct:DTED_UHL_t	file:
unit_Feet	.\XPTools\ConvertObj.cpp	/^	unit_Feet,$/;"	e	enum:__anon138	file:
unit_Inches	.\XPTools\ConvertObj.cpp	/^	unit_Inches,$/;"	e	enum:__anon138	file:
unit_Meters	.\XPTools\ConvertObj.cpp	/^	unit_Meters,$/;"	e	enum:__anon138	file:
universe_	.\XESCore\Zoning.cpp	/^	set<Face_handle> *						universe_;$/;"	m	struct:UnlinkedFace_p	file:
unknown	.\lib_json\src\lib_json\json_value.cpp	/^static const unsigned int unknown = (unsigned)-1;$/;"	m	namespace:Json	file:
unmark	.\DSF\tri_stripper_101\graph_array.h	/^		arc & unmark()									{ m_Marker = false; return (* this); }$/;"	f	class:common_structures::graph_array::arc
unmark	.\DSF\tri_stripper_101\graph_array.h	/^		node & unmark()									{ m_Marker = false; return (* this); }$/;"	f	class:common_structures::graph_array::node
unmark_arc	.\DSF\tri_stripper_101\graph_array.h	/^class unmark_arc$/;"	c	namespace:common_structures
unmark_arcs	.\DSF\tri_stripper_101\graph_array.h	/^void unmark_arcs(graph_array<nodetype, arctype> & G)$/;"	f	namespace:common_structures
unmark_arcs_from_node	.\DSF\tri_stripper_101\graph_array.h	/^void unmark_arcs_from_node(graph_node & N)$/;"	f	namespace:common_structures
unmark_nodes	.\DSF\tri_stripper_101\graph_array.h	/^void unmark_nodes(graph_array<nodetype, arctype> & G)$/;"	f	namespace:common_structures
unsignedInteger_	.\lib_json\src\test_lib_json\main.cpp	/^   Json::Value unsignedInteger_;$/;"	m	struct:ValueTest	file:
unsplittable	.\WEDWindows\WED_GroupCommands.cpp	/^static int	unsplittable(ISelectable * base, void * ref)$/;"	f	file:
unused	.\Utils\unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	m	struct:TagunzFile__
unused	.\Utils\zip.c	/^  uLong  unused; \/* for future use and alignement *\/$/;"	m	struct:linkedlist_datablock_internal_s	file:
unused	.\Utils\zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	m	struct:TagzipFile__
unused_master_index	.\Utils\PolyRasterUtils.h	/^	int			unused_master_index;	\/\/ The first unused master.$/;"	m	struct:PolyRasterizer
unzClose	.\Utils\unzip.c	/^extern int ZEXPORT unzClose (unzFile file)$/;"	f
unzCloseCurrentFile	.\Utils\unzip.c	/^extern int ZEXPORT unzCloseCurrentFile ($/;"	f
unzFile	.\Utils\unzip.h	/^typedef unzFile__ *unzFile;$/;"	t
unzFile	.\Utils\unzip.h	/^typedef voidp unzFile;$/;"	t
unzFile__	.\Utils\unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	t	typeref:struct:TagunzFile__
unzGetCurrentFileInfo	.\Utils\unzip.c	/^extern int ZEXPORT unzGetCurrentFileInfo ($/;"	f
unzGetGlobalComment	.\Utils\unzip.c	/^extern int ZEXPORT unzGetGlobalComment ($/;"	f
unzGetGlobalInfo	.\Utils\unzip.c	/^extern int ZEXPORT unzGetGlobalInfo (unzFile file,unz_global_info * pglobal_info)$/;"	f
unzGetLocalExtrafield	.\Utils\unzip.c	/^extern int ZEXPORT unzGetLocalExtrafield ($/;"	f
unzGoToFirstFile	.\Utils\unzip.c	/^extern int ZEXPORT unzGoToFirstFile ($/;"	f
unzGoToNextFile	.\Utils\unzip.c	/^extern int ZEXPORT unzGoToNextFile (unzFile file)$/;"	f
unzLocateFile	.\Utils\unzip.c	/^extern int ZEXPORT unzLocateFile ($/;"	f
unzOpen	.\Utils\unzip.c	/^extern unzFile ZEXPORT unzOpen (const char *path)$/;"	f
unzOpenCurrentFile	.\Utils\unzip.c	/^extern int ZEXPORT unzOpenCurrentFile ($/;"	f
unzReadCurrentFile	.\Utils\unzip.c	/^extern int ZEXPORT unzReadCurrentFile  ($/;"	f
unzStringFileNameCompare	.\Utils\unzip.c	/^extern int ZEXPORT unzStringFileNameCompare (const char* fileName1,const char* fileName2,int iCaseSensitivity)$/;"	f
unz_copyright	.\Utils\unzip.c	/^const char unz_copyright[] =$/;"	v
unz_file_info	.\Utils\unzip.h	/^} unz_file_info;$/;"	t	typeref:struct:unz_file_info_s
unz_file_info_internal	.\Utils\unzip.c	/^} unz_file_info_internal;$/;"	t	typeref:struct:unz_file_info_internal_s	file:
unz_file_info_internal_s	.\Utils\unzip.c	/^typedef struct unz_file_info_internal_s$/;"	s	file:
unz_file_info_s	.\Utils\unzip.h	/^typedef struct unz_file_info_s$/;"	s
unz_global_info	.\Utils\unzip.h	/^} unz_global_info;$/;"	t	typeref:struct:unz_global_info_s
unz_global_info_s	.\Utils\unzip.h	/^typedef struct unz_global_info_s$/;"	s
unz_s	.\Utils\unzip.c	/^} unz_s;$/;"	t	typeref:struct:__anon102	file:
unzeof	.\Utils\unzip.c	/^extern int ZEXPORT unzeof ($/;"	f
unzlocal_CheckCurrentFileCoherencyHeader	.\Utils\unzip.c	/^local int unzlocal_CheckCurrentFileCoherencyHeader ($/;"	f
unzlocal_DosDateToTmuDate	.\Utils\unzip.c	/^local void unzlocal_DosDateToTmuDate (uLong ulDosDate,tm_unz*  ptm)$/;"	f
unzlocal_GetCurrentFileInfoInternal	.\Utils\unzip.c	/^local int unzlocal_GetCurrentFileInfoInternal (unzFile file,$/;"	f
unzlocal_SearchCentralDir	.\Utils\unzip.c	/^local uLong unzlocal_SearchCentralDir(FILE * fin)$/;"	f
unzlocal_getByte	.\Utils\unzip.c	/^local int unzlocal_getByte(FILE * fin,int * pi)$/;"	f
unzlocal_getLong	.\Utils\unzip.c	/^local int unzlocal_getLong (FILE * fin, uLong * pX)$/;"	f
unzlocal_getShort	.\Utils\unzip.c	/^local int unzlocal_getShort (FILE * fin,uLong * pX)$/;"	f
unztell	.\Utils\unzip.c	/^extern z_off_t ZEXPORT unztell ($/;"	f
update	.\DSF\tri_stripper_101\heap_array.h	/^inline void heap_array<T, CmpT>::update(size_t i, const T & Elem) {$/;"	f	class:common_structures::heap_array
update_anim_op	.\AC3DPlugins\obj_update.cpp	/^struct	update_anim_op {$/;"	s	file:
update_listbox_sel	.\AC3DPlugins\XPlaneSupport.tcl	/^proc update_listbox_sel { lb tv } {$/;"	p
update_q	.\XESCore\MeshSimplify.cpp	/^void		MeshSimplify::update_q(CDT::Vertex_handle q)$/;"	f	class:MeshSimplify
update_rotate	.\AC3DPlugins\obj_update.cpp	/^	update_rotate,$/;"	e	enum:__anon4	file:
update_static_trans	.\AC3DPlugins\obj_update.cpp	/^	update_static_trans$/;"	e	enum:__anon4	file:
update_trans	.\AC3DPlugins\obj_update.cpp	/^	update_trans,$/;"	e	enum:__anon4	file:
urad	.\XESCore\TensorRoads.cpp	/^	const DEMGeo *	urad;$/;"	m	struct:Tensor_info	file:
urban_avg_max	.\XESCore\Zoning.h	/^	float		urban_avg_min,	urban_avg_max;			\/\/ Average urbanization level$/;"	m	struct:ZoningRule_t
urban_avg_min	.\XESCore\Zoning.h	/^	float		urban_avg_min,	urban_avg_max;			\/\/ Average urbanization level$/;"	m	struct:ZoningRule_t
urban_density	.\XESCore\Zoning.h	/^	float		urban_density;$/;"	m	struct:LandClassInfo_t
urban_density_max	.\XESCore\DEMTables.h	/^	float			urban_density_max;$/;"	m	struct:NaturalTerrainRule_t
urban_density_min	.\XESCore\DEMTables.h	/^	float			urban_density_min;$/;"	m	struct:NaturalTerrainRule_t
urban_radial_max	.\XESCore\DEMTables.h	/^	float			urban_radial_max;$/;"	m	struct:NaturalTerrainRule_t
urban_radial_min	.\XESCore\DEMTables.h	/^	float			urban_radial_min;$/;"	m	struct:NaturalTerrainRule_t
urban_square	.\XESCore\DEMTables.h	/^	int				urban_square;$/;"	m	struct:NaturalTerrainRule_t
urban_trans_max	.\XESCore\DEMTables.h	/^	float			urban_trans_max;$/;"	m	struct:NaturalTerrainRule_t
urban_trans_min	.\XESCore\DEMTables.h	/^	float			urban_trans_min;$/;"	m	struct:NaturalTerrainRule_t
usage	.\XESCore\BlockDefs.h	/^	int		usage;$/;"	m	struct:BLOCK_face_data
usage_Empty	.\XESCore\BlockDefs.h	/^	usage_Empty,$/;"	e	enum:__anon128
usage_Forest	.\XESCore\BlockDefs.h	/^	usage_Forest,$/;"	e	enum:__anon128
usage_OOB	.\XESCore\BlockDefs.h	/^	usage_OOB$/;"	e	enum:__anon128
usage_Point_Feature	.\XESCore\BlockDefs.h	/^	usage_Point_Feature,$/;"	e	enum:__anon128
usage_Polygonal_Feature	.\XESCore\BlockDefs.h	/^	usage_Polygonal_Feature,	$/;"	e	enum:__anon128
usage_Road	.\XESCore\BlockDefs.h	/^	usage_Road,$/;"	e	enum:__anon128
usage_Road_End	.\XESCore\BlockDefs.h	/^	usage_Road_End,$/;"	e	enum:__anon128
usage_Steep	.\XESCore\BlockDefs.h	/^	usage_Steep,$/;"	e	enum:__anon128
use_gt_poly	.\Tiger\TigerImport.cpp	/^	int					use_gt_poly;		\/\/ If this is set and we are an area feature in the census, make an area feature.$/;"	m	struct:FeatureInfo_t	file:
use_mode	.\XESCore\NetTables.h	/^	int			use_mode;$/;"	m	struct:NetRepInfo
used_	.\lib_json\src\lib_json\json_batchallocator.h	/^      AllocatedType *used_;$/;"	m	struct:Json::BatchAllocator::BatchInfo
userId	.\WEDImportExport\WED_VerTable.h	/^	int userId;$/;"	m	struct:VerInfo_t
userName	.\WEDImportExport\WED_VerTable.h	/^	string userName;$/;"	m	struct:VerInfo_t
usqr	.\XESCore\TensorRoads.cpp	/^	const DEMGeo *	usqr;$/;"	m	struct:Tensor_info	file:
utrn_max	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	utrn_min;	float	utrn_max;$/;"	m	struct:RF_WizardParams	file:
utrn_min	.\RenderFarmUI\RF_SpreadsheetWizard.cpp	/^	float	utrn_min;	float	utrn_max;$/;"	m	struct:RF_WizardParams	file:
uv	.\WEDCore\WED_GISUtils.cpp	/^	Point2	uv;$/;"	m	struct:uv_vert	file:
uv_begin	.\WEDCore\WED_GISUtils.cpp	/^static void CALLBACK uv_begin(GLenum mode)$/;"	f	file:
uv_end	.\WEDCore\WED_GISUtils.cpp	/^static void CALLBACK uv_end()$/;"	f	file:
uv_tri	.\WEDCore\WED_GISUtils.cpp	/^static void uv_tri(const uv_vert * a,const uv_vert * b,const uv_vert * c)$/;"	f	file:
uv_vert	.\WEDCore\WED_GISUtils.cpp	/^	uv_vert() { }$/;"	f	struct:uv_vert
uv_vert	.\WEDCore\WED_GISUtils.cpp	/^	uv_vert(const Point2& ll, const Point2& st) : xy(ll), uv(st) { }$/;"	f	struct:uv_vert
uv_vert	.\WEDCore\WED_GISUtils.cpp	/^struct uv_vert {$/;"	s	file:
uv_vertex	.\WEDCore\WED_GISUtils.cpp	/^static void CALLBACK uv_vertex(const GLfloat * v)$/;"	f	file:
uv_vertex_info_t	.\AC3DPlugins\uv_mapper.cpp	/^struct	uv_vertex_info_t {$/;"	s	file:
uvs	.\WEDImportExport\WED_DSFImport.cpp	/^	vector<BezierPoint2>pts,uvs;$/;"	m	class:DSF_Importer	file:
v	.\Obj\XObjDefs.h	/^	float					v[3];		\/\/ angle for rotation, XYZ for translation$/;"	m	struct:XObjKey
v	.\Obj\XObjDefs.h	/^	float	v[3];$/;"	m	struct:vec_rgb
v	.\Obj\XObjDefs.h	/^	float	v[3];$/;"	m	struct:vec_tex
v	.\RenderFarmUI\RF_SelectionTool.cpp	/^	Pmwx::Vertex_handle	v;$/;"	m	struct:NearestVertexToPt_t	file:
v	.\RenderFarmUI\RF_SelectionTool.cpp	/^	PointFeatureSelection	v;$/;"	m	struct:NearestPFSToPt_t	file:
v	.\Utils\CompGeomDefs3.h	/^	Vector3	v;$/;"	m	struct:Line3
v	.\Utils\STLUtils.h	/^	value_type	v[N];$/;"	m	struct:split_seq
v1	.\AC3DPlugins\obj_update.cpp	/^	float v1, v2;$/;"	m	struct:update_anim_op	file:
v1	.\XESCore\MapHelpers.h	/^	typename Arr::Vertex_handle	v1;$/;"	m	class:check_split_zone_visitor
v1_max	.\Obj\XObjDefs.h	/^	float					v1_min, v1_max;$/;"	m	struct:XObjManip8
v1_min	.\Obj\XObjDefs.h	/^	float					v1_min, v1_max;$/;"	m	struct:XObjManip8
v2	.\AC3DPlugins\obj_update.cpp	/^	float v1, v2;$/;"	m	struct:update_anim_op	file:
v2	.\XESCore\MapHelpers.h	/^	typename Arr::Vertex_handle	v2;$/;"	m	class:check_split_zone_visitor
v2_max	.\Obj\XObjDefs.h	/^	float					v2_min, v2_max;$/;"	m	struct:XObjManip8
v2_min	.\Obj\XObjDefs.h	/^	float					v2_min, v2_max;$/;"	m	struct:XObjManip8
v7	.\Obj\XObjDefs.h	/^	int				v7;$/;"	m	struct:cmd_info
v8	.\Obj\XObjDefs.h	/^	int				v8;$/;"	m	struct:cmd_info
vadd	.\Utils\trackball.c	/^vadd(const float *src1, const float *src2, float *dst)$/;"	f
val	.\WEDEntities\WED_Thing.h	/^	WED_Thing * val;$/;"	m	class:WED_TypeField
valid	.\DSF\tri_stripper_101\heap_array.h	/^inline bool heap_array<T, CmpT>::valid(size_t i) const {$/;"	f	class:common_structures::heap_array
valid	.\XESCore\DEMDefs.h	/^inline bool	DEMGeo::valid(address a) const$/;"	f	class:DEMGeo
valid	.\XESCore\DEMDefs.h	/^inline bool	DEMGeo::valid(const coordinates& c) const$/;"	f	class:DEMGeo
valid	.\XESCore\DEMDefs.h	/^inline bool	DEMGeo::valid(iterator i) const$/;"	f	class:DEMGeo
validate	.\Utils\UTL_interval.h	/^void	UTL_interval<T>::validate(void) const$/;"	f	class:UTL_interval
validate_poly_closed	.\WEDCore\WED_Clipping.cpp	/^bool validate_poly_closed(I begin, I end)$/;"	f
validate_polygon_links	.\WEDCore\WED_Clipping.cpp	/^bool validate_polygon_links(const C& segs)$/;"	f
value	.\Obj\XObjBuilder.cpp	/^	float value;$/;"	m	union:__anon40	file:
value	.\WEDCore\WED_PropertyHelper.h	/^	double			value;$/;"	m	class:WED_PropDoubleText
value	.\WEDCore\WED_PropertyHelper.h	/^	int				value;$/;"	m	class:WED_PropBoolText
value	.\WEDCore\WED_PropertyHelper.h	/^	int				value;$/;"	m	class:WED_PropIntText
value	.\WEDCore\WED_PropertyHelper.h	/^	int			value;$/;"	m	class:WED_PropIntEnum
value	.\WEDCore\WED_PropertyHelper.h	/^	set<int>	value;$/;"	m	class:WED_PropIntEnumBitfield
value	.\WEDCore\WED_PropertyHelper.h	/^	set<int>	value;$/;"	m	class:WED_PropIntEnumSet
value	.\WEDCore\WED_PropertyHelper.h	/^	string			value;$/;"	m	class:WED_PropFileText
value	.\WEDCore\WED_PropertyHelper.h	/^	string			value;$/;"	m	class:WED_PropStringText
valueToQuotedString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToQuotedString( const char *value )$/;"	f	namespace:Json
valueToString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToString( Int value )$/;"	f	namespace:Json
valueToString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToString( LargestInt value )$/;"	f	namespace:Json
valueToString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToString( LargestUInt value )$/;"	f	namespace:Json
valueToString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToString( UInt value )$/;"	f	namespace:Json
valueToString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToString( bool value )$/;"	f	namespace:Json
valueToString	.\lib_json\src\lib_json\json_writer.cpp	/^std::string valueToString( double value )$/;"	f	namespace:Json
value_	.\lib_json\include\json\value.h	/^      } value_;$/;"	m	class:Json::Value	typeref:union:Json::Value::ValueHolder
value_linear	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::value_linear(double lon, double lat) const$/;"	f	class:DEMGeo
value_type	.\Utils\RTree2.h	/^	typedef	T							value_type;$/;"	t	class:RTree2
value_type	.\Utils\STLUtils.h	/^	typedef Value									value_type;$/;"	t	class:pqueue
value_type	.\Utils\STLUtils.h	/^	typedef typename S::value_type	value_type;$/;"	t	struct:filtered_seq
value_type	.\Utils\STLUtils.h	/^	typedef typename S::value_type	value_type;$/;"	t	struct:split_seq
value_type	.\Utils\STLUtils.h	/^	typedef typename T::value_type			value_type;$/;"	t	struct:const_sequence_for_container
value_type	.\Utils\STLUtils.h	/^	typedef typename T::value_type		value_type;$/;"	t	struct:sequence_for_container
value_type	.\Utils\UTL_interval.h	/^	typedef	pair<T,T>							value_type;$/;"	t	class:UTL_interval::const_iterator
values	.\RawImport\ShapeIO.cpp	/^	vector<string>		values;$/;"	m	struct:shape_pattern_t	file:
values	.\XESCore\DEMDefs.cpp	/^	float	values[HIST_MAX];$/;"	m	struct:HistoHelper	file:
vap_lites_code1	.\XESCore\AptDefs.h	/^	int			vap_lites_code1;$/;"	m	struct:AptPavement_t
vap_lites_code2	.\XESCore\AptDefs.h	/^	int			vap_lites_code2;$/;"	m	struct:AptPavement_t
var	.\AC3DPlugins\tcl_utils.h	/^	double			var;$/;"	m	class:TCL_linked_vard
var	.\AC3DPlugins\tcl_utils.h	/^	int				var;$/;"	m	class:TCL_linked_vari
var	.\AC3DPlugins\tcl_utils.h	/^	string			var;$/;"	m	class:TCL_linked_vars
var_name	.\AC3DPlugins\tcl_utils.h	/^	char *			var_name;$/;"	m	class:TCL_linked_vard
var_name	.\AC3DPlugins\tcl_utils.h	/^	char *			var_name;$/;"	m	class:TCL_linked_vari
var_name	.\AC3DPlugins\tcl_utils.h	/^	char *			var_name;$/;"	m	class:TCL_linked_vars
vari	.\OneOffs\GenTerrain.c	/^	int				vari;$/;"	m	struct:__anon62	file:
variant	.\XESCore\Zoning.h	/^	int			variant;$/;"	m	struct:EdgeRule_t
variant	.\XESCore\Zoning.h	/^	int			variant;$/;"	m	struct:FillRule_t
variant	.\XESCore\Zoning.h	/^	int		variant;$/;"	m	struct:FacadeSpelling_t
variant_	.\RenderFarmUI\RF_Main.cpp	/^	float variant_;$/;"	m	struct:is_same_terrain_c	file:
variant_prefix	.\XESCore\DEMTables.h	/^	string			variant_prefix;$/;"	m	struct:Regionalization_t
vars	.\AC3DPlugins\tcl_utils.h	/^	vector<TCL_linked_vard *>		vars;$/;"	m	class:TCL_linked_vardv
vars	.\AC3DPlugins\tcl_utils.h	/^	vector<TCL_linked_vari *>		vars;$/;"	m	class:TCL_linked_variv
vars	.\AC3DPlugins\tcl_utils.h	/^	vector<TCL_linked_vars *>		vars;$/;"	m	class:TCL_linked_varsv
vasi_angle1	.\XESCore\AptDefs.h	/^	int			vasi_angle1;	\/\/  x100$/;"	m	struct:AptPavement_t
vasi_angle2	.\XESCore\AptDefs.h	/^	int			vasi_angle2;	\/\/ x100$/;"	m	struct:AptPavement_t
vbo_geo	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned int	vbo_geo;$/;"	m	struct:embed_props_t	file:
vbo_idx	.\Obj\XObjWriteEmbedded.cpp	/^	unsigned int	vbo_idx;$/;"	m	struct:embed_props_t	file:
vcopy	.\Utils\trackball.c	/^vcopy(const float *v1, float *v2)$/;"	f
vcross	.\Utils\trackball.c	/^vcross(const float *v1, const float *v2, float *cross)$/;"	f
vdot	.\Utils\trackball.c	/^vdot(const float *v1, const float *v2)$/;"	f
vec3_assign	.\Utils\MatrixUtils.cpp	/^void	vec3_assign(GLdouble vec[3], GLdouble x, GLdouble y, GLdouble z)$/;"	f
vec3_cross	.\Utils\MatrixUtils.cpp	/^void	vec3_cross(GLdouble dst[3], GLdouble a[3], GLdouble b[3])$/;"	f
vec3_dot	.\Utils\MatrixUtils.cpp	/^GLdouble vec3_dot(GLdouble op1[3], GLdouble op2[3])$/;"	f
vec3_length	.\Utils\MatrixUtils.cpp	/^double	vec3_length(GLdouble	vec[3])$/;"	f
vec3_normalize	.\Utils\MatrixUtils.cpp	/^void	vec3_normalize(GLdouble vec[3])$/;"	f
vec_heading_max	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntText			vec_heading_max;$/;"	m	class:WED_ATCRunwayUse
vec_heading_min	.\WEDEntities\WED_ATCRunwayUse.h	/^	WED_PropIntText			vec_heading_min;		\/\/ This is the range of legal vectors tower can issue.  min==max -> runway heading only, no DVA.$/;"	m	class:WED_ATCRunwayUse
vec_rgb	.\Obj\XObjDefs.h	/^struct	vec_rgb {$/;"	s
vec_tex	.\Obj\XObjDefs.h	/^struct	vec_tex {$/;"	s
vector	.\Obj\XDefs.h	144;"	d
vectorPool	.\DSF\DSFLibWrite.cpp	/^	DSF32BitPointPool	vectorPool;$/;"	m	class:DSFFileWriterImp	file:
vectorPool	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSF32BitPointPool	vectorPool;$/;"	m	class:DSFFileWriterImp	file:
vectorPoolCurved	.\DSF\DSFLibWrite.cpp	/^	DSF32BitPointPool	vectorPoolCurved;$/;"	m	class:DSFFileWriterImp	file:
vectorPoolCurved	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^	DSF32BitPointPool	vectorPoolCurved;$/;"	m	class:DSFFileWriterImp	file:
veg_density	.\XESCore\Zoning.h	/^	float		veg_density;$/;"	m	struct:LandClassInfo_t
vers_	.\WEDImportExport\WED_VerTable.cpp	/^	const VerVector * vers_;$/;"	m	struct:sort_by_ver	file:
version	.\DSF\DSFDefs.h	/^	int32_t	version;$/;"	m	struct:DSFHeader_t
version	.\DSF\DSFDefs.h	/^	uint8_t		version;$/;"	m	struct:DSFRasterHeader_t
version	.\DSF\dsflib_013005\DSFDefs.h	/^	int		version;$/;"	m	struct:DSFHeader_t
version	.\RawImport\gshhs.h	/^	int version;			\/* Version of GSHHS polygon (3 is latest and first with this item) *\/$/;"	m	struct:GSHHS
version	.\Utils\MemFileUtils.cpp	/^  char version[2];		\/* 263 *\/$/;"	m	struct:tar_header	file:
version	.\Utils\unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:unz_file_info_s
version	.\XESCore\DEMIO.cpp	/^	char			version;					\/\/ Must be	'1'$/;"	m	struct:DTED_UHL_t	file:
version_needed	.\Utils\unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:unz_file_info_s
vert_accuracy	.\XESCore\DEMIO.cpp	/^	char			vert_accuracy[4];			\/\/ Absolute vertical accuray, 90th percentile in meters, e.g. 0026 = 26m might be "NA"$/;"	m	struct:DTED_UHL_t	file:
vert_mode	.\WEDCore\WED_GISUtils.cpp	/^static GLenum				vert_mode = GL_NONE;$/;"	v	file:
vert_props	.\OneOffs\gen_roads10.h	/^struct vert_props {$/;"	s
vertex_lookup_table	.\XESCore\MapAlgs.cpp	/^	map<Point_2, Pmwx::Vertex_handle> *		vertex_lookup_table;$/;"	m	struct:UpdatePmwx	file:
vertices	.\DSF\DSFLibWrite.cpp	/^		DSFTupleVector			vertices;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
vertices	.\DSF\DSFPointPool.h	/^	DSFTupleVector		vertices;$/;"	m	struct:DSFPrimitive
vertices	.\DSF\dsflib_013005\DSFLibWrite.cpp	/^		DSFTupleVector			vertices;$/;"	m	struct:DSFFileWriterImp::TriPrimitive	file:
vertices	.\RenderFarmUI\RF_DrawMap.h	/^	VertexTree		vertices;$/;"	m	struct:PmwxIndex_t
vertices	.\XESCore\MeshAlgs.cpp	/^	vector<mesh_match_vertex_t>	vertices;$/;"	m	struct:mesh_match_t	file:
vertices	.\XESCore\TriFan.h	/^	set<CDT::Vertex_handle>		vertices;			\/\/ Vertices that we need to tri fan for building up the struct$/;"	m	class:TriFanBuilder
vertices_in_cluster_sequence	.\XESCore\MeshConformer.h	/^  vertices_in_cluster_sequence(const Vertex_handle& vh,$/;"	f	class:CGAL::Triangulation_conformer_any_2
verts	.\WEDCore\WED_GISUtils.cpp	/^static vector<const uv_vert *>	verts;$/;"	v	file:
viewCmd_Airports	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_Airports,$/;"	e	enum:__anon80
viewCmd_ColorMapAppr	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ColorMapAppr,$/;"	e	enum:__anon80
viewCmd_ColorMapFeat	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ColorMapFeat,$/;"	e	enum:__anon80
viewCmd_ColorMapSupr	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ColorMapSupr,$/;"	e	enum:__anon80
viewCmd_ColorMapTerr	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ColorMapTerr,$/;"	e	enum:__anon80
viewCmd_ColorMapZone	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ColorMapZone,$/;"	e	enum:__anon80
viewCmd_DEMChoice	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_DEMChoice = GUI_APP_MENUS,$/;"	e	enum:__anon80
viewCmd_DEMChoice_Start	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_DEMChoice_Start,$/;"	e	enum:__anon80
viewCmd_DEMChoice_Stop	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_DEMChoice_Stop = viewCmd_DEMChoice_Start + num_dem_cmds,$/;"	e	enum:__anon80
viewCmd_DEMDataChoice	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_DEMDataChoice,$/;"	e	enum:__anon80
viewCmd_DEMDataChoice_Start	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_DEMDataChoice_Start,$/;"	e	enum:__anon80
viewCmd_DEMDataChoice_Stop	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_DEMDataChoice_Stop = viewCmd_DEMDataChoice_Start + num_dem_cmds, $/;"	e	enum:__anon80
viewCmd_MeshLines	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_MeshLines,$/;"	e	enum:__anon80
viewCmd_MeshPoints	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_MeshPoints,$/;"	e	enum:__anon80
viewCmd_MeshTerrains	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_MeshTerrains,$/;"	e	enum:__anon80
viewCmd_MeshTrisHi	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_MeshTrisHi,$/;"	e	enum:__anon80
viewCmd_NextDEM	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_NextDEM,$/;"	e	enum:__anon80
viewCmd_PrevDEM	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_PrevDEM,$/;"	e	enum:__anon80
viewCmd_RecalcDEM	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_RecalcDEM,$/;"	e	enum:__anon80
viewCmd_ShowExtent	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ShowExtent,$/;"	e	enum:__anon80
viewCmd_ShowGrids	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ShowGrids,$/;"	e	enum:__anon80
viewCmd_ShowShading	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ShowShading,$/;"	e	enum:__anon80
viewCmd_ShowSuper	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ShowSuper,	$/;"	e	enum:__anon80
viewCmd_ShowTensor	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ShowTensor,$/;"	e	enum:__anon80
viewCmd_VecMap	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_VecMap,$/;"	e	enum:__anon80
viewCmd_ZoomExt	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ZoomExt,	$/;"	e	enum:__anon80
viewCmd_ZoomLoad	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ZoomLoad,$/;"	e	enum:__anon80
viewCmd_ZoomProj	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ZoomProj,$/;"	e	enum:__anon80
viewCmd_ZoomSel	.\RenderFarmUI\RF_Msgs.h	/^	viewCmd_ZoomSel,$/;"	e	enum:__anon80
view_Count	.\XPTools\ObjEdit.cpp	/^	view_Count$/;"	e	enum:__anon143	file:
view_HiddenSurfaces	.\XPTools\ObjEdit.cpp	/^	view_HiddenSurfaces = 0,$/;"	e	enum:__anon143	file:
view_Patches	.\XPTools\ObjEdit.cpp	/^	view_Patches,$/;"	e	enum:__anon143	file:
view_Projection	.\XPTools\ObjEdit.cpp	/^	view_Projection,$/;"	e	enum:__anon143	file:
view_mode	.\RenderFarmUI\RF_MapView.cpp	/^	int				view_mode;$/;"	m	struct:DEMViewInfo_t	file:
viewer_id	.\WEDEntities\WED_Thing.h	/^	set<int>		viewer_id;				\/\/ These are MY vieweres!  They are watching me.$/;"	m	class:WED_Thing
virtual_table	.\OneOffs\gen_roads10.h	/^	virtual_table() { all.push_back(this); }$/;"	f	class:virtual_table
virtual_table	.\OneOffs\gen_roads10.h	/^class	virtual_table {$/;"	c
virtual_type	.\OneOffs\gen_roads10.h	/^	int	virtual_type;$/;"	m	class:virtual_table
vis	.\AC3DPlugins\obj_anim.cpp	/^static int vis = 1;$/;"	v	file:
vis_min_sm	.\WEDEntities\WED_ATCFlow.h	/^	WED_PropIntText				vis_min_sm;$/;"	m	class:WED_ATCFlow
vis_x	.\WEDCore\WED_TexMgr.h	/^		int			vis_x;$/;"	m	struct:WED_TexMgr::TexInfo
vis_y	.\WEDCore\WED_TexMgr.h	/^		int			vis_y;$/;"	m	struct:WED_TexMgr::TexInfo
visibility_sm	.\XESCore\AptDefs.h	/^	int							visibility_sm;$/;"	m	struct:AptFlow_t
visit_ccb	.\XESCore\MapBuffer.cpp	/^static void visit_ccb(Face_handle from, set<Face_handle>& to_visit, Pmwx::Ccb_halfedge_circulator stop, int depth)$/;"	f	file:
visit_face	.\XESCore\MapBuffer.cpp	/^static void visit_face(Face_handle f, set<Face_handle>& to_visit, int depth)$/;"	f	file:
visit_pt_in_tri	.\XESCore\MapHelpers.h	/^	visit_pt_in_tri(const Point_2& a, const Point_2& b, const Point_2& c) : tri(a,b,c)$/;"	f	struct:visit_pt_in_tri
visit_pt_in_tri	.\XESCore\MapHelpers.h	/^struct visit_pt_in_tri {$/;"	s
visualize_bezier	.\XESCore\DSFBuilder.cpp	/^void visualize_bezier(list<Point2c>& bez, bool want_straight_segs, float nt, float r)$/;"	f
visualize_bezier_seq	.\XESCore\BezierApprox.cpp	/^void visualize_bezier_seq(__Iter first, __Iter last, int r, int g, int b)$/;"	f
vk	.\GUI\GUI_Commander.h	/^				int				vk;$/;"	m	struct:GUI_Commander::deferred_cmd_or_key
vlength	.\Utils\trackball.c	/^vlength(const float *v)$/;"	f
vnormal	.\Utils\trackball.c	/^vnormal(float *v)$/;"	f
vscale	.\Utils\trackball.c	/^vscale(float *v, float div)$/;"	f
vset	.\Utils\trackball.c	/^vset(float *v, float x, float y, float z)$/;"	f
vsub	.\Utils\trackball.c	/^vsub(const float *src1, const float *src2, float *dst)$/;"	f
vzero	.\Utils\trackball.c	/^vzero(float *v)$/;"	f
w	.\OneOffs\gen_roads.cpp	/^	float w;$/;"	m	class:road_spacer	file:
w	.\OneOffs\gen_roads10.h	/^	float	w[4];$/;"	m	struct:perlin_params
w	.\WEDWindows\WED_StartWindow.cpp	/^	WED_DocumentWindow *	w;$/;"	m	struct:open_doc_t	file:
w	.\XESCore\Hydro2.cpp	/^	double n,s,e,w;$/;"	m	struct:no_sharp_pt	file:
w	.\XPTools\TaxiMaker.cpp	/^	int						w;$/;"	m	struct:taxi_element_t	file:
wall	.\Obj\XObjBuilder.h	/^	int			wall;				int		o_wall;$/;"	m	class:XObjBuilder
wall_type	.\WEDEntities\WED_FacadeNode.h	/^	WED_PropIntEnum		wall_type;$/;"	m	class:WED_FacadeNode
walls	.\WEDCore\WED_ResourceMgr.h	/^	vector<string>	walls;$/;"	m	struct:fac_info_t
walls	.\WEDImportExport\WED_DSFImport.cpp	/^	vector<int>			walls;$/;"	m	class:DSF_Importer	file:
want_bezier	.\WEDImportExport\WED_DSFImport.cpp	/^	bool				want_bezier;$/;"	m	class:DSF_Importer	file:
want_last	.\XESCore\BezierApprox.cpp	/^	bool		want_last;$/;"	m	struct:bezier_approx_seq	file:
want_prim	.\XESCore\Zoning.h	/^	int			want_prim;$/;"	m	struct:ZoningRule_t
want_this_thing	.\RawImport\ShapeIO.cpp	/^static int want_this_thing(DBFHandle db, int shape_id, const shape_pattern_vector& rules, int * value)$/;"	f	file:
want_tri_pred_f	.\XESTools\GISTool_ProcessingCmds.cpp	/^typedef bool(* want_tri_pred_f)(CDT::Face_handle f);$/;"	t	file:
want_uv	.\WEDImportExport\WED_DSFImport.cpp	/^	bool				want_uv;$/;"	m	class:DSF_Importer	file:
want_wall	.\WEDImportExport\WED_DSFImport.cpp	/^	bool				want_wall;$/;"	m	class:DSF_Importer	file:
water	.\Tiger\TIGERTypes.h	/^	int							water;		\/\/ Water code - is this polygon wet?$/;"	m	struct:PolygonInfo_t
water_ok	.\Tiger\TigerImport.cpp	/^	int					water_ok;			\/\/ Can import on water$/;"	m	struct:FeatureInfo_t	file:
water_required	.\Tiger\TigerImport.cpp	/^	int					water_required;		\/\/ Must import on water$/;"	m	struct:FeatureInfo_t	file:
wave	.\OneOffs\gen_roads10.h	/^	perlin_params	wave;$/;"	m	struct:obj_placement
wave_height	.\XESCore\MeshDefs.h	/^	double					wave_height;			\/\/ ratio of vegetation to terrain at this vertex.$/;"	m	struct:MeshVertexInfo
wave_x	.\OneOffs\gen_roads10.h	/^	float wave_x, wave_y;$/;"	m	class:shader
wave_y	.\OneOffs\gen_roads10.h	/^	float wave_x, wave_y;$/;"	m	class:shader
way_count	.\OneOffs\osm2shape.c	/^	int			way_count;$/;"	m	struct:rel_info_tag	file:
way_count	.\OneOffs\osm2shape.c	/^static int way_count = 0;$/;"	v	file:
way_free	.\OneOffs\osm2shape.c	/^static int way_free = 0;$/;"	v	file:
way_ids	.\OneOffs\osm2shape.c	/^		int *			way_ids;$/;"	m	union:rel_info_tag::__anon69	file:
way_info_t	.\OneOffs\osm2shape.c	/^} way_info_t;$/;"	t	typeref:struct:__anon66	file:
way_ptrs	.\OneOffs\osm2shape.c	/^		way_info_t **	way_ptrs;		$/;"	m	union:rel_info_tag::__anon69	file:
way_ref_free	.\OneOffs\osm2shape.c	/^static int way_ref_free = 0;$/;"	v	file:
way_roles	.\OneOffs\osm2shape.c	/^	char **				way_roles;$/;"	m	struct:rel_info_tag	file:
ways	.\OneOffs\osm2shape.c	/^	} ways;$/;"	m	struct:rel_info_tag	typeref:union:rel_info_tag::__anon69	file:
ways_now	.\OneOffs\osm2shape.c	/^static int ways_now = 0;$/;"	v	file:
wed_AddATCFlow	.\WEDWindows\WED_Menus.h	/^	wed_AddATCFlow,$/;"	e	enum:__anon125
wed_AddATCFreq	.\WEDWindows\WED_Menus.h	/^	wed_AddATCFreq,$/;"	e	enum:__anon125
wed_AddATCRunwayUse	.\WEDWindows\WED_Menus.h	/^	wed_AddATCRunwayUse,$/;"	e	enum:__anon125
wed_AddATCTimeRule	.\WEDWindows\WED_Menus.h	/^	wed_AddATCTimeRule,$/;"	e	enum:__anon125
wed_AddATCWindRule	.\WEDWindows\WED_Menus.h	/^	wed_AddATCWindRule,$/;"	e	enum:__anon125
wed_ChangeSystem	.\WEDWindows\WED_Menus.h	/^	wed_ChangeSystem,$/;"	e	enum:__anon125
wed_Change_Any	.\WEDCore\WED_Archive.h	/^	wed_Change_Any			 = -1,$/;"	e	enum:__anon108
wed_Change_Any_Ex	.\WEDNetwork\WED_NWLinkAdapter.h	/^					wed_Change_Any_Ex   = 32,$/;"	e	enum:WED_NWLinkAdapter::__anon123
wed_Change_CreateDestroy	.\WEDCore\WED_Archive.h	/^	wed_Change_CreateDestroy =  1$/;"	e	enum:__anon108
wed_Change_Properties	.\WEDEntities\WED_Thing.h	/^	wed_Change_Properties = 8$/;"	e	enum:__anon118
wed_Change_Selection	.\WEDEntities\WED_Thing.h	/^	wed_Change_Selection = 2,$/;"	e	enum:__anon118
wed_Change_Topology	.\WEDEntities\WED_Thing.h	/^	wed_Change_Topology = 4,$/;"	e	enum:__anon118
wed_ControlHandle	.\WEDMap\WED_Colors.h	/^	wed_ControlHandle,$/;"	e	enum:WED_Color
wed_ControlLink	.\WEDMap\WED_Colors.h	/^	wed_ControlLink,$/;"	e	enum:WED_Color
wed_CreateApt	.\WEDWindows\WED_Menus.h	/^	wed_CreateApt,$/;"	e	enum:__anon125
wed_Crop	.\WEDWindows\WED_Menus.h	/^	wed_Crop,$/;"	e	enum:__anon125
wed_EditApt	.\WEDWindows\WED_Menus.h	/^	wed_EditApt,$/;"	e	enum:__anon125
wed_Export1000	.\WEDWindows\WED_Menus.h	/^	wed_Export1000,$/;"	e	enum:__anon125
wed_Export1021	.\WEDWindows\WED_Menus.h	/^	wed_Export1021,$/;"	e	enum:__anon125
wed_Export900	.\WEDWindows\WED_Menus.h	/^	wed_Export900,$/;"	e	enum:__anon125
wed_ExportApt	.\WEDWindows\WED_Menus.h	/^	wed_ExportApt,$/;"	e	enum:__anon125
wed_ExportGateway	.\WEDWindows\WED_Menus.h	/^	wed_ExportGateway,$/;"	e	enum:__anon125
wed_ExportPack	.\WEDWindows\WED_Menus.h	/^	wed_ExportPack,$/;"	e	enum:__anon125
wed_ExportToGateway	.\WEDWindows\WED_Menus.h	/^	wed_ExportToGateway,$/;"	e	enum:__anon125
wed_GhostLink	.\WEDMap\WED_Colors.h	/^	wed_GhostLink,$/;"	e	enum:WED_Color
wed_Group	.\WEDWindows\WED_Menus.h	/^	wed_Group,$/;"	e	enum:__anon125
wed_Header_Text	.\WEDMap\WED_Colors.h	/^	wed_Header_Text,$/;"	e	enum:WED_Color
wed_HelpManual	.\WEDWindows\WED_Menus.h	/^	wed_HelpManual,$/;"	e	enum:__anon125
wed_HelpScenery	.\WEDWindows\WED_Menus.h	/^	wed_HelpScenery$/;"	e	enum:__anon125
wed_Hotzone	.\WEDMap\WED_Colors.h	/^	wed_Hotzone,$/;"	e	enum:WED_Color
wed_Hotzone_Selected	.\WEDMap\WED_Colors.h	/^	wed_Hotzone_Selected,$/;"	e	enum:WED_Color
wed_ILSzone	.\WEDMap\WED_Colors.h	/^	wed_ILSzone,$/;"	e	enum:WED_Color
wed_ILSzone_Selected	.\WEDMap\WED_Colors.h	/^	wed_ILSzone_Selected,$/;"	e	enum:WED_Color
wed_ImportApt	.\WEDWindows\WED_Menus.h	/^	wed_ImportApt,$/;"	e	enum:__anon125
wed_ImportDSF	.\WEDWindows\WED_Menus.h	/^	wed_ImportDSF,$/;"	e	enum:__anon125
wed_ImportGateway	.\WEDWindows\WED_Menus.h	/^	wed_ImportGateway,$/;"	e	enum:__anon125
wed_ImportGatewayExtract	.\WEDWindows\WED_Menus.h	/^	wed_ImportGatewayExtract,$/;"	e	enum:__anon125
wed_ImportOrtho	.\WEDWindows\WED_Menus.h	/^	wed_ImportOrtho,$/;"	e	enum:__anon125
wed_Last	.\WEDMap\WED_Colors.h	/^	wed_Last$/;"	e	enum:WED_Color
wed_Link	.\WEDMap\WED_Colors.h	/^	wed_Link,$/;"	e	enum:WED_Color
wed_Map_Bkgnd	.\WEDMap\WED_Colors.h	/^	wed_Map_Bkgnd,$/;"	e	enum:WED_Color
wed_Map_Gridlines	.\WEDMap\WED_Colors.h	/^	wed_Map_Gridlines,$/;"	e	enum:WED_Color
wed_Map_Matte	.\WEDMap\WED_Colors.h	/^	wed_Map_Matte,$/;"	e	enum:WED_Color
wed_Marquee	.\WEDMap\WED_Colors.h	/^	wed_Marquee,$/;"	e	enum:WED_Color
wed_Merge	.\WEDWindows\WED_Menus.h	/^	wed_Merge,$/;"	e	enum:__anon125
wed_MoveFirst	.\WEDWindows\WED_Menus.h	/^	wed_MoveFirst,$/;"	e	enum:__anon125
wed_MoveLast	.\WEDWindows\WED_Menus.h	/^	wed_MoveLast,$/;"	e	enum:__anon125
wed_MoveNext	.\WEDWindows\WED_Menus.h	/^	wed_MoveNext,$/;"	e	enum:__anon125
wed_MovePrev	.\WEDWindows\WED_Menus.h	/^	wed_MovePrev,$/;"	e	enum:__anon125
wed_NewPackage	.\WEDWindows\WED_Menus.h	/^	wed_NewPackage = GUI_APP_MENUS,$/;"	e	enum:__anon125
wed_ObjDensity1	.\WEDWindows\WED_Menus.h	/^	wed_ObjDensity1,$/;"	e	enum:__anon125
wed_ObjDensity2	.\WEDWindows\WED_Menus.h	/^	wed_ObjDensity2,$/;"	e	enum:__anon125
wed_ObjDensity3	.\WEDWindows\WED_Menus.h	/^	wed_ObjDensity3,$/;"	e	enum:__anon125
wed_ObjDensity4	.\WEDWindows\WED_Menus.h	/^	wed_ObjDensity4,$/;"	e	enum:__anon125
wed_ObjDensity5	.\WEDWindows\WED_Menus.h	/^	wed_ObjDensity5,$/;"	e	enum:__anon125
wed_ObjDensity6	.\WEDWindows\WED_Menus.h	/^	wed_ObjDensity6,$/;"	e	enum:__anon125
wed_OpenPackage	.\WEDWindows\WED_Menus.h	/^	wed_OpenPackage,$/;"	e	enum:__anon125
wed_Overlay	.\WEDWindows\WED_Menus.h	/^	wed_Overlay,$/;"	e	enum:__anon125
wed_Pavement0	.\WEDWindows\WED_Menus.h	/^	wed_Pavement0,$/;"	e	enum:__anon125
wed_Pavement100	.\WEDWindows\WED_Menus.h	/^	wed_Pavement100,$/;"	e	enum:__anon125
wed_Pavement25	.\WEDWindows\WED_Menus.h	/^	wed_Pavement25,$/;"	e	enum:__anon125
wed_Pavement50	.\WEDWindows\WED_Menus.h	/^	wed_Pavement50,$/;"	e	enum:__anon125
wed_Pavement75	.\WEDWindows\WED_Menus.h	/^	wed_Pavement75,$/;"	e	enum:__anon125
wed_PickOverlay	.\WEDWindows\WED_Menus.h	/^	wed_PickOverlay,$/;"	e	enum:__anon125
wed_PropertyBar_Text	.\WEDMap\WED_Colors.h	/^	wed_PropertyBar_Text,$/;"	e	enum:WED_Color
wed_RestorePanes	.\WEDWindows\WED_Menus.h	/^	wed_RestorePanes,$/;"	e	enum:__anon125
wed_Reverse	.\WEDWindows\WED_Menus.h	/^	wed_Reverse,$/;"	e	enum:__anon125
wed_Rotate	.\WEDWindows\WED_Menus.h	/^	wed_Rotate,$/;"	e	enum:__anon125
wed_Runway	.\WEDMap\WED_Colors.h	/^	wed_Runway,						\/\/ In a future version these will be used to color airport taxi routing lines for some of their special properties.$/;"	e	enum:WED_Color
wed_Runway_Selected	.\WEDMap\WED_Colors.h	/^	wed_Runway_Selected,$/;"	e	enum:WED_Color
wed_SelectChild	.\WEDWindows\WED_Menus.h	/^	wed_SelectChild,$/;"	e	enum:__anon125
wed_SelectCrossing	.\WEDWindows\WED_Menus.h	/^	wed_SelectCrossing,$/;"	e	enum:__anon125
wed_SelectDefaultObjects	.\WEDWindows\WED_Menus.h	/^	wed_SelectDefaultObjects,$/;"	e	enum:__anon125
wed_SelectDoubles	.\WEDWindows\WED_Menus.h	/^	wed_SelectDoubles,$/;"	e	enum:__anon125
wed_SelectLibraryObjects	.\WEDWindows\WED_Menus.h	/^	wed_SelectLibraryObjects,$/;"	e	enum:__anon125
wed_SelectLocalObjects	.\WEDWindows\WED_Menus.h	/^	wed_SelectLocalObjects,$/;"	e	enum:__anon125
wed_SelectMissingObjects	.\WEDWindows\WED_Menus.h	/^	wed_SelectMissingObjects,$/;"	e	enum:__anon125
wed_SelectParent	.\WEDWindows\WED_Menus.h	/^	wed_SelectParent,$/;"	e	enum:__anon125
wed_SelectPoly	.\WEDWindows\WED_Menus.h	/^	wed_SelectPoly,$/;"	e	enum:__anon125
wed_SelectThirdPartyObjects	.\WEDWindows\WED_Menus.h	/^	wed_SelectThirdPartyObjects,$/;"	e	enum:__anon125
wed_SelectVertex	.\WEDWindows\WED_Menus.h	/^	wed_SelectVertex,$/;"	e	enum:__anon125
wed_SelectZeroLength	.\WEDWindows\WED_Menus.h	/^	wed_SelectZeroLength,$/;"	e	enum:__anon125
wed_Split	.\WEDWindows\WED_Menus.h	/^	wed_Split,$/;"	e	enum:__anon125
wed_Structure	.\WEDMap\WED_Colors.h	/^	wed_Structure,$/;"	e	enum:WED_Color
wed_StructureLocked	.\WEDMap\WED_Colors.h	/^	wed_StructureLocked,$/;"	e	enum:WED_Color
wed_StructureLockedSelected	.\WEDMap\WED_Colors.h	/^	wed_StructureLockedSelected,$/;"	e	enum:WED_Color
wed_StructureSelected	.\WEDMap\WED_Colors.h	/^	wed_StructureSelected,$/;"	e	enum:WED_Color
wed_Surface_Asphalt	.\WEDMap\WED_Colors.h	/^	wed_Surface_Asphalt,$/;"	e	enum:WED_Color
wed_Surface_Concrete	.\WEDMap\WED_Colors.h	/^	wed_Surface_Concrete,$/;"	e	enum:WED_Color
wed_Surface_Dirt	.\WEDMap\WED_Colors.h	/^	wed_Surface_Dirt,$/;"	e	enum:WED_Color
wed_Surface_DryLake	.\WEDMap\WED_Colors.h	/^	wed_Surface_DryLake,$/;"	e	enum:WED_Color
wed_Surface_Grass	.\WEDMap\WED_Colors.h	/^	wed_Surface_Grass,$/;"	e	enum:WED_Color
wed_Surface_Gravel	.\WEDMap\WED_Colors.h	/^	wed_Surface_Gravel,$/;"	e	enum:WED_Color
wed_Surface_Snow	.\WEDMap\WED_Colors.h	/^	wed_Surface_Snow,$/;"	e	enum:WED_Color
wed_Surface_Transparent	.\WEDMap\WED_Colors.h	/^	wed_Surface_Transparent,$/;"	e	enum:WED_Color
wed_Surface_Water	.\WEDMap\WED_Colors.h	/^	wed_Surface_Water,$/;"	e	enum:WED_Color
wed_Table_Drag_Insert	.\WEDMap\WED_Colors.h	/^	wed_Table_Drag_Insert,$/;"	e	enum:WED_Color
wed_Table_Drag_Into	.\WEDMap\WED_Colors.h	/^	wed_Table_Drag_Into,$/;"	e	enum:WED_Color
wed_Table_Gridlines	.\WEDMap\WED_Colors.h	/^	wed_Table_Gridlines,$/;"	e	enum:WED_Color
wed_Table_Select	.\WEDMap\WED_Colors.h	/^	wed_Table_Select,$/;"	e	enum:WED_Color
wed_Table_SelectText	.\WEDMap\WED_Colors.h	/^	wed_Table_SelectText,$/;"	e	enum:WED_Color
wed_Table_Text	.\WEDMap\WED_Colors.h	/^	wed_Table_Text,$/;"	e	enum:WED_Color
wed_Tabs_Text	.\WEDMap\WED_Colors.h	/^	wed_Tabs_Text,$/;"	e	enum:WED_Color
wed_TextField_Bkgnd	.\WEDMap\WED_Colors.h	/^	wed_TextField_Bkgnd,$/;"	e	enum:WED_Color
wed_TextField_FocusRing	.\WEDMap\WED_Colors.h	/^	wed_TextField_FocusRing,$/;"	e	enum:WED_Color
wed_TextField_Hilite	.\WEDMap\WED_Colors.h	/^	wed_TextField_Hilite,$/;"	e	enum:WED_Color
wed_TextField_Text	.\WEDMap\WED_Colors.h	/^	wed_TextField_Text,$/;"	e	enum:WED_Color
wed_ToggleLines	.\WEDWindows\WED_Menus.h	/^	wed_ToggleLines,$/;"	e	enum:__anon125
wed_ToggleLiveView	.\WEDWindows\WED_Menus.h	/^	wed_ToggleLiveView,$/;"	e	enum:__anon125
wed_TogglePreview	.\WEDWindows\WED_Menus.h	/^	wed_TogglePreview,$/;"	e	enum:__anon125
wed_ToggleTerraserver	.\WEDWindows\WED_Menus.h	/^	wed_ToggleTerraserver,$/;"	e	enum:__anon125
wed_ToggleVertices	.\WEDWindows\WED_Menus.h	/^	wed_ToggleVertices,$/;"	e	enum:__anon125
wed_ToggleWorldMap	.\WEDWindows\WED_Menus.h	/^	wed_ToggleWorldMap,$/;"	e	enum:__anon125
wed_Ungroup	.\WEDWindows\WED_Menus.h	/^	wed_Ungroup,$/;"	e	enum:__anon125
wed_UnitFeet	.\WEDWindows\WED_Menus.h	/^	wed_UnitFeet,$/;"	e	enum:__anon125
wed_UnitMeters	.\WEDWindows\WED_Menus.h	/^	wed_UnitMeters,$/;"	e	enum:__anon125
wed_Validate	.\WEDWindows\WED_Menus.h	/^	wed_Validate,$/;"	e	enum:__anon125
wed_ZoomAll	.\WEDWindows\WED_Menus.h	/^	wed_ZoomAll,$/;"	e	enum:__anon125
wed_ZoomSelection	.\WEDWindows\WED_Menus.h	/^	wed_ZoomSelection,$/;"	e	enum:__anon125
wed_ZoomWorld	.\WEDWindows\WED_Menus.h	/^	wed_ZoomWorld,$/;"	e	enum:__anon125
wed_assert_fail_exception	.\WEDCore\WED_Assert.h	/^class wed_assert_fail_exception : public std::exception {$/;"	c
wed_error_exception	.\WEDCore\WED_Errors.h	/^class wed_error_exception : public std::exception {$/;"	c
wed_nw_cam	.\WEDNetwork\WED_NWDefs.h	/^enum wed_nw_cam{$/;"	g
wed_nw_cmd	.\WEDNetwork\WED_NWDefs.h	/^enum wed_nw_cmd {$/;"	g
wed_nw_con	.\WEDNetwork\WED_NWDefs.h	/^enum wed_nw_con {$/;"	g
wed_nw_msg	.\WEDNetwork\WED_NWDefs.h	/^enum wed_nw_msg {$/;"	g
wed_nw_obj	.\WEDNetwork\WED_NWDefs.h	/^enum wed_nw_obj{$/;"	g
weight	.\RawImport\AptElev.h	/^	double	weight;$/;"	m	struct:RwyInfo
west	.\RawImport\gshhs.h	/^	int west, east, south, north;	\/* min\/max extent in micro-degrees *\/$/;"	m	struct:GSHHS
west	.\RenderFarmUI\RF_Import.cpp	/^	float		west;$/;"	m	struct:RF_ImportState_t	file:
wet_gateway	.\WEDCore\WED_Globals.h	/^		wet_gateway			\/\/ Lates format but with strict checking for gateway.$/;"	e	enum:WED_Export_Target
wet_xplane_1000	.\WEDCore\WED_Globals.h	/^		wet_xplane_1000,	\/\/ X-Plane 10-compatible DSFs - includes, ATC, etc.$/;"	e	enum:WED_Export_Target
wet_xplane_1021	.\WEDCore\WED_Globals.h	/^		wet_xplane_1021,	\/\/ Adds out-of-DSF overlays$/;"	e	enum:WED_Export_Target
wet_xplane_900	.\WEDCore\WED_Globals.h	/^		wet_xplane_900,		\/\/ X-Plane 9-compatible DSFs.$/;"	e	enum:WED_Export_Target
wheelEvent	.\UI\XWin.lin.cpp	/^void XWin::wheelEvent(QWheelEvent* e)$/;"	f	class:XWin
who	.\WEDCore\WED_LibraryMgr.cpp	/^	WED_LibraryMgr * who;$/;"	m	struct:local_scan_t	file:
widen	.\OneOffs\gen_roads10.h	/^	void	widen(float new_width, float new_center)$/;"	f	class:published_road
width	.\DSF\DSFDefs.h	/^	uint32_t	width;$/;"	m	struct:DSFRasterHeader_t
width	.\GUI\GUI_Laftfont.h	/^	int	width;$/;"	m	struct:glyph_metric
width	.\ObjEdit\OE_TexMgr.cpp	/^	int		width;$/;"	m	struct:TexInfo_t	file:
width	.\OneOffs\GenTerrain.c	/^	int 	width;$/;"	m	struct:__anon60	file:
width	.\OneOffs\gen_roads10.h	/^	float	width;$/;"	m	class:published_road
width	.\OneOffs\gen_roads10.h	/^	inline float	width() const { return fabs(x[1] - x[0]); }	$/;"	f	struct:road_segment
width	.\OneOffs\gen_roads10.h	/^	int width;$/;"	m	class:shader
width	.\Utils\BitmapUtils.h	/^	long			width;$/;"	m	struct:ImageInfo
width	.\Utils\RLERegion.h	/^	int		width(void) const { return x2_ - x1_; }$/;"	f	class:RLERegion
width	.\WEDEntities\WED_GISLine_Width.h	/^	WED_PropDoubleTextMeters		width;$/;"	m	class:WED_GISLine_Width
width	.\WEDEntities\WED_GISPoint_HeadingWidthLength.h	/^		WED_PropDoubleTextMeters		width;$/;"	m	class:WED_GISPoint_HeadingWidthLength
width	.\XESCore\NetTables.h	/^	inline float width() const { return semi_l + semi_r; }$/;"	f	struct:NetRepInfo
width	.\XESCore\Zoning.h	/^	float		width;$/;"	m	struct:EdgeRule_t
width	.\XESCore\Zoning.h	/^	float		width;$/;"	m	struct:FacadeChoice_t
width	.\XPTools\DDSTool.cpp	/^		unsigned int width;$/;"	m	struct:ATC_Header_Texture_TAG	file:
width_ant	.\XESCore\Zoning.h	/^	float	width_ant;$/;"	m	struct:PointRule_t
width_for_he	.\XESCore\NetHelpers.h	/^inline float	width_for_he(Pmwx::Halfedge_handle he)$/;"	f
width_free	.\XESCore\Zoning.h	/^	float	width_free;$/;"	m	struct:PointRule_t
width_ft	.\XESCore\AptDefs.h	/^	float		width_ft;	\/\/ Width in feet$/;"	m	struct:AptPavement_t
width_max	.\XESCore\ObjTables.h	/^	float	width_max;$/;"	m	struct:RepInfo_t
width_max	.\XESCore\Zoning.h	/^	float	width_max;$/;"	m	struct:FacadeSpelling_t
width_min	.\XESCore\ObjTables.h	/^	float	width_min;$/;"	m	struct:RepInfo_t
width_min	.\XESCore\Zoning.h	/^	float	width_min;				\/\/ Matching$/;"	m	struct:FacadeSpelling_t
width_mtr	.\XESCore\AptDefs.h	/^	float		width_mtr;$/;"	m	struct:AptHelipad_t
width_mtr	.\XESCore\AptDefs.h	/^	float		width_mtr;$/;"	m	struct:AptRunway_t
width_mtr	.\XESCore\AptDefs.h	/^	float		width_mtr;$/;"	m	struct:AptSealane_t
width_rd	.\XESCore\Zoning.h	/^	float	width_rd;$/;"	m	struct:PointRule_t
width_real	.\XESCore\Zoning.h	/^	float	width_real;$/;"	m	struct:FacadeSpelling_t
wind_rules	.\XESCore\AptDefs.h	/^	AptWindRuleVector			wind_rules;	$/;"	m	struct:AptFlow_t
window	.\UI\XPopup.h	/^	Window		window;$/;"	m	struct:xwindow
windsock_lit	.\WEDMap\WED_CreatePointTool.h	/^		WED_PropBoolText		windsock_lit;$/;"	m	class:WED_CreatePointTool
windsocks	.\XESCore\AptDefs.h	/^	AptWindsockVector	windsocks;$/;"	m	struct:AptInfo_t
wire	.\OneOffs\gen_roads10.h	/^struct wire {$/;"	s
wires	.\OneOffs\gen_roads10.h	/^	vector<wire>				wires;$/;"	m	class:road
within_box	.\XESCore\NetPlacement.cpp	/^inline bool within_box(const Point2& p1, const Point2& p2, double d)$/;"	f
within_dist	.\WEDMap\WED_CreateToolBase.cpp	/^inline bool	within_dist(const Point2& p1, const Point2& p2, WED_MapZoomerNew * z, float dist)$/;"	f
within_err_metric	.\XESCore\BlockAlgs.cpp	/^bool	within_err_metric(Pmwx::Halfedge_handle h1, Pmwx::Halfedge_handle h2, const CoordTranslator2& trans, double max_err_sq)$/;"	f
within_err_metric	.\XESCore\BlockAlgs.cpp	/^bool	within_err_metric(const Point_2& p1, const Point_2& p2, const Point_2& p3, const CoordTranslator2& trans, double max_err_sq)$/;"	f
within_seg	.\WEDMap\WED_HandleToolBase.cpp	/^inline bool within_seg(const Segment2& s, const Point2& p, double r)$/;"	f
word	.\Obj\XObjBuilder.cpp	/^	unsigned int word;$/;"	m	union:__anon40	file:
wrap	.\WEDCore\WED_ResourceMgr.h	/^	bool		wrap;$/;"	m	struct:pol_info_t
write	.\lib_json\src\lib_json\json_writer.cpp	/^FastWriter::write( const Value &root )$/;"	f	class:Json::FastWriter
write	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::write( std::ostream &out, const Value &root )$/;"	f	class:Json::StyledStreamWriter
write	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::write( const Value &root )$/;"	f	class:Json::StyledWriter
writeArrayValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::writeArrayValue( const Value &value )$/;"	f	class:Json::StyledStreamWriter
writeArrayValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::writeArrayValue( const Value &value )$/;"	f	class:Json::StyledWriter
writeCommentAfterValueOnSameLine	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::writeCommentAfterValueOnSameLine( const Value &root )$/;"	f	class:Json::StyledStreamWriter
writeCommentAfterValueOnSameLine	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::writeCommentAfterValueOnSameLine( const Value &root )$/;"	f	class:Json::StyledWriter
writeCommentBeforeValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::writeCommentBeforeValue( const Value &root )$/;"	f	class:Json::StyledStreamWriter
writeCommentBeforeValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::writeCommentBeforeValue( const Value &root )$/;"	f	class:Json::StyledWriter
writeIndent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::writeIndent()$/;"	f	class:Json::StyledStreamWriter
writeIndent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::writeIndent()$/;"	f	class:Json::StyledWriter
writeValue	.\lib_json\src\lib_json\json_writer.cpp	/^FastWriter::writeValue( const Value &value )$/;"	f	class:Json::FastWriter
writeValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::writeValue( const Value &value )$/;"	f	class:Json::StyledStreamWriter
writeValue	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::writeValue( const Value &value )$/;"	f	class:Json::StyledWriter
writeWithIndent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledStreamWriter::writeWithIndent( const std::string &value )$/;"	f	class:Json::StyledStreamWriter
writeWithIndent	.\lib_json\src\lib_json\json_writer.cpp	/^StyledWriter::writeWithIndent( const std::string &value )$/;"	f	class:Json::StyledWriter
write_arrangement_begin	.\XESCore\MapIO.cpp	/^	void write_arrangement_begin () { }$/;"	f	class:PmwxFmt
write_arrangement_end	.\XESCore\MapIO.cpp	/^	void write_arrangement_end() { }$/;"	f	class:PmwxFmt
write_cb	.\Network\curl_http.cpp	/^size_t		curl_http_get_file::write_cb(void *contents, size_t size, size_t nmemb, void *userp)$/;"	f	class:curl_http_get_file
write_ccb_halfedges_begin	.\XESCore\MapIO.cpp	/^	void write_ccb_halfedges_begin() { }$/;"	f	class:PmwxFmt
write_ccb_halfedges_end	.\XESCore\MapIO.cpp	/^	void write_ccb_halfedges_end() { }$/;"	f	class:PmwxFmt
write_datablock	.\Utils\zip.c	/^local int write_datablock($/;"	f
write_edge_begin	.\XESCore\MapIO.cpp	/^	void write_edge_begin () { }$/;"	f	class:PmwxFmt
write_edge_end	.\XESCore\MapIO.cpp	/^	void write_edge_end () { }$/;"	f	class:PmwxFmt
write_edges_begin	.\XESCore\MapIO.cpp	/^	void write_edges_begin () { }$/;"	f	class:PmwxFmt
write_edges_end	.\XESCore\MapIO.cpp	/^	void write_edges_end () { }$/;"	f	class:PmwxFmt
write_ent_attributes	.\OneOffs\osm2shape.c	/^int write_ent_attributes(DBFHandle dbf, int id, entity_t * ent)$/;"	f
write_face_begin	.\XESCore\MapIO.cpp	/^	void write_face_begin () { }$/;"	f	class:PmwxFmt
write_face_data	.\XESCore\MapIO.cpp	/^	virtual void write_face_data (Face_const_handle f)$/;"	f	class:PmwxFmt
write_face_end	.\XESCore\MapIO.cpp	/^	void write_face_end () { }$/;"	f	class:PmwxFmt
write_faces_begin	.\XESCore\MapIO.cpp	/^	void write_faces_begin () { }$/;"	f	class:PmwxFmt
write_faces_end	.\XESCore\MapIO.cpp	/^	void write_faces_end () { }$/;"	f	class:PmwxFmt
write_halfedge_data	.\XESCore\MapIO.cpp	/^	virtual void write_halfedge_data (Halfedge_const_handle e)$/;"	f	class:PmwxFmt
write_halfedge_index	.\XESCore\MapIO.cpp	/^	void write_halfedge_index (int idx)$/;"	f	class:PmwxFmt
write_inner_ccbs_begin	.\XESCore\MapIO.cpp	/^	void write_inner_ccbs_begin () { }$/;"	f	class:PmwxFmt
write_inner_ccbs_end	.\XESCore\MapIO.cpp	/^	void write_inner_ccbs_end () { }$/;"	f	class:PmwxFmt
write_isolated_vertices_begin	.\XESCore\MapIO.cpp	/^	void write_isolated_vertices_begin () { }$/;"	f	class:PmwxFmt
write_isolated_vertices_end	.\XESCore\MapIO.cpp	/^	void write_isolated_vertices_end () { }$/;"	f	class:PmwxFmt
write_outer_ccbs_begin	.\XESCore\MapIO.cpp	/^	void write_outer_ccbs_begin () { }$/;"	f	class:PmwxFmt
write_outer_ccbs_end	.\XESCore\MapIO.cpp	/^	void write_outer_ccbs_end () { }$/;"	f	class:PmwxFmt
write_point	.\XESCore\MapIO.cpp	/^	virtual void write_point (const Point_2& p)$/;"	f	class:PmwxFmt
write_raster_pile	.\DSF\DSFLibWrite.cpp	/^void write_raster_pile(FILE * fi, int count, const DT * data)$/;"	f
write_size	.\XESCore\MapIO.cpp	/^	void write_size (const char *label, Size size)$/;"	f	class:PmwxFmt
write_tables	.\WEDImportExport\WED_DSFExport.cpp	/^	void write_tables(DSFCallbacks_t& cbs, void * writer)$/;"	f	struct:DSF_ResourceTable
write_vertex_begin	.\XESCore\MapIO.cpp	/^	void write_vertex_begin () { }$/;"	f	class:PmwxFmt
write_vertex_data	.\XESCore\MapIO.cpp	/^	virtual void write_vertex_data (Vertex_const_handle  v)$/;"	f	class:PmwxFmt
write_vertex_end	.\XESCore\MapIO.cpp	/^	void write_vertex_end () { }$/;"	f	class:PmwxFmt
write_vertex_index	.\XESCore\MapIO.cpp	/^	void write_vertex_index (int idx)$/;"	f	class:PmwxFmt
write_vertices_begin	.\XESCore\MapIO.cpp	/^	void write_vertices_begin () { }$/;"	f	class:PmwxFmt
write_vertices_end	.\XESCore\MapIO.cpp	/^	void write_vertices_end () { }$/;"	f	class:PmwxFmt
write_x_monotone_curve	.\XESCore\MapIO.cpp	/^	virtual void write_x_monotone_curve (const X_monotone_curve_2& cv)$/;"	f	class:PmwxFmt
writer	.\XESCore\MapIO.cpp	/^	IOWriter *					writer;$/;"	m	class:PmwxFmt	file:
writer_	.\XESCore\DSFBuilder.cpp	/^	void * writer_;$/;"	m	struct:StNukeWriter	file:
x	.\OneOffs\gen_roads10.h	/^	float			x;$/;"	m	struct:road_center_marker
x	.\OneOffs\gen_roads10.h	/^	float			x[2];$/;"	m	struct:road_segment
x	.\OneOffs\shape2xon.cpp	/^	double x, y;$/;"	m	struct:pt_t	file:
x	.\RawImport\gshhs.h	/^	int	x;$/;"	m	struct:_POINT
x	.\UI\XWin.h	/^  int x;$/;"	m	struct:tagPOINT
x	.\Utils\CompGeomDefs2.h	/^	inline double x() const { return dx; }$/;"	f	struct:Vector2
x	.\Utils\CompGeomDefs2.h	/^	inline double x() const { return x_; }$/;"	f	struct:Point2
x	.\Utils\CompGeomDefs3.h	/^	double	x;$/;"	m	struct:Point3
x	.\WEDCore\WED_Clipping.cpp	/^	double x;$/;"	m	struct:on_side_of_line_v	file:
x	.\WEDCore\WED_Clipping.cpp	/^	double x;$/;"	m	struct:split_at_line_v	file:
x	.\WEDCore\WED_ResourceMgr.h	/^		double  x,y,r;			\/\/ annotation position$/;"	m	struct:agp_t::obj
x	.\XESCore\Hydro.cpp	/^	int x;$/;"	m	struct:DemPt	file:
x	.\XESCore\TensorRoads.cpp	/^	int			x;$/;"	m	struct:TensorSeed	file:
x	.\XPTools\ViewObj.cpp	/^		double	x;$/;"	m	struct:XObjWin::ObjPlacement_t	file:
x1	.\Utils\PolyRasterUtils.h	/^	Number	x1;$/;"	m	struct:PolyRasterSeg_t
x1_	.\Utils\RLERegion.cpp	/^	int x1_;$/;"	m	class:RLERegionDualScanner	file:
x1_	.\Utils\RLERegion.h	/^	int			x1_;$/;"	m	class:RLERegion
x2	.\Utils\PolyRasterUtils.h	/^	Number	x2;$/;"	m	struct:PolyRasterSeg_t
x2_	.\Utils\RLERegion.cpp	/^	int x2_;$/;"	m	class:RLERegionDualScanner	file:
x2_	.\Utils\RLERegion.h	/^	int			x2_;$/;"	m	class:RLERegion
xOff	.\Env\Persistence.h	/^	short		xOff;$/;"	m	struct:VertexInfo
xPixelsPerM	.\Utils\BitmapUtils.cpp	/^	long			xPixelsPerM;	\/\/130B0000?  B013 = 45075?$/;"	m	struct:BMPImageDesc	file:
xYZ	.\Utils\ObjUtils.cpp	/^	xYZ,$/;"	e	enum:__anon94	file:
xYz	.\Utils\ObjUtils.cpp	/^	xYz,$/;"	e	enum:__anon94	file:
x_	.\Utils\CompGeomDefs2.h	/^	double	x_;$/;"	m	struct:Point2
x_	.\Utils\RLERegion.h	/^	int					x_;$/;"	m	class:RLERegionScanner
x_at_y	.\Utils\CompGeomDefs2.h	/^	double	x_at_y(double y) const { 	if (p1.y_ == p2.y_) 	return p1.x_;$/;"	f	struct:Segment2
x_at_y	.\Utils\CompGeomDefs2.h	/^inline double	Bezier2::x_at_y(double y) const$/;"	f	class:Bezier2
x_backup	.\XESCore\DEMTables.h	/^	int			x_backup;$/;"	m	struct:BeachInfo_t
x_beach_type	.\XESCore\DEMTables.h	/^	int			x_beach_type;$/;"	m	struct:BeachInfo_t
x_depth_ant	.\XESCore\Zoning.h	/^	float	x_depth_ant;$/;"	m	struct:PointRule_t
x_depth_free	.\XESCore\Zoning.h	/^	float	x_depth_free;$/;"	m	struct:PointRule_t
x_depth_rd	.\XESCore\Zoning.h	/^	float	x_depth_rd;$/;"	m	struct:PointRule_t
x_dist_to_m	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::x_dist_to_m(double inX) const$/;"	f	class:DEMGeo
x_draw_pos	.\Utils\UIUtils.h	/^	int		x_draw_pos;$/;"	m	struct:DragHandleInfo_t
x_lower	.\XESCore\DEMDefs.h	/^inline int		DEMGeo::x_lower(double lon) const$/;"	f	class:DEMGeo
x_monotone	.\Utils\CompGeomDefs2.h	/^inline int		Bezier2::x_monotone(void) const$/;"	f	class:Bezier2
x_monotone_regions	.\Utils\CompGeomDefs2.h	/^inline int		Bezier2::x_monotone_regions(double times[2]) const$/;"	f	class:Bezier2
x_res	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::x_res(void) const$/;"	f	class:DEMGeo
x_to_lon	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::x_to_lon(int inX) const$/;"	f	class:DEMGeo
x_to_lon_double	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::x_to_lon_double(double inX) const$/;"	f	class:DEMGeo
x_upper	.\XESCore\DEMDefs.h	/^inline int		DEMGeo::x_upper(double lon) const$/;"	f	class:DEMGeo
x_width_ant	.\XESCore\Zoning.h	/^	float	x_width_ant;$/;"	m	struct:PointRule_t
x_width_free	.\XESCore\Zoning.h	/^	float	x_width_free;$/;"	m	struct:PointRule_t
x_width_rd	.\XESCore\Zoning.h	/^	float	x_width_rd;$/;"	m	struct:PointRule_t
xbyt	.\Obj\XObjReadWrite.cpp	/^typedef unsigned char 	xbyt;$/;"	t	file:
xcam_class	.\Utils\HLCamera.cpp	/^xcam_class::xcam_class()$/;"	f	class:xcam_class
xcam_class	.\Utils\HLCamera.h	/^class	xcam_class {$/;"	c
xfals	.\Obj\XObjReadWrite.cpp	52;"	d	file:
xflt	.\Obj\XObjReadWrite.cpp	/^typedef float			xflt;$/;"	t	file:
xfrm	.\RenderFarmUI\RF_MapView.cpp	/^static GLdouble		xfrm[16];$/;"	v	file:
xint	.\Obj\XObjReadWrite.cpp	/^typedef int				xint;$/;"	t	file:
xmax	.\Utils\CompGeomDefs2.h	/^	double		xmax() const { return p2.x_; }$/;"	f	struct:Bbox2
xmenu	.\UI\XWin.h	/^	typedef void * xmenu;		\/\/ Since this is in the public API, we get C++ binding errors if we redefine it by compiler type.$/;"	t
xmenu	.\UI\XWin.h	56;"	d
xmenu	.\UI\XWin.h	60;"	d
xmin	.\Utils\CompGeomDefs2.h	/^	double		xmin() const { return p1.x_; }$/;"	f	struct:Bbox2
xml_die	.\OneOffs\osm2shape.c	/^void xml_die(const char * fmt, ...)$/;"	f
xml_die	.\OneOffs\osm_tile.c	/^void xml_die(const char * fmt, ...)$/;"	f
xoffset	.\SDTS\SDTSReadTVP.cpp	/^	double	xoffset;$/;"	m	struct:CoordTransform	file:
xon_dist	.\XESCore\DEMTables.h	/^	float			xon_dist;$/;"	m	struct:NaturalTerrainInfo_t
xplane_anim_angle_cb	.\AC3DPlugins\obj_editor.cpp	/^static void xplane_anim_angle_cb(double value, int idx, void * ref, TCL_linked_vardv * who)$/;"	f	file:
xplane_anim_sync	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_anim_sync {} {$/;"	p
xplane_anim_type_cb	.\AC3DPlugins\obj_editor.cpp	/^static void xplane_anim_type_cb(const char * value, int idx, void * ref, TCL_linked_varsv * who)$/;"	f	file:
xplane_anim_update	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_anim_update { name1 name2 op } {$/;"	p
xplane_anim_value_cb	.\AC3DPlugins\obj_editor.cpp	/^static void xplane_anim_value_cb(double value, int idx, void * ref, TCL_linked_vardv * who)$/;"	f	file:
xplane_anim_window	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_anim_window {} {$/;"	p
xplane_blend_enable_cb	.\AC3DPlugins\obj_editor.cpp	/^static void	xplane_blend_enable_cb(int value, int idx, void * ref, TCL_linked_variv * who)$/;"	f	file:
xplane_blend_level_cb	.\AC3DPlugins\obj_editor.cpp	/^static void	xplane_blend_level_cb(double value, int idx, void * ref, TCL_linked_vardv * who)$/;"	f	file:
xplane_convert_dir	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_convert_dir {} {$/;"	p
xplane_dir_eval	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_dir_eval { cmd_str mask_str } {$/;"	p
xplane_inspector	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_inspector {} {$/;"	p
xplane_inspector_sync	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_inspector_sync {} {$/;"	p
xplane_inspector_update	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_inspector_update { name1 name2 op } {$/;"	p
xplane_keyframe_rescale_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_keyframe_rescale_dialog {} {$/;"	p
xplane_light_sync	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_light_sync { x container } {$/;"	p
xplane_light_sync_all	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_light_sync_all {} {$/;"	p
xplane_obj_sync	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_obj_sync { idx container } {$/;"	p
xplane_obj_sync_all	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_obj_sync_all {} {$/;"	p
xplane_panel_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_panel_dialog {} {$/;"	p
xplane_prefs_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_prefs_dialog {} {$/;"	p
xplane_tex_rescale_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_tex_rescale_dialog {} {$/;"	p
xplane_tex_select_dialog	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_tex_select_dialog {} {$/;"	p
xplane_update_dir	.\AC3DPlugins\XPlaneSupport.tcl	/^proc xplane_update_dir {} {$/;"	p
xplm_MouseDown	.\ObjEdit\OE_Zoomer3d.h	/^     xplm_MouseDown                           = 1,$/;"	e	enum:__anon58
xplm_MouseDown	.\RenderFarmUI\RF_MapTool.h	/^     xplm_MouseDown                           = 1,$/;"	e	enum:XPLMMouseStatus
xplm_MouseDrag	.\ObjEdit\OE_Zoomer3d.h	/^     xplm_MouseDrag                           = 2,$/;"	e	enum:__anon58
xplm_MouseDrag	.\RenderFarmUI\RF_MapTool.h	/^     xplm_MouseDrag                           = 2,$/;"	e	enum:XPLMMouseStatus
xplm_MouseUp	.\ObjEdit\OE_Zoomer3d.h	/^     xplm_MouseUp                             = 3,$/;"	e	enum:__anon58
xplm_MouseUp	.\RenderFarmUI\RF_MapTool.h	/^     xplm_MouseUp                             = 3$/;"	e	enum:XPLMMouseStatus
xplm_MouseWheel	.\ObjEdit\OE_Zoomer3d.h	/^     xplm_MouseWheel						  = 4$/;"	e	enum:__anon58
xpna_Mode_Differenced	.\Utils\XChunkyFileUtils.h	/^	xpna_Mode_Differenced = 1,$/;"	e	enum:__anon103
xpna_Mode_RLE	.\Utils\XChunkyFileUtils.h	/^	xpna_Mode_RLE = 2,$/;"	e	enum:__anon103
xpna_Mode_RLE_Differenced	.\Utils\XChunkyFileUtils.h	/^	xpna_Mode_RLE_Differenced = 3$/;"	e	enum:__anon103
xpna_Mode_Raw	.\Utils\XChunkyFileUtils.h	/^	xpna_Mode_Raw = 0,$/;"	e	enum:__anon103
xpow	.\Utils\MathUtils.h	/^inline float xpow(float input,float power)$/;"	f
xpt_pclose	.\XPTools\XGrinderShell.cpp	/^int xpt_pclose(FILE *stream)$/;"	f
xpt_popen	.\XPTools\XGrinderShell.cpp	/^FILE* xpt_popen(const char *command, const char *mode)$/;"	f
xs	.\OneOffs\gen_tiles.c	/^int			xs, ys, ts;$/;"	v
xscale	.\SDTS\SDTSReadTVP.cpp	/^	double	xscale;$/;"	m	struct:CoordTransform	file:
xspan	.\Utils\CompGeomDefs2.h	/^	double		xspan() const { return p2.x_ - p1.x_; }$/;"	f	struct:Bbox2
xtrue	.\Obj\XObjReadWrite.cpp	51;"	d	file:
xwin_style_centered	.\UI\XWin.h	/^	xwin_style_centered			= 16,			\/\/ Center on screen$/;"	e	enum:__anon86
xwin_style_fullscreen	.\UI\XWin.h	/^	xwin_style_fullscreen		= 32			\/\/ Maximize to fill a screen$/;"	e	enum:__anon86
xwin_style_modal	.\UI\XWin.h	/^	xwin_style_modal			= 3,			\/\/ Modal - don't let the user have access to what's behind until they deal with this!$/;"	e	enum:__anon86
xwin_style_movable	.\UI\XWin.h	/^	xwin_style_movable			= 1,			\/\/ Movable - but no machinery to resize$/;"	e	enum:__anon86
xwin_style_resizable	.\UI\XWin.h	/^	xwin_style_resizable		= 2,			\/\/ The works: resize, maximize, minimize, zoom, etc.$/;"	e	enum:__anon86
xwin_style_thin	.\UI\XWin.h	/^	xwin_style_thin				= 0,			\/\/ Thin window - just a rectangle$/;"	e	enum:__anon86
xwin_style_visible	.\UI\XWin.h	/^	xwin_style_visible			= 8,			\/\/ Start visible?$/;"	e	enum:__anon86
xwindow	.\UI\XPopup.h	/^typedef struct xwindow$/;"	s
xwindow	.\UI\XPopup.h	/^} xwindow;$/;"	t	typeref:struct:xwindow
xxVertex2d	.\RenderFarmUI\RF_MapView.cpp	/^inline void xxVertex2d(GLdouble x, GLdouble y)$/;"	f
xy	.\WEDCore\WED_GISUtils.cpp	/^	Point2	xy;$/;"	m	struct:uv_vert	file:
xyZ	.\Utils\ObjUtils.cpp	/^	xyZ,$/;"	e	enum:__anon94	file:
xy_nearest	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::xy_nearest(double lon, double lat) const$/;"	f	class:DEMGeo
xy_nearest	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::xy_nearest(double lon, double lat, int& xo, int& yo) const$/;"	f	class:DEMGeo
xy_nearest_raw	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::xy_nearest_raw(double lon, double lat) const$/;"	f	class:DEMGeo
xy_nearest_raw	.\XESCore\DEMDefs.h	/^inline float	DEMGeo::xy_nearest_raw(double lon, double lat, int& xo, int& yo) const$/;"	f	class:DEMGeo
xy_to_approx	.\XESCore\DEMGrid.h	/^	Point2	xy_to_approx(int x, int y) const { return mApprox[x + y * mWidth]; }$/;"	f	struct:DEMGrid
xy_to_pt	.\XESCore\DEMGrid.h	/^	Point_2	xy_to_pt	(int x, int y) const { return mGrid[x + y * mWidth]; }$/;"	f	struct:DEMGrid
xyz	.\AC3DPlugins\uv_mapper.cpp	/^	cgd::Point3		xyz[3];$/;"	m	struct:a_tri	file:
xyz	.\Utils\ObjUtils.cpp	/^	xyz = 0,$/;"	e	enum:__anon94	file:
xyz	.\Utils\XCarBoneUtils.h	/^	KeyTable		xyz[3];			\/\/ Keyable translations in x, y, z$/;"	m	struct:XCarBone
xyz	.\Utils\XUtils.cpp	/^		float xyz[3];$/;"	m	struct:XPointPool::XPointPoolImp::p_info	file:
xyz1	.\AC3DPlugins\obj_update.cpp	/^	float xyz1[3];	\/\/ OFFSET$/;"	m	struct:update_anim_op	file:
xyz2	.\AC3DPlugins\obj_update.cpp	/^	float xyz2[3];	\/\/ AXIS$/;"	m	struct:update_anim_op	file:
xyz_max	.\Obj\XObjDefs.h	/^	float					xyz_max[3];$/;"	m	struct:XObj8
xyz_min	.\Obj\XObjDefs.h	/^	float					xyz_min[3];$/;"	m	struct:XObj8
y	.\OneOffs\gen_roads.cpp	/^	float 			y;$/;"	m	class:road_underside	file:
y	.\OneOffs\gen_roads10.h	/^	float			y;$/;"	m	struct:wire
y	.\OneOffs\gen_roads10.h	/^	float			y[2];$/;"	m	struct:road_segment
y	.\OneOffs\shape2xon.cpp	/^	double x, y;$/;"	m	struct:pt_t	file:
y	.\RawImport\gshhs.h	/^	int	y;$/;"	m	struct:_POINT
y	.\UI\XWin.h	/^  int y;$/;"	m	struct:tagPOINT
y	.\Utils\CompGeomDefs2.h	/^	inline double y() const { return dy; }$/;"	f	struct:Vector2
y	.\Utils\CompGeomDefs2.h	/^	inline double y() const { return y_; }$/;"	f	struct:Point2
y	.\Utils\CompGeomDefs3.h	/^	double	y;$/;"	m	struct:Point3
y	.\WEDCore\WED_Clipping.cpp	/^	double y;$/;"	m	struct:on_side_of_line_h	file:
y	.\WEDCore\WED_Clipping.cpp	/^	double y;$/;"	m	struct:split_at_line_h	file:
y	.\WEDCore\WED_ResourceMgr.h	/^		double  x,y,r;			\/\/ annotation position$/;"	m	struct:agp_t::obj
y	.\XESCore\Hydro.cpp	/^	int y;$/;"	m	struct:DemPt	file:
y	.\XESCore\TensorRoads.cpp	/^	int			y;$/;"	m	struct:TensorSeed	file:
y	.\XPTools\ViewObj.cpp	/^		double	y;$/;"	m	struct:XObjWin::ObjPlacement_t	file:
y1	.\OneOffs\gen_roads.cpp	/^	float			y1;$/;"	m	class:road_blade	file:
y1	.\Utils\PolyRasterUtils.h	/^		Number				y1;							\/\/ Current output.$/;"	m	struct:BoxRasterizer
y1	.\Utils\PolyRasterUtils.h	/^	Number	y1;$/;"	m	struct:PolyRasterSeg_t
y1_	.\Utils\RLERegion.h	/^	int			y1_;$/;"	m	class:RLERegion
y2	.\OneOffs\gen_roads.cpp	/^	float			y2;$/;"	m	class:road_blade	file:
y2	.\Utils\PolyRasterUtils.h	/^		Number				y2;$/;"	m	struct:BoxRasterizer
y2	.\Utils\PolyRasterUtils.h	/^	Number	y2;$/;"	m	struct:PolyRasterSeg_t
y2_	.\Utils\RLERegion.h	/^	int			y2_;$/;"	m	class:RLERegion
yOff	.\Env\Persistence.h	/^	short		yOff;$/;"	m	struct:VertexInfo
yPixelsPerM	.\Utils\BitmapUtils.cpp	/^	long			yPixelsPerM;$/;"	m	struct:BMPImageDesc	file:
y_	.\Utils\CompGeomDefs2.h	/^	double	y_;$/;"	m	struct:Point2
y_	.\Utils\RLERegion.h	/^	int					y_;$/;"	m	class:RLERegionScanner
y_align	.\GUI\GUI_Laftfont.h	/^	float		y_align;$/;"	m	struct:gl_glyph
y_at_x	.\Utils\CompGeomDefs2.h	/^	double	y_at_x(double x) const { 	if (p1.x_ == p2.x_) 	return p1.y_;$/;"	f	struct:Segment2
y_at_x	.\Utils\CompGeomDefs2.h	/^inline double	Bezier2::y_at_x(double x) const$/;"	f	class:Bezier2
y_dist_to_m	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::y_dist_to_m(double inY) const$/;"	f	class:DEMGeo
y_draw_pos	.\Utils\UIUtils.h	/^	int		y_draw_pos;$/;"	m	struct:DragHandleInfo_t
y_lower	.\XESCore\DEMDefs.h	/^inline int		DEMGeo::y_lower(double lat) const$/;"	f	class:DEMGeo
y_monotone	.\Utils\CompGeomDefs2.h	/^inline int		Bezier2::y_monotone(void) const$/;"	f	class:Bezier2
y_monotone_regions	.\Utils\CompGeomDefs2.h	/^inline int Bezier2::y_monotone_regions(double times[2]) const$/;"	f	class:Bezier2
y_res	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::y_res(void) const$/;"	f	class:DEMGeo
y_sorted_set	.\XESCore\NetPlacement.cpp	/^typedef multiset<Net_JunctionInfo_t *, sort_by_y>	y_sorted_set;$/;"	t	file:
y_to_lat	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::y_to_lat(int inY) const$/;"	f	class:DEMGeo
y_to_lat_double	.\XESCore\DEMDefs.h	/^inline double	DEMGeo::y_to_lat_double(double inY) const$/;"	f	class:DEMGeo
y_upper	.\XESCore\DEMDefs.h	/^inline int		DEMGeo::y_upper(double lat) const$/;"	f	class:DEMGeo
yamlCompatiblityEnabled_	.\lib_json\include\json\writer.h	/^      bool yamlCompatiblityEnabled_;$/;"	m	class:Json::FastWriter
ymax	.\Utils\CompGeomDefs2.h	/^	double		ymax() const { return p2.y_; }$/;"	f	struct:Bbox2
ymin	.\Utils\CompGeomDefs2.h	/^	double		ymin() const { return p1.y_; }$/;"	f	struct:Bbox2
yoffset	.\SDTS\SDTSReadTVP.cpp	/^	double 	yoffset;$/;"	m	struct:CoordTransform	file:
ys	.\OneOffs\gen_tiles.c	/^int			xs, ys, ts;$/;"	v
yscale	.\SDTS\SDTSReadTVP.cpp	/^	double	yscale;$/;"	m	struct:CoordTransform	file:
yspan	.\Utils\CompGeomDefs2.h	/^	double		yspan() const { return p2.y_ - p1.y_; }$/;"	f	struct:Bbox2
z	.\Utils\CompGeomDefs3.h	/^	double	z;$/;"	m	struct:Point3
z	.\XPTools\ViewObj.cpp	/^		double	z;$/;"	m	struct:XObjWin::ObjPlacement_t	file:
zap	.\XESCore\DEMDefs.h	/^inline void	DEMGeo::zap(int x, int y)$/;"	f	class:DEMGeo
zipClose	.\Utils\zip.c	/^extern int ZEXPORT zipClose ($/;"	f
zipCloseFileInZip	.\Utils\zip.c	/^extern int ZEXPORT zipCloseFileInZip ($/;"	f
zipFile	.\Utils\zip.h	/^typedef voidp zipFile;$/;"	t
zipFile	.\Utils\zip.h	/^typedef zipFile__ *zipFile;$/;"	t
zipFile__	.\Utils\zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	t	typeref:struct:TagzipFile__
zipOpen	.\Utils\zip.c	/^extern zipFile ZEXPORT zipOpen ($/;"	f
zipOpenNewFileInZip	.\Utils\zip.c	/^extern int ZEXPORT zipOpenNewFileInZip ($/;"	f
zipWriteInFileInZip	.\Utils\zip.c	/^extern int ZEXPORT zipWriteInFileInZip ($/;"	f
zip_copyright	.\Utils\zip.c	/^const char zip_copyright[] =$/;"	v
zip_fileinfo	.\Utils\zip.h	/^} zip_fileinfo;$/;"	t	typeref:struct:__anon106
zip_internal	.\Utils\zip.c	/^} zip_internal;$/;"	t	typeref:struct:__anon105	file:
zip_printf	.\WEDImportExport\WED_DSFExport.cpp	/^int zip_printf(void * fi, const char * fmt, ...)$/;"	f
ziplocal_TmzDateToDosDate	.\Utils\zip.c	/^local uLong ziplocal_TmzDateToDosDate($/;"	f
ziplocal_putValue	.\Utils\zip.c	/^local int ziplocal_putValue ($/;"	f
ziplocal_putValue_inmemory	.\Utils\zip.c	/^local void ziplocal_putValue_inmemory ($/;"	f
zlimit	.\MeshTool\MeshTool_Create.cpp	/^static int								zlimit=0,zmin=30000,zmax=-2000;$/;"	v	file:
zmax	.\MeshTool\MeshTool_Create.cpp	/^static int								zlimit=0,zmin=30000,zmax=-2000;$/;"	v	file:
zmin	.\MeshTool\MeshTool_Create.cpp	/^static int								zlimit=0,zmin=30000,zmax=-2000;$/;"	v	file:
zone	.\SDTS\SDTSReadTVP.cpp	/^	int		zone;			\/\/ UTM zone number$/;"	m	struct:CoordTransform	file:
zone_borders_t	.\XESCore\Zoning.cpp	/^struct zone_borders_t {$/;"	s	file:
zoning	.\XESCore\DEMTables.h	/^	int				zoning;$/;"	m	struct:NaturalTerrainRule_t
zoning	.\XESCore\Zoning.cpp	/^	set<int>				zoning;$/;"	m	struct:FaceNode_t	file:
zoning	.\XESCore\Zoning.h	/^	int			zoning;									\/\/ Base zoning we act upon$/;"	m	struct:FillRule_t
zoning	.\XESCore\Zoning.h	/^	int			zoning;$/;"	m	struct:EdgeRule_t
zoning	.\XESCore\Zoning.h	/^	int			zoning;$/;"	m	struct:ZoningRule_t
zoning	.\XESCore\Zoning.h	/^	int		zoning;$/;"	m	struct:FacadeSpelling_t
zoning	.\XESCore\Zoning.h	/^	int		zoning;$/;"	m	struct:PointRule_t
~AsyncConnectionPool	.\Network\Terraserver.cpp	/^AsyncConnectionPool::~AsyncConnectionPool()$/;"	f	class:AsyncConnectionPool
~AsyncImage	.\Network\Terraserver.cpp	/^AsyncImage::~AsyncImage()$/;"	f	class:AsyncImage
~AsyncImageLocator	.\Network\Terraserver.cpp	/^AsyncImageLocator::~AsyncImageLocator()$/;"	f	class:AsyncImageLocator
~BWImage	.\Utils\BWImage.cpp	/^BWImage::~BWImage()$/;"	f	class:BWImage
~BatchAllocator	.\lib_json\src\lib_json\json_batchallocator.h	/^   ~BatchAllocator()$/;"	f	class:Json::BatchAllocator
~CDropTarget	.\UI\XWin32DND.cpp	/^CDropTarget::~CDropTarget(void)$/;"	f	class:CDropTarget
~CZString	.\lib_json\src\lib_json\json_value.cpp	/^Value::CZString::~CZString()$/;"	f	class:Json::Value::CZString
~CommentInfo	.\lib_json\src\lib_json\json_value.cpp	/^Value::CommentInfo::~CommentInfo()$/;"	f	class:Json::Value::CommentInfo
~CoverageFinder	.\Utils\CoverageFinder.cpp	/^CoverageFinder::~CoverageFinder()$/;"	f	class:CoverageFinder
~DEMGeo	.\XESCore\DEMDefs.cpp	/^DEMGeo::~DEMGeo()$/;"	f	class:DEMGeo
~DSFTuple	.\DSF\DSFPointPool.h	/^inline DSFTuple::~DSFTuple()$/;"	f	class:DSFTuple
~DSFTuple	.\DSF\dsflib_013005\DSFPointPool.cpp	/^DSFTuple::~DSFTuple()$/;"	f	class:DSFTuple
~DragHandleSet	.\Utils\UIUtils.cpp	/^DragHandleSet::~DragHandleSet()$/;"	f	class:DragHandleSet
~FILE_case_correct_path	.\Utils\FileUtils.cpp	/^FILE_case_correct_path::~FILE_case_correct_path() { free(path); }$/;"	f	class:FILE_case_correct_path
~FaceGraph_t	.\XESCore\Zoning.cpp	/^	~FaceGraph_t() { clear(); }$/;"	f	struct:FaceGraph_t
~FastWriter	.\lib_json\include\json\writer.h	/^      virtual ~FastWriter(){}$/;"	f	class:Json::FastWriter
~FileReader	.\XESCore\SimpleIO.cpp	/^FileReader::~FileReader()$/;"	f	class:FileReader
~FileWriter	.\XESCore\SimpleIO.cpp	/^FileWriter::~FileWriter()$/;"	f	class:FileWriter
~FontMgr	.\UI\FontMgr.cpp	/^FontMgr::~FontMgr()$/;"	f	class:FontMgr
~GIS_face_data	.\XESCore\MapDefs.h	/^		~GIS_face_data() { mTerrainType = 0xDEADBEEF; }$/;"	f	class:GIS_face_data
~GUI_Application	.\GUI\GUI_Application.cpp	/^GUI_Application::~GUI_Application()$/;"	f	class:GUI_Application
~GUI_Broadcaster	.\GUI\GUI_Broadcaster.cpp	/^GUI_Broadcaster::~GUI_Broadcaster()$/;"	f	class:GUI_Broadcaster
~GUI_Button	.\GUI\GUI_Button.cpp	/^GUI_Button::~GUI_Button()$/;"	f	class:GUI_Button
~GUI_ChangeView	.\GUI\GUI_ChangeView.cpp	/^GUI_ChangeView::~GUI_ChangeView()$/;"	f	class:GUI_ChangeView
~GUI_Commander	.\GUI\GUI_Commander.cpp	/^GUI_Commander::~GUI_Commander()$/;"	f	class:GUI_Commander
~GUI_Control	.\GUI\GUI_Control.cpp	/^GUI_Control::~GUI_Control()$/;"	f	class:GUI_Control
~GUI_Destroyable	.\GUI\GUI_Destroyable.cpp	/^GUI_Destroyable::~GUI_Destroyable()$/;"	f	class:GUI_Destroyable
~GUI_DestroyableTask	.\GUI\GUI_Destroyable.cpp	/^GUI_DestroyableTask::~GUI_DestroyableTask()$/;"	f	class:GUI_DestroyableTask
~GUI_DragData_Adapter	.\GUI\GUI_Clipboard.cpp	/^GUI_DragData_Adapter::~GUI_DragData_Adapter()$/;"	f	class:GUI_DragData_Adapter
~GUI_DragMgr_Adapter	.\GUI\GUI_Clipboard.cpp	/^GUI_DragMgr_Adapter::~GUI_DragMgr_Adapter()$/;"	f	class:GUI_DragMgr_Adapter
~GUI_FormWindow	.\GUI\GUI_FormWindow.cpp	/^GUI_FormWindow::~GUI_FormWindow()$/;"	f	class:GUI_FormWindow
~GUI_Header	.\GUI\GUI_Table.cpp	/^GUI_Header::~GUI_Header()$/;"	f	class:GUI_Header
~GUI_Label	.\GUI\GUI_Label.cpp	/^GUI_Label::~GUI_Label()$/;"	f	class:GUI_Label
~GUI_Laftfont	.\GUI\GUI_Laftfont.cpp	/^GUI_Laftfont::~GUI_Laftfont(void)$/;"	f	class:GUI_Laftfont
~GUI_Listener	.\GUI\GUI_Listener.cpp	/^GUI_Listener::~GUI_Listener()$/;"	f	class:GUI_Listener
~GUI_MemoryHog	.\GUI\GUI_MemoryHog.cpp	/^GUI_MemoryHog::~GUI_MemoryHog()$/;"	f	class:GUI_MemoryHog
~GUI_OLE_Adapter	.\GUI\GUI_Clipboard.cpp	/^GUI_OLE_Adapter::~GUI_OLE_Adapter()$/;"	f	class:GUI_OLE_Adapter
~GUI_Packer	.\GUI\GUI_Packer.cpp	/^GUI_Packer::~GUI_Packer()$/;"	f	class:GUI_Packer
~GUI_Pane	.\GUI\GUI_Pane.cpp	/^GUI_Pane::~GUI_Pane()$/;"	f	class:GUI_Pane
~GUI_PopupButton	.\GUI\GUI_PopupButton.cpp	/^GUI_PopupButton::~GUI_PopupButton()$/;"	f	class:GUI_PopupButton
~GUI_QtAction	.\GUI\GUI_Application.cpp	/^GUI_QtAction::~GUI_QtAction()$/;"	f	class:GUI_QtAction
~GUI_QtMenu	.\GUI\GUI_Application.cpp	/^GUI_QtMenu::~GUI_QtMenu()$/;"	f	class:GUI_QtMenu
~GUI_ScrollBar	.\GUI\GUI_ScrollBar.cpp	/^GUI_ScrollBar::~GUI_ScrollBar()$/;"	f	class:GUI_ScrollBar
~GUI_ScrollerPane	.\GUI\GUI_ScrollerPane.cpp	/^GUI_ScrollerPane::~GUI_ScrollerPane()$/;"	f	class:GUI_ScrollerPane
~GUI_Side	.\GUI\GUI_Table.cpp	/^GUI_Side::~GUI_Side()$/;"	f	class:GUI_Side
~GUI_SimpleScroller	.\GUI\GUI_SimpleScroller.cpp	/^GUI_SimpleScroller::~GUI_SimpleScroller()$/;"	f	class:GUI_SimpleScroller
~GUI_SimpleTableGeometry	.\GUI\GUI_SimpleTableGeometry.cpp	/^GUI_SimpleTableGeometry::~GUI_SimpleTableGeometry()$/;"	f	class:GUI_SimpleTableGeometry
~GUI_Splitter	.\GUI\GUI_Splitter.cpp	/^GUI_Splitter::~GUI_Splitter()$/;"	f	class:GUI_Splitter
~GUI_TabControl	.\GUI\GUI_TabControl.cpp	/^GUI_TabControl::~GUI_TabControl()$/;"	f	class:GUI_TabControl
~GUI_TabPane	.\GUI\GUI_TabPane.cpp	/^GUI_TabPane::~GUI_TabPane()$/;"	f	class:GUI_TabPane
~GUI_Table	.\GUI\GUI_Table.cpp	/^GUI_Table::~GUI_Table()$/;"	f	class:GUI_Table
~GUI_TextField	.\GUI\GUI_TextField.cpp	/^GUI_TextField::~GUI_TextField()$/;"	f	class:GUI_TextField
~GUI_TextTable	.\GUI\GUI_TextTable.cpp	/^GUI_TextTable::~GUI_TextTable()$/;"	f	class:GUI_TextTable
~GUI_TextTableHeader	.\GUI\GUI_TextTable.cpp	/^GUI_TextTableHeader::~GUI_TextTableHeader()$/;"	f	class:GUI_TextTableHeader
~GUI_TextTableSide	.\GUI\GUI_TextTable.cpp	/^GUI_TextTableSide::~GUI_TextTableSide()$/;"	f	class:GUI_TextTableSide
~GUI_Timer	.\GUI\GUI_Timer.cpp	/^GUI_Timer::~GUI_Timer(void)$/;"	f	class:GUI_Timer
~GUI_ToolBar	.\GUI\GUI_ToolBar.cpp	/^GUI_ToolBar::~GUI_ToolBar()$/;"	f	class:GUI_ToolBar
~GUI_Window	.\GUI\GUI_Window.cpp	/^GUI_Window::~GUI_Window()$/;"	f	class:GUI_Window
~GUI_Window_DND	.\GUI\GUI_Window.cpp	/^GUI_Window_DND::~GUI_Window_DND()$/;"	f	class:GUI_Window_DND
~GroupNode	.\XPTools\AddObjects.cpp	/^GroupNode::~GroupNode()$/;"	f	class:GroupNode
~HTTPConnection	.\Network\HTTPClient.cpp	/^HTTPConnection::~HTTPConnection()$/;"	f	class:HTTPConnection
~HTTPRequest	.\Network\HTTPClient.cpp	/^HTTPRequest::~HTTPRequest()$/;"	f	class:HTTPRequest
~Initializer	.\linuxinit\initializer.cpp	/^Initializer::~Initializer()$/;"	f	class:Initializer
~InstallerChunk	.\Installer\InstallerProcs.cpp	/^InstallerChunk::~InstallerChunk() { if (mem) free(mem); }$/;"	f	class:InstallerChunk
~MemFileReader	.\XESCore\SimpleIO.cpp	/^MemFileReader::~MemFileReader()$/;"	f	class:MemFileReader
~MemJASGeoFile	.\Utils\GISUtils.cpp	/^	~MemJASGeoFile() { }$/;"	f	struct:MemJASGeoFile
~OECommand	.\ObjEdit\OE_DataModel.h	/^			~OECommand() { if (mCommited) OE_CompleteCommand(); else OE_AbortCommand(); }$/;"	f	struct:OECommand
~OE_DirectEdPane	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_DirectEdPane::~OE_DirectEdPane()$/;"	f	class:OE_DirectEdPane
~OE_Notifiable	.\ObjEdit\OE_Notify.cpp	/^OE_Notifiable::~OE_Notifiable()$/;"	f	class:OE_Notifiable
~OE_Pane	.\ObjEdit\OE_Pane.cpp	/^OE_Pane::~OE_Pane()$/;"	f	class:OE_Pane
~OE_PatchEdPane	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_PatchEdPane::~OE_PatchEdPane()$/;"	f	class:OE_PatchEdPane
~OE_PatchList	.\ObjEdit\OE_PatchList.cpp	/^OE_PatchList::~OE_PatchList()$/;"	f	class:OE_PatchList
~OE_PatchTable	.\ObjEdit\OE_PatchList.cpp	/^OE_PatchTable::~OE_PatchTable()$/;"	f	class:OE_PatchTable
~OE_Preview	.\ObjEdit\OE_Preview.cpp	/^OE_Preview::~OE_Preview()$/;"	f	class:OE_Preview
~OE_ProjectionMgr	.\ObjEdit\OE_ProjectionMgr.cpp	/^OE_ProjectionMgr::~OE_ProjectionMgr()$/;"	f	class:OE_ProjectionMgr
~OE_Scroller	.\ObjEdit\OE_Scroller.cpp	/^OE_Scroller::~OE_Scroller()$/;"	f	class:OE_Scroller
~OE_TablePane	.\ObjEdit\OE_TablePane.cpp	/^OE_TablePane::~OE_TablePane()$/;"	f	class:OE_TablePane
~OE_TexEdPane	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_TexEdPane::~OE_TexEdPane()$/;"	f	class:OE_TexEdPane
~OE_TexEdWindow	.\ObjEdit\OE_TexEdWindow.cpp	/^OE_TexEdWindow::~OE_TexEdWindow()$/;"	f	class:OE_TexEdWindow
~OGLE	.\OGLE\ogle.cpp	/^OGLE::~OGLE()$/;"	f	class:OGLE
~ObjPointPool	.\Obj\ObjPointPool.cpp	/^ObjPointPool::~ObjPointPool()$/;"	f	class:ObjPointPool
~ObjectNode	.\XPTools\AddObjects.cpp	/^ObjectNode::~ObjectNode()$/;"	f	class:ObjectNode
~PCSBSocket	.\Network\PCSBSocket.lin.cpp	/^PCSBSocket::~PCSBSocket()$/;"	f	class:PCSBSocket
~PCSBSocket	.\Network\PCSBSocket.win.cpp	/^PCSBSocket::~PCSBSocket()$/;"	f	class:PCSBSocket
~PCSBSocketUDP	.\Network\PCSBSocketUDP.lin.cpp	/^PCSBSocketUDP::~PCSBSocketUDP()$/;"	f	class:PCSBSocketUDP
~PCSBSocketUDP	.\Network\PCSBSocketUDP.win.cpp	/^PCSBSocketUDP::~PCSBSocketUDP()$/;"	f	class:PCSBSocketUDP
~PerfTimer	.\Utils\PerfUtils.h	/^	~PerfTimer()$/;"	f	class:PerfTimer
~QuadTree	.\Utils\QuadTree.h	/^QuadTree<__T, __N>::~QuadTree()$/;"	f	class:QuadTree
~RAII_CURL_HNDL	.\WEDImportExport\WED_GatewayImport.cpp	/^	~RAII_CURL_HNDL()$/;"	f	class:RAII_CURL_HNDL
~RAII_file	.\WEDImportExport\WED_GatewayImport.cpp	/^ ~RAII_file()$/;"	f	class:RAII_file
~RF_Application	.\RenderFarmUI\RF_Application.cpp	/^RF_Application::~RF_Application()$/;"	f	class:RF_Application
~RF_BezierTestTool	.\RenderFarmUI\RF_BezierTestTool.cpp	/^RF_BezierTestTool::~RF_BezierTestTool()$/;"	f	class:RF_BezierTestTool
~RF_CropTool	.\RenderFarmUI\RF_CropTool.cpp	/^RF_CropTool::~RF_CropTool()$/;"	f	class:RF_CropTool
~RF_ImageTool	.\RenderFarmUI\RF_ImageTool.cpp	/^RF_ImageTool::~RF_ImageTool()$/;"	f	class:RF_ImageTool
~RF_MapTool	.\RenderFarmUI\RF_MapTool.cpp	/^RF_MapTool::~RF_MapTool()$/;"	f	class:RF_MapTool
~RF_MapView	.\RenderFarmUI\RF_MapView.cpp	/^RF_MapView::~RF_MapView()$/;"	f	class:RF_MapView
~RF_MeshTester	.\RenderFarmUI\RF_MeshTester.cpp	/^RF_MeshTester::~RF_MeshTester()$/;"	f	class:RF_MeshTester
~RF_Notifiable	.\RenderFarmUI\RF_Notify.cpp	/^RF_Notifiable::~RF_Notifiable()$/;"	f	class:RF_Notifiable
~RF_Pane	.\RenderFarmUI\RF_Pane.cpp	/^RF_Pane::~RF_Pane()$/;"	f	class:RF_Pane
~RF_TerraTool	.\RenderFarmUI\RF_TerraTool.cpp	/^RF_TerraTool::~RF_TerraTool()$/;"	f	class:RF_TerraTool
~RF_TopoTester	.\RenderFarmUI\RF_TopoTester.cpp	/^RF_TopoTester::~RF_TopoTester()$/;"	f	class:RF_TopoTester
~RF_TriTestTool	.\RenderFarmUI\RF_TriTestTool.cpp	/^RF_TriTestTool::~RF_TriTestTool()$/;"	f	class:RF_TriTestTool
~RTree2	.\Utils\RTree2.h	/^	~RTree2() { if(root) delete root; }$/;"	f	class:RTree2
~SDTSDirectory	.\SDTS\SDTSRead.cpp	/^SDTSDirectory::~SDTSDirectory()$/;"	f	class:SDTSDirectory
~SDTSModuleIterator	.\SDTS\SDTSRead.cpp	/^SDTSModuleIterator::~SDTSModuleIterator()$/;"	f	class:SDTSModuleIterator
~SK_Edge	.\Utils\Skeleton.cpp	/^	~SK_Edge() { prev = DELETED_VERTEX; next = DELETED_VERTEX; owner = DELETED_POLYGON; }$/;"	f	struct:SK_Edge
~SK_Event	.\Utils\Skeleton.cpp	/^	~SK_Event() { e1 = DELETED_EDGE; e2 = DELETED_EDGE; e3 = DELETED_EDGE; }$/;"	f	struct:SK_Event
~SK_Polygon	.\Utils\Skeleton.cpp	/^	~SK_Polygon() { ccb = DELETED_EDGE; parent = DELETED_POLYGON; }$/;"	f	struct:SK_Polygon
~SK_Vertex	.\Utils\Skeleton.cpp	/^	~SK_Vertex() { prev = DELETED_EDGE; next = DELETED_EDGE; owner = DELETED_POLYGON; }$/;"	f	struct:SK_Vertex
~SceneryNode	.\XPTools\AddObjects.cpp	/^SceneryNode::~SceneryNode()$/;"	f	class:SceneryNode
~StAtomWriter	.\Utils\XChunkyFileUtils.cpp	/^StAtomWriter::~StAtomWriter()$/;"	f	class:StAtomWriter
~StCloseAndKill	.\DSF\DSFLibWrite.cpp	/^	~StCloseAndKill() { if(f_) { fclose(f_); FILE_delete_file(p_.c_str(), false); } }$/;"	f	struct:StCloseAndKill
~StElapsedTime	.\Utils\PerfUtils.h	/^	~StElapsedTime()$/;"	f	class:StElapsedTime
~StGlobalBlock	.\GUI\GUI_Clipboard.cpp	/^	~StGlobalBlock()		{ if (handle) GlobalFree(handle); }$/;"	f	struct:StGlobalBlock
~StGlobalLock	.\GUI\GUI_Clipboard.cpp	/^	~StGlobalLock()			 { if (ptr) GlobalUnlock(handle); }$/;"	f	struct:StGlobalLock
~StMemFile	.\SDTS\SDTSReadTVP.cpp	/^	~StMemFile() { if (mf_) MemFile_Close(mf_); }$/;"	f	struct:StMemFile
~StMemFile	.\VPF\VPFImport.cpp	/^	~StMemFile() { if (f_) MemFile_Close(f_); }$/;"	f	struct:StMemFile
~StNukeWriter	.\XESCore\DSFBuilder.cpp	/^	~StNukeWriter() { if (writer_) DSFDestroyWriter(writer_); }$/;"	f	struct:StNukeWriter
~StOpenClipboard	.\GUI\GUI_Clipboard.cpp	/^	~StOpenClipboard() { if (is_open) CloseClipboard(); }$/;"	f	struct:StOpenClipboard
~StProfile	.\Utils\PerfUtils.h	/^	~StProfile() { ProfilerSetStatus(0); ProfilerDump(fname_); ProfilerClear(); };$/;"	f	struct:StProfile
~StProfileInit	.\Utils\PerfUtils.h	/^	~StProfileInit() { ProfilerTerm(); }$/;"	f	struct:StProfileInit
~StRestoreChunk	.\Utils\BWImage.h	/^	~StRestoreChunk()$/;"	f	struct:StRestoreChunk
~StTextFileScanner	.\Utils\XUtils.cpp	/^StTextFileScanner::~StTextFileScanner()$/;"	f	class:StTextFileScanner
~StTiffMemFile	.\XESCore\DEMIO.cpp	/^	~StTiffMemFile() { if (file) MemFile_Close(file); }$/;"	f	struct:StTiffMemFile
~StyledStreamWriter	.\lib_json\include\json\writer.h	/^      ~StyledStreamWriter(){}$/;"	f	class:Json::StyledStreamWriter
~StyledWriter	.\lib_json\include\json\writer.h	/^      virtual ~StyledWriter(){}$/;"	f	class:Json::StyledWriter
~SwitchNode	.\XPTools\AddObjects.cpp	/^SwitchNode::~SwitchNode()$/;"	f	class:SwitchNode
~TCL_linked_vard	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vard::~TCL_linked_vard()$/;"	f	class:TCL_linked_vard
~TCL_linked_vardv	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vardv::~TCL_linked_vardv()$/;"	f	class:TCL_linked_vardv
~TCL_linked_vari	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vari::~TCL_linked_vari()$/;"	f	class:TCL_linked_vari
~TCL_linked_variv	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_variv::~TCL_linked_variv()$/;"	f	class:TCL_linked_variv
~TCL_linked_vars	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_vars::~TCL_linked_vars()$/;"	f	class:TCL_linked_vars
~TCL_linked_varsv	.\AC3DPlugins\tcl_utils.cpp	/^TCL_linked_varsv::~TCL_linked_varsv()$/;"	f	class:TCL_linked_varsv
~TestCase	.\lib_json\src\test_lib_json\jsontest.cpp	/^TestCase::~TestCase()$/;"	f	class:JsonTest::TestCase
~TriFanBuilder	.\XESCore\TriFan.cpp	/^TriFanBuilder::~TriFanBuilder()$/;"	f	class:TriFanBuilder
~Value	.\lib_json\src\lib_json\json_value.cpp	/^Value::~Value()$/;"	f	class:Json::Value
~WED_ATCFlow	.\WEDEntities\WED_ATCFlow.cpp	/^WED_ATCFlow::~WED_ATCFlow()$/;"	f	class:WED_ATCFlow
~WED_ATCFrequency	.\WEDEntities\WED_ATCFrequency.cpp	/^WED_ATCFrequency::~WED_ATCFrequency()$/;"	f	class:WED_ATCFrequency
~WED_ATCRunwayUse	.\WEDEntities\WED_ATCRunwayUse.cpp	/^WED_ATCRunwayUse::~WED_ATCRunwayUse()$/;"	f	class:WED_ATCRunwayUse
~WED_ATCTimeRule	.\WEDEntities\WED_ATCTimeRule.cpp	/^WED_ATCTimeRule::~WED_ATCTimeRule()$/;"	f	class:WED_ATCTimeRule
~WED_ATCWindRule	.\WEDEntities\WED_ATCWindRule.cpp	/^WED_ATCWindRule::~WED_ATCWindRule()$/;"	f	class:WED_ATCWindRule
~WED_AboutBox	.\WEDWindows\WED_AboutBox.cpp	/^WED_AboutBox::~WED_AboutBox()$/;"	f	class:WED_AboutBox
~WED_Airport	.\WEDEntities\WED_Airport.cpp	/^WED_Airport::~WED_Airport()$/;"	f	class:WED_Airport
~WED_AirportBeacon	.\WEDEntities\WED_AirportBeacon.cpp	/^WED_AirportBeacon::~WED_AirportBeacon()$/;"	f	class:WED_AirportBeacon
~WED_AirportBoundary	.\WEDEntities\WED_AirportBoundary.cpp	/^WED_AirportBoundary::~WED_AirportBoundary()$/;"	f	class:WED_AirportBoundary
~WED_AirportChain	.\WEDEntities\WED_AirportChain.cpp	/^WED_AirportChain::~WED_AirportChain()$/;"	f	class:WED_AirportChain
~WED_AirportNode	.\WEDEntities\WED_AirportNode.cpp	/^WED_AirportNode::~WED_AirportNode()$/;"	f	class:WED_AirportNode
~WED_AirportSign	.\WEDEntities\WED_AirportSign.cpp	/^WED_AirportSign::~WED_AirportSign()$/;"	f	class:WED_AirportSign
~WED_Application	.\WEDCore\WED_Application.cpp	/^WED_Application::~WED_Application()$/;"	f	class:WED_Application
~WED_AptImportDialog	.\WEDImportExport\WED_AptImportDialog.cpp	/^WED_AptImportDialog::~WED_AptImportDialog()$/;"	f	class:WED_AptImportDialog
~WED_AptTable	.\WEDImportExport\WED_AptTable.cpp	/^WED_AptTable::~WED_AptTable()$/;"	f	class:WED_AptTable
~WED_Archive	.\WEDCore\WED_Archive.cpp	/^WED_Archive::~WED_Archive()$/;"	f	class:WED_Archive
~WED_Buffer	.\WEDCore\WED_Buffer.cpp	/^WED_Buffer::~WED_Buffer()$/;"	f	class:WED_Buffer
~WED_Connection	.\WEDNetwork\WED_Connection.cpp	/^WED_Connection::~WED_Connection()$/;"	f	class:WED_Connection
~WED_CreateBoxTool	.\WEDMap\WED_CreateBoxTool.cpp	/^WED_CreateBoxTool::~WED_CreateBoxTool()$/;"	f	class:WED_CreateBoxTool
~WED_CreateEdgeTool	.\WEDMap\WED_CreateEdgeTool.cpp	/^WED_CreateEdgeTool::~WED_CreateEdgeTool()$/;"	f	class:WED_CreateEdgeTool
~WED_CreateLineTool	.\WEDMap\WED_CreateLineTool.cpp	/^WED_CreateLineTool::~WED_CreateLineTool()$/;"	f	class:WED_CreateLineTool
~WED_CreatePointTool	.\WEDMap\WED_CreatePointTool.cpp	/^WED_CreatePointTool::~WED_CreatePointTool()$/;"	f	class:WED_CreatePointTool
~WED_CreatePolygonTool	.\WEDMap\WED_CreatePolygonTool.cpp	/^WED_CreatePolygonTool::~WED_CreatePolygonTool()$/;"	f	class:WED_CreatePolygonTool
~WED_CreateToolBase	.\WEDMap\WED_CreateToolBase.cpp	/^WED_CreateToolBase::~WED_CreateToolBase()$/;"	f	class:WED_CreateToolBase
~WED_DebugLayer	.\WEDMap\WED_DebugLayer.cpp	/^WED_DebugLayer::~WED_DebugLayer()$/;"	f	class:WED_DebugLayer
~WED_Document	.\WEDCore\WED_Document.cpp	/^WED_Document::~WED_Document()$/;"	f	class:WED_Document
~WED_DocumentWindow	.\WEDWindows\WED_DocumentWindow.cpp	/^WED_DocumentWindow::~WED_DocumentWindow()$/;"	f	class:WED_DocumentWindow
~WED_DrapedOrthophoto	.\WEDEntities\WED_DrapedOrthophoto.cpp	/^WED_DrapedOrthophoto::~WED_DrapedOrthophoto()$/;"	f	class:WED_DrapedOrthophoto
~WED_DrapedOrthophotoBoundary	.\WEDEntities\WED_DrapedOrthophotoBoundary.cpp	/^WED_DrapedOrthophotoBoundary::~WED_DrapedOrthophotoBoundary()$/;"	f	class:WED_DrapedOrthophotoBoundary
~WED_Entity	.\WEDEntities\WED_Entity.cpp	/^WED_Entity::~WED_Entity()$/;"	f	class:WED_Entity
~WED_ExclusionZone	.\WEDEntities\WED_ExclusionZone.cpp	/^WED_ExclusionZone::~WED_ExclusionZone()$/;"	f	class:WED_ExclusionZone
~WED_FacadeNode	.\WEDEntities\WED_FacadeNode.cpp	/^WED_FacadeNode::~WED_FacadeNode()$/;"	f	class:WED_FacadeNode
~WED_FacadePlacement	.\WEDEntities\WED_FacadePlacement.cpp	/^WED_FacadePlacement::~WED_FacadePlacement()$/;"	f	class:WED_FacadePlacement
~WED_FacadeRing	.\WEDEntities\WED_FacadeRing.cpp	/^WED_FacadeRing::~WED_FacadeRing()$/;"	f	class:WED_FacadeRing
~WED_FastBufferGroup	.\WEDCore\WED_FastBuffer.cpp	/^WED_FastBufferGroup::~WED_FastBufferGroup()$/;"	f	class:WED_FastBufferGroup
~WED_ForestPlacement	.\WEDEntities\WED_ForestPlacement.cpp	/^WED_ForestPlacement::~WED_ForestPlacement()$/;"	f	class:WED_ForestPlacement
~WED_ForestRing	.\WEDEntities\WED_ForestRing.cpp	/^WED_ForestRing::~WED_ForestRing()$/;"	f	class:WED_ForestRing
~WED_GISBoundingBox	.\WEDEntities\WED_GISBoundingBox.cpp	/^WED_GISBoundingBox::~WED_GISBoundingBox()$/;"	f	class:WED_GISBoundingBox
~WED_GISChain	.\WEDEntities\WED_GISChain.cpp	/^WED_GISChain::~WED_GISChain()$/;"	f	class:WED_GISChain
~WED_GISComposite	.\WEDEntities\WED_GISComposite.cpp	/^WED_GISComposite::~WED_GISComposite()$/;"	f	class:WED_GISComposite
~WED_GISEdge	.\WEDEntities\WED_GISEdge.cpp	/^WED_GISEdge::~WED_GISEdge()$/;"	f	class:WED_GISEdge
~WED_GISLine	.\WEDEntities\WED_GISLine.cpp	/^WED_GISLine::~WED_GISLine()$/;"	f	class:WED_GISLine
~WED_GISLine_Width	.\WEDEntities\WED_GISLine_Width.cpp	/^WED_GISLine_Width::~WED_GISLine_Width()$/;"	f	class:WED_GISLine_Width
~WED_GISPoint	.\WEDEntities\WED_GISPoint.cpp	/^WED_GISPoint::~WED_GISPoint()$/;"	f	class:WED_GISPoint
~WED_GISPoint_Bezier	.\WEDEntities\WED_GISPoint_Bezier.cpp	/^WED_GISPoint_Bezier::~WED_GISPoint_Bezier()$/;"	f	class:WED_GISPoint_Bezier
~WED_GISPoint_Heading	.\WEDEntities\WED_GISPoint_Heading.cpp	/^WED_GISPoint_Heading::~WED_GISPoint_Heading()$/;"	f	class:WED_GISPoint_Heading
~WED_GISPoint_HeadingWidthLength	.\WEDEntities\WED_GISPoint_HeadingWidthLength.cpp	/^WED_GISPoint_HeadingWidthLength::~WED_GISPoint_HeadingWidthLength()$/;"	f	class:WED_GISPoint_HeadingWidthLength
~WED_GISPolygon	.\WEDEntities\WED_GISPolygon.cpp	/^WED_GISPolygon::~WED_GISPolygon()$/;"	f	class:WED_GISPolygon
~WED_GatewayImportDialog	.\WEDImportExport\WED_GatewayImport.cpp	/^WED_GatewayImportDialog::~WED_GatewayImportDialog()$/;"	f	class:WED_GatewayImportDialog
~WED_Group	.\WEDEntities\WED_Group.cpp	/^WED_Group::~WED_Group()$/;"	f	class:WED_Group
~WED_HandleToolBase	.\WEDMap\WED_HandleToolBase.cpp	/^WED_HandleToolBase::~WED_HandleToolBase()$/;"	f	class:WED_HandleToolBase
~WED_Helipad	.\WEDEntities\WED_Helipad.cpp	/^WED_Helipad::~WED_Helipad()$/;"	f	class:WED_Helipad
~WED_ICAOTable	.\WEDImportExport\WED_ICAOTable.cpp	/^WED_ICAOTable::~WED_ICAOTable()$/;"	f	class:WED_ICAOTable
~WED_KeyObjects	.\WEDEntities\WED_KeyObjects.cpp	/^WED_KeyObjects::~WED_KeyObjects()$/;"	f	class:WED_KeyObjects
~WED_LibraryListAdapter	.\WEDLibrary\WED_LibraryListAdapter.cpp	/^WED_LibraryListAdapter::~WED_LibraryListAdapter()$/;"	f	class:WED_LibraryListAdapter
~WED_LibraryMgr	.\WEDCore\WED_LibraryMgr.cpp	/^WED_LibraryMgr::~WED_LibraryMgr()$/;"	f	class:WED_LibraryMgr
~WED_LibraryPane	.\WEDLibrary\WED_LibraryPane.cpp	/^WED_LibraryPane::~WED_LibraryPane()$/;"	f	class:WED_LibraryPane
~WED_LightFixture	.\WEDEntities\WED_LightFixture.cpp	/^WED_LightFixture::~WED_LightFixture()$/;"	f	class:WED_LightFixture
~WED_LinePlacement	.\WEDEntities\WED_LinePlacement.cpp	/^WED_LinePlacement::~WED_LinePlacement()$/;"	f	class:WED_LinePlacement
~WED_Map	.\WEDMap\WED_Map.cpp	/^WED_Map::~WED_Map()$/;"	f	class:WED_Map
~WED_MapBkgnd	.\WEDMap\WED_MapBkgnd.cpp	/^WED_MapBkgnd::~WED_MapBkgnd()$/;"	f	class:WED_MapBkgnd
~WED_MapLayer	.\WEDMap\WED_MapLayer.cpp	/^WED_MapLayer::~WED_MapLayer()$/;"	f	class:WED_MapLayer
~WED_MapPane	.\WEDMap\WED_MapPane.cpp	/^WED_MapPane::~WED_MapPane()$/;"	f	class:WED_MapPane
~WED_MapToolNew	.\WEDMap\WED_MapToolNew.cpp	/^WED_MapToolNew::~WED_MapToolNew()$/;"	f	class:WED_MapToolNew
~WED_MapZoomerNew	.\WEDMap\WED_MapZoomerNew.cpp	/^WED_MapZoomerNew::~WED_MapZoomerNew()$/;"	f	class:WED_MapZoomerNew
~WED_MarqueeTool	.\WEDMap\WED_MarqueeTool.cpp	/^WED_MarqueeTool::~WED_MarqueeTool()$/;"	f	class:WED_MarqueeTool
~WED_NWInfoLayer	.\WEDNetwork\WED_NWInfoLayer.cpp	/^WED_NWInfoLayer::~WED_NWInfoLayer()$/;"	f	class:WED_NWInfoLayer
~WED_NWLinkAdapter	.\WEDNetwork\WED_NWLinkAdapter.cpp	/^WED_NWLinkAdapter::~WED_NWLinkAdapter()$/;"	f	class:WED_NWLinkAdapter
~WED_ObjPlacement	.\WEDEntities\WED_ObjPlacement.cpp	/^WED_ObjPlacement::~WED_ObjPlacement()$/;"	f	class:WED_ObjPlacement
~WED_OverlayImage	.\WEDEntities\WED_OverlayImage.cpp	/^WED_OverlayImage::~WED_OverlayImage()$/;"	f	class:WED_OverlayImage
~WED_Package	.\WEDCore\WED_Package.cpp	/^WED_Package::~WED_Package()$/;"	f	class:WED_Package
~WED_PackageListAdapter	.\WEDWindows\WED_PackageListAdapter.cpp	/^WED_PackageListAdapter::~WED_PackageListAdapter()$/;"	f	class:WED_PackageListAdapter
~WED_PackageMgr	.\WEDCore\WED_PackageMgr.cpp	/^WED_PackageMgr::~WED_PackageMgr()$/;"	f	class:WED_PackageMgr
~WED_PackageStatusPane	.\WEDWindows\WED_PackageStatusPane.cpp	/^WED_PackageStatusPane::~WED_PackageStatusPane()$/;"	f	class:WED_PackageStatusPane
~WED_PackageWindow	.\WEDWindows\WED_PackageWindow.cpp	/^WED_PackageWindow::~WED_PackageWindow()$/;"	f	class:WED_PackageWindow
~WED_Persistent	.\WEDCore\WED_Persistent.cpp	/^WED_Persistent::~WED_Persistent()$/;"	f	class:WED_Persistent
~WED_PolygonPlacement	.\WEDEntities\WED_PolygonPlacement.cpp	/^WED_PolygonPlacement::~WED_PolygonPlacement()$/;"	f	class:WED_PolygonPlacement
~WED_PreviewItem	.\WEDMap\WED_PreviewLayer.h	/^	virtual ~WED_PreviewItem() { }$/;"	f	struct:WED_PreviewItem
~WED_PreviewLayer	.\WEDMap\WED_PreviewLayer.cpp	/^WED_PreviewLayer::~WED_PreviewLayer()$/;"	f	class:WED_PreviewLayer
~WED_Properties	.\WEDCore\WED_Properties.cpp	/^WED_Properties::~WED_Properties()$/;"	f	class:WED_Properties
~WED_PropertyPane	.\WEDProperties\WED_PropertyPane.cpp	/^WED_PropertyPane::~WED_PropertyPane()$/;"	f	class:WED_PropertyPane
~WED_PropertyTable	.\WEDProperties\WED_PropertyTable.cpp	/^WED_PropertyTable::~WED_PropertyTable()$/;"	f	class:WED_PropertyTable
~WED_RampPosition	.\WEDEntities\WED_RampPosition.cpp	/^WED_RampPosition::~WED_RampPosition()$/;"	f	class:WED_RampPosition
~WED_ResourceMgr	.\WEDCore\WED_ResourceMgr.cpp	/^WED_ResourceMgr::~WED_ResourceMgr()$/;"	f	class:WED_ResourceMgr
~WED_Ring	.\WEDEntities\WED_Ring.cpp	/^WED_Ring::~WED_Ring()$/;"	f	class:WED_Ring
~WED_RoadEdge	.\WEDEntities\WED_RoadEdge.cpp	/^WED_RoadEdge::~WED_RoadEdge()$/;"	f	class:WED_RoadEdge
~WED_Root	.\WEDEntities\WED_Root.cpp	/^WED_Root::~WED_Root()$/;"	f	class:WED_Root
~WED_Runway	.\WEDEntities\WED_Runway.cpp	/^WED_Runway::~WED_Runway()$/;"	f	class:WED_Runway
~WED_RunwayNode	.\WEDEntities\WED_RunwayNode.cpp	/^WED_RunwayNode::~WED_RunwayNode()$/;"	f	class:WED_RunwayNode
~WED_Sealane	.\WEDEntities\WED_Sealane.cpp	/^WED_Sealane::~WED_Sealane()$/;"	f	class:WED_Sealane
~WED_Select	.\WEDEntities\WED_Select.cpp	/^WED_Select::~WED_Select()$/;"	f	class:WED_Select
~WED_Server	.\WEDNetwork\WED_Server.cpp	/^WED_Server::~WED_Server()$/;"	f	class:WED_Server
~WED_Sign_Parser	.\WEDCore\WED_Sign_Parser.cpp	/^WED_Sign_Parser::~WED_Sign_Parser()$/;"	f	class:WED_Sign_Parser
~WED_SimpleBezierBoundaryNode	.\WEDEntities\WED_SimpleBezierBoundaryNode.cpp	/^WED_SimpleBezierBoundaryNode::~WED_SimpleBezierBoundaryNode()$/;"	f	class:WED_SimpleBezierBoundaryNode
~WED_SimpleBoundaryNode	.\WEDEntities\WED_SimpleBoundaryNode.cpp	/^WED_SimpleBoundaryNode::~WED_SimpleBoundaryNode()$/;"	f	class:WED_SimpleBoundaryNode
~WED_StartWindow	.\WEDWindows\WED_StartWindow.cpp	/^WED_StartWindow::~WED_StartWindow()$/;"	f	class:WED_StartWindow
~WED_StringPlacement	.\WEDEntities\WED_StringPlacement.cpp	/^WED_StringPlacement::~WED_StringPlacement()$/;"	f	class:WED_StringPlacement
~WED_StructureLayer	.\WEDMap\WED_StructureLayer.cpp	/^WED_StructureLayer::~WED_StructureLayer()$/;"	f	class:WED_StructureLayer
~WED_TCE	.\WEDTCE\WED_TCE.cpp	/^WED_TCE::~WED_TCE()$/;"	f	class:WED_TCE
~WED_TCEDebugLayer	.\WEDCore\WED_TCEDebugLayer.cpp	/^WED_TCEDebugLayer::~WED_TCEDebugLayer()$/;"	f	class:WED_TCEDebugLayer
~WED_TCELayer	.\WEDTCE\WED_TCELayer.cpp	/^WED_TCELayer::~WED_TCELayer()$/;"	f	class:WED_TCELayer
~WED_TCEMarqueeTool	.\WEDTCE\WED_TCEMarqueeTool.cpp	/^WED_TCEMarqueeTool::~WED_TCEMarqueeTool()$/;"	f	class:WED_TCEMarqueeTool
~WED_TCEPane	.\WEDTCE\WED_TCEPane.cpp	/^WED_TCEPane::~WED_TCEPane()$/;"	f	class:WED_TCEPane
~WED_TCEToolAdapter	.\WEDTCE\WED_TCEToolAdapter.cpp	/^WED_TCEToolAdapter::~WED_TCEToolAdapter()$/;"	f	class:WED_TCEToolAdapter
~WED_TCEToolNew	.\WEDTCE\WED_TCEToolNew.cpp	/^WED_TCEToolNew::~WED_TCEToolNew()$/;"	f	class:WED_TCEToolNew
~WED_TCEVertexTool	.\WEDTCE\WED_TCEVertexTool.cpp	/^WED_TCEVertexTool::~WED_TCEVertexTool()$/;"	f	class:WED_TCEVertexTool
~WED_TaxiRoute	.\WEDEntities\WED_TaxiRoute.cpp	/^WED_TaxiRoute::~WED_TaxiRoute()$/;"	f	class:WED_TaxiRoute
~WED_TaxiRouteNode	.\WEDEntities\WED_TaxiRouteNode.cpp	/^WED_TaxiRouteNode::~WED_TaxiRouteNode()$/;"	f	class:WED_TaxiRouteNode
~WED_Taxiway	.\WEDEntities\WED_Taxiway.cpp	/^WED_Taxiway::~WED_Taxiway()$/;"	f	class:WED_Taxiway
~WED_TerraserverLayer	.\WEDMap\WED_TerraserverLayer.cpp	/^WED_TerraserverLayer::~WED_TerraserverLayer()$/;"	f	class:WED_TerraserverLayer
~WED_TexMgr	.\WEDCore\WED_TexMgr.cpp	/^WED_TexMgr::~WED_TexMgr()$/;"	f	class:WED_TexMgr
~WED_TextureBezierNode	.\WEDEntities\WED_TextureBezierNode.cpp	/^WED_TextureBezierNode::~WED_TextureBezierNode()$/;"	f	class:WED_TextureBezierNode
~WED_TextureNode	.\WEDEntities\WED_TextureNode.cpp	/^WED_TextureNode::~WED_TextureNode()$/;"	f	class:WED_TextureNode
~WED_Thing	.\WEDEntities\WED_Thing.cpp	/^WED_Thing::~WED_Thing()$/;"	f	class:WED_Thing
~WED_ToolInfoAdapter	.\WEDMap\WED_ToolInfoAdapter.cpp	/^WED_ToolInfoAdapter::~WED_ToolInfoAdapter()$/;"	f	class:WED_ToolInfoAdapter
~WED_TowerViewpoint	.\WEDEntities\WED_TowerViewpoint.cpp	/^WED_TowerViewpoint::~WED_TowerViewpoint()$/;"	f	class:WED_TowerViewpoint
~WED_UndoLayer	.\WEDCore\WED_UndoLayer.cpp	/^WED_UndoLayer::~WED_UndoLayer(void)$/;"	f	class:WED_UndoLayer
~WED_UndoMgr	.\WEDCore\WED_UndoMgr.cpp	/^WED_UndoMgr::~WED_UndoMgr()$/;"	f	class:WED_UndoMgr
~WED_VerTable	.\WEDImportExport\WED_VerTable.cpp	/^WED_VerTable::~WED_VerTable()$/;"	f	class:WED_VerTable
~WED_VertexTool	.\WEDMap\WED_VertexTool.cpp	/^WED_VertexTool::~WED_VertexTool()$/;"	f	class:WED_VertexTool
~WED_Windsock	.\WEDEntities\WED_Windsock.cpp	/^WED_Windsock::~WED_Windsock()$/;"	f	class:WED_Windsock
~WED_WorldMapLayer	.\WEDMap\WED_WorldMapLayer.cpp	/^WED_WorldMapLayer::~WED_WorldMapLayer()$/;"	f	class:WED_WorldMapLayer
~WED_XMLElement	.\WEDCore\WED_XMLWriter.cpp	/^WED_XMLElement::~WED_XMLElement()$/;"	f	class:WED_XMLElement
~WED_XMLReader	.\WEDCore\WED_XMLReader.cpp	/^WED_XMLReader::~WED_XMLReader()$/;"	f	class:WED_XMLReader
~WED_XPluginCamera	.\WEDXPlugin\WED_XPluginCamera.cpp	/^WED_XPluginCamera::~WED_XPluginCamera()$/;"	f	class:WED_XPluginCamera
~WED_XPluginClient	.\WEDXPlugin\WED_XPluginClient.cpp	/^WED_XPluginClient::~WED_XPluginClient()$/;"	f	class:WED_XPluginClient
~WED_XPluginEntity	.\WEDXPlugin\WED_XPluginEntity.cpp	/^WED_XPluginEntity::~WED_XPluginEntity()$/;"	f	class:WED_XPluginEntity
~WED_XPluginMgr	.\WEDXPlugin\WED_XPluginMgr.cpp	/^WED_XPluginMgr::~WED_XPluginMgr()$/;"	f	class:WED_XPluginMgr
~WED_XPluginObject	.\WEDXPlugin\WED_XPluginObject.cpp	/^WED_XPluginObject::~WED_XPluginObject()$/;"	f	class:WED_XPluginObject
~Writer	.\lib_json\src\lib_json\json_writer.cpp	/^Writer::~Writer()$/;"	f	class:Json::Writer
~WriterBuffer	.\XESCore\SimpleIO.h	/^	~WriterBuffer()$/;"	f	class:WriterBuffer
~XCull	.\Utils\XCull_inline.h	/^XCull<__Traits>::~XCull()$/;"	f	class:XCull
~XGrinderWin	.\UI\XGrinderApp.cpp	/^	virtual					~XGrinderWin() { }$/;"	f	class:XGrinderWin
~XMLObject	.\Network\XMLObject.cpp	/^XMLObject::~XMLObject()$/;"	f	class:XMLObject
~XObjBuilder	.\Obj\XObjBuilder.cpp	/^XObjBuilder::~XObjBuilder()$/;"	f	class:XObjBuilder
~XObjWin	.\XPTools\ViewObj.cpp	/^XObjWin::~XObjWin()$/;"	f	class:XObjWin
~XPWidgetWin	.\UI\XPWidgetWin.cpp	/^XPWidgetWin::~XPWidgetWin()$/;"	f	class:XPWidgetWin
~XPointPool	.\Utils\XUtils.cpp	/^XPointPool::~XPointPool()$/;"	f	class:XPointPool
~XPopup	.\UI\XPopup.lin.cpp	/^XPopup::~XPopup()$/;"	f	class:XPopup
~XWin	.\UI\XWin.lin.cpp	/^XWin::~XWin()$/;"	f	class:XWin
~XWin	.\UI\XWin.win.cpp	/^XWin::~XWin()$/;"	f	class:XWin
~XWinGL	.\UI\XWinGL.lin.cpp	/^XWinGL::~XWinGL()$/;"	f	class:XWinGL
~XWinGL	.\UI\XWinGL.win.cpp	/^XWinGL::~XWinGL()$/;"	f	class:XWinGL
~ZipFileWriter	.\XESCore\SimpleIO.cpp	/^ZipFileWriter::~ZipFileWriter()$/;"	f	class:ZipFileWriter
~basic_memstreambuf	.\Utils\MemIStreamBuf.h	/^	virtual ~basic_memstreambuf() { }$/;"	f	class:std::basic_memstreambuf
~curl_http_get_file	.\Network\curl_http.cpp	/^curl_http_get_file::~curl_http_get_file()$/;"	f	class:curl_http_get_file
~deferred_pool	.\XESCore\DSFBuilder.cpp	/^	~deferred_pool()$/;"	f	class:deferred_pool
~glWidget	.\UI\XWinGL.lin.cpp	/^glWidget::~glWidget()$/;"	f	class:glWidget
~mem_block	.\Obj\XObjWriteEmbedded.cpp	/^	~mem_block() { free(begin); }$/;"	f	struct:mem_block
~node	.\Utils\RTree2.h	/^		~node() {	if(left_is_leaf()) delete left_as_leaf(); else delete left_as_node();$/;"	f	struct:RTree2::node
~parser_in_info	.\WEDCore\WED_Sign_Parser.h	/^	~parser_in_info(){}$/;"	f	struct:parser_in_info
~sql_command	.\Utils\SQLUtils.cpp	/^sql_command::~sql_command()$/;"	f	class:sql_command
~sql_db	.\Utils\SQLUtils.cpp	/^sql_db::~sql_db()$/;"	f	class:sql_db
